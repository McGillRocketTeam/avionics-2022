
FC_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000211b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002490  08021360  08021360  00031360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080237f0  080237f0  00040438  2**0
                  CONTENTS
  4 .ARM          00000008  080237f0  080237f0  000337f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080237f8  080237f8  00040438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080237f8  080237f8  000337f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023800  08023800  00033800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  08023804  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040438  2**0
                  CONTENTS
 10 .bss          00008ca4  20000438  20000438  00040438  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  200090dc  200090dc  00040438  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040438  2**0
                  CONTENTS, READONLY
 13 .debug_info   00070c61  00000000  00000000  00040468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ab31  00000000  00000000  000b10c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003f08  00000000  00000000  000bbc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038276  00000000  00000000  000bfb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048cd5  00000000  00000000  000f7d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011689b  00000000  00000000  00140a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002572ee  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00003c00  00000000  00000000  00257348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00012b34  00000000  00000000  0025af48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000438 	.word	0x20000438
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08021348 	.word	0x08021348

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000043c 	.word	0x2000043c
 80001ec:	08021348 	.word	0x08021348

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	461a      	mov	r2, r3
 80010d8:	460b      	mov	r3, r1
 80010da:	72fb      	strb	r3, [r7, #11]
 80010dc:	4613      	mov	r3, r2
 80010de:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	893b      	ldrh	r3, [r7, #8]
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	21d5      	movs	r1, #213	; 0xd5
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f008 fdd8 	bl	8009cac <HAL_I2C_Mem_Write>
  return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b088      	sub	sp, #32
 800110a:	af04      	add	r7, sp, #16
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	461a      	mov	r2, r3
 8001112:	460b      	mov	r3, r1
 8001114:	72fb      	strb	r3, [r7, #11]
 8001116:	4613      	mov	r3, r2
 8001118:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	b29a      	uxth	r2, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	893b      	ldrh	r3, [r7, #8]
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	21d5      	movs	r1, #213	; 0xd5
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f008 feb5 	bl	8009ea0 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b08b      	sub	sp, #44	; 0x2c
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800114c:	4a53      	ldr	r2, [pc, #332]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	2216      	movs	r2, #22
 800115c:	4950      	ldr	r1, [pc, #320]	; (80012a0 <MRT_LSM6DSR_Setup+0x160>)
 800115e:	f00d fefa 	bl	800ef56 <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 8001162:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <MRT_LSM6DSR_Setup+0x164>)
 8001164:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <MRT_LSM6DSR_Setup+0x168>)
 8001168:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800116e:	2064      	movs	r0, #100	; 0x64
 8001170:	f007 fd1a 	bl	8008ba8 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	494c      	ldr	r1, [pc, #304]	; (80012ac <MRT_LSM6DSR_Setup+0x16c>)
 800117a:	4618      	mov	r0, r3
 800117c:	f006 ff52 	bl	8008024 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2215      	movs	r2, #21
 800118a:	4949      	ldr	r1, [pc, #292]	; (80012b0 <MRT_LSM6DSR_Setup+0x170>)
 800118c:	f00d fee3 	bl	800ef56 <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <MRT_LSM6DSR_Setup+0x16c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b6a      	cmp	r3, #106	; 0x6a
 8001196:	d032      	beq.n	80011fe <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 8001198:	4b40      	ldr	r3, [pc, #256]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	2208      	movs	r2, #8
 80011a2:	4944      	ldr	r1, [pc, #272]	; (80012b4 <MRT_LSM6DSR_Setup+0x174>)
 80011a4:	f00d fed7 	bl	800ef56 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	2210      	movs	r2, #16
 80011b2:	4941      	ldr	r1, [pc, #260]	; (80012b8 <MRT_LSM6DSR_Setup+0x178>)
 80011b4:	f00d fecf 	bl	800ef56 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80011b8:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <MRT_LSM6DSR_Setup+0x16c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	493e      	ldr	r1, [pc, #248]	; (80012bc <MRT_LSM6DSR_Setup+0x17c>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f01b fd73 	bl	801ccb0 <siprintf>

			__BKPT();
 80011ca:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f815 	bl	8000204 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f107 0110 	add.w	r1, r7, #16
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	4620      	mov	r0, r4
 80011e8:	f00d feb5 	bl	800ef56 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	2216      	movs	r2, #22
 80011f6:	4932      	ldr	r1, [pc, #200]	; (80012c0 <MRT_LSM6DSR_Setup+0x180>)
 80011f8:	f00d fead 	bl	800ef56 <HAL_UART_Transmit>
		  while(1);
 80011fc:	e7fe      	b.n	80011fc <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	2206      	movs	r2, #6
 8001208:	492e      	ldr	r1, [pc, #184]	; (80012c4 <MRT_LSM6DSR_Setup+0x184>)
 800120a:	f00d fea4 	bl	800ef56 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2101      	movs	r1, #1
 8001214:	4618      	mov	r0, r3
 8001216:	f006 ff16 	bl	8008046 <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f007 fcc3 	bl	8008ba8 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4928      	ldr	r1, [pc, #160]	; (80012c8 <MRT_LSM6DSR_Setup+0x188>)
 8001228:	4618      	mov	r0, r3
 800122a:	f006 ff32 	bl	8008092 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <MRT_LSM6DSR_Setup+0x188>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f5      	bne.n	8001222 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f006 fda1 	bl	8007d84 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2101      	movs	r1, #1
 8001248:	4618      	mov	r0, r3
 800124a:	f006 fb7d 	bl	8007948 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2101      	movs	r1, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fc99 	bl	8007b8c <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f006 fb4b 	bl	80078fc <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	210c      	movs	r1, #12
 800126c:	4618      	mov	r0, r3
 800126e:	f006 fc67 	bl	8007b40 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	2219      	movs	r2, #25
 800127c:	4913      	ldr	r1, [pc, #76]	; (80012cc <MRT_LSM6DSR_Setup+0x18c>)
 800127e:	f00d fe6a 	bl	800ef56 <HAL_UART_Transmit>

	  return lsm_ctx;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	461c      	mov	r4, r3
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800128e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	372c      	adds	r7, #44	; 0x2c
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	bf00      	nop
 800129c:	20005f24 	.word	0x20005f24
 80012a0:	08021360 	.word	0x08021360
 80012a4:	080010cd 	.word	0x080010cd
 80012a8:	08001107 	.word	0x08001107
 80012ac:	20000464 	.word	0x20000464
 80012b0:	08021378 	.word	0x08021378
 80012b4:	08021390 	.word	0x08021390
 80012b8:	0802139c 	.word	0x0802139c
 80012bc:	080213b0 	.word	0x080213b0
 80012c0:	080213b8 	.word	0x080213b8
 80012c4:	080213d0 	.word	0x080213d0
 80012c8:	20000465 	.word	0x20000465
 80012cc:	080213d8 	.word	0x080213d8

080012d0 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	1d3c      	adds	r4, r7, #4
 80012d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012dc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 80012de:	f107 0217 	add.w	r2, r7, #23
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 fd72 	bl	8007dd0 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d02d      	beq.n	800134e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80012f2:	2206      	movs	r2, #6
 80012f4:	2100      	movs	r1, #0
 80012f6:	4818      	ldr	r0, [pc, #96]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 80012f8:	f01a f9de 	bl	801b6b8 <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4916      	ldr	r1, [pc, #88]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001300:	4618      	mov	r0, r3
 8001302:	f006 fe1e 	bl	8007f42 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	4618      	mov	r0, r3
 800130e:	f006 faa9 	bl	8007864 <lsm6dsr_from_fs2g_to_mg>
 8001312:	eef0 7a40 	vmov.f32	s15, s0
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 800131e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	1d1c      	adds	r4, r3, #4
 8001326:	4610      	mov	r0, r2
 8001328:	f006 fa9c 	bl	8007864 <lsm6dsr_from_fs2g_to_mg>
 800132c:	eef0 7a40 	vmov.f32	s15, s0
 8001330:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001336:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f103 0408 	add.w	r4, r3, #8
 8001340:	4610      	mov	r0, r2
 8001342:	f006 fa8f 	bl	8007864 <lsm6dsr_from_fs2g_to_mg>
 8001346:	eef0 7a40 	vmov.f32	s15, s0
 800134a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	20000454 	.word	0x20000454

0800135c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	1d3c      	adds	r4, r7, #4
 8001364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001368:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 800136a:	f107 0217 	add.w	r2, r7, #23
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fd5e 	bl	8007e34 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d012      	beq.n	80013a4 <MRT_LSM6DSR_getTemperature+0x48>
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MRT_LSM6DSR_getTemperature+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4909      	ldr	r1, [pc, #36]	; (80013ac <MRT_LSM6DSR_getTemperature+0x50>)
 8001388:	4618      	mov	r0, r3
 800138a:	f006 fd6c 	bl	8007e66 <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MRT_LSM6DSR_getTemperature+0x50>)
 8001390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001394:	4618      	mov	r0, r3
 8001396:	f006 fa95 	bl	80078c4 <lsm6dsr_from_lsb_to_celsius>
 800139a:	eef0 7a40 	vmov.f32	s15, s0
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	20000462 	.word	0x20000462

080013b0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	1d3c      	adds	r4, r7, #4
 80013b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013bc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80013be:	f107 0217 	add.w	r2, r7, #23
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f006 fd1b 	bl	8007e02 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d02d      	beq.n	800142e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80013d2:	2206      	movs	r2, #6
 80013d4:	2100      	movs	r1, #0
 80013d6:	4818      	ldr	r0, [pc, #96]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013d8:	f01a f96e 	bl	801b6b8 <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4916      	ldr	r1, [pc, #88]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f006 fd63 	bl	8007eac <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 fa51 	bl	8007894 <lsm6dsr_from_fs2000dps_to_mdps>
 80013f2:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013fe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001406:	4610      	mov	r0, r2
 8001408:	f006 fa44 	bl	8007894 <lsm6dsr_from_fs2000dps_to_mdps>
 800140c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001410:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001416:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001420:	4610      	mov	r0, r2
 8001422:	f006 fa37 	bl	8007894 <lsm6dsr_from_fs2000dps_to_mdps>
 8001426:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800142a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	2000045c 	.word	0x2000045c

0800143c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b08d      	sub	sp, #52	; 0x34
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001448:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	2216      	movs	r2, #22
 8001458:	4948      	ldr	r1, [pc, #288]	; (800157c <MRT_LPS22HH_Setup+0x140>)
 800145a:	f00d fd7c 	bl	800ef56 <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800145e:	4b48      	ldr	r3, [pc, #288]	; (8001580 <MRT_LPS22HH_Setup+0x144>)
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 8001462:	4b48      	ldr	r3, [pc, #288]	; (8001584 <MRT_LPS22HH_Setup+0x148>)
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f007 fb9c 	bl	8008ba8 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 8001470:	4b45      	ldr	r3, [pc, #276]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4943      	ldr	r1, [pc, #268]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 800147c:	4618      	mov	r0, r3
 800147e:	f006 f970 	bl	8007762 <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	2216      	movs	r2, #22
 800148c:	493f      	ldr	r1, [pc, #252]	; (800158c <MRT_LPS22HH_Setup+0x150>)
 800148e:	f00d fd62 	bl	800ef56 <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 8001492:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2bb3      	cmp	r3, #179	; 0xb3
 8001498:	d031      	beq.n	80014fe <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	2208      	movs	r2, #8
 80014a4:	493a      	ldr	r1, [pc, #232]	; (8001590 <MRT_LPS22HH_Setup+0x154>)
 80014a6:	f00d fd56 	bl	800ef56 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	2210      	movs	r2, #16
 80014b4:	4937      	ldr	r1, [pc, #220]	; (8001594 <MRT_LPS22HH_Setup+0x158>)
 80014b6:	f00d fd4e 	bl	800ef56 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4934      	ldr	r1, [pc, #208]	; (8001598 <MRT_LPS22HH_Setup+0x15c>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f01b fbf2 	bl	801ccb0 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 80014ce:	681c      	ldr	r4, [r3, #0]
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe fe95 	bl	8000204 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f107 0114 	add.w	r1, r7, #20
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	4620      	mov	r0, r4
 80014e8:	f00d fd35 	bl	800ef56 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	2216      	movs	r2, #22
 80014f6:	4929      	ldr	r1, [pc, #164]	; (800159c <MRT_LPS22HH_Setup+0x160>)
 80014f8:	f00d fd2d 	bl	800ef56 <HAL_UART_Transmit>
		  while(1);
 80014fc:	e7fe      	b.n	80014fc <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	2204      	movs	r2, #4
 8001508:	4925      	ldr	r1, [pc, #148]	; (80015a0 <MRT_LPS22HH_Setup+0x164>)
 800150a:	f00d fd24 	bl	800ef56 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2101      	movs	r1, #1
 8001514:	4618      	mov	r0, r3
 8001516:	f006 f935 	bl	8007784 <lps22hh_reset_set>

	  HAL_Delay(1000);
 800151a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151e:	f007 fb43 	bl	8008ba8 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	491f      	ldr	r1, [pc, #124]	; (80015a4 <MRT_LPS22HH_Setup+0x168>)
 8001528:	4618      	mov	r0, r3
 800152a:	f006 f951 	bl	80077d0 <lps22hh_reset_get>
	  } while (lps_rst);
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MRT_LPS22HH_Setup+0x168>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f5      	bne.n	8001522 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	2101      	movs	r1, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f006 f837 	bl	80075b0 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	2115      	movs	r1, #21
 8001548:	4618      	mov	r0, r3
 800154a:	f006 f857 	bl	80075fc <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	2218      	movs	r2, #24
 8001558:	4913      	ldr	r1, [pc, #76]	; (80015a8 <MRT_LPS22HH_Setup+0x16c>)
 800155a:	f00d fcfc 	bl	800ef56 <HAL_UART_Transmit>

	  return lps_ctx;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	461c      	mov	r4, r3
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800156a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	3734      	adds	r7, #52	; 0x34
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	bf00      	nop
 8001578:	20005f24 	.word	0x20005f24
 800157c:	080213f0 	.word	0x080213f0
 8001580:	08001659 	.word	0x08001659
 8001584:	08001693 	.word	0x08001693
 8001588:	2000046e 	.word	0x2000046e
 800158c:	08021378 	.word	0x08021378
 8001590:	08021390 	.word	0x08021390
 8001594:	0802139c 	.word	0x0802139c
 8001598:	080213b0 	.word	0x080213b0
 800159c:	080213b8 	.word	0x080213b8
 80015a0:	080213d0 	.word	0x080213d0
 80015a4:	2000046f 	.word	0x2000046f
 80015a8:	08021408 	.word	0x08021408

080015ac <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	1d3c      	adds	r4, r7, #4
 80015b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015b8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80015ba:	f107 0214 	add.w	r2, r7, #20
 80015be:	1d38      	adds	r0, r7, #4
 80015c0:	2301      	movs	r3, #1
 80015c2:	2127      	movs	r1, #39	; 0x27
 80015c4:	f005 ff92 	bl	80074ec <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 80015c8:	7d3b      	ldrb	r3, [r7, #20]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d011      	beq.n	80015f8 <MRT_LPS22HH_getPressure+0x4c>
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <MRT_LPS22HH_getPressure+0x54>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4908      	ldr	r1, [pc, #32]	; (8001600 <MRT_LPS22HH_getPressure+0x54>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f006 f873 	bl	80076ca <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MRT_LPS22HH_getPressure+0x54>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f005 ffaf 	bl	800754c <lps22hh_from_lsb_to_hpa>
 80015ee:	eef0 7a40 	vmov.f32	s15, s0
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80015f8:	bf00      	nop
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	20000468 	.word	0x20000468

08001604 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	1d3c      	adds	r4, r7, #4
 800160c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001610:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001612:	f107 0217 	add.w	r2, r7, #23
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f006 f83c 	bl	8007698 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d012      	beq.n	800164c <MRT_LPS22HH_getTemperature+0x48>
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MRT_LPS22HH_getTemperature+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4909      	ldr	r1, [pc, #36]	; (8001654 <MRT_LPS22HH_getTemperature+0x50>)
 8001630:	4618      	mov	r0, r3
 8001632:	f006 f873 	bl	800771c <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MRT_LPS22HH_getTemperature+0x50>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	4618      	mov	r0, r3
 800163e:	f005 ff9d 	bl	800757c <lps22hh_from_lsb_to_celsius>
 8001642:	eef0 7a40 	vmov.f32	s15, s0
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800164c:	bf00      	nop
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	2000046c 	.word	0x2000046c

08001658 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af04      	add	r7, sp, #16
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	72fb      	strb	r3, [r7, #11]
 8001668:	4613      	mov	r3, r2
 800166a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	b29a      	uxth	r2, r3
 8001670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	893b      	ldrh	r3, [r7, #8]
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	21b9      	movs	r1, #185	; 0xb9
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f008 fb12 	bl	8009cac <HAL_I2C_Mem_Write>
  return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b088      	sub	sp, #32
 8001696:	af04      	add	r7, sp, #16
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	461a      	mov	r2, r3
 800169e:	460b      	mov	r3, r1
 80016a0:	72fb      	strb	r3, [r7, #11]
 80016a2:	4613      	mov	r3, r2
 80016a4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	893b      	ldrh	r3, [r7, #8]
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	21b9      	movs	r1, #185	; 0xb9
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f008 fbef 	bl	8009ea0 <HAL_I2C_Mem_Read>
  return 0;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016d0:	f3bf 8f4f 	dsb	sy
}
 80016d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <__NVIC_SystemReset+0x24>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016de:	4904      	ldr	r1, [pc, #16]	; (80016f0 <__NVIC_SystemReset+0x24>)
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_SystemReset+0x28>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016e6:	f3bf 8f4f 	dsb	sy
}
 80016ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <__NVIC_SystemReset+0x20>
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	05fa0004 	.word	0x05fa0004

080016f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	b097      	sub	sp, #92	; 0x5c
 80016fc:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fe:	f007 fa11 	bl	8008b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001702:	f000 fa21 	bl	8001b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001706:	f000 fdbb 	bl	8002280 <MX_GPIO_Init>
  MX_ADC1_Init();
 800170a:	f000 fa89 	bl	8001c20 <MX_ADC1_Init>
  MX_I2C1_Init();
 800170e:	f000 fad9 	bl	8001cc4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001712:	f000 fb17 	bl	8001d44 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001716:	f000 fb55 	bl	8001dc4 <MX_I2C3_Init>
  MX_SPI2_Init();
 800171a:	f000 fc39 	bl	8001f90 <MX_SPI2_Init>
  MX_SPI4_Init();
 800171e:	f000 fc6d 	bl	8001ffc <MX_SPI4_Init>
  MX_SPI5_Init();
 8001722:	f000 fca1 	bl	8002068 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001726:	f000 fcd5 	bl	80020d4 <MX_TIM2_Init>
  MX_UART8_Init();
 800172a:	f000 fd2b 	bl	8002184 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800172e:	f000 fd53 	bl	80021d8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001732:	f000 fd7b 	bl	800222c <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001736:	f000 fb9f 	bl	8001e78 <MX_RTC_Init>
  //MX_IWDG_Init(); TODO remove
  MX_FATFS_Init();
 800173a:	f00f faf1 	bl	8010d20 <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2102      	movs	r1, #2
 8001742:	4876      	ldr	r0, [pc, #472]	; (800191c <main+0x224>)
 8001744:	f008 f93c 	bl	80099c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2104      	movs	r1, #4
 800174c:	4873      	ldr	r0, [pc, #460]	; (800191c <main+0x224>)
 800174e:	f008 f937 	bl	80099c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2108      	movs	r1, #8
 8001756:	4871      	ldr	r0, [pc, #452]	; (800191c <main+0x224>)
 8001758:	f008 f932 	bl	80099c0 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001762:	486f      	ldr	r0, [pc, #444]	; (8001920 <main+0x228>)
 8001764:	f008 f92c 	bl	80099c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176e:	486c      	ldr	r0, [pc, #432]	; (8001920 <main+0x228>)
 8001770:	f008 f926 	bl	80099c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177a:	4869      	ldr	r0, [pc, #420]	; (8001920 <main+0x228>)
 800177c:	f008 f920 	bl	80099c0 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 8001780:	2201      	movs	r2, #1
 8001782:	2102      	movs	r1, #2
 8001784:	4866      	ldr	r0, [pc, #408]	; (8001920 <main+0x228>)
 8001786:	f008 f91b 	bl	80099c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001790:	4864      	ldr	r0, [pc, #400]	; (8001924 <main+0x22c>)
 8001792:	f008 f915 	bl	80099c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800179c:	4861      	ldr	r0, [pc, #388]	; (8001924 <main+0x22c>)
 800179e:	f008 f90f 	bl	80099c0 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80017a2:	2200      	movs	r2, #0
 80017a4:	2104      	movs	r1, #4
 80017a6:	4860      	ldr	r0, [pc, #384]	; (8001928 <main+0x230>)
 80017a8:	f008 f90a 	bl	80099c0 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b2:	485d      	ldr	r0, [pc, #372]	; (8001928 <main+0x230>)
 80017b4:	f008 f904 	bl	80099c0 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017be:	4858      	ldr	r0, [pc, #352]	; (8001920 <main+0x228>)
 80017c0:	f008 f8fe 	bl	80099c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80017c4:	2200      	movs	r2, #0
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	4858      	ldr	r0, [pc, #352]	; (800192c <main+0x234>)
 80017ca:	f008 f8f9 	bl	80099c0 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2140      	movs	r1, #64	; 0x40
 80017d2:	4856      	ldr	r0, [pc, #344]	; (800192c <main+0x234>)
 80017d4:	f008 f8f4 	bl	80099c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2120      	movs	r1, #32
 80017dc:	4853      	ldr	r0, [pc, #332]	; (800192c <main+0x234>)
 80017de:	f008 f8ef 	bl	80099c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2110      	movs	r1, #16
 80017e6:	4851      	ldr	r0, [pc, #324]	; (800192c <main+0x234>)
 80017e8:	f008 f8ea 	bl	80099c0 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	2213      	movs	r2, #19
 80017f2:	494f      	ldr	r1, [pc, #316]	; (8001930 <main+0x238>)
 80017f4:	484f      	ldr	r0, [pc, #316]	; (8001934 <main+0x23c>)
 80017f6:	f00d fbae 	bl	800ef56 <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(&hrtc, DEBUG_UART, SLEEP_TIME); //Put here so we can pass the uart value to the setup
 80017fa:	4e4e      	ldr	r6, [pc, #312]	; (8001934 <main+0x23c>)
 80017fc:	23a0      	movs	r3, #160	; 0xa0
 80017fe:	930e      	str	r3, [sp, #56]	; 0x38
 8001800:	466d      	mov	r5, sp
 8001802:	f106 040c 	add.w	r4, r6, #12
 8001806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001816:	e885 0003 	stmia.w	r5, {r0, r1}
 800181a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800181e:	4846      	ldr	r0, [pc, #280]	; (8001938 <main+0x240>)
 8001820:	f006 fcdc 	bl	80081dc <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 8001824:	4843      	ldr	r0, [pc, #268]	; (8001934 <main+0x23c>)
 8001826:	f002 fa23 	bl	8003c70 <MRT_externalFlashSetup>
	   * Watch dog
	   * -Remove the MX_IWDG_Init() that is auto-generated and add it just before the osKernelStart
	   * -Need to be put after RTOS setup
	   */
	#if IWDG_ACTIVE
	MX_IWDG_Init();
 800182a:	f000 fb0b 	bl	8001e44 <MX_IWDG_Init>
	#endif

  //RTC
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <main+0x244>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4a43      	ldr	r2, [pc, #268]	; (8001940 <main+0x248>)
 8001834:	7811      	ldrb	r1, [r2, #0]
 8001836:	4a43      	ldr	r2, [pc, #268]	; (8001944 <main+0x24c>)
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f006 fe4c 	bl	80084d8 <MRT_setRTC>
  HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8001840:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001844:	f007 f9b0 	bl	8008ba8 <HAL_Delay>
  #if ALARM_A_ACTIVE
    if (wu_flag == 0){
 8001848:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <main+0x250>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <main+0x164>
    	MRT_setAlarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8001850:	2200      	movs	r2, #0
 8001852:	211e      	movs	r1, #30
 8001854:	2004      	movs	r0, #4
 8001856:	f006 fdf7 	bl	8008448 <MRT_setAlarmA>
 800185a:	e004      	b.n	8001866 <main+0x16e>
    }
    else{
    	MRT_setAlarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200e      	movs	r0, #14
 8001862:	f006 fdf1 	bl	8008448 <MRT_setAlarmA>

	  //**************************************************//
	  //MEMORY THREAD
#if MEMORY_THREAD
	  #if IWDG_ACTIVE
	    HAL_IWDG_Refresh(&hiwdg);
 8001866:	4839      	ldr	r0, [pc, #228]	; (800194c <main+0x254>)
 8001868:	f009 f98e 	bl	800ab88 <HAL_IWDG_Refresh>
	  #endif

		//SD card
		sd_init_dynamic_filename("FC", "", filename);
 800186c:	4a38      	ldr	r2, [pc, #224]	; (8001950 <main+0x258>)
 800186e:	4939      	ldr	r1, [pc, #228]	; (8001954 <main+0x25c>)
 8001870:	4839      	ldr	r0, [pc, #228]	; (8001958 <main+0x260>)
 8001872:	f006 ff31 	bl	80086d8 <sd_init_dynamic_filename>
	 * -6 DOF IMU (LSM6DSR): 0x6A
	 * -LPS22HH: 0x5C
	 */

	  #if IWDG_ACTIVE
		HAL_IWDG_Refresh(&hiwdg);
 8001876:	4835      	ldr	r0, [pc, #212]	; (800194c <main+0x254>)
 8001878:	f009 f986 	bl	800ab88 <HAL_IWDG_Refresh>
	  #endif
	  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 800187c:	4c37      	ldr	r4, [pc, #220]	; (800195c <main+0x264>)
 800187e:	463b      	mov	r3, r7
 8001880:	4a2c      	ldr	r2, [pc, #176]	; (8001934 <main+0x23c>)
 8001882:	4937      	ldr	r1, [pc, #220]	; (8001960 <main+0x268>)
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc5b 	bl	8001140 <MRT_LSM6DSR_Setup>
 800188a:	463b      	mov	r3, r7
 800188c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001890:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  #if IWDG_ACTIVE
	    HAL_IWDG_Refresh(&hiwdg);
 8001894:	482d      	ldr	r0, [pc, #180]	; (800194c <main+0x254>)
 8001896:	f009 f977 	bl	800ab88 <HAL_IWDG_Refresh>
	  #endif
	  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 800189a:	4c32      	ldr	r4, [pc, #200]	; (8001964 <main+0x26c>)
 800189c:	463b      	mov	r3, r7
 800189e:	4a25      	ldr	r2, [pc, #148]	; (8001934 <main+0x23c>)
 80018a0:	492f      	ldr	r1, [pc, #188]	; (8001960 <main+0x268>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fdca 	bl	800143c <MRT_LPS22HH_Setup>
 80018a8:	463b      	mov	r3, r7
 80018aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  GPS_init(&GPS_UART, &DEBUG_UART);
 80018b2:	4920      	ldr	r1, [pc, #128]	; (8001934 <main+0x23c>)
 80018b4:	482c      	ldr	r0, [pc, #176]	; (8001968 <main+0x270>)
 80018b6:	f002 f9a7 	bl	8003c08 <GPS_init>

	  //**************************************************//
	  //TELEMETRY_THREAD
#if TELEMETRY_THREAD
	  #if IWDG_ACTIVE
		HAL_IWDG_Refresh(&hiwdg);
 80018ba:	4824      	ldr	r0, [pc, #144]	; (800194c <main+0x254>)
 80018bc:	f009 f964 	bl	800ab88 <HAL_IWDG_Refresh>
   	  #endif

	  #if XTEND_
	   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018ca:	f008 f879 	bl	80099c0 <HAL_GPIO_WritePin>
	  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	  Tx_setup();
	  #endif

	  #if IWDG_ACTIVE
		HAL_IWDG_Refresh(&hiwdg);
 80018ce:	481f      	ldr	r0, [pc, #124]	; (800194c <main+0x254>)
 80018d0:	f009 f95a 	bl	800ab88 <HAL_IWDG_Refresh>
	  #endif

	  #if IRIDIUM_
	  HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018da:	4813      	ldr	r0, [pc, #76]	; (8001928 <main+0x230>)
 80018dc:	f008 f870 	bl	80099c0 <HAL_GPIO_WritePin>
	  uint8_t lol = MRT_Static_Iridium_Setup(DEBUG_UART, IRIDIUM_TIMEOUT, IRIDIUM_I2C); //TODO remove lol?
 80018e0:	4e14      	ldr	r6, [pc, #80]	; (8001934 <main+0x23c>)
 80018e2:	2302      	movs	r3, #2
 80018e4:	930e      	str	r3, [sp, #56]	; 0x38
 80018e6:	2305      	movs	r3, #5
 80018e8:	930d      	str	r3, [sp, #52]	; 0x34
 80018ea:	466d      	mov	r5, sp
 80018ec:	f106 0410 	add.w	r4, r6, #16
 80018f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	602b      	str	r3, [r5, #0]
 8001900:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001904:	f005 f840 	bl	8006988 <MRT_Static_Iridium_Setup>
 8001908:	4603      	mov	r3, r0
 800190a:	75fb      	strb	r3, [r7, #23]

	  //**************************************************//

	  //Poll propulsion until launch command sent

  	  memset(xtend_rx_buffer, 0, XTEND_BUFFER_SIZE); //clear the buffer
 800190c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001910:	2100      	movs	r1, #0
 8001912:	4816      	ldr	r0, [pc, #88]	; (800196c <main+0x274>)
 8001914:	f019 fed0 	bl	801b6b8 <memset>

	  while(strcmp(xtend_rx_buffer, "launch") != 0 && wu_flag == 0 && apogee_flag == 0){ //TODO need to change flag conditions
 8001918:	e081      	b.n	8001a1e <main+0x326>
 800191a:	bf00      	nop
 800191c:	40020800 	.word	0x40020800
 8001920:	40021800 	.word	0x40021800
 8001924:	40021400 	.word	0x40021400
 8001928:	40021000 	.word	0x40021000
 800192c:	40020c00 	.word	0x40020c00
 8001930:	08021464 	.word	0x08021464
 8001934:	20005ee0 	.word	0x20005ee0
 8001938:	20006944 	.word	0x20006944
 800193c:	200004a5 	.word	0x200004a5
 8001940:	200004a6 	.word	0x200004a6
 8001944:	200004a7 	.word	0x200004a7
 8001948:	20000719 	.word	0x20000719
 800194c:	20006310 	.word	0x20006310
 8001950:	20006390 	.word	0x20006390
 8001954:	08021478 	.word	0x08021478
 8001958:	0802147c 	.word	0x0802147c
 800195c:	20006a88 	.word	0x20006a88
 8001960:	20005f28 	.word	0x20005f28
 8001964:	20006a78 	.word	0x20006a78
 8001968:	200069e0 	.word	0x200069e0
 800196c:	20006a94 	.word	0x20006a94
		  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2108      	movs	r1, #8
 8001974:	4852      	ldr	r0, [pc, #328]	; (8001ac0 <main+0x3c8>)
 8001976:	f008 f823 	bl	80099c0 <HAL_GPIO_WritePin>

		  HAL_IWDG_Refresh(&hiwdg);
 800197a:	4852      	ldr	r0, [pc, #328]	; (8001ac4 <main+0x3cc>)
 800197c:	f009 f904 	bl	800ab88 <HAL_IWDG_Refresh>

		  //Poll propulsion sensors

		  //Thermocouple
		  Max31855_Read_Temp();
 8001980:	f006 fdf2 	bl	8008568 <Max31855_Read_Temp>

		  //Pressure tank
		  transducer_pressure = MRT_prop_poll_pressure_transducer(&hadc1);
 8001984:	4850      	ldr	r0, [pc, #320]	; (8001ac8 <main+0x3d0>)
 8001986:	f002 fc07 	bl	8004198 <MRT_prop_poll_pressure_transducer>
 800198a:	eef0 7a40 	vmov.f32	s15, s0
 800198e:	4b4f      	ldr	r3, [pc, #316]	; (8001acc <main+0x3d4>)
 8001990:	edc3 7a00 	vstr	s15, [r3]


		  //Get propulsion data TODO
		  TANK_PRESSURE = transducer_pressure;
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <main+0x3d4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a4d      	ldr	r2, [pc, #308]	; (8001ad0 <main+0x3d8>)
 800199a:	6013      	str	r3, [r2, #0]
		  THERMO_TEMPERATURE = THERMO_TEMP;
 800199c:	4b4d      	ldr	r3, [pc, #308]	; (8001ad4 <main+0x3dc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <main+0x3e0>)
 80019a2:	6013      	str	r3, [r2, #0]
		  VALVE_STATUS = 0;
 80019a4:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <main+0x3e4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

		  //Send propulsion data
		  #if XTEND_ //Xtend send
	  		memset(xtend_tx_buffer, 0, XTEND_BUFFER_SIZE);
 80019aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ae:	2100      	movs	r1, #0
 80019b0:	484b      	ldr	r0, [pc, #300]	; (8001ae0 <main+0x3e8>)
 80019b2:	f019 fe81 	bl	801b6b8 <memset>
	  		sprintf(xtend_tx_buffer,"P,%.2f,%.2f, %i,E",TANK_PRESSURE,THERMO_TEMPERATURE,VALVE_STATUS);
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <main+0x3d8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fde4 	bl	8000588 <__aeabi_f2d>
 80019c0:	4604      	mov	r4, r0
 80019c2:	460d      	mov	r5, r1
 80019c4:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <main+0x3e0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fddd 	bl	8000588 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4942      	ldr	r1, [pc, #264]	; (8001adc <main+0x3e4>)
 80019d4:	7809      	ldrb	r1, [r1, #0]
 80019d6:	9102      	str	r1, [sp, #8]
 80019d8:	e9cd 2300 	strd	r2, r3, [sp]
 80019dc:	4622      	mov	r2, r4
 80019de:	462b      	mov	r3, r5
 80019e0:	4940      	ldr	r1, [pc, #256]	; (8001ae4 <main+0x3ec>)
 80019e2:	483f      	ldr	r0, [pc, #252]	; (8001ae0 <main+0x3e8>)
 80019e4:	f01b f964 	bl	801ccb0 <siprintf>
	  		XTend_Transmit(xtend_tx_buffer);
 80019e8:	483d      	ldr	r0, [pc, #244]	; (8001ae0 <main+0x3e8>)
 80019ea:	f000 fddb 	bl	80025a4 <XTend_Transmit>

		  	//Check for launch command
		  	memset(xtend_rx_buffer, 0, XTEND_BUFFER_SIZE);
 80019ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f2:	2100      	movs	r1, #0
 80019f4:	483c      	ldr	r0, [pc, #240]	; (8001ae8 <main+0x3f0>)
 80019f6:	f019 fe5f 	bl	801b6b8 <memset>
		  	HAL_UART_Receive(&XTEND_UART, xtend_rx_buffer, sizeof(char) * 6, 0x500); //TODO timeout is about 1.2 sec (should be less than 5 sec)
 80019fa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80019fe:	2206      	movs	r2, #6
 8001a00:	4939      	ldr	r1, [pc, #228]	; (8001ae8 <main+0x3f0>)
 8001a02:	483a      	ldr	r0, [pc, #232]	; (8001aec <main+0x3f4>)
 8001a04:	f00d fb39 	bl	800f07a <HAL_UART_Receive>

	    	//Check for launch command
	    	//TODO
		  #endif

	  	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	482c      	ldr	r0, [pc, #176]	; (8001ac0 <main+0x3c8>)
 8001a0e:	f007 ffd7 	bl	80099c0 <HAL_GPIO_WritePin>


	  	  //Reset IWDG timer
	  	  HAL_IWDG_Refresh(&hiwdg);
 8001a12:	482c      	ldr	r0, [pc, #176]	; (8001ac4 <main+0x3cc>)
 8001a14:	f009 f8b8 	bl	800ab88 <HAL_IWDG_Refresh>

	      HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
 8001a18:	2014      	movs	r0, #20
 8001a1a:	f007 f8c5 	bl	8008ba8 <HAL_Delay>
	  while(strcmp(xtend_rx_buffer, "launch") != 0 && wu_flag == 0 && apogee_flag == 0){ //TODO need to change flag conditions
 8001a1e:	4934      	ldr	r1, [pc, #208]	; (8001af0 <main+0x3f8>)
 8001a20:	4831      	ldr	r0, [pc, #196]	; (8001ae8 <main+0x3f0>)
 8001a22:	f7fe fbe5 	bl	80001f0 <strcmp>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <main+0x344>
 8001a2c:	4b31      	ldr	r3, [pc, #196]	; (8001af4 <main+0x3fc>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d103      	bne.n	8001a3c <main+0x344>
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <main+0x400>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d099      	beq.n	8001970 <main+0x278>
	  }


	  //Send acknowledgement
	#if XTEND_ //Xtend send
		memset(xtend_tx_buffer, 0, XTEND_BUFFER_SIZE);
 8001a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a40:	2100      	movs	r1, #0
 8001a42:	4827      	ldr	r0, [pc, #156]	; (8001ae0 <main+0x3e8>)
 8001a44:	f019 fe38 	bl	801b6b8 <memset>
		sprintf(xtend_tx_buffer,"LAUNCH COMMAND RECEIVED");
 8001a48:	492c      	ldr	r1, [pc, #176]	; (8001afc <main+0x404>)
 8001a4a:	4825      	ldr	r0, [pc, #148]	; (8001ae0 <main+0x3e8>)
 8001a4c:	f01b f930 	bl	801ccb0 <siprintf>
		XTend_Transmit(xtend_tx_buffer);
 8001a50:	4823      	ldr	r0, [pc, #140]	; (8001ae0 <main+0x3e8>)
 8001a52:	f000 fda7 	bl	80025a4 <XTend_Transmit>
//TODO I2C SENSORS SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a56:	f014 fa01 	bl	8015e5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001a5a:	4a29      	ldr	r2, [pc, #164]	; (8001b00 <main+0x408>)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4829      	ldr	r0, [pc, #164]	; (8001b04 <main+0x40c>)
 8001a60:	f014 fa46 	bl	8015ef0 <osThreadNew>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a28      	ldr	r2, [pc, #160]	; (8001b08 <main+0x410>)
 8001a68:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001a6a:	4a28      	ldr	r2, [pc, #160]	; (8001b0c <main+0x414>)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4828      	ldr	r0, [pc, #160]	; (8001b10 <main+0x418>)
 8001a70:	f014 fa3e 	bl	8015ef0 <osThreadNew>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <main+0x41c>)
 8001a78:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001a7a:	4a27      	ldr	r2, [pc, #156]	; (8001b18 <main+0x420>)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4827      	ldr	r0, [pc, #156]	; (8001b1c <main+0x424>)
 8001a80:	f014 fa36 	bl	8015ef0 <osThreadNew>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <main+0x428>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 8001a8a:	4a26      	ldr	r2, [pc, #152]	; (8001b24 <main+0x42c>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4826      	ldr	r0, [pc, #152]	; (8001b28 <main+0x430>)
 8001a90:	f014 fa2e 	bl	8015ef0 <osThreadNew>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a25      	ldr	r2, [pc, #148]	; (8001b2c <main+0x434>)
 8001a98:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 8001a9a:	4a25      	ldr	r2, [pc, #148]	; (8001b30 <main+0x438>)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4825      	ldr	r0, [pc, #148]	; (8001b34 <main+0x43c>)
 8001aa0:	f014 fa26 	bl	8015ef0 <osThreadNew>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <main+0x440>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 8001aaa:	4a24      	ldr	r2, [pc, #144]	; (8001b3c <main+0x444>)
 8001aac:	2100      	movs	r1, #0
 8001aae:	4824      	ldr	r0, [pc, #144]	; (8001b40 <main+0x448>)
 8001ab0:	f014 fa1e 	bl	8015ef0 <osThreadNew>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <main+0x44c>)
 8001ab8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001aba:	f014 f9f3 	bl	8015ea4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <main+0x3c6>
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	20006310 	.word	0x20006310
 8001ac8:	2000678c 	.word	0x2000678c
 8001acc:	20006964 	.word	0x20006964
 8001ad0:	2000638c 	.word	0x2000638c
 8001ad4:	20006a28 	.word	0x20006a28
 8001ad8:	200068e0 	.word	0x200068e0
 8001adc:	20006370 	.word	0x20006370
 8001ae0:	200067e0 	.word	0x200067e0
 8001ae4:	08021480 	.word	0x08021480
 8001ae8:	20006a94 	.word	0x20006a94
 8001aec:	20006030 	.word	0x20006030
 8001af0:	08021494 	.word	0x08021494
 8001af4:	20000719 	.word	0x20000719
 8001af8:	200004a4 	.word	0x200004a4
 8001afc:	0802149c 	.word	0x0802149c
 8001b00:	08022fbc 	.word	0x08022fbc
 8001b04:	080025d1 	.word	0x080025d1
 8001b08:	20006388 	.word	0x20006388
 8001b0c:	08022fe0 	.word	0x08022fe0
 8001b10:	08002695 	.word	0x08002695
 8001b14:	200069d8 	.word	0x200069d8
 8001b18:	08023004 	.word	0x08023004
 8001b1c:	080026b1 	.word	0x080026b1
 8001b20:	200069dc 	.word	0x200069dc
 8001b24:	08023028 	.word	0x08023028
 8001b28:	08002a89 	.word	0x08002a89
 8001b2c:	20006a74 	.word	0x20006a74
 8001b30:	0802304c 	.word	0x0802304c
 8001b34:	08002b8d 	.word	0x08002b8d
 8001b38:	20006968 	.word	0x20006968
 8001b3c:	08023070 	.word	0x08023070
 8001b40:	08002b9d 	.word	0x08002b9d
 8001b44:	20006374 	.word	0x20006374

08001b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b094      	sub	sp, #80	; 0x50
 8001b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	2230      	movs	r2, #48	; 0x30
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f019 fdae 	bl	801b6b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b94:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ba8:	2309      	movs	r3, #9
 8001baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001bc4:	2348      	movs	r3, #72	; 0x48
 8001bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f00a f9a9 	bl	800bf2c <HAL_RCC_OscConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001be0:	f001 f8ce 	bl	8002d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be4:	230f      	movs	r3, #15
 8001be6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001be8:	2301      	movs	r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00a fc0b 	bl	800c41c <HAL_RCC_ClockConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c0c:	f001 f8b8 	bl	8002d80 <Error_Handler>
  }
}
 8001c10:	bf00      	nop
 8001c12:	3750      	adds	r7, #80	; 0x50
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40007000 	.word	0x40007000

08001c20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c26:	463b      	mov	r3, r7
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c34:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <MX_ADC1_Init+0x9c>)
 8001c36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <MX_ADC1_Init+0xa0>)
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c7e:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001c80:	f006 ffb6 	bl	8008bf0 <HAL_ADC_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001c8a:	f001 f879 	bl	8002d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c8e:	2306      	movs	r3, #6
 8001c90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <MX_ADC1_Init+0x98>)
 8001ca0:	f007 f988 	bl	8008fb4 <HAL_ADC_ConfigChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001caa:	f001 f869 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000678c 	.word	0x2000678c
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	0f000001 	.word	0x0f000001

08001cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001cca:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <MX_I2C1_Init+0x78>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001cd0:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <MX_I2C1_Init+0x7c>)
 8001cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001d02:	f007 fe8f 	bl	8009a24 <HAL_I2C_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d0c:	f001 f838 	bl	8002d80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d10:	2100      	movs	r1, #0
 8001d12:	4809      	ldr	r0, [pc, #36]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001d14:	f008 fe7b 	bl	800aa0e <HAL_I2CEx_ConfigAnalogFilter>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001d1e:	f001 f82f 	bl	8002d80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d22:	2100      	movs	r1, #0
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_I2C1_Init+0x74>)
 8001d26:	f008 feae 	bl	800aa86 <HAL_I2CEx_ConfigDigitalFilter>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001d30:	f001 f826 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200062bc 	.word	0x200062bc
 8001d3c:	40005400 	.word	0x40005400
 8001d40:	000186a0 	.word	0x000186a0

08001d44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d4a:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <MX_I2C2_Init+0x78>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <MX_I2C2_Init+0x7c>)
 8001d52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d82:	f007 fe4f 	bl	8009a24 <HAL_I2C_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d8c:	f000 fff8 	bl	8002d80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d90:	2100      	movs	r1, #0
 8001d92:	4809      	ldr	r0, [pc, #36]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001d94:	f008 fe3b 	bl	800aa0e <HAL_I2CEx_ConfigAnalogFilter>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001d9e:	f000 ffef 	bl	8002d80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_I2C2_Init+0x74>)
 8001da6:	f008 fe6e 	bl	800aa86 <HAL_I2CEx_ConfigDigitalFilter>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001db0:	f000 ffe6 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000631c 	.word	0x2000631c
 8001dbc:	40005800 	.word	0x40005800
 8001dc0:	000186a0 	.word	0x000186a0

08001dc4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <MX_I2C3_Init+0x78>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <MX_I2C3_Init+0x7c>)
 8001dd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001e02:	f007 fe0f 	bl	8009a24 <HAL_I2C_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e0c:	f000 ffb8 	bl	8002d80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e10:	2100      	movs	r1, #0
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001e14:	f008 fdfb 	bl	800aa0e <HAL_I2CEx_ConfigAnalogFilter>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001e1e:	f000 ffaf 	bl	8002d80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001e22:	2100      	movs	r1, #0
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <MX_I2C3_Init+0x74>)
 8001e26:	f008 fe2e 	bl	800aa86 <HAL_I2CEx_ConfigDigitalFilter>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001e30:	f000 ffa6 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20005f28 	.word	0x20005f28
 8001e3c:	40005c00 	.word	0x40005c00
 8001e40:	000186a0 	.word	0x000186a0

08001e44 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_IWDG_Init+0x2c>)
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <MX_IWDG_Init+0x30>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <MX_IWDG_Init+0x2c>)
 8001e50:	2204      	movs	r2, #4
 8001e52:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_IWDG_Init+0x2c>)
 8001e56:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001e5a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <MX_IWDG_Init+0x2c>)
 8001e5e:	f008 fe51 	bl	800ab04 <HAL_IWDG_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001e68:	f000 ff8a 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20006310 	.word	0x20006310
 8001e74:	40003000 	.word	0x40003000

08001e78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b090      	sub	sp, #64	; 0x40
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001e92:	463b      	mov	r3, r7
 8001e94:	2228      	movs	r2, #40	; 0x28
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f019 fc0d 	bl	801b6b8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <MX_RTC_Init+0x110>)
 8001ea0:	4a3a      	ldr	r2, [pc, #232]	; (8001f8c <MX_RTC_Init+0x114>)
 8001ea2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ea4:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <MX_RTC_Init+0x110>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <MX_RTC_Init+0x110>)
 8001eac:	227f      	movs	r2, #127	; 0x7f
 8001eae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <MX_RTC_Init+0x110>)
 8001eb2:	22ff      	movs	r2, #255	; 0xff
 8001eb4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <MX_RTC_Init+0x110>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ebc:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <MX_RTC_Init+0x110>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ec2:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <MX_RTC_Init+0x110>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ec8:	482f      	ldr	r0, [pc, #188]	; (8001f88 <MX_RTC_Init+0x110>)
 8001eca:	f00a fe91 	bl	800cbf0 <HAL_RTC_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001ed4:	f000 ff54 	bl	8002d80 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4823      	ldr	r0, [pc, #140]	; (8001f88 <MX_RTC_Init+0x110>)
 8001efc:	f00a ff09 	bl	800cd12 <HAL_RTC_SetTime>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001f06:	f000 ff3b 	bl	8002d80 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f26:	2201      	movs	r2, #1
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4817      	ldr	r0, [pc, #92]	; (8001f88 <MX_RTC_Init+0x110>)
 8001f2c:	f00b f80c 	bl	800cf48 <HAL_RTC_SetDate>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001f36:	f000 ff23 	bl	8002d80 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_RTC_Init+0x110>)
 8001f72:	f00b f8df 	bl	800d134 <HAL_RTC_SetAlarm_IT>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001f7c:	f000 ff00 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	3740      	adds	r7, #64	; 0x40
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20006944 	.word	0x20006944
 8001f8c:	40002800 	.word	0x40002800

08001f90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001f96:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <MX_SPI2_Init+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fa0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001fdc:	220a      	movs	r2, #10
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fe0:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <MX_SPI2_Init+0x64>)
 8001fe2:	f00b fbd7 	bl	800d794 <HAL_SPI_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fec:	f000 fec8 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20005f7c 	.word	0x20005f7c
 8001ff8:	40003800 	.word	0x40003800

08001ffc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <MX_SPI4_Init+0x64>)
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <MX_SPI4_Init+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <MX_SPI4_Init+0x64>)
 8002008:	f44f 7282 	mov.w	r2, #260	; 0x104
 800200c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_SPI4_Init+0x64>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <MX_SPI4_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MX_SPI4_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <MX_SPI4_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_SPI4_Init+0x64>)
 8002028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_SPI4_Init+0x64>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <MX_SPI4_Init+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_SPI4_Init+0x64>)
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <MX_SPI4_Init+0x64>)
 8002042:	2200      	movs	r2, #0
 8002044:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_SPI4_Init+0x64>)
 8002048:	220a      	movs	r2, #10
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <MX_SPI4_Init+0x64>)
 800204e:	f00b fba1 	bl	800d794 <HAL_SPI_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002058:	f000 fe92 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200068e8 	.word	0x200068e8
 8002064:	40013400 	.word	0x40013400

08002068 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800206c:	4b17      	ldr	r3, [pc, #92]	; (80020cc <MX_SPI5_Init+0x64>)
 800206e:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <MX_SPI5_Init+0x68>)
 8002070:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <MX_SPI5_Init+0x64>)
 8002074:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002078:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <MX_SPI5_Init+0x64>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <MX_SPI5_Init+0x64>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <MX_SPI5_Init+0x64>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <MX_SPI5_Init+0x64>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <MX_SPI5_Init+0x64>)
 8002094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002098:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <MX_SPI5_Init+0x64>)
 800209c:	2200      	movs	r2, #0
 800209e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <MX_SPI5_Init+0x64>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <MX_SPI5_Init+0x64>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <MX_SPI5_Init+0x64>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <MX_SPI5_Init+0x64>)
 80020b4:	220a      	movs	r2, #10
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <MX_SPI5_Init+0x64>)
 80020ba:	f00b fb6b 	bl	800d794 <HAL_SPI_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80020c4:	f000 fe5c 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20005fd8 	.word	0x20005fd8
 80020d0:	40015000 	.word	0x40015000

080020d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020da:	f107 0320 	add.w	r3, r7, #32
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]
 80020f2:	615a      	str	r2, [r3, #20]
 80020f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <MX_TIM2_Init+0xac>)
 80020f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <MX_TIM2_Init+0xac>)
 8002100:	2200      	movs	r2, #0
 8002102:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_TIM2_Init+0xac>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_TIM2_Init+0xac>)
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MX_TIM2_Init+0xac>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_TIM2_Init+0xac>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800211e:	4818      	ldr	r0, [pc, #96]	; (8002180 <MX_TIM2_Init+0xac>)
 8002120:	f00c f9aa 	bl	800e478 <HAL_TIM_PWM_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800212a:	f000 fe29 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002136:	f107 0320 	add.w	r3, r7, #32
 800213a:	4619      	mov	r1, r3
 800213c:	4810      	ldr	r0, [pc, #64]	; (8002180 <MX_TIM2_Init+0xac>)
 800213e:	f00c fe2d 	bl	800ed9c <HAL_TIMEx_MasterConfigSynchronization>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002148:	f000 fe1a 	bl	8002d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800214c:	2360      	movs	r3, #96	; 0x60
 800214e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2208      	movs	r2, #8
 8002160:	4619      	mov	r1, r3
 8002162:	4807      	ldr	r0, [pc, #28]	; (8002180 <MX_TIM2_Init+0xac>)
 8002164:	f00c fae0 	bl	800e728 <HAL_TIM_PWM_ConfigChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800216e:	f000 fe07 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <MX_TIM2_Init+0xac>)
 8002174:	f001 f85a 	bl	800322c <HAL_TIM_MspPostInit>

}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20006a2c 	.word	0x20006a2c

08002184 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_UART8_Init+0x4c>)
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <MX_UART8_Init+0x50>)
 800218c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <MX_UART8_Init+0x4c>)
 8002190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002194:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_UART8_Init+0x4c>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_UART8_Init+0x4c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <MX_UART8_Init+0x4c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_UART8_Init+0x4c>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <MX_UART8_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_UART8_Init+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_UART8_Init+0x4c>)
 80021bc:	f00c fe7e 	bl	800eebc <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80021c6:	f000 fddb 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20005ee0 	.word	0x20005ee0
 80021d4:	40007c00 	.word	0x40007c00

080021d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_USART3_UART_Init+0x4c>)
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <MX_USART3_UART_Init+0x50>)
 80021e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <MX_USART3_UART_Init+0x4c>)
 80021e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_USART3_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_USART3_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_USART3_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_USART3_UART_Init+0x4c>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MX_USART3_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_USART3_UART_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_USART3_UART_Init+0x4c>)
 8002210:	f00c fe54 	bl	800eebc <HAL_UART_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800221a:	f000 fdb1 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20006030 	.word	0x20006030
 8002228:	40004800 	.word	0x40004800

0800222c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <MX_USART6_UART_Init+0x50>)
 8002234:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002238:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800223c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002252:	220c      	movs	r2, #12
 8002254:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002264:	f00c fe2a 	bl	800eebc <HAL_UART_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800226e:	f000 fd87 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200069e0 	.word	0x200069e0
 800227c:	40011400 	.word	0x40011400

08002280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	4bb5      	ldr	r3, [pc, #724]	; (8002570 <MX_GPIO_Init+0x2f0>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4ab4      	ldr	r2, [pc, #720]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022a0:	f043 0310 	orr.w	r3, r3, #16
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4bb2      	ldr	r3, [pc, #712]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	4bae      	ldr	r3, [pc, #696]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4aad      	ldr	r2, [pc, #692]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4bab      	ldr	r3, [pc, #684]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	4ba7      	ldr	r3, [pc, #668]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4aa6      	ldr	r2, [pc, #664]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022d8:	f043 0320 	orr.w	r3, r3, #32
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4ba4      	ldr	r3, [pc, #656]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	4ba0      	ldr	r3, [pc, #640]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a9f      	ldr	r2, [pc, #636]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b9d      	ldr	r3, [pc, #628]	; (8002570 <MX_GPIO_Init+0x2f0>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	4b99      	ldr	r3, [pc, #612]	; (8002570 <MX_GPIO_Init+0x2f0>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a98      	ldr	r2, [pc, #608]	; (8002570 <MX_GPIO_Init+0x2f0>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b96      	ldr	r3, [pc, #600]	; (8002570 <MX_GPIO_Init+0x2f0>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b92      	ldr	r3, [pc, #584]	; (8002570 <MX_GPIO_Init+0x2f0>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a91      	ldr	r2, [pc, #580]	; (8002570 <MX_GPIO_Init+0x2f0>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b8f      	ldr	r3, [pc, #572]	; (8002570 <MX_GPIO_Init+0x2f0>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	4b8b      	ldr	r3, [pc, #556]	; (8002570 <MX_GPIO_Init+0x2f0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a8a      	ldr	r2, [pc, #552]	; (8002570 <MX_GPIO_Init+0x2f0>)
 8002348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b88      	ldr	r3, [pc, #544]	; (8002570 <MX_GPIO_Init+0x2f0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	4b84      	ldr	r3, [pc, #528]	; (8002570 <MX_GPIO_Init+0x2f0>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a83      	ldr	r2, [pc, #524]	; (8002570 <MX_GPIO_Init+0x2f0>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b81      	ldr	r3, [pc, #516]	; (8002570 <MX_GPIO_Init+0x2f0>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002376:	2200      	movs	r2, #0
 8002378:	f248 4184 	movw	r1, #33924	; 0x8484
 800237c:	487d      	ldr	r0, [pc, #500]	; (8002574 <MX_GPIO_Init+0x2f4>)
 800237e:	f007 fb1f 	bl	80099c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8002382:	2200      	movs	r2, #0
 8002384:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002388:	487b      	ldr	r0, [pc, #492]	; (8002578 <MX_GPIO_Init+0x2f8>)
 800238a:	f007 fb19 	bl	80099c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002394:	4879      	ldr	r0, [pc, #484]	; (800257c <MX_GPIO_Init+0x2fc>)
 8002396:	f007 fb13 	bl	80099c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	2108      	movs	r1, #8
 800239e:	4878      	ldr	r0, [pc, #480]	; (8002580 <MX_GPIO_Init+0x300>)
 80023a0:	f007 fb0e 	bl	80099c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80023a4:	2200      	movs	r2, #0
 80023a6:	f645 2126 	movw	r1, #23078	; 0x5a26
 80023aa:	4876      	ldr	r0, [pc, #472]	; (8002584 <MX_GPIO_Init+0x304>)
 80023ac:	f007 fb08 	bl	80099c0 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 80023b0:	2200      	movs	r2, #0
 80023b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b6:	4874      	ldr	r0, [pc, #464]	; (8002588 <MX_GPIO_Init+0x308>)
 80023b8:	f007 fb02 	bl	80099c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80023bc:	2200      	movs	r2, #0
 80023be:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80023c2:	4872      	ldr	r0, [pc, #456]	; (800258c <MX_GPIO_Init+0x30c>)
 80023c4:	f007 fafc 	bl	80099c0 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80023c8:	f248 4384 	movw	r3, #33924	; 0x8484
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023de:	4619      	mov	r1, r3
 80023e0:	4864      	ldr	r0, [pc, #400]	; (8002574 <MX_GPIO_Init+0x2f4>)
 80023e2:	f007 f929 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80023e6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ec:	2301      	movs	r3, #1
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fc:	4619      	mov	r1, r3
 80023fe:	485e      	ldr	r0, [pc, #376]	; (8002578 <MX_GPIO_Init+0x2f8>)
 8002400:	f007 f91a 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002404:	2301      	movs	r3, #1
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002408:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002416:	4619      	mov	r1, r3
 8002418:	4858      	ldr	r0, [pc, #352]	; (800257c <MX_GPIO_Init+0x2fc>)
 800241a:	f007 f90d 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800241e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2301      	movs	r3, #1
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002434:	4619      	mov	r1, r3
 8002436:	4851      	ldr	r0, [pc, #324]	; (800257c <MX_GPIO_Init+0x2fc>)
 8002438:	f007 f8fe 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 800243c:	2308      	movs	r3, #8
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002440:	2301      	movs	r3, #1
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 800244c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002450:	4619      	mov	r1, r3
 8002452:	484b      	ldr	r0, [pc, #300]	; (8002580 <MX_GPIO_Init+0x300>)
 8002454:	f007 f8f0 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002458:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246a:	4619      	mov	r1, r3
 800246c:	4843      	ldr	r0, [pc, #268]	; (800257c <MX_GPIO_Init+0x2fc>)
 800246e:	f007 f8e3 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8002472:	2302      	movs	r3, #2
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002476:	2300      	movs	r3, #0
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002482:	4619      	mov	r1, r3
 8002484:	4840      	ldr	r0, [pc, #256]	; (8002588 <MX_GPIO_Init+0x308>)
 8002486:	f007 f8d7 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 800248a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002490:	2300      	movs	r3, #0
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249c:	4619      	mov	r1, r3
 800249e:	4836      	ldr	r0, [pc, #216]	; (8002578 <MX_GPIO_Init+0x2f8>)
 80024a0:	f007 f8ca 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80024a4:	f242 4319 	movw	r3, #9241	; 0x2419
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	4619      	mov	r1, r3
 80024b8:	4832      	ldr	r0, [pc, #200]	; (8002584 <MX_GPIO_Init+0x304>)
 80024ba:	f007 f8bd 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80024be:	f645 2326 	movw	r3, #23078	; 0x5a26
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d4:	4619      	mov	r1, r3
 80024d6:	482b      	ldr	r0, [pc, #172]	; (8002584 <MX_GPIO_Init+0x304>)
 80024d8:	f007 f8ae 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80024dc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ee:	4619      	mov	r1, r3
 80024f0:	4820      	ldr	r0, [pc, #128]	; (8002574 <MX_GPIO_Init+0x2f4>)
 80024f2:	f007 f8a1 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 80024f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	4619      	mov	r1, r3
 800250e:	481e      	ldr	r0, [pc, #120]	; (8002588 <MX_GPIO_Init+0x308>)
 8002510:	f007 f892 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002514:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251a:	2301      	movs	r3, #1
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252a:	4619      	mov	r1, r3
 800252c:	4817      	ldr	r0, [pc, #92]	; (800258c <MX_GPIO_Init+0x30c>)
 800252e:	f007 f883 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002538:	2300      	movs	r3, #0
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	4811      	ldr	r0, [pc, #68]	; (800258c <MX_GPIO_Init+0x30c>)
 8002548:	f007 f876 	bl	8009638 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 800254c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002552:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	4619      	mov	r1, r3
 8002562:	4808      	ldr	r0, [pc, #32]	; (8002584 <MX_GPIO_Init+0x304>)
 8002564:	f007 f868 	bl	8009638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002568:	2200      	movs	r2, #0
 800256a:	2105      	movs	r1, #5
 800256c:	2006      	movs	r0, #6
 800256e:	e00f      	b.n	8002590 <MX_GPIO_Init+0x310>
 8002570:	40023800 	.word	0x40023800
 8002574:	40021000 	.word	0x40021000
 8002578:	40021400 	.word	0x40021400
 800257c:	40020800 	.word	0x40020800
 8002580:	40020000 	.word	0x40020000
 8002584:	40021800 	.word	0x40021800
 8002588:	40020400 	.word	0x40020400
 800258c:	40020c00 	.word	0x40020c00
 8002590:	f007 f81a 	bl	80095c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002594:	2006      	movs	r0, #6
 8002596:	f007 f833 	bl	8009600 <HAL_NVIC_EnableIRQ>

}
 800259a:	bf00      	nop
 800259c:	3738      	adds	r7, #56	; 0x38
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop

080025a4 <XTend_Transmit>:

/**
 * @brief   Function to transmit message to XTend
 * @param  Msg : char array (range 1-800)
 */
static void XTend_Transmit(char* Msg){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&XTEND_UART, Msg, strlen(Msg), HAL_Delay);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7fd fe29 	bl	8000204 <strlen>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <XTend_Transmit+0x24>)
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4804      	ldr	r0, [pc, #16]	; (80025cc <XTend_Transmit+0x28>)
 80025bc:	f00c fccb 	bl	800ef56 <HAL_UART_Transmit>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	08008ba9 	.word	0x08008ba9
 80025cc:	20006030 	.word	0x20006030

080025d0 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80025d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d4:	b08a      	sub	sp, #40	; 0x28
 80025d6:	af06      	add	r7, sp, #24
 80025d8:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80025da:	f017 f907 	bl	80197ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 80025de:	f013 fd19 	bl	8016014 <osThreadGetId>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a22      	ldr	r2, [pc, #136]	; (8002670 <StartMemory0+0xa0>)
 80025e6:	6013      	str	r3, [r2, #0]

	#if !MEMORY_THREAD
    osThreadExit();
	#endif

	uint8_t counter = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]

	  /* Infinite loop */
	  for(;;)
	  {
		  //Write data to sd and flash
		  if(counter==1) sd_open_file(&filename);
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d102      	bne.n	80025f8 <StartMemory0+0x28>
 80025f2:	4820      	ldr	r0, [pc, #128]	; (8002674 <StartMemory0+0xa4>)
 80025f4:	f006 f8ee 	bl	80087d4 <sd_open_file>
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <StartMemory0+0xa8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ffc3 	bl	8000588 <__aeabi_f2d>
 8002602:	4682      	mov	sl, r0
 8002604:	468b      	mov	fp, r1
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <StartMemory0+0xac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd ffbc 	bl	8000588 <__aeabi_f2d>
 8002610:	4604      	mov	r4, r0
 8002612:	460d      	mov	r5, r1
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <StartMemory0+0xb0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ffb5 	bl	8000588 <__aeabi_f2d>
 800261e:	4680      	mov	r8, r0
 8002620:	4689      	mov	r9, r1
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <StartMemory0+0xb4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ffae 	bl	8000588 <__aeabi_f2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002634:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002638:	e9cd 4500 	strd	r4, r5, [sp]
 800263c:	4652      	mov	r2, sl
 800263e:	465b      	mov	r3, fp
 8002640:	4911      	ldr	r1, [pc, #68]	; (8002688 <StartMemory0+0xb8>)
 8002642:	4812      	ldr	r0, [pc, #72]	; (800268c <StartMemory0+0xbc>)
 8002644:	f01a fb34 	bl	801ccb0 <siprintf>
		  sd_write(&fil, writeBuf);
 8002648:	4910      	ldr	r1, [pc, #64]	; (800268c <StartMemory0+0xbc>)
 800264a:	4811      	ldr	r0, [pc, #68]	; (8002690 <StartMemory0+0xc0>)
 800264c:	f006 f8da 	bl	8008804 <sd_write>
		  if (counter == 50) {
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b32      	cmp	r3, #50	; 0x32
 8002654:	d104      	bne.n	8002660 <StartMemory0+0x90>
			  f_close(&fil);
 8002656:	480e      	ldr	r0, [pc, #56]	; (8002690 <StartMemory0+0xc0>)
 8002658:	f012 ffb0 	bl	80155bc <f_close>
			  counter = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
		  }
		  counter++;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	3301      	adds	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]

		  osDelay(1000/DATA_FREQ);
 8002666:	2064      	movs	r0, #100	; 0x64
 8002668:	f013 fd43 	bl	80160f2 <osDelay>
	  {
 800266c:	e7be      	b.n	80025ec <StartMemory0+0x1c>
 800266e:	bf00      	nop
 8002670:	20006078 	.word	0x20006078
 8002674:	20006390 	.word	0x20006390
 8002678:	2000637c 	.word	0x2000637c
 800267c:	20006dcc 	.word	0x20006dcc
 8002680:	20006384 	.word	0x20006384
 8002684:	20006dc8 	.word	0x20006dc8
 8002688:	080214b4 	.word	0x080214b4
 800268c:	200063a4 	.word	0x200063a4
 8002690:	20006b98 	.word	0x20006b98

08002694 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0c2      	sub	sp, #264	; 0x108
 8002698:	af00      	add	r7, sp, #0
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadID[1]=osThreadGetId();
 800269e:	f013 fcb9 	bl	8016014 <osThreadGetId>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a01      	ldr	r2, [pc, #4]	; (80026ac <StartEjection1+0x18>)
 80026a6:	6053      	str	r3, [r2, #4]

	#if !EJECTION_THREAD
	osThreadExit();
 80026a8:	f013 fd1d 	bl	80160e6 <osThreadExit>
 80026ac:	20006078 	.word	0x20006078

080026b0 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 80026b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b4:	b0b0      	sub	sp, #192	; 0xc0
 80026b6:	af1a      	add	r7, sp, #104	; 0x68
 80026b8:	64f8      	str	r0, [r7, #76]	; 0x4c
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 80026ba:	f013 fcab 	bl	8016014 <osThreadGetId>
 80026be:	4603      	mov	r3, r0
 80026c0:	4aae      	ldr	r2, [pc, #696]	; (800297c <StartTelemetry2+0x2cc>)
 80026c2:	6093      	str	r3, [r2, #8]

	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	uint8_t counter = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t iridium_counter = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	osDelay(1000);
 80026d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d4:	f013 fd0d 	bl	80160f2 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80026d8:	2201      	movs	r2, #1
 80026da:	2108      	movs	r1, #8
 80026dc:	48a8      	ldr	r0, [pc, #672]	; (8002980 <StartTelemetry2+0x2d0>)
 80026de:	f007 f96f 	bl	80099c0 <HAL_GPIO_WritePin>

	  if(apogee_flag == 0){ //Only send prop data pre-apogee
 80026e2:	4ba8      	ldr	r3, [pc, #672]	; (8002984 <StartTelemetry2+0x2d4>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d12c      	bne.n	8002744 <StartTelemetry2+0x94>
		  //Get propulsion data TODO
		  TANK_PRESSURE = transducer_pressure;
 80026ea:	4ba7      	ldr	r3, [pc, #668]	; (8002988 <StartTelemetry2+0x2d8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4aa7      	ldr	r2, [pc, #668]	; (800298c <StartTelemetry2+0x2dc>)
 80026f0:	6013      	str	r3, [r2, #0]
		  THERMO_TEMPERATURE = THERMO_TEMP;
 80026f2:	4ba7      	ldr	r3, [pc, #668]	; (8002990 <StartTelemetry2+0x2e0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4aa7      	ldr	r2, [pc, #668]	; (8002994 <StartTelemetry2+0x2e4>)
 80026f8:	6013      	str	r3, [r2, #0]
		  VALVE_STATUS = 0;
 80026fa:	4ba7      	ldr	r3, [pc, #668]	; (8002998 <StartTelemetry2+0x2e8>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]

		  //Send propulsion data
		  #if XTEND_ //Xtend send
			memset(xtend_tx_buffer, 0, XTEND_BUFFER_SIZE);
 8002700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002704:	2100      	movs	r1, #0
 8002706:	48a5      	ldr	r0, [pc, #660]	; (800299c <StartTelemetry2+0x2ec>)
 8002708:	f018 ffd6 	bl	801b6b8 <memset>
			sprintf(xtend_tx_buffer,"P,%.2f,%.2f, %i,E",TANK_PRESSURE,THERMO_TEMPERATURE,VALVE_STATUS);
 800270c:	4b9f      	ldr	r3, [pc, #636]	; (800298c <StartTelemetry2+0x2dc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd ff39 	bl	8000588 <__aeabi_f2d>
 8002716:	4604      	mov	r4, r0
 8002718:	460d      	mov	r5, r1
 800271a:	4b9e      	ldr	r3, [pc, #632]	; (8002994 <StartTelemetry2+0x2e4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd ff32 	bl	8000588 <__aeabi_f2d>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	499b      	ldr	r1, [pc, #620]	; (8002998 <StartTelemetry2+0x2e8>)
 800272a:	7809      	ldrb	r1, [r1, #0]
 800272c:	9102      	str	r1, [sp, #8]
 800272e:	e9cd 2300 	strd	r2, r3, [sp]
 8002732:	4622      	mov	r2, r4
 8002734:	462b      	mov	r3, r5
 8002736:	499a      	ldr	r1, [pc, #616]	; (80029a0 <StartTelemetry2+0x2f0>)
 8002738:	4898      	ldr	r0, [pc, #608]	; (800299c <StartTelemetry2+0x2ec>)
 800273a:	f01a fab9 	bl	801ccb0 <siprintf>
			XTend_Transmit(xtend_tx_buffer);
 800273e:	4897      	ldr	r0, [pc, #604]	; (800299c <StartTelemetry2+0x2ec>)
 8002740:	f7ff ff30 	bl	80025a4 <XTend_Transmit>
			TxProtocol(sradio_tx_buffer, strlen(sradio_tx_buffer));
		  #endif
	  }


	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 8002744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002748:	2b0a      	cmp	r3, #10
 800274a:	f040 817e 	bne.w	8002a4a <StartTelemetry2+0x39a>
		  counter = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		  //Get sensors data
		  //TODO Need to verify these six to make sure they are in the right order
	  	  ACCx = acceleration_mg[0];
 8002754:	4b93      	ldr	r3, [pc, #588]	; (80029a4 <StartTelemetry2+0x2f4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a93      	ldr	r2, [pc, #588]	; (80029a8 <StartTelemetry2+0x2f8>)
 800275a:	6013      	str	r3, [r2, #0]
	  	  ACCy = acceleration_mg[1];
 800275c:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <StartTelemetry2+0x2f4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a92      	ldr	r2, [pc, #584]	; (80029ac <StartTelemetry2+0x2fc>)
 8002762:	6013      	str	r3, [r2, #0]
	  	  ACCz = acceleration_mg[2];
 8002764:	4b8f      	ldr	r3, [pc, #572]	; (80029a4 <StartTelemetry2+0x2f4>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a91      	ldr	r2, [pc, #580]	; (80029b0 <StartTelemetry2+0x300>)
 800276a:	6013      	str	r3, [r2, #0]
	  	  GYROx = angular_rate_mdps[0];
 800276c:	4b91      	ldr	r3, [pc, #580]	; (80029b4 <StartTelemetry2+0x304>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a91      	ldr	r2, [pc, #580]	; (80029b8 <StartTelemetry2+0x308>)
 8002772:	6013      	str	r3, [r2, #0]
	  	  GYROy = angular_rate_mdps[1];
 8002774:	4b8f      	ldr	r3, [pc, #572]	; (80029b4 <StartTelemetry2+0x304>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a90      	ldr	r2, [pc, #576]	; (80029bc <StartTelemetry2+0x30c>)
 800277a:	6013      	str	r3, [r2, #0]
	  	  GYROz = angular_rate_mdps[2];
 800277c:	4b8d      	ldr	r3, [pc, #564]	; (80029b4 <StartTelemetry2+0x304>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a8f      	ldr	r2, [pc, #572]	; (80029c0 <StartTelemetry2+0x310>)
 8002782:	6013      	str	r3, [r2, #0]
	  	  PRESSURE = pressure_hPa;
 8002784:	4b8f      	ldr	r3, [pc, #572]	; (80029c4 <StartTelemetry2+0x314>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a8f      	ldr	r2, [pc, #572]	; (80029c8 <StartTelemetry2+0x318>)
 800278a:	6013      	str	r3, [r2, #0]
		  MIN = t.tm_min;
		  SEC = t.tm_sec;
		  */

		  //From the GPS time value
		  MIN = ((uint8_t) time % 3600) / 60.0; sprintf(&MIN, "%.0f",MIN);
 800278c:	4b8f      	ldr	r3, [pc, #572]	; (80029cc <StartTelemetry2+0x31c>)
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002796:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800279a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4a8b      	ldr	r2, [pc, #556]	; (80029d0 <StartTelemetry2+0x320>)
 80027a2:	fb82 1203 	smull	r1, r2, r2, r3
 80027a6:	441a      	add	r2, r3
 80027a8:	12d1      	asrs	r1, r2, #11
 80027aa:	17da      	asrs	r2, r3, #31
 80027ac:	1a8a      	subs	r2, r1, r2
 80027ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80027b2:	fb01 f202 	mul.w	r2, r1, r2
 80027b6:	1a9a      	subs	r2, r3, r2
 80027b8:	4610      	mov	r0, r2
 80027ba:	f7fd fed3 	bl	8000564 <__aeabi_i2d>
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b84      	ldr	r3, [pc, #528]	; (80029d4 <StartTelemetry2+0x324>)
 80027c4:	f7fe f862 	bl	800088c <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe fa2a 	bl	8000c28 <__aeabi_d2f>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4a80      	ldr	r2, [pc, #512]	; (80029d8 <StartTelemetry2+0x328>)
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b7f      	ldr	r3, [pc, #508]	; (80029d8 <StartTelemetry2+0x328>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fed2 	bl	8000588 <__aeabi_f2d>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	497c      	ldr	r1, [pc, #496]	; (80029dc <StartTelemetry2+0x32c>)
 80027ea:	487b      	ldr	r0, [pc, #492]	; (80029d8 <StartTelemetry2+0x328>)
 80027ec:	f01a fa60 	bl	801ccb0 <siprintf>
		  SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
 80027f0:	4b76      	ldr	r3, [pc, #472]	; (80029cc <StartTelemetry2+0x31c>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80027fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <StartTelemetry2+0x330>)
 8002806:	fba3 1302 	umull	r1, r3, r3, r2
 800280a:	0959      	lsrs	r1, r3, #5
 800280c:	460b      	mov	r3, r1
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a5b      	subs	r3, r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002820:	4b70      	ldr	r3, [pc, #448]	; (80029e4 <StartTelemetry2+0x334>)
 8002822:	edc3 7a00 	vstr	s15, [r3]
 8002826:	4b6f      	ldr	r3, [pc, #444]	; (80029e4 <StartTelemetry2+0x334>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd feac 	bl	8000588 <__aeabi_f2d>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4969      	ldr	r1, [pc, #420]	; (80029dc <StartTelemetry2+0x32c>)
 8002836:	486b      	ldr	r0, [pc, #428]	; (80029e4 <StartTelemetry2+0x334>)
 8002838:	f01a fa3a 	bl	801ccb0 <siprintf>
		  SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
 800283c:	4b63      	ldr	r3, [pc, #396]	; (80029cc <StartTelemetry2+0x31c>)
 800283e:	ed93 7a00 	vldr	s14, [r3]
 8002842:	eddf 6a69 	vldr	s13, [pc, #420]	; 80029e8 <StartTelemetry2+0x338>
 8002846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800284a:	4b68      	ldr	r3, [pc, #416]	; (80029ec <StartTelemetry2+0x33c>)
 800284c:	edc3 7a00 	vstr	s15, [r3]
 8002850:	4b66      	ldr	r3, [pc, #408]	; (80029ec <StartTelemetry2+0x33c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe97 	bl	8000588 <__aeabi_f2d>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	495f      	ldr	r1, [pc, #380]	; (80029dc <StartTelemetry2+0x32c>)
 8002860:	4862      	ldr	r0, [pc, #392]	; (80029ec <StartTelemetry2+0x33c>)
 8002862:	f01a fa25 	bl	801ccb0 <siprintf>
	  	  STATE = 0; //TODO not the right value
 8002866:	4b62      	ldr	r3, [pc, #392]	; (80029f0 <StartTelemetry2+0x340>)
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
	  	  CONT = MRT_getContinuity();
 800286e:	f001 fc5d 	bl	800412c <MRT_getContinuity>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	4b5f      	ldr	r3, [pc, #380]	; (80029f4 <StartTelemetry2+0x344>)
 8002878:	701a      	strb	r2, [r3, #0]

	  	  //Send sensors data
		  #if XTEND_ //Xtend send
			memset(xtend_tx_buffer, 0, XTEND_BUFFER_SIZE);
 800287a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800287e:	2100      	movs	r1, #0
 8002880:	4846      	ldr	r0, [pc, #280]	; (800299c <StartTelemetry2+0x2ec>)
 8002882:	f018 ff19 	bl	801b6b8 <memset>
			sprintf(xtend_tx_buffer,"S,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.7f,%.7f,%.1f,%.1f,%.1f,%.2f,%i,E",
 8002886:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <StartTelemetry2+0x2f8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fe7c 	bl	8000588 <__aeabi_f2d>
 8002890:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8002894:	4b45      	ldr	r3, [pc, #276]	; (80029ac <StartTelemetry2+0x2fc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fe75 	bl	8000588 <__aeabi_f2d>
 800289e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <StartTelemetry2+0x300>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fe6e 	bl	8000588 <__aeabi_f2d>
 80028ac:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80028b0:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <StartTelemetry2+0x308>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd fe67 	bl	8000588 <__aeabi_f2d>
 80028ba:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <StartTelemetry2+0x30c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe60 	bl	8000588 <__aeabi_f2d>
 80028c8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80028cc:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <StartTelemetry2+0x310>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe59 	bl	8000588 <__aeabi_f2d>
 80028d6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80028da:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <StartTelemetry2+0x318>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fe52 	bl	8000588 <__aeabi_f2d>
 80028e4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80028e8:	4b43      	ldr	r3, [pc, #268]	; (80029f8 <StartTelemetry2+0x348>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fe4b 	bl	8000588 <__aeabi_f2d>
 80028f2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <StartTelemetry2+0x34c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fe44 	bl	8000588 <__aeabi_f2d>
 8002900:	e9c7 0100 	strd	r0, r1, [r7]
 8002904:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <StartTelemetry2+0x328>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fe3d 	bl	8000588 <__aeabi_f2d>
 800290e:	4682      	mov	sl, r0
 8002910:	468b      	mov	fp, r1
 8002912:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <StartTelemetry2+0x334>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe36 	bl	8000588 <__aeabi_f2d>
 800291c:	4680      	mov	r8, r0
 800291e:	4689      	mov	r9, r1
 8002920:	4b32      	ldr	r3, [pc, #200]	; (80029ec <StartTelemetry2+0x33c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fe2f 	bl	8000588 <__aeabi_f2d>
 800292a:	4604      	mov	r4, r0
 800292c:	460d      	mov	r5, r1
 800292e:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <StartTelemetry2+0x340>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fe28 	bl	8000588 <__aeabi_f2d>
 8002938:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <StartTelemetry2+0x344>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	9318      	str	r3, [sp, #96]	; 0x60
 800293e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8002942:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8002946:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800294a:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 800294e:	ed97 7b00 	vldr	d7, [r7]
 8002952:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002956:	ed97 7b02 	vldr	d7, [r7, #8]
 800295a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800295e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002962:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002966:	ed97 7b06 	vldr	d7, [r7, #24]
 800296a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800296e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002972:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002976:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800297a:	e041      	b.n	8002a00 <StartTelemetry2+0x350>
 800297c:	20006078 	.word	0x20006078
 8002980:	40020800 	.word	0x40020800
 8002984:	200004a4 	.word	0x200004a4
 8002988:	20006964 	.word	0x20006964
 800298c:	2000638c 	.word	0x2000638c
 8002990:	20006a28 	.word	0x20006a28
 8002994:	200068e0 	.word	0x200068e0
 8002998:	20006370 	.word	0x20006370
 800299c:	200067e0 	.word	0x200067e0
 80029a0:	08021480 	.word	0x08021480
 80029a4:	20000478 	.word	0x20000478
 80029a8:	200069d4 	.word	0x200069d4
 80029ac:	20006a24 	.word	0x20006a24
 80029b0:	200063a0 	.word	0x200063a0
 80029b4:	20000484 	.word	0x20000484
 80029b8:	20006380 	.word	0x20006380
 80029bc:	20006378 	.word	0x20006378
 80029c0:	200067dc 	.word	0x200067dc
 80029c4:	20000470 	.word	0x20000470
 80029c8:	2000637c 	.word	0x2000637c
 80029cc:	200069d0 	.word	0x200069d0
 80029d0:	91a2b3c5 	.word	0x91a2b3c5
 80029d4:	404e0000 	.word	0x404e0000
 80029d8:	20006dcc 	.word	0x20006dcc
 80029dc:	080214cc 	.word	0x080214cc
 80029e0:	88888889 	.word	0x88888889
 80029e4:	20006384 	.word	0x20006384
 80029e8:	45610000 	.word	0x45610000
 80029ec:	20006dc8 	.word	0x20006dc8
 80029f0:	200068e4 	.word	0x200068e4
 80029f4:	20006b94 	.word	0x20006b94
 80029f8:	20006940 	.word	0x20006940
 80029fc:	200067d4 	.word	0x200067d4
 8002a00:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a04:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a0c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002a10:	ed8d 7b00 	vstr	d7, [sp]
 8002a14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a18:	4917      	ldr	r1, [pc, #92]	; (8002a78 <StartTelemetry2+0x3c8>)
 8002a1a:	4818      	ldr	r0, [pc, #96]	; (8002a7c <StartTelemetry2+0x3cc>)
 8002a1c:	f01a f948 	bl	801ccb0 <siprintf>
										ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LATITUDE,LONGITUDE,MIN,SEC,SUBSEC,STATE,CONT);
			XTend_Transmit(xtend_tx_buffer);
 8002a20:	4816      	ldr	r0, [pc, #88]	; (8002a7c <StartTelemetry2+0x3cc>)
 8002a22:	f7ff fdbf 	bl	80025a4 <XTend_Transmit>
										ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LATITUDE,LONGITUDE,MIN,SEC,SUBSEC,STATE,CONT);
			TxProtocol(sradio_tx_buffer, strlen(sradio_tx_buffer));
		  #endif


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <StartTelemetry2+0x3d0>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <StartTelemetry2+0x390>
 8002a2e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d104      	bne.n	8002a40 <StartTelemetry2+0x390>
			  iridium_counter = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			  #if IRIDIUM_ //Iridium send
			  MRT_Static_Iridium_getTime(); //TODO doesn't cost anything
 8002a3c:	f003 ffec 	bl	8006a18 <MRT_Static_Iridium_getTime>
			  //MRT_Static_Iridium_sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8002a40:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002a44:	3301      	adds	r3, #1
 8002a46:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	  }
	  counter++;
 8002a4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2108      	movs	r1, #8
 8002a58:	480a      	ldr	r0, [pc, #40]	; (8002a84 <StartTelemetry2+0x3d4>)
 8002a5a:	f006 ffb1 	bl	80099c0 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <StartTelemetry2+0x3d0>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <StartTelemetry2+0x3be>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8002a66:	200a      	movs	r0, #10
 8002a68:	f013 fb43 	bl	80160f2 <osDelay>
 8002a6c:	e634      	b.n	80026d8 <StartTelemetry2+0x28>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8002a6e:	2014      	movs	r0, #20
 8002a70:	f013 fb3f 	bl	80160f2 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8002a74:	e630      	b.n	80026d8 <StartTelemetry2+0x28>
 8002a76:	bf00      	nop
 8002a78:	080214d4 	.word	0x080214d4
 8002a7c:	200067e0 	.word	0x200067e0
 8002a80:	200004a4 	.word	0x200004a4
 8002a84:	40020800 	.word	0x40020800

08002a88 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 8002a90:	f013 fac0 	bl	8016014 <osThreadGetId>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4a2d      	ldr	r2, [pc, #180]	; (8002b4c <StartSensors3+0xc4>)
 8002a98:	60d3      	str	r3, [r2, #12]

	#if !SENSORS_THREAD
	osThreadExit();
	#endif

	uint8_t counter = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	482b      	ldr	r0, [pc, #172]	; (8002b50 <StartSensors3+0xc8>)
 8002aa4:	f006 ff8c 	bl	80099c0 <HAL_GPIO_WritePin>

	  if (counter == SENSORS_POLL_FREQ_DIVIDER){
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b0a      	cmp	r3, #10
 8002aac:	d12b      	bne.n	8002b06 <StartSensors3+0x7e>
		  counter=0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]

		  //GPS
		  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 8002ab2:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <StartSensors3+0xcc>)
 8002ab4:	4928      	ldr	r1, [pc, #160]	; (8002b58 <StartSensors3+0xd0>)
 8002ab6:	4829      	ldr	r0, [pc, #164]	; (8002b5c <StartSensors3+0xd4>)
 8002ab8:	f000 fe44 	bl	8003744 <GPS_Poll>

	  	  //LSM6DSR
	  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 8002abc:	4a28      	ldr	r2, [pc, #160]	; (8002b60 <StartSensors3+0xd8>)
 8002abe:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <StartSensors3+0xdc>)
 8002ac0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ac2:	f7fe fc05 	bl	80012d0 <MRT_LSM6DSR_getAcceleration>
	  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 8002ac6:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <StartSensors3+0xd8>)
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <StartSensors3+0xe0>)
 8002aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8002acc:	f7fe fc70 	bl	80013b0 <MRT_LSM6DSR_getAngularRate>
		  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 8002ad0:	4a23      	ldr	r2, [pc, #140]	; (8002b60 <StartSensors3+0xd8>)
 8002ad2:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <StartSensors3+0xe4>)
 8002ad4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ad6:	f7fe fc41 	bl	800135c <MRT_LSM6DSR_getTemperature>

		  //LPS22HH
		  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 8002ada:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <StartSensors3+0xe8>)
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <StartSensors3+0xec>)
 8002ade:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ae0:	f7fe fd90 	bl	8001604 <MRT_LPS22HH_getTemperature>
		  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 8002ae4:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <StartSensors3+0xe8>)
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <StartSensors3+0xf0>)
 8002ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aea:	f7fe fd5f 	bl	80015ac <MRT_LPS22HH_getPressure>
		  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <StartSensors3+0xf0>)
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	eeb0 0a67 	vmov.f32	s0, s15
 8002af8:	f001 fb92 	bl	8004220 <MRT_getAltitude>
 8002afc:	eef0 7a40 	vmov.f32	s15, s0
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <StartSensors3+0xf4>)
 8002b02:	edc3 7a00 	vstr	s15, [r3]
	  }
	  counter++;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]


	  if(apogee_flag == 0){
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <StartSensors3+0xf8>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <StartSensors3+0xa0>
		  //Poll propulsion sensors

		  //Thermocouple
		  Max31855_Read_Temp();
 8002b14:	f005 fd28 	bl	8008568 <Max31855_Read_Temp>

		  //Pressure tank
		  transducer_pressure = MRT_prop_poll_pressure_transducer(&hadc1);
 8002b18:	481a      	ldr	r0, [pc, #104]	; (8002b84 <StartSensors3+0xfc>)
 8002b1a:	f001 fb3d 	bl	8004198 <MRT_prop_poll_pressure_transducer>
 8002b1e:	eef0 7a40 	vmov.f32	s15, s0
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <StartSensors3+0x100>)
 8002b24:	edc3 7a00 	vstr	s15, [r3]
	  }

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	4808      	ldr	r0, [pc, #32]	; (8002b50 <StartSensors3+0xc8>)
 8002b2e:	f006 ff47 	bl	80099c0 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <StartSensors3+0xf8>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <StartSensors3+0xba>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8002b3a:	200a      	movs	r0, #10
 8002b3c:	f013 fad9 	bl	80160f2 <osDelay>
 8002b40:	e7ad      	b.n	8002a9e <StartSensors3+0x16>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8002b42:	2014      	movs	r0, #20
 8002b44:	f013 fad5 	bl	80160f2 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002b48:	e7a9      	b.n	8002a9e <StartSensors3+0x16>
 8002b4a:	bf00      	nop
 8002b4c:	20006078 	.word	0x20006078
 8002b50:	40020800 	.word	0x40020800
 8002b54:	200069d0 	.word	0x200069d0
 8002b58:	200067d4 	.word	0x200067d4
 8002b5c:	20006940 	.word	0x20006940
 8002b60:	20006a88 	.word	0x20006a88
 8002b64:	20000478 	.word	0x20000478
 8002b68:	20000484 	.word	0x20000484
 8002b6c:	20000490 	.word	0x20000490
 8002b70:	20006a78 	.word	0x20006a78
 8002b74:	20000474 	.word	0x20000474
 8002b78:	20000470 	.word	0x20000470
 8002b7c:	20000494 	.word	0x20000494
 8002b80:	200004a4 	.word	0x200004a4
 8002b84:	2000678c 	.word	0x2000678c
 8002b88:	20006964 	.word	0x20006964

08002b8c <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b0c2      	sub	sp, #264	; 0x108
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	#if !PRINTING_THREAD
	osThreadExit();
 8002b96:	f013 faa6 	bl	80160e6 <osThreadExit>
	...

08002b9c <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8002b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9e:	b0cb      	sub	sp, #300	; 0x12c
 8002ba0:	af04      	add	r7, sp, #16
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	6018      	str	r0, [r3, #0]
	osThreadState_t thread_state;

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2104      	movs	r1, #4
 8002baa:	485d      	ldr	r0, [pc, #372]	; (8002d20 <StartWatchDog+0x184>)
 8002bac:	f006 ff08 	bl	80099c0 <HAL_GPIO_WritePin>

	#if IWDG_ACTIVE
	HAL_IWDG_Refresh(&hiwdg);
 8002bb0:	485c      	ldr	r0, [pc, #368]	; (8002d24 <StartWatchDog+0x188>)
 8002bb2:	f007 ffe9 	bl	800ab88 <HAL_IWDG_Refresh>
	#endif

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	495b      	ldr	r1, [pc, #364]	; (8002d28 <StartWatchDog+0x18c>)
 8002bba:	485c      	ldr	r0, [pc, #368]	; (8002d2c <StartWatchDog+0x190>)
 8002bbc:	f00a f966 	bl	800ce8c <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	495b      	ldr	r1, [pc, #364]	; (8002d30 <StartWatchDog+0x194>)
 8002bc4:	4859      	ldr	r0, [pc, #356]	; (8002d2c <StartWatchDog+0x190>)
 8002bc6:	f00a fa66 	bl	800d096 <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 8002bca:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <StartWatchDog+0x18c>)
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	4b59      	ldr	r3, [pc, #356]	; (8002d34 <StartWatchDog+0x198>)
 8002bd0:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 8002bd2:	4b55      	ldr	r3, [pc, #340]	; (8002d28 <StartWatchDog+0x18c>)
 8002bd4:	785a      	ldrb	r2, [r3, #1]
 8002bd6:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <StartWatchDog+0x19c>)
 8002bd8:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 8002bda:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <StartWatchDog+0x18c>)
 8002bdc:	789a      	ldrb	r2, [r3, #2]
 8002bde:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <StartWatchDog+0x1a0>)
 8002be0:	701a      	strb	r2, [r3, #0]

	 memset(buffer, 0, TX_BUF_DIM);
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f018 fd63 	bl	801b6b8 <memset>
	 sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 8002bf2:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <StartWatchDog+0x198>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461d      	mov	r5, r3
 8002bf8:	4b4f      	ldr	r3, [pc, #316]	; (8002d38 <StartWatchDog+0x19c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461e      	mov	r6, r3
 8002bfe:	4b4f      	ldr	r3, [pc, #316]	; (8002d3c <StartWatchDog+0x1a0>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461c      	mov	r4, r3
 8002c04:	4b4e      	ldr	r3, [pc, #312]	; (8002d40 <StartWatchDog+0x1a4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fcbd 	bl	8000588 <__aeabi_f2d>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	f107 000c 	add.w	r0, r7, #12
 8002c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c1a:	9400      	str	r4, [sp, #0]
 8002c1c:	4633      	mov	r3, r6
 8002c1e:	462a      	mov	r2, r5
 8002c20:	4948      	ldr	r1, [pc, #288]	; (8002d44 <StartWatchDog+0x1a8>)
 8002c22:	f01a f845 	bl	801ccb0 <siprintf>
	 HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002c26:	f107 030c 	add.w	r3, r7, #12
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd faea 	bl	8000204 <strlen>
 8002c30:	4603      	mov	r3, r0
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	f107 010c 	add.w	r1, r7, #12
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3c:	4842      	ldr	r0, [pc, #264]	; (8002d48 <StartWatchDog+0x1ac>)
 8002c3e:	f00c f98a 	bl	800ef56 <HAL_UART_Transmit>
	   * does it at the same time or it's a hardfault crash
	   *
	   * Moved the other code where we write to external flash to this thread (when going to sleep)
	   */
	  //Save the time
	  MRT_saveRTCTime();
 8002c42:	f001 fa61 	bl	8004108 <MRT_saveRTCTime>

	  //Check if it's sleep time
	  if (flagA==1){
 8002c46:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <StartWatchDog+0x1b0>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d111      	bne.n	8002c72 <StartWatchDog+0xd6>
		//Update iwdg_flag
		iwdg_flag = 1;
 8002c4e:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <StartWatchDog+0x1b4>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002c54:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <StartWatchDog+0x1b4>)
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <StartWatchDog+0x1b8>)
 8002c5a:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	f001 fd87 	bl	8004770 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002c62:	2304      	movs	r3, #4
 8002c64:	2200      	movs	r2, #0
 8002c66:	2101      	movs	r1, #1
 8002c68:	483a      	ldr	r0, [pc, #232]	; (8002d54 <StartWatchDog+0x1b8>)
 8002c6a:	f001 fecb 	bl	8004a04 <W25qxx_WriteSector>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8002c6e:	f7fe fd2d 	bl	80016cc <__NVIC_SystemReset>
	  }


	  //Check each thread state
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002c78:	e043      	b.n	8002d02 <StartWatchDog+0x166>
		  thread_state = osThreadGetState(threadID[i]);
 8002c7a:	4a37      	ldr	r2, [pc, #220]	; (8002d58 <StartWatchDog+0x1bc>)
 8002c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f013 f9d1 	bl	801602c <osThreadGetState>
 8002c8a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

		  if (thread_state == osThreadInactive ||
 8002c8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <StartWatchDog+0x10a>
 8002c96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d003      	beq.n	8002ca6 <StartWatchDog+0x10a>
		      thread_state == osThreadBlocked  ||
 8002c9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d120      	bne.n	8002ce8 <StartWatchDog+0x14c>
		      thread_state == osThreadTerminated){
			  uint8_t ejection_stage = 5; //TODO invented a random variable with a random value
 8002ca6:	2305      	movs	r3, #5
 8002ca8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			  if (i==1 && ejection_stage < 5){
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10c      	bne.n	8002cce <StartWatchDog+0x132>
 8002cb4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d808      	bhi.n	8002cce <StartWatchDog+0x132>
				 osThreadResume(threadID[i]);
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <StartWatchDog+0x1bc>)
 8002cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f013 f9ec 	bl	80160a4 <osThreadResume>
		      thread_state == osThreadTerminated){
 8002ccc:	e013      	b.n	8002cf6 <StartWatchDog+0x15a>
			  }
			  else if (i!=1){
 8002cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d00f      	beq.n	8002cf6 <StartWatchDog+0x15a>
				 osThreadResume(threadID[i]);
 8002cd6:	4a20      	ldr	r2, [pc, #128]	; (8002d58 <StartWatchDog+0x1bc>)
 8002cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f013 f9df 	bl	80160a4 <osThreadResume>
		      thread_state == osThreadTerminated){
 8002ce6:	e006      	b.n	8002cf6 <StartWatchDog+0x15a>
			  }
		  }

		  else if (thread_state == osThreadError){
 8002ce8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d102      	bne.n	8002cf8 <StartWatchDog+0x15c>
			  NVIC_SystemReset();
 8002cf2:	f7fe fceb 	bl	80016cc <__NVIC_SystemReset>
		      thread_state == osThreadTerminated){
 8002cf6:	bf00      	nop
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	ddb7      	ble.n	8002c7a <StartWatchDog+0xde>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	4804      	ldr	r0, [pc, #16]	; (8002d20 <StartWatchDog+0x184>)
 8002d10:	f006 fe56 	bl	80099c0 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002d14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d18:	f013 f9eb 	bl	80160f2 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002d1c:	e743      	b.n	8002ba6 <StartWatchDog+0xa>
 8002d1e:	bf00      	nop
 8002d20:	40020800 	.word	0x40020800
 8002d24:	20006310 	.word	0x20006310
 8002d28:	200006d8 	.word	0x200006d8
 8002d2c:	20006944 	.word	0x20006944
 8002d30:	200006ec 	.word	0x200006ec
 8002d34:	200004a5 	.word	0x200004a5
 8002d38:	200004a6 	.word	0x200004a6
 8002d3c:	200004a7 	.word	0x200004a7
 8002d40:	20000494 	.word	0x20000494
 8002d44:	0802151c 	.word	0x0802151c
 8002d48:	20005ee0 	.word	0x20005ee0
 8002d4c:	20000718 	.word	0x20000718
 8002d50:	200004a3 	.word	0x200004a3
 8002d54:	20006074 	.word	0x20006074
 8002d58:	20006078 	.word	0x20006078

08002d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d6e:	f005 fefb 	bl	8008b68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40001000 	.word	0x40001000

08002d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_MspInit+0x54>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <HAL_MspInit+0x54>)
 8002da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da4:	6453      	str	r3, [r2, #68]	; 0x44
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_MspInit+0x54>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_MspInit+0x54>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <HAL_MspInit+0x54>)
 8002dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_MspInit+0x54>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	f06f 0001 	mvn.w	r0, #1
 8002dd6:	f006 fbf7 	bl	80095c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800

08002de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <HAL_ADC_MspInit+0x7c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d127      	bne.n	8002e5a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_ADC_MspInit+0x80>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <HAL_ADC_MspInit+0x80>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_ADC_MspInit+0x80>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_ADC_MspInit+0x80>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <HAL_ADC_MspInit+0x80>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <HAL_ADC_MspInit+0x80>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002e42:	2340      	movs	r3, #64	; 0x40
 8002e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e46:	2303      	movs	r3, #3
 8002e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4619      	mov	r1, r3
 8002e54:	4805      	ldr	r0, [pc, #20]	; (8002e6c <HAL_ADC_MspInit+0x84>)
 8002e56:	f006 fbef 	bl	8009638 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e5a:	bf00      	nop
 8002e5c:	3728      	adds	r7, #40	; 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40012000 	.word	0x40012000
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020000 	.word	0x40020000

08002e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08e      	sub	sp, #56	; 0x38
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a5c      	ldr	r2, [pc, #368]	; (8003000 <HAL_I2C_MspInit+0x190>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d12d      	bne.n	8002eee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	4b5b      	ldr	r3, [pc, #364]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a5a      	ldr	r2, [pc, #360]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b58      	ldr	r3, [pc, #352]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	623b      	str	r3, [r7, #32]
 8002eac:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002eae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb4:	2312      	movs	r3, #18
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec8:	4619      	mov	r1, r3
 8002eca:	484f      	ldr	r0, [pc, #316]	; (8003008 <HAL_I2C_MspInit+0x198>)
 8002ecc:	f006 fbb4 	bl	8009638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	4a4a      	ldr	r2, [pc, #296]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ede:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee0:	4b48      	ldr	r3, [pc, #288]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002eec:	e083      	b.n	8002ff6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a46      	ldr	r2, [pc, #280]	; (800300c <HAL_I2C_MspInit+0x19c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d12d      	bne.n	8002f54 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	4b41      	ldr	r3, [pc, #260]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	4a40      	ldr	r2, [pc, #256]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f02:	f043 0302 	orr.w	r3, r3, #2
 8002f06:	6313      	str	r3, [r2, #48]	; 0x30
 8002f08:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f1a:	2312      	movs	r3, #18
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f22:	2303      	movs	r3, #3
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f26:	2304      	movs	r3, #4
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4835      	ldr	r0, [pc, #212]	; (8003008 <HAL_I2C_MspInit+0x198>)
 8002f32:	f006 fb81 	bl	8009638 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	4b32      	ldr	r3, [pc, #200]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a31      	ldr	r2, [pc, #196]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]
}
 8002f52:	e050      	b.n	8002ff6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <HAL_I2C_MspInit+0x1a0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d14b      	bne.n	8002ff6 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	4b28      	ldr	r3, [pc, #160]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a27      	ldr	r2, [pc, #156]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a20      	ldr	r2, [pc, #128]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f9c:	2312      	movs	r3, #18
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fa8:	2304      	movs	r3, #4
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4818      	ldr	r0, [pc, #96]	; (8003014 <HAL_I2C_MspInit+0x1a4>)
 8002fb4:	f006 fb40 	bl	8009638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fbe:	2312      	movs	r3, #18
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4810      	ldr	r0, [pc, #64]	; (8003018 <HAL_I2C_MspInit+0x1a8>)
 8002fd6:	f006 fb2f 	bl	8009638 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a08      	ldr	r2, [pc, #32]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002fe4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_I2C_MspInit+0x194>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
}
 8002ff6:	bf00      	nop
 8002ff8:	3738      	adds	r7, #56	; 0x38
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40005400 	.word	0x40005400
 8003004:	40023800 	.word	0x40023800
 8003008:	40020400 	.word	0x40020400
 800300c:	40005800 	.word	0x40005800
 8003010:	40005c00 	.word	0x40005c00
 8003014:	40020800 	.word	0x40020800
 8003018:	40020000 	.word	0x40020000

0800301c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08e      	sub	sp, #56	; 0x38
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003024:	f107 0308 	add.w	r3, r7, #8
 8003028:	2230      	movs	r2, #48	; 0x30
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f018 fb43 	bl	801b6b8 <memset>
  if(hrtc->Instance==RTC)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a10      	ldr	r2, [pc, #64]	; (8003078 <HAL_RTC_MspInit+0x5c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d119      	bne.n	8003070 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800303c:	2320      	movs	r3, #32
 800303e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003046:	f107 0308 	add.w	r3, r7, #8
 800304a:	4618      	mov	r0, r3
 800304c:	f009 fc12 	bl	800c874 <HAL_RCCEx_PeriphCLKConfig>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003056:	f7ff fe93 	bl	8002d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <HAL_RTC_MspInit+0x60>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8003060:	2200      	movs	r2, #0
 8003062:	2105      	movs	r1, #5
 8003064:	2029      	movs	r0, #41	; 0x29
 8003066:	f006 faaf 	bl	80095c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800306a:	2029      	movs	r0, #41	; 0x29
 800306c:	f006 fac8 	bl	8009600 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003070:	bf00      	nop
 8003072:	3738      	adds	r7, #56	; 0x38
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40002800 	.word	0x40002800
 800307c:	42470e3c 	.word	0x42470e3c

08003080 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08e      	sub	sp, #56	; 0x38
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a4c      	ldr	r2, [pc, #304]	; (80031d0 <HAL_SPI_MspInit+0x150>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d12d      	bne.n	80030fe <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4a4a      	ldr	r2, [pc, #296]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 80030ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b0:	6413      	str	r3, [r2, #64]	; 0x40
 80030b2:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ba:	623b      	str	r3, [r7, #32]
 80030bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	4b44      	ldr	r3, [pc, #272]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a43      	ldr	r2, [pc, #268]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80030da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2302      	movs	r3, #2
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e8:	2303      	movs	r3, #3
 80030ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030ec:	2305      	movs	r3, #5
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f4:	4619      	mov	r1, r3
 80030f6:	4838      	ldr	r0, [pc, #224]	; (80031d8 <HAL_SPI_MspInit+0x158>)
 80030f8:	f006 fa9e 	bl	8009638 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80030fc:	e064      	b.n	80031c8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a36      	ldr	r2, [pc, #216]	; (80031dc <HAL_SPI_MspInit+0x15c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d12d      	bne.n	8003164 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	4a30      	ldr	r2, [pc, #192]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 8003112:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003116:	6453      	str	r3, [r2, #68]	; 0x44
 8003118:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 800312e:	f043 0310 	orr.w	r3, r3, #16
 8003132:	6313      	str	r3, [r2, #48]	; 0x30
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003140:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003152:	2305      	movs	r3, #5
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315a:	4619      	mov	r1, r3
 800315c:	4820      	ldr	r0, [pc, #128]	; (80031e0 <HAL_SPI_MspInit+0x160>)
 800315e:	f006 fa6b 	bl	8009638 <HAL_GPIO_Init>
}
 8003162:	e031      	b.n	80031c8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_SPI_MspInit+0x164>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d12c      	bne.n	80031c8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 8003178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800317c:	6453      	str	r3, [r2, #68]	; 0x44
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 8003194:	f043 0320 	orr.w	r3, r3, #32
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_SPI_MspInit+0x154>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80031a6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80031b8:	2305      	movs	r3, #5
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c0:	4619      	mov	r1, r3
 80031c2:	4809      	ldr	r0, [pc, #36]	; (80031e8 <HAL_SPI_MspInit+0x168>)
 80031c4:	f006 fa38 	bl	8009638 <HAL_GPIO_Init>
}
 80031c8:	bf00      	nop
 80031ca:	3738      	adds	r7, #56	; 0x38
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40003800 	.word	0x40003800
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40020400 	.word	0x40020400
 80031dc:	40013400 	.word	0x40013400
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40015000 	.word	0x40015000
 80031e8:	40021400 	.word	0x40021400

080031ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fc:	d10d      	bne.n	800321a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_TIM_PWM_MspInit+0x3c>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a08      	ldr	r2, [pc, #32]	; (8003228 <HAL_TIM_PWM_MspInit+0x3c>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_TIM_PWM_MspInit+0x3c>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800

0800322c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d11d      	bne.n	800328a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_TIM_MspPostInit+0x68>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <HAL_TIM_MspPostInit+0x68>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <HAL_TIM_MspPostInit+0x68>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800326a:	2304      	movs	r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800327a:	2301      	movs	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	4619      	mov	r1, r3
 8003284:	4804      	ldr	r0, [pc, #16]	; (8003298 <HAL_TIM_MspPostInit+0x6c>)
 8003286:	f006 f9d7 	bl	8009638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800328a:	bf00      	nop
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	40020000 	.word	0x40020000

0800329c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08e      	sub	sp, #56	; 0x38
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a4b      	ldr	r2, [pc, #300]	; (80033e8 <HAL_UART_MspInit+0x14c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d12c      	bne.n	8003318 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
 80032c2:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <HAL_UART_MspInit+0x150>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	4a49      	ldr	r2, [pc, #292]	; (80033ec <HAL_UART_MspInit+0x150>)
 80032c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032cc:	6413      	str	r3, [r2, #64]	; 0x40
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_UART_MspInit+0x150>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032d6:	623b      	str	r3, [r7, #32]
 80032d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	4b43      	ldr	r3, [pc, #268]	; (80033ec <HAL_UART_MspInit+0x150>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	4a42      	ldr	r2, [pc, #264]	; (80033ec <HAL_UART_MspInit+0x150>)
 80032e4:	f043 0310 	orr.w	r3, r3, #16
 80032e8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ea:	4b40      	ldr	r3, [pc, #256]	; (80033ec <HAL_UART_MspInit+0x150>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 80032f6:	2303      	movs	r3, #3
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003302:	2303      	movs	r3, #3
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003306:	2308      	movs	r3, #8
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800330a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800330e:	4619      	mov	r1, r3
 8003310:	4837      	ldr	r0, [pc, #220]	; (80033f0 <HAL_UART_MspInit+0x154>)
 8003312:	f006 f991 	bl	8009638 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003316:	e063      	b.n	80033e0 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a35      	ldr	r2, [pc, #212]	; (80033f4 <HAL_UART_MspInit+0x158>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d12d      	bne.n	800337e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	4b31      	ldr	r3, [pc, #196]	; (80033ec <HAL_UART_MspInit+0x150>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a30      	ldr	r2, [pc, #192]	; (80033ec <HAL_UART_MspInit+0x150>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <HAL_UART_MspInit+0x150>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <HAL_UART_MspInit+0x150>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a29      	ldr	r2, [pc, #164]	; (80033ec <HAL_UART_MspInit+0x150>)
 8003348:	f043 0308 	orr.w	r3, r3, #8
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_UART_MspInit+0x150>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 800335a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003368:	2303      	movs	r3, #3
 800336a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800336c:	2307      	movs	r3, #7
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003374:	4619      	mov	r1, r3
 8003376:	4820      	ldr	r0, [pc, #128]	; (80033f8 <HAL_UART_MspInit+0x15c>)
 8003378:	f006 f95e 	bl	8009638 <HAL_GPIO_Init>
}
 800337c:	e030      	b.n	80033e0 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <HAL_UART_MspInit+0x160>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d12b      	bne.n	80033e0 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_UART_MspInit+0x150>)
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	4a16      	ldr	r2, [pc, #88]	; (80033ec <HAL_UART_MspInit+0x150>)
 8003392:	f043 0320 	orr.w	r3, r3, #32
 8003396:	6453      	str	r3, [r2, #68]	; 0x44
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_UART_MspInit+0x150>)
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_UART_MspInit+0x150>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <HAL_UART_MspInit+0x150>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6313      	str	r3, [r2, #48]	; 0x30
 80033b4:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_UART_MspInit+0x150>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 80033c0:	23c0      	movs	r3, #192	; 0xc0
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033cc:	2303      	movs	r3, #3
 80033ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80033d0:	2308      	movs	r3, #8
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d8:	4619      	mov	r1, r3
 80033da:	4809      	ldr	r0, [pc, #36]	; (8003400 <HAL_UART_MspInit+0x164>)
 80033dc:	f006 f92c 	bl	8009638 <HAL_GPIO_Init>
}
 80033e0:	bf00      	nop
 80033e2:	3738      	adds	r7, #56	; 0x38
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40007c00 	.word	0x40007c00
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40004800 	.word	0x40004800
 80033f8:	40020c00 	.word	0x40020c00
 80033fc:	40011400 	.word	0x40011400
 8003400:	40020800 	.word	0x40020800

08003404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08c      	sub	sp, #48	; 0x30
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003414:	2200      	movs	r2, #0
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	2036      	movs	r0, #54	; 0x36
 800341a:	f006 f8d5 	bl	80095c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800341e:	2036      	movs	r0, #54	; 0x36
 8003420:	f006 f8ee 	bl	8009600 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_InitTick+0xa4>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <HAL_InitTick+0xa4>)
 800342e:	f043 0310 	orr.w	r3, r3, #16
 8003432:	6413      	str	r3, [r2, #64]	; 0x40
 8003434:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_InitTick+0xa4>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003440:	f107 0210 	add.w	r2, r7, #16
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f009 f9e0 	bl	800c810 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003450:	f009 f9b6 	bl	800c7c0 <HAL_RCC_GetPCLK1Freq>
 8003454:	4603      	mov	r3, r0
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	4a13      	ldr	r2, [pc, #76]	; (80034ac <HAL_InitTick+0xa8>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0c9b      	lsrs	r3, r3, #18
 8003464:	3b01      	subs	r3, #1
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_InitTick+0xac>)
 800346a:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <HAL_InitTick+0xb0>)
 800346c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <HAL_InitTick+0xac>)
 8003470:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003474:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003476:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <HAL_InitTick+0xac>)
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_InitTick+0xac>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_InitTick+0xac>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003488:	4809      	ldr	r0, [pc, #36]	; (80034b0 <HAL_InitTick+0xac>)
 800348a:	f00a ff2b 	bl	800e2e4 <HAL_TIM_Base_Init>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003494:	4806      	ldr	r0, [pc, #24]	; (80034b0 <HAL_InitTick+0xac>)
 8003496:	f00a ff7f 	bl	800e398 <HAL_TIM_Base_Start_IT>
 800349a:	4603      	mov	r3, r0
 800349c:	e000      	b.n	80034a0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3730      	adds	r7, #48	; 0x30
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40023800 	.word	0x40023800
 80034ac:	431bde83 	.word	0x431bde83
 80034b0:	20006dd0 	.word	0x20006dd0
 80034b4:	40001000 	.word	0x40001000

080034b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ca:	e7fe      	b.n	80034ca <HardFault_Handler+0x4>

080034cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d0:	e7fe      	b.n	80034d0 <MemManage_Handler+0x4>

080034d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034d6:	e7fe      	b.n	80034d6 <BusFault_Handler+0x4>

080034d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034dc:	e7fe      	b.n	80034dc <UsageFault_Handler+0x4>

080034de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80034f0:	2001      	movs	r0, #1
 80034f2:	f006 fa7f 	bl	80099f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003500:	4802      	ldr	r0, [pc, #8]	; (800350c <RTC_Alarm_IRQHandler+0x10>)
 8003502:	f009 ff4f 	bl	800d3a4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20006944 	.word	0x20006944

08003510 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <TIM6_DAC_IRQHandler+0x10>)
 8003516:	f00a fffe 	bl	800e516 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20006dd0 	.word	0x20006dd0

08003524 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003528:	4802      	ldr	r0, [pc, #8]	; (8003534 <OTG_FS_IRQHandler+0x10>)
 800352a:	f007 fc8d 	bl	800ae48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20008cc4 	.word	0x20008cc4

08003538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
	return 1;
 800353c:	2301      	movs	r3, #1
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <_kill>:

int _kill(int pid, int sig)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003552:	f017 fe37 	bl	801b1c4 <__errno>
 8003556:	4603      	mov	r3, r0
 8003558:	2216      	movs	r2, #22
 800355a:	601a      	str	r2, [r3, #0]
	return -1;
 800355c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <_exit>:

void _exit (int status)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ffe7 	bl	8003548 <_kill>
	while (1) {}		/* Make sure we hang here */
 800357a:	e7fe      	b.n	800357a <_exit+0x12>

0800357c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e00a      	b.n	80035a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800358e:	f3af 8000 	nop.w
 8003592:	4601      	mov	r1, r0
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	60ba      	str	r2, [r7, #8]
 800359a:	b2ca      	uxtb	r2, r1
 800359c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	dbf0      	blt.n	800358e <_read+0x12>
	}

return len;
 80035ac:	687b      	ldr	r3, [r7, #4]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e009      	b.n	80035dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	60ba      	str	r2, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3301      	adds	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	dbf1      	blt.n	80035c8 <_write+0x12>
	}
	return len;
 80035e4:	687b      	ldr	r3, [r7, #4]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_close>:

int _close(int file)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	return -1;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003616:	605a      	str	r2, [r3, #4]
	return 0;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <_isatty>:

int _isatty(int file)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
	return 1;
 800362e:	2301      	movs	r3, #1
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
	return 0;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
	...

08003658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <_sbrk+0x5c>)
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <_sbrk+0x60>)
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <_sbrk+0x64>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <_sbrk+0x64>)
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <_sbrk+0x68>)
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <_sbrk+0x64>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	429a      	cmp	r2, r3
 8003686:	d207      	bcs.n	8003698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003688:	f017 fd9c 	bl	801b1c4 <__errno>
 800368c:	4603      	mov	r3, r0
 800368e:	220c      	movs	r2, #12
 8003690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003692:	f04f 33ff 	mov.w	r3, #4294967295
 8003696:	e009      	b.n	80036ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <_sbrk+0x64>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <_sbrk+0x64>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <_sbrk+0x64>)
 80036a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20030000 	.word	0x20030000
 80036b8:	00000400 	.word	0x00000400
 80036bc:	2000049c 	.word	0x2000049c
 80036c0:	200090e0 	.word	0x200090e0

080036c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <SystemInit+0x28>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <SystemInit+0x28>)
 80036d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <SystemInit+0x28>)
 80036da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036de:	609a      	str	r2, [r3, #8]
#endif
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003728 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036f6:	e003      	b.n	8003700 <LoopCopyDataInit>

080036f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036fe:	3104      	adds	r1, #4

08003700 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003700:	480b      	ldr	r0, [pc, #44]	; (8003730 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003708:	d3f6      	bcc.n	80036f8 <CopyDataInit>
  ldr  r2, =_sbss
 800370a:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800370c:	e002      	b.n	8003714 <LoopFillZerobss>

0800370e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800370e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003710:	f842 3b04 	str.w	r3, [r2], #4

08003714 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003718:	d3f9      	bcc.n	800370e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800371a:	f7ff ffd3 	bl	80036c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800371e:	f017 fe4d 	bl	801b3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003722:	f7fd ffe9 	bl	80016f8 <main>
  bx  lr    
 8003726:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003728:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800372c:	08023804 	.word	0x08023804
  ldr  r0, =_sdata
 8003730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003734:	20000438 	.word	0x20000438
  ldr  r2, =_sbss
 8003738:	20000438 	.word	0x20000438
  ldr  r3, = _ebss
 800373c:	200090dc 	.word	0x200090dc

08003740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003740:	e7fe      	b.n	8003740 <ADC_IRQHandler>
	...

08003744 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8003750:	2364      	movs	r3, #100	; 0x64
 8003752:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 800375c:	e073      	b.n	8003846 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 800375e:	4b3f      	ldr	r3, [pc, #252]	; (800385c <GPS_Poll+0x118>)
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	2364      	movs	r3, #100	; 0x64
 8003764:	2201      	movs	r2, #1
 8003766:	493e      	ldr	r1, [pc, #248]	; (8003860 <GPS_Poll+0x11c>)
 8003768:	f00b fc87 	bl	800f07a <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 800376c:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <GPS_Poll+0x11c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b0a      	cmp	r3, #10
 8003772:	d00f      	beq.n	8003794 <GPS_Poll+0x50>
 8003774:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <GPS_Poll+0x120>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b63      	cmp	r3, #99	; 0x63
 800377a:	d80b      	bhi.n	8003794 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 800377c:	4b39      	ldr	r3, [pc, #228]	; (8003864 <GPS_Poll+0x120>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	b2d1      	uxtb	r1, r2
 8003784:	4a37      	ldr	r2, [pc, #220]	; (8003864 <GPS_Poll+0x120>)
 8003786:	7011      	strb	r1, [r2, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	4b35      	ldr	r3, [pc, #212]	; (8003860 <GPS_Poll+0x11c>)
 800378c:	7819      	ldrb	r1, [r3, #0]
 800378e:	4b36      	ldr	r3, [pc, #216]	; (8003868 <GPS_Poll+0x124>)
 8003790:	5499      	strb	r1, [r3, r2]
 8003792:	e021      	b.n	80037d8 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8003794:	4834      	ldr	r0, [pc, #208]	; (8003868 <GPS_Poll+0x124>)
 8003796:	f000 f86b 	bl	8003870 <GPS_validate>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80037a0:	4831      	ldr	r0, [pc, #196]	; (8003868 <GPS_Poll+0x124>)
 80037a2:	f000 f8c7 	bl	8003934 <GPS_parse>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00d      	beq.n	80037c8 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80037ac:	4b2f      	ldr	r3, [pc, #188]	; (800386c <GPS_Poll+0x128>)
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80037b4:	4b2d      	ldr	r3, [pc, #180]	; (800386c <GPS_Poll+0x128>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <GPS_Poll+0x128>)
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]
					done = 1;
 80037c4:	2301      	movs	r3, #1
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80037c8:	4b26      	ldr	r3, [pc, #152]	; (8003864 <GPS_Poll+0x120>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80037ce:	2264      	movs	r2, #100	; 0x64
 80037d0:	2100      	movs	r1, #0
 80037d2:	4825      	ldr	r0, [pc, #148]	; (8003868 <GPS_Poll+0x124>)
 80037d4:	f017 ff70 	bl	801b6b8 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80037d8:	2300      	movs	r3, #0
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <GPS_Poll+0x118>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	4b1d      	ldr	r3, [pc, #116]	; (800385c <GPS_Poll+0x118>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <GPS_Poll+0x118>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <GPS_Poll+0x118>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <GPS_Poll+0x118>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <GPS_Poll+0x118>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <GPS_Poll+0x118>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <GPS_Poll+0x118>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8003840:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003842:	3301      	adds	r3, #1
 8003844:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8003846:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003848:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800384a:	429a      	cmp	r2, r3
 800384c:	d202      	bcs.n	8003854 <GPS_Poll+0x110>
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	d084      	beq.n	800375e <GPS_Poll+0x1a>
	}
}
 8003854:	bf00      	nop
 8003856:	3730      	adds	r7, #48	; 0x30
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20005fd4 	.word	0x20005fd4
 8003860:	200004a0 	.word	0x200004a0
 8003864:	200004a1 	.word	0x200004a1
 8003868:	20006e70 	.word	0x20006e70
 800386c:	20006e18 	.word	0x20006e18

08003870 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b24      	cmp	r3, #36	; 0x24
 800388a:	d103      	bne.n	8003894 <GPS_validate+0x24>
        i++;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	3301      	adds	r3, #1
 8003890:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8003892:	e00c      	b.n	80038ae <GPS_validate+0x3e>
        return 0;
 8003894:	2300      	movs	r3, #0
 8003896:	e047      	b.n	8003928 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4053      	eors	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        i++;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	3301      	adds	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <GPS_validate+0x5c>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	4413      	add	r3, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b2a      	cmp	r3, #42	; 0x2a
 80038c4:	d002      	beq.n	80038cc <GPS_validate+0x5c>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b4a      	cmp	r3, #74	; 0x4a
 80038ca:	dde5      	ble.n	8003898 <GPS_validate+0x28>
    }

    if(i >= 75){
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b4a      	cmp	r3, #74	; 0x4a
 80038d0:	dd01      	ble.n	80038d6 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80038d2:	2300      	movs	r3, #0
 80038d4:	e028      	b.n	8003928 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4413      	add	r3, r2
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b2a      	cmp	r3, #42	; 0x2a
 80038e0:	d119      	bne.n	8003916 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3301      	adds	r3, #1
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3302      	adds	r3, #2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80038fe:	f107 0308 	add.w	r3, r7, #8
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	490a      	ldr	r1, [pc, #40]	; (8003930 <GPS_validate+0xc0>)
 8003906:	4618      	mov	r0, r3
 8003908:	f019 f9d2 	bl	801ccb0 <siprintf>
    return((checkcalcstr[0] == check[0])
 800390c:	7a3a      	ldrb	r2, [r7, #8]
 800390e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003910:	429a      	cmp	r2, r3
 8003912:	d108      	bne.n	8003926 <GPS_validate+0xb6>
 8003914:	e001      	b.n	800391a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8003916:	2300      	movs	r3, #0
 8003918:	e006      	b.n	8003928 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800391a:	7a7a      	ldrb	r2, [r7, #9]
 800391c:	7b7b      	ldrb	r3, [r7, #13]
 800391e:	429a      	cmp	r2, r3
 8003920:	d101      	bne.n	8003926 <GPS_validate+0xb6>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <GPS_validate+0xb8>
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	0802153c 	.word	0x0802153c

08003934 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af08      	add	r7, sp, #32
 800393a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 800393c:	2206      	movs	r2, #6
 800393e:	496d      	ldr	r1, [pc, #436]	; (8003af4 <GPS_parse+0x1c0>)
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f019 fa4e 	bl	801cde2 <strncmp>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d139      	bne.n	80039c0 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800394c:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <GPS_parse+0x1c4>)
 800394e:	9307      	str	r3, [sp, #28]
 8003950:	4b6a      	ldr	r3, [pc, #424]	; (8003afc <GPS_parse+0x1c8>)
 8003952:	9306      	str	r3, [sp, #24]
 8003954:	4b6a      	ldr	r3, [pc, #424]	; (8003b00 <GPS_parse+0x1cc>)
 8003956:	9305      	str	r3, [sp, #20]
 8003958:	4b6a      	ldr	r3, [pc, #424]	; (8003b04 <GPS_parse+0x1d0>)
 800395a:	9304      	str	r3, [sp, #16]
 800395c:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <GPS_parse+0x1d4>)
 800395e:	9303      	str	r3, [sp, #12]
 8003960:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <GPS_parse+0x1d8>)
 8003962:	9302      	str	r3, [sp, #8]
 8003964:	4b6a      	ldr	r3, [pc, #424]	; (8003b10 <GPS_parse+0x1dc>)
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <GPS_parse+0x1e0>)
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <GPS_parse+0x1e4>)
 800396e:	4a6b      	ldr	r2, [pc, #428]	; (8003b1c <GPS_parse+0x1e8>)
 8003970:	496b      	ldr	r1, [pc, #428]	; (8003b20 <GPS_parse+0x1ec>)
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f019 f9bc 	bl	801ccf0 <siscanf>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	f340 80b5 	ble.w	8003aea <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003980:	4b68      	ldr	r3, [pc, #416]	; (8003b24 <GPS_parse+0x1f0>)
 8003982:	edd3 7a04 	vldr	s15, [r3, #16]
 8003986:	4b67      	ldr	r3, [pc, #412]	; (8003b24 <GPS_parse+0x1f0>)
 8003988:	7e1b      	ldrb	r3, [r3, #24]
 800398a:	4618      	mov	r0, r3
 800398c:	eeb0 0a67 	vmov.f32	s0, s15
 8003990:	f000 f8ec 	bl	8003b6c <GPS_nmea_to_dec>
 8003994:	eef0 7a40 	vmov.f32	s15, s0
 8003998:	4b62      	ldr	r3, [pc, #392]	; (8003b24 <GPS_parse+0x1f0>)
 800399a:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800399e:	4b61      	ldr	r3, [pc, #388]	; (8003b24 <GPS_parse+0x1f0>)
 80039a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80039a4:	4b5f      	ldr	r3, [pc, #380]	; (8003b24 <GPS_parse+0x1f0>)
 80039a6:	7e5b      	ldrb	r3, [r3, #25]
 80039a8:	4618      	mov	r0, r3
 80039aa:	eeb0 0a67 	vmov.f32	s0, s15
 80039ae:	f000 f8dd 	bl	8003b6c <GPS_nmea_to_dec>
 80039b2:	eef0 7a40 	vmov.f32	s15, s0
 80039b6:	4b5b      	ldr	r3, [pc, #364]	; (8003b24 <GPS_parse+0x1f0>)
 80039b8:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80039bc:	2301      	movs	r3, #1
 80039be:	e095      	b.n	8003aec <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80039c0:	2206      	movs	r2, #6
 80039c2:	4959      	ldr	r1, [pc, #356]	; (8003b28 <GPS_parse+0x1f4>)
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f019 fa0c 	bl	801cde2 <strncmp>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d134      	bne.n	8003a3a <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80039d0:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <GPS_parse+0x1f8>)
 80039d2:	9305      	str	r3, [sp, #20]
 80039d4:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <GPS_parse+0x1fc>)
 80039d6:	9304      	str	r3, [sp, #16]
 80039d8:	4b56      	ldr	r3, [pc, #344]	; (8003b34 <GPS_parse+0x200>)
 80039da:	9303      	str	r3, [sp, #12]
 80039dc:	4b4b      	ldr	r3, [pc, #300]	; (8003b0c <GPS_parse+0x1d8>)
 80039de:	9302      	str	r3, [sp, #8]
 80039e0:	4b4b      	ldr	r3, [pc, #300]	; (8003b10 <GPS_parse+0x1dc>)
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	4b4b      	ldr	r3, [pc, #300]	; (8003b14 <GPS_parse+0x1e0>)
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <GPS_parse+0x1e4>)
 80039ea:	4a4c      	ldr	r2, [pc, #304]	; (8003b1c <GPS_parse+0x1e8>)
 80039ec:	4952      	ldr	r1, [pc, #328]	; (8003b38 <GPS_parse+0x204>)
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f019 f97e 	bl	801ccf0 <siscanf>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	dd77      	ble.n	8003aea <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80039fa:	4b4a      	ldr	r3, [pc, #296]	; (8003b24 <GPS_parse+0x1f0>)
 80039fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a00:	4b48      	ldr	r3, [pc, #288]	; (8003b24 <GPS_parse+0x1f0>)
 8003a02:	7e1b      	ldrb	r3, [r3, #24]
 8003a04:	4618      	mov	r0, r3
 8003a06:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0a:	f000 f8af 	bl	8003b6c <GPS_nmea_to_dec>
 8003a0e:	eef0 7a40 	vmov.f32	s15, s0
 8003a12:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <GPS_parse+0x1f0>)
 8003a14:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003a18:	4b42      	ldr	r3, [pc, #264]	; (8003b24 <GPS_parse+0x1f0>)
 8003a1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a1e:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <GPS_parse+0x1f0>)
 8003a20:	7e5b      	ldrb	r3, [r3, #25]
 8003a22:	4618      	mov	r0, r3
 8003a24:	eeb0 0a67 	vmov.f32	s0, s15
 8003a28:	f000 f8a0 	bl	8003b6c <GPS_nmea_to_dec>
 8003a2c:	eef0 7a40 	vmov.f32	s15, s0
 8003a30:	4b3c      	ldr	r3, [pc, #240]	; (8003b24 <GPS_parse+0x1f0>)
 8003a32:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e058      	b.n	8003aec <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8003a3a:	2206      	movs	r2, #6
 8003a3c:	493f      	ldr	r1, [pc, #252]	; (8003b3c <GPS_parse+0x208>)
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f019 f9cf 	bl	801cde2 <strncmp>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d130      	bne.n	8003aac <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <GPS_parse+0x20c>)
 8003a4c:	9303      	str	r3, [sp, #12]
 8003a4e:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <GPS_parse+0x1e8>)
 8003a50:	9302      	str	r3, [sp, #8]
 8003a52:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <GPS_parse+0x1d8>)
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <GPS_parse+0x1dc>)
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <GPS_parse+0x1e0>)
 8003a5c:	4a2e      	ldr	r2, [pc, #184]	; (8003b18 <GPS_parse+0x1e4>)
 8003a5e:	4939      	ldr	r1, [pc, #228]	; (8003b44 <GPS_parse+0x210>)
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f019 f945 	bl	801ccf0 <siscanf>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	dd3e      	ble.n	8003aea <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <GPS_parse+0x1f0>)
 8003a6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a72:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <GPS_parse+0x1f0>)
 8003a74:	7e1b      	ldrb	r3, [r3, #24]
 8003a76:	4618      	mov	r0, r3
 8003a78:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7c:	f000 f876 	bl	8003b6c <GPS_nmea_to_dec>
 8003a80:	eef0 7a40 	vmov.f32	s15, s0
 8003a84:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <GPS_parse+0x1f0>)
 8003a86:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <GPS_parse+0x1f0>)
 8003a8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a90:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <GPS_parse+0x1f0>)
 8003a92:	7e5b      	ldrb	r3, [r3, #25]
 8003a94:	4618      	mov	r0, r3
 8003a96:	eeb0 0a67 	vmov.f32	s0, s15
 8003a9a:	f000 f867 	bl	8003b6c <GPS_nmea_to_dec>
 8003a9e:	eef0 7a40 	vmov.f32	s15, s0
 8003aa2:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <GPS_parse+0x1f0>)
 8003aa4:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e01f      	b.n	8003aec <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8003aac:	2206      	movs	r2, #6
 8003aae:	4926      	ldr	r1, [pc, #152]	; (8003b48 <GPS_parse+0x214>)
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f019 f996 	bl	801cde2 <strncmp>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d116      	bne.n	8003aea <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <GPS_parse+0x218>)
 8003abe:	9305      	str	r3, [sp, #20]
 8003ac0:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <GPS_parse+0x21c>)
 8003ac2:	9304      	str	r3, [sp, #16]
 8003ac4:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <GPS_parse+0x220>)
 8003ac6:	9303      	str	r3, [sp, #12]
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <GPS_parse+0x200>)
 8003aca:	9302      	str	r3, [sp, #8]
 8003acc:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <GPS_parse+0x224>)
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <GPS_parse+0x228>)
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <GPS_parse+0x22c>)
 8003ad6:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <GPS_parse+0x230>)
 8003ad8:	4923      	ldr	r1, [pc, #140]	; (8003b68 <GPS_parse+0x234>)
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f019 f908 	bl	801ccf0 <siscanf>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	dd01      	ble.n	8003aea <GPS_parse+0x1b6>
            return 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <GPS_parse+0x1b8>
    }
    return 0;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	08021544 	.word	0x08021544
 8003af8:	20006e44 	.word	0x20006e44
 8003afc:	20006e40 	.word	0x20006e40
 8003b00:	20006e3c 	.word	0x20006e3c
 8003b04:	20006e38 	.word	0x20006e38
 8003b08:	20006e34 	.word	0x20006e34
 8003b0c:	20006e31 	.word	0x20006e31
 8003b10:	20006e24 	.word	0x20006e24
 8003b14:	20006e30 	.word	0x20006e30
 8003b18:	20006e28 	.word	0x20006e28
 8003b1c:	20006e2c 	.word	0x20006e2c
 8003b20:	0802154c 	.word	0x0802154c
 8003b24:	20006e18 	.word	0x20006e18
 8003b28:	08021574 	.word	0x08021574
 8003b2c:	20006e50 	.word	0x20006e50
 8003b30:	20006e4c 	.word	0x20006e4c
 8003b34:	20006e48 	.word	0x20006e48
 8003b38:	0802157c 	.word	0x0802157c
 8003b3c:	0802159c 	.word	0x0802159c
 8003b40:	20006e54 	.word	0x20006e54
 8003b44:	080215a4 	.word	0x080215a4
 8003b48:	080215c0 	.word	0x080215c0
 8003b4c:	20006e6c 	.word	0x20006e6c
 8003b50:	20006e68 	.word	0x20006e68
 8003b54:	20006e65 	.word	0x20006e65
 8003b58:	20006e64 	.word	0x20006e64
 8003b5c:	20006e60 	.word	0x20006e60
 8003b60:	20006e5c 	.word	0x20006e5c
 8003b64:	20006e58 	.word	0x20006e58
 8003b68:	080215c8 	.word	0x080215c8

08003b6c <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	ed87 0a01 	vstr	s0, [r7, #4]
 8003b76:	4603      	mov	r3, r0
 8003b78:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8003b7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b7e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003c00 <GPS_nmea_to_dec+0x94>
 8003b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b8a:	ee17 3a90 	vmov	r3, s15
 8003b8e:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2264      	movs	r2, #100	; 0x64
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba0:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba8:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003bac:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bb0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003c04 <GPS_nmea_to_dec+0x98>
 8003bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bb8:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bce:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	2b53      	cmp	r3, #83	; 0x53
 8003bd6:	d002      	beq.n	8003bde <GPS_nmea_to_dec+0x72>
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	2b57      	cmp	r3, #87	; 0x57
 8003bdc:	d105      	bne.n	8003bea <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8003bde:	edd7 7a05 	vldr	s15, [r7, #20]
 8003be2:	eef1 7a67 	vneg.f32	s15, s15
 8003be6:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	ee07 3a90 	vmov	s15, r3
}
 8003bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	42c80000 	.word	0x42c80000
 8003c04:	42700000 	.word	0x42700000

08003c08 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <GPS_init+0x30>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8003c18:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <GPS_init+0x34>)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <GPS_init+0x34>)
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	2210      	movs	r2, #16
 8003c28:	4905      	ldr	r1, [pc, #20]	; (8003c40 <GPS_init+0x38>)
 8003c2a:	f00b f994 	bl	800ef56 <HAL_UART_Transmit>
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20005fd4 	.word	0x20005fd4
 8003c3c:	20006ed4 	.word	0x20006ed4
 8003c40:	080215e8 	.word	0x080215e8

08003c44 <__NVIC_SystemReset>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003c48:	f3bf 8f4f 	dsb	sy
}
 8003c4c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <__NVIC_SystemReset+0x24>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003c56:	4904      	ldr	r1, [pc, #16]	; (8003c68 <__NVIC_SystemReset+0x24>)
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <__NVIC_SystemReset+0x28>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c5e:	f3bf 8f4f 	dsb	sy
}
 8003c62:	bf00      	nop
    __NOP();
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <__NVIC_SystemReset+0x20>
 8003c68:	e000ed00 	.word	0xe000ed00
 8003c6c:	05fa0004 	.word	0x05fa0004

08003c70 <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e007      	b.n	8003c8e <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003c7e:	4a10      	ldr	r2, [pc, #64]	; (8003cc0 <MRT_externalFlashSetup+0x50>)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	ddf4      	ble.n	8003c7e <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 8003c94:	f000 fc1a 	bl	80044cc <W25qxx_Init>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f083 0301 	eor.w	r3, r3, #1
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 8003ca4:	f7ff f86c 	bl	8002d80 <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 8003ca8:	f004 fac6 	bl	8008238 <MRT_WUProcedure>
	MRT_getFlags();
 8003cac:	f000 f86c 	bl	8003d88 <MRT_getFlags>
	MRT_resetInfo(uart);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f941 	bl	8003f38 <MRT_resetInfo>
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20006ed8 	.word	0x20006ed8

08003cc4 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 8003cd4:	f000 f804 	bl	8003ce0 <MRT_resetFromStart>
	}

}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f000 fd43 	bl	8004770 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003cea:	2304      	movs	r3, #4
 8003cec:	2200      	movs	r2, #0
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4807      	ldr	r0, [pc, #28]	; (8003d10 <MRT_resetFromStart+0x30>)
 8003cf2:	f000 fe87 	bl	8004a04 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 8003cf6:	2002      	movs	r0, #2
 8003cf8:	f000 fd3a 	bl	8004770 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2102      	movs	r1, #2
 8003d02:	4804      	ldr	r0, [pc, #16]	; (8003d14 <MRT_resetFromStart+0x34>)
 8003d04:	f000 fe7e 	bl	8004a04 <W25qxx_WriteSector>

	//Clear all saved data of ejection stages
	//TODO

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 8003d08:	f002 fe6e 	bl	80069e8 <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 8003d0c:	f7ff ff9a 	bl	8003c44 <__NVIC_SystemReset>
 8003d10:	20006ed8 	.word	0x20006ed8
 8003d14:	200004a8 	.word	0x200004a8

08003d18 <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	e00c      	b.n	8003d3e <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 8003d24:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <MRT_updateExternalFlashBuffers+0x60>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2c:	7819      	ldrb	r1, [r3, #0]
 8003d2e:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <MRT_updateExternalFlashBuffers+0x64>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	460a      	mov	r2, r1
 8003d36:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	ddef      	ble.n	8003d24 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 8003d44:	2300      	movs	r3, #0
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	e00c      	b.n	8003d64 <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 8003d4a:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <MRT_updateExternalFlashBuffers+0x68>)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d52:	7819      	ldrb	r1, [r3, #0]
 8003d54:	4a0b      	ldr	r2, [pc, #44]	; (8003d84 <MRT_updateExternalFlashBuffers+0x6c>)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	4413      	add	r3, r2
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	ddef      	ble.n	8003d4a <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	20000008 	.word	0x20000008
 8003d7c:	20006074 	.word	0x20006074
 8003d80:	20000018 	.word	0x20000018
 8003d84:	200067d8 	.word	0x200067d8

08003d88 <MRT_getFlags>:


void MRT_getFlags(void){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2101      	movs	r1, #1
 8003d92:	4860      	ldr	r0, [pc, #384]	; (8003f14 <MRT_getFlags+0x18c>)
 8003d94:	f000 ff74 	bl	8004c80 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003d98:	2303      	movs	r3, #3
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	485e      	ldr	r0, [pc, #376]	; (8003f18 <MRT_getFlags+0x190>)
 8003da0:	f000 ff6e 	bl	8004c80 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8003da4:	4b5d      	ldr	r3, [pc, #372]	; (8003f1c <MRT_getFlags+0x194>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d10e      	bne.n	8003dca <MRT_getFlags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8003dac:	4b59      	ldr	r3, [pc, #356]	; (8003f14 <MRT_getFlags+0x18c>)
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	3301      	adds	r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	4b57      	ldr	r3, [pc, #348]	; (8003f14 <MRT_getFlags+0x18c>)
 8003db6:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003db8:	2001      	movs	r0, #1
 8003dba:	f000 fcd9 	bl	8004770 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	4853      	ldr	r0, [pc, #332]	; (8003f14 <MRT_getFlags+0x18c>)
 8003dc6:	f000 fe1d 	bl	8004a04 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	MRT_updateExternalFlashBuffers();
 8003dca:	f7ff ffa5 	bl	8003d18 <MRT_updateExternalFlashBuffers>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003dce:	4b54      	ldr	r3, [pc, #336]	; (8003f20 <MRT_getFlags+0x198>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d013      	beq.n	8003dfe <MRT_getFlags+0x76>
 8003dd6:	4b52      	ldr	r3, [pc, #328]	; (8003f20 <MRT_getFlags+0x198>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d00f      	beq.n	8003dfe <MRT_getFlags+0x76>
		reset_flag = 0;
 8003dde:	4b50      	ldr	r3, [pc, #320]	; (8003f20 <MRT_getFlags+0x198>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003de4:	4b4e      	ldr	r3, [pc, #312]	; (8003f20 <MRT_getFlags+0x198>)
 8003de6:	781a      	ldrb	r2, [r3, #0]
 8003de8:	4b4a      	ldr	r3, [pc, #296]	; (8003f14 <MRT_getFlags+0x18c>)
 8003dea:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8003dec:	2001      	movs	r0, #1
 8003dee:	f000 fcbf 	bl	8004770 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003df2:	2304      	movs	r3, #4
 8003df4:	2200      	movs	r2, #0
 8003df6:	2101      	movs	r1, #1
 8003df8:	4846      	ldr	r0, [pc, #280]	; (8003f14 <MRT_getFlags+0x18c>)
 8003dfa:	f000 fe03 	bl	8004a04 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <MRT_getFlags+0x194>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d017      	beq.n	8003e36 <MRT_getFlags+0xae>
 8003e06:	4b45      	ldr	r3, [pc, #276]	; (8003f1c <MRT_getFlags+0x194>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d013      	beq.n	8003e36 <MRT_getFlags+0xae>
 8003e0e:	4b43      	ldr	r3, [pc, #268]	; (8003f1c <MRT_getFlags+0x194>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d00f      	beq.n	8003e36 <MRT_getFlags+0xae>
		wu_flag = 0;
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <MRT_getFlags+0x194>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003e1c:	4b3f      	ldr	r3, [pc, #252]	; (8003f1c <MRT_getFlags+0x194>)
 8003e1e:	781a      	ldrb	r2, [r3, #0]
 8003e20:	4b3c      	ldr	r3, [pc, #240]	; (8003f14 <MRT_getFlags+0x18c>)
 8003e22:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003e24:	2001      	movs	r0, #1
 8003e26:	f000 fca3 	bl	8004770 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4838      	ldr	r0, [pc, #224]	; (8003f14 <MRT_getFlags+0x18c>)
 8003e32:	f000 fde7 	bl	8004a04 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003e36:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <MRT_getFlags+0x19c>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d013      	beq.n	8003e66 <MRT_getFlags+0xde>
 8003e3e:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <MRT_getFlags+0x19c>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d00f      	beq.n	8003e66 <MRT_getFlags+0xde>
		iwdg_flag = 0;
 8003e46:	4b37      	ldr	r3, [pc, #220]	; (8003f24 <MRT_getFlags+0x19c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003e4c:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <MRT_getFlags+0x19c>)
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <MRT_getFlags+0x18c>)
 8003e52:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003e54:	2001      	movs	r0, #1
 8003e56:	f000 fc8b 	bl	8004770 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003e5a:	2304      	movs	r3, #4
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2101      	movs	r1, #1
 8003e60:	482c      	ldr	r0, [pc, #176]	; (8003f14 <MRT_getFlags+0x18c>)
 8003e62:	f000 fdcf 	bl	8004a04 <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 8003e66:	4b30      	ldr	r3, [pc, #192]	; (8003f28 <MRT_getFlags+0x1a0>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d013      	beq.n	8003e96 <MRT_getFlags+0x10e>
 8003e6e:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <MRT_getFlags+0x1a0>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d00f      	beq.n	8003e96 <MRT_getFlags+0x10e>
		apogee_flag = 0;
 8003e76:	4b2c      	ldr	r3, [pc, #176]	; (8003f28 <MRT_getFlags+0x1a0>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8003e7c:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <MRT_getFlags+0x1a0>)
 8003e7e:	781a      	ldrb	r2, [r3, #0]
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <MRT_getFlags+0x18c>)
 8003e82:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 8003e84:	2001      	movs	r0, #1
 8003e86:	f000 fc73 	bl	8004770 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4820      	ldr	r0, [pc, #128]	; (8003f14 <MRT_getFlags+0x18c>)
 8003e92:	f000 fdb7 	bl	8004a04 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003e96:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <MRT_getFlags+0x1a4>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b17      	cmp	r3, #23
 8003e9c:	d90f      	bls.n	8003ebe <MRT_getFlags+0x136>
		prev_hours = 0;
 8003e9e:	4b23      	ldr	r3, [pc, #140]	; (8003f2c <MRT_getFlags+0x1a4>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003ea4:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <MRT_getFlags+0x1a4>)
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <MRT_getFlags+0x190>)
 8003eaa:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8003eac:	2002      	movs	r0, #2
 8003eae:	f000 fc5f 	bl	8004770 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	4817      	ldr	r0, [pc, #92]	; (8003f18 <MRT_getFlags+0x190>)
 8003eba:	f000 fda3 	bl	8004a04 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <MRT_getFlags+0x1a8>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b3b      	cmp	r3, #59	; 0x3b
 8003ec4:	d90f      	bls.n	8003ee6 <MRT_getFlags+0x15e>
		prev_min = 0;
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <MRT_getFlags+0x1a8>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <MRT_getFlags+0x1a8>)
 8003ece:	781a      	ldrb	r2, [r3, #0]
 8003ed0:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <MRT_getFlags+0x190>)
 8003ed2:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	f000 fc4b 	bl	8004770 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003eda:	2303      	movs	r3, #3
 8003edc:	2200      	movs	r2, #0
 8003ede:	2102      	movs	r1, #2
 8003ee0:	480d      	ldr	r0, [pc, #52]	; (8003f18 <MRT_getFlags+0x190>)
 8003ee2:	f000 fd8f 	bl	8004a04 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <MRT_getFlags+0x1ac>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b3b      	cmp	r3, #59	; 0x3b
 8003eec:	d90f      	bls.n	8003f0e <MRT_getFlags+0x186>
		prev_sec = 0;
 8003eee:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <MRT_getFlags+0x1ac>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <MRT_getFlags+0x1ac>)
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <MRT_getFlags+0x190>)
 8003efa:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8003efc:	2002      	movs	r0, #2
 8003efe:	f000 fc37 	bl	8004770 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003f02:	2303      	movs	r3, #3
 8003f04:	2200      	movs	r2, #0
 8003f06:	2102      	movs	r1, #2
 8003f08:	4803      	ldr	r0, [pc, #12]	; (8003f18 <MRT_getFlags+0x190>)
 8003f0a:	f000 fd7b 	bl	8004a04 <W25qxx_WriteSector>
	}
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20006074 	.word	0x20006074
 8003f18:	200067d8 	.word	0x200067d8
 8003f1c:	20000719 	.word	0x20000719
 8003f20:	200004a2 	.word	0x200004a2
 8003f24:	200004a3 	.word	0x200004a3
 8003f28:	200004a4 	.word	0x200004a4
 8003f2c:	200004a5 	.word	0x200004a5
 8003f30:	200004a6 	.word	0x200004a6
 8003f34:	200004a7 	.word	0x200004a7

08003f38 <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3a:	b0a7      	sub	sp, #156	; 0x9c
 8003f3c:	af04      	add	r7, sp, #16
 8003f3e:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8003f40:	4b60      	ldr	r3, [pc, #384]	; (80040c4 <MRT_resetInfo+0x18c>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	461d      	mov	r5, r3
 8003f46:	4b60      	ldr	r3, [pc, #384]	; (80040c8 <MRT_resetInfo+0x190>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	461e      	mov	r6, r3
 8003f4c:	4b5f      	ldr	r3, [pc, #380]	; (80040cc <MRT_resetInfo+0x194>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b5f      	ldr	r3, [pc, #380]	; (80040d0 <MRT_resetInfo+0x198>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	4619      	mov	r1, r3
 8003f58:	4b5e      	ldr	r3, [pc, #376]	; (80040d4 <MRT_resetInfo+0x19c>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	461c      	mov	r4, r3
 8003f5e:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <MRT_resetInfo+0x1a0>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	f107 0020 	add.w	r0, r7, #32
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	9402      	str	r4, [sp, #8]
 8003f6a:	9101      	str	r1, [sp, #4]
 8003f6c:	9200      	str	r2, [sp, #0]
 8003f6e:	4633      	mov	r3, r6
 8003f70:	462a      	mov	r2, r5
 8003f72:	495a      	ldr	r1, [pc, #360]	; (80040dc <MRT_resetInfo+0x1a4>)
 8003f74:	f018 fe9c 	bl	801ccb0 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003f78:	f107 0320 	add.w	r3, r7, #32
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc f941 	bl	8000204 <strlen>
 8003f82:	4603      	mov	r3, r0
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	f107 0120 	add.w	r1, r7, #32
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f00a ffe1 	bl	800ef56 <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003f94:	4b4d      	ldr	r3, [pc, #308]	; (80040cc <MRT_resetInfo+0x194>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d11e      	bne.n	8003fda <MRT_resetInfo+0xa2>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	2213      	movs	r2, #19
 8003fa2:	494f      	ldr	r1, [pc, #316]	; (80040e0 <MRT_resetInfo+0x1a8>)
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f00a ffd6 	bl	800ef56 <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003faa:	4b48      	ldr	r3, [pc, #288]	; (80040cc <MRT_resetInfo+0x194>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003fb0:	4b46      	ldr	r3, [pc, #280]	; (80040cc <MRT_resetInfo+0x194>)
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <MRT_resetInfo+0x1ac>)
 8003fb6:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003fb8:	2001      	movs	r0, #1
 8003fba:	f000 fbd9 	bl	8004770 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4847      	ldr	r0, [pc, #284]	; (80040e4 <MRT_resetInfo+0x1ac>)
 8003fc6:	f000 fd1d 	bl	8004a04 <W25qxx_WriteSector>

		  HAL_Delay(1000);
 8003fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fce:	f004 fdeb 	bl	8008ba8 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8003fd2:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8003fd6:	f004 f9ed 	bl	80083b4 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8003fda:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <MRT_resetInfo+0x190>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d03a      	beq.n	8004058 <MRT_resetInfo+0x120>
		  char buf[20];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8003fe2:	4b39      	ldr	r3, [pc, #228]	; (80040c8 <MRT_resetInfo+0x190>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f107 030c 	add.w	r3, r7, #12
 8003fec:	493e      	ldr	r1, [pc, #248]	; (80040e8 <MRT_resetInfo+0x1b0>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f018 fe5e 	bl	801ccb0 <siprintf>
		  HAL_UART_Transmit(uart, buf, strlen(buf), HAL_MAX_DELAY);
 8003ff4:	f107 030c 	add.w	r3, r7, #12
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc f903 	bl	8000204 <strlen>
 8003ffe:	4603      	mov	r3, r0
 8004000:	b29a      	uxth	r2, r3
 8004002:	f107 010c 	add.w	r1, r7, #12
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f00a ffa3 	bl	800ef56 <HAL_UART_Transmit>

		  HAL_UART_Transmit(uart, "Resetting RTC time\r\n", 20, HAL_MAX_DELAY);
 8004010:	f04f 33ff 	mov.w	r3, #4294967295
 8004014:	2214      	movs	r2, #20
 8004016:	4935      	ldr	r1, [pc, #212]	; (80040ec <MRT_resetInfo+0x1b4>)
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f00a ff9c 	bl	800ef56 <HAL_UART_Transmit>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 800401e:	2002      	movs	r0, #2
 8004020:	f000 fba6 	bl	8004770 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8004024:	2303      	movs	r3, #3
 8004026:	2200      	movs	r2, #0
 8004028:	2102      	movs	r1, #2
 800402a:	4831      	ldr	r0, [pc, #196]	; (80040f0 <MRT_resetInfo+0x1b8>)
 800402c:	f000 fcea 	bl	8004a04 <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004036:	e00b      	b.n	8004050 <MRT_resetInfo+0x118>
			  *flash_time[i] = 0x0;
 8004038:	4a2e      	ldr	r2, [pc, #184]	; (80040f4 <MRT_resetInfo+0x1bc>)
 800403a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8004046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800404a:	3301      	adds	r3, #1
 800404c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004054:	2b02      	cmp	r3, #2
 8004056:	ddef      	ble.n	8004038 <MRT_resetInfo+0x100>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <MRT_resetInfo+0x18c>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d116      	bne.n	800408e <MRT_resetInfo+0x156>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8004060:	f04f 33ff 	mov.w	r3, #4294967295
 8004064:	220e      	movs	r2, #14
 8004066:	4924      	ldr	r1, [pc, #144]	; (80040f8 <MRT_resetInfo+0x1c0>)
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f00a ff74 	bl	800ef56 <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <MRT_resetInfo+0x18c>)
 8004070:	2201      	movs	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <MRT_resetInfo+0x18c>)
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <MRT_resetInfo+0x1ac>)
 800407a:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 800407c:	2001      	movs	r0, #1
 800407e:	f000 fb77 	bl	8004770 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8004082:	2304      	movs	r3, #4
 8004084:	2200      	movs	r2, #0
 8004086:	2101      	movs	r1, #1
 8004088:	4816      	ldr	r0, [pc, #88]	; (80040e4 <MRT_resetInfo+0x1ac>)
 800408a:	f000 fcbb 	bl	8004a04 <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag==0){
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <MRT_resetInfo+0x1c4>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d107      	bne.n	80040a6 <MRT_resetInfo+0x16e>
		  HAL_UART_Transmit(uart, "Pre-apogee\r\n", 12, HAL_MAX_DELAY);
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	220c      	movs	r2, #12
 800409c:	4918      	ldr	r1, [pc, #96]	; (8004100 <MRT_resetInfo+0x1c8>)
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f00a ff59 	bl	800ef56 <HAL_UART_Transmit>
	  }
	  else if(apogee_flag==1){
		  HAL_UART_Transmit(uart, "Post-apogee\r\n", 13, HAL_MAX_DELAY);
	  }
}
 80040a4:	e00a      	b.n	80040bc <MRT_resetInfo+0x184>
	  else if(apogee_flag==1){
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <MRT_resetInfo+0x1c4>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d106      	bne.n	80040bc <MRT_resetInfo+0x184>
		  HAL_UART_Transmit(uart, "Post-apogee\r\n", 13, HAL_MAX_DELAY);
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	220d      	movs	r2, #13
 80040b4:	4913      	ldr	r1, [pc, #76]	; (8004104 <MRT_resetInfo+0x1cc>)
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f00a ff4d 	bl	800ef56 <HAL_UART_Transmit>
}
 80040bc:	bf00      	nop
 80040be:	378c      	adds	r7, #140	; 0x8c
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c4:	200004a2 	.word	0x200004a2
 80040c8:	20000719 	.word	0x20000719
 80040cc:	200004a3 	.word	0x200004a3
 80040d0:	200004a5 	.word	0x200004a5
 80040d4:	200004a6 	.word	0x200004a6
 80040d8:	200004a7 	.word	0x200004a7
 80040dc:	0802162c 	.word	0x0802162c
 80040e0:	0802166c 	.word	0x0802166c
 80040e4:	20006074 	.word	0x20006074
 80040e8:	08021680 	.word	0x08021680
 80040ec:	08021690 	.word	0x08021690
 80040f0:	200004a8 	.word	0x200004a8
 80040f4:	20000018 	.word	0x20000018
 80040f8:	080216a8 	.word	0x080216a8
 80040fc:	200004a4 	.word	0x200004a4
 8004100:	080216b8 	.word	0x080216b8
 8004104:	080216c8 	.word	0x080216c8

08004108 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 800410c:	f7ff fe04 	bl	8003d18 <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8004110:	2002      	movs	r0, #2
 8004112:	f000 fb2d 	bl	8004770 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8004116:	2303      	movs	r3, #3
 8004118:	2200      	movs	r2, #0
 800411a:	2102      	movs	r1, #2
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <MRT_saveRTCTime+0x20>)
 800411e:	f000 fc71 	bl	8004a04 <W25qxx_WriteSector>
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200067d8 	.word	0x200067d8

0800412c <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8004132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004136:	4815      	ldr	r0, [pc, #84]	; (800418c <MRT_getContinuity+0x60>)
 8004138:	f005 fc2a 	bl	8009990 <HAL_GPIO_ReadPin>
 800413c:	4603      	mov	r3, r0
 800413e:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8004140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004144:	4811      	ldr	r0, [pc, #68]	; (800418c <MRT_getContinuity+0x60>)
 8004146:	f005 fc23 	bl	8009990 <HAL_GPIO_ReadPin>
 800414a:	4603      	mov	r3, r0
 800414c:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 800414e:	2101      	movs	r1, #1
 8004150:	480e      	ldr	r0, [pc, #56]	; (800418c <MRT_getContinuity+0x60>)
 8004152:	f005 fc1d 	bl	8009990 <HAL_GPIO_ReadPin>
 8004156:	4603      	mov	r3, r0
 8004158:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 800415a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800415e:	480c      	ldr	r0, [pc, #48]	; (8004190 <MRT_getContinuity+0x64>)
 8004160:	f005 fc16 	bl	8009990 <HAL_GPIO_ReadPin>
 8004164:	4603      	mov	r3, r0
 8004166:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	005a      	lsls	r2, r3, #1
 800416c:	79bb      	ldrb	r3, [r7, #6]
 800416e:	4413      	add	r3, r2
 8004170:	005a      	lsls	r2, r3, #1
 8004172:	797b      	ldrb	r3, [r7, #5]
 8004174:	4413      	add	r3, r2
 8004176:	b2db      	uxtb	r3, r3
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	793b      	ldrb	r3, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8004182:	78fb      	ldrb	r3, [r7, #3]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021800 	.word	0x40021800
 8004190:	40021400 	.word	0x40021400
 8004194:	00000000 	.word	0x00000000

08004198 <MRT_prop_poll_pressure_transducer>:


/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f004 fd69 	bl	8008c78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 80041a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f004 fe69 	bl	8008e82 <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f004 fef1 	bl	8008f98 <HAL_ADC_GetValue>
 80041b6:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f004 fe2f 	bl	8008e1c <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7fc f9c0 	bl	8000544 <__aeabi_ui2d>
 80041c4:	a312      	add	r3, pc, #72	; (adr r3, 8004210 <MRT_prop_poll_pressure_transducer+0x78>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f7fc fb5f 	bl	800088c <__aeabi_ddiv>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	f7fc fd27 	bl	8000c28 <__aeabi_d2f>
 80041da:	4603      	mov	r3, r0
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc f9d3 	bl	8000588 <__aeabi_f2d>
 80041e2:	a30d      	add	r3, pc, #52	; (adr r3, 8004218 <MRT_prop_poll_pressure_transducer+0x80>)
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f7fc fa26 	bl	8000638 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	f7fc fd18 	bl	8000c28 <__aeabi_d2f>
 80041f8:	4603      	mov	r3, r0
 80041fa:	60bb      	str	r3, [r7, #8]

	// convert using transfer function
	// TODO

	return voltage;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	ee07 3a90 	vmov	s15, r3
}
 8004202:	eeb0 0a67 	vmov.f32	s0, s15
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	f3af 8000 	nop.w
 8004210:	00000000 	.word	0x00000000
 8004214:	40affe00 	.word	0x40affe00
 8004218:	66666666 	.word	0x66666666
 800421c:	400a6666 	.word	0x400a6666

08004220 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,(-R*-0.0065/(go*M)))-1);
 800422a:	edd7 7a01 	vldr	s15, [r7, #4]
 800422e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80042b0 <MRT_getAltitude+0x90>
 8004232:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004236:	ee16 0a90 	vmov	r0, s13
 800423a:	f7fc f9a5 	bl	8000588 <__aeabi_f2d>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	ed9f 1b17 	vldr	d1, [pc, #92]	; 80042a0 <MRT_getAltitude+0x80>
 8004246:	ec43 2b10 	vmov	d0, r2, r3
 800424a:	f015 ffff 	bl	801a24c <pow>
 800424e:	ec51 0b10 	vmov	r0, r1, d0
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <MRT_getAltitude+0x94>)
 8004258:	f7fc f836 	bl	80002c8 <__aeabi_dsub>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	a310      	add	r3, pc, #64	; (adr r3, 80042a8 <MRT_getAltitude+0x88>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f7fc f9e5 	bl	8000638 <__aeabi_dmul>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <MRT_getAltitude+0x98>)
 800427c:	f7fc f826 	bl	80002cc <__adddf3>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4610      	mov	r0, r2
 8004286:	4619      	mov	r1, r3
 8004288:	f7fc fcce 	bl	8000c28 <__aeabi_d2f>
 800428c:	4603      	mov	r3, r0
 800428e:	ee07 3a90 	vmov	s15, r3
}
 8004292:	eeb0 0a67 	vmov.f32	s0, s15
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	f3af 8000 	nop.w
 80042a0:	b537afba 	.word	0xb537afba
 80042a4:	3fc85a8b 	.word	0x3fc85a8b
 80042a8:	76276276 	.word	0x76276276
 80042ac:	c0e481c2 	.word	0xc0e481c2
 80042b0:	447d8000 	.word	0x447d8000
 80042b4:	3ff00000 	.word	0x3ff00000
 80042b8:	40590000 	.word	0x40590000

080042bc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80042c6:	f107 020f 	add.w	r2, r7, #15
 80042ca:	1df9      	adds	r1, r7, #7
 80042cc:	2364      	movs	r3, #100	; 0x64
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	2301      	movs	r3, #1
 80042d2:	4804      	ldr	r0, [pc, #16]	; (80042e4 <W25qxx_Spi+0x28>)
 80042d4:	f009 fd34 	bl	800dd40 <HAL_SPI_TransmitReceive>
	return ret;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20005fd8 	.word	0x20005fd8

080042e8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]
 80042fa:	2300      	movs	r3, #0
 80042fc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80042fe:	2200      	movs	r2, #0
 8004300:	2140      	movs	r1, #64	; 0x40
 8004302:	4813      	ldr	r0, [pc, #76]	; (8004350 <W25qxx_ReadID+0x68>)
 8004304:	f005 fb5c 	bl	80099c0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004308:	209f      	movs	r0, #159	; 0x9f
 800430a:	f7ff ffd7 	bl	80042bc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800430e:	20a5      	movs	r0, #165	; 0xa5
 8004310:	f7ff ffd4 	bl	80042bc <W25qxx_Spi>
 8004314:	4603      	mov	r3, r0
 8004316:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004318:	20a5      	movs	r0, #165	; 0xa5
 800431a:	f7ff ffcf 	bl	80042bc <W25qxx_Spi>
 800431e:	4603      	mov	r3, r0
 8004320:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004322:	20a5      	movs	r0, #165	; 0xa5
 8004324:	f7ff ffca 	bl	80042bc <W25qxx_Spi>
 8004328:	4603      	mov	r3, r0
 800432a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800432c:	2201      	movs	r2, #1
 800432e:	2140      	movs	r1, #64	; 0x40
 8004330:	4807      	ldr	r0, [pc, #28]	; (8004350 <W25qxx_ReadID+0x68>)
 8004332:	f005 fb45 	bl	80099c0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	041a      	lsls	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	4313      	orrs	r3, r2
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40020c00 	.word	0x40020c00

08004354 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004354:	b590      	push	{r4, r7, lr}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800435a:	2200      	movs	r2, #0
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	4816      	ldr	r0, [pc, #88]	; (80043b8 <W25qxx_ReadUniqID+0x64>)
 8004360:	f005 fb2e 	bl	80099c0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004364:	204b      	movs	r0, #75	; 0x4b
 8004366:	f7ff ffa9 	bl	80042bc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	71fb      	strb	r3, [r7, #7]
 800436e:	e005      	b.n	800437c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004370:	20a5      	movs	r0, #165	; 0xa5
 8004372:	f7ff ffa3 	bl	80042bc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	3301      	adds	r3, #1
 800437a:	71fb      	strb	r3, [r7, #7]
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d9f6      	bls.n	8004370 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004382:	2300      	movs	r3, #0
 8004384:	71bb      	strb	r3, [r7, #6]
 8004386:	e00b      	b.n	80043a0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004388:	79bc      	ldrb	r4, [r7, #6]
 800438a:	20a5      	movs	r0, #165	; 0xa5
 800438c:	f7ff ff96 	bl	80042bc <W25qxx_Spi>
 8004390:	4603      	mov	r3, r0
 8004392:	461a      	mov	r2, r3
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <W25qxx_ReadUniqID+0x68>)
 8004396:	4423      	add	r3, r4
 8004398:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800439a:	79bb      	ldrb	r3, [r7, #6]
 800439c:	3301      	adds	r3, #1
 800439e:	71bb      	strb	r3, [r7, #6]
 80043a0:	79bb      	ldrb	r3, [r7, #6]
 80043a2:	2b07      	cmp	r3, #7
 80043a4:	d9f0      	bls.n	8004388 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80043a6:	2201      	movs	r2, #1
 80043a8:	2140      	movs	r1, #64	; 0x40
 80043aa:	4803      	ldr	r0, [pc, #12]	; (80043b8 <W25qxx_ReadUniqID+0x64>)
 80043ac:	f005 fb08 	bl	80099c0 <HAL_GPIO_WritePin>
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd90      	pop	{r4, r7, pc}
 80043b8:	40020c00 	.word	0x40020c00
 80043bc:	20006edc 	.word	0x20006edc

080043c0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	4807      	ldr	r0, [pc, #28]	; (80043e8 <W25qxx_WriteEnable+0x28>)
 80043ca:	f005 faf9 	bl	80099c0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80043ce:	2006      	movs	r0, #6
 80043d0:	f7ff ff74 	bl	80042bc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80043d4:	2201      	movs	r2, #1
 80043d6:	2140      	movs	r1, #64	; 0x40
 80043d8:	4803      	ldr	r0, [pc, #12]	; (80043e8 <W25qxx_WriteEnable+0x28>)
 80043da:	f005 faf1 	bl	80099c0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80043de:	2001      	movs	r0, #1
 80043e0:	f011 fe87 	bl	80160f2 <osDelay>
}
 80043e4:	bf00      	nop
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40020c00 	.word	0x40020c00

080043ec <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2140      	movs	r1, #64	; 0x40
 80043fe:	481c      	ldr	r0, [pc, #112]	; (8004470 <W25qxx_ReadStatusRegister+0x84>)
 8004400:	f005 fade 	bl	80099c0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d10c      	bne.n	8004424 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800440a:	2005      	movs	r0, #5
 800440c:	f7ff ff56 	bl	80042bc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004410:	20a5      	movs	r0, #165	; 0xa5
 8004412:	f7ff ff53 	bl	80042bc <W25qxx_Spi>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800441a:	4a16      	ldr	r2, [pc, #88]	; (8004474 <W25qxx_ReadStatusRegister+0x88>)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004422:	e01b      	b.n	800445c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d10c      	bne.n	8004444 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800442a:	2035      	movs	r0, #53	; 0x35
 800442c:	f7ff ff46 	bl	80042bc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004430:	20a5      	movs	r0, #165	; 0xa5
 8004432:	f7ff ff43 	bl	80042bc <W25qxx_Spi>
 8004436:	4603      	mov	r3, r0
 8004438:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800443a:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <W25qxx_ReadStatusRegister+0x88>)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004442:	e00b      	b.n	800445c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004444:	2015      	movs	r0, #21
 8004446:	f7ff ff39 	bl	80042bc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800444a:	20a5      	movs	r0, #165	; 0xa5
 800444c:	f7ff ff36 	bl	80042bc <W25qxx_Spi>
 8004450:	4603      	mov	r3, r0
 8004452:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004454:	4a07      	ldr	r2, [pc, #28]	; (8004474 <W25qxx_ReadStatusRegister+0x88>)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800445c:	2201      	movs	r2, #1
 800445e:	2140      	movs	r1, #64	; 0x40
 8004460:	4803      	ldr	r0, [pc, #12]	; (8004470 <W25qxx_ReadStatusRegister+0x84>)
 8004462:	f005 faad 	bl	80099c0 <HAL_GPIO_WritePin>
	return status;
 8004466:	7bfb      	ldrb	r3, [r7, #15]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40020c00 	.word	0x40020c00
 8004474:	20006edc 	.word	0x20006edc

08004478 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800447c:	2001      	movs	r0, #1
 800447e:	f011 fe38 	bl	80160f2 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004482:	2200      	movs	r2, #0
 8004484:	2140      	movs	r1, #64	; 0x40
 8004486:	480f      	ldr	r0, [pc, #60]	; (80044c4 <W25qxx_WaitForWriteEnd+0x4c>)
 8004488:	f005 fa9a 	bl	80099c0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800448c:	2005      	movs	r0, #5
 800448e:	f7ff ff15 	bl	80042bc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004492:	20a5      	movs	r0, #165	; 0xa5
 8004494:	f7ff ff12 	bl	80042bc <W25qxx_Spi>
 8004498:	4603      	mov	r3, r0
 800449a:	461a      	mov	r2, r3
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <W25qxx_WaitForWriteEnd+0x50>)
 800449e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80044a2:	2001      	movs	r0, #1
 80044a4:	f011 fe25 	bl	80160f2 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <W25qxx_WaitForWriteEnd+0x50>)
 80044aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ed      	bne.n	8004492 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80044b6:	2201      	movs	r2, #1
 80044b8:	2140      	movs	r1, #64	; 0x40
 80044ba:	4802      	ldr	r0, [pc, #8]	; (80044c4 <W25qxx_WaitForWriteEnd+0x4c>)
 80044bc:	f005 fa80 	bl	80099c0 <HAL_GPIO_WritePin>
}
 80044c0:	bf00      	nop
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	20006edc 	.word	0x20006edc

080044cc <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80044d2:	4b90      	ldr	r3, [pc, #576]	; (8004714 <W25qxx_Init+0x248>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80044da:	e002      	b.n	80044e2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80044dc:	2001      	movs	r0, #1
 80044de:	f011 fe08 	bl	80160f2 <osDelay>
	while (HAL_GetTick() < 100)
 80044e2:	f004 fb55 	bl	8008b90 <HAL_GetTick>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b63      	cmp	r3, #99	; 0x63
 80044ea:	d9f7      	bls.n	80044dc <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80044ec:	2201      	movs	r2, #1
 80044ee:	2140      	movs	r1, #64	; 0x40
 80044f0:	4889      	ldr	r0, [pc, #548]	; (8004718 <W25qxx_Init+0x24c>)
 80044f2:	f005 fa65 	bl	80099c0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80044f6:	2064      	movs	r0, #100	; 0x64
 80044f8:	f011 fdfb 	bl	80160f2 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 80044fc:	4887      	ldr	r0, [pc, #540]	; (800471c <W25qxx_Init+0x250>)
 80044fe:	f018 fb0b 	bl	801cb18 <puts>
#endif
	id = W25qxx_ReadID();
 8004502:	f7ff fef1 	bl	80042e8 <W25qxx_ReadID>
 8004506:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4885      	ldr	r0, [pc, #532]	; (8004720 <W25qxx_Init+0x254>)
 800450c:	f018 fa7e 	bl	801ca0c <iprintf>
#endif
	switch (id & 0x000000FF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	3b11      	subs	r3, #17
 8004516:	2b0f      	cmp	r3, #15
 8004518:	f200 808b 	bhi.w	8004632 <W25qxx_Init+0x166>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <W25qxx_Init+0x58>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	0800461f 	.word	0x0800461f
 8004528:	0800460b 	.word	0x0800460b
 800452c:	080045f7 	.word	0x080045f7
 8004530:	080045e3 	.word	0x080045e3
 8004534:	080045cf 	.word	0x080045cf
 8004538:	080045bb 	.word	0x080045bb
 800453c:	080045a7 	.word	0x080045a7
 8004540:	08004591 	.word	0x08004591
 8004544:	0800457b 	.word	0x0800457b
 8004548:	08004633 	.word	0x08004633
 800454c:	08004633 	.word	0x08004633
 8004550:	08004633 	.word	0x08004633
 8004554:	08004633 	.word	0x08004633
 8004558:	08004633 	.word	0x08004633
 800455c:	08004633 	.word	0x08004633
 8004560:	08004565 	.word	0x08004565
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004564:	4b6b      	ldr	r3, [pc, #428]	; (8004714 <W25qxx_Init+0x248>)
 8004566:	220a      	movs	r2, #10
 8004568:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800456a:	4b6a      	ldr	r3, [pc, #424]	; (8004714 <W25qxx_Init+0x248>)
 800456c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004570:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8004572:	486c      	ldr	r0, [pc, #432]	; (8004724 <W25qxx_Init+0x258>)
 8004574:	f018 fad0 	bl	801cb18 <puts>
#endif
		break;
 8004578:	e064      	b.n	8004644 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800457a:	4b66      	ldr	r3, [pc, #408]	; (8004714 <W25qxx_Init+0x248>)
 800457c:	2209      	movs	r2, #9
 800457e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004580:	4b64      	ldr	r3, [pc, #400]	; (8004714 <W25qxx_Init+0x248>)
 8004582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004586:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004588:	4867      	ldr	r0, [pc, #412]	; (8004728 <W25qxx_Init+0x25c>)
 800458a:	f018 fac5 	bl	801cb18 <puts>
#endif
		break;
 800458e:	e059      	b.n	8004644 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004590:	4b60      	ldr	r3, [pc, #384]	; (8004714 <W25qxx_Init+0x248>)
 8004592:	2208      	movs	r2, #8
 8004594:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004596:	4b5f      	ldr	r3, [pc, #380]	; (8004714 <W25qxx_Init+0x248>)
 8004598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800459c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 800459e:	4863      	ldr	r0, [pc, #396]	; (800472c <W25qxx_Init+0x260>)
 80045a0:	f018 faba 	bl	801cb18 <puts>
#endif
		break;
 80045a4:	e04e      	b.n	8004644 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80045a6:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <W25qxx_Init+0x248>)
 80045a8:	2207      	movs	r2, #7
 80045aa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80045ac:	4b59      	ldr	r3, [pc, #356]	; (8004714 <W25qxx_Init+0x248>)
 80045ae:	2280      	movs	r2, #128	; 0x80
 80045b0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80045b2:	485f      	ldr	r0, [pc, #380]	; (8004730 <W25qxx_Init+0x264>)
 80045b4:	f018 fab0 	bl	801cb18 <puts>
#endif
		break;
 80045b8:	e044      	b.n	8004644 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80045ba:	4b56      	ldr	r3, [pc, #344]	; (8004714 <W25qxx_Init+0x248>)
 80045bc:	2206      	movs	r2, #6
 80045be:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80045c0:	4b54      	ldr	r3, [pc, #336]	; (8004714 <W25qxx_Init+0x248>)
 80045c2:	2240      	movs	r2, #64	; 0x40
 80045c4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80045c6:	485b      	ldr	r0, [pc, #364]	; (8004734 <W25qxx_Init+0x268>)
 80045c8:	f018 faa6 	bl	801cb18 <puts>
#endif
		break;
 80045cc:	e03a      	b.n	8004644 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <W25qxx_Init+0x248>)
 80045d0:	2205      	movs	r2, #5
 80045d2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80045d4:	4b4f      	ldr	r3, [pc, #316]	; (8004714 <W25qxx_Init+0x248>)
 80045d6:	2220      	movs	r2, #32
 80045d8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 80045da:	4857      	ldr	r0, [pc, #348]	; (8004738 <W25qxx_Init+0x26c>)
 80045dc:	f018 fa9c 	bl	801cb18 <puts>
#endif
		break;
 80045e0:	e030      	b.n	8004644 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80045e2:	4b4c      	ldr	r3, [pc, #304]	; (8004714 <W25qxx_Init+0x248>)
 80045e4:	2204      	movs	r2, #4
 80045e6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80045e8:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <W25qxx_Init+0x248>)
 80045ea:	2210      	movs	r2, #16
 80045ec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 80045ee:	4853      	ldr	r0, [pc, #332]	; (800473c <W25qxx_Init+0x270>)
 80045f0:	f018 fa92 	bl	801cb18 <puts>
#endif
		break;
 80045f4:	e026      	b.n	8004644 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <W25qxx_Init+0x248>)
 80045f8:	2203      	movs	r2, #3
 80045fa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80045fc:	4b45      	ldr	r3, [pc, #276]	; (8004714 <W25qxx_Init+0x248>)
 80045fe:	2208      	movs	r2, #8
 8004600:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8004602:	484f      	ldr	r0, [pc, #316]	; (8004740 <W25qxx_Init+0x274>)
 8004604:	f018 fa88 	bl	801cb18 <puts>
#endif
		break;
 8004608:	e01c      	b.n	8004644 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800460a:	4b42      	ldr	r3, [pc, #264]	; (8004714 <W25qxx_Init+0x248>)
 800460c:	2202      	movs	r2, #2
 800460e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004610:	4b40      	ldr	r3, [pc, #256]	; (8004714 <W25qxx_Init+0x248>)
 8004612:	2204      	movs	r2, #4
 8004614:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8004616:	484b      	ldr	r0, [pc, #300]	; (8004744 <W25qxx_Init+0x278>)
 8004618:	f018 fa7e 	bl	801cb18 <puts>
#endif
		break;
 800461c:	e012      	b.n	8004644 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800461e:	4b3d      	ldr	r3, [pc, #244]	; (8004714 <W25qxx_Init+0x248>)
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004624:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <W25qxx_Init+0x248>)
 8004626:	2202      	movs	r2, #2
 8004628:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800462a:	4847      	ldr	r0, [pc, #284]	; (8004748 <W25qxx_Init+0x27c>)
 800462c:	f018 fa74 	bl	801cb18 <puts>
#endif
		break;
 8004630:	e008      	b.n	8004644 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004632:	4846      	ldr	r0, [pc, #280]	; (800474c <W25qxx_Init+0x280>)
 8004634:	f018 fa70 	bl	801cb18 <puts>
#endif
		w25qxx.Lock = 0;
 8004638:	4b36      	ldr	r3, [pc, #216]	; (8004714 <W25qxx_Init+0x248>)
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004640:	2300      	movs	r3, #0
 8004642:	e063      	b.n	800470c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004644:	4b33      	ldr	r3, [pc, #204]	; (8004714 <W25qxx_Init+0x248>)
 8004646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800464a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800464c:	4b31      	ldr	r3, [pc, #196]	; (8004714 <W25qxx_Init+0x248>)
 800464e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004652:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004654:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <W25qxx_Init+0x248>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	4a2e      	ldr	r2, [pc, #184]	; (8004714 <W25qxx_Init+0x248>)
 800465c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800465e:	4b2d      	ldr	r3, [pc, #180]	; (8004714 <W25qxx_Init+0x248>)
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	4a2c      	ldr	r2, [pc, #176]	; (8004714 <W25qxx_Init+0x248>)
 8004664:	6912      	ldr	r2, [r2, #16]
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	4a2a      	ldr	r2, [pc, #168]	; (8004714 <W25qxx_Init+0x248>)
 800466c:	8952      	ldrh	r2, [r2, #10]
 800466e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004672:	4a28      	ldr	r2, [pc, #160]	; (8004714 <W25qxx_Init+0x248>)
 8004674:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004676:	4b27      	ldr	r3, [pc, #156]	; (8004714 <W25qxx_Init+0x248>)
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	4a25      	ldr	r2, [pc, #148]	; (8004714 <W25qxx_Init+0x248>)
 800467e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004680:	4b24      	ldr	r3, [pc, #144]	; (8004714 <W25qxx_Init+0x248>)
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	4a23      	ldr	r2, [pc, #140]	; (8004714 <W25qxx_Init+0x248>)
 8004686:	6912      	ldr	r2, [r2, #16]
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	0a9b      	lsrs	r3, r3, #10
 800468e:	4a21      	ldr	r2, [pc, #132]	; (8004714 <W25qxx_Init+0x248>)
 8004690:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004692:	f7ff fe5f 	bl	8004354 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004696:	2001      	movs	r0, #1
 8004698:	f7ff fea8 	bl	80043ec <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800469c:	2002      	movs	r0, #2
 800469e:	f7ff fea5 	bl	80043ec <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80046a2:	2003      	movs	r0, #3
 80046a4:	f7ff fea2 	bl	80043ec <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80046a8:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <W25qxx_Init+0x248>)
 80046aa:	895b      	ldrh	r3, [r3, #10]
 80046ac:	4619      	mov	r1, r3
 80046ae:	4828      	ldr	r0, [pc, #160]	; (8004750 <W25qxx_Init+0x284>)
 80046b0:	f018 f9ac 	bl	801ca0c <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80046b4:	4b17      	ldr	r3, [pc, #92]	; (8004714 <W25qxx_Init+0x248>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4619      	mov	r1, r3
 80046ba:	4826      	ldr	r0, [pc, #152]	; (8004754 <W25qxx_Init+0x288>)
 80046bc:	f018 f9a6 	bl	801ca0c <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80046c0:	4b14      	ldr	r3, [pc, #80]	; (8004714 <W25qxx_Init+0x248>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	4619      	mov	r1, r3
 80046c6:	4824      	ldr	r0, [pc, #144]	; (8004758 <W25qxx_Init+0x28c>)
 80046c8:	f018 f9a0 	bl	801ca0c <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80046cc:	4b11      	ldr	r3, [pc, #68]	; (8004714 <W25qxx_Init+0x248>)
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	4619      	mov	r1, r3
 80046d2:	4822      	ldr	r0, [pc, #136]	; (800475c <W25qxx_Init+0x290>)
 80046d4:	f018 f99a 	bl	801ca0c <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80046d8:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <W25qxx_Init+0x248>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	4619      	mov	r1, r3
 80046de:	4820      	ldr	r0, [pc, #128]	; (8004760 <W25qxx_Init+0x294>)
 80046e0:	f018 f994 	bl	801ca0c <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <W25qxx_Init+0x248>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	4619      	mov	r1, r3
 80046ea:	481e      	ldr	r0, [pc, #120]	; (8004764 <W25qxx_Init+0x298>)
 80046ec:	f018 f98e 	bl	801ca0c <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 80046f0:	4b08      	ldr	r3, [pc, #32]	; (8004714 <W25qxx_Init+0x248>)
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	4619      	mov	r1, r3
 80046f6:	481c      	ldr	r0, [pc, #112]	; (8004768 <W25qxx_Init+0x29c>)
 80046f8:	f018 f988 	bl	801ca0c <iprintf>
	printf("w25qxx Init Done\r\n");
 80046fc:	481b      	ldr	r0, [pc, #108]	; (800476c <W25qxx_Init+0x2a0>)
 80046fe:	f018 fa0b 	bl	801cb18 <puts>
#endif
	w25qxx.Lock = 0;
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <W25qxx_Init+0x248>)
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800470a:	2301      	movs	r3, #1
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20006edc 	.word	0x20006edc
 8004718:	40020c00 	.word	0x40020c00
 800471c:	080216d8 	.word	0x080216d8
 8004720:	080216f0 	.word	0x080216f0
 8004724:	08021704 	.word	0x08021704
 8004728:	0802171c 	.word	0x0802171c
 800472c:	08021734 	.word	0x08021734
 8004730:	0802174c 	.word	0x0802174c
 8004734:	08021764 	.word	0x08021764
 8004738:	0802177c 	.word	0x0802177c
 800473c:	08021794 	.word	0x08021794
 8004740:	080217ac 	.word	0x080217ac
 8004744:	080217c4 	.word	0x080217c4
 8004748:	080217dc 	.word	0x080217dc
 800474c:	080217f4 	.word	0x080217f4
 8004750:	08021808 	.word	0x08021808
 8004754:	08021828 	.word	0x08021828
 8004758:	08021840 	.word	0x08021840
 800475c:	08021860 	.word	0x08021860
 8004760:	0802187c 	.word	0x0802187c
 8004764:	0802189c 	.word	0x0802189c
 8004768:	080218b8 	.word	0x080218b8
 800476c:	080218d8 	.word	0x080218d8

08004770 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004778:	e002      	b.n	8004780 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800477a:	2001      	movs	r0, #1
 800477c:	f011 fcb9 	bl	80160f2 <osDelay>
	while (w25qxx.Lock == 1)
 8004780:	4b2d      	ldr	r3, [pc, #180]	; (8004838 <W25qxx_EraseSector+0xc8>)
 8004782:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004786:	2b01      	cmp	r3, #1
 8004788:	d0f7      	beq.n	800477a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800478a:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <W25qxx_EraseSector+0xc8>)
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8004792:	f004 f9fd 	bl	8008b90 <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4828      	ldr	r0, [pc, #160]	; (800483c <W25qxx_EraseSector+0xcc>)
 800479c:	f018 f936 	bl	801ca0c <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80047a0:	f7ff fe6a 	bl	8004478 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <W25qxx_EraseSector+0xc8>)
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80047b0:	f7ff fe06 	bl	80043c0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80047b4:	2200      	movs	r2, #0
 80047b6:	2140      	movs	r1, #64	; 0x40
 80047b8:	4821      	ldr	r0, [pc, #132]	; (8004840 <W25qxx_EraseSector+0xd0>)
 80047ba:	f005 f901 	bl	80099c0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80047be:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <W25qxx_EraseSector+0xc8>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d909      	bls.n	80047da <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80047c6:	2021      	movs	r0, #33	; 0x21
 80047c8:	f7ff fd78 	bl	80042bc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	0e1b      	lsrs	r3, r3, #24
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fd72 	bl	80042bc <W25qxx_Spi>
 80047d8:	e002      	b.n	80047e0 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80047da:	2020      	movs	r0, #32
 80047dc:	f7ff fd6e 	bl	80042bc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0c1b      	lsrs	r3, r3, #16
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fd68 	bl	80042bc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fd62 	bl	80042bc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fd5d 	bl	80042bc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004802:	2201      	movs	r2, #1
 8004804:	2140      	movs	r1, #64	; 0x40
 8004806:	480e      	ldr	r0, [pc, #56]	; (8004840 <W25qxx_EraseSector+0xd0>)
 8004808:	f005 f8da 	bl	80099c0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800480c:	f7ff fe34 	bl	8004478 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004810:	f004 f9be 	bl	8008b90 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	4619      	mov	r1, r3
 800481c:	4809      	ldr	r0, [pc, #36]	; (8004844 <W25qxx_EraseSector+0xd4>)
 800481e:	f018 f8f5 	bl	801ca0c <iprintf>
#endif
	W25qxx_Delay(1);
 8004822:	2001      	movs	r0, #1
 8004824:	f011 fc65 	bl	80160f2 <osDelay>
	w25qxx.Lock = 0;
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <W25qxx_EraseSector+0xc8>)
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20006edc 	.word	0x20006edc
 800483c:	08021930 	.word	0x08021930
 8004840:	40020c00 	.word	0x40020c00
 8004844:	08021954 	.word	0x08021954

08004848 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <W25qxx_SectorToPage+0x28>)
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	4a05      	ldr	r2, [pc, #20]	; (8004870 <W25qxx_SectorToPage+0x28>)
 800485c:	8952      	ldrh	r2, [r2, #10]
 800485e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20006edc 	.word	0x20006edc

08004874 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004882:	e002      	b.n	800488a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004884:	2001      	movs	r0, #1
 8004886:	f011 fc34 	bl	80160f2 <osDelay>
	while (w25qxx.Lock == 1)
 800488a:	4b57      	ldr	r3, [pc, #348]	; (80049e8 <W25qxx_WritePage+0x174>)
 800488c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004890:	2b01      	cmp	r3, #1
 8004892:	d0f7      	beq.n	8004884 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004894:	4b54      	ldr	r3, [pc, #336]	; (80049e8 <W25qxx_WritePage+0x174>)
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4413      	add	r3, r2
 80048a2:	4a51      	ldr	r2, [pc, #324]	; (80049e8 <W25qxx_WritePage+0x174>)
 80048a4:	8952      	ldrh	r2, [r2, #10]
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d802      	bhi.n	80048b0 <W25qxx_WritePage+0x3c>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80048b0:	4b4d      	ldr	r3, [pc, #308]	; (80049e8 <W25qxx_WritePage+0x174>)
 80048b2:	895b      	ldrh	r3, [r3, #10]
 80048b4:	461a      	mov	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	4413      	add	r3, r2
 80048c2:	4a49      	ldr	r2, [pc, #292]	; (80049e8 <W25qxx_WritePage+0x174>)
 80048c4:	8952      	ldrh	r2, [r2, #10]
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d905      	bls.n	80048d6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <W25qxx_WritePage+0x174>)
 80048cc:	895b      	ldrh	r3, [r3, #10]
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	4843      	ldr	r0, [pc, #268]	; (80049ec <W25qxx_WritePage+0x178>)
 80048de:	f018 f895 	bl	801ca0c <iprintf>
	W25qxx_Delay(100);
 80048e2:	2064      	movs	r0, #100	; 0x64
 80048e4:	f011 fc05 	bl	80160f2 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80048e8:	f004 f952 	bl	8008b90 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 80048ee:	f7ff fdc3 	bl	8004478 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80048f2:	f7ff fd65 	bl	80043c0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80048f6:	2200      	movs	r2, #0
 80048f8:	2140      	movs	r1, #64	; 0x40
 80048fa:	483d      	ldr	r0, [pc, #244]	; (80049f0 <W25qxx_WritePage+0x17c>)
 80048fc:	f005 f860 	bl	80099c0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004900:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <W25qxx_WritePage+0x174>)
 8004902:	895b      	ldrh	r3, [r3, #10]
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	fb03 f302 	mul.w	r3, r3, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004912:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <W25qxx_WritePage+0x174>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b08      	cmp	r3, #8
 8004918:	d909      	bls.n	800492e <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800491a:	2012      	movs	r0, #18
 800491c:	f7ff fcce 	bl	80042bc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	0e1b      	lsrs	r3, r3, #24
 8004924:	b2db      	uxtb	r3, r3
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fcc8 	bl	80042bc <W25qxx_Spi>
 800492c:	e002      	b.n	8004934 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800492e:	2002      	movs	r0, #2
 8004930:	f7ff fcc4 	bl	80042bc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	b2db      	uxtb	r3, r3
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fcbe 	bl	80042bc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fcb8 	bl	80042bc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fcb3 	bl	80042bc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	b29a      	uxth	r2, r3
 800495a:	2364      	movs	r3, #100	; 0x64
 800495c:	68f9      	ldr	r1, [r7, #12]
 800495e:	4825      	ldr	r0, [pc, #148]	; (80049f4 <W25qxx_WritePage+0x180>)
 8004960:	f008 ffa1 	bl	800d8a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004964:	2201      	movs	r2, #1
 8004966:	2140      	movs	r1, #64	; 0x40
 8004968:	4821      	ldr	r0, [pc, #132]	; (80049f0 <W25qxx_WritePage+0x17c>)
 800496a:	f005 f829 	bl	80099c0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800496e:	f7ff fd83 	bl	8004478 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004972:	f004 f90d 	bl	8008b90 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	e018      	b.n	80049b6 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	2b00      	cmp	r3, #0
 800498c:	d108      	bne.n	80049a0 <W25qxx_WritePage+0x12c>
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d905      	bls.n	80049a0 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8004994:	4818      	ldr	r0, [pc, #96]	; (80049f8 <W25qxx_WritePage+0x184>)
 8004996:	f018 f8bf 	bl	801cb18 <puts>
			W25qxx_Delay(10);
 800499a:	200a      	movs	r0, #10
 800499c:	f011 fba9 	bl	80160f2 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	4413      	add	r3, r2
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	4814      	ldr	r0, [pc, #80]	; (80049fc <W25qxx_WritePage+0x188>)
 80049ac:	f018 f82e 	bl	801ca0c <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	3301      	adds	r3, #1
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d3e2      	bcc.n	8004984 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80049be:	480e      	ldr	r0, [pc, #56]	; (80049f8 <W25qxx_WritePage+0x184>)
 80049c0:	f018 f8aa 	bl	801cb18 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80049c4:	6939      	ldr	r1, [r7, #16]
 80049c6:	480e      	ldr	r0, [pc, #56]	; (8004a00 <W25qxx_WritePage+0x18c>)
 80049c8:	f018 f820 	bl	801ca0c <iprintf>
	W25qxx_Delay(100);
 80049cc:	2064      	movs	r0, #100	; 0x64
 80049ce:	f011 fb90 	bl	80160f2 <osDelay>
#endif
	W25qxx_Delay(1);
 80049d2:	2001      	movs	r0, #1
 80049d4:	f011 fb8d 	bl	80160f2 <osDelay>
	w25qxx.Lock = 0;
 80049d8:	4b03      	ldr	r3, [pc, #12]	; (80049e8 <W25qxx_WritePage+0x174>)
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80049e0:	bf00      	nop
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20006edc 	.word	0x20006edc
 80049ec:	08021bb8 	.word	0x08021bb8
 80049f0:	40020c00 	.word	0x40020c00
 80049f4:	20005fd8 	.word	0x20005fd8
 80049f8:	08021bf4 	.word	0x08021bf4
 80049fc:	08021bf8 	.word	0x08021bf8
 8004a00:	08021c00 	.word	0x08021c00

08004a04 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004a12:	4b36      	ldr	r3, [pc, #216]	; (8004aec <W25qxx_WriteSector+0xe8>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d802      	bhi.n	8004a22 <W25qxx_WriteSector+0x1e>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004a22:	4b32      	ldr	r3, [pc, #200]	; (8004aec <W25qxx_WriteSector+0xe8>)
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	4830      	ldr	r0, [pc, #192]	; (8004af0 <W25qxx_WriteSector+0xec>)
 8004a30:	f017 ffec 	bl	801ca0c <iprintf>
	W25qxx_Delay(100);
 8004a34:	2064      	movs	r0, #100	; 0x64
 8004a36:	f011 fb5c 	bl	80160f2 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004a3a:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <W25qxx_WriteSector+0xe8>)
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d306      	bcc.n	8004a52 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8004a44:	482b      	ldr	r0, [pc, #172]	; (8004af4 <W25qxx_WriteSector+0xf0>)
 8004a46:	f018 f867 	bl	801cb18 <puts>
		W25qxx_Delay(100);
 8004a4a:	2064      	movs	r0, #100	; 0x64
 8004a4c:	f011 fb51 	bl	80160f2 <osDelay>
#endif
		return;
 8004a50:	e048      	b.n	8004ae4 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	441a      	add	r2, r3
 8004a58:	4b24      	ldr	r3, [pc, #144]	; (8004aec <W25qxx_WriteSector+0xe8>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d905      	bls.n	8004a6c <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004a60:	4b22      	ldr	r3, [pc, #136]	; (8004aec <W25qxx_WriteSector+0xe8>)
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e001      	b.n	8004a70 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004a70:	68b8      	ldr	r0, [r7, #8]
 8004a72:	f7ff fee9 	bl	8004848 <W25qxx_SectorToPage>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <W25qxx_WriteSector+0xe8>)
 8004a7a:	895b      	ldrh	r3, [r3, #10]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a84:	4413      	add	r3, r2
 8004a86:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004a88:	4b18      	ldr	r3, [pc, #96]	; (8004aec <W25qxx_WriteSector+0xe8>)
 8004a8a:	895b      	ldrh	r3, [r3, #10]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a94:	fb02 f201 	mul.w	r2, r2, r1
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	69f9      	ldr	r1, [r7, #28]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff fee6 	bl	8004874 <W25qxx_WritePage>
		StartPage++;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004aae:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <W25qxx_WriteSector+0xe8>)
 8004ab0:	895b      	ldrh	r3, [r3, #10]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1a9a      	subs	r2, r3, r2
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	4413      	add	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <W25qxx_WriteSector+0xe8>)
 8004ac0:	895b      	ldrh	r3, [r3, #10]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	dce1      	bgt.n	8004a9c <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8004ad8:	4807      	ldr	r0, [pc, #28]	; (8004af8 <W25qxx_WriteSector+0xf4>)
 8004ada:	f018 f81d 	bl	801cb18 <puts>
	W25qxx_Delay(100);
 8004ade:	2064      	movs	r0, #100	; 0x64
 8004ae0:	f011 fb07 	bl	80160f2 <osDelay>
#endif
}
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20006edc 	.word	0x20006edc
 8004af0:	08021c24 	.word	0x08021c24
 8004af4:	08021c64 	.word	0x08021c64
 8004af8:	08021c84 	.word	0x08021c84

08004afc <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004b0a:	e002      	b.n	8004b12 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	f011 faf0 	bl	80160f2 <osDelay>
	while (w25qxx.Lock == 1)
 8004b12:	4b54      	ldr	r3, [pc, #336]	; (8004c64 <W25qxx_ReadPage+0x168>)
 8004b14:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d0f7      	beq.n	8004b0c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004b1c:	4b51      	ldr	r3, [pc, #324]	; (8004c64 <W25qxx_ReadPage+0x168>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004b24:	4b4f      	ldr	r3, [pc, #316]	; (8004c64 <W25qxx_ReadPage+0x168>)
 8004b26:	895b      	ldrh	r3, [r3, #10]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d802      	bhi.n	8004b36 <W25qxx_ReadPage+0x3a>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004b36:	4b4b      	ldr	r3, [pc, #300]	; (8004c64 <W25qxx_ReadPage+0x168>)
 8004b38:	895b      	ldrh	r3, [r3, #10]
 8004b3a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	4413      	add	r3, r2
 8004b42:	4a48      	ldr	r2, [pc, #288]	; (8004c64 <W25qxx_ReadPage+0x168>)
 8004b44:	8952      	ldrh	r2, [r2, #10]
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d905      	bls.n	8004b56 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004b4a:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <W25qxx_ReadPage+0x168>)
 8004b4c:	895b      	ldrh	r3, [r3, #10]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	4842      	ldr	r0, [pc, #264]	; (8004c68 <W25qxx_ReadPage+0x16c>)
 8004b5e:	f017 ff55 	bl	801ca0c <iprintf>
	W25qxx_Delay(100);
 8004b62:	2064      	movs	r0, #100	; 0x64
 8004b64:	f011 fac5 	bl	80160f2 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004b68:	f004 f812 	bl	8008b90 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004b6e:	4b3d      	ldr	r3, [pc, #244]	; (8004c64 <W25qxx_ReadPage+0x168>)
 8004b70:	895b      	ldrh	r3, [r3, #10]
 8004b72:	461a      	mov	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	fb03 f302 	mul.w	r3, r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004b80:	2200      	movs	r2, #0
 8004b82:	2140      	movs	r1, #64	; 0x40
 8004b84:	4839      	ldr	r0, [pc, #228]	; (8004c6c <W25qxx_ReadPage+0x170>)
 8004b86:	f004 ff1b 	bl	80099c0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004b8a:	4b36      	ldr	r3, [pc, #216]	; (8004c64 <W25qxx_ReadPage+0x168>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d909      	bls.n	8004ba6 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8004b92:	200c      	movs	r0, #12
 8004b94:	f7ff fb92 	bl	80042bc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	0e1b      	lsrs	r3, r3, #24
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fb8c 	bl	80042bc <W25qxx_Spi>
 8004ba4:	e002      	b.n	8004bac <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004ba6:	200b      	movs	r0, #11
 8004ba8:	f7ff fb88 	bl	80042bc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fb82 	bl	80042bc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fb7c 	bl	80042bc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fb77 	bl	80042bc <W25qxx_Spi>
	W25qxx_Spi(0);
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f7ff fb74 	bl	80042bc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	2364      	movs	r3, #100	; 0x64
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	4824      	ldr	r0, [pc, #144]	; (8004c70 <W25qxx_ReadPage+0x174>)
 8004bde:	f008 ff9e 	bl	800db1e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004be2:	2201      	movs	r2, #1
 8004be4:	2140      	movs	r1, #64	; 0x40
 8004be6:	4821      	ldr	r0, [pc, #132]	; (8004c6c <W25qxx_ReadPage+0x170>)
 8004be8:	f004 feea 	bl	80099c0 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004bec:	f003 ffd0 	bl	8008b90 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	e018      	b.n	8004c30 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d108      	bne.n	8004c1a <W25qxx_ReadPage+0x11e>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d905      	bls.n	8004c1a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004c0e:	4819      	ldr	r0, [pc, #100]	; (8004c74 <W25qxx_ReadPage+0x178>)
 8004c10:	f017 ff82 	bl	801cb18 <puts>
			W25qxx_Delay(10);
 8004c14:	200a      	movs	r0, #10
 8004c16:	f011 fa6c 	bl	80160f2 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	4413      	add	r3, r2
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	4619      	mov	r1, r3
 8004c24:	4814      	ldr	r0, [pc, #80]	; (8004c78 <W25qxx_ReadPage+0x17c>)
 8004c26:	f017 fef1 	bl	801ca0c <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d3e2      	bcc.n	8004bfe <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004c38:	480e      	ldr	r0, [pc, #56]	; (8004c74 <W25qxx_ReadPage+0x178>)
 8004c3a:	f017 ff6d 	bl	801cb18 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004c3e:	6939      	ldr	r1, [r7, #16]
 8004c40:	480e      	ldr	r0, [pc, #56]	; (8004c7c <W25qxx_ReadPage+0x180>)
 8004c42:	f017 fee3 	bl	801ca0c <iprintf>
	W25qxx_Delay(100);
 8004c46:	2064      	movs	r0, #100	; 0x64
 8004c48:	f011 fa53 	bl	80160f2 <osDelay>
#endif
	W25qxx_Delay(1);
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	f011 fa50 	bl	80160f2 <osDelay>
	w25qxx.Lock = 0;
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <W25qxx_ReadPage+0x168>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004c5a:	bf00      	nop
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20006edc 	.word	0x20006edc
 8004c68:	08021dd0 	.word	0x08021dd0
 8004c6c:	40020c00 	.word	0x40020c00
 8004c70:	20005fd8 	.word	0x20005fd8
 8004c74:	08021bf4 	.word	0x08021bf4
 8004c78:	08021bf8 	.word	0x08021bf8
 8004c7c:	08021e0c 	.word	0x08021e0c

08004c80 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004c8e:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <W25qxx_ReadSector+0xe8>)
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d802      	bhi.n	8004c9e <W25qxx_ReadSector+0x1e>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d102      	bne.n	8004ca4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004c9e:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <W25qxx_ReadSector+0xe8>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4830      	ldr	r0, [pc, #192]	; (8004d6c <W25qxx_ReadSector+0xec>)
 8004cac:	f017 feae 	bl	801ca0c <iprintf>
	W25qxx_Delay(100);
 8004cb0:	2064      	movs	r0, #100	; 0x64
 8004cb2:	f011 fa1e 	bl	80160f2 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <W25qxx_ReadSector+0xe8>)
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d306      	bcc.n	8004cce <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004cc0:	482b      	ldr	r0, [pc, #172]	; (8004d70 <W25qxx_ReadSector+0xf0>)
 8004cc2:	f017 ff29 	bl	801cb18 <puts>
		W25qxx_Delay(100);
 8004cc6:	2064      	movs	r0, #100	; 0x64
 8004cc8:	f011 fa13 	bl	80160f2 <osDelay>
#endif
		return;
 8004ccc:	e048      	b.n	8004d60 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	441a      	add	r2, r3
 8004cd4:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <W25qxx_ReadSector+0xe8>)
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d905      	bls.n	8004ce8 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004cdc:	4b22      	ldr	r3, [pc, #136]	; (8004d68 <W25qxx_ReadSector+0xe8>)
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e001      	b.n	8004cec <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004cec:	68b8      	ldr	r0, [r7, #8]
 8004cee:	f7ff fdab 	bl	8004848 <W25qxx_SectorToPage>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <W25qxx_ReadSector+0xe8>)
 8004cf6:	895b      	ldrh	r3, [r3, #10]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d00:	4413      	add	r3, r2
 8004d02:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <W25qxx_ReadSector+0xe8>)
 8004d06:	895b      	ldrh	r3, [r3, #10]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d10:	fb02 f201 	mul.w	r2, r2, r1
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	69f9      	ldr	r1, [r7, #28]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff feec 	bl	8004afc <W25qxx_ReadPage>
		StartPage++;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	3301      	adds	r3, #1
 8004d28:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <W25qxx_ReadSector+0xe8>)
 8004d2c:	895b      	ldrh	r3, [r3, #10]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1a9a      	subs	r2, r3, r2
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	4413      	add	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <W25qxx_ReadSector+0xe8>)
 8004d3c:	895b      	ldrh	r3, [r3, #10]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	dce1      	bgt.n	8004d18 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004d54:	4807      	ldr	r0, [pc, #28]	; (8004d74 <W25qxx_ReadSector+0xf4>)
 8004d56:	f017 fedf 	bl	801cb18 <puts>
	W25qxx_Delay(100);
 8004d5a:	2064      	movs	r0, #100	; 0x64
 8004d5c:	f011 f9c9 	bl	80160f2 <osDelay>
#endif
}
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20006edc 	.word	0x20006edc
 8004d6c:	08021e30 	.word	0x08021e30
 8004d70:	08021e70 	.word	0x08021e70
 8004d74:	08021e90 	.word	0x08021e90

08004d78 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
 8004d92:	4603      	mov	r3, r0
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	2301      	movs	r3, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8004dee:	2309      	movs	r3, #9
 8004df0:	e01b      	b.n	8004e2a <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fa84 	bl	8005308 <_ZN10IridiumSBD13internalBeginEv>
 8004e00:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00b      	beq.n	8004e28 <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fdba 	bl	8005994 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8004e20:	2100      	movs	r1, #0
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fd04 	bl	8005830 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004e28:	68fb      	ldr	r3, [r7, #12]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8004e44:	2309      	movs	r3, #9
 8004e46:	e028      	b.n	8004e9a <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <_ZN10IridiumSBD5sleepEv+0x30>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d101      	bne.n	8004e62 <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 8004e5e:	230b      	movs	r3, #11
 8004e60:	e01b      	b.n	8004e9a <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fbd6 	bl	800561c <_ZN10IridiumSBD13internalSleepEv>
 8004e70:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fd82 	bl	8005994 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004e90:	2100      	movs	r1, #0
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fccc 	bl	8005830 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004e98:	68fb      	ldr	r3, [r7, #12]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	78fa      	ldrb	r2, [r7, #3]
 8004ed0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00e      	beq.n	8004ef8 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee8:	f083 0301 	eor.w	r3, r3, #1
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f9b2 	bl	800525c <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8004f00:	b5b0      	push	{r4, r5, r7, lr}
 8004f02:	b09c      	sub	sp, #112	; 0x70
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	493f      	ldr	r1, [pc, #252]	; (800500c <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fd4d 	bl	80059b0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8004f16:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004f1a:	4b3d      	ldr	r3, [pc, #244]	; (8005010 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 8004f20:	2218      	movs	r2, #24
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fb8c 	bl	8005640 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f083 0301 	eor.w	r3, r3, #1
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fc49 	bl	80057cc <_ZN10IridiumSBD9cancelledEv>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8004f40:	2304      	movs	r3, #4
 8004f42:	e05e      	b.n	8005002 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8004f44:	2303      	movs	r3, #3
 8004f46:	e05c      	b.n	8005002 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8004f48:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f016 fa59 	bl	801b404 <isxdigit>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8004f58:	230c      	movs	r3, #12
 8004f5a:	e052      	b.n	8005002 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8004f5c:	2372      	movs	r3, #114	; 0x72
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8004f60:	2304      	movs	r3, #4
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8004f64:	230b      	movs	r3, #11
 8004f66:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8004f68:	230e      	movs	r3, #14
 8004f6a:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8004f6c:	2317      	movs	r3, #23
 8004f6e:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8004f70:	2337      	movs	r3, #55	; 0x37
 8004f72:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8004f74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f78:	2210      	movs	r2, #16
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f018 fe7d 	bl	801dc7c <strtoul>
 8004f82:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8004f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f86:	4a24      	ldr	r2, [pc, #144]	; (8005018 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	099b      	lsrs	r3, r3, #6
 8004f8e:	225a      	movs	r2, #90	; 0x5a
 8004f90:	fb02 f303 	mul.w	r3, r2, r3
 8004f94:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 8004f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	4a20      	ldr	r2, [pc, #128]	; (800501c <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8004fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb2:	225a      	movs	r2, #90	; 0x5a
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	4a17      	ldr	r2, [pc, #92]	; (8005018 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	099b      	lsrs	r3, r3, #6
 8004fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fc2:	4413      	add	r3, r2
 8004fc4:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 8004fc6:	f107 0314 	add.w	r3, r7, #20
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f016 fc54 	bl	801b878 <mktime>
 8004fd0:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8004fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fe0:	1884      	adds	r4, r0, r2
 8004fe2:	eb41 0503 	adc.w	r5, r1, r3
 8004fe6:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 8004fea:	f107 0308 	add.w	r3, r7, #8
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f016 fa10 	bl	801b414 <localtime>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2224      	movs	r2, #36	; 0x24
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6838      	ldr	r0, [r7, #0]
 8004ffc:	f016 fb34 	bl	801b668 <memcpy>
   return ISBD_SUCCESS;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3768      	adds	r7, #104	; 0x68
 8005006:	46bd      	mov	sp, r7
 8005008:	bdb0      	pop	{r4, r5, r7, pc}
 800500a:	bf00      	nop
 800500c:	08021f4c 	.word	0x08021f4c
 8005010:	08021f64 	.word	0x08021f64
 8005014:	08021f58 	.word	0x08021f58
 8005018:	10624dd3 	.word	0x10624dd3
 800501c:	b60b60b7 	.word	0xb60b60b7

08005020 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b07      	cmp	r3, #7
 8005030:	d801      	bhi.n	8005036 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8005032:	2308      	movs	r3, #8
 8005034:	e01e      	b.n	8005074 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8005036:	2301      	movs	r3, #1
 8005038:	2201      	movs	r2, #1
 800503a:	4910      	ldr	r1, [pc, #64]	; (800507c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fcb7 	bl	80059b0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4b0e      	ldr	r3, [pc, #56]	; (8005080 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 faf7 	bl	8005640 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005052:	4603      	mov	r3, r0
 8005054:	f083 0301 	eor.w	r3, r3, #1
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fbb4 	bl	80057cc <_ZN10IridiumSBD9cancelledEv>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 800506a:	2304      	movs	r3, #4
 800506c:	e002      	b.n	8005074 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 800506e:	2303      	movs	r3, #3
 8005070:	e000      	b.n	8005074 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	08021f6c 	.word	0x08021f6c
 8005080:	08021f64 	.word	0x08021f64
 8005084:	08021f78 	.word	0x08021f78

08005088 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 800509e:	4918      	ldr	r1, [pc, #96]	; (8005100 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fd2d 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80050a6:	e028      	b.n	80050fa <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f001 f80b 	bl	80060c4 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80050c0:	4313      	orrs	r3, r2
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80050ca:	e00f      	b.n	80050ec <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80050d2:	b25a      	sxtb	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80050da:	b25b      	sxtb	r3, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	b25b      	sxtb	r3, r3
 80050e0:	4013      	ands	r3, r2
 80050e2:	b25b      	sxtb	r3, r3
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f001 f820 	bl	800613a <_ZN10IridiumSBD11set9603pinsEh>
}
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	08021f94 	.word	0x08021f94

08005104 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005116:	4912      	ldr	r1, [pc, #72]	; (8005160 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fcf1 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 800511e:	2300      	movs	r3, #0
 8005120:	e01a      	b.n	8005158 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 ffce 	bl	80060c4 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8005134:	4013      	ands	r3, r2
 8005136:	b2da      	uxtb	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 8005156:	2300      	movs	r3, #0
  }
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	08021fe0 	.word	0x08021fe0

08005164 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 800517a:	4918      	ldr	r1, [pc, #96]	; (80051dc <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fcbf 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005182:	e028      	b.n	80051d6 <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 ff9d 	bl	80060c4 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800519c:	4313      	orrs	r3, r2
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80051a6:	e00f      	b.n	80051c8 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80051ae:	b25a      	sxtb	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80051b6:	b25b      	sxtb	r3, r3
 80051b8:	43db      	mvns	r3, r3
 80051ba:	b25b      	sxtb	r3, r3
 80051bc:	4013      	ands	r3, r2
 80051be:	b25b      	sxtb	r3, r3
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 ffb2 	bl	800613a <_ZN10IridiumSBD11set9603pinsEh>
}
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	0802202c 	.word	0x0802202c

080051e0 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d004      	beq.n	8005200 <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 80051f6:	4918      	ldr	r1, [pc, #96]	; (8005258 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fc81 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80051fe:	e028      	b.n	8005252 <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 ff5f 	bl	80060c4 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8005218:	4313      	orrs	r3, r2
 800521a:	b2da      	uxtb	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8005222:	e00f      	b.n	8005244 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800522a:	b25a      	sxtb	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8005232:	b25b      	sxtb	r3, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	b25b      	sxtb	r3, r3
 8005238:	4013      	ands	r3, r2
 800523a:	b25b      	sxtb	r3, r3
 800523c:	b2da      	uxtb	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 ff74 	bl	800613a <_ZN10IridiumSBD11set9603pinsEh>
}
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	08022074 	.word	0x08022074

0800525c <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800526a:	2b00      	cmp	r3, #0
 800526c:	d004      	beq.n	8005278 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 800526e:	4913      	ldr	r1, [pc, #76]	; (80052bc <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fc45 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005276:	e01d      	b.n	80052b4 <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 ff23 	bl	80060c4 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005284:	b25a      	sxtb	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800528c:	b25b      	sxtb	r3, r3
 800528e:	43db      	mvns	r3, r3
 8005290:	b25b      	sxtb	r3, r3
 8005292:	4013      	ands	r3, r2
 8005294:	b25b      	sxtb	r3, r3
 8005296:	b2da      	uxtb	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80052a4:	4619      	mov	r1, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 ff47 	bl	800613a <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	08022144 	.word	0x08022144

080052c0 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e013      	b.n	80052fe <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f001 fcb8 	bl	8006c58 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 fcfd 	bl	8006cec <_ZN7TwoWire15endTransmissionEv>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
   }
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b090      	sub	sp, #64	; 0x40
 800530c:	af02      	add	r7, sp, #8
 800530e:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8005310:	49b1      	ldr	r1, [pc, #708]	; (80055d8 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fbf4 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800531e:	f083 0301 	eor.w	r3, r3, #1
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8005328:	2301      	movs	r3, #1
 800532a:	e150      	b.n	80055ce <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005332:	f083 0301 	eor.w	r3, r3, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fec1 	bl	80060c4 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fde6 	bl	8005f14 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8005348:	2101      	movs	r1, #1
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa70 	bl	8005830 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8005350:	2300      	movs	r3, #0
 8005352:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8005356:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 800535c:	f003 fc18 	bl	8008b90 <HAL_GetTick>
 8005360:	62b8      	str	r0, [r7, #40]	; 0x28
 8005362:	f003 fc15 	bl	8008b90 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536e:	429a      	cmp	r2, r3
 8005370:	bf8c      	ite	hi
 8005372:	2301      	movhi	r3, #1
 8005374:	2300      	movls	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa25 	bl	80057cc <_ZN10IridiumSBD9cancelledEv>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0ec      	beq.n	8005362 <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 8005388:	2304      	movs	r3, #4
 800538a:	e120      	b.n	80055ce <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 faee 	bl	8005978 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 800539c:	f003 fbf8 	bl	8008b90 <HAL_GetTick>
 80053a0:	6278      	str	r0, [r7, #36]	; 0x24
 80053a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053a6:	f083 0301 	eor.w	r3, r3, #1
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d010      	beq.n	80053d2 <_ZN10IridiumSBD13internalBeginEv+0xca>
 80053b0:	f003 fbee 	bl	8008b90 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1ad2      	subs	r2, r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053c0:	4619      	mov	r1, r3
 80053c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053c6:	fb03 f301 	mul.w	r3, r3, r1
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d201      	bcs.n	80053d2 <_ZN10IridiumSBD13internalBeginEv+0xca>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <_ZN10IridiumSBD13internalBeginEv+0xcc>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d018      	beq.n	800540a <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 80053d8:	2301      	movs	r3, #1
 80053da:	2201      	movs	r2, #1
 80053dc:	497f      	ldr	r1, [pc, #508]	; (80055dc <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fae6 	bl	80059b0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 80053e4:	4b7e      	ldr	r3, [pc, #504]	; (80055e0 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	2300      	movs	r3, #0
 80053ea:	2200      	movs	r2, #0
 80053ec:	2100      	movs	r1, #0
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f926 	bl	8005640 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f9e6 	bl	80057cc <_ZN10IridiumSBD9cancelledEv>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0cd      	beq.n	80053a2 <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 8005406:	2304      	movs	r3, #4
 8005408:	e0e1      	b.n	80055ce <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 800540a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800540e:	f083 0301 	eor.w	r3, r3, #1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8005418:	4972      	ldr	r1, [pc, #456]	; (80055e4 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fb70 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8005420:	2305      	movs	r3, #5
 8005422:	e0d4      	b.n	80055ce <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8005424:	4a70      	ldr	r2, [pc, #448]	; (80055e8 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8005426:	f107 0310 	add.w	r3, r7, #16
 800542a:	ca07      	ldmia	r2, {r0, r1, r2}
 800542c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8005430:	2300      	movs	r3, #0
 8005432:	633b      	str	r3, [r7, #48]	; 0x30
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	2b02      	cmp	r3, #2
 8005438:	dc26      	bgt.n	8005488 <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005442:	4413      	add	r3, r2
 8005444:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fb0a 	bl	8005a64 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8005450:	4b63      	ldr	r3, [pc, #396]	; (80055e0 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	2300      	movs	r3, #0
 8005456:	2200      	movs	r2, #0
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f8f0 	bl	8005640 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005460:	4603      	mov	r3, r0
 8005462:	f083 0301 	eor.w	r3, r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d009      	beq.n	8005480 <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f9ad 	bl	80057cc <_ZN10IridiumSBD9cancelledEv>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <_ZN10IridiumSBD13internalBeginEv+0x174>
 8005478:	2304      	movs	r3, #4
 800547a:	e0a8      	b.n	80055ce <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 800547c:	2303      	movs	r3, #3
 800547e:	e0a6      	b.n	80055ce <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	3301      	adds	r3, #1
 8005484:	633b      	str	r3, [r7, #48]	; 0x30
 8005486:	e7d5      	b.n	8005434 <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8005488:	4958      	ldr	r1, [pc, #352]	; (80055ec <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fb38 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <_ZN10IridiumSBD13internalBeginEv+0x196>
 800549a:	4b55      	ldr	r3, [pc, #340]	; (80055f0 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 800549c:	e000      	b.n	80054a0 <_ZN10IridiumSBD13internalBeginEv+0x198>
 800549e:	4b55      	ldr	r3, [pc, #340]	; (80055f4 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fb2c 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80054a8:	4953      	ldr	r1, [pc, #332]	; (80055f8 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fb28 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 80054ba:	2101      	movs	r1, #1
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff fcff 	bl	8004ec0 <_ZN10IridiumSBD16enableRingAlertsEb>
 80054c2:	e00a      	b.n	80054da <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ca:	f083 0301 	eor.w	r3, r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fec1 	bl	800525c <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 80054e4:	4945      	ldr	r1, [pc, #276]	; (80055fc <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 80054e6:	e000      	b.n	80054ea <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 80054e8:	4945      	ldr	r1, [pc, #276]	; (8005600 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 80054ea:	2301      	movs	r3, #1
 80054ec:	2201      	movs	r2, #1
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa5e 	bl	80059b0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 80054f4:	4b3a      	ldr	r3, [pc, #232]	; (80055e0 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	2200      	movs	r2, #0
 80054fc:	2100      	movs	r1, #0
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f89e 	bl	8005640 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005504:	4603      	mov	r3, r0
 8005506:	f083 0301 	eor.w	r3, r3, #1
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f95b 	bl	80057cc <_ZN10IridiumSBD9cancelledEv>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <_ZN10IridiumSBD13internalBeginEv+0x218>
 800551c:	2304      	movs	r3, #4
 800551e:	e056      	b.n	80055ce <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8005520:	2303      	movs	r3, #3
 8005522:	e054      	b.n	80055ce <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8005524:	f107 0308 	add.w	r3, r7, #8
 8005528:	2208      	movs	r2, #8
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff fd77 	bl	8005020 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8005532:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 800553a:	4932      	ldr	r1, [pc, #200]	; (8005604 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fadf 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800554a:	e027      	b.n	800559c <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 800554c:	492e      	ldr	r1, [pc, #184]	; (8005608 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fad6 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8005554:	f107 0308 	add.w	r3, r7, #8
 8005558:	4619      	mov	r1, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 faf6 	bl	8005b4c <_ZN10IridiumSBD9diagprintEPKc>
 8005560:	492a      	ldr	r1, [pc, #168]	; (800560c <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 facc 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8005568:	7a3b      	ldrb	r3, [r7, #8]
 800556a:	2b54      	cmp	r3, #84	; 0x54
 800556c:	d116      	bne.n	800559c <_ZN10IridiumSBD13internalBeginEv+0x294>
 800556e:	7a7b      	ldrb	r3, [r7, #9]
 8005570:	2b41      	cmp	r3, #65	; 0x41
 8005572:	d113      	bne.n	800559c <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	3302      	adds	r3, #2
 800557a:	220a      	movs	r2, #10
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f018 fb7c 	bl	801dc7c <strtoul>
 8005584:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800558c:	4293      	cmp	r3, r2
 800558e:	bf94      	ite	ls
 8005590:	2301      	movls	r3, #1
 8005592:	2300      	movhi	r3, #0
 8005594:	b2da      	uxtb	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 800559c:	491c      	ldr	r1, [pc, #112]	; (8005610 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 faae 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 80055b0:	e000      	b.n	80055b4 <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 faa2 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80055bc:	4915      	ldr	r1, [pc, #84]	; (8005614 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fa9e 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 80055c4:	4914      	ldr	r1, [pc, #80]	; (8005618 <_ZN10IridiumSBD13internalBeginEv+0x310>)
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fa9a 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3738      	adds	r7, #56	; 0x38
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	08022264 	.word	0x08022264
 80055dc:	0802227c 	.word	0x0802227c
 80055e0:	08021f64 	.word	0x08021f64
 80055e4:	08022280 	.word	0x08022280
 80055e8:	08022354 	.word	0x08022354
 80055ec:	08022298 	.word	0x08022298
 80055f0:	080222a8 	.word	0x080222a8
 80055f4:	080222ac 	.word	0x080222ac
 80055f8:	080222b4 	.word	0x080222b4
 80055fc:	080222c0 	.word	0x080222c0
 8005600:	080222d0 	.word	0x080222d0
 8005604:	080222e0 	.word	0x080222e0
 8005608:	080222f8 	.word	0x080222f8
 800560c:	08022310 	.word	0x08022310
 8005610:	08022314 	.word	0x08022314
 8005614:	08022328 	.word	0x08022328
 8005618:	08022338 	.word	0x08022338

0800561c <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 800562e:	230a      	movs	r3, #10
 8005630:	e000      	b.n	8005634 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8005640:	b590      	push	{r4, r7, lr}
 8005642:	b08b      	sub	sp, #44	; 0x2c
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 800564e:	495d      	ldr	r1, [pc, #372]	; (80057c4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x184>)
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 fa55 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8005656:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fa77 	bl	8005b4c <_ZN10IridiumSBD9diagprintEPKc>
   HAL_UART_Transmit(&(this->uart),(uint8_t*) terminator, strlen(terminator), HAL_MAX_DELAY); //TODO doesn't print otherwise
 800565e:	68fc      	ldr	r4, [r7, #12]
 8005660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005662:	f7fa fdcf 	bl	8000204 <strlen>
 8005666:	4603      	mov	r3, r0
 8005668:	b29a      	uxth	r2, r3
 800566a:	f04f 33ff 	mov.w	r3, #4294967295
 800566e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005670:	4620      	mov	r0, r4
 8005672:	f009 fc70 	bl	800ef56 <HAL_UART_Transmit>
   diagprint(F("\r\n"));
 8005676:	4954      	ldr	r1, [pc, #336]	; (80057c8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x188>)
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 fa41 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x50>
      memset(response, 0, responseSize);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	461a      	mov	r2, r3
 8005688:	2100      	movs	r1, #0
 800568a:	68b8      	ldr	r0, [r7, #8]
 800568c:	f016 f814 	bl	801b6b8 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8005694:	2300      	movs	r3, #0
 8005696:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x62>
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x64>
 80056a2:	2302      	movs	r3, #2
 80056a4:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 80056a6:	f003 fa73 	bl	8008b90 <HAL_GetTick>
 80056aa:	61b8      	str	r0, [r7, #24]
 80056ac:	f003 fa70 	bl	8008b90 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056bc:	4619      	mov	r1, r3
 80056be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056c2:	fb03 f301 	mul.w	r3, r3, r1
 80056c6:	429a      	cmp	r2, r3
 80056c8:	bf34      	ite	cc
 80056ca:	2301      	movcc	r3, #1
 80056cc:	2300      	movcs	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d072      	beq.n	80057ba <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17a>
   {
      if (cancelled())
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f879 	bl	80057cc <_ZN10IridiumSBD9cancelledEv>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         return false;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e06b      	b.n	80057bc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>

      while (filteredavailable() > 0)
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fbb3 	bl	8005e50 <_ZN10IridiumSBD17filteredavailableEv>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bfcc      	ite	gt
 80056f0:	2301      	movgt	r3, #1
 80056f2:	2300      	movle	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0d8      	beq.n	80056ac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x6c>
      {
         char c = filteredread();
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fbc4 	bl	8005e88 <_ZN10IridiumSBD12filteredreadEv>
 8005700:	4603      	mov	r3, r0
 8005702:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d03b      	beq.n	8005782 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
         {
            switch (promptState)
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd8>
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d01d      	beq.n	8005752 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8005716:	e034      	b.n	8005782 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	4413      	add	r3, r2
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	7dfa      	ldrb	r2, [r7, #23]
 8005722:	429a      	cmp	r2, r3
 8005724:	d10b      	bne.n	800573e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
               {
                  ++matchPromptPos;
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	3301      	adds	r3, #1
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	4413      	add	r3, r2
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d121      	bne.n	800577c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                     promptState = GATHERING_RESPONSE;
 8005738:	2301      	movs	r3, #1
 800573a:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 800573c:	e01e      	b.n	800577c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	7dfa      	ldrb	r2, [r7, #23]
 8005744:	429a      	cmp	r2, r3
 8005746:	d101      	bne.n	800574c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10c>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10e>
 800574c:	2300      	movs	r3, #0
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8005750:	e014      	b.n	800577c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               {
                  if (c == '\r' || responseSize < 2)
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	2b0d      	cmp	r3, #13
 800575c:	d002      	beq.n	8005764 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b01      	cmp	r3, #1
 8005762:	dc02      	bgt.n	800576a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8005764:	2302      	movs	r3, #2
 8005766:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8005768:	e00a      	b.n	8005780 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
                     *response++ = c;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	60ba      	str	r2, [r7, #8]
 8005770:	7dfa      	ldrb	r2, [r7, #23]
 8005772:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3b01      	subs	r3, #1
 8005778:	607b      	str	r3, [r7, #4]
               break;
 800577a:	e001      	b.n	8005780 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               break;
 800577c:	bf00      	nop
 800577e:	e000      	b.n	8005782 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
               break;
 8005780:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005786:	4413      	add	r3, r2
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	7dfa      	ldrb	r2, [r7, #23]
 800578c:	429a      	cmp	r2, r3
 800578e:	d10a      	bne.n	80057a6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
         {
            ++matchTerminatorPos;
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	3301      	adds	r3, #1
 8005794:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800579a:	4413      	add	r3, r2
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1a0      	bne.n	80056e4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
               return true;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e00a      	b.n	80057bc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	7dfa      	ldrb	r2, [r7, #23]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d101      	bne.n	80057b4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x176>
 80057b4:	2300      	movs	r3, #0
 80057b6:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 80057b8:	e794      	b.n	80056e4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	372c      	adds	r7, #44	; 0x2c
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd90      	pop	{r4, r7, pc}
 80057c4:	08022498 	.word	0x08022498
 80057c8:	08022310 	.word	0x08022310

080057cc <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d019      	beq.n	8005812 <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d008      	beq.n	80057fc <_ZN10IridiumSBD9cancelledEv+0x30>
 80057ea:	2110      	movs	r1, #16
 80057ec:	480e      	ldr	r0, [pc, #56]	; (8005828 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 80057ee:	f004 f8cf 	bl	8009990 <HAL_GPIO_ReadPin>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <_ZN10IridiumSBD9cancelledEv+0x30>
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <_ZN10IridiumSBD9cancelledEv+0x32>
 80057fc:	2300      	movs	r3, #0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 diagprint(F("ringPin seen!\r\n"));
 800580a:	4908      	ldr	r1, [pc, #32]	; (800582c <_ZN10IridiumSBD9cancelledEv+0x60>)
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f977 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8005812:	f7ff fac3 	bl	8004d9c <_Z12ISBDCallbackv>
 8005816:	4603      	mov	r3, r0
 8005818:	f083 0301 	eor.w	r3, r3, #1
 800581c:	b2db      	uxtb	r3, r3
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40020800 	.word	0x40020800
 800582c:	080224b0 	.word	0x080224b0

08005830 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	f083 0301 	eor.w	r3, r3, #1
 8005842:	b2da      	uxtb	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005850:	2b00      	cmp	r3, #0
 8005852:	d011      	beq.n	8005878 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d04c      	beq.n	80058fa <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f84e 	bl	800590c <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 800587e:	4921      	ldr	r1, [pc, #132]	; (8005904 <_ZN10IridiumSBD5powerEb+0xd4>)
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f93d 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8005890:	2101      	movs	r1, #1
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f848 	bl	8005928 <_ZN10IridiumSBD11setSleepPinEh>
 8005898:	e003      	b.n	80058a2 <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 800589a:	2101      	movs	r1, #1
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fc9f 	bl	80051e0 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 80058a2:	f003 f975 	bl	8008b90 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80058ae:	e025      	b.n	80058fc <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 80058b0:	f003 f96e 	bl	8008b90 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80058c6:	d205      	bcs.n	80058d4 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 80058ce:	4618      	mov	r0, r3
 80058d0:	f003 f96a 	bl	8008ba8 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 80058d4:	490c      	ldr	r1, [pc, #48]	; (8005908 <_ZN10IridiumSBD5powerEb+0xd8>)
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f912 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 80058e6:	2100      	movs	r1, #0
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f81d 	bl	8005928 <_ZN10IridiumSBD11setSleepPinEh>
 80058ee:	e005      	b.n	80058fc <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 80058f0:	2100      	movs	r1, #0
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fc74 	bl	80051e0 <_ZN10IridiumSBD10enable9603Eb>
 80058f8:	e000      	b.n	80058fc <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 80058fa:	bf00      	nop
      }
   }
}
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	08022504 	.word	0x08022504
 8005908:	0802251c 	.word	0x0802251c

0800590c <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8005914:	4903      	ldr	r1, [pc, #12]	; (8005924 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8f2 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	08022534 	.word	0x08022534

08005928 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8005934:	2201      	movs	r2, #1
 8005936:	2108      	movs	r1, #8
 8005938:	480b      	ldr	r0, [pc, #44]	; (8005968 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 800593a:	f004 f841 	bl	80099c0 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 800593e:	490b      	ldr	r1, [pc, #44]	; (800596c <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f8dd 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d104      	bne.n	8005956 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 800594c:	4908      	ldr	r1, [pc, #32]	; (8005970 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8d6 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8005954:	e003      	b.n	800595e <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8005956:	4907      	ldr	r1, [pc, #28]	; (8005974 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f8d1 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800595e:	bf00      	nop
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40020800 	.word	0x40020800
 800596c:	08022560 	.word	0x08022560
 8005970:	0802257c 	.word	0x0802257c
 8005974:	08022584 	.word	0x08022584

08005978 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8005980:	4903      	ldr	r1, [pc, #12]	; (8005990 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8bc 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	0802258c 	.word	0x0802258c

08005994 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 800599c:	4903      	ldr	r1, [pc, #12]	; (80059ac <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8ae 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80059a4:	bf00      	nop
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	080225ac 	.word	0x080225ac

080059b0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4611      	mov	r1, r2
 80059bc:	461a      	mov	r2, r3
 80059be:	460b      	mov	r3, r1
 80059c0:	71fb      	strb	r3, [r7, #7]
 80059c2:	4613      	mov	r3, r2
 80059c4:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 80059cc:	4922      	ldr	r1, [pc, #136]	; (8005a58 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f8de 	bl	8005b90 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f8da 	bl	8005b90 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 80059dc:	79bb      	ldrb	r3, [r7, #6]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 80059e2:	491e      	ldr	r1, [pc, #120]	; (8005a5c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f8d3 	bl	8005b90 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d006      	beq.n	8005a02 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f001 f860 	bl	8006ac0 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8005a00:	e025      	b.n	8005a4e <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f001 f922 	bl	8006c58 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a18:	21ff      	movs	r1, #255	; 0xff
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff f9ac 	bl	8004d78 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f001 f84a 	bl	8006ac0 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 f95b 	bl	8006cec <_ZN7TwoWire15endTransmissionEv>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	bf14      	ite	ne
 8005a3c:	2301      	movne	r3, #1
 8005a3e:	2300      	moveq	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 8005a46:	4906      	ldr	r1, [pc, #24]	; (8005a60 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f859 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	080225c8 	.word	0x080225c8
 8005a5c:	08022310 	.word	0x08022310
 8005a60:	08022390 	.word	0x08022390

08005a64 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8005a6e:	4921      	ldr	r1, [pc, #132]	; (8005af4 <_ZN10IridiumSBD4sendEPKc+0x90>)
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f88d 	bl	8005b90 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f8af 	bl	8005bdc <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8005a7e:	491e      	ldr	r1, [pc, #120]	; (8005af8 <_ZN10IridiumSBD4sendEPKc+0x94>)
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f885 	bl	8005b90 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d006      	beq.n	8005a9e <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f820 	bl	8006adc <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8005a9c:	e025      	b.n	8005aea <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f001 f8d4 	bl	8006c58 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab4:	21ff      	movs	r1, #255	; 0xff
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff f95e 	bl	8004d78 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 f80a 	bl	8006adc <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 f90d 	bl	8006cec <_ZN7TwoWire15endTransmissionEv>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 8005ae2:	4906      	ldr	r1, [pc, #24]	; (8005afc <_ZN10IridiumSBD4sendEPKc+0x98>)
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f80b 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	080225c8 	.word	0x080225c8
 8005af8:	08022310 	.word	0x08022310
 8005afc:	08022390 	.word	0x08022390

08005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	60fa      	str	r2, [r7, #12]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8005b18:	7afb      	ldrb	r3, [r7, #11]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff f94e 	bl	8004dc4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8005b28:	e7f1      	b.n	8005b0e <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8005b2a:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8005b2c:	687c      	ldr	r4, [r7, #4]
 8005b2e:	6838      	ldr	r0, [r7, #0]
 8005b30:	f7fa fb68 	bl	8000204 <strlen>
 8005b34:	4603      	mov	r3, r0
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f009 fa09 	bl	800ef56 <HAL_UART_Transmit>
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd90      	pop	{r4, r7, pc}

08005b4c <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8005b4c:	b590      	push	{r4, r7, lr}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
   while (*str)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	603a      	str	r2, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff f92b 	bl	8004dc4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 8005b6e:	e7f2      	b.n	8005b56 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005b70:	687c      	ldr	r4, [r7, #4]
 8005b72:	6838      	ldr	r0, [r7, #0]
 8005b74:	f7fa fb46 	bl	8000204 <strlen>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	4620      	mov	r0, r4
 8005b84:	f009 f9e7 	bl	800ef56 <HAL_UART_Transmit>
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd90      	pop	{r4, r7, pc}

08005b90 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 8005b90:	b590      	push	{r4, r7, lr}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	60fa      	str	r2, [r7, #12]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8005ba8:	7afb      	ldrb	r3, [r7, #11]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 8005bae:	7afb      	ldrb	r3, [r7, #11]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff f8fa 	bl	8004dac <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8005bb8:	e7f1      	b.n	8005b9e <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8005bba:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 8005bbc:	687c      	ldr	r4, [r7, #4]
 8005bbe:	6838      	ldr	r0, [r7, #0]
 8005bc0:	f7fa fb20 	bl	8000204 <strlen>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f009 f9c1 	bl	800ef56 <HAL_UART_Transmit>
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd90      	pop	{r4, r7, pc}

08005bdc <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
   while (*str)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d008      	beq.n	8005c00 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	603a      	str	r2, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff f8d7 	bl	8004dac <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 8005bfe:	e7f2      	b.n	8005be6 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005c00:	687c      	ldr	r4, [r7, #4]
 8005c02:	6838      	ldr	r0, [r7, #0]
 8005c04:	f7fa fafe 	bl	8000204 <strlen>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	4620      	mov	r0, r4
 8005c14:	f009 f99f 	bl	800ef56 <HAL_UART_Transmit>
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd90      	pop	{r4, r7, pc}

08005c20 <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff f8bb 	bl	8004dac <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 8005c50:	4903      	ldr	r1, [pc, #12]	; (8005c60 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff ff54 	bl	8005b00 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	080225d0 	.word	0x080225d0

08005c64 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c72:	f083 0301 	eor.w	r3, r3, #1
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f949 	bl	8005f14 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4798      	blx	r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	dc0d      	bgt.n	8005cc0 <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005caa:	f083 0301 	eor.w	r3, r3, #1
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00d      	beq.n	8005cd0 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fa67 	bl	8006188 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	dd07      	ble.n	8005cd0 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d101      	bne.n	8005cd0 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80b6 	beq.w	8005e44 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]
 8005cf8:	e004      	b.n	8005d04 <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa5e 	bl	80061bc <_ZN10IridiumSBD10i2cSerReadEv>
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff89 	bl	8005c20 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 808d 	beq.w	8005e36 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	7bfa      	ldrb	r2, [r7, #15]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	f040 8085 	bne.w	8005e36 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10d      	bne.n	8005d62 <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff ff7a 	bl	8005c40 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a3f      	ldr	r2, [pc, #252]	; (8005e4c <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 8005d50:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8005d60:	e06e      	b.n	8005e40 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8005d62:	f002 ff15 	bl	8008b90 <HAL_GetTick>
 8005d66:	60b8      	str	r0, [r7, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4610      	mov	r0, r2
 8005d82:	4798      	blx	r3
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00d      	beq.n	8005da6 <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d90:	f083 0301 	eor.w	r3, r3, #1
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00e      	beq.n	8005db8 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f9f4 	bl	8006188 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d108      	bne.n	8005db8 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005da6:	f002 fef3 	bl	8008b90 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b09      	cmp	r3, #9
 8005db2:	d801      	bhi.n	8005db8 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 8005db8:	2300      	movs	r3, #0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d000      	beq.n	8005dc0 <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 8005dbe:	e7d3      	b.n	8005d68 <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dc6:	f083 0301 	eor.w	r3, r3, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f89f 	bl	8005f14 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00b      	beq.n	8005df8 <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3308      	adds	r3, #8
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4610      	mov	r0, r2
 8005df0:	4798      	blx	r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00d      	beq.n	8005e14 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dfe:	f083 0301 	eor.w	r3, r3, #1
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f9bd 	bl	8006188 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d010      	beq.n	8005e40 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005e24:	1e5a      	subs	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 8005e2c:	7bfa      	ldrb	r2, [r7, #15]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 8005e34:	e004      	b.n	8005e40 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 8005e36:	7bfa      	ldrb	r2, [r7, #15]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005e3e:	e720      	b.n	8005c82 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 8005e40:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8005e42:	e71e      	b.n	8005c82 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	080230ac 	.word	0x080230ac

08005e50 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff ff03 	bl	8005c64 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8005e72:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e76:	d001      	beq.n	8005e7c <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8005e78:	2201      	movs	r2, #1
 8005e7a:	e000      	b.n	8005e7e <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4413      	add	r3, r2
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fee7 	bl	8005c64 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d91c      	bls.n	8005ee0 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005eac:	1c59      	adds	r1, r3, #1
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d109      	bne.n	8005edc <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a11      	ldr	r2, [pc, #68]	; (8005f10 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8005ecc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	e012      	b.n	8005f06 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d00a      	beq.n	8005f02 <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005ef2:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8005efa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	e001      	b.n	8005f06 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	080230ac 	.word	0x080230ac

08005f14 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 8005f1c:	f002 fe38 	bl	8008b90 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8005f30:	4293      	cmp	r3, r2
 8005f32:	bf2c      	ite	cs
 8005f34:	2301      	movcs	r3, #1
 8005f36:	2300      	movcc	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80be 	beq.w	80060bc <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f000 fe81 	bl	8006c58 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5a:	21fd      	movs	r1, #253	; 0xfd
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe ff0b 	bl	8004d78 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fec0 	bl	8006cec <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f76:	2202      	movs	r2, #2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f000 fe5a 	bl	8006c32 <_ZN7TwoWire11requestFromEhh>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01d      	beq.n	8005fca <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4798      	blx	r3
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4798      	blx	r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8005fba:	7b7b      	ldrb	r3, [r7, #13]
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	b21a      	sxth	r2, r3
 8005fc0:	7b3b      	ldrb	r3, [r7, #12]
 8005fc2:	b21b      	sxth	r3, r3
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	b21b      	sxth	r3, r3
 8005fc8:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8005fca:	89fb      	ldrh	r3, [r7, #14]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d06f      	beq.n	80060b0 <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f000 fe3b 	bl	8006c58 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe6:	21ff      	movs	r1, #255	; 0xff
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fe fec5 	bl	8004d78 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fe7a 	bl	8006cec <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8005ff8:	89fb      	ldrh	r3, [r7, #14]
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d92d      	bls.n	800605a <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8006008:	2300      	movs	r3, #0
 800600a:	2208      	movs	r2, #8
 800600c:	f000 fdd6 	bl	8006bbc <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4610      	mov	r0, r2
 8006020:	4798      	blx	r3
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	bf14      	ite	ne
 8006028:	2301      	movne	r3, #1
 800602a:	2300      	moveq	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00f      	beq.n	8006052 <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
 8006044:	4603      	mov	r3, r0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f8e2 	bl	8006214 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8006050:	e7de      	b.n	8006010 <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8006052:	89fb      	ldrh	r3, [r7, #14]
 8006054:	3b08      	subs	r3, #8
 8006056:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8006058:	e7ce      	b.n	8005ff8 <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006064:	89fa      	ldrh	r2, [r7, #14]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	4619      	mov	r1, r3
 800606a:	f000 fde2 	bl	8006c32 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	bf14      	ite	ne
 8006086:	2301      	movne	r3, #1
 8006088:	2300      	moveq	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00f      	beq.n	80060b0 <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4610      	mov	r0, r2
 80060a0:	4798      	blx	r3
 80060a2:	4603      	mov	r3, r0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8b3 	bl	8006214 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 80060ae:	e7de      	b.n	800606e <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 80060b0:	f002 fd6e 	bl	8008b90 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f000 fdbd 	bl	8006c58 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e2:	2110      	movs	r1, #16
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe fe47 	bl	8004d78 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fdfc 	bl	8006cec <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060fe:	2201      	movs	r2, #1
 8006100:	4619      	mov	r1, r3
 8006102:	f000 fd96 	bl	8006c32 <_ZN7TwoWire11requestFromEhh>
 8006106:	4603      	mov	r3, r0
 8006108:	2b01      	cmp	r3, #1
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4610      	mov	r0, r2
 8006126:	4798      	blx	r3
 8006128:	4603      	mov	r3, r0
 800612a:	b2da      	uxtb	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f000 fd80 	bl	8006c58 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615c:	2110      	movs	r1, #16
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fe0a 	bl	8004d78 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	78f9      	ldrb	r1, [r7, #3]
 8006172:	4610      	mov	r0, r2
 8006174:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fdb6 	bl	8006cec <_ZN7TwoWire15endTransmissionEv>
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006196:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	425a      	negs	r2, r3
 80061a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80061ac:	bf58      	it	pl
 80061ae:	4253      	negpl	r3, r2
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d102      	bne.n	80061da <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 80061d4:	f04f 33ff 	mov.w	r3, #4294967295
 80061d8:	e016      	b.n	8006208 <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80061e8:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061f0:	3301      	adds	r3, #1
 80061f2:	425a      	negs	r2, r3
 80061f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80061fc:	bf58      	it	pl
 80061fe:	4253      	negpl	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 8006206:	7bfb      	ldrb	r3, [r7, #15]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006226:	3301      	adds	r3, #1
 8006228:	425a      	negs	r2, r3
 800622a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800622e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006232:	bf58      	it	pl
 8006234:	4253      	negpl	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	429a      	cmp	r2, r3
 8006242:	d00b      	beq.n	800625c <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	4413      	add	r3, r2
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 800625c:	bf00      	nop
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart, uint8_t timeout, uint8_t i2c_bus){
 8006268:	b084      	sub	sp, #16
 800626a:	b590      	push	{r4, r7, lr}
 800626c:	b08d      	sub	sp, #52	; 0x34
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8006276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4618      	mov	r0, r3
 800627e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006282:	2244      	movs	r2, #68	; 0x44
 8006284:	4619      	mov	r1, r3
 8006286:	f015 f9ef 	bl	801b668 <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f04f 33ff 	mov.w	r3, #4294967295
 8006290:	2220      	movs	r2, #32
 8006292:	4986      	ldr	r1, [pc, #536]	; (80064ac <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x244>)
 8006294:	f008 fe5f 	bl	800ef56 <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Setting I2C bus...", 18, HAL_MAX_DELAY);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f04f 33ff 	mov.w	r3, #4294967295
 800629e:	2212      	movs	r2, #18
 80062a0:	4983      	ldr	r1, [pc, #524]	; (80064b0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x248>)
 80062a2:	f008 fe58 	bl	800ef56 <HAL_UART_Transmit>
	if (i2c_bus == 1){
 80062a6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d103      	bne.n	80062b6 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x4e>
		this->wireport = &Wire;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a80      	ldr	r2, [pc, #512]	; (80064b4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x24c>)
 80062b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80062b4:	e00e      	b.n	80062d4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x6c>
	}
	else if (i2c_bus == 2){
 80062b6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d103      	bne.n	80062c6 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x5e>
		this->wireport = &Wire1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a7d      	ldr	r2, [pc, #500]	; (80064b8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x250>)
 80062c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80062c4:	e006      	b.n	80062d4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x6c>
	}
	else if (i2c_bus == 3){
 80062c6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d102      	bne.n	80062d4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x6c>
		this->wireport = &Wire2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a7a      	ldr	r2, [pc, #488]	; (80064bc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x254>)
 80062d2:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f04f 33ff 	mov.w	r3, #4294967295
 80062da:	2206      	movs	r2, #6
 80062dc:	4978      	ldr	r1, [pc, #480]	; (80064c0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 80062de:	f008 fe3a 	bl	800ef56 <HAL_UART_Transmit>


	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f04f 33ff 	mov.w	r3, #4294967295
 80062e8:	221c      	movs	r2, #28
 80062ea:	4976      	ldr	r1, [pc, #472]	; (80064c4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x25c>)
 80062ec:	f008 fe33 	bl	800ef56 <HAL_UART_Transmit>
	while(!this->isConnected()){
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7fe ffe5 	bl	80052c0 <_ZN10IridiumSBD11isConnectedEv>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f083 0301 	eor.w	r3, r3, #1
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d02c      	beq.n	800635c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0xf4>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	2235      	movs	r2, #53	; 0x35
 800630a:	496f      	ldr	r1, [pc, #444]	; (80064c8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x260>)
 800630c:	f008 fe23 	bl	800ef56 <HAL_UART_Transmit>
		HAL_Delay(500);
 8006310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006314:	f002 fc48 	bl	8008ba8 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f04f 33ff 	mov.w	r3, #4294967295
 800631e:	2203      	movs	r2, #3
 8006320:	496a      	ldr	r1, [pc, #424]	; (80064cc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x264>)
 8006322:	f008 fe18 	bl	800ef56 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8006326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800632a:	f002 fc3d 	bl	8008ba8 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f04f 33ff 	mov.w	r3, #4294967295
 8006334:	2203      	movs	r2, #3
 8006336:	4966      	ldr	r1, [pc, #408]	; (80064d0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x268>)
 8006338:	f008 fe0d 	bl	800ef56 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800633c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006340:	f002 fc32 	bl	8008ba8 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f04f 33ff 	mov.w	r3, #4294967295
 800634a:	2207      	movs	r2, #7
 800634c:	4961      	ldr	r1, [pc, #388]	; (80064d4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x26c>)
 800634e:	f008 fe02 	bl	800ef56 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8006352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006356:	f002 fc27 	bl	8008ba8 <HAL_Delay>
	while(!this->isConnected()){
 800635a:	e7c9      	b.n	80062f0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x88>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f04f 33ff 	mov.w	r3, #4294967295
 8006362:	2206      	movs	r2, #6
 8006364:	4956      	ldr	r1, [pc, #344]	; (80064c0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 8006366:	f008 fdf6 	bl	800ef56 <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f04f 33ff 	mov.w	r3, #4294967295
 8006370:	221f      	movs	r2, #31
 8006372:	4959      	ldr	r1, [pc, #356]	; (80064d8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x270>)
 8006374:	f008 fdef 	bl	800ef56 <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 8006378:	2101      	movs	r1, #1
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fe fe84 	bl	8005088 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f04f 33ff 	mov.w	r3, #4294967295
 8006386:	2206      	movs	r2, #6
 8006388:	494d      	ldr	r1, [pc, #308]	; (80064c0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 800638a:	f008 fde4 	bl	800ef56 <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f04f 33ff 	mov.w	r3, #4294967295
 8006394:	222c      	movs	r2, #44	; 0x2c
 8006396:	4951      	ldr	r1, [pc, #324]	; (80064dc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x274>)
 8006398:	f008 fddd 	bl	800ef56 <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7fe feb1 	bl	8005104 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f083 0301 	eor.w	r3, r3, #1
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x150>
		HAL_Delay(333);
 80063ae:	f240 104d 	movw	r0, #333	; 0x14d
 80063b2:	f002 fbf9 	bl	8008ba8 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 80063b6:	e7f1      	b.n	800639c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x134>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f04f 33ff 	mov.w	r3, #4294967295
 80063be:	2206      	movs	r2, #6
 80063c0:	493f      	ldr	r1, [pc, #252]	; (80064c0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 80063c2:	f008 fdc8 	bl	800ef56 <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f04f 33ff 	mov.w	r3, #4294967295
 80063cc:	2217      	movs	r2, #23
 80063ce:	4944      	ldr	r1, [pc, #272]	; (80064e0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x278>)
 80063d0:	f008 fdc1 	bl	800ef56 <HAL_UART_Transmit>
	this->enable9603Npower(true);
 80063d4:	2101      	movs	r1, #1
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fe fec4 	bl	8005164 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	2206      	movs	r2, #6
 80063e4:	4936      	ldr	r1, [pc, #216]	; (80064c0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 80063e6:	f008 fdb6 	bl	800ef56 <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295
 80063f0:	2211      	movs	r2, #17
 80063f2:	493c      	ldr	r1, [pc, #240]	; (80064e4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x27c>)
 80063f4:	f008 fdaf 	bl	800ef56 <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fe fcef 	bl	8004ddc <_ZN10IridiumSBD5beginEv>
 80063fe:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (err != ISBD_SUCCESS)
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d015      	beq.n	8006432 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x1ca>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f04f 33ff 	mov.w	r3, #4294967295
 800640c:	2208      	movs	r2, #8
 800640e:	4936      	ldr	r1, [pc, #216]	; (80064e8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x280>)
 8006410:	f008 fda1 	bl	800ef56 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006418:	f04f 33ff 	mov.w	r3, #4294967295
 800641c:	2204      	movs	r2, #4
 800641e:	f008 fd9a 	bl	800ef56 <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	b2db      	uxtb	r3, r3
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f8db 	bl	80065e4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e035      	b.n	800649e <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x236>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f04f 33ff 	mov.w	r3, #4294967295
 8006438:	2204      	movs	r2, #4
 800643a:	4921      	ldr	r1, [pc, #132]	; (80064c0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 800643c:	f008 fd8b 	bl	800ef56 <HAL_UART_Transmit>

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x284>)
 8006444:	645a      	str	r2, [r3, #68]	; 0x44

	char str[30];
	sprintf(str, "Setting timeout of %i seconds...", timeout);
 8006446:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800644a:	f107 030c 	add.w	r3, r7, #12
 800644e:	4928      	ldr	r1, [pc, #160]	; (80064f0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x288>)
 8006450:	4618      	mov	r0, r3
 8006452:	f016 fc2d 	bl	801ccb0 <siprintf>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8006456:	687c      	ldr	r4, [r7, #4]
 8006458:	f107 030c 	add.w	r3, r7, #12
 800645c:	4618      	mov	r0, r3
 800645e:	f7f9 fed1 	bl	8000204 <strlen>
 8006462:	4603      	mov	r3, r0
 8006464:	b29a      	uxth	r2, r3
 8006466:	f107 010c 	add.w	r1, r7, #12
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	4620      	mov	r0, r4
 8006470:	f008 fd71 	bl	800ef56 <HAL_UART_Transmit>
	adjustATTimeout(timeout);
 8006474:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fe fd11 	bl	8004ea2 <_ZN10IridiumSBD15adjustATTimeoutEi>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f04f 33ff 	mov.w	r3, #4294967295
 8006486:	2204      	movs	r2, #4
 8006488:	490d      	ldr	r1, [pc, #52]	; (80064c0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 800648a:	f008 fd64 	bl	800ef56 <HAL_UART_Transmit>


	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n\r\n", 16, HAL_MAX_DELAY);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f04f 33ff 	mov.w	r3, #4294967295
 8006494:	2210      	movs	r2, #16
 8006496:	4917      	ldr	r1, [pc, #92]	; (80064f4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x28c>)
 8006498:	f008 fd5d 	bl	800ef56 <HAL_UART_Transmit>

	return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3734      	adds	r7, #52	; 0x34
 80064a2:	46bd      	mov	sp, r7
 80064a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80064a8:	b004      	add	sp, #16
 80064aa:	4770      	bx	lr
 80064ac:	08022650 	.word	0x08022650
 80064b0:	08022674 	.word	0x08022674
 80064b4:	200004b0 	.word	0x200004b0
 80064b8:	20000568 	.word	0x20000568
 80064bc:	20000620 	.word	0x20000620
 80064c0:	08021f64 	.word	0x08021f64
 80064c4:	08022688 	.word	0x08022688
 80064c8:	080226a4 	.word	0x080226a4
 80064cc:	080226d8 	.word	0x080226d8
 80064d0:	080226dc 	.word	0x080226dc
 80064d4:	080226e0 	.word	0x080226e0
 80064d8:	080226e8 	.word	0x080226e8
 80064dc:	08022708 	.word	0x08022708
 80064e0:	08022738 	.word	0x08022738
 80064e4:	08022750 	.word	0x08022750
 80064e8:	08022764 	.word	0x08022764
 80064ec:	08022770 	.word	0x08022770
 80064f0:	08022780 	.word	0x08022780
 80064f4:	080227a4 	.word	0x080227a4

080064f8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b08b      	sub	sp, #44	; 0x2c
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f04f 33ff 	mov.w	r3, #4294967295
 8006506:	221d      	movs	r2, #29
 8006508:	492f      	ldr	r1, [pc, #188]	; (80065c8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 800650a:	f008 fd24 	bl	800ef56 <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f04f 33ff 	mov.w	r3, #4294967295
 8006514:	221d      	movs	r2, #29
 8006516:	492d      	ldr	r1, [pc, #180]	; (80065cc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8006518:	f008 fd1d 	bl	800ef56 <HAL_UART_Transmit>
	int err = this->sleep();
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fe fc88 	bl	8004e32 <_ZN10IridiumSBD5sleepEv>
 8006522:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	2b00      	cmp	r3, #0
 8006528:	d017      	beq.n	800655a <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	4927      	ldr	r1, [pc, #156]	; (80065d0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8006532:	4618      	mov	r0, r3
 8006534:	f016 fbbc 	bl	801ccb0 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8006538:	687c      	ldr	r4, [r7, #4]
 800653a:	f107 0308 	add.w	r3, r7, #8
 800653e:	4618      	mov	r0, r3
 8006540:	f7f9 fe60 	bl	8000204 <strlen>
 8006544:	4603      	mov	r3, r0
 8006546:	b29a      	uxth	r2, r3
 8006548:	f107 0108 	add.w	r1, r7, #8
 800654c:	f04f 33ff 	mov.w	r3, #4294967295
 8006550:	4620      	mov	r0, r4
 8006552:	f008 fd00 	bl	800ef56 <HAL_UART_Transmit>
		return false;
 8006556:	2300      	movs	r3, #0
 8006558:	e032      	b.n	80065c0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f04f 33ff 	mov.w	r3, #4294967295
 8006560:	2204      	movs	r2, #4
 8006562:	491c      	ldr	r1, [pc, #112]	; (80065d4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8006564:	f008 fcf7 	bl	800ef56 <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f04f 33ff 	mov.w	r3, #4294967295
 800656e:	2218      	movs	r2, #24
 8006570:	4919      	ldr	r1, [pc, #100]	; (80065d8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8006572:	f008 fcf0 	bl	800ef56 <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8006576:	2100      	movs	r1, #0
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fe fdf3 	bl	8005164 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f04f 33ff 	mov.w	r3, #4294967295
 8006584:	2204      	movs	r2, #4
 8006586:	4913      	ldr	r1, [pc, #76]	; (80065d4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8006588:	f008 fce5 	bl	800ef56 <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f04f 33ff 	mov.w	r3, #4294967295
 8006592:	2227      	movs	r2, #39	; 0x27
 8006594:	4911      	ldr	r1, [pc, #68]	; (80065dc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8006596:	f008 fcde 	bl	800ef56 <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 800659a:	2100      	movs	r1, #0
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7fe fd73 	bl	8005088 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f04f 33ff 	mov.w	r3, #4294967295
 80065a8:	2204      	movs	r2, #4
 80065aa:	490a      	ldr	r1, [pc, #40]	; (80065d4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 80065ac:	f008 fcd3 	bl	800ef56 <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	2220      	movs	r2, #32
 80065b8:	4909      	ldr	r1, [pc, #36]	; (80065e0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 80065ba:	f008 fccc 	bl	800ef56 <HAL_UART_Transmit>
	return true;
 80065be:	2301      	movs	r3, #1
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	372c      	adds	r7, #44	; 0x2c
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd90      	pop	{r4, r7, pc}
 80065c8:	080227b8 	.word	0x080227b8
 80065cc:	080227d8 	.word	0x080227d8
 80065d0:	080227f8 	.word	0x080227f8
 80065d4:	08021f64 	.word	0x08021f64
 80065d8:	08022814 	.word	0x08022814
 80065dc:	08022830 	.word	0x08022830
 80065e0:	08022858 	.word	0x08022858

080065e4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	220c      	movs	r2, #12
 80065f8:	4948      	ldr	r1, [pc, #288]	; (800671c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 80065fa:	f008 fcac 	bl	800ef56 <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 80065fe:	78fb      	ldrb	r3, [r7, #3]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d107      	bne.n	8006614 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f04f 33ff 	mov.w	r3, #4294967295
 800660a:	2211      	movs	r2, #17
 800660c:	4944      	ldr	r1, [pc, #272]	; (8006720 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 800660e:	f008 fca2 	bl	800ef56 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 8006612:	e07f      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d107      	bne.n	800662a <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f04f 33ff 	mov.w	r3, #4294967295
 8006620:	2212      	movs	r2, #18
 8006622:	4940      	ldr	r1, [pc, #256]	; (8006724 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 8006624:	f008 fc97 	bl	800ef56 <HAL_UART_Transmit>
}
 8006628:	e074      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 800662a:	78fb      	ldrb	r3, [r7, #3]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d107      	bne.n	8006640 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f04f 33ff 	mov.w	r3, #4294967295
 8006636:	2212      	movs	r2, #18
 8006638:	493b      	ldr	r1, [pc, #236]	; (8006728 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 800663a:	f008 fc8c 	bl	800ef56 <HAL_UART_Transmit>
}
 800663e:	e069      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	2b04      	cmp	r3, #4
 8006644:	d107      	bne.n	8006656 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f04f 33ff 	mov.w	r3, #4294967295
 800664c:	220d      	movs	r2, #13
 800664e:	4937      	ldr	r1, [pc, #220]	; (800672c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 8006650:	f008 fc81 	bl	800ef56 <HAL_UART_Transmit>
}
 8006654:	e05e      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	2b05      	cmp	r3, #5
 800665a:	d107      	bne.n	800666c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f04f 33ff 	mov.w	r3, #4294967295
 8006662:	2224      	movs	r2, #36	; 0x24
 8006664:	4932      	ldr	r1, [pc, #200]	; (8006730 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 8006666:	f008 fc76 	bl	800ef56 <HAL_UART_Transmit>
}
 800666a:	e053      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	2b06      	cmp	r3, #6
 8006670:	d107      	bne.n	8006682 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f04f 33ff 	mov.w	r3, #4294967295
 8006678:	2215      	movs	r2, #21
 800667a:	492e      	ldr	r1, [pc, #184]	; (8006734 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 800667c:	f008 fc6b 	bl	800ef56 <HAL_UART_Transmit>
}
 8006680:	e048      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	2b07      	cmp	r3, #7
 8006686:	d107      	bne.n	8006698 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f04f 33ff 	mov.w	r3, #4294967295
 800668e:	2218      	movs	r2, #24
 8006690:	4929      	ldr	r1, [pc, #164]	; (8006738 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 8006692:	f008 fc60 	bl	800ef56 <HAL_UART_Transmit>
}
 8006696:	e03d      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	2b08      	cmp	r3, #8
 800669c:	d107      	bne.n	80066ae <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f04f 33ff 	mov.w	r3, #4294967295
 80066a4:	220f      	movs	r2, #15
 80066a6:	4925      	ldr	r1, [pc, #148]	; (800673c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 80066a8:	f008 fc55 	bl	800ef56 <HAL_UART_Transmit>
}
 80066ac:	e032      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	2b09      	cmp	r3, #9
 80066b2:	d107      	bne.n	80066c4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ba:	220d      	movs	r2, #13
 80066bc:	4920      	ldr	r1, [pc, #128]	; (8006740 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 80066be:	f008 fc4a 	bl	800ef56 <HAL_UART_Transmit>
}
 80066c2:	e027      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	2b0a      	cmp	r3, #10
 80066c8:	d107      	bne.n	80066da <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295
 80066d0:	220d      	movs	r2, #13
 80066d2:	491c      	ldr	r1, [pc, #112]	; (8006744 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 80066d4:	f008 fc3f 	bl	800ef56 <HAL_UART_Transmit>
}
 80066d8:	e01c      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	2b0b      	cmp	r3, #11
 80066de:	d107      	bne.n	80066f0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f04f 33ff 	mov.w	r3, #4294967295
 80066e6:	2210      	movs	r2, #16
 80066e8:	4917      	ldr	r1, [pc, #92]	; (8006748 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 80066ea:	f008 fc34 	bl	800ef56 <HAL_UART_Transmit>
}
 80066ee:	e011      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	2b14      	cmp	r3, #20
 80066f4:	d107      	bne.n	8006706 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295
 80066fc:	2216      	movs	r2, #22
 80066fe:	4913      	ldr	r1, [pc, #76]	; (800674c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 8006700:	f008 fc29 	bl	800ef56 <HAL_UART_Transmit>
}
 8006704:	e006      	b.n	8006714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f04f 33ff 	mov.w	r3, #4294967295
 800670c:	220b      	movs	r2, #11
 800670e:	4910      	ldr	r1, [pc, #64]	; (8006750 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 8006710:	f008 fc21 	bl	800ef56 <HAL_UART_Transmit>
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	08022878 	.word	0x08022878
 8006720:	08022884 	.word	0x08022884
 8006724:	08022894 	.word	0x08022894
 8006728:	080228a8 	.word	0x080228a8
 800672c:	080228bc 	.word	0x080228bc
 8006730:	080228c8 	.word	0x080228c8
 8006734:	080228ec 	.word	0x080228ec
 8006738:	08022900 	.word	0x08022900
 800673c:	08022918 	.word	0x08022918
 8006740:	08022928 	.word	0x08022928
 8006744:	08022934 	.word	0x08022934
 8006748:	08022940 	.word	0x08022940
 800674c:	08022950 	.word	0x08022950
 8006750:	08022968 	.word	0x08022968

08006754 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8006754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006756:	b0a1      	sub	sp, #132	; 0x84
 8006758:	af04      	add	r7, sp, #16
 800675a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nRetrieving time\r\n", 20, HAL_MAX_DELAY);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f04f 33ff 	mov.w	r3, #4294967295
 8006762:	2214      	movs	r2, #20
 8006764:	4928      	ldr	r1, [pc, #160]	; (8006808 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb4>)
 8006766:	f008 fbf6 	bl	800ef56 <HAL_UART_Transmit>
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 800676a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fe fbc5 	bl	8004f00 <_ZN10IridiumSBD13getSystemTimeER2tm>
 8006776:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 8006778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d125      	bne.n	80067ca <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x76>
	    {
		char buf[61];
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 800677e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8006780:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8006784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8006786:	1c5e      	adds	r6, r3, #1
 8006788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800678a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800678c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800678e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006790:	f107 0408 	add.w	r4, r7, #8
 8006794:	9003      	str	r0, [sp, #12]
 8006796:	9102      	str	r1, [sp, #8]
 8006798:	9201      	str	r2, [sp, #4]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	4633      	mov	r3, r6
 800679e:	462a      	mov	r2, r5
 80067a0:	491a      	ldr	r1, [pc, #104]	; (800680c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb8>)
 80067a2:	4620      	mov	r0, r4
 80067a4:	f016 fa84 	bl	801ccb0 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) buf, strlen(buf), HAL_MAX_DELAY);
 80067a8:	687c      	ldr	r4, [r7, #4]
 80067aa:	f107 0308 	add.w	r3, r7, #8
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7f9 fd28 	bl	8000204 <strlen>
 80067b4:	4603      	mov	r3, r0
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	f107 0108 	add.w	r1, r7, #8
 80067bc:	f04f 33ff 	mov.w	r3, #4294967295
 80067c0:	4620      	mov	r0, r4
 80067c2:	f008 fbc8 	bl	800ef56 <HAL_UART_Transmit>
		return true;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e019      	b.n	80067fe <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 80067ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067cc:	2b0c      	cmp	r3, #12
 80067ce:	d108      	bne.n	80067e2 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x8e>
	     {
	  	 HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo network detected.\r\n", 28, HAL_MAX_DELAY);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f04f 33ff 	mov.w	r3, #4294967295
 80067d6:	221c      	movs	r2, #28
 80067d8:	490d      	ldr	r1, [pc, #52]	; (8006810 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xbc>)
 80067da:	f008 fbbc 	bl	800ef56 <HAL_UART_Transmit>
	   	 return false;
 80067de:	2300      	movs	r3, #0
 80067e0:	e00d      	b.n	80067fe <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else
	    {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nUnexpected Error ", 21, HAL_MAX_DELAY);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f04f 33ff 	mov.w	r3, #4294967295
 80067e8:	2215      	movs	r2, #21
 80067ea:	490a      	ldr	r1, [pc, #40]	; (8006814 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xc0>)
 80067ec:	f008 fbb3 	bl	800ef56 <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 80067f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff fef4 	bl	80065e4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 80067fc:	2300      	movs	r3, #0
	}
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3774      	adds	r7, #116	; 0x74
 8006802:	46bd      	mov	sp, r7
 8006804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006806:	bf00      	nop
 8006808:	08022a88 	.word	0x08022a88
 800680c:	08022a9c 	.word	0x08022a9c
 8006810:	08022ad4 	.word	0x08022ad4
 8006814:	08022af0 	.word	0x08022af0

08006818 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	71fb      	strb	r3, [r7, #7]
   {
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2205      	movs	r2, #5
 8006832:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2204      	movs	r2, #4
 800684a:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2208      	movs	r2, #8
 8006852:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2210      	movs	r2, #16
 800685a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2220      	movs	r2, #32
 8006862:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2240      	movs	r2, #64	; 0x40
 800686a:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	79fa      	ldrb	r2, [r7, #7]
 8006880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	221e      	movs	r2, #30
 8006888:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	221e      	movs	r2, #30
 8006890:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800689a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	22f0      	movs	r2, #240	; 0xf0
 80068a2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f04f 32ff 	mov.w	r2, #4294967295
 80068ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f04f 32ff 	mov.w	r2, #4294967295
 80068c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f04f 32ff 	mov.w	r2, #4294967295
 80068d8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a0d      	ldr	r2, [pc, #52]	; (8006934 <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8006900:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a0b      	ldr	r2, [pc, #44]	; (8006934 <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8006908:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f04f 32ff 	mov.w	r2, #4294967295
 8006912:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	080230ac 	.word	0x080230ac

08006938 <MRT_Static_Iridium_Constructor>:
#endif

static IridiumSBD *E_T = NULL;


void MRT_Static_Iridium_Constructor(){
 8006938:	b598      	push	{r3, r4, r7, lr}
 800693a:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 800693c:	4b08      	ldr	r3, [pc, #32]	; (8006960 <MRT_Static_Iridium_Constructor+0x28>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8006944:	20e4      	movs	r0, #228	; 0xe4
 8006946:	f013 fc53 	bl	801a1f0 <_Znwj>
 800694a:	4603      	mov	r3, r0
 800694c:	461c      	mov	r4, r3
 800694e:	2263      	movs	r2, #99	; 0x63
 8006950:	4904      	ldr	r1, [pc, #16]	; (8006964 <MRT_Static_Iridium_Constructor+0x2c>)
 8006952:	4620      	mov	r0, r4
 8006954:	f7ff ff60 	bl	8006818 <_ZN10IridiumSBDC1ER7TwoWireh>
 8006958:	4b01      	ldr	r3, [pc, #4]	; (8006960 <MRT_Static_Iridium_Constructor+0x28>)
 800695a:	601c      	str	r4, [r3, #0]
	}
}
 800695c:	bf00      	nop
 800695e:	bd98      	pop	{r3, r4, r7, pc}
 8006960:	200004ac 	.word	0x200004ac
 8006964:	200004b0 	.word	0x200004b0

08006968 <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <MRT_Static_Iridium_Destructor+0x1c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 8006974:	4b03      	ldr	r3, [pc, #12]	; (8006984 <MRT_Static_Iridium_Destructor+0x1c>)
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]
	}
}
 800697a:	bf00      	nop
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	200004ac 	.word	0x200004ac

08006988 <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart, uint8_t timeout, uint8_t i2c_bus){
 8006988:	b084      	sub	sp, #16
 800698a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698c:	b091      	sub	sp, #68	; 0x44
 800698e:	af10      	add	r7, sp, #64	; 0x40
 8006990:	f107 0418 	add.w	r4, r7, #24
 8006994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 8006998:	f7ff ffce 	bl	8006938 <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart,timeout, i2c_bus);
 800699c:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <MRT_Static_Iridium_Setup+0x5c>)
 800699e:	681e      	ldr	r6, [r3, #0]
 80069a0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80069a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80069a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80069aa:	930e      	str	r3, [sp, #56]	; 0x38
 80069ac:	466d      	mov	r5, sp
 80069ae:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80069b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80069c6:	f107 0318 	add.w	r3, r7, #24
 80069ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7ff fc4b 	bl	8006268 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh>
 80069d2:	4603      	mov	r3, r0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3704      	adds	r7, #4
 80069d8:	46bd      	mov	sp, r7
 80069da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80069de:	b004      	add	sp, #16
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	200004ac 	.word	0x200004ac

080069e8 <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 80069ee:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <MRT_Static_Iridium_Shutdown+0x2c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fd80 	bl	80064f8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bf14      	ite	ne
 80069fe:	2301      	movne	r3, #1
 8006a00:	2300      	moveq	r3, #0
 8006a02:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 8006a04:	f7ff ffb0 	bl	8006968 <MRT_Static_Iridium_Destructor>
	return b;
 8006a08:	79fb      	ldrb	r3, [r7, #7]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	200004ac 	.word	0x200004ac

08006a18 <MRT_Static_Iridium_getTime>:
bool MRT_Static_Iridium_NetworkAvailability(){
	return E_T->MRT_Iridium_NetworkAvailability();
}


bool MRT_Static_Iridium_getTime(void){
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <MRT_Static_Iridium_getTime+0x20>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff fe97 	bl	8006754 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bf14      	ite	ne
 8006a2c:	2301      	movne	r3, #1
 8006a2e:	2300      	moveq	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	200004ac 	.word	0x200004ac

08006a3c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8006a3c:	b590      	push	{r4, r7, lr}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <_ZN5Print5writeEPKc+0x14>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	e00d      	b.n	8006a6c <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3304      	adds	r3, #4
 8006a56:	681c      	ldr	r4, [r3, #0]
 8006a58:	6838      	ldr	r0, [r7, #0]
 8006a5a:	f7f9 fbd3 	bl	8000204 <strlen>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	461a      	mov	r2, r3
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	47a0      	blx	r4
 8006a68:	4603      	mov	r3, r0
 8006a6a:	bf00      	nop
    }
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd90      	pop	{r4, r7, pc}

08006a74 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
  while (size--) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	1e5a      	subs	r2, r3, #1
 8006a88:	607a      	str	r2, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	bf14      	ite	ne
 8006a8e:	2301      	movne	r3, #1
 8006a90:	2300      	moveq	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	1c59      	adds	r1, r3, #1
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	4790      	blx	r2
 8006aac:	4602      	mov	r2, r0
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
  while (size--) {
 8006ab4:	e7e6      	b.n	8006a84 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8006ab6:	697b      	ldr	r3, [r7, #20]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f805 	bl	8006adc <_ZN5Print5printEPKc>
 8006ad2:	4603      	mov	r3, r0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  return write(str);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff ffa7 	bl	8006a3c <_ZN5Print5writeEPKc>
 8006aee:	4603      	mov	r3, r0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	4a06      	ldr	r2, [pc, #24]	; (8006b1c <_ZN5PrintC1Ev+0x24>)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	605a      	str	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	080230c0 	.word	0x080230c0

08006b20 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff ffe4 	bl	8006af8 <_ZN5PrintC1Ev>
 8006b30:	4a05      	ldr	r2, [pc, #20]	; (8006b48 <_ZN6StreamC1Ev+0x28>)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b3c:	609a      	str	r2, [r3, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	080230f0 	.word	0x080230f0

08006b4c <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff ffe1 	bl	8006b20 <_ZN6StreamC1Ev>
 8006b5e:	4a16      	ldr	r2, [pc, #88]	; (8006bb8 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3390      	adds	r3, #144	; 0x90
 8006b6e:	2220      	movs	r2, #32
 8006b70:	2100      	movs	r1, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	f014 fda0 	bl	801b6b8 <memset>
  rxBufferIndex = 0;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	080230d0 	.word	0x080230d0

08006bbc <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	70fb      	strb	r3, [r7, #3]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70bb      	strb	r3, [r7, #2]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fc24 	bl	8007424 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8006bdc:	78bb      	ldrb	r3, [r7, #2]
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d901      	bls.n	8006be6 <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8006be2:	2320      	movs	r3, #32
 8006be4:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	b2d9      	uxtb	r1, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8006bf2:	78b8      	ldrb	r0, [r7, #2]
 8006bf4:	787b      	ldrb	r3, [r7, #1]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f9cf 	bl	8006f9e <_ZN7TwoWire15i2c_master_readEhPchh>
 8006c00:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da02      	bge.n	8006c0e <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	73fb      	strb	r3, [r7, #15]
 8006c0c:	e001      	b.n	8006c12 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	7bfa      	ldrb	r2, [r7, #15]
 8006c1e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fbcc 	bl	80073c0 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	70fb      	strb	r3, [r7, #3]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8006c42:	78ba      	ldrb	r2, [r7, #2]
 8006c44:	78f9      	ldrb	r1, [r7, #3]
 8006c46:	2301      	movs	r3, #1
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ffb7 	bl	8006bbc <_ZN7TwoWire11requestFromEhhh>
 8006c4e:	4603      	mov	r3, r0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	78fa      	ldrb	r2, [r7, #3]
 8006c70:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b086      	sub	sp, #24
 8006c92:	af02      	add	r7, sp, #8
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fbc2 	bl	8007424 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7c1b      	ldrb	r3, [r3, #16]
 8006ca4:	0059      	lsls	r1, r3, #1
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f103 0211 	add.w	r2, r3, #17
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	4603      	mov	r3, r0
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fa00 	bl	80070c0 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fb6f 	bl	80073c0 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff ffc9 	bl	8006c8e <_ZN7TwoWire15endTransmissionEh>
 8006cfc:	4603      	mov	r3, r0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01d      	beq.n	8006d58 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d22:	2b1f      	cmp	r3, #31
 8006d24:	d901      	bls.n	8006d2a <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	e028      	b.n	8006d7c <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d30:	4619      	mov	r1, r3
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	440b      	add	r3, r1
 8006d38:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d40:	3301      	adds	r3, #1
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006d56:	e010      	b.n	8006d7a <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fb63 	bl	8007424 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8006d5e:	1cfb      	adds	r3, r7, #3
 8006d60:	2201      	movs	r2, #1
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fa95 	bl	8007294 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fb28 	bl	80073c0 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	333c      	adds	r3, #60	; 0x3c
 8006d74:	4618      	mov	r0, r3
 8006d76:	f003 fab9 	bl	800a2ec <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8006d7a:	2301      	movs	r3, #1
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d013      	beq.n	8006dc2 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d21e      	bcs.n	8006de4 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	440a      	add	r2, r1
 8006db2:	7812      	ldrb	r2, [r2, #0]
 8006db4:	4611      	mov	r1, r2
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	e7ed      	b.n	8006d9e <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 fb2e 	bl	8007424 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fa60 	bl	8007294 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 faf3 	bl	80073c0 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	333c      	adds	r3, #60	; 0x3c
 8006dde:	4618      	mov	r0, r3
 8006de0:	f003 fa84 	bl	800a2ec <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8006de4:	687b      	ldr	r3, [r7, #4]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	1ad3      	subs	r3, r2, r3
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e22:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	429a      	cmp	r2, r3
 8006e36:	bf34      	ite	cc
 8006e38:	2301      	movcc	r3, #1
 8006e3a:	2300      	movcs	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d012      	beq.n	8006e68 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006e54:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	3301      	adds	r3, #1
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8006e68:	68fb      	ldr	r3, [r7, #12]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e82:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	429a      	cmp	r2, r3
 8006e96:	bf34      	ite	cc
 8006e98:	2301      	movcc	r3, #1
 8006e9a:	2300      	movcs	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d009      	beq.n	8006eb6 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006eb4:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006eee:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8006ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ef4:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f02:	bf0c      	ite	eq
 8006f04:	2301      	moveq	r3, #1
 8006f06:	2300      	movne	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00b      	beq.n	8006f26 <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1e5a      	subs	r2, r3, #1
 8006f12:	60fa      	str	r2, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0e9      	beq.n	8006ef6 <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e021      	b.n	8006f6a <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8006f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f36:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	bf14      	ite	ne
 8006f46:	2301      	movne	r3, #1
 8006f48:	2300      	moveq	r3, #0
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	1e5a      	subs	r2, r3, #1
 8006f54:	60fa      	str	r2, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bf0c      	ite	eq
 8006f5a:	2301      	moveq	r3, #1
 8006f5c:	2300      	movne	r3, #0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0e9      	beq.n	8006f38 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f82:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	601a      	str	r2, [r3, #0]

    return 0;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b08a      	sub	sp, #40	; 0x28
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	460b      	mov	r3, r1
 8006fac:	72fb      	strb	r3, [r7, #11]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb6:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff ff8d 	bl	8006ed8 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8006fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	bf14      	ite	ne
 8006fd2:	2301      	movne	r3, #1
 8006fd4:	2300      	moveq	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d008      	beq.n	8006fee <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1ed      	bne.n	8006fc4 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8006fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fec:	e064      	b.n	80070b8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	f043 0301 	orr.w	r3, r3, #1
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8006ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b02      	cmp	r3, #2
 800700e:	bf14      	ite	ne
 8007010:	2301      	movne	r3, #1
 8007012:	2300      	moveq	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d008      	beq.n	800702c <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	3b01      	subs	r3, #1
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1ed      	bne.n	8007002 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8007026:	f04f 33ff 	mov.w	r3, #4294967295
 800702a:	e045      	b.n	80070b8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800702c:	2300      	movs	r3, #0
 800702e:	613b      	str	r3, [r7, #16]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8007042:	2300      	movs	r3, #0
 8007044:	623b      	str	r3, [r7, #32]
 8007046:	7abb      	ldrb	r3, [r7, #10]
 8007048:	3b01      	subs	r3, #1
 800704a:	6a3a      	ldr	r2, [r7, #32]
 800704c:	429a      	cmp	r2, r3
 800704e:	da17      	bge.n	8007080 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8007050:	f107 0314 	add.w	r3, r7, #20
 8007054:	2200      	movs	r2, #0
 8007056:	4619      	mov	r1, r3
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f8a4 	bl	80071a6 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800705e:	61b8      	str	r0, [r7, #24]
        if(ret)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8007066:	f04f 33ff 	mov.w	r3, #4294967295
 800706a:	e025      	b.n	80070b8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 800706c:	6979      	ldr	r1, [r7, #20]
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4413      	add	r3, r2
 8007074:	b2ca      	uxtb	r2, r1
 8007076:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	3301      	adds	r3, #1
 800707c:	623b      	str	r3, [r7, #32]
 800707e:	e7e2      	b.n	8007046 <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8007080:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7ff ff74 	bl	8006f76 <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 800708e:	f107 0314 	add.w	r3, r7, #20
 8007092:	2201      	movs	r2, #1
 8007094:	4619      	mov	r1, r3
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f885 	bl	80071a6 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800709c:	61b8      	str	r0, [r7, #24]
    if(ret)
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 80070a4:	f04f 33ff 	mov.w	r3, #4294967295
 80070a8:	e006      	b.n	80070b8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 80070aa:	6979      	ldr	r1, [r7, #20]
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	4413      	add	r3, r2
 80070b2:	b2ca      	uxtb	r2, r1
 80070b4:	701a      	strb	r2, [r3, #0]

    return length;
 80070b6:	7abb      	ldrb	r3, [r7, #10]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3728      	adds	r7, #40	; 0x28
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d2:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff feff 	bl	8006ed8 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80070da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070de:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	bf14      	ite	ne
 80070ee:	2301      	movne	r3, #1
 80070f0:	2300      	moveq	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d007      	beq.n	8007108 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1ed      	bne.n	80070e0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 8007104:	2304      	movs	r3, #4
 8007106:	e04a      	b.n	800719e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8007114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007118:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b02      	cmp	r3, #2
 8007126:	bf14      	ite	ne
 8007128:	2301      	movne	r3, #1
 800712a:	2300      	moveq	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	3b01      	subs	r3, #1
 8007136:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1ed      	bne.n	800711a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 800713e:	2302      	movs	r3, #2
 8007140:	e02d      	b.n	800719e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8007142:	2300      	movs	r3, #0
 8007144:	613b      	str	r3, [r7, #16]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	613b      	str	r3, [r7, #16]
 8007156:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8007158:	2300      	movs	r3, #0
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	da15      	bge.n	8007190 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	4413      	add	r3, r2
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	4619      	mov	r1, r3
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f85a 	bl	8007228 <_ZN7TwoWire21i2c_master_byte_writeEi>
 8007174:	4603      	mov	r3, r0
 8007176:	2b01      	cmp	r3, #1
 8007178:	bf14      	ite	ne
 800717a:	2301      	movne	r3, #1
 800717c:	2300      	moveq	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8007184:	2303      	movs	r3, #3
 8007186:	e00a      	b.n	800719e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	3301      	adds	r3, #1
 800718c:	61bb      	str	r3, [r7, #24]
 800718e:	e7e5      	b.n	800715c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7ff feed 	bl	8006f76 <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3720      	adds	r7, #32
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b087      	sub	sp, #28
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b6:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d006      	beq.n	80071cc <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	e005      	b.n	80071d8 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80071d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071dc:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	bf14      	ite	ne
 80071ec:	2301      	movne	r3, #1
 80071ee:	2300      	moveq	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00c      	beq.n	8007210 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	1e5a      	subs	r2, r3, #1
 80071fa:	617a      	str	r2, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bf0c      	ite	eq
 8007200:	2301      	moveq	r3, #1
 8007202:	2300      	movne	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0e9      	beq.n	80071de <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 800720a:	f04f 33ff 	mov.w	r3, #4294967295
 800720e:	e005      	b.n	800721c <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	461a      	mov	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	601a      	str	r2, [r3, #0]

    return 0;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007236:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	461a      	mov	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8007242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007246:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d008      	beq.n	8007268 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8007260:	2b04      	cmp	r3, #4
 8007262:	d001      	beq.n	8007268 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8007264:	2301      	movs	r3, #1
 8007266:	e000      	b.n	800726a <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8007268:	2300      	movs	r3, #0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1e5a      	subs	r2, r3, #1
 8007272:	60fa      	str	r2, [r7, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	bf0c      	ite	eq
 8007278:	2301      	moveq	r3, #1
 800727a:	2300      	movne	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0e2      	beq.n	8007248 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8007282:	2300      	movs	r3, #0
 8007284:	e000      	b.n	8007288 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8007286:	2301      	movs	r3, #1
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8007294:	b480      	push	{r7}
 8007296:	b089      	sub	sp, #36	; 0x24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a8:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dd41      	ble.n	8007334 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80072b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072b4:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c0:	2b80      	cmp	r3, #128	; 0x80
 80072c2:	bf14      	ite	ne
 80072c4:	2301      	movne	r3, #1
 80072c6:	2300      	moveq	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d008      	beq.n	80072e0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1ed      	bne.n	80072b6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 80072da:	f04f 33ff 	mov.w	r3, #4294967295
 80072de:	e068      	b.n	80073b2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	60ba      	str	r2, [r7, #8]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	611a      	str	r2, [r3, #16]
        length--;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	607b      	str	r3, [r7, #4]
        size++;
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	3301      	adds	r3, #1
 80072f8:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b04      	cmp	r3, #4
 8007306:	d104      	bne.n	8007312 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8007312:	2300      	movs	r3, #0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0c8      	beq.n	80072aa <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	60ba      	str	r2, [r7, #8]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	611a      	str	r2, [r3, #16]
            length--;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3b01      	subs	r3, #1
 800732a:	607b      	str	r3, [r7, #4]
            size++;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	3301      	adds	r3, #1
 8007330:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8007332:	e7ba      	b.n	80072aa <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8007334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007338:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007348:	bf14      	ite	ne
 800734a:	2301      	movne	r3, #1
 800734c:	2300      	moveq	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d008      	beq.n	8007366 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	3b01      	subs	r3, #1
 8007358:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1ec      	bne.n	800733a <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8007360:	f04f 33ff 	mov.w	r3, #4294967295
 8007364:	e025      	b.n	80073b2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800736e:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8007370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007374:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b02      	cmp	r3, #2
 8007382:	bf0c      	ite	eq
 8007384:	2301      	moveq	r3, #1
 8007386:	2300      	movne	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d008      	beq.n	80073a0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	3b01      	subs	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1ed      	bne.n	8007376 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 800739a:	f04f 33ff 	mov.w	r3, #4294967295
 800739e:	e008      	b.n	80073b2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80073b0:	69bb      	ldr	r3, [r7, #24]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3724      	adds	r7, #36	; 0x24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073cc:	4a12      	ldr	r2, [pc, #72]	; (8007418 <_ZN7TwoWire15enableInterruptEv+0x58>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d106      	bne.n	80073e0 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80073d2:	2049      	movs	r0, #73	; 0x49
 80073d4:	f002 f914 	bl	8009600 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80073d8:	2048      	movs	r0, #72	; 0x48
 80073da:	f002 f911 	bl	8009600 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80073de:	e016      	b.n	800740e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e4:	4a0d      	ldr	r2, [pc, #52]	; (800741c <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d106      	bne.n	80073f8 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80073ea:	2022      	movs	r0, #34	; 0x22
 80073ec:	f002 f908 	bl	8009600 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80073f0:	2021      	movs	r0, #33	; 0x21
 80073f2:	f002 f905 	bl	8009600 <HAL_NVIC_EnableIRQ>
}
 80073f6:	e00a      	b.n	800740e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fc:	4a08      	ldr	r2, [pc, #32]	; (8007420 <_ZN7TwoWire15enableInterruptEv+0x60>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d105      	bne.n	800740e <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007402:	2020      	movs	r0, #32
 8007404:	f002 f8fc 	bl	8009600 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007408:	201f      	movs	r0, #31
 800740a:	f002 f8f9 	bl	8009600 <HAL_NVIC_EnableIRQ>
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	40005c00 	.word	0x40005c00
 800741c:	40005800 	.word	0x40005800
 8007420:	40005400 	.word	0x40005400

08007424 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007430:	4a12      	ldr	r2, [pc, #72]	; (800747c <_ZN7TwoWire16disableInterruptEv+0x58>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d106      	bne.n	8007444 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8007436:	2049      	movs	r0, #73	; 0x49
 8007438:	f002 f8f0 	bl	800961c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800743c:	2048      	movs	r0, #72	; 0x48
 800743e:	f002 f8ed 	bl	800961c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8007442:	e016      	b.n	8007472 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007448:	4a0d      	ldr	r2, [pc, #52]	; (8007480 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d106      	bne.n	800745c <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800744e:	2022      	movs	r0, #34	; 0x22
 8007450:	f002 f8e4 	bl	800961c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8007454:	2021      	movs	r0, #33	; 0x21
 8007456:	f002 f8e1 	bl	800961c <HAL_NVIC_DisableIRQ>
}
 800745a:	e00a      	b.n	8007472 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007460:	4a08      	ldr	r2, [pc, #32]	; (8007484 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d105      	bne.n	8007472 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8007466:	2020      	movs	r0, #32
 8007468:	f002 f8d8 	bl	800961c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800746c:	201f      	movs	r0, #31
 800746e:	f002 f8d5 	bl	800961c <HAL_NVIC_DisableIRQ>
}
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40005c00 	.word	0x40005c00
 8007480:	40005800 	.word	0x40005800
 8007484:	40005400 	.word	0x40005400

08007488 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d110      	bne.n	80074ba <_Z41__static_initialization_and_destruction_0ii+0x32>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800749e:	4293      	cmp	r3, r2
 80074a0:	d10b      	bne.n	80074ba <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80074a2:	4908      	ldr	r1, [pc, #32]	; (80074c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80074a4:	4808      	ldr	r0, [pc, #32]	; (80074c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80074a6:	f7ff fb51 	bl	8006b4c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80074aa:	4908      	ldr	r1, [pc, #32]	; (80074cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80074ac:	4808      	ldr	r0, [pc, #32]	; (80074d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80074ae:	f7ff fb4d 	bl	8006b4c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80074b2:	4908      	ldr	r1, [pc, #32]	; (80074d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80074b4:	4808      	ldr	r0, [pc, #32]	; (80074d8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80074b6:	f7ff fb49 	bl	8006b4c <_ZN7TwoWireC1EP11I2C_TypeDef>
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	40005400 	.word	0x40005400
 80074c8:	200004b0 	.word	0x200004b0
 80074cc:	40005800 	.word	0x40005800
 80074d0:	20000568 	.word	0x20000568
 80074d4:	40005c00 	.word	0x40005c00
 80074d8:	20000620 	.word	0x20000620

080074dc <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
 80074e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80074e4:	2001      	movs	r0, #1
 80074e6:	f7ff ffcf 	bl	8007488 <_Z41__static_initialization_and_destruction_0ii>
 80074ea:	bd80      	pop	{r7, pc}

080074ec <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	607a      	str	r2, [r7, #4]
 80074f6:	461a      	mov	r2, r3
 80074f8:	460b      	mov	r3, r1
 80074fa:	72fb      	strb	r3, [r7, #11]
 80074fc:	4613      	mov	r3, r2
 80074fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685c      	ldr	r4, [r3, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6898      	ldr	r0, [r3, #8]
 8007508:	893b      	ldrh	r3, [r7, #8]
 800750a:	7af9      	ldrb	r1, [r7, #11]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	47a0      	blx	r4
 8007510:	6178      	str	r0, [r7, #20]

  return ret;
 8007512:	697b      	ldr	r3, [r7, #20]
}
 8007514:	4618      	mov	r0, r3
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd90      	pop	{r4, r7, pc}

0800751c <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800751c:	b590      	push	{r4, r7, lr}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	461a      	mov	r2, r3
 8007528:	460b      	mov	r3, r1
 800752a:	72fb      	strb	r3, [r7, #11]
 800752c:	4613      	mov	r3, r2
 800752e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681c      	ldr	r4, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6898      	ldr	r0, [r3, #8]
 8007538:	893b      	ldrh	r3, [r7, #8]
 800753a:	7af9      	ldrb	r1, [r7, #11]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	47a0      	blx	r4
 8007540:	6178      	str	r0, [r7, #20]

  return ret;
 8007542:	697b      	ldr	r3, [r7, #20]
}
 8007544:	4618      	mov	r0, r3
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	bd90      	pop	{r4, r7, pc}

0800754c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007578 <lps22hh_from_lsb_to_hpa+0x2c>
 8007562:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007566:	eef0 7a66 	vmov.f32	s15, s13
}
 800756a:	eeb0 0a67 	vmov.f32	s0, s15
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	49800000 	.word	0x49800000

0800757c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8007586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007592:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80075ac <lps22hh_from_lsb_to_celsius+0x30>
 8007596:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800759a:	eef0 7a66 	vmov.f32	s15, s13
}
 800759e:	eeb0 0a67 	vmov.f32	s0, s15
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	42c80000 	.word	0x42c80000

080075b0 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80075bc:	f107 0208 	add.w	r2, r7, #8
 80075c0:	2301      	movs	r3, #1
 80075c2:	2110      	movs	r1, #16
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff ff91 	bl	80074ec <lps22hh_read_reg>
 80075ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10f      	bne.n	80075f2 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	7a3b      	ldrb	r3, [r7, #8]
 80075dc:	f362 0341 	bfi	r3, r2, #1, #1
 80075e0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80075e2:	f107 0208 	add.w	r2, r7, #8
 80075e6:	2301      	movs	r3, #1
 80075e8:	2110      	movs	r1, #16
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff ff96 	bl	800751c <lps22hh_write_reg>
 80075f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80075f2:	68fb      	ldr	r3, [r7, #12]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007608:	f107 0210 	add.w	r2, r7, #16
 800760c:	2301      	movs	r3, #1
 800760e:	2110      	movs	r1, #16
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff ff6b 	bl	80074ec <lps22hh_read_reg>
 8007616:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d107      	bne.n	800762e <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800761e:	f107 020c 	add.w	r2, r7, #12
 8007622:	2301      	movs	r3, #1
 8007624:	2111      	movs	r1, #17
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff ff60 	bl	80074ec <lps22hh_read_reg>
 800762c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10f      	bne.n	8007654 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	b2da      	uxtb	r2, r3
 800763c:	7c3b      	ldrb	r3, [r7, #16]
 800763e:	f362 1306 	bfi	r3, r2, #4, #3
 8007642:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007644:	f107 0210 	add.w	r2, r7, #16
 8007648:	2301      	movs	r3, #1
 800764a:	2110      	movs	r1, #16
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7ff ff65 	bl	800751c <lps22hh_write_reg>
 8007652:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d119      	bne.n	800768e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800765a:	78fb      	ldrb	r3, [r7, #3]
 800765c:	091b      	lsrs	r3, r3, #4
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	b2da      	uxtb	r2, r3
 8007664:	7b3b      	ldrb	r3, [r7, #12]
 8007666:	f362 0341 	bfi	r3, r2, #1, #1
 800766a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	08db      	lsrs	r3, r3, #3
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	b2da      	uxtb	r2, r3
 8007676:	7b3b      	ldrb	r3, [r7, #12]
 8007678:	f362 0300 	bfi	r3, r2, #0, #1
 800767c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800767e:	f107 020c 	add.w	r2, r7, #12
 8007682:	2301      	movs	r3, #1
 8007684:	2111      	movs	r1, #17
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff ff48 	bl	800751c <lps22hh_write_reg>
 800768c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800768e:	697b      	ldr	r3, [r7, #20]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 80076a2:	f107 0208 	add.w	r2, r7, #8
 80076a6:	2301      	movs	r3, #1
 80076a8:	2127      	movs	r1, #39	; 0x27
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff ff1e 	bl	80074ec <lps22hh_read_reg>
 80076b0:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 80076b2:	7a3b      	ldrb	r3, [r7, #8]
 80076b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	701a      	strb	r2, [r3, #0]

  return ret;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80076d4:	f107 0208 	add.w	r2, r7, #8
 80076d8:	2303      	movs	r3, #3
 80076da:	2128      	movs	r1, #40	; 0x28
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff ff05 	bl	80074ec <lps22hh_read_reg>
 80076e2:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80076e4:	7abb      	ldrb	r3, [r7, #10]
 80076e6:	461a      	mov	r2, r3
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	7a7a      	ldrb	r2, [r7, #9]
 80076f4:	441a      	add	r2, r3
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	7a3a      	ldrb	r2, [r7, #8]
 8007702:	441a      	add	r2, r3
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	021a      	lsls	r2, r3, #8
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	601a      	str	r2, [r3, #0]

  return ret;
 8007712:	68fb      	ldr	r3, [r7, #12]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8007726:	f107 0208 	add.w	r2, r7, #8
 800772a:	2302      	movs	r3, #2
 800772c:	212b      	movs	r1, #43	; 0x2b
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff fedc 	bl	80074ec <lps22hh_read_reg>
 8007734:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8007736:	7a7b      	ldrb	r3, [r7, #9]
 8007738:	b21a      	sxth	r2, r3
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007744:	b29b      	uxth	r3, r3
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	b29a      	uxth	r2, r3
 800774a:	7a3b      	ldrb	r3, [r7, #8]
 800774c:	b29b      	uxth	r3, r3
 800774e:	4413      	add	r3, r2
 8007750:	b29b      	uxth	r3, r3
 8007752:	b21a      	sxth	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	801a      	strh	r2, [r3, #0]

  return ret;
 8007758:	68fb      	ldr	r3, [r7, #12]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800776c:	2301      	movs	r3, #1
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	210f      	movs	r1, #15
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff feba 	bl	80074ec <lps22hh_read_reg>
 8007778:	60f8      	str	r0, [r7, #12]

  return ret;
 800777a:	68fb      	ldr	r3, [r7, #12]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8007790:	f107 0208 	add.w	r2, r7, #8
 8007794:	2301      	movs	r3, #1
 8007796:	2111      	movs	r1, #17
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fea7 	bl	80074ec <lps22hh_read_reg>
 800779e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10f      	bne.n	80077c6 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	7a3b      	ldrb	r3, [r7, #8]
 80077b0:	f362 0382 	bfi	r3, r2, #2, #1
 80077b4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80077b6:	f107 0208 	add.w	r2, r7, #8
 80077ba:	2301      	movs	r3, #1
 80077bc:	2111      	movs	r1, #17
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff feac 	bl	800751c <lps22hh_write_reg>
 80077c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80077c6:	68fb      	ldr	r3, [r7, #12]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80077da:	f107 0208 	add.w	r2, r7, #8
 80077de:	2301      	movs	r3, #1
 80077e0:	2111      	movs	r1, #17
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fe82 	bl	80074ec <lps22hh_read_reg>
 80077e8:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 80077ea:	7a3b      	ldrb	r3, [r7, #8]
 80077ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	701a      	strb	r2, [r3, #0]

  return ret;
 80077f8:	68fb      	ldr	r3, [r7, #12]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007802:	b590      	push	{r4, r7, lr}
 8007804:	b087      	sub	sp, #28
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	461a      	mov	r2, r3
 800780e:	460b      	mov	r3, r1
 8007810:	72fb      	strb	r3, [r7, #11]
 8007812:	4613      	mov	r3, r2
 8007814:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685c      	ldr	r4, [r3, #4]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6898      	ldr	r0, [r3, #8]
 800781e:	893b      	ldrh	r3, [r7, #8]
 8007820:	7af9      	ldrb	r1, [r7, #11]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	47a0      	blx	r4
 8007826:	6178      	str	r0, [r7, #20]

  return ret;
 8007828:	697b      	ldr	r3, [r7, #20]
}
 800782a:	4618      	mov	r0, r3
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	bd90      	pop	{r4, r7, pc}

08007832 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007832:	b590      	push	{r4, r7, lr}
 8007834:	b087      	sub	sp, #28
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	461a      	mov	r2, r3
 800783e:	460b      	mov	r3, r1
 8007840:	72fb      	strb	r3, [r7, #11]
 8007842:	4613      	mov	r3, r2
 8007844:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681c      	ldr	r4, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6898      	ldr	r0, [r3, #8]
 800784e:	893b      	ldrh	r3, [r7, #8]
 8007850:	7af9      	ldrb	r1, [r7, #11]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	47a0      	blx	r4
 8007856:	6178      	str	r0, [r7, #20]

  return ret;
 8007858:	697b      	ldr	r3, [r7, #20]
}
 800785a:	4618      	mov	r0, r3
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd90      	pop	{r4, r7, pc}
	...

08007864 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800786e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800787a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007890 <lsm6dsr_from_fs2g_to_mg+0x2c>
 800787e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007882:	eeb0 0a67 	vmov.f32	s0, s15
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	3d79db23 	.word	0x3d79db23

08007894 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800789e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078aa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80078c0 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80078ae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80078b2:	eeb0 0a67 	vmov.f32	s0, s15
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	428c0000 	.word	0x428c0000

080078c4 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80078ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078da:	eddf 6a07 	vldr	s13, [pc, #28]	; 80078f8 <lsm6dsr_from_lsb_to_celsius+0x34>
 80078de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078e2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80078e6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80078ea:	eeb0 0a67 	vmov.f32	s0, s15
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	43800000 	.word	0x43800000

080078fc <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007908:	f107 0208 	add.w	r2, r7, #8
 800790c:	2301      	movs	r3, #1
 800790e:	2110      	movs	r1, #16
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff ff76 	bl	8007802 <lsm6dsr_read_reg>
 8007916:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10f      	bne.n	800793e <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	b2da      	uxtb	r2, r3
 8007926:	7a3b      	ldrb	r3, [r7, #8]
 8007928:	f362 0383 	bfi	r3, r2, #2, #2
 800792c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800792e:	f107 0208 	add.w	r2, r7, #8
 8007932:	2301      	movs	r3, #1
 8007934:	2110      	movs	r1, #16
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff ff7b 	bl	8007832 <lsm6dsr_write_reg>
 800793c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800793e:	68fb      	ldr	r3, [r7, #12]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8007958:	f107 030c 	add.w	r3, r7, #12
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fbb0 	bl	80080c4 <lsm6dsr_fsm_enable_get>
 8007964:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f040 80c4 	bne.w	8007af6 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800796e:	7b3b      	ldrb	r3, [r7, #12]
 8007970:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007974:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007976:	7b3b      	ldrb	r3, [r7, #12]
 8007978:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800797c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800797e:	4313      	orrs	r3, r2
 8007980:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007982:	7b3b      	ldrb	r3, [r7, #12]
 8007984:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007988:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800798a:	4313      	orrs	r3, r2
 800798c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800798e:	7b3b      	ldrb	r3, [r7, #12]
 8007990:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007994:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007996:	4313      	orrs	r3, r2
 8007998:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800799a:	7b3b      	ldrb	r3, [r7, #12]
 800799c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80079a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80079a2:	4313      	orrs	r3, r2
 80079a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80079a6:	7b3b      	ldrb	r3, [r7, #12]
 80079a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80079ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80079ae:	4313      	orrs	r3, r2
 80079b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80079b2:	7b3b      	ldrb	r3, [r7, #12]
 80079b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80079b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80079ba:	4313      	orrs	r3, r2
 80079bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80079be:	7b3b      	ldrb	r3, [r7, #12]
 80079c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80079c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80079c6:	4313      	orrs	r3, r2
 80079c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80079ca:	7b7b      	ldrb	r3, [r7, #13]
 80079cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80079d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80079d2:	4313      	orrs	r3, r2
 80079d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80079d6:	7b7b      	ldrb	r3, [r7, #13]
 80079d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80079dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80079de:	4313      	orrs	r3, r2
 80079e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80079e2:	7b7b      	ldrb	r3, [r7, #13]
 80079e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80079e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80079ea:	4313      	orrs	r3, r2
 80079ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80079ee:	7b7b      	ldrb	r3, [r7, #13]
 80079f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80079f6:	4313      	orrs	r3, r2
 80079f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80079fa:	7b7b      	ldrb	r3, [r7, #13]
 80079fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007a00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007a02:	4313      	orrs	r3, r2
 8007a04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007a06:	7b7b      	ldrb	r3, [r7, #13]
 8007a08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007a0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007a12:	7b7b      	ldrb	r3, [r7, #13]
 8007a14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007a18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007a1e:	7b7b      	ldrb	r3, [r7, #13]
 8007a20:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007a24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007a26:	4313      	orrs	r3, r2
 8007a28:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d163      	bne.n	8007af6 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8007a2e:	f107 030b 	add.w	r3, r7, #11
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fb71 	bl	800811c <lsm6dsr_fsm_data_rate_get>
 8007a3a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d159      	bne.n	8007af6 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d853      	bhi.n	8007af0 <lsm6dsr_xl_data_rate_set+0x1a8>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <lsm6dsr_xl_data_rate_set+0x108>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a73 	.word	0x08007a73
 8007a58:	08007a91 	.word	0x08007a91
 8007a5c:	08007abb 	.word	0x08007abb
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8007a66:	2301      	movs	r3, #1
 8007a68:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007a6a:	e045      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	75fb      	strb	r3, [r7, #23]
            break;
 8007a70:	e042      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8007a78:	2302      	movs	r3, #2
 8007a7a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007a7c:	e03c      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d102      	bne.n	8007a8a <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8007a84:	2302      	movs	r3, #2
 8007a86:	75fb      	strb	r3, [r7, #23]
            break;
 8007a88:	e036      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	75fb      	strb	r3, [r7, #23]
            break;
 8007a8e:	e033      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8007a96:	2303      	movs	r3, #3
 8007a98:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007a9a:	e02d      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d102      	bne.n	8007aa8 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	75fb      	strb	r3, [r7, #23]
            break;
 8007aa6:	e027      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d102      	bne.n	8007ab4 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	75fb      	strb	r3, [r7, #23]
            break;
 8007ab2:	e021      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	75fb      	strb	r3, [r7, #23]
            break;
 8007ab8:	e01e      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007ac4:	e018      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d102      	bne.n	8007ad2 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007acc:	2304      	movs	r3, #4
 8007ace:	75fb      	strb	r3, [r7, #23]
            break;
 8007ad0:	e012      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d102      	bne.n	8007ade <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007ad8:	2304      	movs	r3, #4
 8007ada:	75fb      	strb	r3, [r7, #23]
            break;
 8007adc:	e00c      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d102      	bne.n	8007aea <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	75fb      	strb	r3, [r7, #23]
            break;
 8007ae8:	e006      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	75fb      	strb	r3, [r7, #23]
            break;
 8007aee:	e003      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	75fb      	strb	r3, [r7, #23]
            break;
 8007af4:	e000      	b.n	8007af8 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8007af6:	bf00      	nop
    }
  }

  if (ret == 0)
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d107      	bne.n	8007b0e <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007afe:	f107 0208 	add.w	r2, r7, #8
 8007b02:	2301      	movs	r3, #1
 8007b04:	2110      	movs	r1, #16
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff fe7b 	bl	8007802 <lsm6dsr_read_reg>
 8007b0c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10f      	bne.n	8007b34 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	7a3b      	ldrb	r3, [r7, #8]
 8007b1e:	f362 1307 	bfi	r3, r2, #4, #4
 8007b22:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8007b24:	f107 0208 	add.w	r2, r7, #8
 8007b28:	2301      	movs	r3, #1
 8007b2a:	2110      	movs	r1, #16
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff fe80 	bl	8007832 <lsm6dsr_write_reg>
 8007b32:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8007b34:	693b      	ldr	r3, [r7, #16]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop

08007b40 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007b4c:	f107 0208 	add.w	r2, r7, #8
 8007b50:	2301      	movs	r3, #1
 8007b52:	2111      	movs	r1, #17
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fe54 	bl	8007802 <lsm6dsr_read_reg>
 8007b5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10f      	bne.n	8007b82 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8007b62:	78fb      	ldrb	r3, [r7, #3]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	7a3b      	ldrb	r3, [r7, #8]
 8007b6c:	f362 0303 	bfi	r3, r2, #0, #4
 8007b70:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007b72:	f107 0208 	add.w	r2, r7, #8
 8007b76:	2301      	movs	r3, #1
 8007b78:	2111      	movs	r1, #17
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff fe59 	bl	8007832 <lsm6dsr_write_reg>
 8007b80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b82:	68fb      	ldr	r3, [r7, #12]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8007b9c:	f107 030c 	add.w	r3, r7, #12
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa8e 	bl	80080c4 <lsm6dsr_fsm_enable_get>
 8007ba8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f040 80c4 	bne.w	8007d3a <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007bb2:	7b3b      	ldrb	r3, [r7, #12]
 8007bb4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007bb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007bba:	7b3b      	ldrb	r3, [r7, #12]
 8007bbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007bc0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007bc6:	7b3b      	ldrb	r3, [r7, #12]
 8007bc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007bcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007bd2:	7b3b      	ldrb	r3, [r7, #12]
 8007bd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007bde:	7b3b      	ldrb	r3, [r7, #12]
 8007be0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007be4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007be6:	4313      	orrs	r3, r2
 8007be8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007bea:	7b3b      	ldrb	r3, [r7, #12]
 8007bec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007bf0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007bf6:	7b3b      	ldrb	r3, [r7, #12]
 8007bf8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007bfc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007c02:	7b3b      	ldrb	r3, [r7, #12]
 8007c04:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007c08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007c0e:	7b7b      	ldrb	r3, [r7, #13]
 8007c10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007c16:	4313      	orrs	r3, r2
 8007c18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007c1a:	7b7b      	ldrb	r3, [r7, #13]
 8007c1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007c20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007c22:	4313      	orrs	r3, r2
 8007c24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007c26:	7b7b      	ldrb	r3, [r7, #13]
 8007c28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007c2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007c32:	7b7b      	ldrb	r3, [r7, #13]
 8007c34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007c3e:	7b7b      	ldrb	r3, [r7, #13]
 8007c40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007c44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007c46:	4313      	orrs	r3, r2
 8007c48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007c4a:	7b7b      	ldrb	r3, [r7, #13]
 8007c4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007c50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007c52:	4313      	orrs	r3, r2
 8007c54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007c56:	7b7b      	ldrb	r3, [r7, #13]
 8007c58:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007c5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007c62:	7b7b      	ldrb	r3, [r7, #13]
 8007c64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007c68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d163      	bne.n	8007d3a <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8007c72:	f107 030b 	add.w	r3, r7, #11
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fa4f 	bl	800811c <lsm6dsr_fsm_data_rate_get>
 8007c7e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d159      	bne.n	8007d3a <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d853      	bhi.n	8007d34 <lsm6dsr_gy_data_rate_set+0x1a8>
 8007c8c:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <lsm6dsr_gy_data_rate_set+0x108>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007ca5 	.word	0x08007ca5
 8007c98:	08007cb7 	.word	0x08007cb7
 8007c9c:	08007cd5 	.word	0x08007cd5
 8007ca0:	08007cff 	.word	0x08007cff
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8007caa:	2301      	movs	r3, #1
 8007cac:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007cae:	e045      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	75fb      	strb	r3, [r7, #23]
            break;
 8007cb4:	e042      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007cc0:	e03c      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d102      	bne.n	8007cce <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	75fb      	strb	r3, [r7, #23]
            break;
 8007ccc:	e036      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	75fb      	strb	r3, [r7, #23]
            break;
 8007cd2:	e033      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d102      	bne.n	8007ce0 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007cde:	e02d      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d102      	bne.n	8007cec <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	75fb      	strb	r3, [r7, #23]
            break;
 8007cea:	e027      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d102      	bne.n	8007cf8 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	75fb      	strb	r3, [r7, #23]
            break;
 8007cf6:	e021      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	75fb      	strb	r3, [r7, #23]
            break;
 8007cfc:	e01e      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007d04:	2304      	movs	r3, #4
 8007d06:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007d08:	e018      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d102      	bne.n	8007d16 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007d10:	2304      	movs	r3, #4
 8007d12:	75fb      	strb	r3, [r7, #23]
            break;
 8007d14:	e012      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8007d16:	78fb      	ldrb	r3, [r7, #3]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d102      	bne.n	8007d22 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	75fb      	strb	r3, [r7, #23]
            break;
 8007d20:	e00c      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d102      	bne.n	8007d2e <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007d28:	2304      	movs	r3, #4
 8007d2a:	75fb      	strb	r3, [r7, #23]
            break;
 8007d2c:	e006      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	75fb      	strb	r3, [r7, #23]
            break;
 8007d32:	e003      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8007d34:	78fb      	ldrb	r3, [r7, #3]
 8007d36:	75fb      	strb	r3, [r7, #23]
            break;
 8007d38:	e000      	b.n	8007d3c <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8007d3a:	bf00      	nop
    }
  }

  if (ret == 0)
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d107      	bne.n	8007d52 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007d42:	f107 0208 	add.w	r2, r7, #8
 8007d46:	2301      	movs	r3, #1
 8007d48:	2111      	movs	r1, #17
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fd59 	bl	8007802 <lsm6dsr_read_reg>
 8007d50:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10f      	bne.n	8007d78 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	7a3b      	ldrb	r3, [r7, #8]
 8007d62:	f362 1307 	bfi	r3, r2, #4, #4
 8007d66:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007d68:	f107 0208 	add.w	r2, r7, #8
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	2111      	movs	r1, #17
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fd5e 	bl	8007832 <lsm6dsr_write_reg>
 8007d76:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007d78:	693b      	ldr	r3, [r7, #16]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop

08007d84 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007d90:	f107 0208 	add.w	r2, r7, #8
 8007d94:	2301      	movs	r3, #1
 8007d96:	2112      	movs	r1, #18
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fd32 	bl	8007802 <lsm6dsr_read_reg>
 8007d9e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10f      	bne.n	8007dc6 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	7a3b      	ldrb	r3, [r7, #8]
 8007db0:	f362 1386 	bfi	r3, r2, #6, #1
 8007db4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007db6:	f107 0208 	add.w	r2, r7, #8
 8007dba:	2301      	movs	r3, #1
 8007dbc:	2112      	movs	r1, #18
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff fd37 	bl	8007832 <lsm6dsr_write_reg>
 8007dc4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007dda:	f107 0208 	add.w	r2, r7, #8
 8007dde:	2301      	movs	r3, #1
 8007de0:	211e      	movs	r1, #30
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff fd0d 	bl	8007802 <lsm6dsr_read_reg>
 8007de8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8007dea:	7a3b      	ldrb	r3, [r7, #8]
 8007dec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	461a      	mov	r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	701a      	strb	r2, [r3, #0]

  return ret;
 8007df8:	68fb      	ldr	r3, [r7, #12]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007e0c:	f107 0208 	add.w	r2, r7, #8
 8007e10:	2301      	movs	r3, #1
 8007e12:	211e      	movs	r1, #30
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff fcf4 	bl	8007802 <lsm6dsr_read_reg>
 8007e1a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8007e1c:	7a3b      	ldrb	r3, [r7, #8]
 8007e1e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	701a      	strb	r2, [r3, #0]

  return ret;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007e3e:	f107 0208 	add.w	r2, r7, #8
 8007e42:	2301      	movs	r3, #1
 8007e44:	211e      	movs	r1, #30
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff fcdb 	bl	8007802 <lsm6dsr_read_reg>
 8007e4c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8007e4e:	7a3b      	ldrb	r3, [r7, #8]
 8007e50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	461a      	mov	r2, r3
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	701a      	strb	r2, [r3, #0]

  return ret;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8007e70:	f107 0208 	add.w	r2, r7, #8
 8007e74:	2302      	movs	r3, #2
 8007e76:	2120      	movs	r1, #32
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff fcc2 	bl	8007802 <lsm6dsr_read_reg>
 8007e7e:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8007e80:	7a7b      	ldrb	r3, [r7, #9]
 8007e82:	b21a      	sxth	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	7a3b      	ldrb	r3, [r7, #8]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	4413      	add	r3, r2
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	b21a      	sxth	r2, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	801a      	strh	r2, [r3, #0]

  return ret;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8007eb6:	f107 020c 	add.w	r2, r7, #12
 8007eba:	2306      	movs	r3, #6
 8007ebc:	2122      	movs	r1, #34	; 0x22
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff fc9f 	bl	8007802 <lsm6dsr_read_reg>
 8007ec4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007ec6:	7b7b      	ldrb	r3, [r7, #13]
 8007ec8:	b21a      	sxth	r2, r3
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	7b3b      	ldrb	r3, [r7, #12]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	4413      	add	r3, r2
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	b21a      	sxth	r2, r3
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007ee8:	7bfa      	ldrb	r2, [r7, #15]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	3302      	adds	r3, #2
 8007eee:	b212      	sxth	r2, r2
 8007ef0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4413      	add	r3, r2
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	b212      	sxth	r2, r2
 8007f0e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007f10:	7c7a      	ldrb	r2, [r7, #17]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	3304      	adds	r3, #4
 8007f16:	b212      	sxth	r2, r2
 8007f18:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	021b      	lsls	r3, r3, #8
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	7c3b      	ldrb	r3, [r7, #16]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	3304      	adds	r3, #4
 8007f34:	b212      	sxth	r2, r2
 8007f36:	801a      	strh	r2, [r3, #0]

  return ret;
 8007f38:	697b      	ldr	r3, [r7, #20]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b086      	sub	sp, #24
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8007f4c:	f107 020c 	add.w	r2, r7, #12
 8007f50:	2306      	movs	r3, #6
 8007f52:	2128      	movs	r1, #40	; 0x28
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff fc54 	bl	8007802 <lsm6dsr_read_reg>
 8007f5a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007f5c:	7b7b      	ldrb	r3, [r7, #13]
 8007f5e:	b21a      	sxth	r2, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	7b3b      	ldrb	r3, [r7, #12]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	4413      	add	r3, r2
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	b21a      	sxth	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007f7e:	7bfa      	ldrb	r2, [r7, #15]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	3302      	adds	r3, #2
 8007f84:	b212      	sxth	r2, r2
 8007f86:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	3302      	adds	r3, #2
 8007f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	4413      	add	r3, r2
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	3302      	adds	r3, #2
 8007fa2:	b212      	sxth	r2, r2
 8007fa4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007fa6:	7c7a      	ldrb	r2, [r7, #17]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	3304      	adds	r3, #4
 8007fac:	b212      	sxth	r2, r2
 8007fae:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	021b      	lsls	r3, r3, #8
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	7c3b      	ldrb	r3, [r7, #16]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	b212      	sxth	r2, r2
 8007fcc:	801a      	strh	r2, [r3, #0]

  return ret;
 8007fce:	697b      	ldr	r3, [r7, #20]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8007fe4:	f107 0208 	add.w	r2, r7, #8
 8007fe8:	2301      	movs	r3, #1
 8007fea:	2101      	movs	r1, #1
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff fc08 	bl	8007802 <lsm6dsr_read_reg>
 8007ff2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10f      	bne.n	800801a <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	f003 0303 	and.w	r3, r3, #3
 8008000:	b2da      	uxtb	r2, r3
 8008002:	7a3b      	ldrb	r3, [r7, #8]
 8008004:	f362 1387 	bfi	r3, r2, #6, #2
 8008008:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800800a:	f107 0208 	add.w	r2, r7, #8
 800800e:	2301      	movs	r3, #1
 8008010:	2101      	movs	r1, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff fc0d 	bl	8007832 <lsm6dsr_write_reg>
 8008018:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800801a:	68fb      	ldr	r3, [r7, #12]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800802e:	2301      	movs	r3, #1
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	210f      	movs	r1, #15
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff fbe4 	bl	8007802 <lsm6dsr_read_reg>
 800803a:	60f8      	str	r0, [r7, #12]

  return ret;
 800803c:	68fb      	ldr	r3, [r7, #12]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8008052:	f107 0208 	add.w	r2, r7, #8
 8008056:	2301      	movs	r3, #1
 8008058:	2112      	movs	r1, #18
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff fbd1 	bl	8007802 <lsm6dsr_read_reg>
 8008060:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10f      	bne.n	8008088 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	b2da      	uxtb	r2, r3
 8008070:	7a3b      	ldrb	r3, [r7, #8]
 8008072:	f362 0300 	bfi	r3, r2, #0, #1
 8008076:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8008078:	f107 0208 	add.w	r2, r7, #8
 800807c:	2301      	movs	r3, #1
 800807e:	2112      	movs	r1, #18
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff fbd6 	bl	8007832 <lsm6dsr_write_reg>
 8008086:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008088:	68fb      	ldr	r3, [r7, #12]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800809c:	f107 0208 	add.w	r2, r7, #8
 80080a0:	2301      	movs	r3, #1
 80080a2:	2112      	movs	r1, #18
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff fbac 	bl	8007802 <lsm6dsr_read_reg>
 80080aa:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80080ac:	7a3b      	ldrb	r3, [r7, #8]
 80080ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	701a      	strb	r2, [r3, #0]

  return ret;
 80080ba:	68fb      	ldr	r3, [r7, #12]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80080ce:	2102      	movs	r1, #2
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff ff81 	bl	8007fd8 <lsm6dsr_mem_bank_set>
 80080d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80080de:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80080e0:	2301      	movs	r3, #1
 80080e2:	2146      	movs	r1, #70	; 0x46
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff fb8c 	bl	8007802 <lsm6dsr_read_reg>
 80080ea:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d107      	bne.n	8008102 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80080f6:	2301      	movs	r3, #1
 80080f8:	2147      	movs	r1, #71	; 0x47
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fb81 	bl	8007802 <lsm6dsr_read_reg>
 8008100:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8008108:	2100      	movs	r1, #0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff ff64 	bl	8007fd8 <lsm6dsr_mem_bank_set>
 8008110:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008112:	68fb      	ldr	r3, [r7, #12]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8008126:	2102      	movs	r1, #2
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff ff55 	bl	8007fd8 <lsm6dsr_mem_bank_set>
 800812e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d107      	bne.n	8008146 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8008136:	f107 0208 	add.w	r2, r7, #8
 800813a:	2301      	movs	r3, #1
 800813c:	215f      	movs	r1, #95	; 0x5f
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff fb5f 	bl	8007802 <lsm6dsr_read_reg>
 8008144:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d104      	bne.n	8008156 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800814c:	2100      	movs	r1, #0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff ff42 	bl	8007fd8 <lsm6dsr_mem_bank_set>
 8008154:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8008156:	7a3b      	ldrb	r3, [r7, #8]
 8008158:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d81a      	bhi.n	8008198 <lsm6dsr_fsm_data_rate_get+0x7c>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	08008179 	.word	0x08008179
 800816c:	08008181 	.word	0x08008181
 8008170:	08008189 	.word	0x08008189
 8008174:	08008191 	.word	0x08008191
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2200      	movs	r2, #0
 800817c:	701a      	strb	r2, [r3, #0]
      break;
 800817e:	e00f      	b.n	80081a0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2201      	movs	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]
      break;
 8008186:	e00b      	b.n	80081a0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2202      	movs	r2, #2
 800818c:	701a      	strb	r2, [r3, #0]
      break;
 800818e:	e007      	b.n	80081a0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2203      	movs	r2, #3
 8008194:	701a      	strb	r2, [r3, #0]
      break;
 8008196:	e003      	b.n	80081a0 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]
      break;
 800819e:	bf00      	nop
  }

  return ret;
 80081a0:	68fb      	ldr	r3, [r7, #12]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop

080081ac <HAL_RTC_AlarmAEventCallback>:
								0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
								0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
								0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80081b4:	f04f 33ff 	mov.w	r3, #4294967295
 80081b8:	2208      	movs	r2, #8
 80081ba:	4905      	ldr	r1, [pc, #20]	; (80081d0 <HAL_RTC_AlarmAEventCallback+0x24>)
 80081bc:	4805      	ldr	r0, [pc, #20]	; (80081d4 <HAL_RTC_AlarmAEventCallback+0x28>)
 80081be:	f006 feca 	bl	800ef56 <HAL_UART_Transmit>
	flagA = 1;
 80081c2:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80081c4:	2201      	movs	r2, #1
 80081c6:	701a      	strb	r2, [r3, #0]
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	08022d6c 	.word	0x08022d6c
 80081d4:	20006f04 	.word	0x20006f04
 80081d8:	20000718 	.word	0x20000718

080081dc <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(RTC_HandleTypeDef* hrtc, UART_HandleTypeDef uart,uint8_t sleepT){
 80081dc:	b084      	sub	sp, #16
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	f107 0014 	add.w	r0, r7, #20
 80081ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	rtc = hrtc;
 80081ee:	4a0f      	ldr	r2, [pc, #60]	; (800822c <MRT_SetupRTOS+0x50>)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6013      	str	r3, [r2, #0]
	rtos.huart = uart;
 80081f4:	4b0e      	ldr	r3, [pc, #56]	; (8008230 <MRT_SetupRTOS+0x54>)
 80081f6:	4618      	mov	r0, r3
 80081f8:	f107 0314 	add.w	r3, r7, #20
 80081fc:	2244      	movs	r2, #68	; 0x44
 80081fe:	4619      	mov	r1, r3
 8008200:	f013 fa32 	bl	801b668 <memcpy>
	rtos.sleepTime = sleepT;
 8008204:	4a0a      	ldr	r2, [pc, #40]	; (8008230 <MRT_SetupRTOS+0x54>)
 8008206:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800820a:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 800820e:	f04f 33ff 	mov.w	r3, #4294967295
 8008212:	2211      	movs	r2, #17
 8008214:	4907      	ldr	r1, [pc, #28]	; (8008234 <MRT_SetupRTOS+0x58>)
 8008216:	4806      	ldr	r0, [pc, #24]	; (8008230 <MRT_SetupRTOS+0x54>)
 8008218:	f006 fe9d 	bl	800ef56 <HAL_UART_Transmit>
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008226:	b004      	add	sp, #16
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	20006f4c 	.word	0x20006f4c
 8008230:	20006f04 	.word	0x20006f04
 8008234:	08022d84 	.word	0x08022d84

08008238 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800823e:	4b15      	ldr	r3, [pc, #84]	; (8008294 <MRT_WUProcedure+0x5c>)
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b02      	cmp	r3, #2
 8008248:	d11e      	bne.n	8008288 <MRT_WUProcedure+0x50>
	{

		wu_flag = 1;
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <MRT_WUProcedure+0x60>)
 800824c:	2201      	movs	r2, #1
 800824e:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8008250:	4b10      	ldr	r3, [pc, #64]	; (8008294 <MRT_WUProcedure+0x5c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a0f      	ldr	r2, [pc, #60]	; (8008294 <MRT_WUProcedure+0x5c>)
 8008256:	f043 0308 	orr.w	r3, r3, #8
 800825a:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 800825c:	4b0f      	ldr	r3, [pc, #60]	; (800829c <MRT_WUProcedure+0x64>)
 800825e:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7f7 ffcf 	bl	8000204 <strlen>
 8008266:	4603      	mov	r3, r0
 8008268:	b29a      	uxth	r2, r3
 800826a:	f04f 33ff 	mov.w	r3, #4294967295
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	480b      	ldr	r0, [pc, #44]	; (80082a0 <MRT_WUProcedure+0x68>)
 8008272:	f006 fe70 	bl	800ef56 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8008276:	f44f 7080 	mov.w	r0, #256	; 0x100
 800827a:	f003 fe2b 	bl	800bed4 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(rtc);
 800827e:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <MRT_WUProcedure+0x6c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4618      	mov	r0, r3
 8008284:	f005 fa24 	bl	800d6d0 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8008288:	f000 f80e 	bl	80082a8 <MRT_ClearFlags>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	40007000 	.word	0x40007000
 8008298:	20000719 	.word	0x20000719
 800829c:	08022d98 	.word	0x08022d98
 80082a0:	20006f04 	.word	0x20006f04
 80082a4:	20006f4c 	.word	0x20006f4c

080082a8 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 80082ac:	f04f 33ff 	mov.w	r3, #4294967295
 80082b0:	2214      	movs	r2, #20
 80082b2:	4939      	ldr	r1, [pc, #228]	; (8008398 <MRT_ClearFlags+0xf0>)
 80082b4:	4839      	ldr	r0, [pc, #228]	; (800839c <MRT_ClearFlags+0xf4>)
 80082b6:	f006 fe4e 	bl	800ef56 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 80082ba:	4b39      	ldr	r3, [pc, #228]	; (80083a0 <MRT_ClearFlags+0xf8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	22ca      	movs	r2, #202	; 0xca
 80082c2:	625a      	str	r2, [r3, #36]	; 0x24
 80082c4:	4b36      	ldr	r3, [pc, #216]	; (80083a0 <MRT_ClearFlags+0xf8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2253      	movs	r2, #83	; 0x53
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 80082ce:	e011      	b.n	80082f4 <MRT_ClearFlags+0x4c>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80082d0:	f04f 33ff 	mov.w	r3, #4294967295
 80082d4:	2217      	movs	r2, #23
 80082d6:	4933      	ldr	r1, [pc, #204]	; (80083a4 <MRT_ClearFlags+0xfc>)
 80082d8:	4830      	ldr	r0, [pc, #192]	; (800839c <MRT_ClearFlags+0xf4>)
 80082da:	f006 fe3c 	bl	800ef56 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRAF);
 80082de:	4b30      	ldr	r3, [pc, #192]	; (80083a0 <MRT_ClearFlags+0xf8>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	4b2d      	ldr	r3, [pc, #180]	; (80083a0 <MRT_ClearFlags+0xf8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80082f2:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 80082f4:	4b2a      	ldr	r3, [pc, #168]	; (80083a0 <MRT_ClearFlags+0xf8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e5      	bne.n	80082d0 <MRT_ClearFlags+0x28>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8008304:	4b26      	ldr	r3, [pc, #152]	; (80083a0 <MRT_ClearFlags+0xf8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	22ff      	movs	r2, #255	; 0xff
 800830c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800830e:	4b26      	ldr	r3, [pc, #152]	; (80083a8 <MRT_ClearFlags+0x100>)
 8008310:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008314:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 8008316:	4b22      	ldr	r3, [pc, #136]	; (80083a0 <MRT_ClearFlags+0xf8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	22ca      	movs	r2, #202	; 0xca
 800831e:	625a      	str	r2, [r3, #36]	; 0x24
 8008320:	4b1f      	ldr	r3, [pc, #124]	; (80083a0 <MRT_ClearFlags+0xf8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2253      	movs	r2, #83	; 0x53
 8008328:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 800832a:	e011      	b.n	8008350 <MRT_ClearFlags+0xa8>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 800832c:	f04f 33ff 	mov.w	r3, #4294967295
 8008330:	2217      	movs	r2, #23
 8008332:	491e      	ldr	r1, [pc, #120]	; (80083ac <MRT_ClearFlags+0x104>)
 8008334:	4819      	ldr	r0, [pc, #100]	; (800839c <MRT_ClearFlags+0xf4>)
 8008336:	f006 fe0e 	bl	800ef56 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRBF);
 800833a:	4b19      	ldr	r3, [pc, #100]	; (80083a0 <MRT_ClearFlags+0xf8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	b2da      	uxtb	r2, r3
 8008344:	4b16      	ldr	r3, [pc, #88]	; (80083a0 <MRT_ClearFlags+0xf8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800834e:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8008350:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <MRT_ClearFlags+0xf8>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e5      	bne.n	800832c <MRT_ClearFlags+0x84>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8008360:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <MRT_ClearFlags+0xf8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	22ff      	movs	r2, #255	; 0xff
 8008368:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800836a:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <MRT_ClearFlags+0x100>)
 800836c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008370:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8008372:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <MRT_ClearFlags+0x108>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a0e      	ldr	r2, [pc, #56]	; (80083b0 <MRT_ClearFlags+0x108>)
 8008378:	f043 0304 	orr.w	r3, r3, #4
 800837c:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtc, RTC_FLAG_WUTF);
 800837e:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <MRT_ClearFlags+0xf8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	b2da      	uxtb	r2, r3
 8008388:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <MRT_ClearFlags+0xf8>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008392:	60da      	str	r2, [r3, #12]
}
 8008394:	bf00      	nop
 8008396:	bd80      	pop	{r7, pc}
 8008398:	08022db8 	.word	0x08022db8
 800839c:	20006f04 	.word	0x20006f04
 80083a0:	20006f4c 	.word	0x20006f4c
 80083a4:	08022dd0 	.word	0x08022dd0
 80083a8:	40013c00 	.word	0x40013c00
 80083ac:	08022de8 	.word	0x08022de8
 80083b0:	40007000 	.word	0x40007000

080083b4 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b0a4      	sub	sp, #144	; 0x90
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 80083bc:	f04f 33ff 	mov.w	r3, #4294967295
 80083c0:	220f      	movs	r2, #15
 80083c2:	491c      	ldr	r1, [pc, #112]	; (8008434 <MRT_StandByMode+0x80>)
 80083c4:	481c      	ldr	r0, [pc, #112]	; (8008438 <MRT_StandByMode+0x84>)
 80083c6:	f006 fdc6 	bl	800ef56 <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80083ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80083ce:	f003 fd6f 	bl	800beb0 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 80083d2:	f7ff ff69 	bl	80082a8 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 80083d6:	f04f 33ff 	mov.w	r3, #4294967295
 80083da:	2211      	movs	r2, #17
 80083dc:	4917      	ldr	r1, [pc, #92]	; (800843c <MRT_StandByMode+0x88>)
 80083de:	4816      	ldr	r0, [pc, #88]	; (8008438 <MRT_StandByMode+0x84>)
 80083e0:	f006 fdb9 	bl	800ef56 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	4915      	ldr	r1, [pc, #84]	; (8008440 <MRT_StandByMode+0x8c>)
 80083ec:	4618      	mov	r0, r3
 80083ee:	f014 fc5f 	bl	801ccb0 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 80083f2:	f107 0308 	add.w	r3, r7, #8
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7f7 ff04 	bl	8000204 <strlen>
 80083fc:	4603      	mov	r3, r0
 80083fe:	b29a      	uxth	r2, r3
 8008400:	f107 0108 	add.w	r1, r7, #8
 8008404:	f04f 33ff 	mov.w	r3, #4294967295
 8008408:	480b      	ldr	r0, [pc, #44]	; (8008438 <MRT_StandByMode+0x84>)
 800840a:	f006 fda4 	bl	800ef56 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(rtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800840e:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <MRT_StandByMode+0x90>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2204      	movs	r2, #4
 8008414:	6879      	ldr	r1, [r7, #4]
 8008416:	4618      	mov	r0, r3
 8008418:	f005 f89a 	bl	800d550 <HAL_RTCEx_SetWakeUpTimer_IT>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <MRT_StandByMode+0x72>
	{
	  Error_Handler();
 8008422:	f7fa fcad 	bl	8002d80 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8008426:	f003 fd69 	bl	800befc <HAL_PWR_EnterSTANDBYMode>
}
 800842a:	bf00      	nop
 800842c:	3790      	adds	r7, #144	; 0x90
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	08022e00 	.word	0x08022e00
 8008438:	20006f04 	.word	0x20006f04
 800843c:	08022e10 	.word	0x08022e10
 8008440:	08022e24 	.word	0x08022e24
 8008444:	20006f4c 	.word	0x20006f4c

08008448 <MRT_setAlarmA>:


void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	71fb      	strb	r3, [r7, #7]
 8008452:	460b      	mov	r3, r1
 8008454:	71bb      	strb	r3, [r7, #6]
 8008456:	4613      	mov	r3, r2
 8008458:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	4a1b      	ldr	r2, [pc, #108]	; (80084cc <MRT_setAlarmA+0x84>)
 800845e:	5cd2      	ldrb	r2, [r2, r3]
 8008460:	4b1b      	ldr	r3, [pc, #108]	; (80084d0 <MRT_setAlarmA+0x88>)
 8008462:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8008464:	79bb      	ldrb	r3, [r7, #6]
 8008466:	4a19      	ldr	r2, [pc, #100]	; (80084cc <MRT_setAlarmA+0x84>)
 8008468:	5cd2      	ldrb	r2, [r2, r3]
 800846a:	4b19      	ldr	r3, [pc, #100]	; (80084d0 <MRT_setAlarmA+0x88>)
 800846c:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 800846e:	797b      	ldrb	r3, [r7, #5]
 8008470:	4a16      	ldr	r2, [pc, #88]	; (80084cc <MRT_setAlarmA+0x84>)
 8008472:	5cd2      	ldrb	r2, [r2, r3]
 8008474:	4b16      	ldr	r3, [pc, #88]	; (80084d0 <MRT_setAlarmA+0x88>)
 8008476:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8008478:	4b15      	ldr	r3, [pc, #84]	; (80084d0 <MRT_setAlarmA+0x88>)
 800847a:	2200      	movs	r2, #0
 800847c:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800847e:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <MRT_setAlarmA+0x88>)
 8008480:	2200      	movs	r2, #0
 8008482:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008484:	4b12      	ldr	r3, [pc, #72]	; (80084d0 <MRT_setAlarmA+0x88>)
 8008486:	2200      	movs	r2, #0
 8008488:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800848a:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <MRT_setAlarmA+0x88>)
 800848c:	2200      	movs	r2, #0
 800848e:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8008490:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <MRT_setAlarmA+0x88>)
 8008492:	2200      	movs	r2, #0
 8008494:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8008496:	4b0e      	ldr	r3, [pc, #56]	; (80084d0 <MRT_setAlarmA+0x88>)
 8008498:	2200      	movs	r2, #0
 800849a:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 800849c:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <MRT_setAlarmA+0x88>)
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 80084a4:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <MRT_setAlarmA+0x88>)
 80084a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084aa:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(rtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80084ac:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <MRT_setAlarmA+0x8c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2201      	movs	r2, #1
 80084b2:	4907      	ldr	r1, [pc, #28]	; (80084d0 <MRT_setAlarmA+0x88>)
 80084b4:	4618      	mov	r0, r3
 80084b6:	f004 fe3d 	bl	800d134 <HAL_RTC_SetAlarm_IT>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <MRT_setAlarmA+0x7c>
	  {
	    Error_Handler();
 80084c0:	f7fa fc5e 	bl	8002d80 <Error_Handler>
	  }
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000024 	.word	0x20000024
 80084d0:	200006f0 	.word	0x200006f0
 80084d4:	20006f4c 	.word	0x20006f4c

080084d8 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	4603      	mov	r3, r0
 80084e0:	71fb      	strb	r3, [r7, #7]
 80084e2:	460b      	mov	r3, r1
 80084e4:	71bb      	strb	r3, [r7, #6]
 80084e6:	4613      	mov	r3, r2
 80084e8:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	4a1b      	ldr	r2, [pc, #108]	; (800855c <MRT_setRTC+0x84>)
 80084ee:	5cd3      	ldrb	r3, [r2, r3]
 80084f0:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 80084f2:	79bb      	ldrb	r3, [r7, #6]
 80084f4:	4a19      	ldr	r2, [pc, #100]	; (800855c <MRT_setRTC+0x84>)
 80084f6:	5cd3      	ldrb	r3, [r2, r3]
 80084f8:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 80084fa:	797b      	ldrb	r3, [r7, #5]
 80084fc:	4a17      	ldr	r2, [pc, #92]	; (800855c <MRT_setRTC+0x84>)
 80084fe:	5cd3      	ldrb	r3, [r2, r3]
 8008500:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008502:	2300      	movs	r3, #0
 8008504:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008506:	2300      	movs	r3, #0
 8008508:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800850a:	4b15      	ldr	r3, [pc, #84]	; (8008560 <MRT_setRTC+0x88>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f107 010c 	add.w	r1, r7, #12
 8008512:	2201      	movs	r2, #1
 8008514:	4618      	mov	r0, r3
 8008516:	f004 fbfc 	bl	800cd12 <HAL_RTC_SetTime>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <MRT_setRTC+0x4c>
	  {
	    Error_Handler();
 8008520:	f7fa fc2e 	bl	8002d80 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8008524:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <MRT_setRTC+0x8c>)
 8008526:	2201      	movs	r2, #1
 8008528:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 800852a:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <MRT_setRTC+0x8c>)
 800852c:	2201      	movs	r2, #1
 800852e:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8008530:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <MRT_setRTC+0x8c>)
 8008532:	2201      	movs	r2, #1
 8008534:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8008536:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <MRT_setRTC+0x8c>)
 8008538:	2200      	movs	r2, #0
 800853a:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800853c:	4b08      	ldr	r3, [pc, #32]	; (8008560 <MRT_setRTC+0x88>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2201      	movs	r2, #1
 8008542:	4908      	ldr	r1, [pc, #32]	; (8008564 <MRT_setRTC+0x8c>)
 8008544:	4618      	mov	r0, r3
 8008546:	f004 fcff 	bl	800cf48 <HAL_RTC_SetDate>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <MRT_setRTC+0x7c>
	  {
	    Error_Handler();
 8008550:	f7fa fc16 	bl	8002d80 <Error_Handler>
	  }
}
 8008554:	bf00      	nop
 8008556:	3720      	adds	r7, #32
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20000024 	.word	0x20000024
 8008560:	20006f4c 	.word	0x20006f4c
 8008564:	200006ec 	.word	0x200006ec

08008568 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 800856e:	2300      	movs	r3, #0
 8008570:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8008572:	2200      	movs	r2, #0
 8008574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008578:	483f      	ldr	r0, [pc, #252]	; (8008678 <Max31855_Read_Temp+0x110>)
 800857a:	f001 fa21 	bl	80099c0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 800857e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008582:	2204      	movs	r2, #4
 8008584:	493d      	ldr	r1, [pc, #244]	; (800867c <Max31855_Read_Temp+0x114>)
 8008586:	483e      	ldr	r0, [pc, #248]	; (8008680 <Max31855_Read_Temp+0x118>)
 8008588:	f005 fac9 	bl	800db1e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 800858c:	2201      	movs	r2, #1
 800858e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008592:	4839      	ldr	r0, [pc, #228]	; (8008678 <Max31855_Read_Temp+0x110>)
 8008594:	f001 fa14 	bl	80099c0 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8008598:	4b38      	ldr	r3, [pc, #224]	; (800867c <Max31855_Read_Temp+0x114>)
 800859a:	78db      	ldrb	r3, [r3, #3]
 800859c:	461a      	mov	r2, r3
 800859e:	4b37      	ldr	r3, [pc, #220]	; (800867c <Max31855_Read_Temp+0x114>)
 80085a0:	789b      	ldrb	r3, [r3, #2]
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	431a      	orrs	r2, r3
 80085a6:	4b35      	ldr	r3, [pc, #212]	; (800867c <Max31855_Read_Temp+0x114>)
 80085a8:	785b      	ldrb	r3, [r3, #1]
 80085aa:	041b      	lsls	r3, r3, #16
 80085ac:	431a      	orrs	r2, r3
 80085ae:	4b33      	ldr	r3, [pc, #204]	; (800867c <Max31855_Read_Temp+0x114>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	061b      	lsls	r3, r3, #24
 80085b4:	4313      	orrs	r3, r2
 80085b6:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	4b30      	ldr	r3, [pc, #192]	; (8008684 <Max31855_Read_Temp+0x11c>)
 80085c4:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 80085c6:	4b2d      	ldr	r3, [pc, #180]	; (800867c <Max31855_Read_Temp+0x114>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	09db      	lsrs	r3, r3, #7
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	461a      	mov	r2, r3
 80085d0:	4b2d      	ldr	r3, [pc, #180]	; (8008688 <Max31855_Read_Temp+0x120>)
 80085d2:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 80085d4:	4b29      	ldr	r3, [pc, #164]	; (800867c <Max31855_Read_Temp+0x114>)
 80085d6:	78db      	ldrb	r3, [r3, #3]
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00c      	beq.n	80085fa <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 80085e0:	4b26      	ldr	r3, [pc, #152]	; (800867c <Max31855_Read_Temp+0x114>)
 80085e2:	78db      	ldrb	r3, [r3, #3]
 80085e4:	f003 0307 	and.w	r3, r3, #7
 80085e8:	425b      	negs	r3, r3
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085f2:	4b26      	ldr	r3, [pc, #152]	; (800868c <Max31855_Read_Temp+0x124>)
 80085f4:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 80085f8:	e039      	b.n	800866e <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 80085fa:	4b23      	ldr	r3, [pc, #140]	; (8008688 <Max31855_Read_Temp+0x120>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d120      	bne.n	8008644 <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8008602:	4b1e      	ldr	r3, [pc, #120]	; (800867c <Max31855_Read_Temp+0x114>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	019b      	lsls	r3, r3, #6
 8008608:	4a1c      	ldr	r2, [pc, #112]	; (800867c <Max31855_Read_Temp+0x114>)
 800860a:	7852      	ldrb	r2, [r2, #1]
 800860c:	0892      	lsrs	r2, r2, #2
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	4313      	orrs	r3, r2
 8008612:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800861a:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8008622:	f083 031f 	eor.w	r3, r3, #31
 8008626:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	425b      	negs	r3, r3
 800862c:	ee07 3a90 	vmov	s15, r3
 8008630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008634:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800863c:	4b13      	ldr	r3, [pc, #76]	; (800868c <Max31855_Read_Temp+0x124>)
 800863e:	edc3 7a00 	vstr	s15, [r3]
}
 8008642:	e014      	b.n	800866e <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8008644:	4b0d      	ldr	r3, [pc, #52]	; (800867c <Max31855_Read_Temp+0x114>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	019b      	lsls	r3, r3, #6
 800864a:	4a0c      	ldr	r2, [pc, #48]	; (800867c <Max31855_Read_Temp+0x114>)
 800864c:	7852      	ldrb	r2, [r2, #1]
 800864e:	0892      	lsrs	r2, r2, #2
 8008650:	b2d2      	uxtb	r2, r2
 8008652:	4313      	orrs	r3, r2
 8008654:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008660:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008668:	4b08      	ldr	r3, [pc, #32]	; (800868c <Max31855_Read_Temp+0x124>)
 800866a:	edc3 7a00 	vstr	s15, [r3]
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	40021000 	.word	0x40021000
 800867c:	20006f50 	.word	0x20006f50
 8008680:	200068e8 	.word	0x200068e8
 8008684:	2000071a 	.word	0x2000071a
 8008688:	2000071c 	.word	0x2000071c
 800868c:	20006a28 	.word	0x20006a28

08008690 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8008690:	b40f      	push	{r0, r1, r2, r3}
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8008698:	f107 0314 	add.w	r3, r7, #20
 800869c:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80086a6:	480a      	ldr	r0, [pc, #40]	; (80086d0 <myprintf+0x40>)
 80086a8:	f015 fd54 	bl	801e154 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 80086ac:	4808      	ldr	r0, [pc, #32]	; (80086d0 <myprintf+0x40>)
 80086ae:	f7f7 fda9 	bl	8000204 <strlen>
 80086b2:	4603      	mov	r3, r0
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ba:	4905      	ldr	r1, [pc, #20]	; (80086d0 <myprintf+0x40>)
 80086bc:	4805      	ldr	r0, [pc, #20]	; (80086d4 <myprintf+0x44>)
 80086be:	f006 fc4a 	bl	800ef56 <HAL_UART_Transmit>

}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086cc:	b004      	add	sp, #16
 80086ce:	4770      	bx	lr
 80086d0:	20000720 	.word	0x20000720
 80086d4:	20005ee0 	.word	0x20005ee0

080086d8 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	; 0x28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 80086e4:	2201      	movs	r2, #1
 80086e6:	4932      	ldr	r1, [pc, #200]	; (80087b0 <sd_init_dynamic_filename+0xd8>)
 80086e8:	4832      	ldr	r0, [pc, #200]	; (80087b4 <sd_init_dynamic_filename+0xdc>)
 80086ea:	f00c fb11 	bl	8014d10 <f_mount>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 80086f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d008      	beq.n	800870e <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 80086fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008700:	4619      	mov	r1, r3
 8008702:	482d      	ldr	r0, [pc, #180]	; (80087b8 <sd_init_dynamic_filename+0xe0>)
 8008704:	f7ff ffc4 	bl	8008690 <myprintf>
		return fres;
 8008708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800870c:	e04b      	b.n	80087a6 <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8008712:	f107 0320 	add.w	r3, r7, #32
 8008716:	461a      	mov	r2, r3
 8008718:	68f9      	ldr	r1, [r7, #12]
 800871a:	4825      	ldr	r0, [pc, #148]	; (80087b0 <sd_init_dynamic_filename+0xd8>)
 800871c:	f000 f89c 	bl	8008858 <scan_files>
 8008720:	4603      	mov	r3, r0
 8008722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	f107 0310 	add.w	r3, r7, #16
 800872e:	4923      	ldr	r1, [pc, #140]	; (80087bc <sd_init_dynamic_filename+0xe4>)
 8008730:	4618      	mov	r0, r3
 8008732:	f014 fabd 	bl	801ccb0 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8008736:	f107 0310 	add.w	r3, r7, #16
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f014 fb48 	bl	801cdd2 <strcpy>
 8008742:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8008744:	f107 0310 	add.w	r3, r7, #16
 8008748:	221a      	movs	r2, #26
 800874a:	4619      	mov	r1, r3
 800874c:	481c      	ldr	r0, [pc, #112]	; (80087c0 <sd_init_dynamic_filename+0xe8>)
 800874e:	f00c fb43 	bl	8014dd8 <f_open>
 8008752:	4603      	mov	r3, r0
 8008754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8008758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800875c:	2b00      	cmp	r3, #0
 800875e:	d11a      	bne.n	8008796 <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8008760:	4818      	ldr	r0, [pc, #96]	; (80087c4 <sd_init_dynamic_filename+0xec>)
 8008762:	f7ff ff95 	bl	8008690 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8008766:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <sd_init_dynamic_filename+0xe8>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	4619      	mov	r1, r3
 800876c:	4814      	ldr	r0, [pc, #80]	; (80087c0 <sd_init_dynamic_filename+0xe8>)
 800876e:	f00c ff54 	bl	801561a <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8008772:	4915      	ldr	r1, [pc, #84]	; (80087c8 <sd_init_dynamic_filename+0xf0>)
 8008774:	4815      	ldr	r0, [pc, #84]	; (80087cc <sd_init_dynamic_filename+0xf4>)
 8008776:	f014 fa9b 	bl	801ccb0 <siprintf>
	sd_write(&fil, msg_buffer);
 800877a:	4914      	ldr	r1, [pc, #80]	; (80087cc <sd_init_dynamic_filename+0xf4>)
 800877c:	4810      	ldr	r0, [pc, #64]	; (80087c0 <sd_init_dynamic_filename+0xe8>)
 800877e:	f000 f841 	bl	8008804 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8008782:	68b9      	ldr	r1, [r7, #8]
 8008784:	480e      	ldr	r0, [pc, #56]	; (80087c0 <sd_init_dynamic_filename+0xe8>)
 8008786:	f000 f83d 	bl	8008804 <sd_write>
	f_close(&fil);
 800878a:	480d      	ldr	r0, [pc, #52]	; (80087c0 <sd_init_dynamic_filename+0xe8>)
 800878c:	f00c ff16 	bl	80155bc <f_close>

	return fres;
 8008790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008794:	e007      	b.n	80087a6 <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8008796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800879a:	4619      	mov	r1, r3
 800879c:	480c      	ldr	r0, [pc, #48]	; (80087d0 <sd_init_dynamic_filename+0xf8>)
 800879e:	f7ff ff77 	bl	8008690 <myprintf>
		return fres;
 80087a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3728      	adds	r7, #40	; 0x28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	08022e44 	.word	0x08022e44
 80087b4:	20006088 	.word	0x20006088
 80087b8:	08022e48 	.word	0x08022e48
 80087bc:	08022ec4 	.word	0x08022ec4
 80087c0:	20006b98 	.word	0x20006b98
 80087c4:	08022e60 	.word	0x08022e60
 80087c8:	08022ea4 	.word	0x08022ea4
 80087cc:	20006f54 	.word	0x20006f54
 80087d0:	08022e90 	.word	0x08022e90

080087d4 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 80087dc:	2212      	movs	r2, #18
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	4807      	ldr	r0, [pc, #28]	; (8008800 <sd_open_file+0x2c>)
 80087e2:	f00c faf9 	bl	8014dd8 <f_open>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 80087ea:	4b05      	ldr	r3, [pc, #20]	; (8008800 <sd_open_file+0x2c>)
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	4619      	mov	r1, r3
 80087f0:	4803      	ldr	r0, [pc, #12]	; (8008800 <sd_open_file+0x2c>)
 80087f2:	f00c ff12 	bl	801561a <f_lseek>

	return fres;
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20006b98 	.word	0x20006b98

08008804 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 800880e:	6838      	ldr	r0, [r7, #0]
 8008810:	f7f7 fcf8 	bl	8000204 <strlen>
 8008814:	4602      	mov	r2, r0
 8008816:	f107 0308 	add.w	r3, r7, #8
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f00c fca0 	bl	8015162 <f_write>
 8008822:	4603      	mov	r3, r0
 8008824:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d107      	bne.n	800883c <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4619      	mov	r1, r3
 8008830:	4807      	ldr	r0, [pc, #28]	; (8008850 <sd_write+0x4c>)
 8008832:	f7ff ff2d 	bl	8008690 <myprintf>
		return bytesWrote;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	b25b      	sxtb	r3, r3
 800883a:	e004      	b.n	8008846 <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 800883c:	4805      	ldr	r0, [pc, #20]	; (8008854 <sd_write+0x50>)
 800883e:	f7ff ff27 	bl	8008690 <myprintf>
		return -1;
 8008842:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	08022ed0 	.word	0x08022ed0
 8008854:	08022ef4 	.word	0x08022ef4

08008858 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8008858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800885a:	b099      	sub	sp, #100	; 0x64
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	466b      	mov	r3, sp
 8008866:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8008868:	68b8      	ldr	r0, [r7, #8]
 800886a:	f7f7 fccb 	bl	8000204 <strlen>
 800886e:	4603      	mov	r3, r0
 8008870:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8008874:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8008878:	4623      	mov	r3, r4
 800887a:	3b01      	subs	r3, #1
 800887c:	65bb      	str	r3, [r7, #88]	; 0x58
 800887e:	b2e0      	uxtb	r0, r4
 8008880:	f04f 0100 	mov.w	r1, #0
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	f04f 0300 	mov.w	r3, #0
 800888c:	00cb      	lsls	r3, r1, #3
 800888e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008892:	00c2      	lsls	r2, r0, #3
 8008894:	b2e0      	uxtb	r0, r4
 8008896:	f04f 0100 	mov.w	r1, #0
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	f04f 0300 	mov.w	r3, #0
 80088a2:	00cb      	lsls	r3, r1, #3
 80088a4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80088a8:	00c2      	lsls	r2, r0, #3
 80088aa:	4623      	mov	r3, r4
 80088ac:	3307      	adds	r3, #7
 80088ae:	08db      	lsrs	r3, r3, #3
 80088b0:	00db      	lsls	r3, r3, #3
 80088b2:	ebad 0d03 	sub.w	sp, sp, r3
 80088b6:	466b      	mov	r3, sp
 80088b8:	3300      	adds	r3, #0
 80088ba:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 80088bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088be:	4619      	mov	r1, r3
 80088c0:	68b8      	ldr	r0, [r7, #8]
 80088c2:	f000 f8ff 	bl	8008ac4 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 80088d0:	f107 0318 	add.w	r3, r7, #24
 80088d4:	68f9      	ldr	r1, [r7, #12]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f00d f8f2 	bl	8015ac0 <f_opendir>
 80088dc:	4603      	mov	r3, r0
 80088de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 80088e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d16c      	bne.n	80089c4 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80088ea:	f107 0318 	add.w	r3, r7, #24
 80088ee:	4939      	ldr	r1, [pc, #228]	; (80089d4 <scan_files+0x17c>)
 80088f0:	4618      	mov	r0, r3
 80088f2:	f00d f989 	bl	8015c08 <f_readdir>
 80088f6:	4603      	mov	r3, r0
 80088f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80088fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008900:	2b00      	cmp	r3, #0
 8008902:	d15a      	bne.n	80089ba <scan_files+0x162>
 8008904:	4b33      	ldr	r3, [pc, #204]	; (80089d4 <scan_files+0x17c>)
 8008906:	7a5b      	ldrb	r3, [r3, #9]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d056      	beq.n	80089ba <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 800890c:	4b31      	ldr	r3, [pc, #196]	; (80089d4 <scan_files+0x17c>)
 800890e:	7a1b      	ldrb	r3, [r3, #8]
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b00      	cmp	r3, #0
 8008916:	d14e      	bne.n	80089b6 <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8008918:	466b      	mov	r3, sp
 800891a:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 800891c:	482e      	ldr	r0, [pc, #184]	; (80089d8 <scan_files+0x180>)
 800891e:	f7f7 fc71 	bl	8000204 <strlen>
 8008922:	4604      	mov	r4, r0
 8008924:	4623      	mov	r3, r4
 8008926:	3b01      	subs	r3, #1
 8008928:	653b      	str	r3, [r7, #80]	; 0x50
 800892a:	4620      	mov	r0, r4
 800892c:	f04f 0100 	mov.w	r1, #0
 8008930:	f04f 0200 	mov.w	r2, #0
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	00cb      	lsls	r3, r1, #3
 800893a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800893e:	00c2      	lsls	r2, r0, #3
 8008940:	4620      	mov	r0, r4
 8008942:	f04f 0100 	mov.w	r1, #0
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	00cb      	lsls	r3, r1, #3
 8008950:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008954:	00c2      	lsls	r2, r0, #3
 8008956:	1de3      	adds	r3, r4, #7
 8008958:	08db      	lsrs	r3, r3, #3
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	ebad 0d03 	sub.w	sp, sp, r3
 8008960:	466b      	mov	r3, sp
 8008962:	3300      	adds	r3, #0
 8008964:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8008966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008968:	4619      	mov	r1, r3
 800896a:	481b      	ldr	r0, [pc, #108]	; (80089d8 <scan_files+0x180>)
 800896c:	f000 f8aa 	bl	8008ac4 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8008970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008972:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008976:	4619      	mov	r1, r3
 8008978:	4817      	ldr	r0, [pc, #92]	; (80089d8 <scan_files+0x180>)
 800897a:	f014 fa32 	bl	801cde2 <strncmp>
 800897e:	4603      	mov	r3, r0
 8008980:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8008984:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8008988:	2b00      	cmp	r3, #0
 800898a:	d112      	bne.n	80089b2 <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 800898c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898e:	f107 0214 	add.w	r2, r7, #20
 8008992:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f820 	bl	80089dc <extract_filename_suffix>
 800899c:	4603      	mov	r3, r0
 800899e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d202      	bcs.n	80089b2 <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	46b5      	mov	sp, r6
 80089b4:	e799      	b.n	80088ea <scan_files+0x92>
            	continue; // don't enter directory
 80089b6:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80089b8:	e797      	b.n	80088ea <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 80089ba:	f107 0318 	add.w	r3, r7, #24
 80089be:	4618      	mov	r0, r3
 80089c0:	f00d f8f7 	bl	8015bb2 <f_closedir>
    }

    return res;
 80089c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089c8:	46ad      	mov	sp, r5
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3764      	adds	r7, #100	; 0x64
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000820 	.word	0x20000820
 80089d8:	20000829 	.word	0x20000829

080089dc <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 80089dc:	b5b0      	push	{r4, r5, r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	460b      	mov	r3, r1
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	72fb      	strb	r3, [r7, #11]
 80089ea:	466b      	mov	r3, sp
 80089ec:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7f7 fc08 	bl	8000204 <strlen>
 80089f4:	4603      	mov	r3, r0
 80089f6:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 80089f8:	2308      	movs	r3, #8
 80089fa:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 80089fc:	7f7c      	ldrb	r4, [r7, #29]
 80089fe:	4623      	mov	r3, r4
 8008a00:	3b01      	subs	r3, #1
 8008a02:	61bb      	str	r3, [r7, #24]
 8008a04:	b2e0      	uxtb	r0, r4
 8008a06:	f04f 0100 	mov.w	r1, #0
 8008a0a:	f04f 0200 	mov.w	r2, #0
 8008a0e:	f04f 0300 	mov.w	r3, #0
 8008a12:	00cb      	lsls	r3, r1, #3
 8008a14:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008a18:	00c2      	lsls	r2, r0, #3
 8008a1a:	b2e0      	uxtb	r0, r4
 8008a1c:	f04f 0100 	mov.w	r1, #0
 8008a20:	f04f 0200 	mov.w	r2, #0
 8008a24:	f04f 0300 	mov.w	r3, #0
 8008a28:	00cb      	lsls	r3, r1, #3
 8008a2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008a2e:	00c2      	lsls	r2, r0, #3
 8008a30:	4623      	mov	r3, r4
 8008a32:	3307      	adds	r3, #7
 8008a34:	08db      	lsrs	r3, r3, #3
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	ebad 0d03 	sub.w	sp, sp, r3
 8008a3c:	466b      	mov	r3, sp
 8008a3e:	3300      	adds	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8008a42:	2300      	movs	r3, #0
 8008a44:	77fb      	strb	r3, [r7, #31]
 8008a46:	e014      	b.n	8008a72 <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	1e5a      	subs	r2, r3, #1
 8008a4c:	7ffb      	ldrb	r3, [r7, #31]
 8008a4e:	441a      	add	r2, r3
 8008a50:	7fbb      	ldrb	r3, [r7, #30]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	429a      	cmp	r2, r3
 8008a56:	da11      	bge.n	8008a7c <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8008a58:	7afa      	ldrb	r2, [r7, #11]
 8008a5a:	7ffb      	ldrb	r3, [r7, #31]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	461a      	mov	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	441a      	add	r2, r3
 8008a64:	7ffb      	ldrb	r3, [r7, #31]
 8008a66:	7811      	ldrb	r1, [r2, #0]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8008a6c:	7ffb      	ldrb	r3, [r7, #31]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	77fb      	strb	r3, [r7, #31]
 8008a72:	7ffa      	ldrb	r2, [r7, #31]
 8008a74:	7f7b      	ldrb	r3, [r7, #29]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d3e6      	bcc.n	8008a48 <extract_filename_suffix+0x6c>
 8008a7a:	e000      	b.n	8008a7e <extract_filename_suffix+0xa2>
		}
		else break;
 8008a7c:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f107 0110 	add.w	r1, r7, #16
 8008a84:	220a      	movs	r2, #10
 8008a86:	4618      	mov	r0, r3
 8008a88:	f015 f870 	bl	801db6c <strtol>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	461a      	mov	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d00a      	beq.n	8008ab2 <extract_filename_suffix+0xd6>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aa4:	d005      	beq.n	8008ab2 <extract_filename_suffix+0xd6>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d101      	bne.n	8008ab6 <extract_filename_suffix+0xda>
	{
		return 1;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e000      	b.n	8008ab8 <extract_filename_suffix+0xdc>
	}

	return 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	46ad      	mov	sp, r5
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008ac4 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8008ac4:	b590      	push	{r4, r7, lr}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
 8008ad2:	e019      	b.n	8008b08 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	4413      	add	r3, r2
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	73bb      	strb	r3, [r7, #14]
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	4a0f      	ldr	r2, [pc, #60]	; (8008b20 <str2upper+0x5c>)
 8008ae4:	4413      	add	r3, r2
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	f003 0303 	and.w	r3, r3, #3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d102      	bne.n	8008af6 <str2upper+0x32>
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	3b20      	subs	r3, #32
 8008af4:	e000      	b.n	8008af8 <str2upper+0x34>
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	7bfa      	ldrb	r2, [r7, #15]
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	440a      	add	r2, r1
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	3301      	adds	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
 8008b08:	7bfc      	ldrb	r4, [r7, #15]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7f7 fb7a 	bl	8000204 <strlen>
 8008b10:	4603      	mov	r3, r0
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d3de      	bcc.n	8008ad4 <str2upper+0x10>
	}
}
 8008b16:	bf00      	nop
 8008b18:	bf00      	nop
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd90      	pop	{r4, r7, pc}
 8008b20:	080231c8 	.word	0x080231c8

08008b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b28:	4b0e      	ldr	r3, [pc, #56]	; (8008b64 <HAL_Init+0x40>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a0d      	ldr	r2, [pc, #52]	; (8008b64 <HAL_Init+0x40>)
 8008b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b34:	4b0b      	ldr	r3, [pc, #44]	; (8008b64 <HAL_Init+0x40>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a0a      	ldr	r2, [pc, #40]	; (8008b64 <HAL_Init+0x40>)
 8008b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b40:	4b08      	ldr	r3, [pc, #32]	; (8008b64 <HAL_Init+0x40>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a07      	ldr	r2, [pc, #28]	; (8008b64 <HAL_Init+0x40>)
 8008b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b4c:	2003      	movs	r0, #3
 8008b4e:	f000 fd30 	bl	80095b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b52:	2000      	movs	r0, #0
 8008b54:	f7fa fc56 	bl	8003404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008b58:	f7fa f91a 	bl	8002d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	40023c00 	.word	0x40023c00

08008b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <HAL_IncTick+0x20>)
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	461a      	mov	r2, r3
 8008b72:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <HAL_IncTick+0x24>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4413      	add	r3, r2
 8008b78:	4a04      	ldr	r2, [pc, #16]	; (8008b8c <HAL_IncTick+0x24>)
 8008b7a:	6013      	str	r3, [r2, #0]
}
 8008b7c:	bf00      	nop
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20000064 	.word	0x20000064
 8008b8c:	2000733c 	.word	0x2000733c

08008b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
  return uwTick;
 8008b94:	4b03      	ldr	r3, [pc, #12]	; (8008ba4 <HAL_GetTick+0x14>)
 8008b96:	681b      	ldr	r3, [r3, #0]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	2000733c 	.word	0x2000733c

08008ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008bb0:	f7ff ffee 	bl	8008b90 <HAL_GetTick>
 8008bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc0:	d005      	beq.n	8008bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <HAL_Delay+0x44>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4413      	add	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008bce:	bf00      	nop
 8008bd0:	f7ff ffde 	bl	8008b90 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d8f7      	bhi.n	8008bd0 <HAL_Delay+0x28>
  {
  }
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	20000064 	.word	0x20000064

08008bf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e033      	b.n	8008c6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fa f8ea 	bl	8002de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	f003 0310 	and.w	r3, r3, #16
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d118      	bne.n	8008c60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008c36:	f023 0302 	bic.w	r3, r3, #2
 8008c3a:	f043 0202 	orr.w	r2, r3, #2
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fae8 	bl	8009218 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c52:	f023 0303 	bic.w	r3, r3, #3
 8008c56:	f043 0201 	orr.w	r2, r3, #1
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	641a      	str	r2, [r3, #64]	; 0x40
 8008c5e:	e001      	b.n	8008c64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d101      	bne.n	8008c92 <HAL_ADC_Start+0x1a>
 8008c8e:	2302      	movs	r3, #2
 8008c90:	e0b2      	b.n	8008df8 <HAL_ADC_Start+0x180>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d018      	beq.n	8008cda <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0201 	orr.w	r2, r2, #1
 8008cb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008cb8:	4b52      	ldr	r3, [pc, #328]	; (8008e04 <HAL_ADC_Start+0x18c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a52      	ldr	r2, [pc, #328]	; (8008e08 <HAL_ADC_Start+0x190>)
 8008cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc2:	0c9a      	lsrs	r2, r3, #18
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	4413      	add	r3, r2
 8008cca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008ccc:	e002      	b.n	8008cd4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1f9      	bne.n	8008cce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d17a      	bne.n	8008dde <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008cf0:	f023 0301 	bic.w	r3, r3, #1
 8008cf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d007      	beq.n	8008d1a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008d12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d26:	d106      	bne.n	8008d36 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2c:	f023 0206 	bic.w	r2, r3, #6
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	645a      	str	r2, [r3, #68]	; 0x44
 8008d34:	e002      	b.n	8008d3c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008d44:	4b31      	ldr	r3, [pc, #196]	; (8008e0c <HAL_ADC_Start+0x194>)
 8008d46:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008d50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f003 031f 	and.w	r3, r3, #31
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d12a      	bne.n	8008db4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a2b      	ldr	r2, [pc, #172]	; (8008e10 <HAL_ADC_Start+0x198>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d015      	beq.n	8008d94 <HAL_ADC_Start+0x11c>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a29      	ldr	r2, [pc, #164]	; (8008e14 <HAL_ADC_Start+0x19c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d105      	bne.n	8008d7e <HAL_ADC_Start+0x106>
 8008d72:	4b26      	ldr	r3, [pc, #152]	; (8008e0c <HAL_ADC_Start+0x194>)
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f003 031f 	and.w	r3, r3, #31
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a25      	ldr	r2, [pc, #148]	; (8008e18 <HAL_ADC_Start+0x1a0>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d136      	bne.n	8008df6 <HAL_ADC_Start+0x17e>
 8008d88:	4b20      	ldr	r3, [pc, #128]	; (8008e0c <HAL_ADC_Start+0x194>)
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f003 0310 	and.w	r3, r3, #16
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d130      	bne.n	8008df6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d129      	bne.n	8008df6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008db0:	609a      	str	r2, [r3, #8]
 8008db2:	e020      	b.n	8008df6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a15      	ldr	r2, [pc, #84]	; (8008e10 <HAL_ADC_Start+0x198>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d11b      	bne.n	8008df6 <HAL_ADC_Start+0x17e>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d114      	bne.n	8008df6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008dda:	609a      	str	r2, [r3, #8]
 8008ddc:	e00b      	b.n	8008df6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f043 0210 	orr.w	r2, r3, #16
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dee:	f043 0201 	orr.w	r2, r3, #1
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	20000004 	.word	0x20000004
 8008e08:	431bde83 	.word	0x431bde83
 8008e0c:	40012300 	.word	0x40012300
 8008e10:	40012000 	.word	0x40012000
 8008e14:	40012100 	.word	0x40012100
 8008e18:	40012200 	.word	0x40012200

08008e1c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d101      	bne.n	8008e32 <HAL_ADC_Stop+0x16>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e021      	b.n	8008e76 <HAL_ADC_Stop+0x5a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0201 	bic.w	r2, r2, #1
 8008e48:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d109      	bne.n	8008e6c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e60:	f023 0301 	bic.w	r3, r3, #1
 8008e64:	f043 0201 	orr.w	r2, r3, #1
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e9e:	d113      	bne.n	8008ec8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eae:	d10b      	bne.n	8008ec8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	f043 0220 	orr.w	r2, r3, #32
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e063      	b.n	8008f90 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008ec8:	f7ff fe62 	bl	8008b90 <HAL_GetTick>
 8008ecc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008ece:	e021      	b.n	8008f14 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed6:	d01d      	beq.n	8008f14 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d007      	beq.n	8008eee <HAL_ADC_PollForConversion+0x6c>
 8008ede:	f7ff fe57 	bl	8008b90 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d212      	bcs.n	8008f14 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d00b      	beq.n	8008f14 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f00:	f043 0204 	orr.w	r2, r3, #4
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e03d      	b.n	8008f90 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d1d6      	bne.n	8008ed0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f06f 0212 	mvn.w	r2, #18
 8008f2a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d123      	bne.n	8008f8e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d11f      	bne.n	8008f8e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d006      	beq.n	8008f6a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d111      	bne.n	8008f8e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d105      	bne.n	8008f8e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	f043 0201 	orr.w	r2, r3, #1
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
	...

08008fb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d101      	bne.n	8008fd0 <HAL_ADC_ConfigChannel+0x1c>
 8008fcc:	2302      	movs	r3, #2
 8008fce:	e113      	b.n	80091f8 <HAL_ADC_ConfigChannel+0x244>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b09      	cmp	r3, #9
 8008fde:	d925      	bls.n	800902c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68d9      	ldr	r1, [r3, #12]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	461a      	mov	r2, r3
 8008fee:	4613      	mov	r3, r2
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	4413      	add	r3, r2
 8008ff4:	3b1e      	subs	r3, #30
 8008ff6:	2207      	movs	r2, #7
 8008ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffc:	43da      	mvns	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	400a      	ands	r2, r1
 8009004:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68d9      	ldr	r1, [r3, #12]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	4618      	mov	r0, r3
 8009018:	4603      	mov	r3, r0
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	4403      	add	r3, r0
 800901e:	3b1e      	subs	r3, #30
 8009020:	409a      	lsls	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	60da      	str	r2, [r3, #12]
 800902a:	e022      	b.n	8009072 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6919      	ldr	r1, [r3, #16]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	b29b      	uxth	r3, r3
 8009038:	461a      	mov	r2, r3
 800903a:	4613      	mov	r3, r2
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	4413      	add	r3, r2
 8009040:	2207      	movs	r2, #7
 8009042:	fa02 f303 	lsl.w	r3, r2, r3
 8009046:	43da      	mvns	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	400a      	ands	r2, r1
 800904e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6919      	ldr	r1, [r3, #16]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	4618      	mov	r0, r3
 8009062:	4603      	mov	r3, r0
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	4403      	add	r3, r0
 8009068:	409a      	lsls	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	2b06      	cmp	r3, #6
 8009078:	d824      	bhi.n	80090c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	3b05      	subs	r3, #5
 800908c:	221f      	movs	r2, #31
 800908e:	fa02 f303 	lsl.w	r3, r2, r3
 8009092:	43da      	mvns	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	400a      	ands	r2, r1
 800909a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	4618      	mov	r0, r3
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	3b05      	subs	r3, #5
 80090b6:	fa00 f203 	lsl.w	r2, r0, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	635a      	str	r2, [r3, #52]	; 0x34
 80090c2:	e04c      	b.n	800915e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	2b0c      	cmp	r3, #12
 80090ca:	d824      	bhi.n	8009116 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	4613      	mov	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	3b23      	subs	r3, #35	; 0x23
 80090de:	221f      	movs	r2, #31
 80090e0:	fa02 f303 	lsl.w	r3, r2, r3
 80090e4:	43da      	mvns	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	400a      	ands	r2, r1
 80090ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	4618      	mov	r0, r3
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	3b23      	subs	r3, #35	; 0x23
 8009108:	fa00 f203 	lsl.w	r2, r0, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	631a      	str	r2, [r3, #48]	; 0x30
 8009114:	e023      	b.n	800915e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	3b41      	subs	r3, #65	; 0x41
 8009128:	221f      	movs	r2, #31
 800912a:	fa02 f303 	lsl.w	r3, r2, r3
 800912e:	43da      	mvns	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	400a      	ands	r2, r1
 8009136:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	b29b      	uxth	r3, r3
 8009144:	4618      	mov	r0, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	3b41      	subs	r3, #65	; 0x41
 8009152:	fa00 f203 	lsl.w	r2, r0, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	430a      	orrs	r2, r1
 800915c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800915e:	4b29      	ldr	r3, [pc, #164]	; (8009204 <HAL_ADC_ConfigChannel+0x250>)
 8009160:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a28      	ldr	r2, [pc, #160]	; (8009208 <HAL_ADC_ConfigChannel+0x254>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d10f      	bne.n	800918c <HAL_ADC_ConfigChannel+0x1d8>
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b12      	cmp	r3, #18
 8009172:	d10b      	bne.n	800918c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a1d      	ldr	r2, [pc, #116]	; (8009208 <HAL_ADC_ConfigChannel+0x254>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d12b      	bne.n	80091ee <HAL_ADC_ConfigChannel+0x23a>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a1c      	ldr	r2, [pc, #112]	; (800920c <HAL_ADC_ConfigChannel+0x258>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d003      	beq.n	80091a8 <HAL_ADC_ConfigChannel+0x1f4>
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b11      	cmp	r3, #17
 80091a6:	d122      	bne.n	80091ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a11      	ldr	r2, [pc, #68]	; (800920c <HAL_ADC_ConfigChannel+0x258>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d111      	bne.n	80091ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80091ca:	4b11      	ldr	r3, [pc, #68]	; (8009210 <HAL_ADC_ConfigChannel+0x25c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a11      	ldr	r2, [pc, #68]	; (8009214 <HAL_ADC_ConfigChannel+0x260>)
 80091d0:	fba2 2303 	umull	r2, r3, r2, r3
 80091d4:	0c9a      	lsrs	r2, r3, #18
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80091e0:	e002      	b.n	80091e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1f9      	bne.n	80091e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	40012300 	.word	0x40012300
 8009208:	40012000 	.word	0x40012000
 800920c:	10000012 	.word	0x10000012
 8009210:	20000004 	.word	0x20000004
 8009214:	431bde83 	.word	0x431bde83

08009218 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009220:	4b79      	ldr	r3, [pc, #484]	; (8009408 <ADC_Init+0x1f0>)
 8009222:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	431a      	orrs	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800924c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6859      	ldr	r1, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	021a      	lsls	r2, r3, #8
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009270:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6859      	ldr	r1, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009292:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6899      	ldr	r1, [r3, #8]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092aa:	4a58      	ldr	r2, [pc, #352]	; (800940c <ADC_Init+0x1f4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d022      	beq.n	80092f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689a      	ldr	r2, [r3, #8]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80092be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6899      	ldr	r1, [r3, #8]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80092e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6899      	ldr	r1, [r3, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	609a      	str	r2, [r3, #8]
 80092f4:	e00f      	b.n	8009316 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009304:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009314:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0202 	bic.w	r2, r2, #2
 8009324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6899      	ldr	r1, [r3, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	7e1b      	ldrb	r3, [r3, #24]
 8009330:	005a      	lsls	r2, r3, #1
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d01b      	beq.n	800937c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009352:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009362:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6859      	ldr	r1, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	3b01      	subs	r3, #1
 8009370:	035a      	lsls	r2, r3, #13
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	605a      	str	r2, [r3, #4]
 800937a:	e007      	b.n	800938c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800938a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800939a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	051a      	lsls	r2, r3, #20
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80093c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6899      	ldr	r1, [r3, #8]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093ce:	025a      	lsls	r2, r3, #9
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6899      	ldr	r1, [r3, #8]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	029a      	lsls	r2, r3, #10
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	609a      	str	r2, [r3, #8]
}
 80093fc:	bf00      	nop
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	40012300 	.word	0x40012300
 800940c:	0f000001 	.word	0x0f000001

08009410 <__NVIC_SetPriorityGrouping>:
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009420:	4b0c      	ldr	r3, [pc, #48]	; (8009454 <__NVIC_SetPriorityGrouping+0x44>)
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800942c:	4013      	ands	r3, r2
 800942e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800943c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009442:	4a04      	ldr	r2, [pc, #16]	; (8009454 <__NVIC_SetPriorityGrouping+0x44>)
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	60d3      	str	r3, [r2, #12]
}
 8009448:	bf00      	nop
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	e000ed00 	.word	0xe000ed00

08009458 <__NVIC_GetPriorityGrouping>:
{
 8009458:	b480      	push	{r7}
 800945a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800945c:	4b04      	ldr	r3, [pc, #16]	; (8009470 <__NVIC_GetPriorityGrouping+0x18>)
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	0a1b      	lsrs	r3, r3, #8
 8009462:	f003 0307 	and.w	r3, r3, #7
}
 8009466:	4618      	mov	r0, r3
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	e000ed00 	.word	0xe000ed00

08009474 <__NVIC_EnableIRQ>:
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800947e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009482:	2b00      	cmp	r3, #0
 8009484:	db0b      	blt.n	800949e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	f003 021f 	and.w	r2, r3, #31
 800948c:	4907      	ldr	r1, [pc, #28]	; (80094ac <__NVIC_EnableIRQ+0x38>)
 800948e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009492:	095b      	lsrs	r3, r3, #5
 8009494:	2001      	movs	r0, #1
 8009496:	fa00 f202 	lsl.w	r2, r0, r2
 800949a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	e000e100 	.word	0xe000e100

080094b0 <__NVIC_DisableIRQ>:
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	db12      	blt.n	80094e8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	f003 021f 	and.w	r2, r3, #31
 80094c8:	490a      	ldr	r1, [pc, #40]	; (80094f4 <__NVIC_DisableIRQ+0x44>)
 80094ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094ce:	095b      	lsrs	r3, r3, #5
 80094d0:	2001      	movs	r0, #1
 80094d2:	fa00 f202 	lsl.w	r2, r0, r2
 80094d6:	3320      	adds	r3, #32
 80094d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80094dc:	f3bf 8f4f 	dsb	sy
}
 80094e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80094e2:	f3bf 8f6f 	isb	sy
}
 80094e6:	bf00      	nop
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	e000e100 	.word	0xe000e100

080094f8 <__NVIC_SetPriority>:
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	6039      	str	r1, [r7, #0]
 8009502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009508:	2b00      	cmp	r3, #0
 800950a:	db0a      	blt.n	8009522 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	b2da      	uxtb	r2, r3
 8009510:	490c      	ldr	r1, [pc, #48]	; (8009544 <__NVIC_SetPriority+0x4c>)
 8009512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009516:	0112      	lsls	r2, r2, #4
 8009518:	b2d2      	uxtb	r2, r2
 800951a:	440b      	add	r3, r1
 800951c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009520:	e00a      	b.n	8009538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	b2da      	uxtb	r2, r3
 8009526:	4908      	ldr	r1, [pc, #32]	; (8009548 <__NVIC_SetPriority+0x50>)
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	f003 030f 	and.w	r3, r3, #15
 800952e:	3b04      	subs	r3, #4
 8009530:	0112      	lsls	r2, r2, #4
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	440b      	add	r3, r1
 8009536:	761a      	strb	r2, [r3, #24]
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	e000e100 	.word	0xe000e100
 8009548:	e000ed00 	.word	0xe000ed00

0800954c <NVIC_EncodePriority>:
{
 800954c:	b480      	push	{r7}
 800954e:	b089      	sub	sp, #36	; 0x24
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f003 0307 	and.w	r3, r3, #7
 800955e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	f1c3 0307 	rsb	r3, r3, #7
 8009566:	2b04      	cmp	r3, #4
 8009568:	bf28      	it	cs
 800956a:	2304      	movcs	r3, #4
 800956c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	3304      	adds	r3, #4
 8009572:	2b06      	cmp	r3, #6
 8009574:	d902      	bls.n	800957c <NVIC_EncodePriority+0x30>
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	3b03      	subs	r3, #3
 800957a:	e000      	b.n	800957e <NVIC_EncodePriority+0x32>
 800957c:	2300      	movs	r3, #0
 800957e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009580:	f04f 32ff 	mov.w	r2, #4294967295
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	fa02 f303 	lsl.w	r3, r2, r3
 800958a:	43da      	mvns	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	401a      	ands	r2, r3
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009594:	f04f 31ff 	mov.w	r1, #4294967295
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	fa01 f303 	lsl.w	r3, r1, r3
 800959e:	43d9      	mvns	r1, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095a4:	4313      	orrs	r3, r2
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3724      	adds	r7, #36	; 0x24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff ff28 	bl	8009410 <__NVIC_SetPriorityGrouping>
}
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80095da:	f7ff ff3d 	bl	8009458 <__NVIC_GetPriorityGrouping>
 80095de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	68b9      	ldr	r1, [r7, #8]
 80095e4:	6978      	ldr	r0, [r7, #20]
 80095e6:	f7ff ffb1 	bl	800954c <NVIC_EncodePriority>
 80095ea:	4602      	mov	r2, r0
 80095ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff ff80 	bl	80094f8 <__NVIC_SetPriority>
}
 80095f8:	bf00      	nop
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800960a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff ff30 	bl	8009474 <__NVIC_EnableIRQ>
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff ff40 	bl	80094b0 <__NVIC_DisableIRQ>
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009638:	b480      	push	{r7}
 800963a:	b089      	sub	sp, #36	; 0x24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009642:	2300      	movs	r3, #0
 8009644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009646:	2300      	movs	r3, #0
 8009648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800964a:	2300      	movs	r3, #0
 800964c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800964e:	2300      	movs	r3, #0
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	e177      	b.n	8009944 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009654:	2201      	movs	r2, #1
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	fa02 f303 	lsl.w	r3, r2, r3
 800965c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	4013      	ands	r3, r2
 8009666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	429a      	cmp	r2, r3
 800966e:	f040 8166 	bne.w	800993e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f003 0303 	and.w	r3, r3, #3
 800967a:	2b01      	cmp	r3, #1
 800967c:	d005      	beq.n	800968a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009686:	2b02      	cmp	r3, #2
 8009688:	d130      	bne.n	80096ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	2203      	movs	r2, #3
 8009696:	fa02 f303 	lsl.w	r3, r2, r3
 800969a:	43db      	mvns	r3, r3
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	4013      	ands	r3, r2
 80096a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	68da      	ldr	r2, [r3, #12]
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	005b      	lsls	r3, r3, #1
 80096aa:	fa02 f303 	lsl.w	r3, r2, r3
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80096c0:	2201      	movs	r2, #1
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	fa02 f303 	lsl.w	r3, r2, r3
 80096c8:	43db      	mvns	r3, r3
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	4013      	ands	r3, r2
 80096ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	091b      	lsrs	r3, r3, #4
 80096d6:	f003 0201 	and.w	r2, r3, #1
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	fa02 f303 	lsl.w	r3, r2, r3
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	d017      	beq.n	8009728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	2203      	movs	r2, #3
 8009704:	fa02 f303 	lsl.w	r3, r2, r3
 8009708:	43db      	mvns	r3, r3
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	4013      	ands	r3, r2
 800970e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	689a      	ldr	r2, [r3, #8]
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	005b      	lsls	r3, r3, #1
 8009718:	fa02 f303 	lsl.w	r3, r2, r3
 800971c:	69ba      	ldr	r2, [r7, #24]
 800971e:	4313      	orrs	r3, r2
 8009720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	2b02      	cmp	r3, #2
 8009732:	d123      	bne.n	800977c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	08da      	lsrs	r2, r3, #3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3208      	adds	r2, #8
 800973c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	f003 0307 	and.w	r3, r3, #7
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	220f      	movs	r2, #15
 800974c:	fa02 f303 	lsl.w	r3, r2, r3
 8009750:	43db      	mvns	r3, r3
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	4013      	ands	r3, r2
 8009756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	691a      	ldr	r2, [r3, #16]
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	fa02 f303 	lsl.w	r3, r2, r3
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	4313      	orrs	r3, r2
 800976c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	08da      	lsrs	r2, r3, #3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3208      	adds	r2, #8
 8009776:	69b9      	ldr	r1, [r7, #24]
 8009778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	2203      	movs	r2, #3
 8009788:	fa02 f303 	lsl.w	r3, r2, r3
 800978c:	43db      	mvns	r3, r3
 800978e:	69ba      	ldr	r2, [r7, #24]
 8009790:	4013      	ands	r3, r2
 8009792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	f003 0203 	and.w	r2, r3, #3
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	fa02 f303 	lsl.w	r3, r2, r3
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 80c0 	beq.w	800993e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	4b66      	ldr	r3, [pc, #408]	; (800995c <HAL_GPIO_Init+0x324>)
 80097c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c6:	4a65      	ldr	r2, [pc, #404]	; (800995c <HAL_GPIO_Init+0x324>)
 80097c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097cc:	6453      	str	r3, [r2, #68]	; 0x44
 80097ce:	4b63      	ldr	r3, [pc, #396]	; (800995c <HAL_GPIO_Init+0x324>)
 80097d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80097da:	4a61      	ldr	r2, [pc, #388]	; (8009960 <HAL_GPIO_Init+0x328>)
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	089b      	lsrs	r3, r3, #2
 80097e0:	3302      	adds	r3, #2
 80097e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	f003 0303 	and.w	r3, r3, #3
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	220f      	movs	r2, #15
 80097f2:	fa02 f303 	lsl.w	r3, r2, r3
 80097f6:	43db      	mvns	r3, r3
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	4013      	ands	r3, r2
 80097fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a58      	ldr	r2, [pc, #352]	; (8009964 <HAL_GPIO_Init+0x32c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d037      	beq.n	8009876 <HAL_GPIO_Init+0x23e>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a57      	ldr	r2, [pc, #348]	; (8009968 <HAL_GPIO_Init+0x330>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d031      	beq.n	8009872 <HAL_GPIO_Init+0x23a>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a56      	ldr	r2, [pc, #344]	; (800996c <HAL_GPIO_Init+0x334>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d02b      	beq.n	800986e <HAL_GPIO_Init+0x236>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a55      	ldr	r2, [pc, #340]	; (8009970 <HAL_GPIO_Init+0x338>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d025      	beq.n	800986a <HAL_GPIO_Init+0x232>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a54      	ldr	r2, [pc, #336]	; (8009974 <HAL_GPIO_Init+0x33c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d01f      	beq.n	8009866 <HAL_GPIO_Init+0x22e>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a53      	ldr	r2, [pc, #332]	; (8009978 <HAL_GPIO_Init+0x340>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d019      	beq.n	8009862 <HAL_GPIO_Init+0x22a>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a52      	ldr	r2, [pc, #328]	; (800997c <HAL_GPIO_Init+0x344>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d013      	beq.n	800985e <HAL_GPIO_Init+0x226>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a51      	ldr	r2, [pc, #324]	; (8009980 <HAL_GPIO_Init+0x348>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d00d      	beq.n	800985a <HAL_GPIO_Init+0x222>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a50      	ldr	r2, [pc, #320]	; (8009984 <HAL_GPIO_Init+0x34c>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d007      	beq.n	8009856 <HAL_GPIO_Init+0x21e>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a4f      	ldr	r2, [pc, #316]	; (8009988 <HAL_GPIO_Init+0x350>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d101      	bne.n	8009852 <HAL_GPIO_Init+0x21a>
 800984e:	2309      	movs	r3, #9
 8009850:	e012      	b.n	8009878 <HAL_GPIO_Init+0x240>
 8009852:	230a      	movs	r3, #10
 8009854:	e010      	b.n	8009878 <HAL_GPIO_Init+0x240>
 8009856:	2308      	movs	r3, #8
 8009858:	e00e      	b.n	8009878 <HAL_GPIO_Init+0x240>
 800985a:	2307      	movs	r3, #7
 800985c:	e00c      	b.n	8009878 <HAL_GPIO_Init+0x240>
 800985e:	2306      	movs	r3, #6
 8009860:	e00a      	b.n	8009878 <HAL_GPIO_Init+0x240>
 8009862:	2305      	movs	r3, #5
 8009864:	e008      	b.n	8009878 <HAL_GPIO_Init+0x240>
 8009866:	2304      	movs	r3, #4
 8009868:	e006      	b.n	8009878 <HAL_GPIO_Init+0x240>
 800986a:	2303      	movs	r3, #3
 800986c:	e004      	b.n	8009878 <HAL_GPIO_Init+0x240>
 800986e:	2302      	movs	r3, #2
 8009870:	e002      	b.n	8009878 <HAL_GPIO_Init+0x240>
 8009872:	2301      	movs	r3, #1
 8009874:	e000      	b.n	8009878 <HAL_GPIO_Init+0x240>
 8009876:	2300      	movs	r3, #0
 8009878:	69fa      	ldr	r2, [r7, #28]
 800987a:	f002 0203 	and.w	r2, r2, #3
 800987e:	0092      	lsls	r2, r2, #2
 8009880:	4093      	lsls	r3, r2
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	4313      	orrs	r3, r2
 8009886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009888:	4935      	ldr	r1, [pc, #212]	; (8009960 <HAL_GPIO_Init+0x328>)
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	089b      	lsrs	r3, r3, #2
 800988e:	3302      	adds	r3, #2
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009896:	4b3d      	ldr	r3, [pc, #244]	; (800998c <HAL_GPIO_Init+0x354>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	43db      	mvns	r3, r3
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	4013      	ands	r3, r2
 80098a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80098ba:	4a34      	ldr	r2, [pc, #208]	; (800998c <HAL_GPIO_Init+0x354>)
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80098c0:	4b32      	ldr	r3, [pc, #200]	; (800998c <HAL_GPIO_Init+0x354>)
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	43db      	mvns	r3, r3
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	4013      	ands	r3, r2
 80098ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80098dc:	69ba      	ldr	r2, [r7, #24]
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80098e4:	4a29      	ldr	r2, [pc, #164]	; (800998c <HAL_GPIO_Init+0x354>)
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80098ea:	4b28      	ldr	r3, [pc, #160]	; (800998c <HAL_GPIO_Init+0x354>)
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	43db      	mvns	r3, r3
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	4013      	ands	r3, r2
 80098f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009906:	69ba      	ldr	r2, [r7, #24]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	4313      	orrs	r3, r2
 800990c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800990e:	4a1f      	ldr	r2, [pc, #124]	; (800998c <HAL_GPIO_Init+0x354>)
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009914:	4b1d      	ldr	r3, [pc, #116]	; (800998c <HAL_GPIO_Init+0x354>)
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	43db      	mvns	r3, r3
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	4013      	ands	r3, r2
 8009922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	4313      	orrs	r3, r2
 8009936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009938:	4a14      	ldr	r2, [pc, #80]	; (800998c <HAL_GPIO_Init+0x354>)
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	3301      	adds	r3, #1
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	2b0f      	cmp	r3, #15
 8009948:	f67f ae84 	bls.w	8009654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800994c:	bf00      	nop
 800994e:	bf00      	nop
 8009950:	3724      	adds	r7, #36	; 0x24
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	40023800 	.word	0x40023800
 8009960:	40013800 	.word	0x40013800
 8009964:	40020000 	.word	0x40020000
 8009968:	40020400 	.word	0x40020400
 800996c:	40020800 	.word	0x40020800
 8009970:	40020c00 	.word	0x40020c00
 8009974:	40021000 	.word	0x40021000
 8009978:	40021400 	.word	0x40021400
 800997c:	40021800 	.word	0x40021800
 8009980:	40021c00 	.word	0x40021c00
 8009984:	40022000 	.word	0x40022000
 8009988:	40022400 	.word	0x40022400
 800998c:	40013c00 	.word	0x40013c00

08009990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691a      	ldr	r2, [r3, #16]
 80099a0:	887b      	ldrh	r3, [r7, #2]
 80099a2:	4013      	ands	r3, r2
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80099a8:	2301      	movs	r3, #1
 80099aa:	73fb      	strb	r3, [r7, #15]
 80099ac:	e001      	b.n	80099b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80099ae:	2300      	movs	r3, #0
 80099b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	807b      	strh	r3, [r7, #2]
 80099cc:	4613      	mov	r3, r2
 80099ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80099d0:	787b      	ldrb	r3, [r7, #1]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80099d6:	887a      	ldrh	r2, [r7, #2]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80099dc:	e003      	b.n	80099e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80099de:	887b      	ldrh	r3, [r7, #2]
 80099e0:	041a      	lsls	r2, r3, #16
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	619a      	str	r2, [r3, #24]
}
 80099e6:	bf00      	nop
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
	...

080099f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80099fe:	4b08      	ldr	r3, [pc, #32]	; (8009a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a00:	695a      	ldr	r2, [r3, #20]
 8009a02:	88fb      	ldrh	r3, [r7, #6]
 8009a04:	4013      	ands	r3, r2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d006      	beq.n	8009a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009a0a:	4a05      	ldr	r2, [pc, #20]	; (8009a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a0c:	88fb      	ldrh	r3, [r7, #6]
 8009a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009a10:	88fb      	ldrh	r3, [r7, #6]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fa f956 	bl	8003cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	40013c00 	.word	0x40013c00

08009a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e12b      	b.n	8009c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d106      	bne.n	8009a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7f9 fa10 	bl	8002e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2224      	movs	r2, #36	; 0x24
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 0201 	bic.w	r2, r2, #1
 8009a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009a88:	f002 fe9a 	bl	800c7c0 <HAL_RCC_GetPCLK1Freq>
 8009a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	4a81      	ldr	r2, [pc, #516]	; (8009c98 <HAL_I2C_Init+0x274>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d807      	bhi.n	8009aa8 <HAL_I2C_Init+0x84>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4a80      	ldr	r2, [pc, #512]	; (8009c9c <HAL_I2C_Init+0x278>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	bf94      	ite	ls
 8009aa0:	2301      	movls	r3, #1
 8009aa2:	2300      	movhi	r3, #0
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	e006      	b.n	8009ab6 <HAL_I2C_Init+0x92>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4a7d      	ldr	r2, [pc, #500]	; (8009ca0 <HAL_I2C_Init+0x27c>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	bf94      	ite	ls
 8009ab0:	2301      	movls	r3, #1
 8009ab2:	2300      	movhi	r3, #0
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e0e7      	b.n	8009c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	4a78      	ldr	r2, [pc, #480]	; (8009ca4 <HAL_I2C_Init+0x280>)
 8009ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac6:	0c9b      	lsrs	r3, r3, #18
 8009ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	4a6a      	ldr	r2, [pc, #424]	; (8009c98 <HAL_I2C_Init+0x274>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d802      	bhi.n	8009af8 <HAL_I2C_Init+0xd4>
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	3301      	adds	r3, #1
 8009af6:	e009      	b.n	8009b0c <HAL_I2C_Init+0xe8>
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009afe:	fb02 f303 	mul.w	r3, r2, r3
 8009b02:	4a69      	ldr	r2, [pc, #420]	; (8009ca8 <HAL_I2C_Init+0x284>)
 8009b04:	fba2 2303 	umull	r2, r3, r2, r3
 8009b08:	099b      	lsrs	r3, r3, #6
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	6812      	ldr	r2, [r2, #0]
 8009b10:	430b      	orrs	r3, r1
 8009b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009b1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	495c      	ldr	r1, [pc, #368]	; (8009c98 <HAL_I2C_Init+0x274>)
 8009b28:	428b      	cmp	r3, r1
 8009b2a:	d819      	bhi.n	8009b60 <HAL_I2C_Init+0x13c>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	1e59      	subs	r1, r3, #1
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b3a:	1c59      	adds	r1, r3, #1
 8009b3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009b40:	400b      	ands	r3, r1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00a      	beq.n	8009b5c <HAL_I2C_Init+0x138>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	1e59      	subs	r1, r3, #1
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b54:	3301      	adds	r3, #1
 8009b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b5a:	e051      	b.n	8009c00 <HAL_I2C_Init+0x1dc>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	e04f      	b.n	8009c00 <HAL_I2C_Init+0x1dc>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d111      	bne.n	8009b8c <HAL_I2C_Init+0x168>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	1e58      	subs	r0, r3, #1
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6859      	ldr	r1, [r3, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	440b      	add	r3, r1
 8009b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bf0c      	ite	eq
 8009b84:	2301      	moveq	r3, #1
 8009b86:	2300      	movne	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	e012      	b.n	8009bb2 <HAL_I2C_Init+0x18e>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	1e58      	subs	r0, r3, #1
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6859      	ldr	r1, [r3, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	440b      	add	r3, r1
 8009b9a:	0099      	lsls	r1, r3, #2
 8009b9c:	440b      	add	r3, r1
 8009b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	bf0c      	ite	eq
 8009bac:	2301      	moveq	r3, #1
 8009bae:	2300      	movne	r3, #0
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <HAL_I2C_Init+0x196>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e022      	b.n	8009c00 <HAL_I2C_Init+0x1dc>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10e      	bne.n	8009be0 <HAL_I2C_Init+0x1bc>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	1e58      	subs	r0, r3, #1
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6859      	ldr	r1, [r3, #4]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	440b      	add	r3, r1
 8009bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bde:	e00f      	b.n	8009c00 <HAL_I2C_Init+0x1dc>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	1e58      	subs	r0, r3, #1
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6859      	ldr	r1, [r3, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	440b      	add	r3, r1
 8009bee:	0099      	lsls	r1, r3, #2
 8009bf0:	440b      	add	r3, r1
 8009bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	6809      	ldr	r1, [r1, #0]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	69da      	ldr	r2, [r3, #28]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009c2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	6911      	ldr	r1, [r2, #16]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	68d2      	ldr	r2, [r2, #12]
 8009c3a:	4311      	orrs	r1, r2
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	6812      	ldr	r2, [r2, #0]
 8009c40:	430b      	orrs	r3, r1
 8009c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	695a      	ldr	r2, [r3, #20]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f042 0201 	orr.w	r2, r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	000186a0 	.word	0x000186a0
 8009c9c:	001e847f 	.word	0x001e847f
 8009ca0:	003d08ff 	.word	0x003d08ff
 8009ca4:	431bde83 	.word	0x431bde83
 8009ca8:	10624dd3 	.word	0x10624dd3

08009cac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b088      	sub	sp, #32
 8009cb0:	af02      	add	r7, sp, #8
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	817b      	strh	r3, [r7, #10]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	813b      	strh	r3, [r7, #8]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009cc6:	f7fe ff63 	bl	8008b90 <HAL_GetTick>
 8009cca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b20      	cmp	r3, #32
 8009cd6:	f040 80d9 	bne.w	8009e8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	2319      	movs	r3, #25
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	496d      	ldr	r1, [pc, #436]	; (8009e98 <HAL_I2C_Mem_Write+0x1ec>)
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fcb5 	bl	800a654 <I2C_WaitOnFlagUntilTimeout>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	e0cc      	b.n	8009e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d101      	bne.n	8009d02 <HAL_I2C_Mem_Write+0x56>
 8009cfe:	2302      	movs	r3, #2
 8009d00:	e0c5      	b.n	8009e8e <HAL_I2C_Mem_Write+0x1e2>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d007      	beq.n	8009d28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0201 	orr.w	r2, r2, #1
 8009d26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2221      	movs	r2, #33	; 0x21
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2240      	movs	r2, #64	; 0x40
 8009d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a3a      	ldr	r2, [r7, #32]
 8009d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4a4d      	ldr	r2, [pc, #308]	; (8009e9c <HAL_I2C_Mem_Write+0x1f0>)
 8009d68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d6a:	88f8      	ldrh	r0, [r7, #6]
 8009d6c:	893a      	ldrh	r2, [r7, #8]
 8009d6e:	8979      	ldrh	r1, [r7, #10]
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	4603      	mov	r3, r0
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 faec 	bl	800a358 <I2C_RequestMemoryWrite>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d052      	beq.n	8009e2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e081      	b.n	8009e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 fd36 	bl	800a800 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00d      	beq.n	8009db6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	d107      	bne.n	8009db2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e06b      	b.n	8009e8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	781a      	ldrb	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	1c5a      	adds	r2, r3, #1
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	f003 0304 	and.w	r3, r3, #4
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d11b      	bne.n	8009e2c <HAL_I2C_Mem_Write+0x180>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d017      	beq.n	8009e2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	781a      	ldrb	r2, [r3, #0]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0c:	1c5a      	adds	r2, r3, #1
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e16:	3b01      	subs	r3, #1
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	3b01      	subs	r3, #1
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1aa      	bne.n	8009d8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 fd22 	bl	800a882 <I2C_WaitOnBTFFlagUntilTimeout>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00d      	beq.n	8009e60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	d107      	bne.n	8009e5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e016      	b.n	8009e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2220      	movs	r2, #32
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	e000      	b.n	8009e8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009e8c:	2302      	movs	r3, #2
  }
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	00100002 	.word	0x00100002
 8009e9c:	ffff0000 	.word	0xffff0000

08009ea0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08c      	sub	sp, #48	; 0x30
 8009ea4:	af02      	add	r7, sp, #8
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	4611      	mov	r1, r2
 8009eac:	461a      	mov	r2, r3
 8009eae:	4603      	mov	r3, r0
 8009eb0:	817b      	strh	r3, [r7, #10]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	813b      	strh	r3, [r7, #8]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009eba:	f7fe fe69 	bl	8008b90 <HAL_GetTick>
 8009ebe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b20      	cmp	r3, #32
 8009eca:	f040 8208 	bne.w	800a2de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	2319      	movs	r3, #25
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	497b      	ldr	r1, [pc, #492]	; (800a0c4 <HAL_I2C_Mem_Read+0x224>)
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 fbbb 	bl	800a654 <I2C_WaitOnFlagUntilTimeout>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	e1fb      	b.n	800a2e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d101      	bne.n	8009ef6 <HAL_I2C_Mem_Read+0x56>
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	e1f4      	b.n	800a2e0 <HAL_I2C_Mem_Read+0x440>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0301 	and.w	r3, r3, #1
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d007      	beq.n	8009f1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f042 0201 	orr.w	r2, r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2222      	movs	r2, #34	; 0x22
 8009f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2240      	movs	r2, #64	; 0x40
 8009f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4a5b      	ldr	r2, [pc, #364]	; (800a0c8 <HAL_I2C_Mem_Read+0x228>)
 8009f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009f5e:	88f8      	ldrh	r0, [r7, #6]
 8009f60:	893a      	ldrh	r2, [r7, #8]
 8009f62:	8979      	ldrh	r1, [r7, #10]
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	9301      	str	r3, [sp, #4]
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 fa88 	bl	800a484 <I2C_RequestMemoryRead>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e1b0      	b.n	800a2e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d113      	bne.n	8009fae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f86:	2300      	movs	r3, #0
 8009f88:	623b      	str	r3, [r7, #32]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	623b      	str	r3, [r7, #32]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	623b      	str	r3, [r7, #32]
 8009f9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	e184      	b.n	800a2b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d11b      	bne.n	8009fee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	61fb      	str	r3, [r7, #28]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	61fb      	str	r3, [r7, #28]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	61fb      	str	r3, [r7, #28]
 8009fda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	e164      	b.n	800a2b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d11b      	bne.n	800a02e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a004:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a016:	2300      	movs	r3, #0
 800a018:	61bb      	str	r3, [r7, #24]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	61bb      	str	r3, [r7, #24]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	61bb      	str	r3, [r7, #24]
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	e144      	b.n	800a2b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a02e:	2300      	movs	r3, #0
 800a030:	617b      	str	r3, [r7, #20]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	617b      	str	r3, [r7, #20]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	617b      	str	r3, [r7, #20]
 800a042:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a044:	e138      	b.n	800a2b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	f200 80f1 	bhi.w	800a232 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a054:	2b01      	cmp	r3, #1
 800a056:	d123      	bne.n	800a0a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 fc51 	bl	800a904 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e139      	b.n	800a2e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	691a      	ldr	r2, [r3, #16]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	b2d2      	uxtb	r2, r2
 800a078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a088:	3b01      	subs	r3, #1
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a094:	b29b      	uxth	r3, r3
 800a096:	3b01      	subs	r3, #1
 800a098:	b29a      	uxth	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a09e:	e10b      	b.n	800a2b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d14e      	bne.n	800a146 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	4906      	ldr	r1, [pc, #24]	; (800a0cc <HAL_I2C_Mem_Read+0x22c>)
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 face 	bl	800a654 <I2C_WaitOnFlagUntilTimeout>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d008      	beq.n	800a0d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e10e      	b.n	800a2e0 <HAL_I2C_Mem_Read+0x440>
 800a0c2:	bf00      	nop
 800a0c4:	00100002 	.word	0x00100002
 800a0c8:	ffff0000 	.word	0xffff0000
 800a0cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691a      	ldr	r2, [r3, #16]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	b2d2      	uxtb	r2, r2
 800a0ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a108:	b29b      	uxth	r3, r3
 800a10a:	3b01      	subs	r3, #1
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	691a      	ldr	r2, [r3, #16]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	b2d2      	uxtb	r2, r2
 800a11e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	1c5a      	adds	r2, r3, #1
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a12e:	3b01      	subs	r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	3b01      	subs	r3, #1
 800a13e:	b29a      	uxth	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a144:	e0b8      	b.n	800a2b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14c:	2200      	movs	r2, #0
 800a14e:	4966      	ldr	r1, [pc, #408]	; (800a2e8 <HAL_I2C_Mem_Read+0x448>)
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 fa7f 	bl	800a654 <I2C_WaitOnFlagUntilTimeout>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e0bf      	b.n	800a2e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a16e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	691a      	ldr	r2, [r3, #16]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17a:	b2d2      	uxtb	r2, r2
 800a17c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	1c5a      	adds	r2, r3, #1
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a18c:	3b01      	subs	r3, #1
 800a18e:	b29a      	uxth	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a198:	b29b      	uxth	r3, r3
 800a19a:	3b01      	subs	r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	494f      	ldr	r1, [pc, #316]	; (800a2e8 <HAL_I2C_Mem_Read+0x448>)
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 fa51 	bl	800a654 <I2C_WaitOnFlagUntilTimeout>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e091      	b.n	800a2e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	691a      	ldr	r2, [r3, #16]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	b2d2      	uxtb	r2, r2
 800a1d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	691a      	ldr	r2, [r3, #16]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a208:	b2d2      	uxtb	r2, r2
 800a20a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	1c5a      	adds	r2, r3, #1
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a21a:	3b01      	subs	r3, #1
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a226:	b29b      	uxth	r3, r3
 800a228:	3b01      	subs	r3, #1
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a230:	e042      	b.n	800a2b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 fb64 	bl	800a904 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e04c      	b.n	800a2e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	691a      	ldr	r2, [r3, #16]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	b2d2      	uxtb	r2, r2
 800a252:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a262:	3b01      	subs	r3, #1
 800a264:	b29a      	uxth	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a26e:	b29b      	uxth	r3, r3
 800a270:	3b01      	subs	r3, #1
 800a272:	b29a      	uxth	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	f003 0304 	and.w	r3, r3, #4
 800a282:	2b04      	cmp	r3, #4
 800a284:	d118      	bne.n	800a2b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	691a      	ldr	r2, [r3, #16]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	b2d2      	uxtb	r2, r2
 800a292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	1c5a      	adds	r2, r3, #1
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f47f aec2 	bne.w	800a046 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2220      	movs	r2, #32
 800a2c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e000      	b.n	800a2e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a2de:	2302      	movs	r3, #2
  }
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3728      	adds	r7, #40	; 0x28
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	00010004 	.word	0x00010004

0800a2ec <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b20      	cmp	r3, #32
 800a2fe:	d124      	bne.n	800a34a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2228      	movs	r2, #40	; 0x28
 800a304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	2b01      	cmp	r3, #1
 800a314:	d007      	beq.n	800a326 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f042 0201 	orr.w	r2, r2, #1
 800a324:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a334:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a344:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	e000      	b.n	800a34c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a34a:	2302      	movs	r3, #2
  }
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	4608      	mov	r0, r1
 800a362:	4611      	mov	r1, r2
 800a364:	461a      	mov	r2, r3
 800a366:	4603      	mov	r3, r0
 800a368:	817b      	strh	r3, [r7, #10]
 800a36a:	460b      	mov	r3, r1
 800a36c:	813b      	strh	r3, [r7, #8]
 800a36e:	4613      	mov	r3, r2
 800a370:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a380:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	2200      	movs	r2, #0
 800a38a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f000 f960 	bl	800a654 <I2C_WaitOnFlagUntilTimeout>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00d      	beq.n	800a3b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a8:	d103      	bne.n	800a3b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e05f      	b.n	800a476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a3b6:	897b      	ldrh	r3, [r7, #10]
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a3c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	6a3a      	ldr	r2, [r7, #32]
 800a3ca:	492d      	ldr	r1, [pc, #180]	; (800a480 <I2C_RequestMemoryWrite+0x128>)
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 f998 	bl	800a702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e04c      	b.n	800a476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3dc:	2300      	movs	r3, #0
 800a3de:	617b      	str	r3, [r7, #20]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f4:	6a39      	ldr	r1, [r7, #32]
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 fa02 	bl	800a800 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00d      	beq.n	800a41e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a406:	2b04      	cmp	r3, #4
 800a408:	d107      	bne.n	800a41a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a418:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e02b      	b.n	800a476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a41e:	88fb      	ldrh	r3, [r7, #6]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d105      	bne.n	800a430 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a424:	893b      	ldrh	r3, [r7, #8]
 800a426:	b2da      	uxtb	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	611a      	str	r2, [r3, #16]
 800a42e:	e021      	b.n	800a474 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a430:	893b      	ldrh	r3, [r7, #8]
 800a432:	0a1b      	lsrs	r3, r3, #8
 800a434:	b29b      	uxth	r3, r3
 800a436:	b2da      	uxtb	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a440:	6a39      	ldr	r1, [r7, #32]
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 f9dc 	bl	800a800 <I2C_WaitOnTXEFlagUntilTimeout>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00d      	beq.n	800a46a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a452:	2b04      	cmp	r3, #4
 800a454:	d107      	bne.n	800a466 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a464:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e005      	b.n	800a476 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a46a:	893b      	ldrh	r3, [r7, #8]
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	00010002 	.word	0x00010002

0800a484 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af02      	add	r7, sp, #8
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	4608      	mov	r0, r1
 800a48e:	4611      	mov	r1, r2
 800a490:	461a      	mov	r2, r3
 800a492:	4603      	mov	r3, r0
 800a494:	817b      	strh	r3, [r7, #10]
 800a496:	460b      	mov	r3, r1
 800a498:	813b      	strh	r3, [r7, #8]
 800a49a:	4613      	mov	r3, r2
 800a49c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 f8c2 	bl	800a654 <I2C_WaitOnFlagUntilTimeout>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00d      	beq.n	800a4f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e4:	d103      	bne.n	800a4ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e0aa      	b.n	800a648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a4f2:	897b      	ldrh	r3, [r7, #10]
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	6a3a      	ldr	r2, [r7, #32]
 800a506:	4952      	ldr	r1, [pc, #328]	; (800a650 <I2C_RequestMemoryRead+0x1cc>)
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 f8fa 	bl	800a702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e097      	b.n	800a648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a518:	2300      	movs	r3, #0
 800a51a:	617b      	str	r3, [r7, #20]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	617b      	str	r3, [r7, #20]
 800a52c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a530:	6a39      	ldr	r1, [r7, #32]
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f000 f964 	bl	800a800 <I2C_WaitOnTXEFlagUntilTimeout>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00d      	beq.n	800a55a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a542:	2b04      	cmp	r3, #4
 800a544:	d107      	bne.n	800a556 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e076      	b.n	800a648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a55a:	88fb      	ldrh	r3, [r7, #6]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d105      	bne.n	800a56c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a560:	893b      	ldrh	r3, [r7, #8]
 800a562:	b2da      	uxtb	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	611a      	str	r2, [r3, #16]
 800a56a:	e021      	b.n	800a5b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a56c:	893b      	ldrh	r3, [r7, #8]
 800a56e:	0a1b      	lsrs	r3, r3, #8
 800a570:	b29b      	uxth	r3, r3
 800a572:	b2da      	uxtb	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a57a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a57c:	6a39      	ldr	r1, [r7, #32]
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 f93e 	bl	800a800 <I2C_WaitOnTXEFlagUntilTimeout>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00d      	beq.n	800a5a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	2b04      	cmp	r3, #4
 800a590:	d107      	bne.n	800a5a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e050      	b.n	800a648 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5a6:	893b      	ldrh	r3, [r7, #8]
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b2:	6a39      	ldr	r1, [r7, #32]
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 f923 	bl	800a800 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00d      	beq.n	800a5dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d107      	bne.n	800a5d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e035      	b.n	800a648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 f82b 	bl	800a654 <I2C_WaitOnFlagUntilTimeout>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00d      	beq.n	800a620 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a612:	d103      	bne.n	800a61c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a61a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e013      	b.n	800a648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a620:	897b      	ldrh	r3, [r7, #10]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	f043 0301 	orr.w	r3, r3, #1
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	6a3a      	ldr	r2, [r7, #32]
 800a634:	4906      	ldr	r1, [pc, #24]	; (800a650 <I2C_RequestMemoryRead+0x1cc>)
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f000 f863 	bl	800a702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e000      	b.n	800a648 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	00010002 	.word	0x00010002

0800a654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	603b      	str	r3, [r7, #0]
 800a660:	4613      	mov	r3, r2
 800a662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a664:	e025      	b.n	800a6b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66c:	d021      	beq.n	800a6b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a66e:	f7fe fa8f 	bl	8008b90 <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d302      	bcc.n	800a684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d116      	bne.n	800a6b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69e:	f043 0220 	orr.w	r2, r3, #32
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e023      	b.n	800a6fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	0c1b      	lsrs	r3, r3, #16
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d10d      	bne.n	800a6d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	43da      	mvns	r2, r3
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bf0c      	ite	eq
 800a6ce:	2301      	moveq	r3, #1
 800a6d0:	2300      	movne	r3, #0
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	e00c      	b.n	800a6f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	43da      	mvns	r2, r3
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	bf0c      	ite	eq
 800a6ea:	2301      	moveq	r3, #1
 800a6ec:	2300      	movne	r3, #0
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	79fb      	ldrb	r3, [r7, #7]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d0b6      	beq.n	800a666 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	607a      	str	r2, [r7, #4]
 800a70e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a710:	e051      	b.n	800a7b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a71c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a720:	d123      	bne.n	800a76a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a730:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a73a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2220      	movs	r2, #32
 800a746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a756:	f043 0204 	orr.w	r2, r3, #4
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e046      	b.n	800a7f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a770:	d021      	beq.n	800a7b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a772:	f7fe fa0d 	bl	8008b90 <HAL_GetTick>
 800a776:	4602      	mov	r2, r0
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d302      	bcc.n	800a788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d116      	bne.n	800a7b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2220      	movs	r2, #32
 800a792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a2:	f043 0220 	orr.w	r2, r3, #32
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e020      	b.n	800a7f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	0c1b      	lsrs	r3, r3, #16
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d10c      	bne.n	800a7da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	43da      	mvns	r2, r3
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bf14      	ite	ne
 800a7d2:	2301      	movne	r3, #1
 800a7d4:	2300      	moveq	r3, #0
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	e00b      	b.n	800a7f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	43da      	mvns	r2, r3
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	bf14      	ite	ne
 800a7ec:	2301      	movne	r3, #1
 800a7ee:	2300      	moveq	r3, #0
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d18d      	bne.n	800a712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a80c:	e02d      	b.n	800a86a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 f8ce 	bl	800a9b0 <I2C_IsAcknowledgeFailed>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e02d      	b.n	800a87a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d021      	beq.n	800a86a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a826:	f7fe f9b3 	bl	8008b90 <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	429a      	cmp	r2, r3
 800a834:	d302      	bcc.n	800a83c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d116      	bne.n	800a86a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2220      	movs	r2, #32
 800a846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a856:	f043 0220 	orr.w	r2, r3, #32
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e007      	b.n	800a87a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a874:	2b80      	cmp	r3, #128	; 0x80
 800a876:	d1ca      	bne.n	800a80e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b084      	sub	sp, #16
 800a886:	af00      	add	r7, sp, #0
 800a888:	60f8      	str	r0, [r7, #12]
 800a88a:	60b9      	str	r1, [r7, #8]
 800a88c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a88e:	e02d      	b.n	800a8ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 f88d 	bl	800a9b0 <I2C_IsAcknowledgeFailed>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e02d      	b.n	800a8fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a6:	d021      	beq.n	800a8ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8a8:	f7fe f972 	bl	8008b90 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d302      	bcc.n	800a8be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d116      	bne.n	800a8ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2220      	movs	r2, #32
 800a8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d8:	f043 0220 	orr.w	r2, r3, #32
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e007      	b.n	800a8fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	f003 0304 	and.w	r3, r3, #4
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	d1ca      	bne.n	800a890 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a910:	e042      	b.n	800a998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	f003 0310 	and.w	r3, r3, #16
 800a91c:	2b10      	cmp	r3, #16
 800a91e:	d119      	bne.n	800a954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f06f 0210 	mvn.w	r2, #16
 800a928:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2220      	movs	r2, #32
 800a934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e029      	b.n	800a9a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a954:	f7fe f91c 	bl	8008b90 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	429a      	cmp	r2, r3
 800a962:	d302      	bcc.n	800a96a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d116      	bne.n	800a998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2220      	movs	r2, #32
 800a974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a984:	f043 0220 	orr.w	r2, r3, #32
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	e007      	b.n	800a9a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a2:	2b40      	cmp	r3, #64	; 0x40
 800a9a4:	d1b5      	bne.n	800a912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9c6:	d11b      	bne.n	800aa00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a9d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ec:	f043 0204 	orr.w	r2, r3, #4
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e000      	b.n	800aa02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b083      	sub	sp, #12
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b20      	cmp	r3, #32
 800aa22:	d129      	bne.n	800aa78 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2224      	movs	r2, #36	; 0x24
 800aa28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f022 0201 	bic.w	r2, r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f022 0210 	bic.w	r2, r2, #16
 800aa4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f042 0201 	orr.w	r2, r2, #1
 800aa6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2220      	movs	r2, #32
 800aa70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	e000      	b.n	800aa7a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800aa78:	2302      	movs	r3, #2
  }
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b20      	cmp	r3, #32
 800aa9e:	d12a      	bne.n	800aaf6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2224      	movs	r2, #36	; 0x24
 800aaa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f022 0201 	bic.w	r2, r2, #1
 800aab6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800aac0:	89fb      	ldrh	r3, [r7, #14]
 800aac2:	f023 030f 	bic.w	r3, r3, #15
 800aac6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	89fb      	ldrh	r3, [r7, #14]
 800aace:	4313      	orrs	r3, r2
 800aad0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	89fa      	ldrh	r2, [r7, #14]
 800aad8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f042 0201 	orr.w	r2, r2, #1
 800aae8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2220      	movs	r2, #32
 800aaee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e000      	b.n	800aaf8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800aaf6:	2302      	movs	r3, #2
  }
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e034      	b.n	800ab80 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ab1e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f245 5255 	movw	r2, #21845	; 0x5555
 800ab28:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6852      	ldr	r2, [r2, #4]
 800ab32:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	6892      	ldr	r2, [r2, #8]
 800ab3c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800ab3e:	f7fe f827 	bl	8008b90 <HAL_GetTick>
 800ab42:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ab44:	e00f      	b.n	800ab66 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ab46:	f7fe f823 	bl	8008b90 <HAL_GetTick>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	2b31      	cmp	r3, #49	; 0x31
 800ab52:	d908      	bls.n	800ab66 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	f003 0303 	and.w	r3, r3, #3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800ab62:	2303      	movs	r3, #3
 800ab64:	e00c      	b.n	800ab80 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f003 0303 	and.w	r3, r3, #3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1e8      	bne.n	800ab46 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ab7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ab98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800aba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abaa:	b08f      	sub	sp, #60	; 0x3c
 800abac:	af0a      	add	r7, sp, #40	; 0x28
 800abae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e10f      	b.n	800adda <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d106      	bne.n	800abda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f00e ffe9 	bl	8019bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2203      	movs	r2, #3
 800abde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f004 fe2c 	bl	800f856 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	603b      	str	r3, [r7, #0]
 800ac04:	687e      	ldr	r6, [r7, #4]
 800ac06:	466d      	mov	r5, sp
 800ac08:	f106 0410 	add.w	r4, r6, #16
 800ac0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac14:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ac18:	e885 0003 	stmia.w	r5, {r0, r1}
 800ac1c:	1d33      	adds	r3, r6, #4
 800ac1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac20:	6838      	ldr	r0, [r7, #0]
 800ac22:	f004 fd03 	bl	800f62c <USB_CoreInit>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d005      	beq.n	800ac38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	e0d0      	b.n	800adda <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f004 fe1a 	bl	800f878 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]
 800ac48:	e04a      	b.n	800ace0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ac4a:	7bfa      	ldrb	r2, [r7, #15]
 800ac4c:	6879      	ldr	r1, [r7, #4]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	1a9b      	subs	r3, r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	440b      	add	r3, r1
 800ac58:	333d      	adds	r3, #61	; 0x3d
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ac5e:	7bfa      	ldrb	r2, [r7, #15]
 800ac60:	6879      	ldr	r1, [r7, #4]
 800ac62:	4613      	mov	r3, r2
 800ac64:	00db      	lsls	r3, r3, #3
 800ac66:	1a9b      	subs	r3, r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	440b      	add	r3, r1
 800ac6c:	333c      	adds	r3, #60	; 0x3c
 800ac6e:	7bfa      	ldrb	r2, [r7, #15]
 800ac70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ac72:	7bfa      	ldrb	r2, [r7, #15]
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	b298      	uxth	r0, r3
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	1a9b      	subs	r3, r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	3342      	adds	r3, #66	; 0x42
 800ac86:	4602      	mov	r2, r0
 800ac88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ac8a:	7bfa      	ldrb	r2, [r7, #15]
 800ac8c:	6879      	ldr	r1, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	00db      	lsls	r3, r3, #3
 800ac92:	1a9b      	subs	r3, r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	440b      	add	r3, r1
 800ac98:	333f      	adds	r3, #63	; 0x3f
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ac9e:	7bfa      	ldrb	r2, [r7, #15]
 800aca0:	6879      	ldr	r1, [r7, #4]
 800aca2:	4613      	mov	r3, r2
 800aca4:	00db      	lsls	r3, r3, #3
 800aca6:	1a9b      	subs	r3, r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	440b      	add	r3, r1
 800acac:	3344      	adds	r3, #68	; 0x44
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800acb2:	7bfa      	ldrb	r2, [r7, #15]
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	4613      	mov	r3, r2
 800acb8:	00db      	lsls	r3, r3, #3
 800acba:	1a9b      	subs	r3, r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	440b      	add	r3, r1
 800acc0:	3348      	adds	r3, #72	; 0x48
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800acc6:	7bfa      	ldrb	r2, [r7, #15]
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	00db      	lsls	r3, r3, #3
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	440b      	add	r3, r1
 800acd4:	3350      	adds	r3, #80	; 0x50
 800acd6:	2200      	movs	r2, #0
 800acd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	3301      	adds	r3, #1
 800acde:	73fb      	strb	r3, [r7, #15]
 800ace0:	7bfa      	ldrb	r2, [r7, #15]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d3af      	bcc.n	800ac4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acea:	2300      	movs	r3, #0
 800acec:	73fb      	strb	r3, [r7, #15]
 800acee:	e044      	b.n	800ad7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800acf0:	7bfa      	ldrb	r2, [r7, #15]
 800acf2:	6879      	ldr	r1, [r7, #4]
 800acf4:	4613      	mov	r3, r2
 800acf6:	00db      	lsls	r3, r3, #3
 800acf8:	1a9b      	subs	r3, r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	440b      	add	r3, r1
 800acfe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ad02:	2200      	movs	r2, #0
 800ad04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ad06:	7bfa      	ldrb	r2, [r7, #15]
 800ad08:	6879      	ldr	r1, [r7, #4]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	1a9b      	subs	r3, r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	440b      	add	r3, r1
 800ad14:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ad18:	7bfa      	ldrb	r2, [r7, #15]
 800ad1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ad1c:	7bfa      	ldrb	r2, [r7, #15]
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	4613      	mov	r3, r2
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	1a9b      	subs	r3, r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	440b      	add	r3, r1
 800ad2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ad2e:	2200      	movs	r2, #0
 800ad30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ad32:	7bfa      	ldrb	r2, [r7, #15]
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	4613      	mov	r3, r2
 800ad38:	00db      	lsls	r3, r3, #3
 800ad3a:	1a9b      	subs	r3, r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	440b      	add	r3, r1
 800ad40:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ad48:	7bfa      	ldrb	r2, [r7, #15]
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	00db      	lsls	r3, r3, #3
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	440b      	add	r3, r1
 800ad56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ad5e:	7bfa      	ldrb	r2, [r7, #15]
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	4613      	mov	r3, r2
 800ad64:	00db      	lsls	r3, r3, #3
 800ad66:	1a9b      	subs	r3, r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	440b      	add	r3, r1
 800ad6c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ad70:	2200      	movs	r2, #0
 800ad72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	3301      	adds	r3, #1
 800ad78:	73fb      	strb	r3, [r7, #15]
 800ad7a:	7bfa      	ldrb	r2, [r7, #15]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d3b5      	bcc.n	800acf0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	603b      	str	r3, [r7, #0]
 800ad8a:	687e      	ldr	r6, [r7, #4]
 800ad8c:	466d      	mov	r5, sp
 800ad8e:	f106 0410 	add.w	r4, r6, #16
 800ad92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad9e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ada2:	1d33      	adds	r3, r6, #4
 800ada4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ada6:	6838      	ldr	r0, [r7, #0]
 800ada8:	f004 fdb2 	bl	800f910 <USB_DevInit>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d005      	beq.n	800adbe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2202      	movs	r2, #2
 800adb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e00d      	b.n	800adda <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4618      	mov	r0, r3
 800add4:	f005 fe2e 	bl	8010a34 <USB_DevDisconnect>

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ade2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d101      	bne.n	800adfe <HAL_PCD_Start+0x1c>
 800adfa:	2302      	movs	r3, #2
 800adfc:	e020      	b.n	800ae40 <HAL_PCD_Start+0x5e>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d109      	bne.n	800ae22 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d005      	beq.n	800ae22 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f004 fd04 	bl	800f834 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f005 fdde 	bl	80109f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ae48:	b590      	push	{r4, r7, lr}
 800ae4a:	b08d      	sub	sp, #52	; 0x34
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f005 fe9c 	bl	8010b9c <USB_GetMode>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f040 839d 	bne.w	800b5a6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f005 fe00 	bl	8010a76 <USB_ReadInterrupts>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 8393 	beq.w	800b5a4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f005 fdf7 	bl	8010a76 <USB_ReadInterrupts>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d107      	bne.n	800aea2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	695a      	ldr	r2, [r3, #20]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f002 0202 	and.w	r2, r2, #2
 800aea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f005 fde5 	bl	8010a76 <USB_ReadInterrupts>
 800aeac:	4603      	mov	r3, r0
 800aeae:	f003 0310 	and.w	r3, r3, #16
 800aeb2:	2b10      	cmp	r3, #16
 800aeb4:	d161      	bne.n	800af7a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	699a      	ldr	r2, [r3, #24]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f022 0210 	bic.w	r2, r2, #16
 800aec4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800aec6:	6a3b      	ldr	r3, [r7, #32]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	f003 020f 	and.w	r2, r3, #15
 800aed2:	4613      	mov	r3, r2
 800aed4:	00db      	lsls	r3, r3, #3
 800aed6:	1a9b      	subs	r3, r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	4413      	add	r3, r2
 800aee2:	3304      	adds	r3, #4
 800aee4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	0c5b      	lsrs	r3, r3, #17
 800aeea:	f003 030f 	and.w	r3, r3, #15
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d124      	bne.n	800af3c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800aef2:	69ba      	ldr	r2, [r7, #24]
 800aef4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800aef8:	4013      	ands	r3, r2
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d035      	beq.n	800af6a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	091b      	lsrs	r3, r3, #4
 800af06:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	461a      	mov	r2, r3
 800af10:	6a38      	ldr	r0, [r7, #32]
 800af12:	f005 fc1c 	bl	801074e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	68da      	ldr	r2, [r3, #12]
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	091b      	lsrs	r3, r3, #4
 800af1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af22:	441a      	add	r2, r3
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	699a      	ldr	r2, [r3, #24]
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	091b      	lsrs	r3, r3, #4
 800af30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af34:	441a      	add	r2, r3
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	619a      	str	r2, [r3, #24]
 800af3a:	e016      	b.n	800af6a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	0c5b      	lsrs	r3, r3, #17
 800af40:	f003 030f 	and.w	r3, r3, #15
 800af44:	2b06      	cmp	r3, #6
 800af46:	d110      	bne.n	800af6a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800af4e:	2208      	movs	r2, #8
 800af50:	4619      	mov	r1, r3
 800af52:	6a38      	ldr	r0, [r7, #32]
 800af54:	f005 fbfb 	bl	801074e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	699a      	ldr	r2, [r3, #24]
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	091b      	lsrs	r3, r3, #4
 800af60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af64:	441a      	add	r2, r3
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	699a      	ldr	r2, [r3, #24]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f042 0210 	orr.w	r2, r2, #16
 800af78:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4618      	mov	r0, r3
 800af80:	f005 fd79 	bl	8010a76 <USB_ReadInterrupts>
 800af84:	4603      	mov	r3, r0
 800af86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800af8e:	d16e      	bne.n	800b06e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800af90:	2300      	movs	r3, #0
 800af92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4618      	mov	r0, r3
 800af9a:	f005 fd7f 	bl	8010a9c <USB_ReadDevAllOutEpInterrupt>
 800af9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800afa0:	e062      	b.n	800b068 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d057      	beq.n	800b05c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb2:	b2d2      	uxtb	r2, r2
 800afb4:	4611      	mov	r1, r2
 800afb6:	4618      	mov	r0, r3
 800afb8:	f005 fda4 	bl	8010b04 <USB_ReadDevOutEPInterrupt>
 800afbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00c      	beq.n	800afe2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	015a      	lsls	r2, r3, #5
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	4413      	add	r3, r2
 800afd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd4:	461a      	mov	r2, r3
 800afd6:	2301      	movs	r3, #1
 800afd8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800afda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fdb1 	bl	800bb44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f003 0308 	and.w	r3, r3, #8
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00c      	beq.n	800b006 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff8:	461a      	mov	r2, r3
 800affa:	2308      	movs	r3, #8
 800affc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800affe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 feab 	bl	800bd5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f003 0310 	and.w	r3, r3, #16
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d008      	beq.n	800b022 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01c:	461a      	mov	r2, r3
 800b01e:	2310      	movs	r3, #16
 800b020:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f003 0320 	and.w	r3, r3, #32
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d008      	beq.n	800b03e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02e:	015a      	lsls	r2, r3, #5
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	4413      	add	r3, r2
 800b034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b038:	461a      	mov	r2, r3
 800b03a:	2320      	movs	r3, #32
 800b03c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d009      	beq.n	800b05c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	015a      	lsls	r2, r3, #5
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	4413      	add	r3, r2
 800b050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b054:	461a      	mov	r2, r3
 800b056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b05a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	3301      	adds	r3, #1
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b064:	085b      	lsrs	r3, r3, #1
 800b066:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d199      	bne.n	800afa2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4618      	mov	r0, r3
 800b074:	f005 fcff 	bl	8010a76 <USB_ReadInterrupts>
 800b078:	4603      	mov	r3, r0
 800b07a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b07e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b082:	f040 80c0 	bne.w	800b206 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f005 fd20 	bl	8010ad0 <USB_ReadDevAllInEpInterrupt>
 800b090:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b096:	e0b2      	b.n	800b1fe <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09a:	f003 0301 	and.w	r3, r3, #1
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 80a7 	beq.w	800b1f2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0aa:	b2d2      	uxtb	r2, r2
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f005 fd46 	bl	8010b40 <USB_ReadDevInEPInterrupt>
 800b0b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d057      	beq.n	800b170 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	f003 030f 	and.w	r3, r3, #15
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	43db      	mvns	r3, r3
 800b0da:	69f9      	ldr	r1, [r7, #28]
 800b0dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e6:	015a      	lsls	r2, r3, #5
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d132      	bne.n	800b164 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b102:	4613      	mov	r3, r2
 800b104:	00db      	lsls	r3, r3, #3
 800b106:	1a9b      	subs	r3, r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	440b      	add	r3, r1
 800b10c:	3348      	adds	r3, #72	; 0x48
 800b10e:	6819      	ldr	r1, [r3, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b114:	4613      	mov	r3, r2
 800b116:	00db      	lsls	r3, r3, #3
 800b118:	1a9b      	subs	r3, r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4403      	add	r3, r0
 800b11e:	3344      	adds	r3, #68	; 0x44
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4419      	add	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b128:	4613      	mov	r3, r2
 800b12a:	00db      	lsls	r3, r3, #3
 800b12c:	1a9b      	subs	r3, r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4403      	add	r3, r0
 800b132:	3348      	adds	r3, #72	; 0x48
 800b134:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d113      	bne.n	800b164 <HAL_PCD_IRQHandler+0x31c>
 800b13c:	6879      	ldr	r1, [r7, #4]
 800b13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b140:	4613      	mov	r3, r2
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	1a9b      	subs	r3, r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	440b      	add	r3, r1
 800b14a:	3350      	adds	r3, #80	; 0x50
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d108      	bne.n	800b164 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b15c:	461a      	mov	r2, r3
 800b15e:	2101      	movs	r1, #1
 800b160:	f005 fd4e 	bl	8010c00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b166:	b2db      	uxtb	r3, r3
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f00e fdad 	bl	8019cca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	f003 0308 	and.w	r3, r3, #8
 800b176:	2b00      	cmp	r3, #0
 800b178:	d008      	beq.n	800b18c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b186:	461a      	mov	r2, r3
 800b188:	2308      	movs	r3, #8
 800b18a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f003 0310 	and.w	r3, r3, #16
 800b192:	2b00      	cmp	r3, #0
 800b194:	d008      	beq.n	800b1a8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	2310      	movs	r3, #16
 800b1a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d008      	beq.n	800b1c4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b4:	015a      	lsls	r2, r3, #5
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1be:	461a      	mov	r2, r3
 800b1c0:	2340      	movs	r3, #64	; 0x40
 800b1c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f003 0302 	and.w	r3, r3, #2
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d008      	beq.n	800b1e0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	015a      	lsls	r2, r3, #5
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1da:	461a      	mov	r2, r3
 800b1dc:	2302      	movs	r3, #2
 800b1de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b1ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fc1b 	bl	800ba28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fa:	085b      	lsrs	r3, r3, #1
 800b1fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b200:	2b00      	cmp	r3, #0
 800b202:	f47f af49 	bne.w	800b098 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f005 fc33 	bl	8010a76 <USB_ReadInterrupts>
 800b210:	4603      	mov	r3, r0
 800b212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b21a:	d122      	bne.n	800b262 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	69fa      	ldr	r2, [r7, #28]
 800b226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b22a:	f023 0301 	bic.w	r3, r3, #1
 800b22e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b236:	2b01      	cmp	r3, #1
 800b238:	d108      	bne.n	800b24c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b242:	2100      	movs	r1, #0
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fe27 	bl	800be98 <HAL_PCDEx_LPM_Callback>
 800b24a:	e002      	b.n	800b252 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f00e fdb3 	bl	8019db8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	695a      	ldr	r2, [r3, #20]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4618      	mov	r0, r3
 800b268:	f005 fc05 	bl	8010a76 <USB_ReadInterrupts>
 800b26c:	4603      	mov	r3, r0
 800b26e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b276:	d112      	bne.n	800b29e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b01      	cmp	r3, #1
 800b286:	d102      	bne.n	800b28e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f00e fd6f 	bl	8019d6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	695a      	ldr	r2, [r3, #20]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b29c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f005 fbe7 	bl	8010a76 <USB_ReadInterrupts>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2b2:	f040 80c7 	bne.w	800b444 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	69fa      	ldr	r2, [r7, #28]
 800b2c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2c4:	f023 0301 	bic.w	r3, r3, #1
 800b2c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2110      	movs	r1, #16
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f004 fc81 	bl	800fbd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2da:	e056      	b.n	800b38a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2de:	015a      	lsls	r2, r3, #5
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b2ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f2:	015a      	lsls	r2, r3, #5
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b300:	0151      	lsls	r1, r2, #5
 800b302:	69fa      	ldr	r2, [r7, #28]
 800b304:	440a      	add	r2, r1
 800b306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b30a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b30e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	4413      	add	r3, r2
 800b318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b320:	0151      	lsls	r1, r2, #5
 800b322:	69fa      	ldr	r2, [r7, #28]
 800b324:	440a      	add	r2, r1
 800b326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b32a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b32e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b332:	015a      	lsls	r2, r3, #5
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	4413      	add	r3, r2
 800b338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33c:	461a      	mov	r2, r3
 800b33e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b342:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b354:	0151      	lsls	r1, r2, #5
 800b356:	69fa      	ldr	r2, [r7, #28]
 800b358:	440a      	add	r2, r1
 800b35a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b35e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b362:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b366:	015a      	lsls	r2, r3, #5
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	4413      	add	r3, r2
 800b36c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b374:	0151      	lsls	r1, r2, #5
 800b376:	69fa      	ldr	r2, [r7, #28]
 800b378:	440a      	add	r2, r1
 800b37a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b37e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b382:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b386:	3301      	adds	r3, #1
 800b388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b390:	429a      	cmp	r2, r3
 800b392:	d3a3      	bcc.n	800b2dc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	69fa      	ldr	r2, [r7, #28]
 800b39e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3a2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b3a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d016      	beq.n	800b3de <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3c0:	f043 030b 	orr.w	r3, r3, #11
 800b3c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d0:	69fa      	ldr	r2, [r7, #28]
 800b3d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3d6:	f043 030b 	orr.w	r3, r3, #11
 800b3da:	6453      	str	r3, [r2, #68]	; 0x44
 800b3dc:	e015      	b.n	800b40a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	69fa      	ldr	r2, [r7, #28]
 800b3e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b3f0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b3f4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	69fa      	ldr	r2, [r7, #28]
 800b400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b404:	f043 030b 	orr.w	r3, r3, #11
 800b408:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	69fa      	ldr	r2, [r7, #28]
 800b414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b418:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b41c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b42e:	461a      	mov	r2, r3
 800b430:	f005 fbe6 	bl	8010c00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	695a      	ldr	r2, [r3, #20]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b442:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4618      	mov	r0, r3
 800b44a:	f005 fb14 	bl	8010a76 <USB_ReadInterrupts>
 800b44e:	4603      	mov	r3, r0
 800b450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b458:	d124      	bne.n	800b4a4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4618      	mov	r0, r3
 800b460:	f005 fbaa 	bl	8010bb8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4618      	mov	r0, r3
 800b46a:	f004 fc12 	bl	800fc92 <USB_GetDevSpeed>
 800b46e:	4603      	mov	r3, r0
 800b470:	461a      	mov	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681c      	ldr	r4, [r3, #0]
 800b47a:	f001 f995 	bl	800c7a8 <HAL_RCC_GetHCLKFreq>
 800b47e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b484:	b2db      	uxtb	r3, r3
 800b486:	461a      	mov	r2, r3
 800b488:	4620      	mov	r0, r4
 800b48a:	f004 f931 	bl	800f6f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f00e fc43 	bl	8019d1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	695a      	ldr	r2, [r3, #20]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b4a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f005 fae4 	bl	8010a76 <USB_ReadInterrupts>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	f003 0308 	and.w	r3, r3, #8
 800b4b4:	2b08      	cmp	r3, #8
 800b4b6:	d10a      	bne.n	800b4ce <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f00e fc20 	bl	8019cfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	695a      	ldr	r2, [r3, #20]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f002 0208 	and.w	r2, r2, #8
 800b4cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f005 facf 	bl	8010a76 <USB_ReadInterrupts>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4e2:	d10f      	bne.n	800b504 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f00e fc82 	bl	8019df8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	695a      	ldr	r2, [r3, #20]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4618      	mov	r0, r3
 800b50a:	f005 fab4 	bl	8010a76 <USB_ReadInterrupts>
 800b50e:	4603      	mov	r3, r0
 800b510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b518:	d10f      	bne.n	800b53a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	b2db      	uxtb	r3, r3
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f00e fc55 	bl	8019dd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	695a      	ldr	r2, [r3, #20]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4618      	mov	r0, r3
 800b540:	f005 fa99 	bl	8010a76 <USB_ReadInterrupts>
 800b544:	4603      	mov	r3, r0
 800b546:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b54e:	d10a      	bne.n	800b566 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f00e fc63 	bl	8019e1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	695a      	ldr	r2, [r3, #20]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f005 fa83 	bl	8010a76 <USB_ReadInterrupts>
 800b570:	4603      	mov	r3, r0
 800b572:	f003 0304 	and.w	r3, r3, #4
 800b576:	2b04      	cmp	r3, #4
 800b578:	d115      	bne.n	800b5a6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d002      	beq.n	800b592 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f00e fc53 	bl	8019e38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6859      	ldr	r1, [r3, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	69ba      	ldr	r2, [r7, #24]
 800b59e:	430a      	orrs	r2, r1
 800b5a0:	605a      	str	r2, [r3, #4]
 800b5a2:	e000      	b.n	800b5a6 <HAL_PCD_IRQHandler+0x75e>
      return;
 800b5a4:	bf00      	nop
    }
  }
}
 800b5a6:	3734      	adds	r7, #52	; 0x34
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd90      	pop	{r4, r7, pc}

0800b5ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d101      	bne.n	800b5c6 <HAL_PCD_SetAddress+0x1a>
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	e013      	b.n	800b5ee <HAL_PCD_SetAddress+0x42>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	78fa      	ldrb	r2, [r7, #3]
 800b5d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	78fa      	ldrb	r2, [r7, #3]
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f005 f9e1 	bl	80109a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	4608      	mov	r0, r1
 800b600:	4611      	mov	r1, r2
 800b602:	461a      	mov	r2, r3
 800b604:	4603      	mov	r3, r0
 800b606:	70fb      	strb	r3, [r7, #3]
 800b608:	460b      	mov	r3, r1
 800b60a:	803b      	strh	r3, [r7, #0]
 800b60c:	4613      	mov	r3, r2
 800b60e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	da0f      	bge.n	800b63c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b61c:	78fb      	ldrb	r3, [r7, #3]
 800b61e:	f003 020f 	and.w	r2, r3, #15
 800b622:	4613      	mov	r3, r2
 800b624:	00db      	lsls	r3, r3, #3
 800b626:	1a9b      	subs	r3, r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	3338      	adds	r3, #56	; 0x38
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	4413      	add	r3, r2
 800b630:	3304      	adds	r3, #4
 800b632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2201      	movs	r2, #1
 800b638:	705a      	strb	r2, [r3, #1]
 800b63a:	e00f      	b.n	800b65c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b63c:	78fb      	ldrb	r3, [r7, #3]
 800b63e:	f003 020f 	and.w	r2, r3, #15
 800b642:	4613      	mov	r3, r2
 800b644:	00db      	lsls	r3, r3, #3
 800b646:	1a9b      	subs	r3, r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	4413      	add	r3, r2
 800b652:	3304      	adds	r3, #4
 800b654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b65c:	78fb      	ldrb	r3, [r7, #3]
 800b65e:	f003 030f 	and.w	r3, r3, #15
 800b662:	b2da      	uxtb	r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b668:	883a      	ldrh	r2, [r7, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	78ba      	ldrb	r2, [r7, #2]
 800b672:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	785b      	ldrb	r3, [r3, #1]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d004      	beq.n	800b686 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	b29a      	uxth	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b686:	78bb      	ldrb	r3, [r7, #2]
 800b688:	2b02      	cmp	r3, #2
 800b68a:	d102      	bne.n	800b692 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d101      	bne.n	800b6a0 <HAL_PCD_EP_Open+0xaa>
 800b69c:	2302      	movs	r3, #2
 800b69e:	e00e      	b.n	800b6be <HAL_PCD_EP_Open+0xc8>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68f9      	ldr	r1, [r7, #12]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f004 fb14 	bl	800fcdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b6bc:	7afb      	ldrb	r3, [r7, #11]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b084      	sub	sp, #16
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b6d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	da0f      	bge.n	800b6fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6da:	78fb      	ldrb	r3, [r7, #3]
 800b6dc:	f003 020f 	and.w	r2, r3, #15
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	1a9b      	subs	r3, r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	3338      	adds	r3, #56	; 0x38
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	705a      	strb	r2, [r3, #1]
 800b6f8:	e00f      	b.n	800b71a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6fa:	78fb      	ldrb	r3, [r7, #3]
 800b6fc:	f003 020f 	and.w	r2, r3, #15
 800b700:	4613      	mov	r3, r2
 800b702:	00db      	lsls	r3, r3, #3
 800b704:	1a9b      	subs	r3, r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	4413      	add	r3, r2
 800b710:	3304      	adds	r3, #4
 800b712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b71a:	78fb      	ldrb	r3, [r7, #3]
 800b71c:	f003 030f 	and.w	r3, r3, #15
 800b720:	b2da      	uxtb	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d101      	bne.n	800b734 <HAL_PCD_EP_Close+0x6e>
 800b730:	2302      	movs	r3, #2
 800b732:	e00e      	b.n	800b752 <HAL_PCD_EP_Close+0x8c>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68f9      	ldr	r1, [r7, #12]
 800b742:	4618      	mov	r0, r3
 800b744:	f004 fb52 	bl	800fdec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b086      	sub	sp, #24
 800b75e:	af00      	add	r7, sp, #0
 800b760:	60f8      	str	r0, [r7, #12]
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	603b      	str	r3, [r7, #0]
 800b766:	460b      	mov	r3, r1
 800b768:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b76a:	7afb      	ldrb	r3, [r7, #11]
 800b76c:	f003 020f 	and.w	r2, r3, #15
 800b770:	4613      	mov	r3, r2
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	1a9b      	subs	r3, r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4413      	add	r3, r2
 800b780:	3304      	adds	r3, #4
 800b782:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2200      	movs	r2, #0
 800b794:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2200      	movs	r2, #0
 800b79a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b79c:	7afb      	ldrb	r3, [r7, #11]
 800b79e:	f003 030f 	and.w	r3, r3, #15
 800b7a2:	b2da      	uxtb	r2, r3
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d102      	bne.n	800b7b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b7b6:	7afb      	ldrb	r3, [r7, #11]
 800b7b8:	f003 030f 	and.w	r3, r3, #15
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d109      	bne.n	800b7d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6818      	ldr	r0, [r3, #0]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	6979      	ldr	r1, [r7, #20]
 800b7ce:	f004 fe2d 	bl	801042c <USB_EP0StartXfer>
 800b7d2:	e008      	b.n	800b7e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6818      	ldr	r0, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	461a      	mov	r2, r3
 800b7e0:	6979      	ldr	r1, [r7, #20]
 800b7e2:	f004 fbdf 	bl	800ffa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3718      	adds	r7, #24
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b7fc:	78fb      	ldrb	r3, [r7, #3]
 800b7fe:	f003 020f 	and.w	r2, r3, #15
 800b802:	6879      	ldr	r1, [r7, #4]
 800b804:	4613      	mov	r3, r2
 800b806:	00db      	lsls	r3, r3, #3
 800b808:	1a9b      	subs	r3, r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	440b      	add	r3, r1
 800b80e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b812:	681b      	ldr	r3, [r3, #0]
}
 800b814:	4618      	mov	r0, r3
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	607a      	str	r2, [r7, #4]
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	460b      	mov	r3, r1
 800b82e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b830:	7afb      	ldrb	r3, [r7, #11]
 800b832:	f003 020f 	and.w	r2, r3, #15
 800b836:	4613      	mov	r3, r2
 800b838:	00db      	lsls	r3, r3, #3
 800b83a:	1a9b      	subs	r3, r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	3338      	adds	r3, #56	; 0x38
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	4413      	add	r3, r2
 800b844:	3304      	adds	r3, #4
 800b846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2200      	movs	r2, #0
 800b858:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2201      	movs	r2, #1
 800b85e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b860:	7afb      	ldrb	r3, [r7, #11]
 800b862:	f003 030f 	and.w	r3, r3, #15
 800b866:	b2da      	uxtb	r2, r3
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d102      	bne.n	800b87a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b87a:	7afb      	ldrb	r3, [r7, #11]
 800b87c:	f003 030f 	and.w	r3, r3, #15
 800b880:	2b00      	cmp	r3, #0
 800b882:	d109      	bne.n	800b898 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6818      	ldr	r0, [r3, #0]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	461a      	mov	r2, r3
 800b890:	6979      	ldr	r1, [r7, #20]
 800b892:	f004 fdcb 	bl	801042c <USB_EP0StartXfer>
 800b896:	e008      	b.n	800b8aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6818      	ldr	r0, [r3, #0]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	6979      	ldr	r1, [r7, #20]
 800b8a6:	f004 fb7d 	bl	800ffa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3718      	adds	r7, #24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	f003 020f 	and.w	r2, r3, #15
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d901      	bls.n	800b8d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e050      	b.n	800b974 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b8d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	da0f      	bge.n	800b8fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8da:	78fb      	ldrb	r3, [r7, #3]
 800b8dc:	f003 020f 	and.w	r2, r3, #15
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	1a9b      	subs	r3, r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	3338      	adds	r3, #56	; 0x38
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	3304      	adds	r3, #4
 800b8f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	705a      	strb	r2, [r3, #1]
 800b8f8:	e00d      	b.n	800b916 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b8fa:	78fa      	ldrb	r2, [r7, #3]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	00db      	lsls	r3, r3, #3
 800b900:	1a9b      	subs	r3, r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	4413      	add	r3, r2
 800b90c:	3304      	adds	r3, #4
 800b90e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2200      	movs	r2, #0
 800b914:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2201      	movs	r2, #1
 800b91a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b91c:	78fb      	ldrb	r3, [r7, #3]
 800b91e:	f003 030f 	and.w	r3, r3, #15
 800b922:	b2da      	uxtb	r2, r3
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d101      	bne.n	800b936 <HAL_PCD_EP_SetStall+0x82>
 800b932:	2302      	movs	r3, #2
 800b934:	e01e      	b.n	800b974 <HAL_PCD_EP_SetStall+0xc0>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68f9      	ldr	r1, [r7, #12]
 800b944:	4618      	mov	r0, r3
 800b946:	f004 ff5a 	bl	80107fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b94a:	78fb      	ldrb	r3, [r7, #3]
 800b94c:	f003 030f 	and.w	r3, r3, #15
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10a      	bne.n	800b96a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6818      	ldr	r0, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	b2d9      	uxtb	r1, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b964:	461a      	mov	r2, r3
 800b966:	f005 f94b 	bl	8010c00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	460b      	mov	r3, r1
 800b986:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b988:	78fb      	ldrb	r3, [r7, #3]
 800b98a:	f003 020f 	and.w	r2, r3, #15
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	429a      	cmp	r2, r3
 800b994:	d901      	bls.n	800b99a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e042      	b.n	800ba20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b99a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	da0f      	bge.n	800b9c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9a2:	78fb      	ldrb	r3, [r7, #3]
 800b9a4:	f003 020f 	and.w	r2, r3, #15
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	00db      	lsls	r3, r3, #3
 800b9ac:	1a9b      	subs	r3, r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	3338      	adds	r3, #56	; 0x38
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	705a      	strb	r2, [r3, #1]
 800b9c0:	e00f      	b.n	800b9e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9c2:	78fb      	ldrb	r3, [r7, #3]
 800b9c4:	f003 020f 	and.w	r2, r3, #15
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	00db      	lsls	r3, r3, #3
 800b9cc:	1a9b      	subs	r3, r3, r2
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	3304      	adds	r3, #4
 800b9da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	f003 030f 	and.w	r3, r3, #15
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d101      	bne.n	800ba02 <HAL_PCD_EP_ClrStall+0x86>
 800b9fe:	2302      	movs	r3, #2
 800ba00:	e00e      	b.n	800ba20 <HAL_PCD_EP_ClrStall+0xa4>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68f9      	ldr	r1, [r7, #12]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f004 ff62 	bl	80108da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08a      	sub	sp, #40	; 0x28
 800ba2c:	af02      	add	r7, sp, #8
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	00db      	lsls	r3, r3, #3
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	3338      	adds	r3, #56	; 0x38
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	699a      	ldr	r2, [r3, #24]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	695b      	ldr	r3, [r3, #20]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d901      	bls.n	800ba60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e06c      	b.n	800bb3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	695a      	ldr	r2, [r3, #20]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	69fa      	ldr	r2, [r7, #28]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d902      	bls.n	800ba7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	3303      	adds	r3, #3
 800ba80:	089b      	lsrs	r3, r3, #2
 800ba82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ba84:	e02b      	b.n	800bade <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	695a      	ldr	r2, [r3, #20]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	699b      	ldr	r3, [r3, #24]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	69fa      	ldr	r2, [r7, #28]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d902      	bls.n	800baa2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	3303      	adds	r3, #3
 800baa6:	089b      	lsrs	r3, r3, #2
 800baa8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	68d9      	ldr	r1, [r3, #12]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800baba:	b2db      	uxtb	r3, r3
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	4603      	mov	r3, r0
 800bac0:	6978      	ldr	r0, [r7, #20]
 800bac2:	f004 fe06 	bl	80106d2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	68da      	ldr	r2, [r3, #12]
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	441a      	add	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	699a      	ldr	r2, [r3, #24]
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	441a      	add	r2, r3
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	015a      	lsls	r2, r3, #5
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	4413      	add	r3, r2
 800bae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	b29b      	uxth	r3, r3
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d809      	bhi.n	800bb08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	699a      	ldr	r2, [r3, #24]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d203      	bcs.n	800bb08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1be      	bne.n	800ba86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	695a      	ldr	r2, [r3, #20]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d811      	bhi.n	800bb38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	f003 030f 	and.w	r3, r3, #15
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	43db      	mvns	r3, r3
 800bb2e:	6939      	ldr	r1, [r7, #16]
 800bb30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb34:	4013      	ands	r3, r2
 800bb36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3720      	adds	r7, #32
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
	...

0800bb44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	333c      	adds	r3, #60	; 0x3c
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	015a      	lsls	r2, r3, #5
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	4413      	add	r3, r2
 800bb6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	f040 80a0 	bne.w	800bcbc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	f003 0308 	and.w	r3, r3, #8
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d015      	beq.n	800bbb2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	4a72      	ldr	r2, [pc, #456]	; (800bd54 <PCD_EP_OutXfrComplete_int+0x210>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	f240 80dd 	bls.w	800bd4a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f000 80d7 	beq.w	800bd4a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba8:	461a      	mov	r2, r3
 800bbaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbae:	6093      	str	r3, [r2, #8]
 800bbb0:	e0cb      	b.n	800bd4a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	f003 0320 	and.w	r3, r3, #32
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d009      	beq.n	800bbd0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	015a      	lsls	r2, r3, #5
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc8:	461a      	mov	r2, r3
 800bbca:	2320      	movs	r3, #32
 800bbcc:	6093      	str	r3, [r2, #8]
 800bbce:	e0bc      	b.n	800bd4a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f040 80b7 	bne.w	800bd4a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	4a5d      	ldr	r2, [pc, #372]	; (800bd54 <PCD_EP_OutXfrComplete_int+0x210>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d90f      	bls.n	800bc04 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00a      	beq.n	800bc04 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	015a      	lsls	r2, r3, #5
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc00:	6093      	str	r3, [r2, #8]
 800bc02:	e0a2      	b.n	800bd4a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800bc04:	6879      	ldr	r1, [r7, #4]
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	1a9b      	subs	r3, r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	440b      	add	r3, r1
 800bc12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bc16:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	0159      	lsls	r1, r3, #5
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	440b      	add	r3, r1
 800bc20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800bc2a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	4613      	mov	r3, r2
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	1a9b      	subs	r3, r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	4403      	add	r3, r0
 800bc3a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bc3e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800bc40:	6879      	ldr	r1, [r7, #4]
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	4613      	mov	r3, r2
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	1a9b      	subs	r3, r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bc52:	6819      	ldr	r1, [r3, #0]
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	00db      	lsls	r3, r3, #3
 800bc5c:	1a9b      	subs	r3, r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4403      	add	r3, r0
 800bc62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4419      	add	r1, r3
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	683a      	ldr	r2, [r7, #0]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	1a9b      	subs	r3, r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4403      	add	r3, r0
 800bc78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bc7c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d114      	bne.n	800bcae <PCD_EP_OutXfrComplete_int+0x16a>
 800bc84:	6879      	ldr	r1, [r7, #4]
 800bc86:	683a      	ldr	r2, [r7, #0]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	00db      	lsls	r3, r3, #3
 800bc8c:	1a9b      	subs	r3, r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	440b      	add	r3, r1
 800bc92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d108      	bne.n	800bcae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6818      	ldr	r0, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bca6:	461a      	mov	r2, r3
 800bca8:	2101      	movs	r1, #1
 800bcaa:	f004 ffa9 	bl	8010c00 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f00d ffed 	bl	8019c94 <HAL_PCD_DataOutStageCallback>
 800bcba:	e046      	b.n	800bd4a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4a26      	ldr	r2, [pc, #152]	; (800bd58 <PCD_EP_OutXfrComplete_int+0x214>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d124      	bne.n	800bd0e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00a      	beq.n	800bce4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	015a      	lsls	r2, r3, #5
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bce0:	6093      	str	r3, [r2, #8]
 800bce2:	e032      	b.n	800bd4a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	f003 0320 	and.w	r3, r3, #32
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d008      	beq.n	800bd00 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	2320      	movs	r3, #32
 800bcfe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	4619      	mov	r1, r3
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f00d ffc4 	bl	8019c94 <HAL_PCD_DataOutStageCallback>
 800bd0c:	e01d      	b.n	800bd4a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d114      	bne.n	800bd3e <PCD_EP_OutXfrComplete_int+0x1fa>
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	683a      	ldr	r2, [r7, #0]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	00db      	lsls	r3, r3, #3
 800bd1c:	1a9b      	subs	r3, r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	440b      	add	r3, r1
 800bd22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d108      	bne.n	800bd3e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6818      	ldr	r0, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bd36:	461a      	mov	r2, r3
 800bd38:	2100      	movs	r1, #0
 800bd3a:	f004 ff61 	bl	8010c00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	4619      	mov	r1, r3
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f00d ffa5 	bl	8019c94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3718      	adds	r7, #24
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	4f54300a 	.word	0x4f54300a
 800bd58:	4f54310a 	.word	0x4f54310a

0800bd5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	333c      	adds	r3, #60	; 0x3c
 800bd74:	3304      	adds	r3, #4
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	015a      	lsls	r2, r3, #5
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	4413      	add	r3, r2
 800bd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	4a15      	ldr	r2, [pc, #84]	; (800bde4 <PCD_EP_OutSetupPacket_int+0x88>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d90e      	bls.n	800bdb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d009      	beq.n	800bdb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	015a      	lsls	r2, r3, #5
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda8:	461a      	mov	r2, r3
 800bdaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f00d ff5d 	bl	8019c70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	4a0a      	ldr	r2, [pc, #40]	; (800bde4 <PCD_EP_OutSetupPacket_int+0x88>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d90c      	bls.n	800bdd8 <PCD_EP_OutSetupPacket_int+0x7c>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d108      	bne.n	800bdd8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	2101      	movs	r1, #1
 800bdd4:	f004 ff14 	bl	8010c00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	4f54300a 	.word	0x4f54300a

0800bde8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	70fb      	strb	r3, [r7, #3]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800be00:	78fb      	ldrb	r3, [r7, #3]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d107      	bne.n	800be16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800be06:	883b      	ldrh	r3, [r7, #0]
 800be08:	0419      	lsls	r1, r3, #16
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	430a      	orrs	r2, r1
 800be12:	629a      	str	r2, [r3, #40]	; 0x28
 800be14:	e028      	b.n	800be68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1c:	0c1b      	lsrs	r3, r3, #16
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	4413      	add	r3, r2
 800be22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800be24:	2300      	movs	r3, #0
 800be26:	73fb      	strb	r3, [r7, #15]
 800be28:	e00d      	b.n	800be46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
 800be30:	3340      	adds	r3, #64	; 0x40
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	0c1b      	lsrs	r3, r3, #16
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	4413      	add	r3, r2
 800be3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800be40:	7bfb      	ldrb	r3, [r7, #15]
 800be42:	3301      	adds	r3, #1
 800be44:	73fb      	strb	r3, [r7, #15]
 800be46:	7bfa      	ldrb	r2, [r7, #15]
 800be48:	78fb      	ldrb	r3, [r7, #3]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d3ec      	bcc.n	800be2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800be50:	883b      	ldrh	r3, [r7, #0]
 800be52:	0418      	lsls	r0, r3, #16
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6819      	ldr	r1, [r3, #0]
 800be58:	78fb      	ldrb	r3, [r7, #3]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	4302      	orrs	r2, r0
 800be60:	3340      	adds	r3, #64	; 0x40
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	440b      	add	r3, r1
 800be66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800be76:	b480      	push	{r7}
 800be78:	b083      	sub	sp, #12
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	460b      	mov	r3, r1
 800be80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	887a      	ldrh	r2, [r7, #2]
 800be88:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800beb8:	4b05      	ldr	r3, [pc, #20]	; (800bed0 <HAL_PWR_EnableWakeUpPin+0x20>)
 800beba:	685a      	ldr	r2, [r3, #4]
 800bebc:	4904      	ldr	r1, [pc, #16]	; (800bed0 <HAL_PWR_EnableWakeUpPin+0x20>)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	604b      	str	r3, [r1, #4]
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	40007000 	.word	0x40007000

0800bed4 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800bedc:	4b06      	ldr	r3, [pc, #24]	; (800bef8 <HAL_PWR_DisableWakeUpPin+0x24>)
 800bede:	685a      	ldr	r2, [r3, #4]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	43db      	mvns	r3, r3
 800bee4:	4904      	ldr	r1, [pc, #16]	; (800bef8 <HAL_PWR_DisableWakeUpPin+0x24>)
 800bee6:	4013      	ands	r3, r2
 800bee8:	604b      	str	r3, [r1, #4]
}
 800beea:	bf00      	nop
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	40007000 	.word	0x40007000

0800befc <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800befc:	b480      	push	{r7}
 800befe:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800bf00:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a07      	ldr	r2, [pc, #28]	; (800bf24 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800bf06:	f043 0302 	orr.w	r3, r3, #2
 800bf0a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800bf0c:	4b06      	ldr	r3, [pc, #24]	; (800bf28 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	4a05      	ldr	r2, [pc, #20]	; (800bf28 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800bf12:	f043 0304 	orr.w	r3, r3, #4
 800bf16:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800bf18:	bf30      	wfi
}
 800bf1a:	bf00      	nop
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	40007000 	.word	0x40007000
 800bf28:	e000ed00 	.word	0xe000ed00

0800bf2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d101      	bne.n	800bf3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e264      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 0301 	and.w	r3, r3, #1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d075      	beq.n	800c036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bf4a:	4ba3      	ldr	r3, [pc, #652]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f003 030c 	and.w	r3, r3, #12
 800bf52:	2b04      	cmp	r3, #4
 800bf54:	d00c      	beq.n	800bf70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf56:	4ba0      	ldr	r3, [pc, #640]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bf5e:	2b08      	cmp	r3, #8
 800bf60:	d112      	bne.n	800bf88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf62:	4b9d      	ldr	r3, [pc, #628]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf6e:	d10b      	bne.n	800bf88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf70:	4b99      	ldr	r3, [pc, #612]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d05b      	beq.n	800c034 <HAL_RCC_OscConfig+0x108>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d157      	bne.n	800c034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	e23f      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf90:	d106      	bne.n	800bfa0 <HAL_RCC_OscConfig+0x74>
 800bf92:	4b91      	ldr	r3, [pc, #580]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a90      	ldr	r2, [pc, #576]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bf98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf9c:	6013      	str	r3, [r2, #0]
 800bf9e:	e01d      	b.n	800bfdc <HAL_RCC_OscConfig+0xb0>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bfa8:	d10c      	bne.n	800bfc4 <HAL_RCC_OscConfig+0x98>
 800bfaa:	4b8b      	ldr	r3, [pc, #556]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a8a      	ldr	r2, [pc, #552]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bfb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bfb4:	6013      	str	r3, [r2, #0]
 800bfb6:	4b88      	ldr	r3, [pc, #544]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a87      	ldr	r2, [pc, #540]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bfbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfc0:	6013      	str	r3, [r2, #0]
 800bfc2:	e00b      	b.n	800bfdc <HAL_RCC_OscConfig+0xb0>
 800bfc4:	4b84      	ldr	r3, [pc, #528]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a83      	ldr	r2, [pc, #524]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bfca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	4b81      	ldr	r3, [pc, #516]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a80      	ldr	r2, [pc, #512]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800bfd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bfda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d013      	beq.n	800c00c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfe4:	f7fc fdd4 	bl	8008b90 <HAL_GetTick>
 800bfe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfea:	e008      	b.n	800bffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bfec:	f7fc fdd0 	bl	8008b90 <HAL_GetTick>
 800bff0:	4602      	mov	r2, r0
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	2b64      	cmp	r3, #100	; 0x64
 800bff8:	d901      	bls.n	800bffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e204      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bffe:	4b76      	ldr	r3, [pc, #472]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d0f0      	beq.n	800bfec <HAL_RCC_OscConfig+0xc0>
 800c00a:	e014      	b.n	800c036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c00c:	f7fc fdc0 	bl	8008b90 <HAL_GetTick>
 800c010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c012:	e008      	b.n	800c026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c014:	f7fc fdbc 	bl	8008b90 <HAL_GetTick>
 800c018:	4602      	mov	r2, r0
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	2b64      	cmp	r3, #100	; 0x64
 800c020:	d901      	bls.n	800c026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e1f0      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c026:	4b6c      	ldr	r3, [pc, #432]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1f0      	bne.n	800c014 <HAL_RCC_OscConfig+0xe8>
 800c032:	e000      	b.n	800c036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d063      	beq.n	800c10a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c042:	4b65      	ldr	r3, [pc, #404]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	f003 030c 	and.w	r3, r3, #12
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00b      	beq.n	800c066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c04e:	4b62      	ldr	r3, [pc, #392]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c056:	2b08      	cmp	r3, #8
 800c058:	d11c      	bne.n	800c094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c05a:	4b5f      	ldr	r3, [pc, #380]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c062:	2b00      	cmp	r3, #0
 800c064:	d116      	bne.n	800c094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c066:	4b5c      	ldr	r3, [pc, #368]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0302 	and.w	r3, r3, #2
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d005      	beq.n	800c07e <HAL_RCC_OscConfig+0x152>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d001      	beq.n	800c07e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e1c4      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c07e:	4b56      	ldr	r3, [pc, #344]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	00db      	lsls	r3, r3, #3
 800c08c:	4952      	ldr	r1, [pc, #328]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c08e:	4313      	orrs	r3, r2
 800c090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c092:	e03a      	b.n	800c10a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d020      	beq.n	800c0de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c09c:	4b4f      	ldr	r3, [pc, #316]	; (800c1dc <HAL_RCC_OscConfig+0x2b0>)
 800c09e:	2201      	movs	r2, #1
 800c0a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0a2:	f7fc fd75 	bl	8008b90 <HAL_GetTick>
 800c0a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0a8:	e008      	b.n	800c0bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c0aa:	f7fc fd71 	bl	8008b90 <HAL_GetTick>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	d901      	bls.n	800c0bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e1a5      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0bc:	4b46      	ldr	r3, [pc, #280]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 0302 	and.w	r3, r3, #2
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d0f0      	beq.n	800c0aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0c8:	4b43      	ldr	r3, [pc, #268]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	00db      	lsls	r3, r3, #3
 800c0d6:	4940      	ldr	r1, [pc, #256]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	600b      	str	r3, [r1, #0]
 800c0dc:	e015      	b.n	800c10a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c0de:	4b3f      	ldr	r3, [pc, #252]	; (800c1dc <HAL_RCC_OscConfig+0x2b0>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0e4:	f7fc fd54 	bl	8008b90 <HAL_GetTick>
 800c0e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0ea:	e008      	b.n	800c0fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c0ec:	f7fc fd50 	bl	8008b90 <HAL_GetTick>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	1ad3      	subs	r3, r2, r3
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d901      	bls.n	800c0fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	e184      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0fe:	4b36      	ldr	r3, [pc, #216]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f003 0302 	and.w	r3, r3, #2
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1f0      	bne.n	800c0ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 0308 	and.w	r3, r3, #8
 800c112:	2b00      	cmp	r3, #0
 800c114:	d030      	beq.n	800c178 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d016      	beq.n	800c14c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c11e:	4b30      	ldr	r3, [pc, #192]	; (800c1e0 <HAL_RCC_OscConfig+0x2b4>)
 800c120:	2201      	movs	r2, #1
 800c122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c124:	f7fc fd34 	bl	8008b90 <HAL_GetTick>
 800c128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c12a:	e008      	b.n	800c13e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c12c:	f7fc fd30 	bl	8008b90 <HAL_GetTick>
 800c130:	4602      	mov	r2, r0
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	2b02      	cmp	r3, #2
 800c138:	d901      	bls.n	800c13e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c13a:	2303      	movs	r3, #3
 800c13c:	e164      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c13e:	4b26      	ldr	r3, [pc, #152]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c142:	f003 0302 	and.w	r3, r3, #2
 800c146:	2b00      	cmp	r3, #0
 800c148:	d0f0      	beq.n	800c12c <HAL_RCC_OscConfig+0x200>
 800c14a:	e015      	b.n	800c178 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c14c:	4b24      	ldr	r3, [pc, #144]	; (800c1e0 <HAL_RCC_OscConfig+0x2b4>)
 800c14e:	2200      	movs	r2, #0
 800c150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c152:	f7fc fd1d 	bl	8008b90 <HAL_GetTick>
 800c156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c158:	e008      	b.n	800c16c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c15a:	f7fc fd19 	bl	8008b90 <HAL_GetTick>
 800c15e:	4602      	mov	r2, r0
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	1ad3      	subs	r3, r2, r3
 800c164:	2b02      	cmp	r3, #2
 800c166:	d901      	bls.n	800c16c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c168:	2303      	movs	r3, #3
 800c16a:	e14d      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c16c:	4b1a      	ldr	r3, [pc, #104]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1f0      	bne.n	800c15a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 0304 	and.w	r3, r3, #4
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 80a0 	beq.w	800c2c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c186:	2300      	movs	r3, #0
 800c188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c18a:	4b13      	ldr	r3, [pc, #76]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10f      	bne.n	800c1b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c196:	2300      	movs	r3, #0
 800c198:	60bb      	str	r3, [r7, #8]
 800c19a:	4b0f      	ldr	r3, [pc, #60]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19e:	4a0e      	ldr	r2, [pc, #56]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c1a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1a4:	6413      	str	r3, [r2, #64]	; 0x40
 800c1a6:	4b0c      	ldr	r3, [pc, #48]	; (800c1d8 <HAL_RCC_OscConfig+0x2ac>)
 800c1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1ae:	60bb      	str	r3, [r7, #8]
 800c1b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1b6:	4b0b      	ldr	r3, [pc, #44]	; (800c1e4 <HAL_RCC_OscConfig+0x2b8>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d121      	bne.n	800c206 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c1c2:	4b08      	ldr	r3, [pc, #32]	; (800c1e4 <HAL_RCC_OscConfig+0x2b8>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a07      	ldr	r2, [pc, #28]	; (800c1e4 <HAL_RCC_OscConfig+0x2b8>)
 800c1c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1ce:	f7fc fcdf 	bl	8008b90 <HAL_GetTick>
 800c1d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1d4:	e011      	b.n	800c1fa <HAL_RCC_OscConfig+0x2ce>
 800c1d6:	bf00      	nop
 800c1d8:	40023800 	.word	0x40023800
 800c1dc:	42470000 	.word	0x42470000
 800c1e0:	42470e80 	.word	0x42470e80
 800c1e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1e8:	f7fc fcd2 	bl	8008b90 <HAL_GetTick>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d901      	bls.n	800c1fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	e106      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1fa:	4b85      	ldr	r3, [pc, #532]	; (800c410 <HAL_RCC_OscConfig+0x4e4>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c202:	2b00      	cmp	r3, #0
 800c204:	d0f0      	beq.n	800c1e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d106      	bne.n	800c21c <HAL_RCC_OscConfig+0x2f0>
 800c20e:	4b81      	ldr	r3, [pc, #516]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c212:	4a80      	ldr	r2, [pc, #512]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c214:	f043 0301 	orr.w	r3, r3, #1
 800c218:	6713      	str	r3, [r2, #112]	; 0x70
 800c21a:	e01c      	b.n	800c256 <HAL_RCC_OscConfig+0x32a>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	2b05      	cmp	r3, #5
 800c222:	d10c      	bne.n	800c23e <HAL_RCC_OscConfig+0x312>
 800c224:	4b7b      	ldr	r3, [pc, #492]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c228:	4a7a      	ldr	r2, [pc, #488]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c22a:	f043 0304 	orr.w	r3, r3, #4
 800c22e:	6713      	str	r3, [r2, #112]	; 0x70
 800c230:	4b78      	ldr	r3, [pc, #480]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c234:	4a77      	ldr	r2, [pc, #476]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c236:	f043 0301 	orr.w	r3, r3, #1
 800c23a:	6713      	str	r3, [r2, #112]	; 0x70
 800c23c:	e00b      	b.n	800c256 <HAL_RCC_OscConfig+0x32a>
 800c23e:	4b75      	ldr	r3, [pc, #468]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c242:	4a74      	ldr	r2, [pc, #464]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c244:	f023 0301 	bic.w	r3, r3, #1
 800c248:	6713      	str	r3, [r2, #112]	; 0x70
 800c24a:	4b72      	ldr	r3, [pc, #456]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c24e:	4a71      	ldr	r2, [pc, #452]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c250:	f023 0304 	bic.w	r3, r3, #4
 800c254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d015      	beq.n	800c28a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c25e:	f7fc fc97 	bl	8008b90 <HAL_GetTick>
 800c262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c264:	e00a      	b.n	800c27c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c266:	f7fc fc93 	bl	8008b90 <HAL_GetTick>
 800c26a:	4602      	mov	r2, r0
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	f241 3288 	movw	r2, #5000	; 0x1388
 800c274:	4293      	cmp	r3, r2
 800c276:	d901      	bls.n	800c27c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c278:	2303      	movs	r3, #3
 800c27a:	e0c5      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c27c:	4b65      	ldr	r3, [pc, #404]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c27e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c280:	f003 0302 	and.w	r3, r3, #2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d0ee      	beq.n	800c266 <HAL_RCC_OscConfig+0x33a>
 800c288:	e014      	b.n	800c2b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c28a:	f7fc fc81 	bl	8008b90 <HAL_GetTick>
 800c28e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c290:	e00a      	b.n	800c2a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c292:	f7fc fc7d 	bl	8008b90 <HAL_GetTick>
 800c296:	4602      	mov	r2, r0
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d901      	bls.n	800c2a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	e0af      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c2a8:	4b5a      	ldr	r3, [pc, #360]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ac:	f003 0302 	and.w	r3, r3, #2
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1ee      	bne.n	800c292 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c2b4:	7dfb      	ldrb	r3, [r7, #23]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d105      	bne.n	800c2c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2ba:	4b56      	ldr	r3, [pc, #344]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2be:	4a55      	ldr	r2, [pc, #340]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c2c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f000 809b 	beq.w	800c406 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c2d0:	4b50      	ldr	r3, [pc, #320]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	f003 030c 	and.w	r3, r3, #12
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	d05c      	beq.n	800c396 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	699b      	ldr	r3, [r3, #24]
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d141      	bne.n	800c368 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2e4:	4b4c      	ldr	r3, [pc, #304]	; (800c418 <HAL_RCC_OscConfig+0x4ec>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2ea:	f7fc fc51 	bl	8008b90 <HAL_GetTick>
 800c2ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2f0:	e008      	b.n	800c304 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c2f2:	f7fc fc4d 	bl	8008b90 <HAL_GetTick>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d901      	bls.n	800c304 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c300:	2303      	movs	r3, #3
 800c302:	e081      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c304:	4b43      	ldr	r3, [pc, #268]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1f0      	bne.n	800c2f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	69da      	ldr	r2, [r3, #28]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a1b      	ldr	r3, [r3, #32]
 800c318:	431a      	orrs	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31e:	019b      	lsls	r3, r3, #6
 800c320:	431a      	orrs	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c326:	085b      	lsrs	r3, r3, #1
 800c328:	3b01      	subs	r3, #1
 800c32a:	041b      	lsls	r3, r3, #16
 800c32c:	431a      	orrs	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c332:	061b      	lsls	r3, r3, #24
 800c334:	4937      	ldr	r1, [pc, #220]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c336:	4313      	orrs	r3, r2
 800c338:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c33a:	4b37      	ldr	r3, [pc, #220]	; (800c418 <HAL_RCC_OscConfig+0x4ec>)
 800c33c:	2201      	movs	r2, #1
 800c33e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c340:	f7fc fc26 	bl	8008b90 <HAL_GetTick>
 800c344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c346:	e008      	b.n	800c35a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c348:	f7fc fc22 	bl	8008b90 <HAL_GetTick>
 800c34c:	4602      	mov	r2, r0
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	2b02      	cmp	r3, #2
 800c354:	d901      	bls.n	800c35a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c356:	2303      	movs	r3, #3
 800c358:	e056      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c35a:	4b2e      	ldr	r3, [pc, #184]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0f0      	beq.n	800c348 <HAL_RCC_OscConfig+0x41c>
 800c366:	e04e      	b.n	800c406 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c368:	4b2b      	ldr	r3, [pc, #172]	; (800c418 <HAL_RCC_OscConfig+0x4ec>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c36e:	f7fc fc0f 	bl	8008b90 <HAL_GetTick>
 800c372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c374:	e008      	b.n	800c388 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c376:	f7fc fc0b 	bl	8008b90 <HAL_GetTick>
 800c37a:	4602      	mov	r2, r0
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	2b02      	cmp	r3, #2
 800c382:	d901      	bls.n	800c388 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c384:	2303      	movs	r3, #3
 800c386:	e03f      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c388:	4b22      	ldr	r3, [pc, #136]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1f0      	bne.n	800c376 <HAL_RCC_OscConfig+0x44a>
 800c394:	e037      	b.n	800c406 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d101      	bne.n	800c3a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e032      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c3a2:	4b1c      	ldr	r3, [pc, #112]	; (800c414 <HAL_RCC_OscConfig+0x4e8>)
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d028      	beq.n	800c402 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d121      	bne.n	800c402 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d11a      	bne.n	800c402 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c3d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d111      	bne.n	800c402 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e8:	085b      	lsrs	r3, r3, #1
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d107      	bne.n	800c402 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d001      	beq.n	800c406 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c402:	2301      	movs	r3, #1
 800c404:	e000      	b.n	800c408 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	40007000 	.word	0x40007000
 800c414:	40023800 	.word	0x40023800
 800c418:	42470060 	.word	0x42470060

0800c41c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d101      	bne.n	800c430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	e0cc      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c430:	4b68      	ldr	r3, [pc, #416]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 030f 	and.w	r3, r3, #15
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d90c      	bls.n	800c458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c43e:	4b65      	ldr	r3, [pc, #404]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	b2d2      	uxtb	r2, r2
 800c444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c446:	4b63      	ldr	r3, [pc, #396]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 030f 	and.w	r3, r3, #15
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	429a      	cmp	r2, r3
 800c452:	d001      	beq.n	800c458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	e0b8      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 0302 	and.w	r3, r3, #2
 800c460:	2b00      	cmp	r3, #0
 800c462:	d020      	beq.n	800c4a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 0304 	and.w	r3, r3, #4
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d005      	beq.n	800c47c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c470:	4b59      	ldr	r3, [pc, #356]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	4a58      	ldr	r2, [pc, #352]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c47a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 0308 	and.w	r3, r3, #8
 800c484:	2b00      	cmp	r3, #0
 800c486:	d005      	beq.n	800c494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c488:	4b53      	ldr	r3, [pc, #332]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	4a52      	ldr	r2, [pc, #328]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c48e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c494:	4b50      	ldr	r3, [pc, #320]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	494d      	ldr	r1, [pc, #308]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d044      	beq.n	800c53c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d107      	bne.n	800c4ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4ba:	4b47      	ldr	r3, [pc, #284]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d119      	bne.n	800c4fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e07f      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d003      	beq.n	800c4da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d107      	bne.n	800c4ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4da:	4b3f      	ldr	r3, [pc, #252]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d109      	bne.n	800c4fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e06f      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4ea:	4b3b      	ldr	r3, [pc, #236]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f003 0302 	and.w	r3, r3, #2
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e067      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c4fa:	4b37      	ldr	r3, [pc, #220]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	f023 0203 	bic.w	r2, r3, #3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	4934      	ldr	r1, [pc, #208]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c508:	4313      	orrs	r3, r2
 800c50a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c50c:	f7fc fb40 	bl	8008b90 <HAL_GetTick>
 800c510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c512:	e00a      	b.n	800c52a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c514:	f7fc fb3c 	bl	8008b90 <HAL_GetTick>
 800c518:	4602      	mov	r2, r0
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c522:	4293      	cmp	r3, r2
 800c524:	d901      	bls.n	800c52a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c526:	2303      	movs	r3, #3
 800c528:	e04f      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c52a:	4b2b      	ldr	r3, [pc, #172]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f003 020c 	and.w	r2, r3, #12
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	429a      	cmp	r2, r3
 800c53a:	d1eb      	bne.n	800c514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c53c:	4b25      	ldr	r3, [pc, #148]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 030f 	and.w	r3, r3, #15
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d20c      	bcs.n	800c564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c54a:	4b22      	ldr	r3, [pc, #136]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	b2d2      	uxtb	r2, r2
 800c550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c552:	4b20      	ldr	r3, [pc, #128]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 030f 	and.w	r3, r3, #15
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d001      	beq.n	800c564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	e032      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f003 0304 	and.w	r3, r3, #4
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d008      	beq.n	800c582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c570:	4b19      	ldr	r3, [pc, #100]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	4916      	ldr	r1, [pc, #88]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c57e:	4313      	orrs	r3, r2
 800c580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 0308 	and.w	r3, r3, #8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d009      	beq.n	800c5a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c58e:	4b12      	ldr	r3, [pc, #72]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	00db      	lsls	r3, r3, #3
 800c59c:	490e      	ldr	r1, [pc, #56]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c5a2:	f000 f821 	bl	800c5e8 <HAL_RCC_GetSysClockFreq>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	4b0b      	ldr	r3, [pc, #44]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	091b      	lsrs	r3, r3, #4
 800c5ae:	f003 030f 	and.w	r3, r3, #15
 800c5b2:	490a      	ldr	r1, [pc, #40]	; (800c5dc <HAL_RCC_ClockConfig+0x1c0>)
 800c5b4:	5ccb      	ldrb	r3, [r1, r3]
 800c5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ba:	4a09      	ldr	r2, [pc, #36]	; (800c5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c5bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c5be:	4b09      	ldr	r3, [pc, #36]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7f6 ff1e 	bl	8003404 <HAL_InitTick>

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	40023c00 	.word	0x40023c00
 800c5d8:	40023800 	.word	0x40023800
 800c5dc:	08023094 	.word	0x08023094
 800c5e0:	20000004 	.word	0x20000004
 800c5e4:	20000060 	.word	0x20000060

0800c5e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	607b      	str	r3, [r7, #4]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c600:	4b67      	ldr	r3, [pc, #412]	; (800c7a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	f003 030c 	and.w	r3, r3, #12
 800c608:	2b08      	cmp	r3, #8
 800c60a:	d00d      	beq.n	800c628 <HAL_RCC_GetSysClockFreq+0x40>
 800c60c:	2b08      	cmp	r3, #8
 800c60e:	f200 80bd 	bhi.w	800c78c <HAL_RCC_GetSysClockFreq+0x1a4>
 800c612:	2b00      	cmp	r3, #0
 800c614:	d002      	beq.n	800c61c <HAL_RCC_GetSysClockFreq+0x34>
 800c616:	2b04      	cmp	r3, #4
 800c618:	d003      	beq.n	800c622 <HAL_RCC_GetSysClockFreq+0x3a>
 800c61a:	e0b7      	b.n	800c78c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c61c:	4b61      	ldr	r3, [pc, #388]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c61e:	60bb      	str	r3, [r7, #8]
       break;
 800c620:	e0b7      	b.n	800c792 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c622:	4b60      	ldr	r3, [pc, #384]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c624:	60bb      	str	r3, [r7, #8]
      break;
 800c626:	e0b4      	b.n	800c792 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c628:	4b5d      	ldr	r3, [pc, #372]	; (800c7a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c630:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c632:	4b5b      	ldr	r3, [pc, #364]	; (800c7a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d04d      	beq.n	800c6da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c63e:	4b58      	ldr	r3, [pc, #352]	; (800c7a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	099b      	lsrs	r3, r3, #6
 800c644:	461a      	mov	r2, r3
 800c646:	f04f 0300 	mov.w	r3, #0
 800c64a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c64e:	f04f 0100 	mov.w	r1, #0
 800c652:	ea02 0800 	and.w	r8, r2, r0
 800c656:	ea03 0901 	and.w	r9, r3, r1
 800c65a:	4640      	mov	r0, r8
 800c65c:	4649      	mov	r1, r9
 800c65e:	f04f 0200 	mov.w	r2, #0
 800c662:	f04f 0300 	mov.w	r3, #0
 800c666:	014b      	lsls	r3, r1, #5
 800c668:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c66c:	0142      	lsls	r2, r0, #5
 800c66e:	4610      	mov	r0, r2
 800c670:	4619      	mov	r1, r3
 800c672:	ebb0 0008 	subs.w	r0, r0, r8
 800c676:	eb61 0109 	sbc.w	r1, r1, r9
 800c67a:	f04f 0200 	mov.w	r2, #0
 800c67e:	f04f 0300 	mov.w	r3, #0
 800c682:	018b      	lsls	r3, r1, #6
 800c684:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c688:	0182      	lsls	r2, r0, #6
 800c68a:	1a12      	subs	r2, r2, r0
 800c68c:	eb63 0301 	sbc.w	r3, r3, r1
 800c690:	f04f 0000 	mov.w	r0, #0
 800c694:	f04f 0100 	mov.w	r1, #0
 800c698:	00d9      	lsls	r1, r3, #3
 800c69a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c69e:	00d0      	lsls	r0, r2, #3
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	eb12 0208 	adds.w	r2, r2, r8
 800c6a8:	eb43 0309 	adc.w	r3, r3, r9
 800c6ac:	f04f 0000 	mov.w	r0, #0
 800c6b0:	f04f 0100 	mov.w	r1, #0
 800c6b4:	0299      	lsls	r1, r3, #10
 800c6b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c6ba:	0290      	lsls	r0, r2, #10
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f04f 0300 	mov.w	r3, #0
 800c6cc:	f7f4 fb4c 	bl	8000d68 <__aeabi_uldivmod>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	e04a      	b.n	800c770 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6da:	4b31      	ldr	r3, [pc, #196]	; (800c7a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	099b      	lsrs	r3, r3, #6
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	f04f 0300 	mov.w	r3, #0
 800c6e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c6ea:	f04f 0100 	mov.w	r1, #0
 800c6ee:	ea02 0400 	and.w	r4, r2, r0
 800c6f2:	ea03 0501 	and.w	r5, r3, r1
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	f04f 0200 	mov.w	r2, #0
 800c6fe:	f04f 0300 	mov.w	r3, #0
 800c702:	014b      	lsls	r3, r1, #5
 800c704:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c708:	0142      	lsls	r2, r0, #5
 800c70a:	4610      	mov	r0, r2
 800c70c:	4619      	mov	r1, r3
 800c70e:	1b00      	subs	r0, r0, r4
 800c710:	eb61 0105 	sbc.w	r1, r1, r5
 800c714:	f04f 0200 	mov.w	r2, #0
 800c718:	f04f 0300 	mov.w	r3, #0
 800c71c:	018b      	lsls	r3, r1, #6
 800c71e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c722:	0182      	lsls	r2, r0, #6
 800c724:	1a12      	subs	r2, r2, r0
 800c726:	eb63 0301 	sbc.w	r3, r3, r1
 800c72a:	f04f 0000 	mov.w	r0, #0
 800c72e:	f04f 0100 	mov.w	r1, #0
 800c732:	00d9      	lsls	r1, r3, #3
 800c734:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c738:	00d0      	lsls	r0, r2, #3
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	1912      	adds	r2, r2, r4
 800c740:	eb45 0303 	adc.w	r3, r5, r3
 800c744:	f04f 0000 	mov.w	r0, #0
 800c748:	f04f 0100 	mov.w	r1, #0
 800c74c:	0299      	lsls	r1, r3, #10
 800c74e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c752:	0290      	lsls	r0, r2, #10
 800c754:	4602      	mov	r2, r0
 800c756:	460b      	mov	r3, r1
 800c758:	4610      	mov	r0, r2
 800c75a:	4619      	mov	r1, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	461a      	mov	r2, r3
 800c760:	f04f 0300 	mov.w	r3, #0
 800c764:	f7f4 fb00 	bl	8000d68 <__aeabi_uldivmod>
 800c768:	4602      	mov	r2, r0
 800c76a:	460b      	mov	r3, r1
 800c76c:	4613      	mov	r3, r2
 800c76e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c770:	4b0b      	ldr	r3, [pc, #44]	; (800c7a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	0c1b      	lsrs	r3, r3, #16
 800c776:	f003 0303 	and.w	r3, r3, #3
 800c77a:	3301      	adds	r3, #1
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	fbb2 f3f3 	udiv	r3, r2, r3
 800c788:	60bb      	str	r3, [r7, #8]
      break;
 800c78a:	e002      	b.n	800c792 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c78c:	4b05      	ldr	r3, [pc, #20]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c78e:	60bb      	str	r3, [r7, #8]
      break;
 800c790:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c792:	68bb      	ldr	r3, [r7, #8]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c79e:	bf00      	nop
 800c7a0:	40023800 	.word	0x40023800
 800c7a4:	00f42400 	.word	0x00f42400

0800c7a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c7ac:	4b03      	ldr	r3, [pc, #12]	; (800c7bc <HAL_RCC_GetHCLKFreq+0x14>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	20000004 	.word	0x20000004

0800c7c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c7c4:	f7ff fff0 	bl	800c7a8 <HAL_RCC_GetHCLKFreq>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	4b05      	ldr	r3, [pc, #20]	; (800c7e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	0a9b      	lsrs	r3, r3, #10
 800c7d0:	f003 0307 	and.w	r3, r3, #7
 800c7d4:	4903      	ldr	r1, [pc, #12]	; (800c7e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c7d6:	5ccb      	ldrb	r3, [r1, r3]
 800c7d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	40023800 	.word	0x40023800
 800c7e4:	080230a4 	.word	0x080230a4

0800c7e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c7ec:	f7ff ffdc 	bl	800c7a8 <HAL_RCC_GetHCLKFreq>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	4b05      	ldr	r3, [pc, #20]	; (800c808 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	0b5b      	lsrs	r3, r3, #13
 800c7f8:	f003 0307 	and.w	r3, r3, #7
 800c7fc:	4903      	ldr	r1, [pc, #12]	; (800c80c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c7fe:	5ccb      	ldrb	r3, [r1, r3]
 800c800:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c804:	4618      	mov	r0, r3
 800c806:	bd80      	pop	{r7, pc}
 800c808:	40023800 	.word	0x40023800
 800c80c:	080230a4 	.word	0x080230a4

0800c810 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	220f      	movs	r2, #15
 800c81e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c820:	4b12      	ldr	r3, [pc, #72]	; (800c86c <HAL_RCC_GetClockConfig+0x5c>)
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	f003 0203 	and.w	r2, r3, #3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c82c:	4b0f      	ldr	r3, [pc, #60]	; (800c86c <HAL_RCC_GetClockConfig+0x5c>)
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c838:	4b0c      	ldr	r3, [pc, #48]	; (800c86c <HAL_RCC_GetClockConfig+0x5c>)
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c844:	4b09      	ldr	r3, [pc, #36]	; (800c86c <HAL_RCC_GetClockConfig+0x5c>)
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	08db      	lsrs	r3, r3, #3
 800c84a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c852:	4b07      	ldr	r3, [pc, #28]	; (800c870 <HAL_RCC_GetClockConfig+0x60>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f003 020f 	and.w	r2, r3, #15
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	601a      	str	r2, [r3, #0]
}
 800c85e:	bf00      	nop
 800c860:	370c      	adds	r7, #12
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	40023800 	.word	0x40023800
 800c870:	40023c00 	.word	0x40023c00

0800c874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c87c:	2300      	movs	r3, #0
 800c87e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c880:	2300      	movs	r3, #0
 800c882:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 0301 	and.w	r3, r3, #1
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10b      	bne.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d105      	bne.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d075      	beq.n	800c994 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c8a8:	4bad      	ldr	r3, [pc, #692]	; (800cb60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c8ae:	f7fc f96f 	bl	8008b90 <HAL_GetTick>
 800c8b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8b4:	e008      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c8b6:	f7fc f96b 	bl	8008b90 <HAL_GetTick>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d901      	bls.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	e18b      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8c8:	4ba6      	ldr	r3, [pc, #664]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1f0      	bne.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 0301 	and.w	r3, r3, #1
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d009      	beq.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	019a      	lsls	r2, r3, #6
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	071b      	lsls	r3, r3, #28
 800c8ec:	499d      	ldr	r1, [pc, #628]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 0302 	and.w	r3, r3, #2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d01f      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c900:	4b98      	ldr	r3, [pc, #608]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c906:	0f1b      	lsrs	r3, r3, #28
 800c908:	f003 0307 	and.w	r3, r3, #7
 800c90c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	019a      	lsls	r2, r3, #6
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	061b      	lsls	r3, r3, #24
 800c91a:	431a      	orrs	r2, r3
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	071b      	lsls	r3, r3, #28
 800c920:	4990      	ldr	r1, [pc, #576]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c922:	4313      	orrs	r3, r2
 800c924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c928:	4b8e      	ldr	r3, [pc, #568]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c92a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c92e:	f023 021f 	bic.w	r2, r3, #31
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	69db      	ldr	r3, [r3, #28]
 800c936:	3b01      	subs	r3, #1
 800c938:	498a      	ldr	r1, [pc, #552]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c93a:	4313      	orrs	r3, r2
 800c93c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00d      	beq.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	019a      	lsls	r2, r3, #6
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	061b      	lsls	r3, r3, #24
 800c958:	431a      	orrs	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	071b      	lsls	r3, r3, #28
 800c960:	4980      	ldr	r1, [pc, #512]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c962:	4313      	orrs	r3, r2
 800c964:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c968:	4b7d      	ldr	r3, [pc, #500]	; (800cb60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c96a:	2201      	movs	r2, #1
 800c96c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c96e:	f7fc f90f 	bl	8008b90 <HAL_GetTick>
 800c972:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c974:	e008      	b.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c976:	f7fc f90b 	bl	8008b90 <HAL_GetTick>
 800c97a:	4602      	mov	r2, r0
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	2b02      	cmp	r3, #2
 800c982:	d901      	bls.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c984:	2303      	movs	r3, #3
 800c986:	e12b      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c988:	4b76      	ldr	r3, [pc, #472]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c990:	2b00      	cmp	r3, #0
 800c992:	d0f0      	beq.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 0304 	and.w	r3, r3, #4
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d105      	bne.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d079      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c9ac:	4b6e      	ldr	r3, [pc, #440]	; (800cb68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c9b2:	f7fc f8ed 	bl	8008b90 <HAL_GetTick>
 800c9b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9b8:	e008      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c9ba:	f7fc f8e9 	bl	8008b90 <HAL_GetTick>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	1ad3      	subs	r3, r2, r3
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d901      	bls.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	e109      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9cc:	4b65      	ldr	r3, [pc, #404]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9d8:	d0ef      	beq.n	800c9ba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f003 0304 	and.w	r3, r3, #4
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d020      	beq.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c9e6:	4b5f      	ldr	r3, [pc, #380]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ec:	0f1b      	lsrs	r3, r3, #28
 800c9ee:	f003 0307 	and.w	r3, r3, #7
 800c9f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	019a      	lsls	r2, r3, #6
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	695b      	ldr	r3, [r3, #20]
 800c9fe:	061b      	lsls	r3, r3, #24
 800ca00:	431a      	orrs	r2, r3
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	071b      	lsls	r3, r3, #28
 800ca06:	4957      	ldr	r1, [pc, #348]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ca0e:	4b55      	ldr	r3, [pc, #340]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a1b      	ldr	r3, [r3, #32]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	021b      	lsls	r3, r3, #8
 800ca20:	4950      	ldr	r1, [pc, #320]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca22:	4313      	orrs	r3, r2
 800ca24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f003 0308 	and.w	r3, r3, #8
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d01e      	beq.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca34:	4b4b      	ldr	r3, [pc, #300]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca3a:	0e1b      	lsrs	r3, r3, #24
 800ca3c:	f003 030f 	and.w	r3, r3, #15
 800ca40:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	019a      	lsls	r2, r3, #6
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	061b      	lsls	r3, r3, #24
 800ca4c:	431a      	orrs	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	071b      	lsls	r3, r3, #28
 800ca54:	4943      	ldr	r1, [pc, #268]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca56:	4313      	orrs	r3, r2
 800ca58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ca5c:	4b41      	ldr	r3, [pc, #260]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6a:	493e      	ldr	r1, [pc, #248]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ca72:	4b3d      	ldr	r3, [pc, #244]	; (800cb68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ca74:	2201      	movs	r2, #1
 800ca76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ca78:	f7fc f88a 	bl	8008b90 <HAL_GetTick>
 800ca7c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ca7e:	e008      	b.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ca80:	f7fc f886 	bl	8008b90 <HAL_GetTick>
 800ca84:	4602      	mov	r2, r0
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d901      	bls.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e0a6      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ca92:	4b34      	ldr	r3, [pc, #208]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca9e:	d1ef      	bne.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f003 0320 	and.w	r3, r3, #32
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 808d 	beq.w	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800caae:	2300      	movs	r3, #0
 800cab0:	60fb      	str	r3, [r7, #12]
 800cab2:	4b2c      	ldr	r3, [pc, #176]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab6:	4a2b      	ldr	r2, [pc, #172]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cabc:	6413      	str	r3, [r2, #64]	; 0x40
 800cabe:	4b29      	ldr	r3, [pc, #164]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800caca:	4b28      	ldr	r3, [pc, #160]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a27      	ldr	r2, [pc, #156]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800cad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cad4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cad6:	f7fc f85b 	bl	8008b90 <HAL_GetTick>
 800cada:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cadc:	e008      	b.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cade:	f7fc f857 	bl	8008b90 <HAL_GetTick>
 800cae2:	4602      	mov	r2, r0
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d901      	bls.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800caec:	2303      	movs	r3, #3
 800caee:	e077      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800caf0:	4b1e      	ldr	r3, [pc, #120]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d0f0      	beq.n	800cade <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cafc:	4b19      	ldr	r3, [pc, #100]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb04:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d039      	beq.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb14:	693a      	ldr	r2, [r7, #16]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d032      	beq.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cb1a:	4b12      	ldr	r3, [pc, #72]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cb1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cb24:	4b12      	ldr	r3, [pc, #72]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800cb26:	2201      	movs	r2, #1
 800cb28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cb2a:	4b11      	ldr	r3, [pc, #68]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cb30:	4a0c      	ldr	r2, [pc, #48]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cb36:	4b0b      	ldr	r3, [pc, #44]	; (800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d11e      	bne.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cb42:	f7fc f825 	bl	8008b90 <HAL_GetTick>
 800cb46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb48:	e014      	b.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cb4a:	f7fc f821 	bl	8008b90 <HAL_GetTick>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d90b      	bls.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	e03f      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800cb60:	42470068 	.word	0x42470068
 800cb64:	40023800 	.word	0x40023800
 800cb68:	42470070 	.word	0x42470070
 800cb6c:	40007000 	.word	0x40007000
 800cb70:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb74:	4b1c      	ldr	r3, [pc, #112]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cb76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb78:	f003 0302 	and.w	r3, r3, #2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d0e4      	beq.n	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb8c:	d10d      	bne.n	800cbaa <HAL_RCCEx_PeriphCLKConfig+0x336>
 800cb8e:	4b16      	ldr	r3, [pc, #88]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cb9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cba2:	4911      	ldr	r1, [pc, #68]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cba4:	4313      	orrs	r3, r2
 800cba6:	608b      	str	r3, [r1, #8]
 800cba8:	e005      	b.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800cbaa:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	4a0e      	ldr	r2, [pc, #56]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cbb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cbb4:	6093      	str	r3, [r2, #8]
 800cbb6:	4b0c      	ldr	r3, [pc, #48]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cbb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbc2:	4909      	ldr	r1, [pc, #36]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f003 0310 	and.w	r3, r3, #16
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d004      	beq.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800cbda:	4b04      	ldr	r3, [pc, #16]	; (800cbec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800cbdc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3718      	adds	r7, #24
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	40023800 	.word	0x40023800
 800cbec:	424711e0 	.word	0x424711e0

0800cbf0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d101      	bne.n	800cc02 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e083      	b.n	800cd0a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	7f5b      	ldrb	r3, [r3, #29]
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d105      	bne.n	800cc18 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7f6 fa02 	bl	800301c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2202      	movs	r2, #2
 800cc1c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	22ca      	movs	r2, #202	; 0xca
 800cc24:	625a      	str	r2, [r3, #36]	; 0x24
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2253      	movs	r2, #83	; 0x53
 800cc2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fc26 	bl	800d480 <RTC_EnterInitMode>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d008      	beq.n	800cc4c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	22ff      	movs	r2, #255	; 0xff
 800cc40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2204      	movs	r2, #4
 800cc46:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e05e      	b.n	800cd0a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	6812      	ldr	r2, [r2, #0]
 800cc56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc5e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6899      	ldr	r1, [r3, #8]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	431a      	orrs	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	431a      	orrs	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	430a      	orrs	r2, r1
 800cc7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	68d2      	ldr	r2, [r2, #12]
 800cc86:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6919      	ldr	r1, [r3, #16]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	041a      	lsls	r2, r3, #16
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	68da      	ldr	r2, [r3, #12]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ccaa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	f003 0320 	and.w	r3, r3, #32
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10e      	bne.n	800ccd8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fbb8 	bl	800d430 <HAL_RTC_WaitForSynchro>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d008      	beq.n	800ccd8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	22ff      	movs	r2, #255	; 0xff
 800cccc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2204      	movs	r2, #4
 800ccd2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e018      	b.n	800cd0a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cce6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	699a      	ldr	r2, [r3, #24]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	430a      	orrs	r2, r1
 800ccf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	22ff      	movs	r2, #255	; 0xff
 800cd00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2201      	movs	r2, #1
 800cd06:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cd08:	2300      	movs	r3, #0
  }
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cd12:	b590      	push	{r4, r7, lr}
 800cd14:	b087      	sub	sp, #28
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	60f8      	str	r0, [r7, #12]
 800cd1a:	60b9      	str	r1, [r7, #8]
 800cd1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	7f1b      	ldrb	r3, [r3, #28]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d101      	bne.n	800cd2e <HAL_RTC_SetTime+0x1c>
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	e0aa      	b.n	800ce84 <HAL_RTC_SetTime+0x172>
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2201      	movs	r2, #1
 800cd32:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2202      	movs	r2, #2
 800cd38:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d126      	bne.n	800cd8e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d102      	bne.n	800cd54 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2200      	movs	r2, #0
 800cd52:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f000 fbbd 	bl	800d4d8 <RTC_ByteToBcd2>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	785b      	ldrb	r3, [r3, #1]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 fbb6 	bl	800d4d8 <RTC_ByteToBcd2>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cd70:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	789b      	ldrb	r3, [r3, #2]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 fbae 	bl	800d4d8 <RTC_ByteToBcd2>
 800cd7c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800cd7e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	78db      	ldrb	r3, [r3, #3]
 800cd86:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	617b      	str	r3, [r7, #20]
 800cd8c:	e018      	b.n	800cdc0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d102      	bne.n	800cda2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	785b      	ldrb	r3, [r3, #1]
 800cdac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cdae:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800cdb4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	78db      	ldrb	r3, [r3, #3]
 800cdba:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	22ca      	movs	r2, #202	; 0xca
 800cdc6:	625a      	str	r2, [r3, #36]	; 0x24
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2253      	movs	r2, #83	; 0x53
 800cdce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 fb55 	bl	800d480 <RTC_EnterInitMode>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00b      	beq.n	800cdf4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	22ff      	movs	r2, #255	; 0xff
 800cde2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2204      	movs	r2, #4
 800cde8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e047      	b.n	800ce84 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cdfe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ce02:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	689a      	ldr	r2, [r3, #8]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ce12:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6899      	ldr	r1, [r3, #8]
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	68da      	ldr	r2, [r3, #12]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	431a      	orrs	r2, r3
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	430a      	orrs	r2, r1
 800ce2a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68da      	ldr	r2, [r3, #12]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce3a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	f003 0320 	and.w	r3, r3, #32
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d111      	bne.n	800ce6e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 faf0 	bl	800d430 <HAL_RTC_WaitForSynchro>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00b      	beq.n	800ce6e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	22ff      	movs	r2, #255	; 0xff
 800ce5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2204      	movs	r2, #4
 800ce62:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e00a      	b.n	800ce84 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	22ff      	movs	r2, #255	; 0xff
 800ce74:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ce82:	2300      	movs	r3, #0
  }
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	371c      	adds	r7, #28
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd90      	pop	{r4, r7, pc}

0800ce8c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cebe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cec2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	0c1b      	lsrs	r3, r3, #16
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cece:	b2da      	uxtb	r2, r3
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	0a1b      	lsrs	r3, r3, #8
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	0c1b      	lsrs	r3, r3, #16
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d11a      	bne.n	800cf3e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f000 fb01 	bl	800d514 <RTC_Bcd2ToByte>
 800cf12:	4603      	mov	r3, r0
 800cf14:	461a      	mov	r2, r3
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	785b      	ldrb	r3, [r3, #1]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 faf8 	bl	800d514 <RTC_Bcd2ToByte>
 800cf24:	4603      	mov	r3, r0
 800cf26:	461a      	mov	r2, r3
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	789b      	ldrb	r3, [r3, #2]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f000 faef 	bl	800d514 <RTC_Bcd2ToByte>
 800cf36:	4603      	mov	r3, r0
 800cf38:	461a      	mov	r2, r3
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3718      	adds	r7, #24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cf48:	b590      	push	{r4, r7, lr}
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cf54:	2300      	movs	r3, #0
 800cf56:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	7f1b      	ldrb	r3, [r3, #28]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d101      	bne.n	800cf64 <HAL_RTC_SetDate+0x1c>
 800cf60:	2302      	movs	r3, #2
 800cf62:	e094      	b.n	800d08e <HAL_RTC_SetDate+0x146>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2201      	movs	r2, #1
 800cf68:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10e      	bne.n	800cf94 <HAL_RTC_SetDate+0x4c>
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	785b      	ldrb	r3, [r3, #1]
 800cf7a:	f003 0310 	and.w	r3, r3, #16
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d008      	beq.n	800cf94 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	785b      	ldrb	r3, [r3, #1]
 800cf86:	f023 0310 	bic.w	r3, r3, #16
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	330a      	adds	r3, #10
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d11c      	bne.n	800cfd4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	78db      	ldrb	r3, [r3, #3]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 fa9a 	bl	800d4d8 <RTC_ByteToBcd2>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	785b      	ldrb	r3, [r3, #1]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 fa93 	bl	800d4d8 <RTC_ByteToBcd2>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cfb6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	789b      	ldrb	r3, [r3, #2]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f000 fa8b 	bl	800d4d8 <RTC_ByteToBcd2>
 800cfc2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cfc4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	617b      	str	r3, [r7, #20]
 800cfd2:	e00e      	b.n	800cff2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	78db      	ldrb	r3, [r3, #3]
 800cfd8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	785b      	ldrb	r3, [r3, #1]
 800cfde:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cfe0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800cfe2:	68ba      	ldr	r2, [r7, #8]
 800cfe4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800cfe6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cfee:	4313      	orrs	r3, r2
 800cff0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	22ca      	movs	r2, #202	; 0xca
 800cff8:	625a      	str	r2, [r3, #36]	; 0x24
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2253      	movs	r2, #83	; 0x53
 800d000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f000 fa3c 	bl	800d480 <RTC_EnterInitMode>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00b      	beq.n	800d026 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	22ff      	movs	r2, #255	; 0xff
 800d014:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2204      	movs	r2, #4
 800d01a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	e033      	b.n	800d08e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d030:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d034:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68da      	ldr	r2, [r3, #12]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d044:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	f003 0320 	and.w	r3, r3, #32
 800d050:	2b00      	cmp	r3, #0
 800d052:	d111      	bne.n	800d078 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f000 f9eb 	bl	800d430 <HAL_RTC_WaitForSynchro>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00b      	beq.n	800d078 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	22ff      	movs	r2, #255	; 0xff
 800d066:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2204      	movs	r2, #4
 800d06c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	e00a      	b.n	800d08e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	22ff      	movs	r2, #255	; 0xff
 800d07e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2201      	movs	r2, #1
 800d084:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2200      	movs	r2, #0
 800d08a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d08c:	2300      	movs	r3, #0
  }
}
 800d08e:	4618      	mov	r0, r3
 800d090:	371c      	adds	r7, #28
 800d092:	46bd      	mov	sp, r7
 800d094:	bd90      	pop	{r4, r7, pc}

0800d096 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b086      	sub	sp, #24
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	60f8      	str	r0, [r7, #12]
 800d09e:	60b9      	str	r1, [r7, #8]
 800d0a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d0b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d0b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	0c1b      	lsrs	r3, r3, #16
 800d0ba:	b2da      	uxtb	r2, r3
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	0a1b      	lsrs	r3, r3, #8
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	f003 031f 	and.w	r3, r3, #31
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0d8:	b2da      	uxtb	r2, r3
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	0b5b      	lsrs	r3, r3, #13
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	f003 0307 	and.w	r3, r3, #7
 800d0e8:	b2da      	uxtb	r2, r3
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d11a      	bne.n	800d12a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	78db      	ldrb	r3, [r3, #3]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 fa0b 	bl	800d514 <RTC_Bcd2ToByte>
 800d0fe:	4603      	mov	r3, r0
 800d100:	461a      	mov	r2, r3
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	785b      	ldrb	r3, [r3, #1]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 fa02 	bl	800d514 <RTC_Bcd2ToByte>
 800d110:	4603      	mov	r3, r0
 800d112:	461a      	mov	r2, r3
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	789b      	ldrb	r3, [r3, #2]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 f9f9 	bl	800d514 <RTC_Bcd2ToByte>
 800d122:	4603      	mov	r3, r0
 800d124:	461a      	mov	r2, r3
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3718      	adds	r7, #24
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d134:	b590      	push	{r4, r7, lr}
 800d136:	b089      	sub	sp, #36	; 0x24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800d140:	2300      	movs	r3, #0
 800d142:	61fb      	str	r3, [r7, #28]
 800d144:	2300      	movs	r3, #0
 800d146:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800d148:	4b93      	ldr	r3, [pc, #588]	; (800d398 <HAL_RTC_SetAlarm_IT+0x264>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a93      	ldr	r2, [pc, #588]	; (800d39c <HAL_RTC_SetAlarm_IT+0x268>)
 800d14e:	fba2 2303 	umull	r2, r3, r2, r3
 800d152:	0adb      	lsrs	r3, r3, #11
 800d154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d158:	fb02 f303 	mul.w	r3, r2, r3
 800d15c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	7f1b      	ldrb	r3, [r3, #28]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d101      	bne.n	800d16a <HAL_RTC_SetAlarm_IT+0x36>
 800d166:	2302      	movs	r3, #2
 800d168:	e111      	b.n	800d38e <HAL_RTC_SetAlarm_IT+0x25a>
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2201      	movs	r2, #1
 800d16e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2202      	movs	r2, #2
 800d174:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d137      	bne.n	800d1ec <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d186:	2b00      	cmp	r3, #0
 800d188:	d102      	bne.n	800d190 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2200      	movs	r2, #0
 800d18e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	4618      	mov	r0, r3
 800d196:	f000 f99f 	bl	800d4d8 <RTC_ByteToBcd2>
 800d19a:	4603      	mov	r3, r0
 800d19c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	785b      	ldrb	r3, [r3, #1]
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f000 f998 	bl	800d4d8 <RTC_ByteToBcd2>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d1ac:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	789b      	ldrb	r3, [r3, #2]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f000 f990 	bl	800d4d8 <RTC_ByteToBcd2>
 800d1b8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d1ba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	78db      	ldrb	r3, [r3, #3]
 800d1c2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d1c4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f000 f982 	bl	800d4d8 <RTC_ByteToBcd2>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d1d8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d1e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	61fb      	str	r3, [r7, #28]
 800d1ea:	e023      	b.n	800d234 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d102      	bne.n	800d200 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	785b      	ldrb	r3, [r3, #1]
 800d20a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d20c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d212:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	78db      	ldrb	r3, [r3, #3]
 800d218:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d21a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d222:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d224:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d22a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d230:	4313      	orrs	r3, r2
 800d232:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	685a      	ldr	r2, [r3, #4]
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	699b      	ldr	r3, [r3, #24]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	22ca      	movs	r2, #202	; 0xca
 800d246:	625a      	str	r2, [r3, #36]	; 0x24
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2253      	movs	r2, #83	; 0x53
 800d24e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d258:	d141      	bne.n	800d2de <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	689a      	ldr	r2, [r3, #8]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d268:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	b2da      	uxtb	r2, r3
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d27a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	1e5a      	subs	r2, r3, #1
 800d280:	617a      	str	r2, [r7, #20]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10b      	bne.n	800d29e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	22ff      	movs	r2, #255	; 0xff
 800d28c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2203      	movs	r2, #3
 800d292:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d29a:	2303      	movs	r3, #3
 800d29c:	e077      	b.n	800d38e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	f003 0301 	and.w	r3, r3, #1
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0e7      	beq.n	800d27c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	69fa      	ldr	r2, [r7, #28]
 800d2b2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	69ba      	ldr	r2, [r7, #24]
 800d2ba:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	689a      	ldr	r2, [r3, #8]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2ca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	689a      	ldr	r2, [r3, #8]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d2da:	609a      	str	r2, [r3, #8]
 800d2dc:	e040      	b.n	800d360 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	689a      	ldr	r2, [r3, #8]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d2ec:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d2fe:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	1e5a      	subs	r2, r3, #1
 800d304:	617a      	str	r2, [r7, #20]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10b      	bne.n	800d322 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	22ff      	movs	r2, #255	; 0xff
 800d310:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2203      	movs	r2, #3
 800d316:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2200      	movs	r2, #0
 800d31c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d31e:	2303      	movs	r3, #3
 800d320:	e035      	b.n	800d38e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	f003 0302 	and.w	r3, r3, #2
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d0e7      	beq.n	800d300 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	69fa      	ldr	r2, [r7, #28]
 800d336:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	69ba      	ldr	r2, [r7, #24]
 800d33e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	689a      	ldr	r2, [r3, #8]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d34e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	689a      	ldr	r2, [r3, #8]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d35e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800d360:	4b0f      	ldr	r3, [pc, #60]	; (800d3a0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a0e      	ldr	r2, [pc, #56]	; (800d3a0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d36a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800d36c:	4b0c      	ldr	r3, [pc, #48]	; (800d3a0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	4a0b      	ldr	r2, [pc, #44]	; (800d3a0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d376:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	22ff      	movs	r2, #255	; 0xff
 800d37e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2201      	movs	r2, #1
 800d384:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3724      	adds	r7, #36	; 0x24
 800d392:	46bd      	mov	sp, r7
 800d394:	bd90      	pop	{r4, r7, pc}
 800d396:	bf00      	nop
 800d398:	20000004 	.word	0x20000004
 800d39c:	10624dd3 	.word	0x10624dd3
 800d3a0:	40013c00 	.word	0x40013c00

0800d3a4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d012      	beq.n	800d3e0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00b      	beq.n	800d3e0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f7fa feef 	bl	80081ac <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d3de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d012      	beq.n	800d414 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00b      	beq.n	800d414 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f9bf 	bl	800d780 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	b2da      	uxtb	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d412:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d414:	4b05      	ldr	r3, [pc, #20]	; (800d42c <HAL_RTC_AlarmIRQHandler+0x88>)
 800d416:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d41a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2201      	movs	r2, #1
 800d420:	775a      	strb	r2, [r3, #29]
}
 800d422:	bf00      	nop
 800d424:	3708      	adds	r7, #8
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	40013c00 	.word	0x40013c00

0800d430 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d438:	2300      	movs	r3, #0
 800d43a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68da      	ldr	r2, [r3, #12]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d44a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d44c:	f7fb fba0 	bl	8008b90 <HAL_GetTick>
 800d450:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d452:	e009      	b.n	800d468 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d454:	f7fb fb9c 	bl	8008b90 <HAL_GetTick>
 800d458:	4602      	mov	r2, r0
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	1ad3      	subs	r3, r2, r3
 800d45e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d462:	d901      	bls.n	800d468 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d464:	2303      	movs	r3, #3
 800d466:	e007      	b.n	800d478 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	f003 0320 	and.w	r3, r3, #32
 800d472:	2b00      	cmp	r3, #0
 800d474:	d0ee      	beq.n	800d454 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d488:	2300      	movs	r3, #0
 800d48a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d496:	2b00      	cmp	r3, #0
 800d498:	d119      	bne.n	800d4ce <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d4a4:	f7fb fb74 	bl	8008b90 <HAL_GetTick>
 800d4a8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d4aa:	e009      	b.n	800d4c0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d4ac:	f7fb fb70 	bl	8008b90 <HAL_GetTick>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	1ad3      	subs	r3, r2, r3
 800d4b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4ba:	d901      	bls.n	800d4c0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d4bc:	2303      	movs	r3, #3
 800d4be:	e007      	b.n	800d4d0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d0ee      	beq.n	800d4ac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800d4e6:	e005      	b.n	800d4f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800d4ee:	79fb      	ldrb	r3, [r7, #7]
 800d4f0:	3b0a      	subs	r3, #10
 800d4f2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800d4f4:	79fb      	ldrb	r3, [r7, #7]
 800d4f6:	2b09      	cmp	r3, #9
 800d4f8:	d8f6      	bhi.n	800d4e8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	011b      	lsls	r3, r3, #4
 800d500:	b2da      	uxtb	r2, r3
 800d502:	79fb      	ldrb	r3, [r7, #7]
 800d504:	4313      	orrs	r3, r2
 800d506:	b2db      	uxtb	r3, r3
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3714      	adds	r7, #20
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	4603      	mov	r3, r0
 800d51c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800d51e:	2300      	movs	r3, #0
 800d520:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800d522:	79fb      	ldrb	r3, [r7, #7]
 800d524:	091b      	lsrs	r3, r3, #4
 800d526:	b2db      	uxtb	r3, r3
 800d528:	461a      	mov	r2, r3
 800d52a:	4613      	mov	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4413      	add	r3, r2
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800d534:	79fb      	ldrb	r3, [r7, #7]
 800d536:	f003 030f 	and.w	r3, r3, #15
 800d53a:	b2da      	uxtb	r2, r3
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	4413      	add	r3, r2
 800d542:	b2db      	uxtb	r3, r3
}
 800d544:	4618      	mov	r0, r3
 800d546:	3714      	adds	r7, #20
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d550:	b480      	push	{r7}
 800d552:	b087      	sub	sp, #28
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	7f1b      	ldrb	r3, [r3, #28]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d101      	bne.n	800d568 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800d564:	2302      	movs	r3, #2
 800d566:	e0a6      	b.n	800d6b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2201      	movs	r2, #1
 800d56c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2202      	movs	r2, #2
 800d572:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	22ca      	movs	r2, #202	; 0xca
 800d57a:	625a      	str	r2, [r3, #36]	; 0x24
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2253      	movs	r2, #83	; 0x53
 800d582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d022      	beq.n	800d5d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d592:	4b4c      	ldr	r3, [pc, #304]	; (800d6c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a4c      	ldr	r2, [pc, #304]	; (800d6c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d598:	fba2 2303 	umull	r2, r3, r2, r3
 800d59c:	0adb      	lsrs	r3, r3, #11
 800d59e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5a2:	fb02 f303 	mul.w	r3, r2, r3
 800d5a6:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	1e5a      	subs	r2, r3, #1
 800d5ac:	617a      	str	r2, [r7, #20]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10b      	bne.n	800d5ca <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	22ff      	movs	r2, #255	; 0xff
 800d5b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2203      	movs	r2, #3
 800d5be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	e075      	b.n	800d6b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	f003 0304 	and.w	r3, r3, #4
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1e7      	bne.n	800d5a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	689a      	ldr	r2, [r3, #8]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5e6:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d5e8:	4b36      	ldr	r3, [pc, #216]	; (800d6c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a36      	ldr	r2, [pc, #216]	; (800d6c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d5f2:	0adb      	lsrs	r3, r3, #11
 800d5f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5f8:	fb02 f303 	mul.w	r3, r2, r3
 800d5fc:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	1e5a      	subs	r2, r3, #1
 800d602:	617a      	str	r2, [r7, #20]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10b      	bne.n	800d620 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	22ff      	movs	r2, #255	; 0xff
 800d60e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2203      	movs	r2, #3
 800d614:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2200      	movs	r2, #0
 800d61a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d61c:	2303      	movs	r3, #3
 800d61e:	e04a      	b.n	800d6b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	f003 0304 	and.w	r3, r3, #4
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d0e7      	beq.n	800d5fe <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68ba      	ldr	r2, [r7, #8]
 800d634:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	689a      	ldr	r2, [r3, #8]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f022 0207 	bic.w	r2, r2, #7
 800d644:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6899      	ldr	r1, [r3, #8]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	430a      	orrs	r2, r1
 800d654:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d656:	4b1d      	ldr	r3, [pc, #116]	; (800d6cc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a1c      	ldr	r2, [pc, #112]	; (800d6cc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d65c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d660:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800d662:	4b1a      	ldr	r3, [pc, #104]	; (800d6cc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	4a19      	ldr	r2, [pc, #100]	; (800d6cc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d66c:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	b2da      	uxtb	r2, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800d67e:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	689a      	ldr	r2, [r3, #8]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d68e:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	689a      	ldr	r2, [r3, #8]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d69e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	22ff      	movs	r2, #255	; 0xff
 800d6a6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	371c      	adds	r7, #28
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	20000004 	.word	0x20000004
 800d6c8:	10624dd3 	.word	0x10624dd3
 800d6cc:	40013c00 	.word	0x40013c00

0800d6d0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	7f1b      	ldrb	r3, [r3, #28]
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d101      	bne.n	800d6e8 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	e047      	b.n	800d778 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	22ca      	movs	r2, #202	; 0xca
 800d6fa:	625a      	str	r2, [r3, #36]	; 0x24
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2253      	movs	r2, #83	; 0x53
 800d702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	689a      	ldr	r2, [r3, #8]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d712:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	689a      	ldr	r2, [r3, #8]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d722:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d724:	f7fb fa34 	bl	8008b90 <HAL_GetTick>
 800d728:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d72a:	e013      	b.n	800d754 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d72c:	f7fb fa30 	bl	8008b90 <HAL_GetTick>
 800d730:	4602      	mov	r2, r0
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	1ad3      	subs	r3, r2, r3
 800d736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d73a:	d90b      	bls.n	800d754 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	22ff      	movs	r2, #255	; 0xff
 800d742:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2203      	movs	r2, #3
 800d748:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d750:	2303      	movs	r3, #3
 800d752:	e011      	b.n	800d778 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	f003 0304 	and.w	r3, r3, #4
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d0e4      	beq.n	800d72c <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	22ff      	movs	r2, #255	; 0xff
 800d768:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800d788:	bf00      	nop
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d101      	bne.n	800d7a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	e07b      	b.n	800d89e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d108      	bne.n	800d7c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d7b6:	d009      	beq.n	800d7cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	61da      	str	r2, [r3, #28]
 800d7be:	e005      	b.n	800d7cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d106      	bne.n	800d7ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7f5 fc4a 	bl	8003080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d814:	431a      	orrs	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d81e:	431a      	orrs	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	691b      	ldr	r3, [r3, #16]
 800d824:	f003 0302 	and.w	r3, r3, #2
 800d828:	431a      	orrs	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	f003 0301 	and.w	r3, r3, #1
 800d832:	431a      	orrs	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	699b      	ldr	r3, [r3, #24]
 800d838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d83c:	431a      	orrs	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	69db      	ldr	r3, [r3, #28]
 800d842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d846:	431a      	orrs	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a1b      	ldr	r3, [r3, #32]
 800d84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d850:	ea42 0103 	orr.w	r1, r2, r3
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d858:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	430a      	orrs	r2, r1
 800d862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	0c1b      	lsrs	r3, r3, #16
 800d86a:	f003 0104 	and.w	r1, r3, #4
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d872:	f003 0210 	and.w	r2, r3, #16
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	430a      	orrs	r2, r1
 800d87c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	69da      	ldr	r2, [r3, #28]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d88c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b088      	sub	sp, #32
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	60f8      	str	r0, [r7, #12]
 800d8ae:	60b9      	str	r1, [r7, #8]
 800d8b0:	603b      	str	r3, [r7, #0]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d101      	bne.n	800d8c8 <HAL_SPI_Transmit+0x22>
 800d8c4:	2302      	movs	r3, #2
 800d8c6:	e126      	b.n	800db16 <HAL_SPI_Transmit+0x270>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8d0:	f7fb f95e 	bl	8008b90 <HAL_GetTick>
 800d8d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d8d6:	88fb      	ldrh	r3, [r7, #6]
 800d8d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d002      	beq.n	800d8ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d8e6:	2302      	movs	r3, #2
 800d8e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d8ea:	e10b      	b.n	800db04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <HAL_SPI_Transmit+0x52>
 800d8f2:	88fb      	ldrh	r3, [r7, #6]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d102      	bne.n	800d8fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d8fc:	e102      	b.n	800db04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2203      	movs	r2, #3
 800d902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	68ba      	ldr	r2, [r7, #8]
 800d910:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	88fa      	ldrh	r2, [r7, #6]
 800d916:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	88fa      	ldrh	r2, [r7, #6]
 800d91c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2200      	movs	r2, #0
 800d922:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2200      	movs	r2, #0
 800d928:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d944:	d10f      	bne.n	800d966 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d954:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d964:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d970:	2b40      	cmp	r3, #64	; 0x40
 800d972:	d007      	beq.n	800d984 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d98c:	d14b      	bne.n	800da26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d002      	beq.n	800d99c <HAL_SPI_Transmit+0xf6>
 800d996:	8afb      	ldrh	r3, [r7, #22]
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d13e      	bne.n	800da1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a0:	881a      	ldrh	r2, [r3, #0]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ac:	1c9a      	adds	r2, r3, #2
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d9c0:	e02b      	b.n	800da1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	f003 0302 	and.w	r3, r3, #2
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d112      	bne.n	800d9f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d4:	881a      	ldrh	r2, [r3, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e0:	1c9a      	adds	r2, r3, #2
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	b29a      	uxth	r2, r3
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	86da      	strh	r2, [r3, #54]	; 0x36
 800d9f4:	e011      	b.n	800da1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9f6:	f7fb f8cb 	bl	8008b90 <HAL_GetTick>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	1ad3      	subs	r3, r2, r3
 800da00:	683a      	ldr	r2, [r7, #0]
 800da02:	429a      	cmp	r2, r3
 800da04:	d803      	bhi.n	800da0e <HAL_SPI_Transmit+0x168>
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da0c:	d102      	bne.n	800da14 <HAL_SPI_Transmit+0x16e>
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d102      	bne.n	800da1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800da14:	2303      	movs	r3, #3
 800da16:	77fb      	strb	r3, [r7, #31]
          goto error;
 800da18:	e074      	b.n	800db04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800da1e:	b29b      	uxth	r3, r3
 800da20:	2b00      	cmp	r3, #0
 800da22:	d1ce      	bne.n	800d9c2 <HAL_SPI_Transmit+0x11c>
 800da24:	e04c      	b.n	800dac0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d002      	beq.n	800da34 <HAL_SPI_Transmit+0x18e>
 800da2e:	8afb      	ldrh	r3, [r7, #22]
 800da30:	2b01      	cmp	r3, #1
 800da32:	d140      	bne.n	800dab6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	330c      	adds	r3, #12
 800da3e:	7812      	ldrb	r2, [r2, #0]
 800da40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da46:	1c5a      	adds	r2, r3, #1
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800da50:	b29b      	uxth	r3, r3
 800da52:	3b01      	subs	r3, #1
 800da54:	b29a      	uxth	r2, r3
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800da5a:	e02c      	b.n	800dab6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	f003 0302 	and.w	r3, r3, #2
 800da66:	2b02      	cmp	r3, #2
 800da68:	d113      	bne.n	800da92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	330c      	adds	r3, #12
 800da74:	7812      	ldrb	r2, [r2, #0]
 800da76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da7c:	1c5a      	adds	r2, r3, #1
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800da86:	b29b      	uxth	r3, r3
 800da88:	3b01      	subs	r3, #1
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	86da      	strh	r2, [r3, #54]	; 0x36
 800da90:	e011      	b.n	800dab6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da92:	f7fb f87d 	bl	8008b90 <HAL_GetTick>
 800da96:	4602      	mov	r2, r0
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	683a      	ldr	r2, [r7, #0]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d803      	bhi.n	800daaa <HAL_SPI_Transmit+0x204>
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa8:	d102      	bne.n	800dab0 <HAL_SPI_Transmit+0x20a>
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d102      	bne.n	800dab6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800dab0:	2303      	movs	r3, #3
 800dab2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dab4:	e026      	b.n	800db04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800daba:	b29b      	uxth	r3, r3
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1cd      	bne.n	800da5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dac0:	69ba      	ldr	r2, [r7, #24]
 800dac2:	6839      	ldr	r1, [r7, #0]
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f000 fbcb 	bl	800e260 <SPI_EndRxTxTransaction>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d002      	beq.n	800dad6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2220      	movs	r2, #32
 800dad4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10a      	bne.n	800daf4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dade:	2300      	movs	r3, #0
 800dae0:	613b      	str	r3, [r7, #16]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	613b      	str	r3, [r7, #16]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	613b      	str	r3, [r7, #16]
 800daf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d002      	beq.n	800db02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	77fb      	strb	r3, [r7, #31]
 800db00:	e000      	b.n	800db04 <HAL_SPI_Transmit+0x25e>
  }

error:
 800db02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2200      	movs	r2, #0
 800db10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800db14:	7ffb      	ldrb	r3, [r7, #31]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3720      	adds	r7, #32
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b088      	sub	sp, #32
 800db22:	af02      	add	r7, sp, #8
 800db24:	60f8      	str	r0, [r7, #12]
 800db26:	60b9      	str	r1, [r7, #8]
 800db28:	603b      	str	r3, [r7, #0]
 800db2a:	4613      	mov	r3, r2
 800db2c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db3a:	d112      	bne.n	800db62 <HAL_SPI_Receive+0x44>
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10e      	bne.n	800db62 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2204      	movs	r2, #4
 800db48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800db4c:	88fa      	ldrh	r2, [r7, #6]
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	4613      	mov	r3, r2
 800db54:	68ba      	ldr	r2, [r7, #8]
 800db56:	68b9      	ldr	r1, [r7, #8]
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f000 f8f1 	bl	800dd40 <HAL_SPI_TransmitReceive>
 800db5e:	4603      	mov	r3, r0
 800db60:	e0ea      	b.n	800dd38 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d101      	bne.n	800db70 <HAL_SPI_Receive+0x52>
 800db6c:	2302      	movs	r3, #2
 800db6e:	e0e3      	b.n	800dd38 <HAL_SPI_Receive+0x21a>
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2201      	movs	r2, #1
 800db74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db78:	f7fb f80a 	bl	8008b90 <HAL_GetTick>
 800db7c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db84:	b2db      	uxtb	r3, r3
 800db86:	2b01      	cmp	r3, #1
 800db88:	d002      	beq.n	800db90 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800db8a:	2302      	movs	r3, #2
 800db8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800db8e:	e0ca      	b.n	800dd26 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d002      	beq.n	800db9c <HAL_SPI_Receive+0x7e>
 800db96:	88fb      	ldrh	r3, [r7, #6]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d102      	bne.n	800dba2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dba0:	e0c1      	b.n	800dd26 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2204      	movs	r2, #4
 800dba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2200      	movs	r2, #0
 800dbae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	88fa      	ldrh	r2, [r7, #6]
 800dbba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	88fa      	ldrh	r2, [r7, #6]
 800dbc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbe8:	d10f      	bne.n	800dc0a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dc08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc14:	2b40      	cmp	r3, #64	; 0x40
 800dc16:	d007      	beq.n	800dc28 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d162      	bne.n	800dcf6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800dc30:	e02e      	b.n	800dc90 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d115      	bne.n	800dc6c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f103 020c 	add.w	r2, r3, #12
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4c:	7812      	ldrb	r2, [r2, #0]
 800dc4e:	b2d2      	uxtb	r2, r2
 800dc50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc56:	1c5a      	adds	r2, r3, #1
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	3b01      	subs	r3, #1
 800dc64:	b29a      	uxth	r2, r3
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dc6a:	e011      	b.n	800dc90 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc6c:	f7fa ff90 	bl	8008b90 <HAL_GetTick>
 800dc70:	4602      	mov	r2, r0
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d803      	bhi.n	800dc84 <HAL_SPI_Receive+0x166>
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc82:	d102      	bne.n	800dc8a <HAL_SPI_Receive+0x16c>
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d102      	bne.n	800dc90 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dc8e:	e04a      	b.n	800dd26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1cb      	bne.n	800dc32 <HAL_SPI_Receive+0x114>
 800dc9a:	e031      	b.n	800dd00 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d113      	bne.n	800dcd2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	68da      	ldr	r2, [r3, #12]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb4:	b292      	uxth	r2, r2
 800dcb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcbc:	1c9a      	adds	r2, r3, #2
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dcd0:	e011      	b.n	800dcf6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcd2:	f7fa ff5d 	bl	8008b90 <HAL_GetTick>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	1ad3      	subs	r3, r2, r3
 800dcdc:	683a      	ldr	r2, [r7, #0]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d803      	bhi.n	800dcea <HAL_SPI_Receive+0x1cc>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce8:	d102      	bne.n	800dcf0 <HAL_SPI_Receive+0x1d2>
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d102      	bne.n	800dcf6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800dcf0:	2303      	movs	r3, #3
 800dcf2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dcf4:	e017      	b.n	800dd26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1cd      	bne.n	800dc9c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f000 fa45 	bl	800e194 <SPI_EndRxTransaction>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d002      	beq.n	800dd16 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2220      	movs	r2, #32
 800dd14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d002      	beq.n	800dd24 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	75fb      	strb	r3, [r7, #23]
 800dd22:	e000      	b.n	800dd26 <HAL_SPI_Receive+0x208>
  }

error :
 800dd24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dd36:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3718      	adds	r7, #24
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b08c      	sub	sp, #48	; 0x30
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
 800dd4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800dd52:	2300      	movs	r3, #0
 800dd54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d101      	bne.n	800dd66 <HAL_SPI_TransmitReceive+0x26>
 800dd62:	2302      	movs	r3, #2
 800dd64:	e18a      	b.n	800e07c <HAL_SPI_TransmitReceive+0x33c>
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2201      	movs	r2, #1
 800dd6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd6e:	f7fa ff0f 	bl	8008b90 <HAL_GetTick>
 800dd72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800dd84:	887b      	ldrh	r3, [r7, #2]
 800dd86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dd88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d00f      	beq.n	800ddb0 <HAL_SPI_TransmitReceive+0x70>
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd96:	d107      	bne.n	800dda8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d103      	bne.n	800dda8 <HAL_SPI_TransmitReceive+0x68>
 800dda0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dda4:	2b04      	cmp	r3, #4
 800dda6:	d003      	beq.n	800ddb0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800dda8:	2302      	movs	r3, #2
 800ddaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ddae:	e15b      	b.n	800e068 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d005      	beq.n	800ddc2 <HAL_SPI_TransmitReceive+0x82>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <HAL_SPI_TransmitReceive+0x82>
 800ddbc:	887b      	ldrh	r3, [r7, #2]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d103      	bne.n	800ddca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ddc8:	e14e      	b.n	800e068 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	2b04      	cmp	r3, #4
 800ddd4:	d003      	beq.n	800ddde <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2205      	movs	r2, #5
 800ddda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	887a      	ldrh	r2, [r7, #2]
 800ddee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	887a      	ldrh	r2, [r7, #2]
 800ddf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	887a      	ldrh	r2, [r7, #2]
 800de00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	887a      	ldrh	r2, [r7, #2]
 800de06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2200      	movs	r2, #0
 800de0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2200      	movs	r2, #0
 800de12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de1e:	2b40      	cmp	r3, #64	; 0x40
 800de20:	d007      	beq.n	800de32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de3a:	d178      	bne.n	800df2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d002      	beq.n	800de4a <HAL_SPI_TransmitReceive+0x10a>
 800de44:	8b7b      	ldrh	r3, [r7, #26]
 800de46:	2b01      	cmp	r3, #1
 800de48:	d166      	bne.n	800df18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de4e:	881a      	ldrh	r2, [r3, #0]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de5a:	1c9a      	adds	r2, r3, #2
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de64:	b29b      	uxth	r3, r3
 800de66:	3b01      	subs	r3, #1
 800de68:	b29a      	uxth	r2, r3
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de6e:	e053      	b.n	800df18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	f003 0302 	and.w	r3, r3, #2
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d11b      	bne.n	800deb6 <HAL_SPI_TransmitReceive+0x176>
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de82:	b29b      	uxth	r3, r3
 800de84:	2b00      	cmp	r3, #0
 800de86:	d016      	beq.n	800deb6 <HAL_SPI_TransmitReceive+0x176>
 800de88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d113      	bne.n	800deb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de92:	881a      	ldrh	r2, [r3, #0]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de9e:	1c9a      	adds	r2, r3, #2
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	3b01      	subs	r3, #1
 800deac:	b29a      	uxth	r2, r3
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800deb2:	2300      	movs	r3, #0
 800deb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	f003 0301 	and.w	r3, r3, #1
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d119      	bne.n	800def8 <HAL_SPI_TransmitReceive+0x1b8>
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dec8:	b29b      	uxth	r3, r3
 800deca:	2b00      	cmp	r3, #0
 800decc:	d014      	beq.n	800def8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	68da      	ldr	r2, [r3, #12]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded8:	b292      	uxth	r2, r2
 800deda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee0:	1c9a      	adds	r2, r3, #2
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800deea:	b29b      	uxth	r3, r3
 800deec:	3b01      	subs	r3, #1
 800deee:	b29a      	uxth	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800def4:	2301      	movs	r3, #1
 800def6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800def8:	f7fa fe4a 	bl	8008b90 <HAL_GetTick>
 800defc:	4602      	mov	r2, r0
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	1ad3      	subs	r3, r2, r3
 800df02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df04:	429a      	cmp	r2, r3
 800df06:	d807      	bhi.n	800df18 <HAL_SPI_TransmitReceive+0x1d8>
 800df08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0e:	d003      	beq.n	800df18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800df10:	2303      	movs	r3, #3
 800df12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800df16:	e0a7      	b.n	800e068 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1a6      	bne.n	800de70 <HAL_SPI_TransmitReceive+0x130>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df26:	b29b      	uxth	r3, r3
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1a1      	bne.n	800de70 <HAL_SPI_TransmitReceive+0x130>
 800df2c:	e07c      	b.n	800e028 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d002      	beq.n	800df3c <HAL_SPI_TransmitReceive+0x1fc>
 800df36:	8b7b      	ldrh	r3, [r7, #26]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d16b      	bne.n	800e014 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	330c      	adds	r3, #12
 800df46:	7812      	ldrb	r2, [r2, #0]
 800df48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df4e:	1c5a      	adds	r2, r3, #1
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df58:	b29b      	uxth	r3, r3
 800df5a:	3b01      	subs	r3, #1
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df62:	e057      	b.n	800e014 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	f003 0302 	and.w	r3, r3, #2
 800df6e:	2b02      	cmp	r3, #2
 800df70:	d11c      	bne.n	800dfac <HAL_SPI_TransmitReceive+0x26c>
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df76:	b29b      	uxth	r3, r3
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d017      	beq.n	800dfac <HAL_SPI_TransmitReceive+0x26c>
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d114      	bne.n	800dfac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	330c      	adds	r3, #12
 800df8c:	7812      	ldrb	r2, [r2, #0]
 800df8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df94:	1c5a      	adds	r2, r3, #1
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	689b      	ldr	r3, [r3, #8]
 800dfb2:	f003 0301 	and.w	r3, r3, #1
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d119      	bne.n	800dfee <HAL_SPI_TransmitReceive+0x2ae>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d014      	beq.n	800dfee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68da      	ldr	r2, [r3, #12]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfce:	b2d2      	uxtb	r2, r2
 800dfd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd6:	1c5a      	adds	r2, r3, #1
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	3b01      	subs	r3, #1
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dfea:	2301      	movs	r3, #1
 800dfec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dfee:	f7fa fdcf 	bl	8008b90 <HAL_GetTick>
 800dff2:	4602      	mov	r2, r0
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	1ad3      	subs	r3, r2, r3
 800dff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d803      	bhi.n	800e006 <HAL_SPI_TransmitReceive+0x2c6>
 800dffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e004:	d102      	bne.n	800e00c <HAL_SPI_TransmitReceive+0x2cc>
 800e006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d103      	bne.n	800e014 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e00c:	2303      	movs	r3, #3
 800e00e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e012:	e029      	b.n	800e068 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e018:	b29b      	uxth	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1a2      	bne.n	800df64 <HAL_SPI_TransmitReceive+0x224>
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e022:	b29b      	uxth	r3, r3
 800e024:	2b00      	cmp	r3, #0
 800e026:	d19d      	bne.n	800df64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e02a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f000 f917 	bl	800e260 <SPI_EndRxTxTransaction>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d006      	beq.n	800e046 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e038:	2301      	movs	r3, #1
 800e03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2220      	movs	r2, #32
 800e042:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e044:	e010      	b.n	800e068 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d10b      	bne.n	800e066 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e04e:	2300      	movs	r3, #0
 800e050:	617b      	str	r3, [r7, #20]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	617b      	str	r3, [r7, #20]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	617b      	str	r3, [r7, #20]
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	e000      	b.n	800e068 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e066:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2201      	movs	r2, #1
 800e06c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2200      	movs	r2, #0
 800e074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e078:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3730      	adds	r7, #48	; 0x30
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	603b      	str	r3, [r7, #0]
 800e090:	4613      	mov	r3, r2
 800e092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e094:	f7fa fd7c 	bl	8008b90 <HAL_GetTick>
 800e098:	4602      	mov	r2, r0
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	1a9b      	subs	r3, r3, r2
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e0a4:	f7fa fd74 	bl	8008b90 <HAL_GetTick>
 800e0a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e0aa:	4b39      	ldr	r3, [pc, #228]	; (800e190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	015b      	lsls	r3, r3, #5
 800e0b0:	0d1b      	lsrs	r3, r3, #20
 800e0b2:	69fa      	ldr	r2, [r7, #28]
 800e0b4:	fb02 f303 	mul.w	r3, r2, r3
 800e0b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e0ba:	e054      	b.n	800e166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c2:	d050      	beq.n	800e166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e0c4:	f7fa fd64 	bl	8008b90 <HAL_GetTick>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	1ad3      	subs	r3, r2, r3
 800e0ce:	69fa      	ldr	r2, [r7, #28]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d902      	bls.n	800e0da <SPI_WaitFlagStateUntilTimeout+0x56>
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d13d      	bne.n	800e156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	685a      	ldr	r2, [r3, #4]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e0e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0f2:	d111      	bne.n	800e118 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0fc:	d004      	beq.n	800e108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e106:	d107      	bne.n	800e118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e11c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e120:	d10f      	bne.n	800e142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e130:	601a      	str	r2, [r3, #0]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2201      	movs	r2, #1
 800e146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e152:	2303      	movs	r3, #3
 800e154:	e017      	b.n	800e186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d101      	bne.n	800e160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e15c:	2300      	movs	r3, #0
 800e15e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	3b01      	subs	r3, #1
 800e164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	689a      	ldr	r2, [r3, #8]
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	4013      	ands	r3, r2
 800e170:	68ba      	ldr	r2, [r7, #8]
 800e172:	429a      	cmp	r2, r3
 800e174:	bf0c      	ite	eq
 800e176:	2301      	moveq	r3, #1
 800e178:	2300      	movne	r3, #0
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	461a      	mov	r2, r3
 800e17e:	79fb      	ldrb	r3, [r7, #7]
 800e180:	429a      	cmp	r2, r3
 800e182:	d19b      	bne.n	800e0bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3720      	adds	r7, #32
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	20000004 	.word	0x20000004

0800e194 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af02      	add	r7, sp, #8
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1a8:	d111      	bne.n	800e1ce <SPI_EndRxTransaction+0x3a>
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1b2:	d004      	beq.n	800e1be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	689b      	ldr	r3, [r3, #8]
 800e1b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1bc:	d107      	bne.n	800e1ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1d6:	d12a      	bne.n	800e22e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1e0:	d012      	beq.n	800e208 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	2180      	movs	r1, #128	; 0x80
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f7ff ff49 	bl	800e084 <SPI_WaitFlagStateUntilTimeout>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d02d      	beq.n	800e254 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1fc:	f043 0220 	orr.w	r2, r3, #32
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e204:	2303      	movs	r3, #3
 800e206:	e026      	b.n	800e256 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	2200      	movs	r2, #0
 800e210:	2101      	movs	r1, #1
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f7ff ff36 	bl	800e084 <SPI_WaitFlagStateUntilTimeout>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d01a      	beq.n	800e254 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e222:	f043 0220 	orr.w	r2, r3, #32
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e22a:	2303      	movs	r3, #3
 800e22c:	e013      	b.n	800e256 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	2200      	movs	r2, #0
 800e236:	2101      	movs	r1, #1
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f7ff ff23 	bl	800e084 <SPI_WaitFlagStateUntilTimeout>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d007      	beq.n	800e254 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e248:	f043 0220 	orr.w	r2, r3, #32
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e250:	2303      	movs	r3, #3
 800e252:	e000      	b.n	800e256 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
	...

0800e260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b088      	sub	sp, #32
 800e264:	af02      	add	r7, sp, #8
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e26c:	4b1b      	ldr	r3, [pc, #108]	; (800e2dc <SPI_EndRxTxTransaction+0x7c>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a1b      	ldr	r2, [pc, #108]	; (800e2e0 <SPI_EndRxTxTransaction+0x80>)
 800e272:	fba2 2303 	umull	r2, r3, r2, r3
 800e276:	0d5b      	lsrs	r3, r3, #21
 800e278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e27c:	fb02 f303 	mul.w	r3, r2, r3
 800e280:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e28a:	d112      	bne.n	800e2b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	2200      	movs	r2, #0
 800e294:	2180      	movs	r1, #128	; 0x80
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f7ff fef4 	bl	800e084 <SPI_WaitFlagStateUntilTimeout>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d016      	beq.n	800e2d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2a6:	f043 0220 	orr.w	r2, r3, #32
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	e00f      	b.n	800e2d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00a      	beq.n	800e2ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2c8:	2b80      	cmp	r3, #128	; 0x80
 800e2ca:	d0f2      	beq.n	800e2b2 <SPI_EndRxTxTransaction+0x52>
 800e2cc:	e000      	b.n	800e2d0 <SPI_EndRxTxTransaction+0x70>
        break;
 800e2ce:	bf00      	nop
  }

  return HAL_OK;
 800e2d0:	2300      	movs	r3, #0
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3718      	adds	r7, #24
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	20000004 	.word	0x20000004
 800e2e0:	165e9f81 	.word	0x165e9f81

0800e2e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d101      	bne.n	800e2f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e041      	b.n	800e37a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d106      	bne.n	800e310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2200      	movs	r2, #0
 800e306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 f839 	bl	800e382 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2202      	movs	r2, #2
 800e314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	3304      	adds	r3, #4
 800e320:	4619      	mov	r1, r3
 800e322:	4610      	mov	r0, r2
 800e324:	f000 faea 	bl	800e8fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2201      	movs	r2, #1
 800e334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2201      	movs	r2, #1
 800e33c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2201      	movs	r2, #1
 800e364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2201      	movs	r2, #1
 800e36c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2201      	movs	r2, #1
 800e374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e382:	b480      	push	{r7}
 800e384:	b083      	sub	sp, #12
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e38a:	bf00      	nop
 800e38c:	370c      	adds	r7, #12
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
	...

0800e398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e398:	b480      	push	{r7}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d001      	beq.n	800e3b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e04e      	b.n	800e44e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	68da      	ldr	r2, [r3, #12]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f042 0201 	orr.w	r2, r2, #1
 800e3c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a23      	ldr	r2, [pc, #140]	; (800e45c <HAL_TIM_Base_Start_IT+0xc4>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d022      	beq.n	800e418 <HAL_TIM_Base_Start_IT+0x80>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3da:	d01d      	beq.n	800e418 <HAL_TIM_Base_Start_IT+0x80>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a1f      	ldr	r2, [pc, #124]	; (800e460 <HAL_TIM_Base_Start_IT+0xc8>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d018      	beq.n	800e418 <HAL_TIM_Base_Start_IT+0x80>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4a1e      	ldr	r2, [pc, #120]	; (800e464 <HAL_TIM_Base_Start_IT+0xcc>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d013      	beq.n	800e418 <HAL_TIM_Base_Start_IT+0x80>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4a1c      	ldr	r2, [pc, #112]	; (800e468 <HAL_TIM_Base_Start_IT+0xd0>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d00e      	beq.n	800e418 <HAL_TIM_Base_Start_IT+0x80>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4a1b      	ldr	r2, [pc, #108]	; (800e46c <HAL_TIM_Base_Start_IT+0xd4>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d009      	beq.n	800e418 <HAL_TIM_Base_Start_IT+0x80>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4a19      	ldr	r2, [pc, #100]	; (800e470 <HAL_TIM_Base_Start_IT+0xd8>)
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d004      	beq.n	800e418 <HAL_TIM_Base_Start_IT+0x80>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	4a18      	ldr	r2, [pc, #96]	; (800e474 <HAL_TIM_Base_Start_IT+0xdc>)
 800e414:	4293      	cmp	r3, r2
 800e416:	d111      	bne.n	800e43c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	f003 0307 	and.w	r3, r3, #7
 800e422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b06      	cmp	r3, #6
 800e428:	d010      	beq.n	800e44c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f042 0201 	orr.w	r2, r2, #1
 800e438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e43a:	e007      	b.n	800e44c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f042 0201 	orr.w	r2, r2, #1
 800e44a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3714      	adds	r7, #20
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	40010000 	.word	0x40010000
 800e460:	40000400 	.word	0x40000400
 800e464:	40000800 	.word	0x40000800
 800e468:	40000c00 	.word	0x40000c00
 800e46c:	40010400 	.word	0x40010400
 800e470:	40014000 	.word	0x40014000
 800e474:	40001800 	.word	0x40001800

0800e478 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e041      	b.n	800e50e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e490:	b2db      	uxtb	r3, r3
 800e492:	2b00      	cmp	r3, #0
 800e494:	d106      	bne.n	800e4a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7f4 fea4 	bl	80031ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2202      	movs	r2, #2
 800e4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	f000 fa20 	bl	800e8fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2201      	movs	r2, #1
 800e500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2201      	movs	r2, #1
 800e508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e50c:	2300      	movs	r3, #0
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3708      	adds	r7, #8
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b082      	sub	sp, #8
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	f003 0302 	and.w	r3, r3, #2
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d122      	bne.n	800e572 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	f003 0302 	and.w	r3, r3, #2
 800e536:	2b02      	cmp	r3, #2
 800e538:	d11b      	bne.n	800e572 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f06f 0202 	mvn.w	r2, #2
 800e542:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2201      	movs	r2, #1
 800e548:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	699b      	ldr	r3, [r3, #24]
 800e550:	f003 0303 	and.w	r3, r3, #3
 800e554:	2b00      	cmp	r3, #0
 800e556:	d003      	beq.n	800e560 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 f9b1 	bl	800e8c0 <HAL_TIM_IC_CaptureCallback>
 800e55e:	e005      	b.n	800e56c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 f9a3 	bl	800e8ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 f9b4 	bl	800e8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2200      	movs	r2, #0
 800e570:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	f003 0304 	and.w	r3, r3, #4
 800e57c:	2b04      	cmp	r3, #4
 800e57e:	d122      	bne.n	800e5c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	f003 0304 	and.w	r3, r3, #4
 800e58a:	2b04      	cmp	r3, #4
 800e58c:	d11b      	bne.n	800e5c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f06f 0204 	mvn.w	r2, #4
 800e596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2202      	movs	r2, #2
 800e59c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d003      	beq.n	800e5b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 f987 	bl	800e8c0 <HAL_TIM_IC_CaptureCallback>
 800e5b2:	e005      	b.n	800e5c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 f979 	bl	800e8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 f98a 	bl	800e8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	f003 0308 	and.w	r3, r3, #8
 800e5d0:	2b08      	cmp	r3, #8
 800e5d2:	d122      	bne.n	800e61a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	f003 0308 	and.w	r3, r3, #8
 800e5de:	2b08      	cmp	r3, #8
 800e5e0:	d11b      	bne.n	800e61a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f06f 0208 	mvn.w	r2, #8
 800e5ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2204      	movs	r2, #4
 800e5f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	69db      	ldr	r3, [r3, #28]
 800e5f8:	f003 0303 	and.w	r3, r3, #3
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d003      	beq.n	800e608 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 f95d 	bl	800e8c0 <HAL_TIM_IC_CaptureCallback>
 800e606:	e005      	b.n	800e614 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f000 f94f 	bl	800e8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 f960 	bl	800e8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	691b      	ldr	r3, [r3, #16]
 800e620:	f003 0310 	and.w	r3, r3, #16
 800e624:	2b10      	cmp	r3, #16
 800e626:	d122      	bne.n	800e66e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	f003 0310 	and.w	r3, r3, #16
 800e632:	2b10      	cmp	r3, #16
 800e634:	d11b      	bne.n	800e66e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f06f 0210 	mvn.w	r2, #16
 800e63e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2208      	movs	r2, #8
 800e644:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	69db      	ldr	r3, [r3, #28]
 800e64c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e650:	2b00      	cmp	r3, #0
 800e652:	d003      	beq.n	800e65c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 f933 	bl	800e8c0 <HAL_TIM_IC_CaptureCallback>
 800e65a:	e005      	b.n	800e668 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 f925 	bl	800e8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f000 f936 	bl	800e8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2200      	movs	r2, #0
 800e66c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	691b      	ldr	r3, [r3, #16]
 800e674:	f003 0301 	and.w	r3, r3, #1
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d10e      	bne.n	800e69a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	f003 0301 	and.w	r3, r3, #1
 800e686:	2b01      	cmp	r3, #1
 800e688:	d107      	bne.n	800e69a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f06f 0201 	mvn.w	r2, #1
 800e692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7f4 fb61 	bl	8002d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	691b      	ldr	r3, [r3, #16]
 800e6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6a4:	2b80      	cmp	r3, #128	; 0x80
 800e6a6:	d10e      	bne.n	800e6c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6b2:	2b80      	cmp	r3, #128	; 0x80
 800e6b4:	d107      	bne.n	800e6c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e6be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 fbf1 	bl	800eea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6d0:	2b40      	cmp	r3, #64	; 0x40
 800e6d2:	d10e      	bne.n	800e6f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6de:	2b40      	cmp	r3, #64	; 0x40
 800e6e0:	d107      	bne.n	800e6f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e6ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 f8fb 	bl	800e8e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	691b      	ldr	r3, [r3, #16]
 800e6f8:	f003 0320 	and.w	r3, r3, #32
 800e6fc:	2b20      	cmp	r3, #32
 800e6fe:	d10e      	bne.n	800e71e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	68db      	ldr	r3, [r3, #12]
 800e706:	f003 0320 	and.w	r3, r3, #32
 800e70a:	2b20      	cmp	r3, #32
 800e70c:	d107      	bne.n	800e71e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f06f 0220 	mvn.w	r2, #32
 800e716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 fbbb 	bl	800ee94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e71e:	bf00      	nop
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
	...

0800e728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b086      	sub	sp, #24
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e734:	2300      	movs	r3, #0
 800e736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d101      	bne.n	800e746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e742:	2302      	movs	r3, #2
 800e744:	e0ae      	b.n	800e8a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2201      	movs	r2, #1
 800e74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2b0c      	cmp	r3, #12
 800e752:	f200 809f 	bhi.w	800e894 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e756:	a201      	add	r2, pc, #4	; (adr r2, 800e75c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e75c:	0800e791 	.word	0x0800e791
 800e760:	0800e895 	.word	0x0800e895
 800e764:	0800e895 	.word	0x0800e895
 800e768:	0800e895 	.word	0x0800e895
 800e76c:	0800e7d1 	.word	0x0800e7d1
 800e770:	0800e895 	.word	0x0800e895
 800e774:	0800e895 	.word	0x0800e895
 800e778:	0800e895 	.word	0x0800e895
 800e77c:	0800e813 	.word	0x0800e813
 800e780:	0800e895 	.word	0x0800e895
 800e784:	0800e895 	.word	0x0800e895
 800e788:	0800e895 	.word	0x0800e895
 800e78c:	0800e853 	.word	0x0800e853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	68b9      	ldr	r1, [r7, #8]
 800e796:	4618      	mov	r0, r3
 800e798:	f000 f950 	bl	800ea3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	699a      	ldr	r2, [r3, #24]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f042 0208 	orr.w	r2, r2, #8
 800e7aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	699a      	ldr	r2, [r3, #24]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f022 0204 	bic.w	r2, r2, #4
 800e7ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6999      	ldr	r1, [r3, #24]
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	691a      	ldr	r2, [r3, #16]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	619a      	str	r2, [r3, #24]
      break;
 800e7ce:	e064      	b.n	800e89a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68b9      	ldr	r1, [r7, #8]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f000 f9a0 	bl	800eb1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	699a      	ldr	r2, [r3, #24]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	699a      	ldr	r2, [r3, #24]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	6999      	ldr	r1, [r3, #24]
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	691b      	ldr	r3, [r3, #16]
 800e806:	021a      	lsls	r2, r3, #8
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	430a      	orrs	r2, r1
 800e80e:	619a      	str	r2, [r3, #24]
      break;
 800e810:	e043      	b.n	800e89a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68b9      	ldr	r1, [r7, #8]
 800e818:	4618      	mov	r0, r3
 800e81a:	f000 f9f5 	bl	800ec08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	69da      	ldr	r2, [r3, #28]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f042 0208 	orr.w	r2, r2, #8
 800e82c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	69da      	ldr	r2, [r3, #28]
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f022 0204 	bic.w	r2, r2, #4
 800e83c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	69d9      	ldr	r1, [r3, #28]
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	691a      	ldr	r2, [r3, #16]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	430a      	orrs	r2, r1
 800e84e:	61da      	str	r2, [r3, #28]
      break;
 800e850:	e023      	b.n	800e89a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68b9      	ldr	r1, [r7, #8]
 800e858:	4618      	mov	r0, r3
 800e85a:	f000 fa49 	bl	800ecf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	69da      	ldr	r2, [r3, #28]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e86c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	69da      	ldr	r2, [r3, #28]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e87c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	69d9      	ldr	r1, [r3, #28]
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	691b      	ldr	r3, [r3, #16]
 800e888:	021a      	lsls	r2, r3, #8
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	430a      	orrs	r2, r1
 800e890:	61da      	str	r2, [r3, #28]
      break;
 800e892:	e002      	b.n	800e89a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e894:	2301      	movs	r3, #1
 800e896:	75fb      	strb	r3, [r7, #23]
      break;
 800e898:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2200      	movs	r2, #0
 800e89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3718      	adds	r7, #24
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e8b4:	bf00      	nop
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e8c8:	bf00      	nop
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b085      	sub	sp, #20
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	4a40      	ldr	r2, [pc, #256]	; (800ea10 <TIM_Base_SetConfig+0x114>)
 800e910:	4293      	cmp	r3, r2
 800e912:	d013      	beq.n	800e93c <TIM_Base_SetConfig+0x40>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e91a:	d00f      	beq.n	800e93c <TIM_Base_SetConfig+0x40>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4a3d      	ldr	r2, [pc, #244]	; (800ea14 <TIM_Base_SetConfig+0x118>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d00b      	beq.n	800e93c <TIM_Base_SetConfig+0x40>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a3c      	ldr	r2, [pc, #240]	; (800ea18 <TIM_Base_SetConfig+0x11c>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d007      	beq.n	800e93c <TIM_Base_SetConfig+0x40>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4a3b      	ldr	r2, [pc, #236]	; (800ea1c <TIM_Base_SetConfig+0x120>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d003      	beq.n	800e93c <TIM_Base_SetConfig+0x40>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4a3a      	ldr	r2, [pc, #232]	; (800ea20 <TIM_Base_SetConfig+0x124>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d108      	bne.n	800e94e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	4313      	orrs	r3, r2
 800e94c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a2f      	ldr	r2, [pc, #188]	; (800ea10 <TIM_Base_SetConfig+0x114>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d02b      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e95c:	d027      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a2c      	ldr	r2, [pc, #176]	; (800ea14 <TIM_Base_SetConfig+0x118>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d023      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a2b      	ldr	r2, [pc, #172]	; (800ea18 <TIM_Base_SetConfig+0x11c>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d01f      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a2a      	ldr	r2, [pc, #168]	; (800ea1c <TIM_Base_SetConfig+0x120>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d01b      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4a29      	ldr	r2, [pc, #164]	; (800ea20 <TIM_Base_SetConfig+0x124>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d017      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4a28      	ldr	r2, [pc, #160]	; (800ea24 <TIM_Base_SetConfig+0x128>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d013      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4a27      	ldr	r2, [pc, #156]	; (800ea28 <TIM_Base_SetConfig+0x12c>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d00f      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4a26      	ldr	r2, [pc, #152]	; (800ea2c <TIM_Base_SetConfig+0x130>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d00b      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4a25      	ldr	r2, [pc, #148]	; (800ea30 <TIM_Base_SetConfig+0x134>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d007      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a24      	ldr	r2, [pc, #144]	; (800ea34 <TIM_Base_SetConfig+0x138>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d003      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4a23      	ldr	r2, [pc, #140]	; (800ea38 <TIM_Base_SetConfig+0x13c>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d108      	bne.n	800e9c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	695b      	ldr	r3, [r3, #20]
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	689a      	ldr	r2, [r3, #8]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	4a0a      	ldr	r2, [pc, #40]	; (800ea10 <TIM_Base_SetConfig+0x114>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d003      	beq.n	800e9f4 <TIM_Base_SetConfig+0xf8>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a0c      	ldr	r2, [pc, #48]	; (800ea20 <TIM_Base_SetConfig+0x124>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d103      	bne.n	800e9fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	691a      	ldr	r2, [r3, #16]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2201      	movs	r2, #1
 800ea00:	615a      	str	r2, [r3, #20]
}
 800ea02:	bf00      	nop
 800ea04:	3714      	adds	r7, #20
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop
 800ea10:	40010000 	.word	0x40010000
 800ea14:	40000400 	.word	0x40000400
 800ea18:	40000800 	.word	0x40000800
 800ea1c:	40000c00 	.word	0x40000c00
 800ea20:	40010400 	.word	0x40010400
 800ea24:	40014000 	.word	0x40014000
 800ea28:	40014400 	.word	0x40014400
 800ea2c:	40014800 	.word	0x40014800
 800ea30:	40001800 	.word	0x40001800
 800ea34:	40001c00 	.word	0x40001c00
 800ea38:	40002000 	.word	0x40002000

0800ea3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b087      	sub	sp, #28
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6a1b      	ldr	r3, [r3, #32]
 800ea4a:	f023 0201 	bic.w	r2, r3, #1
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a1b      	ldr	r3, [r3, #32]
 800ea56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	699b      	ldr	r3, [r3, #24]
 800ea62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f023 0303 	bic.w	r3, r3, #3
 800ea72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	f023 0302 	bic.w	r3, r3, #2
 800ea84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4a20      	ldr	r2, [pc, #128]	; (800eb14 <TIM_OC1_SetConfig+0xd8>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d003      	beq.n	800eaa0 <TIM_OC1_SetConfig+0x64>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	4a1f      	ldr	r2, [pc, #124]	; (800eb18 <TIM_OC1_SetConfig+0xdc>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d10c      	bne.n	800eaba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	f023 0308 	bic.w	r3, r3, #8
 800eaa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	697a      	ldr	r2, [r7, #20]
 800eaae:	4313      	orrs	r3, r2
 800eab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	f023 0304 	bic.w	r3, r3, #4
 800eab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4a15      	ldr	r2, [pc, #84]	; (800eb14 <TIM_OC1_SetConfig+0xd8>)
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d003      	beq.n	800eaca <TIM_OC1_SetConfig+0x8e>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4a14      	ldr	r2, [pc, #80]	; (800eb18 <TIM_OC1_SetConfig+0xdc>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d111      	bne.n	800eaee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ead0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ead8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	695b      	ldr	r3, [r3, #20]
 800eade:	693a      	ldr	r2, [r7, #16]
 800eae0:	4313      	orrs	r3, r2
 800eae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	699b      	ldr	r3, [r3, #24]
 800eae8:	693a      	ldr	r2, [r7, #16]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	693a      	ldr	r2, [r7, #16]
 800eaf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	697a      	ldr	r2, [r7, #20]
 800eb06:	621a      	str	r2, [r3, #32]
}
 800eb08:	bf00      	nop
 800eb0a:	371c      	adds	r7, #28
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr
 800eb14:	40010000 	.word	0x40010000
 800eb18:	40010400 	.word	0x40010400

0800eb1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b087      	sub	sp, #28
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6a1b      	ldr	r3, [r3, #32]
 800eb2a:	f023 0210 	bic.w	r2, r3, #16
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a1b      	ldr	r3, [r3, #32]
 800eb36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	699b      	ldr	r3, [r3, #24]
 800eb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	021b      	lsls	r3, r3, #8
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	f023 0320 	bic.w	r3, r3, #32
 800eb66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	011b      	lsls	r3, r3, #4
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	4313      	orrs	r3, r2
 800eb72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4a22      	ldr	r2, [pc, #136]	; (800ec00 <TIM_OC2_SetConfig+0xe4>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d003      	beq.n	800eb84 <TIM_OC2_SetConfig+0x68>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4a21      	ldr	r2, [pc, #132]	; (800ec04 <TIM_OC2_SetConfig+0xe8>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d10d      	bne.n	800eba0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	011b      	lsls	r3, r3, #4
 800eb92:	697a      	ldr	r2, [r7, #20]
 800eb94:	4313      	orrs	r3, r2
 800eb96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	4a17      	ldr	r2, [pc, #92]	; (800ec00 <TIM_OC2_SetConfig+0xe4>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d003      	beq.n	800ebb0 <TIM_OC2_SetConfig+0x94>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a16      	ldr	r2, [pc, #88]	; (800ec04 <TIM_OC2_SetConfig+0xe8>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d113      	bne.n	800ebd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ebb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	695b      	ldr	r3, [r3, #20]
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	693a      	ldr	r2, [r7, #16]
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	68fa      	ldr	r2, [r7, #12]
 800ebe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	685a      	ldr	r2, [r3, #4]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	697a      	ldr	r2, [r7, #20]
 800ebf0:	621a      	str	r2, [r3, #32]
}
 800ebf2:	bf00      	nop
 800ebf4:	371c      	adds	r7, #28
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr
 800ebfe:	bf00      	nop
 800ec00:	40010000 	.word	0x40010000
 800ec04:	40010400 	.word	0x40010400

0800ec08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b087      	sub	sp, #28
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6a1b      	ldr	r3, [r3, #32]
 800ec16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	69db      	ldr	r3, [r3, #28]
 800ec2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f023 0303 	bic.w	r3, r3, #3
 800ec3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	4313      	orrs	r3, r2
 800ec48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	689b      	ldr	r3, [r3, #8]
 800ec56:	021b      	lsls	r3, r3, #8
 800ec58:	697a      	ldr	r2, [r7, #20]
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4a21      	ldr	r2, [pc, #132]	; (800ece8 <TIM_OC3_SetConfig+0xe0>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d003      	beq.n	800ec6e <TIM_OC3_SetConfig+0x66>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4a20      	ldr	r2, [pc, #128]	; (800ecec <TIM_OC3_SetConfig+0xe4>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d10d      	bne.n	800ec8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	68db      	ldr	r3, [r3, #12]
 800ec7a:	021b      	lsls	r3, r3, #8
 800ec7c:	697a      	ldr	r2, [r7, #20]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4a16      	ldr	r2, [pc, #88]	; (800ece8 <TIM_OC3_SetConfig+0xe0>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d003      	beq.n	800ec9a <TIM_OC3_SetConfig+0x92>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4a15      	ldr	r2, [pc, #84]	; (800ecec <TIM_OC3_SetConfig+0xe4>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d113      	bne.n	800ecc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	695b      	ldr	r3, [r3, #20]
 800ecae:	011b      	lsls	r3, r3, #4
 800ecb0:	693a      	ldr	r2, [r7, #16]
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	699b      	ldr	r3, [r3, #24]
 800ecba:	011b      	lsls	r3, r3, #4
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	693a      	ldr	r2, [r7, #16]
 800ecc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	68fa      	ldr	r2, [r7, #12]
 800eccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	685a      	ldr	r2, [r3, #4]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	621a      	str	r2, [r3, #32]
}
 800ecdc:	bf00      	nop
 800ecde:	371c      	adds	r7, #28
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr
 800ece8:	40010000 	.word	0x40010000
 800ecec:	40010400 	.word	0x40010400

0800ecf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b087      	sub	sp, #28
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a1b      	ldr	r3, [r3, #32]
 800ecfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	69db      	ldr	r3, [r3, #28]
 800ed16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	021b      	lsls	r3, r3, #8
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ed3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	031b      	lsls	r3, r3, #12
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	4313      	orrs	r3, r2
 800ed46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4a12      	ldr	r2, [pc, #72]	; (800ed94 <TIM_OC4_SetConfig+0xa4>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d003      	beq.n	800ed58 <TIM_OC4_SetConfig+0x68>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a11      	ldr	r2, [pc, #68]	; (800ed98 <TIM_OC4_SetConfig+0xa8>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d109      	bne.n	800ed6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	695b      	ldr	r3, [r3, #20]
 800ed64:	019b      	lsls	r3, r3, #6
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	697a      	ldr	r2, [r7, #20]
 800ed70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	621a      	str	r2, [r3, #32]
}
 800ed86:	bf00      	nop
 800ed88:	371c      	adds	r7, #28
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	40010000 	.word	0x40010000
 800ed98:	40010400 	.word	0x40010400

0800ed9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b085      	sub	sp, #20
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edac:	2b01      	cmp	r3, #1
 800edae:	d101      	bne.n	800edb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800edb0:	2302      	movs	r3, #2
 800edb2:	e05a      	b.n	800ee6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2202      	movs	r2, #2
 800edc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	68fa      	ldr	r2, [r7, #12]
 800ede2:	4313      	orrs	r3, r2
 800ede4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4a21      	ldr	r2, [pc, #132]	; (800ee78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d022      	beq.n	800ee3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee00:	d01d      	beq.n	800ee3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4a1d      	ldr	r2, [pc, #116]	; (800ee7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d018      	beq.n	800ee3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a1b      	ldr	r2, [pc, #108]	; (800ee80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d013      	beq.n	800ee3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4a1a      	ldr	r2, [pc, #104]	; (800ee84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d00e      	beq.n	800ee3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a18      	ldr	r2, [pc, #96]	; (800ee88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d009      	beq.n	800ee3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	4a17      	ldr	r2, [pc, #92]	; (800ee8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d004      	beq.n	800ee3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4a15      	ldr	r2, [pc, #84]	; (800ee90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d10c      	bne.n	800ee58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	68ba      	ldr	r2, [r7, #8]
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	68ba      	ldr	r2, [r7, #8]
 800ee56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3714      	adds	r7, #20
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop
 800ee78:	40010000 	.word	0x40010000
 800ee7c:	40000400 	.word	0x40000400
 800ee80:	40000800 	.word	0x40000800
 800ee84:	40000c00 	.word	0x40000c00
 800ee88:	40010400 	.word	0x40010400
 800ee8c:	40014000 	.word	0x40014000
 800ee90:	40001800 	.word	0x40001800

0800ee94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ee9c:	bf00      	nop
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d101      	bne.n	800eece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e03f      	b.n	800ef4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d106      	bne.n	800eee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7f4 f9da 	bl	800329c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2224      	movs	r2, #36	; 0x24
 800eeec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	68da      	ldr	r2, [r3, #12]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eefe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 f9cb 	bl	800f29c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	691a      	ldr	r2, [r3, #16]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ef14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	695a      	ldr	r2, [r3, #20]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ef24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68da      	ldr	r2, [r3, #12]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2220      	movs	r2, #32
 800ef40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2220      	movs	r2, #32
 800ef48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b08a      	sub	sp, #40	; 0x28
 800ef5a:	af02      	add	r7, sp, #8
 800ef5c:	60f8      	str	r0, [r7, #12]
 800ef5e:	60b9      	str	r1, [r7, #8]
 800ef60:	603b      	str	r3, [r7, #0]
 800ef62:	4613      	mov	r3, r2
 800ef64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ef66:	2300      	movs	r3, #0
 800ef68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	2b20      	cmp	r3, #32
 800ef74:	d17c      	bne.n	800f070 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d002      	beq.n	800ef82 <HAL_UART_Transmit+0x2c>
 800ef7c:	88fb      	ldrh	r3, [r7, #6]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d101      	bne.n	800ef86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ef82:	2301      	movs	r3, #1
 800ef84:	e075      	b.n	800f072 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d101      	bne.n	800ef94 <HAL_UART_Transmit+0x3e>
 800ef90:	2302      	movs	r3, #2
 800ef92:	e06e      	b.n	800f072 <HAL_UART_Transmit+0x11c>
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2221      	movs	r2, #33	; 0x21
 800efa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800efaa:	f7f9 fdf1 	bl	8008b90 <HAL_GetTick>
 800efae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	88fa      	ldrh	r2, [r7, #6]
 800efb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	88fa      	ldrh	r2, [r7, #6]
 800efba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	689b      	ldr	r3, [r3, #8]
 800efc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efc4:	d108      	bne.n	800efd8 <HAL_UART_Transmit+0x82>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	691b      	ldr	r3, [r3, #16]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d104      	bne.n	800efd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800efce:	2300      	movs	r3, #0
 800efd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	61bb      	str	r3, [r7, #24]
 800efd6:	e003      	b.n	800efe0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800efdc:	2300      	movs	r3, #0
 800efde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800efe8:	e02a      	b.n	800f040 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	2200      	movs	r2, #0
 800eff2:	2180      	movs	r1, #128	; 0x80
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f000 f8e2 	bl	800f1be <UART_WaitOnFlagUntilTimeout>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800f000:	2303      	movs	r3, #3
 800f002:	e036      	b.n	800f072 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d10b      	bne.n	800f022 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	881b      	ldrh	r3, [r3, #0]
 800f00e:	461a      	mov	r2, r3
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	3302      	adds	r3, #2
 800f01e:	61bb      	str	r3, [r7, #24]
 800f020:	e007      	b.n	800f032 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	781a      	ldrb	r2, [r3, #0]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	3301      	adds	r3, #1
 800f030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f036:	b29b      	uxth	r3, r3
 800f038:	3b01      	subs	r3, #1
 800f03a:	b29a      	uxth	r2, r3
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f044:	b29b      	uxth	r3, r3
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1cf      	bne.n	800efea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	2200      	movs	r2, #0
 800f052:	2140      	movs	r1, #64	; 0x40
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f000 f8b2 	bl	800f1be <UART_WaitOnFlagUntilTimeout>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d001      	beq.n	800f064 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f060:	2303      	movs	r3, #3
 800f062:	e006      	b.n	800f072 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2220      	movs	r2, #32
 800f068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800f06c:	2300      	movs	r3, #0
 800f06e:	e000      	b.n	800f072 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800f070:	2302      	movs	r3, #2
  }
}
 800f072:	4618      	mov	r0, r3
 800f074:	3720      	adds	r7, #32
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b08a      	sub	sp, #40	; 0x28
 800f07e:	af02      	add	r7, sp, #8
 800f080:	60f8      	str	r0, [r7, #12]
 800f082:	60b9      	str	r1, [r7, #8]
 800f084:	603b      	str	r3, [r7, #0]
 800f086:	4613      	mov	r3, r2
 800f088:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f08a:	2300      	movs	r3, #0
 800f08c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f094:	b2db      	uxtb	r3, r3
 800f096:	2b20      	cmp	r3, #32
 800f098:	f040 808c 	bne.w	800f1b4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d002      	beq.n	800f0a8 <HAL_UART_Receive+0x2e>
 800f0a2:	88fb      	ldrh	r3, [r7, #6]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d101      	bne.n	800f0ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e084      	b.n	800f1b6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d101      	bne.n	800f0ba <HAL_UART_Receive+0x40>
 800f0b6:	2302      	movs	r3, #2
 800f0b8:	e07d      	b.n	800f1b6 <HAL_UART_Receive+0x13c>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2222      	movs	r2, #34	; 0x22
 800f0cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f0d6:	f7f9 fd5b 	bl	8008b90 <HAL_GetTick>
 800f0da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	88fa      	ldrh	r2, [r7, #6]
 800f0e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	88fa      	ldrh	r2, [r7, #6]
 800f0e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0f0:	d108      	bne.n	800f104 <HAL_UART_Receive+0x8a>
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	691b      	ldr	r3, [r3, #16]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d104      	bne.n	800f104 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	61bb      	str	r3, [r7, #24]
 800f102:	e003      	b.n	800f10c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f108:	2300      	movs	r3, #0
 800f10a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2200      	movs	r2, #0
 800f110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800f114:	e043      	b.n	800f19e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	2200      	movs	r2, #0
 800f11e:	2120      	movs	r1, #32
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f000 f84c 	bl	800f1be <UART_WaitOnFlagUntilTimeout>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d001      	beq.n	800f130 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800f12c:	2303      	movs	r3, #3
 800f12e:	e042      	b.n	800f1b6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d10c      	bne.n	800f150 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f142:	b29a      	uxth	r2, r3
 800f144:	69bb      	ldr	r3, [r7, #24]
 800f146:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	3302      	adds	r3, #2
 800f14c:	61bb      	str	r3, [r7, #24]
 800f14e:	e01f      	b.n	800f190 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f158:	d007      	beq.n	800f16a <HAL_UART_Receive+0xf0>
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	689b      	ldr	r3, [r3, #8]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d10a      	bne.n	800f178 <HAL_UART_Receive+0xfe>
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	691b      	ldr	r3, [r3, #16]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d106      	bne.n	800f178 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	b2da      	uxtb	r2, r3
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	701a      	strb	r2, [r3, #0]
 800f176:	e008      	b.n	800f18a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f184:	b2da      	uxtb	r2, r3
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	3301      	adds	r3, #1
 800f18e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f194:	b29b      	uxth	r3, r3
 800f196:	3b01      	subs	r3, #1
 800f198:	b29a      	uxth	r2, r3
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d1b6      	bne.n	800f116 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2220      	movs	r2, #32
 800f1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	e000      	b.n	800f1b6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800f1b4:	2302      	movs	r3, #2
  }
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3720      	adds	r7, #32
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b090      	sub	sp, #64	; 0x40
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	60f8      	str	r0, [r7, #12]
 800f1c6:	60b9      	str	r1, [r7, #8]
 800f1c8:	603b      	str	r3, [r7, #0]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1ce:	e050      	b.n	800f272 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d6:	d04c      	beq.n	800f272 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f1d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d007      	beq.n	800f1ee <UART_WaitOnFlagUntilTimeout+0x30>
 800f1de:	f7f9 fcd7 	bl	8008b90 <HAL_GetTick>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d241      	bcs.n	800f272 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	330c      	adds	r3, #12
 800f1f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f8:	e853 3f00 	ldrex	r3, [r3]
 800f1fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f204:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	330c      	adds	r3, #12
 800f20c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f20e:	637a      	str	r2, [r7, #52]	; 0x34
 800f210:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f216:	e841 2300 	strex	r3, r2, [r1]
 800f21a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1e5      	bne.n	800f1ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	3314      	adds	r3, #20
 800f228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	e853 3f00 	ldrex	r3, [r3]
 800f230:	613b      	str	r3, [r7, #16]
   return(result);
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	f023 0301 	bic.w	r3, r3, #1
 800f238:	63bb      	str	r3, [r7, #56]	; 0x38
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	3314      	adds	r3, #20
 800f240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f242:	623a      	str	r2, [r7, #32]
 800f244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f246:	69f9      	ldr	r1, [r7, #28]
 800f248:	6a3a      	ldr	r2, [r7, #32]
 800f24a:	e841 2300 	strex	r3, r2, [r1]
 800f24e:	61bb      	str	r3, [r7, #24]
   return(result);
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1e5      	bne.n	800f222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2220      	movs	r2, #32
 800f25a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2220      	movs	r2, #32
 800f262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2200      	movs	r2, #0
 800f26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800f26e:	2303      	movs	r3, #3
 800f270:	e00f      	b.n	800f292 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	4013      	ands	r3, r2
 800f27c:	68ba      	ldr	r2, [r7, #8]
 800f27e:	429a      	cmp	r2, r3
 800f280:	bf0c      	ite	eq
 800f282:	2301      	moveq	r3, #1
 800f284:	2300      	movne	r3, #0
 800f286:	b2db      	uxtb	r3, r3
 800f288:	461a      	mov	r2, r3
 800f28a:	79fb      	ldrb	r3, [r7, #7]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d09f      	beq.n	800f1d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f290:	2300      	movs	r3, #0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3740      	adds	r7, #64	; 0x40
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
	...

0800f29c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a0:	b09f      	sub	sp, #124	; 0x7c
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2b2:	68d9      	ldr	r1, [r3, #12]
 800f2b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	ea40 0301 	orr.w	r3, r0, r1
 800f2bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f2be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2c0:	689a      	ldr	r2, [r3, #8]
 800f2c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	431a      	orrs	r2, r3
 800f2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2ca:	695b      	ldr	r3, [r3, #20]
 800f2cc:	431a      	orrs	r2, r3
 800f2ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2d0:	69db      	ldr	r3, [r3, #28]
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800f2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f2e0:	f021 010c 	bic.w	r1, r1, #12
 800f2e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f2ea:	430b      	orrs	r3, r1
 800f2ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f2ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	695b      	ldr	r3, [r3, #20]
 800f2f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f2f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2fa:	6999      	ldr	r1, [r3, #24]
 800f2fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	ea40 0301 	orr.w	r3, r0, r1
 800f304:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	4bc5      	ldr	r3, [pc, #788]	; (800f620 <UART_SetConfig+0x384>)
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d004      	beq.n	800f31a <UART_SetConfig+0x7e>
 800f310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	4bc3      	ldr	r3, [pc, #780]	; (800f624 <UART_SetConfig+0x388>)
 800f316:	429a      	cmp	r2, r3
 800f318:	d103      	bne.n	800f322 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f31a:	f7fd fa65 	bl	800c7e8 <HAL_RCC_GetPCLK2Freq>
 800f31e:	6778      	str	r0, [r7, #116]	; 0x74
 800f320:	e002      	b.n	800f328 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f322:	f7fd fa4d 	bl	800c7c0 <HAL_RCC_GetPCLK1Freq>
 800f326:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f32a:	69db      	ldr	r3, [r3, #28]
 800f32c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f330:	f040 80b6 	bne.w	800f4a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f336:	461c      	mov	r4, r3
 800f338:	f04f 0500 	mov.w	r5, #0
 800f33c:	4622      	mov	r2, r4
 800f33e:	462b      	mov	r3, r5
 800f340:	1891      	adds	r1, r2, r2
 800f342:	6439      	str	r1, [r7, #64]	; 0x40
 800f344:	415b      	adcs	r3, r3
 800f346:	647b      	str	r3, [r7, #68]	; 0x44
 800f348:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f34c:	1912      	adds	r2, r2, r4
 800f34e:	eb45 0303 	adc.w	r3, r5, r3
 800f352:	f04f 0000 	mov.w	r0, #0
 800f356:	f04f 0100 	mov.w	r1, #0
 800f35a:	00d9      	lsls	r1, r3, #3
 800f35c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f360:	00d0      	lsls	r0, r2, #3
 800f362:	4602      	mov	r2, r0
 800f364:	460b      	mov	r3, r1
 800f366:	1911      	adds	r1, r2, r4
 800f368:	6639      	str	r1, [r7, #96]	; 0x60
 800f36a:	416b      	adcs	r3, r5
 800f36c:	667b      	str	r3, [r7, #100]	; 0x64
 800f36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	461a      	mov	r2, r3
 800f374:	f04f 0300 	mov.w	r3, #0
 800f378:	1891      	adds	r1, r2, r2
 800f37a:	63b9      	str	r1, [r7, #56]	; 0x38
 800f37c:	415b      	adcs	r3, r3
 800f37e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f384:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800f388:	f7f1 fcee 	bl	8000d68 <__aeabi_uldivmod>
 800f38c:	4602      	mov	r2, r0
 800f38e:	460b      	mov	r3, r1
 800f390:	4ba5      	ldr	r3, [pc, #660]	; (800f628 <UART_SetConfig+0x38c>)
 800f392:	fba3 2302 	umull	r2, r3, r3, r2
 800f396:	095b      	lsrs	r3, r3, #5
 800f398:	011e      	lsls	r6, r3, #4
 800f39a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f39c:	461c      	mov	r4, r3
 800f39e:	f04f 0500 	mov.w	r5, #0
 800f3a2:	4622      	mov	r2, r4
 800f3a4:	462b      	mov	r3, r5
 800f3a6:	1891      	adds	r1, r2, r2
 800f3a8:	6339      	str	r1, [r7, #48]	; 0x30
 800f3aa:	415b      	adcs	r3, r3
 800f3ac:	637b      	str	r3, [r7, #52]	; 0x34
 800f3ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3b2:	1912      	adds	r2, r2, r4
 800f3b4:	eb45 0303 	adc.w	r3, r5, r3
 800f3b8:	f04f 0000 	mov.w	r0, #0
 800f3bc:	f04f 0100 	mov.w	r1, #0
 800f3c0:	00d9      	lsls	r1, r3, #3
 800f3c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f3c6:	00d0      	lsls	r0, r2, #3
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	1911      	adds	r1, r2, r4
 800f3ce:	65b9      	str	r1, [r7, #88]	; 0x58
 800f3d0:	416b      	adcs	r3, r5
 800f3d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	f04f 0300 	mov.w	r3, #0
 800f3de:	1891      	adds	r1, r2, r2
 800f3e0:	62b9      	str	r1, [r7, #40]	; 0x28
 800f3e2:	415b      	adcs	r3, r3
 800f3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f3ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800f3ee:	f7f1 fcbb 	bl	8000d68 <__aeabi_uldivmod>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	4b8c      	ldr	r3, [pc, #560]	; (800f628 <UART_SetConfig+0x38c>)
 800f3f8:	fba3 1302 	umull	r1, r3, r3, r2
 800f3fc:	095b      	lsrs	r3, r3, #5
 800f3fe:	2164      	movs	r1, #100	; 0x64
 800f400:	fb01 f303 	mul.w	r3, r1, r3
 800f404:	1ad3      	subs	r3, r2, r3
 800f406:	00db      	lsls	r3, r3, #3
 800f408:	3332      	adds	r3, #50	; 0x32
 800f40a:	4a87      	ldr	r2, [pc, #540]	; (800f628 <UART_SetConfig+0x38c>)
 800f40c:	fba2 2303 	umull	r2, r3, r2, r3
 800f410:	095b      	lsrs	r3, r3, #5
 800f412:	005b      	lsls	r3, r3, #1
 800f414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f418:	441e      	add	r6, r3
 800f41a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f41c:	4618      	mov	r0, r3
 800f41e:	f04f 0100 	mov.w	r1, #0
 800f422:	4602      	mov	r2, r0
 800f424:	460b      	mov	r3, r1
 800f426:	1894      	adds	r4, r2, r2
 800f428:	623c      	str	r4, [r7, #32]
 800f42a:	415b      	adcs	r3, r3
 800f42c:	627b      	str	r3, [r7, #36]	; 0x24
 800f42e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f432:	1812      	adds	r2, r2, r0
 800f434:	eb41 0303 	adc.w	r3, r1, r3
 800f438:	f04f 0400 	mov.w	r4, #0
 800f43c:	f04f 0500 	mov.w	r5, #0
 800f440:	00dd      	lsls	r5, r3, #3
 800f442:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f446:	00d4      	lsls	r4, r2, #3
 800f448:	4622      	mov	r2, r4
 800f44a:	462b      	mov	r3, r5
 800f44c:	1814      	adds	r4, r2, r0
 800f44e:	653c      	str	r4, [r7, #80]	; 0x50
 800f450:	414b      	adcs	r3, r1
 800f452:	657b      	str	r3, [r7, #84]	; 0x54
 800f454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	461a      	mov	r2, r3
 800f45a:	f04f 0300 	mov.w	r3, #0
 800f45e:	1891      	adds	r1, r2, r2
 800f460:	61b9      	str	r1, [r7, #24]
 800f462:	415b      	adcs	r3, r3
 800f464:	61fb      	str	r3, [r7, #28]
 800f466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f46a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f46e:	f7f1 fc7b 	bl	8000d68 <__aeabi_uldivmod>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	4b6c      	ldr	r3, [pc, #432]	; (800f628 <UART_SetConfig+0x38c>)
 800f478:	fba3 1302 	umull	r1, r3, r3, r2
 800f47c:	095b      	lsrs	r3, r3, #5
 800f47e:	2164      	movs	r1, #100	; 0x64
 800f480:	fb01 f303 	mul.w	r3, r1, r3
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	00db      	lsls	r3, r3, #3
 800f488:	3332      	adds	r3, #50	; 0x32
 800f48a:	4a67      	ldr	r2, [pc, #412]	; (800f628 <UART_SetConfig+0x38c>)
 800f48c:	fba2 2303 	umull	r2, r3, r2, r3
 800f490:	095b      	lsrs	r3, r3, #5
 800f492:	f003 0207 	and.w	r2, r3, #7
 800f496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4432      	add	r2, r6
 800f49c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f49e:	e0b9      	b.n	800f614 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f4a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4a2:	461c      	mov	r4, r3
 800f4a4:	f04f 0500 	mov.w	r5, #0
 800f4a8:	4622      	mov	r2, r4
 800f4aa:	462b      	mov	r3, r5
 800f4ac:	1891      	adds	r1, r2, r2
 800f4ae:	6139      	str	r1, [r7, #16]
 800f4b0:	415b      	adcs	r3, r3
 800f4b2:	617b      	str	r3, [r7, #20]
 800f4b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f4b8:	1912      	adds	r2, r2, r4
 800f4ba:	eb45 0303 	adc.w	r3, r5, r3
 800f4be:	f04f 0000 	mov.w	r0, #0
 800f4c2:	f04f 0100 	mov.w	r1, #0
 800f4c6:	00d9      	lsls	r1, r3, #3
 800f4c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f4cc:	00d0      	lsls	r0, r2, #3
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	eb12 0804 	adds.w	r8, r2, r4
 800f4d6:	eb43 0905 	adc.w	r9, r3, r5
 800f4da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f04f 0100 	mov.w	r1, #0
 800f4e4:	f04f 0200 	mov.w	r2, #0
 800f4e8:	f04f 0300 	mov.w	r3, #0
 800f4ec:	008b      	lsls	r3, r1, #2
 800f4ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f4f2:	0082      	lsls	r2, r0, #2
 800f4f4:	4640      	mov	r0, r8
 800f4f6:	4649      	mov	r1, r9
 800f4f8:	f7f1 fc36 	bl	8000d68 <__aeabi_uldivmod>
 800f4fc:	4602      	mov	r2, r0
 800f4fe:	460b      	mov	r3, r1
 800f500:	4b49      	ldr	r3, [pc, #292]	; (800f628 <UART_SetConfig+0x38c>)
 800f502:	fba3 2302 	umull	r2, r3, r3, r2
 800f506:	095b      	lsrs	r3, r3, #5
 800f508:	011e      	lsls	r6, r3, #4
 800f50a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f50c:	4618      	mov	r0, r3
 800f50e:	f04f 0100 	mov.w	r1, #0
 800f512:	4602      	mov	r2, r0
 800f514:	460b      	mov	r3, r1
 800f516:	1894      	adds	r4, r2, r2
 800f518:	60bc      	str	r4, [r7, #8]
 800f51a:	415b      	adcs	r3, r3
 800f51c:	60fb      	str	r3, [r7, #12]
 800f51e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f522:	1812      	adds	r2, r2, r0
 800f524:	eb41 0303 	adc.w	r3, r1, r3
 800f528:	f04f 0400 	mov.w	r4, #0
 800f52c:	f04f 0500 	mov.w	r5, #0
 800f530:	00dd      	lsls	r5, r3, #3
 800f532:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f536:	00d4      	lsls	r4, r2, #3
 800f538:	4622      	mov	r2, r4
 800f53a:	462b      	mov	r3, r5
 800f53c:	1814      	adds	r4, r2, r0
 800f53e:	64bc      	str	r4, [r7, #72]	; 0x48
 800f540:	414b      	adcs	r3, r1
 800f542:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	4618      	mov	r0, r3
 800f54a:	f04f 0100 	mov.w	r1, #0
 800f54e:	f04f 0200 	mov.w	r2, #0
 800f552:	f04f 0300 	mov.w	r3, #0
 800f556:	008b      	lsls	r3, r1, #2
 800f558:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f55c:	0082      	lsls	r2, r0, #2
 800f55e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800f562:	f7f1 fc01 	bl	8000d68 <__aeabi_uldivmod>
 800f566:	4602      	mov	r2, r0
 800f568:	460b      	mov	r3, r1
 800f56a:	4b2f      	ldr	r3, [pc, #188]	; (800f628 <UART_SetConfig+0x38c>)
 800f56c:	fba3 1302 	umull	r1, r3, r3, r2
 800f570:	095b      	lsrs	r3, r3, #5
 800f572:	2164      	movs	r1, #100	; 0x64
 800f574:	fb01 f303 	mul.w	r3, r1, r3
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	011b      	lsls	r3, r3, #4
 800f57c:	3332      	adds	r3, #50	; 0x32
 800f57e:	4a2a      	ldr	r2, [pc, #168]	; (800f628 <UART_SetConfig+0x38c>)
 800f580:	fba2 2303 	umull	r2, r3, r2, r3
 800f584:	095b      	lsrs	r3, r3, #5
 800f586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f58a:	441e      	add	r6, r3
 800f58c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f58e:	4618      	mov	r0, r3
 800f590:	f04f 0100 	mov.w	r1, #0
 800f594:	4602      	mov	r2, r0
 800f596:	460b      	mov	r3, r1
 800f598:	1894      	adds	r4, r2, r2
 800f59a:	603c      	str	r4, [r7, #0]
 800f59c:	415b      	adcs	r3, r3
 800f59e:	607b      	str	r3, [r7, #4]
 800f5a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5a4:	1812      	adds	r2, r2, r0
 800f5a6:	eb41 0303 	adc.w	r3, r1, r3
 800f5aa:	f04f 0400 	mov.w	r4, #0
 800f5ae:	f04f 0500 	mov.w	r5, #0
 800f5b2:	00dd      	lsls	r5, r3, #3
 800f5b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f5b8:	00d4      	lsls	r4, r2, #3
 800f5ba:	4622      	mov	r2, r4
 800f5bc:	462b      	mov	r3, r5
 800f5be:	eb12 0a00 	adds.w	sl, r2, r0
 800f5c2:	eb43 0b01 	adc.w	fp, r3, r1
 800f5c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f04f 0100 	mov.w	r1, #0
 800f5d0:	f04f 0200 	mov.w	r2, #0
 800f5d4:	f04f 0300 	mov.w	r3, #0
 800f5d8:	008b      	lsls	r3, r1, #2
 800f5da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f5de:	0082      	lsls	r2, r0, #2
 800f5e0:	4650      	mov	r0, sl
 800f5e2:	4659      	mov	r1, fp
 800f5e4:	f7f1 fbc0 	bl	8000d68 <__aeabi_uldivmod>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4b0e      	ldr	r3, [pc, #56]	; (800f628 <UART_SetConfig+0x38c>)
 800f5ee:	fba3 1302 	umull	r1, r3, r3, r2
 800f5f2:	095b      	lsrs	r3, r3, #5
 800f5f4:	2164      	movs	r1, #100	; 0x64
 800f5f6:	fb01 f303 	mul.w	r3, r1, r3
 800f5fa:	1ad3      	subs	r3, r2, r3
 800f5fc:	011b      	lsls	r3, r3, #4
 800f5fe:	3332      	adds	r3, #50	; 0x32
 800f600:	4a09      	ldr	r2, [pc, #36]	; (800f628 <UART_SetConfig+0x38c>)
 800f602:	fba2 2303 	umull	r2, r3, r2, r3
 800f606:	095b      	lsrs	r3, r3, #5
 800f608:	f003 020f 	and.w	r2, r3, #15
 800f60c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4432      	add	r2, r6
 800f612:	609a      	str	r2, [r3, #8]
}
 800f614:	bf00      	nop
 800f616:	377c      	adds	r7, #124	; 0x7c
 800f618:	46bd      	mov	sp, r7
 800f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61e:	bf00      	nop
 800f620:	40011000 	.word	0x40011000
 800f624:	40011400 	.word	0x40011400
 800f628:	51eb851f 	.word	0x51eb851f

0800f62c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f62c:	b084      	sub	sp, #16
 800f62e:	b580      	push	{r7, lr}
 800f630:	b084      	sub	sp, #16
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
 800f636:	f107 001c 	add.w	r0, r7, #28
 800f63a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f640:	2b01      	cmp	r3, #1
 800f642:	d122      	bne.n	800f68a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d105      	bne.n	800f67e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f001 fb1c 	bl	8010cbc <USB_CoreReset>
 800f684:	4603      	mov	r3, r0
 800f686:	73fb      	strb	r3, [r7, #15]
 800f688:	e01a      	b.n	800f6c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f001 fb10 	bl	8010cbc <USB_CoreReset>
 800f69c:	4603      	mov	r3, r0
 800f69e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d106      	bne.n	800f6b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	639a      	str	r2, [r3, #56]	; 0x38
 800f6b2:	e005      	b.n	800f6c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d10b      	bne.n	800f6de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	f043 0206 	orr.w	r2, r3, #6
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	f043 0220 	orr.w	r2, r3, #32
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f6ea:	b004      	add	sp, #16
 800f6ec:	4770      	bx	lr
	...

0800f6f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	4613      	mov	r3, r2
 800f6fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f6fe:	79fb      	ldrb	r3, [r7, #7]
 800f700:	2b02      	cmp	r3, #2
 800f702:	d165      	bne.n	800f7d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	4a41      	ldr	r2, [pc, #260]	; (800f80c <USB_SetTurnaroundTime+0x11c>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d906      	bls.n	800f71a <USB_SetTurnaroundTime+0x2a>
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	4a40      	ldr	r2, [pc, #256]	; (800f810 <USB_SetTurnaroundTime+0x120>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d202      	bcs.n	800f71a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f714:	230f      	movs	r3, #15
 800f716:	617b      	str	r3, [r7, #20]
 800f718:	e062      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	4a3c      	ldr	r2, [pc, #240]	; (800f810 <USB_SetTurnaroundTime+0x120>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d306      	bcc.n	800f730 <USB_SetTurnaroundTime+0x40>
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	4a3b      	ldr	r2, [pc, #236]	; (800f814 <USB_SetTurnaroundTime+0x124>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d202      	bcs.n	800f730 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f72a:	230e      	movs	r3, #14
 800f72c:	617b      	str	r3, [r7, #20]
 800f72e:	e057      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	4a38      	ldr	r2, [pc, #224]	; (800f814 <USB_SetTurnaroundTime+0x124>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d306      	bcc.n	800f746 <USB_SetTurnaroundTime+0x56>
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	4a37      	ldr	r2, [pc, #220]	; (800f818 <USB_SetTurnaroundTime+0x128>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d202      	bcs.n	800f746 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f740:	230d      	movs	r3, #13
 800f742:	617b      	str	r3, [r7, #20]
 800f744:	e04c      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	4a33      	ldr	r2, [pc, #204]	; (800f818 <USB_SetTurnaroundTime+0x128>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d306      	bcc.n	800f75c <USB_SetTurnaroundTime+0x6c>
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	4a32      	ldr	r2, [pc, #200]	; (800f81c <USB_SetTurnaroundTime+0x12c>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d802      	bhi.n	800f75c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f756:	230c      	movs	r3, #12
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	e041      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	4a2f      	ldr	r2, [pc, #188]	; (800f81c <USB_SetTurnaroundTime+0x12c>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d906      	bls.n	800f772 <USB_SetTurnaroundTime+0x82>
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	4a2e      	ldr	r2, [pc, #184]	; (800f820 <USB_SetTurnaroundTime+0x130>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	d802      	bhi.n	800f772 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f76c:	230b      	movs	r3, #11
 800f76e:	617b      	str	r3, [r7, #20]
 800f770:	e036      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	4a2a      	ldr	r2, [pc, #168]	; (800f820 <USB_SetTurnaroundTime+0x130>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d906      	bls.n	800f788 <USB_SetTurnaroundTime+0x98>
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	4a29      	ldr	r2, [pc, #164]	; (800f824 <USB_SetTurnaroundTime+0x134>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d802      	bhi.n	800f788 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f782:	230a      	movs	r3, #10
 800f784:	617b      	str	r3, [r7, #20]
 800f786:	e02b      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	4a26      	ldr	r2, [pc, #152]	; (800f824 <USB_SetTurnaroundTime+0x134>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d906      	bls.n	800f79e <USB_SetTurnaroundTime+0xae>
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	4a25      	ldr	r2, [pc, #148]	; (800f828 <USB_SetTurnaroundTime+0x138>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d202      	bcs.n	800f79e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f798:	2309      	movs	r3, #9
 800f79a:	617b      	str	r3, [r7, #20]
 800f79c:	e020      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	4a21      	ldr	r2, [pc, #132]	; (800f828 <USB_SetTurnaroundTime+0x138>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d306      	bcc.n	800f7b4 <USB_SetTurnaroundTime+0xc4>
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	4a20      	ldr	r2, [pc, #128]	; (800f82c <USB_SetTurnaroundTime+0x13c>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d802      	bhi.n	800f7b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f7ae:	2308      	movs	r3, #8
 800f7b0:	617b      	str	r3, [r7, #20]
 800f7b2:	e015      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	4a1d      	ldr	r2, [pc, #116]	; (800f82c <USB_SetTurnaroundTime+0x13c>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d906      	bls.n	800f7ca <USB_SetTurnaroundTime+0xda>
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	4a1c      	ldr	r2, [pc, #112]	; (800f830 <USB_SetTurnaroundTime+0x140>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d202      	bcs.n	800f7ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f7c4:	2307      	movs	r3, #7
 800f7c6:	617b      	str	r3, [r7, #20]
 800f7c8:	e00a      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f7ca:	2306      	movs	r3, #6
 800f7cc:	617b      	str	r3, [r7, #20]
 800f7ce:	e007      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f7d0:	79fb      	ldrb	r3, [r7, #7]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d102      	bne.n	800f7dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f7d6:	2309      	movs	r3, #9
 800f7d8:	617b      	str	r3, [r7, #20]
 800f7da:	e001      	b.n	800f7e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f7dc:	2309      	movs	r3, #9
 800f7de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	68da      	ldr	r2, [r3, #12]
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	029b      	lsls	r3, r3, #10
 800f7f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f7f8:	431a      	orrs	r2, r3
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f7fe:	2300      	movs	r3, #0
}
 800f800:	4618      	mov	r0, r3
 800f802:	371c      	adds	r7, #28
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	00d8acbf 	.word	0x00d8acbf
 800f810:	00e4e1c0 	.word	0x00e4e1c0
 800f814:	00f42400 	.word	0x00f42400
 800f818:	01067380 	.word	0x01067380
 800f81c:	011a499f 	.word	0x011a499f
 800f820:	01312cff 	.word	0x01312cff
 800f824:	014ca43f 	.word	0x014ca43f
 800f828:	016e3600 	.word	0x016e3600
 800f82c:	01a6ab1f 	.word	0x01a6ab1f
 800f830:	01e84800 	.word	0x01e84800

0800f834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	f043 0201 	orr.w	r2, r3, #1
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f848:	2300      	movs	r3, #0
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	370c      	adds	r7, #12
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr

0800f856 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f856:	b480      	push	{r7}
 800f858:	b083      	sub	sp, #12
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	689b      	ldr	r3, [r3, #8]
 800f862:	f023 0201 	bic.w	r2, r3, #1
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f86a:	2300      	movs	r3, #0
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	370c      	adds	r7, #12
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr

0800f878 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b084      	sub	sp, #16
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	460b      	mov	r3, r1
 800f882:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f884:	2300      	movs	r3, #0
 800f886:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f894:	78fb      	ldrb	r3, [r7, #3]
 800f896:	2b01      	cmp	r3, #1
 800f898:	d115      	bne.n	800f8c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f8a6:	2001      	movs	r0, #1
 800f8a8:	f7f9 f97e 	bl	8008ba8 <HAL_Delay>
      ms++;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f001 f972 	bl	8010b9c <USB_GetMode>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d01e      	beq.n	800f8fc <USB_SetCurrentMode+0x84>
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2b31      	cmp	r3, #49	; 0x31
 800f8c2:	d9f0      	bls.n	800f8a6 <USB_SetCurrentMode+0x2e>
 800f8c4:	e01a      	b.n	800f8fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f8c6:	78fb      	ldrb	r3, [r7, #3]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d115      	bne.n	800f8f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f8d8:	2001      	movs	r0, #1
 800f8da:	f7f9 f965 	bl	8008ba8 <HAL_Delay>
      ms++;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f001 f959 	bl	8010b9c <USB_GetMode>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d005      	beq.n	800f8fc <USB_SetCurrentMode+0x84>
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2b31      	cmp	r3, #49	; 0x31
 800f8f4:	d9f0      	bls.n	800f8d8 <USB_SetCurrentMode+0x60>
 800f8f6:	e001      	b.n	800f8fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e005      	b.n	800f908 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2b32      	cmp	r3, #50	; 0x32
 800f900:	d101      	bne.n	800f906 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f902:	2301      	movs	r3, #1
 800f904:	e000      	b.n	800f908 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f906:	2300      	movs	r3, #0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f910:	b084      	sub	sp, #16
 800f912:	b580      	push	{r7, lr}
 800f914:	b086      	sub	sp, #24
 800f916:	af00      	add	r7, sp, #0
 800f918:	6078      	str	r0, [r7, #4]
 800f91a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f91e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f922:	2300      	movs	r3, #0
 800f924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f92a:	2300      	movs	r3, #0
 800f92c:	613b      	str	r3, [r7, #16]
 800f92e:	e009      	b.n	800f944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	3340      	adds	r3, #64	; 0x40
 800f936:	009b      	lsls	r3, r3, #2
 800f938:	4413      	add	r3, r2
 800f93a:	2200      	movs	r2, #0
 800f93c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	3301      	adds	r3, #1
 800f942:	613b      	str	r3, [r7, #16]
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	2b0e      	cmp	r3, #14
 800f948:	d9f2      	bls.n	800f930 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d11c      	bne.n	800f98a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	68fa      	ldr	r2, [r7, #12]
 800f95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f95e:	f043 0302 	orr.w	r3, r3, #2
 800f962:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f968:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f974:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f980:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	639a      	str	r2, [r3, #56]	; 0x38
 800f988:	e00b      	b.n	800f9a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f98e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f99a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9bc:	461a      	mov	r2, r3
 800f9be:	680b      	ldr	r3, [r1, #0]
 800f9c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d10c      	bne.n	800f9e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d104      	bne.n	800f9d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f000 f945 	bl	800fc60 <USB_SetDevSpeed>
 800f9d6:	e008      	b.n	800f9ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f9d8:	2101      	movs	r1, #1
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 f940 	bl	800fc60 <USB_SetDevSpeed>
 800f9e0:	e003      	b.n	800f9ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f9e2:	2103      	movs	r1, #3
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 f93b 	bl	800fc60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f9ea:	2110      	movs	r1, #16
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 f8f3 	bl	800fbd8 <USB_FlushTxFifo>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d001      	beq.n	800f9fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 f90f 	bl	800fc20 <USB_FlushRxFifo>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d001      	beq.n	800fa0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa12:	461a      	mov	r2, r3
 800fa14:	2300      	movs	r3, #0
 800fa16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa1e:	461a      	mov	r2, r3
 800fa20:	2300      	movs	r3, #0
 800fa22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa30:	2300      	movs	r3, #0
 800fa32:	613b      	str	r3, [r7, #16]
 800fa34:	e043      	b.n	800fabe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	015a      	lsls	r2, r3, #5
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa4c:	d118      	bne.n	800fa80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d10a      	bne.n	800fa6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	015a      	lsls	r2, r3, #5
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa60:	461a      	mov	r2, r3
 800fa62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa66:	6013      	str	r3, [r2, #0]
 800fa68:	e013      	b.n	800fa92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	015a      	lsls	r2, r3, #5
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	4413      	add	r3, r2
 800fa72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa76:	461a      	mov	r2, r3
 800fa78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fa7c:	6013      	str	r3, [r2, #0]
 800fa7e:	e008      	b.n	800fa92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	015a      	lsls	r2, r3, #5
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	4413      	add	r3, r2
 800fa88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	2300      	movs	r3, #0
 800fa90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	015a      	lsls	r2, r3, #5
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	4413      	add	r3, r2
 800fa9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa9e:	461a      	mov	r2, r3
 800faa0:	2300      	movs	r3, #0
 800faa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	015a      	lsls	r2, r3, #5
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	4413      	add	r3, r2
 800faac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fab0:	461a      	mov	r2, r3
 800fab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	3301      	adds	r3, #1
 800fabc:	613b      	str	r3, [r7, #16]
 800fabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac0:	693a      	ldr	r2, [r7, #16]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d3b7      	bcc.n	800fa36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fac6:	2300      	movs	r3, #0
 800fac8:	613b      	str	r3, [r7, #16]
 800faca:	e043      	b.n	800fb54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	015a      	lsls	r2, r3, #5
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	4413      	add	r3, r2
 800fad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fae2:	d118      	bne.n	800fb16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d10a      	bne.n	800fb00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	015a      	lsls	r2, r3, #5
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	4413      	add	r3, r2
 800faf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faf6:	461a      	mov	r2, r3
 800faf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fafc:	6013      	str	r3, [r2, #0]
 800fafe:	e013      	b.n	800fb28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	015a      	lsls	r2, r3, #5
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	4413      	add	r3, r2
 800fb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fb12:	6013      	str	r3, [r2, #0]
 800fb14:	e008      	b.n	800fb28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	015a      	lsls	r2, r3, #5
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb22:	461a      	mov	r2, r3
 800fb24:	2300      	movs	r3, #0
 800fb26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	015a      	lsls	r2, r3, #5
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	4413      	add	r3, r2
 800fb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb34:	461a      	mov	r2, r3
 800fb36:	2300      	movs	r3, #0
 800fb38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	015a      	lsls	r2, r3, #5
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	4413      	add	r3, r2
 800fb42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb46:	461a      	mov	r2, r3
 800fb48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fb4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	3301      	adds	r3, #1
 800fb52:	613b      	str	r3, [r7, #16]
 800fb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb56:	693a      	ldr	r2, [r7, #16]
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d3b7      	bcc.n	800facc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb62:	691b      	ldr	r3, [r3, #16]
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fb7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d105      	bne.n	800fb90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	699b      	ldr	r3, [r3, #24]
 800fb88:	f043 0210 	orr.w	r2, r3, #16
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	699a      	ldr	r2, [r3, #24]
 800fb94:	4b0f      	ldr	r3, [pc, #60]	; (800fbd4 <USB_DevInit+0x2c4>)
 800fb96:	4313      	orrs	r3, r2
 800fb98:	687a      	ldr	r2, [r7, #4]
 800fb9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d005      	beq.n	800fbae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	699b      	ldr	r3, [r3, #24]
 800fba6:	f043 0208 	orr.w	r2, r3, #8
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fbae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d107      	bne.n	800fbc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	699b      	ldr	r3, [r3, #24]
 800fbb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fbbc:	f043 0304 	orr.w	r3, r3, #4
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fbc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3718      	adds	r7, #24
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fbd0:	b004      	add	sp, #16
 800fbd2:	4770      	bx	lr
 800fbd4:	803c3800 	.word	0x803c3800

0800fbd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b085      	sub	sp, #20
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	019b      	lsls	r3, r3, #6
 800fbea:	f043 0220 	orr.w	r2, r3, #32
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	60fb      	str	r3, [r7, #12]
 800fbf8:	4a08      	ldr	r2, [pc, #32]	; (800fc1c <USB_FlushTxFifo+0x44>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d901      	bls.n	800fc02 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800fbfe:	2303      	movs	r3, #3
 800fc00:	e006      	b.n	800fc10 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	691b      	ldr	r3, [r3, #16]
 800fc06:	f003 0320 	and.w	r3, r3, #32
 800fc0a:	2b20      	cmp	r3, #32
 800fc0c:	d0f1      	beq.n	800fbf2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3714      	adds	r7, #20
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr
 800fc1c:	00030d40 	.word	0x00030d40

0800fc20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fc20:	b480      	push	{r7}
 800fc22:	b085      	sub	sp, #20
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2210      	movs	r2, #16
 800fc30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	3301      	adds	r3, #1
 800fc36:	60fb      	str	r3, [r7, #12]
 800fc38:	4a08      	ldr	r2, [pc, #32]	; (800fc5c <USB_FlushRxFifo+0x3c>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d901      	bls.n	800fc42 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800fc3e:	2303      	movs	r3, #3
 800fc40:	e006      	b.n	800fc50 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	691b      	ldr	r3, [r3, #16]
 800fc46:	f003 0310 	and.w	r3, r3, #16
 800fc4a:	2b10      	cmp	r3, #16
 800fc4c:	d0f1      	beq.n	800fc32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fc4e:	2300      	movs	r3, #0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	00030d40 	.word	0x00030d40

0800fc60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b085      	sub	sp, #20
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	460b      	mov	r3, r1
 800fc6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc76:	681a      	ldr	r2, [r3, #0]
 800fc78:	78fb      	ldrb	r3, [r7, #3]
 800fc7a:	68f9      	ldr	r1, [r7, #12]
 800fc7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc80:	4313      	orrs	r3, r2
 800fc82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fc84:	2300      	movs	r3, #0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3714      	adds	r7, #20
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr

0800fc92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fc92:	b480      	push	{r7}
 800fc94:	b087      	sub	sp, #28
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	f003 0306 	and.w	r3, r3, #6
 800fcaa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d102      	bne.n	800fcb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	75fb      	strb	r3, [r7, #23]
 800fcb6:	e00a      	b.n	800fcce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2b02      	cmp	r3, #2
 800fcbc:	d002      	beq.n	800fcc4 <USB_GetDevSpeed+0x32>
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2b06      	cmp	r3, #6
 800fcc2:	d102      	bne.n	800fcca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	75fb      	strb	r3, [r7, #23]
 800fcc8:	e001      	b.n	800fcce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fcca:	230f      	movs	r3, #15
 800fccc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fcce:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	371c      	adds	r7, #28
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b085      	sub	sp, #20
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	785b      	ldrb	r3, [r3, #1]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d13a      	bne.n	800fd6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcfe:	69da      	ldr	r2, [r3, #28]
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	f003 030f 	and.w	r3, r3, #15
 800fd08:	2101      	movs	r1, #1
 800fd0a:	fa01 f303 	lsl.w	r3, r1, r3
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	68f9      	ldr	r1, [r7, #12]
 800fd12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd16:	4313      	orrs	r3, r2
 800fd18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	015a      	lsls	r2, r3, #5
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	4413      	add	r3, r2
 800fd22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d155      	bne.n	800fddc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	015a      	lsls	r2, r3, #5
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	4413      	add	r3, r2
 800fd38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	689b      	ldr	r3, [r3, #8]
 800fd42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	78db      	ldrb	r3, [r3, #3]
 800fd4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	059b      	lsls	r3, r3, #22
 800fd52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd54:	4313      	orrs	r3, r2
 800fd56:	68ba      	ldr	r2, [r7, #8]
 800fd58:	0151      	lsls	r1, r2, #5
 800fd5a:	68fa      	ldr	r2, [r7, #12]
 800fd5c:	440a      	add	r2, r1
 800fd5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd6a:	6013      	str	r3, [r2, #0]
 800fd6c:	e036      	b.n	800fddc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd74:	69da      	ldr	r2, [r3, #28]
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	f003 030f 	and.w	r3, r3, #15
 800fd7e:	2101      	movs	r1, #1
 800fd80:	fa01 f303 	lsl.w	r3, r1, r3
 800fd84:	041b      	lsls	r3, r3, #16
 800fd86:	68f9      	ldr	r1, [r7, #12]
 800fd88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	015a      	lsls	r2, r3, #5
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	4413      	add	r3, r2
 800fd98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d11a      	bne.n	800fddc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	015a      	lsls	r2, r3, #5
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	4413      	add	r3, r2
 800fdae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	689b      	ldr	r3, [r3, #8]
 800fdb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	78db      	ldrb	r3, [r3, #3]
 800fdc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fdc2:	430b      	orrs	r3, r1
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	68ba      	ldr	r2, [r7, #8]
 800fdc8:	0151      	lsls	r1, r2, #5
 800fdca:	68fa      	ldr	r2, [r7, #12]
 800fdcc:	440a      	add	r2, r1
 800fdce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3714      	adds	r7, #20
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
	...

0800fdec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b085      	sub	sp, #20
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	785b      	ldrb	r3, [r3, #1]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d161      	bne.n	800fecc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	015a      	lsls	r2, r3, #5
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	4413      	add	r3, r2
 800fe10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe1e:	d11f      	bne.n	800fe60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	015a      	lsls	r2, r3, #5
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	4413      	add	r3, r2
 800fe28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	68ba      	ldr	r2, [r7, #8]
 800fe30:	0151      	lsls	r1, r2, #5
 800fe32:	68fa      	ldr	r2, [r7, #12]
 800fe34:	440a      	add	r2, r1
 800fe36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	015a      	lsls	r2, r3, #5
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	4413      	add	r3, r2
 800fe48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	0151      	lsls	r1, r2, #5
 800fe52:	68fa      	ldr	r2, [r7, #12]
 800fe54:	440a      	add	r2, r1
 800fe56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	f003 030f 	and.w	r3, r3, #15
 800fe70:	2101      	movs	r1, #1
 800fe72:	fa01 f303 	lsl.w	r3, r1, r3
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	43db      	mvns	r3, r3
 800fe7a:	68f9      	ldr	r1, [r7, #12]
 800fe7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe80:	4013      	ands	r3, r2
 800fe82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe8a:	69da      	ldr	r2, [r3, #28]
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	f003 030f 	and.w	r3, r3, #15
 800fe94:	2101      	movs	r1, #1
 800fe96:	fa01 f303 	lsl.w	r3, r1, r3
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	43db      	mvns	r3, r3
 800fe9e:	68f9      	ldr	r1, [r7, #12]
 800fea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fea4:	4013      	ands	r3, r2
 800fea6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	015a      	lsls	r2, r3, #5
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	4413      	add	r3, r2
 800feb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	0159      	lsls	r1, r3, #5
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	440b      	add	r3, r1
 800febe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fec2:	4619      	mov	r1, r3
 800fec4:	4b35      	ldr	r3, [pc, #212]	; (800ff9c <USB_DeactivateEndpoint+0x1b0>)
 800fec6:	4013      	ands	r3, r2
 800fec8:	600b      	str	r3, [r1, #0]
 800feca:	e060      	b.n	800ff8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	015a      	lsls	r2, r3, #5
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	4413      	add	r3, r2
 800fed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fee2:	d11f      	bne.n	800ff24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	015a      	lsls	r2, r3, #5
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	4413      	add	r3, r2
 800feec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	68ba      	ldr	r2, [r7, #8]
 800fef4:	0151      	lsls	r1, r2, #5
 800fef6:	68fa      	ldr	r2, [r7, #12]
 800fef8:	440a      	add	r2, r1
 800fefa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fefe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ff02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	015a      	lsls	r2, r3, #5
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	68ba      	ldr	r2, [r7, #8]
 800ff14:	0151      	lsls	r1, r2, #5
 800ff16:	68fa      	ldr	r2, [r7, #12]
 800ff18:	440a      	add	r2, r1
 800ff1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	f003 030f 	and.w	r3, r3, #15
 800ff34:	2101      	movs	r1, #1
 800ff36:	fa01 f303 	lsl.w	r3, r1, r3
 800ff3a:	041b      	lsls	r3, r3, #16
 800ff3c:	43db      	mvns	r3, r3
 800ff3e:	68f9      	ldr	r1, [r7, #12]
 800ff40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff44:	4013      	ands	r3, r2
 800ff46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff4e:	69da      	ldr	r2, [r3, #28]
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	f003 030f 	and.w	r3, r3, #15
 800ff58:	2101      	movs	r1, #1
 800ff5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ff5e:	041b      	lsls	r3, r3, #16
 800ff60:	43db      	mvns	r3, r3
 800ff62:	68f9      	ldr	r1, [r7, #12]
 800ff64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff68:	4013      	ands	r3, r2
 800ff6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	015a      	lsls	r2, r3, #5
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	4413      	add	r3, r2
 800ff74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	0159      	lsls	r1, r3, #5
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	440b      	add	r3, r1
 800ff82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff86:	4619      	mov	r1, r3
 800ff88:	4b05      	ldr	r3, [pc, #20]	; (800ffa0 <USB_DeactivateEndpoint+0x1b4>)
 800ff8a:	4013      	ands	r3, r2
 800ff8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ff8e:	2300      	movs	r3, #0
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3714      	adds	r7, #20
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr
 800ff9c:	ec337800 	.word	0xec337800
 800ffa0:	eff37800 	.word	0xeff37800

0800ffa4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b08a      	sub	sp, #40	; 0x28
 800ffa8:	af02      	add	r7, sp, #8
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	4613      	mov	r3, r2
 800ffb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	785b      	ldrb	r3, [r3, #1]
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	f040 815c 	bne.w	801027e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	695b      	ldr	r3, [r3, #20]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d132      	bne.n	8010034 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	015a      	lsls	r2, r3, #5
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	69ba      	ldr	r2, [r7, #24]
 800ffde:	0151      	lsls	r1, r2, #5
 800ffe0:	69fa      	ldr	r2, [r7, #28]
 800ffe2:	440a      	add	r2, r1
 800ffe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffe8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ffec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fff0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	015a      	lsls	r2, r3, #5
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	4413      	add	r3, r2
 800fffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	69ba      	ldr	r2, [r7, #24]
 8010002:	0151      	lsls	r1, r2, #5
 8010004:	69fa      	ldr	r2, [r7, #28]
 8010006:	440a      	add	r2, r1
 8010008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801000c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	015a      	lsls	r2, r3, #5
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	4413      	add	r3, r2
 801001a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001e:	691b      	ldr	r3, [r3, #16]
 8010020:	69ba      	ldr	r2, [r7, #24]
 8010022:	0151      	lsls	r1, r2, #5
 8010024:	69fa      	ldr	r2, [r7, #28]
 8010026:	440a      	add	r2, r1
 8010028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801002c:	0cdb      	lsrs	r3, r3, #19
 801002e:	04db      	lsls	r3, r3, #19
 8010030:	6113      	str	r3, [r2, #16]
 8010032:	e074      	b.n	801011e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	015a      	lsls	r2, r3, #5
 8010038:	69fb      	ldr	r3, [r7, #28]
 801003a:	4413      	add	r3, r2
 801003c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010040:	691b      	ldr	r3, [r3, #16]
 8010042:	69ba      	ldr	r2, [r7, #24]
 8010044:	0151      	lsls	r1, r2, #5
 8010046:	69fa      	ldr	r2, [r7, #28]
 8010048:	440a      	add	r2, r1
 801004a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801004e:	0cdb      	lsrs	r3, r3, #19
 8010050:	04db      	lsls	r3, r3, #19
 8010052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	015a      	lsls	r2, r3, #5
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	4413      	add	r3, r2
 801005c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010060:	691b      	ldr	r3, [r3, #16]
 8010062:	69ba      	ldr	r2, [r7, #24]
 8010064:	0151      	lsls	r1, r2, #5
 8010066:	69fa      	ldr	r2, [r7, #28]
 8010068:	440a      	add	r2, r1
 801006a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801006e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010072:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	015a      	lsls	r2, r3, #5
 801007c:	69fb      	ldr	r3, [r7, #28]
 801007e:	4413      	add	r3, r2
 8010080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010084:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	6959      	ldr	r1, [r3, #20]
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	440b      	add	r3, r1
 8010090:	1e59      	subs	r1, r3, #1
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	689b      	ldr	r3, [r3, #8]
 8010096:	fbb1 f3f3 	udiv	r3, r1, r3
 801009a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801009c:	4b9d      	ldr	r3, [pc, #628]	; (8010314 <USB_EPStartXfer+0x370>)
 801009e:	400b      	ands	r3, r1
 80100a0:	69b9      	ldr	r1, [r7, #24]
 80100a2:	0148      	lsls	r0, r1, #5
 80100a4:	69f9      	ldr	r1, [r7, #28]
 80100a6:	4401      	add	r1, r0
 80100a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80100ac:	4313      	orrs	r3, r2
 80100ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	015a      	lsls	r2, r3, #5
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	4413      	add	r3, r2
 80100b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100bc:	691a      	ldr	r2, [r3, #16]
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	695b      	ldr	r3, [r3, #20]
 80100c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100c6:	69b9      	ldr	r1, [r7, #24]
 80100c8:	0148      	lsls	r0, r1, #5
 80100ca:	69f9      	ldr	r1, [r7, #28]
 80100cc:	4401      	add	r1, r0
 80100ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80100d2:	4313      	orrs	r3, r2
 80100d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	78db      	ldrb	r3, [r3, #3]
 80100da:	2b01      	cmp	r3, #1
 80100dc:	d11f      	bne.n	801011e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	015a      	lsls	r2, r3, #5
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	4413      	add	r3, r2
 80100e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ea:	691b      	ldr	r3, [r3, #16]
 80100ec:	69ba      	ldr	r2, [r7, #24]
 80100ee:	0151      	lsls	r1, r2, #5
 80100f0:	69fa      	ldr	r2, [r7, #28]
 80100f2:	440a      	add	r2, r1
 80100f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80100fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	015a      	lsls	r2, r3, #5
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	4413      	add	r3, r2
 8010106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801010a:	691b      	ldr	r3, [r3, #16]
 801010c:	69ba      	ldr	r2, [r7, #24]
 801010e:	0151      	lsls	r1, r2, #5
 8010110:	69fa      	ldr	r2, [r7, #28]
 8010112:	440a      	add	r2, r1
 8010114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801011c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801011e:	79fb      	ldrb	r3, [r7, #7]
 8010120:	2b01      	cmp	r3, #1
 8010122:	d14b      	bne.n	80101bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d009      	beq.n	8010140 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801012c:	69bb      	ldr	r3, [r7, #24]
 801012e:	015a      	lsls	r2, r3, #5
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	4413      	add	r3, r2
 8010134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010138:	461a      	mov	r2, r3
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	691b      	ldr	r3, [r3, #16]
 801013e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	78db      	ldrb	r3, [r3, #3]
 8010144:	2b01      	cmp	r3, #1
 8010146:	d128      	bne.n	801019a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801014e:	689b      	ldr	r3, [r3, #8]
 8010150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010154:	2b00      	cmp	r3, #0
 8010156:	d110      	bne.n	801017a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010158:	69bb      	ldr	r3, [r7, #24]
 801015a:	015a      	lsls	r2, r3, #5
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	4413      	add	r3, r2
 8010160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	69ba      	ldr	r2, [r7, #24]
 8010168:	0151      	lsls	r1, r2, #5
 801016a:	69fa      	ldr	r2, [r7, #28]
 801016c:	440a      	add	r2, r1
 801016e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010176:	6013      	str	r3, [r2, #0]
 8010178:	e00f      	b.n	801019a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	015a      	lsls	r2, r3, #5
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	4413      	add	r3, r2
 8010182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	69ba      	ldr	r2, [r7, #24]
 801018a:	0151      	lsls	r1, r2, #5
 801018c:	69fa      	ldr	r2, [r7, #28]
 801018e:	440a      	add	r2, r1
 8010190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010198:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801019a:	69bb      	ldr	r3, [r7, #24]
 801019c:	015a      	lsls	r2, r3, #5
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	4413      	add	r3, r2
 80101a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	69ba      	ldr	r2, [r7, #24]
 80101aa:	0151      	lsls	r1, r2, #5
 80101ac:	69fa      	ldr	r2, [r7, #28]
 80101ae:	440a      	add	r2, r1
 80101b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101b8:	6013      	str	r3, [r2, #0]
 80101ba:	e12f      	b.n	801041c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	015a      	lsls	r2, r3, #5
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	4413      	add	r3, r2
 80101c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	69ba      	ldr	r2, [r7, #24]
 80101cc:	0151      	lsls	r1, r2, #5
 80101ce:	69fa      	ldr	r2, [r7, #28]
 80101d0:	440a      	add	r2, r1
 80101d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	78db      	ldrb	r3, [r3, #3]
 80101e0:	2b01      	cmp	r3, #1
 80101e2:	d015      	beq.n	8010210 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	695b      	ldr	r3, [r3, #20]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	f000 8117 	beq.w	801041c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	f003 030f 	and.w	r3, r3, #15
 80101fe:	2101      	movs	r1, #1
 8010200:	fa01 f303 	lsl.w	r3, r1, r3
 8010204:	69f9      	ldr	r1, [r7, #28]
 8010206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801020a:	4313      	orrs	r3, r2
 801020c:	634b      	str	r3, [r1, #52]	; 0x34
 801020e:	e105      	b.n	801041c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010216:	689b      	ldr	r3, [r3, #8]
 8010218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801021c:	2b00      	cmp	r3, #0
 801021e:	d110      	bne.n	8010242 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010220:	69bb      	ldr	r3, [r7, #24]
 8010222:	015a      	lsls	r2, r3, #5
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	4413      	add	r3, r2
 8010228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	69ba      	ldr	r2, [r7, #24]
 8010230:	0151      	lsls	r1, r2, #5
 8010232:	69fa      	ldr	r2, [r7, #28]
 8010234:	440a      	add	r2, r1
 8010236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801023a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801023e:	6013      	str	r3, [r2, #0]
 8010240:	e00f      	b.n	8010262 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	015a      	lsls	r2, r3, #5
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	4413      	add	r3, r2
 801024a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	69ba      	ldr	r2, [r7, #24]
 8010252:	0151      	lsls	r1, r2, #5
 8010254:	69fa      	ldr	r2, [r7, #28]
 8010256:	440a      	add	r2, r1
 8010258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801025c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010260:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	68d9      	ldr	r1, [r3, #12]
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	781a      	ldrb	r2, [r3, #0]
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	695b      	ldr	r3, [r3, #20]
 801026e:	b298      	uxth	r0, r3
 8010270:	79fb      	ldrb	r3, [r7, #7]
 8010272:	9300      	str	r3, [sp, #0]
 8010274:	4603      	mov	r3, r0
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f000 fa2b 	bl	80106d2 <USB_WritePacket>
 801027c:	e0ce      	b.n	801041c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	015a      	lsls	r2, r3, #5
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	4413      	add	r3, r2
 8010286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801028a:	691b      	ldr	r3, [r3, #16]
 801028c:	69ba      	ldr	r2, [r7, #24]
 801028e:	0151      	lsls	r1, r2, #5
 8010290:	69fa      	ldr	r2, [r7, #28]
 8010292:	440a      	add	r2, r1
 8010294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010298:	0cdb      	lsrs	r3, r3, #19
 801029a:	04db      	lsls	r3, r3, #19
 801029c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	015a      	lsls	r2, r3, #5
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	4413      	add	r3, r2
 80102a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	69ba      	ldr	r2, [r7, #24]
 80102ae:	0151      	lsls	r1, r2, #5
 80102b0:	69fa      	ldr	r2, [r7, #28]
 80102b2:	440a      	add	r2, r1
 80102b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	695b      	ldr	r3, [r3, #20]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d126      	bne.n	8010318 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	015a      	lsls	r2, r3, #5
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	4413      	add	r3, r2
 80102d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102d6:	691a      	ldr	r2, [r3, #16]
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102e0:	69b9      	ldr	r1, [r7, #24]
 80102e2:	0148      	lsls	r0, r1, #5
 80102e4:	69f9      	ldr	r1, [r7, #28]
 80102e6:	4401      	add	r1, r0
 80102e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80102ec:	4313      	orrs	r3, r2
 80102ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80102f0:	69bb      	ldr	r3, [r7, #24]
 80102f2:	015a      	lsls	r2, r3, #5
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	4413      	add	r3, r2
 80102f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102fc:	691b      	ldr	r3, [r3, #16]
 80102fe:	69ba      	ldr	r2, [r7, #24]
 8010300:	0151      	lsls	r1, r2, #5
 8010302:	69fa      	ldr	r2, [r7, #28]
 8010304:	440a      	add	r2, r1
 8010306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801030a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801030e:	6113      	str	r3, [r2, #16]
 8010310:	e036      	b.n	8010380 <USB_EPStartXfer+0x3dc>
 8010312:	bf00      	nop
 8010314:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	695a      	ldr	r2, [r3, #20]
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	4413      	add	r3, r2
 8010322:	1e5a      	subs	r2, r3, #1
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	fbb2 f3f3 	udiv	r3, r2, r3
 801032c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	015a      	lsls	r2, r3, #5
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	4413      	add	r3, r2
 8010336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801033a:	691a      	ldr	r2, [r3, #16]
 801033c:	8afb      	ldrh	r3, [r7, #22]
 801033e:	04d9      	lsls	r1, r3, #19
 8010340:	4b39      	ldr	r3, [pc, #228]	; (8010428 <USB_EPStartXfer+0x484>)
 8010342:	400b      	ands	r3, r1
 8010344:	69b9      	ldr	r1, [r7, #24]
 8010346:	0148      	lsls	r0, r1, #5
 8010348:	69f9      	ldr	r1, [r7, #28]
 801034a:	4401      	add	r1, r0
 801034c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010350:	4313      	orrs	r3, r2
 8010352:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	015a      	lsls	r2, r3, #5
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	4413      	add	r3, r2
 801035c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010360:	691a      	ldr	r2, [r3, #16]
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	689b      	ldr	r3, [r3, #8]
 8010366:	8af9      	ldrh	r1, [r7, #22]
 8010368:	fb01 f303 	mul.w	r3, r1, r3
 801036c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010370:	69b9      	ldr	r1, [r7, #24]
 8010372:	0148      	lsls	r0, r1, #5
 8010374:	69f9      	ldr	r1, [r7, #28]
 8010376:	4401      	add	r1, r0
 8010378:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801037c:	4313      	orrs	r3, r2
 801037e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010380:	79fb      	ldrb	r3, [r7, #7]
 8010382:	2b01      	cmp	r3, #1
 8010384:	d10d      	bne.n	80103a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d009      	beq.n	80103a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	68d9      	ldr	r1, [r3, #12]
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	015a      	lsls	r2, r3, #5
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	4413      	add	r3, r2
 801039a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801039e:	460a      	mov	r2, r1
 80103a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	78db      	ldrb	r3, [r3, #3]
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d128      	bne.n	80103fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d110      	bne.n	80103dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80103ba:	69bb      	ldr	r3, [r7, #24]
 80103bc:	015a      	lsls	r2, r3, #5
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	4413      	add	r3, r2
 80103c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	69ba      	ldr	r2, [r7, #24]
 80103ca:	0151      	lsls	r1, r2, #5
 80103cc:	69fa      	ldr	r2, [r7, #28]
 80103ce:	440a      	add	r2, r1
 80103d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103d8:	6013      	str	r3, [r2, #0]
 80103da:	e00f      	b.n	80103fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80103dc:	69bb      	ldr	r3, [r7, #24]
 80103de:	015a      	lsls	r2, r3, #5
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	4413      	add	r3, r2
 80103e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	69ba      	ldr	r2, [r7, #24]
 80103ec:	0151      	lsls	r1, r2, #5
 80103ee:	69fa      	ldr	r2, [r7, #28]
 80103f0:	440a      	add	r2, r1
 80103f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	015a      	lsls	r2, r3, #5
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	4413      	add	r3, r2
 8010404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	69ba      	ldr	r2, [r7, #24]
 801040c:	0151      	lsls	r1, r2, #5
 801040e:	69fa      	ldr	r2, [r7, #28]
 8010410:	440a      	add	r2, r1
 8010412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801041a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801041c:	2300      	movs	r3, #0
}
 801041e:	4618      	mov	r0, r3
 8010420:	3720      	adds	r7, #32
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	1ff80000 	.word	0x1ff80000

0801042c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801042c:	b480      	push	{r7}
 801042e:	b087      	sub	sp, #28
 8010430:	af00      	add	r7, sp, #0
 8010432:	60f8      	str	r0, [r7, #12]
 8010434:	60b9      	str	r1, [r7, #8]
 8010436:	4613      	mov	r3, r2
 8010438:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	785b      	ldrb	r3, [r3, #1]
 8010448:	2b01      	cmp	r3, #1
 801044a:	f040 80cd 	bne.w	80105e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	695b      	ldr	r3, [r3, #20]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d132      	bne.n	80104bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	015a      	lsls	r2, r3, #5
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	4413      	add	r3, r2
 801045e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010462:	691b      	ldr	r3, [r3, #16]
 8010464:	693a      	ldr	r2, [r7, #16]
 8010466:	0151      	lsls	r1, r2, #5
 8010468:	697a      	ldr	r2, [r7, #20]
 801046a:	440a      	add	r2, r1
 801046c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010470:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010474:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010478:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	015a      	lsls	r2, r3, #5
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	4413      	add	r3, r2
 8010482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010486:	691b      	ldr	r3, [r3, #16]
 8010488:	693a      	ldr	r2, [r7, #16]
 801048a:	0151      	lsls	r1, r2, #5
 801048c:	697a      	ldr	r2, [r7, #20]
 801048e:	440a      	add	r2, r1
 8010490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010498:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	015a      	lsls	r2, r3, #5
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	4413      	add	r3, r2
 80104a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104a6:	691b      	ldr	r3, [r3, #16]
 80104a8:	693a      	ldr	r2, [r7, #16]
 80104aa:	0151      	lsls	r1, r2, #5
 80104ac:	697a      	ldr	r2, [r7, #20]
 80104ae:	440a      	add	r2, r1
 80104b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104b4:	0cdb      	lsrs	r3, r3, #19
 80104b6:	04db      	lsls	r3, r3, #19
 80104b8:	6113      	str	r3, [r2, #16]
 80104ba:	e04e      	b.n	801055a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	015a      	lsls	r2, r3, #5
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	4413      	add	r3, r2
 80104c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104c8:	691b      	ldr	r3, [r3, #16]
 80104ca:	693a      	ldr	r2, [r7, #16]
 80104cc:	0151      	lsls	r1, r2, #5
 80104ce:	697a      	ldr	r2, [r7, #20]
 80104d0:	440a      	add	r2, r1
 80104d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104d6:	0cdb      	lsrs	r3, r3, #19
 80104d8:	04db      	lsls	r3, r3, #19
 80104da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	015a      	lsls	r2, r3, #5
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	4413      	add	r3, r2
 80104e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104e8:	691b      	ldr	r3, [r3, #16]
 80104ea:	693a      	ldr	r2, [r7, #16]
 80104ec:	0151      	lsls	r1, r2, #5
 80104ee:	697a      	ldr	r2, [r7, #20]
 80104f0:	440a      	add	r2, r1
 80104f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80104fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80104fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	695a      	ldr	r2, [r3, #20]
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	689b      	ldr	r3, [r3, #8]
 8010508:	429a      	cmp	r2, r3
 801050a:	d903      	bls.n	8010514 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	689a      	ldr	r2, [r3, #8]
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	015a      	lsls	r2, r3, #5
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	4413      	add	r3, r2
 801051c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010520:	691b      	ldr	r3, [r3, #16]
 8010522:	693a      	ldr	r2, [r7, #16]
 8010524:	0151      	lsls	r1, r2, #5
 8010526:	697a      	ldr	r2, [r7, #20]
 8010528:	440a      	add	r2, r1
 801052a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801052e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010532:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	015a      	lsls	r2, r3, #5
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	4413      	add	r3, r2
 801053c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010540:	691a      	ldr	r2, [r3, #16]
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	695b      	ldr	r3, [r3, #20]
 8010546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801054a:	6939      	ldr	r1, [r7, #16]
 801054c:	0148      	lsls	r0, r1, #5
 801054e:	6979      	ldr	r1, [r7, #20]
 8010550:	4401      	add	r1, r0
 8010552:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010556:	4313      	orrs	r3, r2
 8010558:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801055a:	79fb      	ldrb	r3, [r7, #7]
 801055c:	2b01      	cmp	r3, #1
 801055e:	d11e      	bne.n	801059e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	691b      	ldr	r3, [r3, #16]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d009      	beq.n	801057c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	015a      	lsls	r2, r3, #5
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	4413      	add	r3, r2
 8010570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010574:	461a      	mov	r2, r3
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	691b      	ldr	r3, [r3, #16]
 801057a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	015a      	lsls	r2, r3, #5
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	4413      	add	r3, r2
 8010584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	693a      	ldr	r2, [r7, #16]
 801058c:	0151      	lsls	r1, r2, #5
 801058e:	697a      	ldr	r2, [r7, #20]
 8010590:	440a      	add	r2, r1
 8010592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010596:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801059a:	6013      	str	r3, [r2, #0]
 801059c:	e092      	b.n	80106c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	015a      	lsls	r2, r3, #5
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	4413      	add	r3, r2
 80105a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	693a      	ldr	r2, [r7, #16]
 80105ae:	0151      	lsls	r1, r2, #5
 80105b0:	697a      	ldr	r2, [r7, #20]
 80105b2:	440a      	add	r2, r1
 80105b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	695b      	ldr	r3, [r3, #20]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d07e      	beq.n	80106c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	f003 030f 	and.w	r3, r3, #15
 80105d6:	2101      	movs	r1, #1
 80105d8:	fa01 f303 	lsl.w	r3, r1, r3
 80105dc:	6979      	ldr	r1, [r7, #20]
 80105de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105e2:	4313      	orrs	r3, r2
 80105e4:	634b      	str	r3, [r1, #52]	; 0x34
 80105e6:	e06d      	b.n	80106c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	015a      	lsls	r2, r3, #5
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	4413      	add	r3, r2
 80105f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105f4:	691b      	ldr	r3, [r3, #16]
 80105f6:	693a      	ldr	r2, [r7, #16]
 80105f8:	0151      	lsls	r1, r2, #5
 80105fa:	697a      	ldr	r2, [r7, #20]
 80105fc:	440a      	add	r2, r1
 80105fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010602:	0cdb      	lsrs	r3, r3, #19
 8010604:	04db      	lsls	r3, r3, #19
 8010606:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	015a      	lsls	r2, r3, #5
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	4413      	add	r3, r2
 8010610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010614:	691b      	ldr	r3, [r3, #16]
 8010616:	693a      	ldr	r2, [r7, #16]
 8010618:	0151      	lsls	r1, r2, #5
 801061a:	697a      	ldr	r2, [r7, #20]
 801061c:	440a      	add	r2, r1
 801061e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801062a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	695b      	ldr	r3, [r3, #20]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d003      	beq.n	801063c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	689a      	ldr	r2, [r3, #8]
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	015a      	lsls	r2, r3, #5
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	4413      	add	r3, r2
 8010644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010648:	691b      	ldr	r3, [r3, #16]
 801064a:	693a      	ldr	r2, [r7, #16]
 801064c:	0151      	lsls	r1, r2, #5
 801064e:	697a      	ldr	r2, [r7, #20]
 8010650:	440a      	add	r2, r1
 8010652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010656:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801065a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	015a      	lsls	r2, r3, #5
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	4413      	add	r3, r2
 8010664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010668:	691a      	ldr	r2, [r3, #16]
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	689b      	ldr	r3, [r3, #8]
 801066e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010672:	6939      	ldr	r1, [r7, #16]
 8010674:	0148      	lsls	r0, r1, #5
 8010676:	6979      	ldr	r1, [r7, #20]
 8010678:	4401      	add	r1, r0
 801067a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801067e:	4313      	orrs	r3, r2
 8010680:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010682:	79fb      	ldrb	r3, [r7, #7]
 8010684:	2b01      	cmp	r3, #1
 8010686:	d10d      	bne.n	80106a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d009      	beq.n	80106a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	68d9      	ldr	r1, [r3, #12]
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	015a      	lsls	r2, r3, #5
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	4413      	add	r3, r2
 801069c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a0:	460a      	mov	r2, r1
 80106a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	015a      	lsls	r2, r3, #5
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	4413      	add	r3, r2
 80106ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	693a      	ldr	r2, [r7, #16]
 80106b4:	0151      	lsls	r1, r2, #5
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	440a      	add	r2, r1
 80106ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80106c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80106c4:	2300      	movs	r3, #0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	371c      	adds	r7, #28
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr

080106d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80106d2:	b480      	push	{r7}
 80106d4:	b089      	sub	sp, #36	; 0x24
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	60f8      	str	r0, [r7, #12]
 80106da:	60b9      	str	r1, [r7, #8]
 80106dc:	4611      	mov	r1, r2
 80106de:	461a      	mov	r2, r3
 80106e0:	460b      	mov	r3, r1
 80106e2:	71fb      	strb	r3, [r7, #7]
 80106e4:	4613      	mov	r3, r2
 80106e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80106f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d123      	bne.n	8010740 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80106f8:	88bb      	ldrh	r3, [r7, #4]
 80106fa:	3303      	adds	r3, #3
 80106fc:	089b      	lsrs	r3, r3, #2
 80106fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010700:	2300      	movs	r3, #0
 8010702:	61bb      	str	r3, [r7, #24]
 8010704:	e018      	b.n	8010738 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010706:	79fb      	ldrb	r3, [r7, #7]
 8010708:	031a      	lsls	r2, r3, #12
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	4413      	add	r3, r2
 801070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010712:	461a      	mov	r2, r3
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	6013      	str	r3, [r2, #0]
      pSrc++;
 801071a:	69fb      	ldr	r3, [r7, #28]
 801071c:	3301      	adds	r3, #1
 801071e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010720:	69fb      	ldr	r3, [r7, #28]
 8010722:	3301      	adds	r3, #1
 8010724:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	3301      	adds	r3, #1
 801072a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	3301      	adds	r3, #1
 8010730:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	3301      	adds	r3, #1
 8010736:	61bb      	str	r3, [r7, #24]
 8010738:	69ba      	ldr	r2, [r7, #24]
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	429a      	cmp	r2, r3
 801073e:	d3e2      	bcc.n	8010706 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3724      	adds	r7, #36	; 0x24
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr

0801074e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801074e:	b480      	push	{r7}
 8010750:	b08b      	sub	sp, #44	; 0x2c
 8010752:	af00      	add	r7, sp, #0
 8010754:	60f8      	str	r0, [r7, #12]
 8010756:	60b9      	str	r1, [r7, #8]
 8010758:	4613      	mov	r3, r2
 801075a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010764:	88fb      	ldrh	r3, [r7, #6]
 8010766:	089b      	lsrs	r3, r3, #2
 8010768:	b29b      	uxth	r3, r3
 801076a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801076c:	88fb      	ldrh	r3, [r7, #6]
 801076e:	f003 0303 	and.w	r3, r3, #3
 8010772:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010774:	2300      	movs	r3, #0
 8010776:	623b      	str	r3, [r7, #32]
 8010778:	e014      	b.n	80107a4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801077a:	69bb      	ldr	r3, [r7, #24]
 801077c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010784:	601a      	str	r2, [r3, #0]
    pDest++;
 8010786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010788:	3301      	adds	r3, #1
 801078a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078e:	3301      	adds	r3, #1
 8010790:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010794:	3301      	adds	r3, #1
 8010796:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079a:	3301      	adds	r3, #1
 801079c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801079e:	6a3b      	ldr	r3, [r7, #32]
 80107a0:	3301      	adds	r3, #1
 80107a2:	623b      	str	r3, [r7, #32]
 80107a4:	6a3a      	ldr	r2, [r7, #32]
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d3e6      	bcc.n	801077a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80107ac:	8bfb      	ldrh	r3, [r7, #30]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d01e      	beq.n	80107f0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80107b2:	2300      	movs	r3, #0
 80107b4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107bc:	461a      	mov	r2, r3
 80107be:	f107 0310 	add.w	r3, r7, #16
 80107c2:	6812      	ldr	r2, [r2, #0]
 80107c4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80107c6:	693a      	ldr	r2, [r7, #16]
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	00db      	lsls	r3, r3, #3
 80107ce:	fa22 f303 	lsr.w	r3, r2, r3
 80107d2:	b2da      	uxtb	r2, r3
 80107d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d6:	701a      	strb	r2, [r3, #0]
      i++;
 80107d8:	6a3b      	ldr	r3, [r7, #32]
 80107da:	3301      	adds	r3, #1
 80107dc:	623b      	str	r3, [r7, #32]
      pDest++;
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	3301      	adds	r3, #1
 80107e2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80107e4:	8bfb      	ldrh	r3, [r7, #30]
 80107e6:	3b01      	subs	r3, #1
 80107e8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80107ea:	8bfb      	ldrh	r3, [r7, #30]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d1ea      	bne.n	80107c6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	372c      	adds	r7, #44	; 0x2c
 80107f6:	46bd      	mov	sp, r7
 80107f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fc:	4770      	bx	lr

080107fe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80107fe:	b480      	push	{r7}
 8010800:	b085      	sub	sp, #20
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
 8010806:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	785b      	ldrb	r3, [r3, #1]
 8010816:	2b01      	cmp	r3, #1
 8010818:	d12c      	bne.n	8010874 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	015a      	lsls	r2, r3, #5
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	4413      	add	r3, r2
 8010822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	db12      	blt.n	8010852 <USB_EPSetStall+0x54>
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d00f      	beq.n	8010852 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	015a      	lsls	r2, r3, #5
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	4413      	add	r3, r2
 801083a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	0151      	lsls	r1, r2, #5
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	440a      	add	r2, r1
 8010848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801084c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010850:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	015a      	lsls	r2, r3, #5
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	4413      	add	r3, r2
 801085a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	68ba      	ldr	r2, [r7, #8]
 8010862:	0151      	lsls	r1, r2, #5
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	440a      	add	r2, r1
 8010868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801086c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010870:	6013      	str	r3, [r2, #0]
 8010872:	e02b      	b.n	80108cc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	015a      	lsls	r2, r3, #5
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	4413      	add	r3, r2
 801087c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	db12      	blt.n	80108ac <USB_EPSetStall+0xae>
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d00f      	beq.n	80108ac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	015a      	lsls	r2, r3, #5
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	4413      	add	r3, r2
 8010894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	68ba      	ldr	r2, [r7, #8]
 801089c:	0151      	lsls	r1, r2, #5
 801089e:	68fa      	ldr	r2, [r7, #12]
 80108a0:	440a      	add	r2, r1
 80108a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80108aa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	015a      	lsls	r2, r3, #5
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	4413      	add	r3, r2
 80108b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	0151      	lsls	r1, r2, #5
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	440a      	add	r2, r1
 80108c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80108ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80108cc:	2300      	movs	r3, #0
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3714      	adds	r7, #20
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr

080108da <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80108da:	b480      	push	{r7}
 80108dc:	b085      	sub	sp, #20
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
 80108e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	785b      	ldrb	r3, [r3, #1]
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d128      	bne.n	8010948 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	015a      	lsls	r2, r3, #5
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	4413      	add	r3, r2
 80108fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	0151      	lsls	r1, r2, #5
 8010908:	68fa      	ldr	r2, [r7, #12]
 801090a:	440a      	add	r2, r1
 801090c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010910:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010914:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	78db      	ldrb	r3, [r3, #3]
 801091a:	2b03      	cmp	r3, #3
 801091c:	d003      	beq.n	8010926 <USB_EPClearStall+0x4c>
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	78db      	ldrb	r3, [r3, #3]
 8010922:	2b02      	cmp	r3, #2
 8010924:	d138      	bne.n	8010998 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	015a      	lsls	r2, r3, #5
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	4413      	add	r3, r2
 801092e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	68ba      	ldr	r2, [r7, #8]
 8010936:	0151      	lsls	r1, r2, #5
 8010938:	68fa      	ldr	r2, [r7, #12]
 801093a:	440a      	add	r2, r1
 801093c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010944:	6013      	str	r3, [r2, #0]
 8010946:	e027      	b.n	8010998 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	015a      	lsls	r2, r3, #5
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	4413      	add	r3, r2
 8010950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	68ba      	ldr	r2, [r7, #8]
 8010958:	0151      	lsls	r1, r2, #5
 801095a:	68fa      	ldr	r2, [r7, #12]
 801095c:	440a      	add	r2, r1
 801095e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010966:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	78db      	ldrb	r3, [r3, #3]
 801096c:	2b03      	cmp	r3, #3
 801096e:	d003      	beq.n	8010978 <USB_EPClearStall+0x9e>
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	78db      	ldrb	r3, [r3, #3]
 8010974:	2b02      	cmp	r3, #2
 8010976:	d10f      	bne.n	8010998 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	015a      	lsls	r2, r3, #5
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	4413      	add	r3, r2
 8010980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	68ba      	ldr	r2, [r7, #8]
 8010988:	0151      	lsls	r1, r2, #5
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	440a      	add	r2, r1
 801098e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010996:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3714      	adds	r7, #20
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr

080109a6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80109a6:	b480      	push	{r7}
 80109a8:	b085      	sub	sp, #20
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
 80109ae:	460b      	mov	r3, r1
 80109b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	68fa      	ldr	r2, [r7, #12]
 80109c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80109c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80109c8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	78fb      	ldrb	r3, [r7, #3]
 80109d4:	011b      	lsls	r3, r3, #4
 80109d6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80109da:	68f9      	ldr	r1, [r7, #12]
 80109dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80109e0:	4313      	orrs	r3, r2
 80109e2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3714      	adds	r7, #20
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr

080109f2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80109f2:	b480      	push	{r7}
 80109f4:	b085      	sub	sp, #20
 80109f6:	af00      	add	r7, sp, #0
 80109f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	68fa      	ldr	r2, [r7, #12]
 8010a08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010a0c:	f023 0303 	bic.w	r3, r3, #3
 8010a10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	68fa      	ldr	r2, [r7, #12]
 8010a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a20:	f023 0302 	bic.w	r3, r3, #2
 8010a24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a26:	2300      	movs	r3, #0
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3714      	adds	r7, #20
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr

08010a34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b085      	sub	sp, #20
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	68fa      	ldr	r2, [r7, #12]
 8010a4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010a4e:	f023 0303 	bic.w	r3, r3, #3
 8010a52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a62:	f043 0302 	orr.w	r3, r3, #2
 8010a66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a68:	2300      	movs	r3, #0
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3714      	adds	r7, #20
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr

08010a76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010a76:	b480      	push	{r7}
 8010a78:	b085      	sub	sp, #20
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	699b      	ldr	r3, [r3, #24]
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	4013      	ands	r3, r2
 8010a8c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3714      	adds	r7, #20
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010aae:	699b      	ldr	r3, [r3, #24]
 8010ab0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ab8:	69db      	ldr	r3, [r3, #28]
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	4013      	ands	r3, r2
 8010abe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	0c1b      	lsrs	r3, r3, #16
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3714      	adds	r7, #20
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr

08010ad0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ae2:	699b      	ldr	r3, [r3, #24]
 8010ae4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010aec:	69db      	ldr	r3, [r3, #28]
 8010aee:	68ba      	ldr	r2, [r7, #8]
 8010af0:	4013      	ands	r3, r2
 8010af2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	b29b      	uxth	r3, r3
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3714      	adds	r7, #20
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010b14:	78fb      	ldrb	r3, [r7, #3]
 8010b16:	015a      	lsls	r2, r3, #5
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b2a:	695b      	ldr	r3, [r3, #20]
 8010b2c:	68ba      	ldr	r2, [r7, #8]
 8010b2e:	4013      	ands	r3, r2
 8010b30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010b32:	68bb      	ldr	r3, [r7, #8]
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3714      	adds	r7, #20
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr

08010b40 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010b40:	b480      	push	{r7}
 8010b42:	b087      	sub	sp, #28
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	460b      	mov	r3, r1
 8010b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b56:	691b      	ldr	r3, [r3, #16]
 8010b58:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b62:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010b64:	78fb      	ldrb	r3, [r7, #3]
 8010b66:	f003 030f 	and.w	r3, r3, #15
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8010b70:	01db      	lsls	r3, r3, #7
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	693a      	ldr	r2, [r7, #16]
 8010b76:	4313      	orrs	r3, r2
 8010b78:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010b7a:	78fb      	ldrb	r3, [r7, #3]
 8010b7c:	015a      	lsls	r2, r3, #5
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	4413      	add	r3, r2
 8010b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	693a      	ldr	r2, [r7, #16]
 8010b8a:	4013      	ands	r3, r2
 8010b8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010b8e:	68bb      	ldr	r3, [r7, #8]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	371c      	adds	r7, #28
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr

08010b9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	695b      	ldr	r3, [r3, #20]
 8010ba8:	f003 0301 	and.w	r3, r3, #1
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	370c      	adds	r7, #12
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr

08010bb8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	68fa      	ldr	r2, [r7, #12]
 8010bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010bd6:	f023 0307 	bic.w	r3, r3, #7
 8010bda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	68fa      	ldr	r2, [r7, #12]
 8010be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010bee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010bf0:	2300      	movs	r3, #0
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3714      	adds	r7, #20
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr
	...

08010c00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b087      	sub	sp, #28
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	460b      	mov	r3, r1
 8010c0a:	607a      	str	r2, [r7, #4]
 8010c0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	333c      	adds	r3, #60	; 0x3c
 8010c16:	3304      	adds	r3, #4
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	4a26      	ldr	r2, [pc, #152]	; (8010cb8 <USB_EP0_OutStart+0xb8>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d90a      	bls.n	8010c3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010c34:	d101      	bne.n	8010c3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010c36:	2300      	movs	r3, #0
 8010c38:	e037      	b.n	8010caa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c40:	461a      	mov	r2, r3
 8010c42:	2300      	movs	r3, #0
 8010c44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c4c:	691b      	ldr	r3, [r3, #16]
 8010c4e:	697a      	ldr	r2, [r7, #20]
 8010c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c60:	691b      	ldr	r3, [r3, #16]
 8010c62:	697a      	ldr	r2, [r7, #20]
 8010c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c68:	f043 0318 	orr.w	r3, r3, #24
 8010c6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c74:	691b      	ldr	r3, [r3, #16]
 8010c76:	697a      	ldr	r2, [r7, #20]
 8010c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010c80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010c82:	7afb      	ldrb	r3, [r7, #11]
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	d10f      	bne.n	8010ca8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c8e:	461a      	mov	r2, r3
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	697a      	ldr	r2, [r7, #20]
 8010c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ca2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010ca6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ca8:	2300      	movs	r3, #0
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	371c      	adds	r7, #28
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	4f54300a 	.word	0x4f54300a

08010cbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	3301      	adds	r3, #1
 8010ccc:	60fb      	str	r3, [r7, #12]
 8010cce:	4a13      	ldr	r2, [pc, #76]	; (8010d1c <USB_CoreReset+0x60>)
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	d901      	bls.n	8010cd8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8010cd4:	2303      	movs	r3, #3
 8010cd6:	e01a      	b.n	8010d0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	691b      	ldr	r3, [r3, #16]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	daf3      	bge.n	8010cc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	691b      	ldr	r3, [r3, #16]
 8010ce8:	f043 0201 	orr.w	r2, r3, #1
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	3301      	adds	r3, #1
 8010cf4:	60fb      	str	r3, [r7, #12]
 8010cf6:	4a09      	ldr	r2, [pc, #36]	; (8010d1c <USB_CoreReset+0x60>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d901      	bls.n	8010d00 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8010cfc:	2303      	movs	r3, #3
 8010cfe:	e006      	b.n	8010d0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	f003 0301 	and.w	r3, r3, #1
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d0f1      	beq.n	8010cf0 <USB_CoreReset+0x34>

  return HAL_OK;
 8010d0c:	2300      	movs	r3, #0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3714      	adds	r7, #20
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr
 8010d1a:	bf00      	nop
 8010d1c:	00030d40 	.word	0x00030d40

08010d20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010d24:	4904      	ldr	r1, [pc, #16]	; (8010d38 <MX_FATFS_Init+0x18>)
 8010d26:	4805      	ldr	r0, [pc, #20]	; (8010d3c <MX_FATFS_Init+0x1c>)
 8010d28:	f004 fffe 	bl	8015d28 <FATFS_LinkDriver>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	461a      	mov	r2, r3
 8010d30:	4b03      	ldr	r3, [pc, #12]	; (8010d40 <MX_FATFS_Init+0x20>)
 8010d32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010d34:	bf00      	nop
 8010d36:	bd80      	pop	{r7, pc}
 8010d38:	20007340 	.word	0x20007340
 8010d3c:	20000068 	.word	0x20000068
 8010d40:	20007344 	.word	0x20007344

08010d44 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010d44:	b480      	push	{r7}
 8010d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010d48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr

08010d54 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8010d5e:	79fb      	ldrb	r3, [r7, #7]
 8010d60:	4618      	mov	r0, r3
 8010d62:	f000 f9dd 	bl	8011120 <USER_SPI_initialize>
 8010d66:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3708      	adds	r7, #8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	4603      	mov	r3, r0
 8010d78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8010d7a:	79fb      	ldrb	r3, [r7, #7]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f000 fab9 	bl	80112f4 <USER_SPI_status>
 8010d82:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3708      	adds	r7, #8
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60b9      	str	r1, [r7, #8]
 8010d94:	607a      	str	r2, [r7, #4]
 8010d96:	603b      	str	r3, [r7, #0]
 8010d98:	4603      	mov	r3, r0
 8010d9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8010d9c:	7bf8      	ldrb	r0, [r7, #15]
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	68b9      	ldr	r1, [r7, #8]
 8010da4:	f000 fabc 	bl	8011320 <USER_SPI_read>
 8010da8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3710      	adds	r7, #16
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010db2:	b580      	push	{r7, lr}
 8010db4:	b084      	sub	sp, #16
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	60b9      	str	r1, [r7, #8]
 8010dba:	607a      	str	r2, [r7, #4]
 8010dbc:	603b      	str	r3, [r7, #0]
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8010dc2:	7bf8      	ldrb	r0, [r7, #15]
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	68b9      	ldr	r1, [r7, #8]
 8010dca:	f000 fb0f 	bl	80113ec <USER_SPI_write>
 8010dce:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3710      	adds	r7, #16
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	4603      	mov	r3, r0
 8010de0:	603a      	str	r2, [r7, #0]
 8010de2:	71fb      	strb	r3, [r7, #7]
 8010de4:	460b      	mov	r3, r1
 8010de6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8010de8:	79b9      	ldrb	r1, [r7, #6]
 8010dea:	79fb      	ldrb	r3, [r7, #7]
 8010dec:	683a      	ldr	r2, [r7, #0]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f000 fb78 	bl	80114e4 <USER_SPI_ioctl>
 8010df4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3708      	adds	r7, #8
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
	...

08010e00 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8010e08:	f7f7 fec2 	bl	8008b90 <HAL_GetTick>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	4a04      	ldr	r2, [pc, #16]	; (8010e20 <SPI_Timer_On+0x20>)
 8010e10:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8010e12:	4a04      	ldr	r2, [pc, #16]	; (8010e24 <SPI_Timer_On+0x24>)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6013      	str	r3, [r2, #0]
}
 8010e18:	bf00      	nop
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	200077ac 	.word	0x200077ac
 8010e24:	200077b0 	.word	0x200077b0

08010e28 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8010e2c:	f7f7 feb0 	bl	8008b90 <HAL_GetTick>
 8010e30:	4602      	mov	r2, r0
 8010e32:	4b06      	ldr	r3, [pc, #24]	; (8010e4c <SPI_Timer_Status+0x24>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	1ad2      	subs	r2, r2, r3
 8010e38:	4b05      	ldr	r3, [pc, #20]	; (8010e50 <SPI_Timer_Status+0x28>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	bf34      	ite	cc
 8010e40:	2301      	movcc	r3, #1
 8010e42:	2300      	movcs	r3, #0
 8010e44:	b2db      	uxtb	r3, r3
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	200077ac 	.word	0x200077ac
 8010e50:	200077b0 	.word	0x200077b0

08010e54 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b086      	sub	sp, #24
 8010e58:	af02      	add	r7, sp, #8
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8010e5e:	f107 020f 	add.w	r2, r7, #15
 8010e62:	1df9      	adds	r1, r7, #7
 8010e64:	2332      	movs	r3, #50	; 0x32
 8010e66:	9300      	str	r3, [sp, #0]
 8010e68:	2301      	movs	r3, #1
 8010e6a:	4804      	ldr	r0, [pc, #16]	; (8010e7c <xchg_spi+0x28>)
 8010e6c:	f7fc ff68 	bl	800dd40 <HAL_SPI_TransmitReceive>
    return rxDat;
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	20005fd8 	.word	0x20005fd8

08010e80 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8010e80:	b590      	push	{r4, r7, lr}
 8010e82:	b085      	sub	sp, #20
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	60fb      	str	r3, [r7, #12]
 8010e8e:	e00a      	b.n	8010ea6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	18d4      	adds	r4, r2, r3
 8010e96:	20ff      	movs	r0, #255	; 0xff
 8010e98:	f7ff ffdc 	bl	8010e54 <xchg_spi>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	60fb      	str	r3, [r7, #12]
 8010ea6:	68fa      	ldr	r2, [r7, #12]
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d3f0      	bcc.n	8010e90 <rcvr_spi_multi+0x10>
	}
}
 8010eae:	bf00      	nop
 8010eb0:	bf00      	nop
 8010eb2:	3714      	adds	r7, #20
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd90      	pop	{r4, r7, pc}

08010eb8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b084      	sub	sp, #16
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	60fb      	str	r3, [r7, #12]
 8010ec6:	e009      	b.n	8010edc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	4413      	add	r3, r2
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7ff ffbf 	bl	8010e54 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	3301      	adds	r3, #1
 8010eda:	60fb      	str	r3, [r7, #12]
 8010edc:	68fa      	ldr	r2, [r7, #12]
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d3f1      	bcc.n	8010ec8 <xmit_spi_multi+0x10>
	}
}
 8010ee4:	bf00      	nop
 8010ee6:	bf00      	nop
 8010ee8:	3710      	adds	r7, #16
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}

08010eee <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8010eee:	b580      	push	{r7, lr}
 8010ef0:	b086      	sub	sp, #24
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8010ef6:	f7f7 fe4b 	bl	8008b90 <HAL_GetTick>
 8010efa:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8010f00:	20ff      	movs	r0, #255	; 0xff
 8010f02:	f7ff ffa7 	bl	8010e54 <xchg_spi>
 8010f06:	4603      	mov	r3, r0
 8010f08:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8010f0a:	7bfb      	ldrb	r3, [r7, #15]
 8010f0c:	2bff      	cmp	r3, #255	; 0xff
 8010f0e:	d007      	beq.n	8010f20 <wait_ready+0x32>
 8010f10:	f7f7 fe3e 	bl	8008b90 <HAL_GetTick>
 8010f14:	4602      	mov	r2, r0
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	693a      	ldr	r2, [r7, #16]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d8ef      	bhi.n	8010f00 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8010f20:	7bfb      	ldrb	r3, [r7, #15]
 8010f22:	2bff      	cmp	r3, #255	; 0xff
 8010f24:	bf0c      	ite	eq
 8010f26:	2301      	moveq	r3, #1
 8010f28:	2300      	movne	r3, #0
 8010f2a:	b2db      	uxtb	r3, r3
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3718      	adds	r7, #24
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8010f38:	2201      	movs	r2, #1
 8010f3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010f3e:	4804      	ldr	r0, [pc, #16]	; (8010f50 <despiselect+0x1c>)
 8010f40:	f7f8 fd3e 	bl	80099c0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8010f44:	20ff      	movs	r0, #255	; 0xff
 8010f46:	f7ff ff85 	bl	8010e54 <xchg_spi>

}
 8010f4a:	bf00      	nop
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	40021400 	.word	0x40021400

08010f54 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010f5e:	480a      	ldr	r0, [pc, #40]	; (8010f88 <spiselect+0x34>)
 8010f60:	f7f8 fd2e 	bl	80099c0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8010f64:	20ff      	movs	r0, #255	; 0xff
 8010f66:	f7ff ff75 	bl	8010e54 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8010f6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010f6e:	f7ff ffbe 	bl	8010eee <wait_ready>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d001      	beq.n	8010f7c <spiselect+0x28>
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e002      	b.n	8010f82 <spiselect+0x2e>

	despiselect();
 8010f7c:	f7ff ffda 	bl	8010f34 <despiselect>
	return 0;	/* Timeout */
 8010f80:	2300      	movs	r3, #0
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	40021400 	.word	0x40021400

08010f8c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8010f96:	20c8      	movs	r0, #200	; 0xc8
 8010f98:	f7ff ff32 	bl	8010e00 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8010f9c:	20ff      	movs	r0, #255	; 0xff
 8010f9e:	f7ff ff59 	bl	8010e54 <xchg_spi>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8010fa6:	7bfb      	ldrb	r3, [r7, #15]
 8010fa8:	2bff      	cmp	r3, #255	; 0xff
 8010faa:	d104      	bne.n	8010fb6 <rcvr_datablock+0x2a>
 8010fac:	f7ff ff3c 	bl	8010e28 <SPI_Timer_Status>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d1f2      	bne.n	8010f9c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8010fb6:	7bfb      	ldrb	r3, [r7, #15]
 8010fb8:	2bfe      	cmp	r3, #254	; 0xfe
 8010fba:	d001      	beq.n	8010fc0 <rcvr_datablock+0x34>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	e00a      	b.n	8010fd6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8010fc0:	6839      	ldr	r1, [r7, #0]
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f7ff ff5c 	bl	8010e80 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8010fc8:	20ff      	movs	r0, #255	; 0xff
 8010fca:	f7ff ff43 	bl	8010e54 <xchg_spi>
 8010fce:	20ff      	movs	r0, #255	; 0xff
 8010fd0:	f7ff ff40 	bl	8010e54 <xchg_spi>

	return 1;						/* Function succeeded */
 8010fd4:	2301      	movs	r3, #1
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3710      	adds	r7, #16
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}

08010fde <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8010fde:	b580      	push	{r7, lr}
 8010fe0:	b084      	sub	sp, #16
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	6078      	str	r0, [r7, #4]
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8010fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010fee:	f7ff ff7e 	bl	8010eee <wait_ready>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d101      	bne.n	8010ffc <xmit_datablock+0x1e>
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	e01e      	b.n	801103a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8010ffc:	78fb      	ldrb	r3, [r7, #3]
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7ff ff28 	bl	8010e54 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8011004:	78fb      	ldrb	r3, [r7, #3]
 8011006:	2bfd      	cmp	r3, #253	; 0xfd
 8011008:	d016      	beq.n	8011038 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 801100a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f7ff ff52 	bl	8010eb8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8011014:	20ff      	movs	r0, #255	; 0xff
 8011016:	f7ff ff1d 	bl	8010e54 <xchg_spi>
 801101a:	20ff      	movs	r0, #255	; 0xff
 801101c:	f7ff ff1a 	bl	8010e54 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8011020:	20ff      	movs	r0, #255	; 0xff
 8011022:	f7ff ff17 	bl	8010e54 <xchg_spi>
 8011026:	4603      	mov	r3, r0
 8011028:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 801102a:	7bfb      	ldrb	r3, [r7, #15]
 801102c:	f003 031f 	and.w	r3, r3, #31
 8011030:	2b05      	cmp	r3, #5
 8011032:	d001      	beq.n	8011038 <xmit_datablock+0x5a>
 8011034:	2300      	movs	r3, #0
 8011036:	e000      	b.n	801103a <xmit_datablock+0x5c>
	}
	return 1;
 8011038:	2301      	movs	r3, #1
}
 801103a:	4618      	mov	r0, r3
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b084      	sub	sp, #16
 8011046:	af00      	add	r7, sp, #0
 8011048:	4603      	mov	r3, r0
 801104a:	6039      	str	r1, [r7, #0]
 801104c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 801104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011052:	2b00      	cmp	r3, #0
 8011054:	da0e      	bge.n	8011074 <send_cmd+0x32>
		cmd &= 0x7F;
 8011056:	79fb      	ldrb	r3, [r7, #7]
 8011058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801105c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 801105e:	2100      	movs	r1, #0
 8011060:	2037      	movs	r0, #55	; 0x37
 8011062:	f7ff ffee 	bl	8011042 <send_cmd>
 8011066:	4603      	mov	r3, r0
 8011068:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 801106a:	7bbb      	ldrb	r3, [r7, #14]
 801106c:	2b01      	cmp	r3, #1
 801106e:	d901      	bls.n	8011074 <send_cmd+0x32>
 8011070:	7bbb      	ldrb	r3, [r7, #14]
 8011072:	e051      	b.n	8011118 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8011074:	79fb      	ldrb	r3, [r7, #7]
 8011076:	2b0c      	cmp	r3, #12
 8011078:	d008      	beq.n	801108c <send_cmd+0x4a>
		despiselect();
 801107a:	f7ff ff5b 	bl	8010f34 <despiselect>
		if (!spiselect()) return 0xFF;
 801107e:	f7ff ff69 	bl	8010f54 <spiselect>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d101      	bne.n	801108c <send_cmd+0x4a>
 8011088:	23ff      	movs	r3, #255	; 0xff
 801108a:	e045      	b.n	8011118 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 801108c:	79fb      	ldrb	r3, [r7, #7]
 801108e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011092:	b2db      	uxtb	r3, r3
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff fedd 	bl	8010e54 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	0e1b      	lsrs	r3, r3, #24
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7ff fed7 	bl	8010e54 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	0c1b      	lsrs	r3, r3, #16
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7ff fed1 	bl	8010e54 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	0a1b      	lsrs	r3, r3, #8
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7ff fecb 	bl	8010e54 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7ff fec6 	bl	8010e54 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80110c8:	2301      	movs	r3, #1
 80110ca:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80110cc:	79fb      	ldrb	r3, [r7, #7]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d101      	bne.n	80110d6 <send_cmd+0x94>
 80110d2:	2395      	movs	r3, #149	; 0x95
 80110d4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80110d6:	79fb      	ldrb	r3, [r7, #7]
 80110d8:	2b08      	cmp	r3, #8
 80110da:	d101      	bne.n	80110e0 <send_cmd+0x9e>
 80110dc:	2387      	movs	r3, #135	; 0x87
 80110de:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80110e0:	7bfb      	ldrb	r3, [r7, #15]
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7ff feb6 	bl	8010e54 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80110e8:	79fb      	ldrb	r3, [r7, #7]
 80110ea:	2b0c      	cmp	r3, #12
 80110ec:	d102      	bne.n	80110f4 <send_cmd+0xb2>
 80110ee:	20ff      	movs	r0, #255	; 0xff
 80110f0:	f7ff feb0 	bl	8010e54 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80110f4:	230a      	movs	r3, #10
 80110f6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80110f8:	20ff      	movs	r0, #255	; 0xff
 80110fa:	f7ff feab 	bl	8010e54 <xchg_spi>
 80110fe:	4603      	mov	r3, r0
 8011100:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8011102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011106:	2b00      	cmp	r3, #0
 8011108:	da05      	bge.n	8011116 <send_cmd+0xd4>
 801110a:	7bfb      	ldrb	r3, [r7, #15]
 801110c:	3b01      	subs	r3, #1
 801110e:	73fb      	strb	r3, [r7, #15]
 8011110:	7bfb      	ldrb	r3, [r7, #15]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d1f0      	bne.n	80110f8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8011116:	7bbb      	ldrb	r3, [r7, #14]
}
 8011118:	4618      	mov	r0, r3
 801111a:	3710      	adds	r7, #16
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}

08011120 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8011120:	b590      	push	{r4, r7, lr}
 8011122:	b085      	sub	sp, #20
 8011124:	af00      	add	r7, sp, #0
 8011126:	4603      	mov	r3, r0
 8011128:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 801112a:	79fb      	ldrb	r3, [r7, #7]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <USER_SPI_initialize+0x14>
 8011130:	2301      	movs	r3, #1
 8011132:	e0d4      	b.n	80112de <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8011134:	4b6c      	ldr	r3, [pc, #432]	; (80112e8 <USER_SPI_initialize+0x1c8>)
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	b2db      	uxtb	r3, r3
 801113a:	f003 0302 	and.w	r3, r3, #2
 801113e:	2b00      	cmp	r3, #0
 8011140:	d003      	beq.n	801114a <USER_SPI_initialize+0x2a>
 8011142:	4b69      	ldr	r3, [pc, #420]	; (80112e8 <USER_SPI_initialize+0x1c8>)
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	b2db      	uxtb	r3, r3
 8011148:	e0c9      	b.n	80112de <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 801114a:	4b68      	ldr	r3, [pc, #416]	; (80112ec <USER_SPI_initialize+0x1cc>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	4b66      	ldr	r3, [pc, #408]	; (80112ec <USER_SPI_initialize+0x1cc>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8011158:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 801115a:	230a      	movs	r3, #10
 801115c:	73fb      	strb	r3, [r7, #15]
 801115e:	e005      	b.n	801116c <USER_SPI_initialize+0x4c>
 8011160:	20ff      	movs	r0, #255	; 0xff
 8011162:	f7ff fe77 	bl	8010e54 <xchg_spi>
 8011166:	7bfb      	ldrb	r3, [r7, #15]
 8011168:	3b01      	subs	r3, #1
 801116a:	73fb      	strb	r3, [r7, #15]
 801116c:	7bfb      	ldrb	r3, [r7, #15]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d1f6      	bne.n	8011160 <USER_SPI_initialize+0x40>

	ty = 0;
 8011172:	2300      	movs	r3, #0
 8011174:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8011176:	2100      	movs	r1, #0
 8011178:	2000      	movs	r0, #0
 801117a:	f7ff ff62 	bl	8011042 <send_cmd>
 801117e:	4603      	mov	r3, r0
 8011180:	2b01      	cmp	r3, #1
 8011182:	f040 808b 	bne.w	801129c <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8011186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801118a:	f7ff fe39 	bl	8010e00 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 801118e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011192:	2008      	movs	r0, #8
 8011194:	f7ff ff55 	bl	8011042 <send_cmd>
 8011198:	4603      	mov	r3, r0
 801119a:	2b01      	cmp	r3, #1
 801119c:	d151      	bne.n	8011242 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 801119e:	2300      	movs	r3, #0
 80111a0:	73fb      	strb	r3, [r7, #15]
 80111a2:	e00d      	b.n	80111c0 <USER_SPI_initialize+0xa0>
 80111a4:	7bfc      	ldrb	r4, [r7, #15]
 80111a6:	20ff      	movs	r0, #255	; 0xff
 80111a8:	f7ff fe54 	bl	8010e54 <xchg_spi>
 80111ac:	4603      	mov	r3, r0
 80111ae:	461a      	mov	r2, r3
 80111b0:	f107 0310 	add.w	r3, r7, #16
 80111b4:	4423      	add	r3, r4
 80111b6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80111ba:	7bfb      	ldrb	r3, [r7, #15]
 80111bc:	3301      	adds	r3, #1
 80111be:	73fb      	strb	r3, [r7, #15]
 80111c0:	7bfb      	ldrb	r3, [r7, #15]
 80111c2:	2b03      	cmp	r3, #3
 80111c4:	d9ee      	bls.n	80111a4 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80111c6:	7abb      	ldrb	r3, [r7, #10]
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d167      	bne.n	801129c <USER_SPI_initialize+0x17c>
 80111cc:	7afb      	ldrb	r3, [r7, #11]
 80111ce:	2baa      	cmp	r3, #170	; 0xaa
 80111d0:	d164      	bne.n	801129c <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80111d2:	bf00      	nop
 80111d4:	f7ff fe28 	bl	8010e28 <SPI_Timer_Status>
 80111d8:	4603      	mov	r3, r0
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d007      	beq.n	80111ee <USER_SPI_initialize+0xce>
 80111de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80111e2:	20a9      	movs	r0, #169	; 0xa9
 80111e4:	f7ff ff2d 	bl	8011042 <send_cmd>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d1f2      	bne.n	80111d4 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80111ee:	f7ff fe1b 	bl	8010e28 <SPI_Timer_Status>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d051      	beq.n	801129c <USER_SPI_initialize+0x17c>
 80111f8:	2100      	movs	r1, #0
 80111fa:	203a      	movs	r0, #58	; 0x3a
 80111fc:	f7ff ff21 	bl	8011042 <send_cmd>
 8011200:	4603      	mov	r3, r0
 8011202:	2b00      	cmp	r3, #0
 8011204:	d14a      	bne.n	801129c <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8011206:	2300      	movs	r3, #0
 8011208:	73fb      	strb	r3, [r7, #15]
 801120a:	e00d      	b.n	8011228 <USER_SPI_initialize+0x108>
 801120c:	7bfc      	ldrb	r4, [r7, #15]
 801120e:	20ff      	movs	r0, #255	; 0xff
 8011210:	f7ff fe20 	bl	8010e54 <xchg_spi>
 8011214:	4603      	mov	r3, r0
 8011216:	461a      	mov	r2, r3
 8011218:	f107 0310 	add.w	r3, r7, #16
 801121c:	4423      	add	r3, r4
 801121e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8011222:	7bfb      	ldrb	r3, [r7, #15]
 8011224:	3301      	adds	r3, #1
 8011226:	73fb      	strb	r3, [r7, #15]
 8011228:	7bfb      	ldrb	r3, [r7, #15]
 801122a:	2b03      	cmp	r3, #3
 801122c:	d9ee      	bls.n	801120c <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 801122e:	7a3b      	ldrb	r3, [r7, #8]
 8011230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011234:	2b00      	cmp	r3, #0
 8011236:	d001      	beq.n	801123c <USER_SPI_initialize+0x11c>
 8011238:	230c      	movs	r3, #12
 801123a:	e000      	b.n	801123e <USER_SPI_initialize+0x11e>
 801123c:	2304      	movs	r3, #4
 801123e:	737b      	strb	r3, [r7, #13]
 8011240:	e02c      	b.n	801129c <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8011242:	2100      	movs	r1, #0
 8011244:	20a9      	movs	r0, #169	; 0xa9
 8011246:	f7ff fefc 	bl	8011042 <send_cmd>
 801124a:	4603      	mov	r3, r0
 801124c:	2b01      	cmp	r3, #1
 801124e:	d804      	bhi.n	801125a <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8011250:	2302      	movs	r3, #2
 8011252:	737b      	strb	r3, [r7, #13]
 8011254:	23a9      	movs	r3, #169	; 0xa9
 8011256:	73bb      	strb	r3, [r7, #14]
 8011258:	e003      	b.n	8011262 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 801125a:	2301      	movs	r3, #1
 801125c:	737b      	strb	r3, [r7, #13]
 801125e:	2301      	movs	r3, #1
 8011260:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8011262:	bf00      	nop
 8011264:	f7ff fde0 	bl	8010e28 <SPI_Timer_Status>
 8011268:	4603      	mov	r3, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d007      	beq.n	801127e <USER_SPI_initialize+0x15e>
 801126e:	7bbb      	ldrb	r3, [r7, #14]
 8011270:	2100      	movs	r1, #0
 8011272:	4618      	mov	r0, r3
 8011274:	f7ff fee5 	bl	8011042 <send_cmd>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	d1f2      	bne.n	8011264 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 801127e:	f7ff fdd3 	bl	8010e28 <SPI_Timer_Status>
 8011282:	4603      	mov	r3, r0
 8011284:	2b00      	cmp	r3, #0
 8011286:	d007      	beq.n	8011298 <USER_SPI_initialize+0x178>
 8011288:	f44f 7100 	mov.w	r1, #512	; 0x200
 801128c:	2010      	movs	r0, #16
 801128e:	f7ff fed8 	bl	8011042 <send_cmd>
 8011292:	4603      	mov	r3, r0
 8011294:	2b00      	cmp	r3, #0
 8011296:	d001      	beq.n	801129c <USER_SPI_initialize+0x17c>
				ty = 0;
 8011298:	2300      	movs	r3, #0
 801129a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 801129c:	4a14      	ldr	r2, [pc, #80]	; (80112f0 <USER_SPI_initialize+0x1d0>)
 801129e:	7b7b      	ldrb	r3, [r7, #13]
 80112a0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80112a2:	f7ff fe47 	bl	8010f34 <despiselect>

	if (ty) {			/* OK */
 80112a6:	7b7b      	ldrb	r3, [r7, #13]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d012      	beq.n	80112d2 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 80112ac:	4b0f      	ldr	r3, [pc, #60]	; (80112ec <USER_SPI_initialize+0x1cc>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80112b6:	4b0d      	ldr	r3, [pc, #52]	; (80112ec <USER_SPI_initialize+0x1cc>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f042 0218 	orr.w	r2, r2, #24
 80112be:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80112c0:	4b09      	ldr	r3, [pc, #36]	; (80112e8 <USER_SPI_initialize+0x1c8>)
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	b2db      	uxtb	r3, r3
 80112c6:	f023 0301 	bic.w	r3, r3, #1
 80112ca:	b2da      	uxtb	r2, r3
 80112cc:	4b06      	ldr	r3, [pc, #24]	; (80112e8 <USER_SPI_initialize+0x1c8>)
 80112ce:	701a      	strb	r2, [r3, #0]
 80112d0:	e002      	b.n	80112d8 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80112d2:	4b05      	ldr	r3, [pc, #20]	; (80112e8 <USER_SPI_initialize+0x1c8>)
 80112d4:	2201      	movs	r2, #1
 80112d6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80112d8:	4b03      	ldr	r3, [pc, #12]	; (80112e8 <USER_SPI_initialize+0x1c8>)
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	b2db      	uxtb	r3, r3
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3714      	adds	r7, #20
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd90      	pop	{r4, r7, pc}
 80112e6:	bf00      	nop
 80112e8:	2000007c 	.word	0x2000007c
 80112ec:	20005fd8 	.word	0x20005fd8
 80112f0:	20000838 	.word	0x20000838

080112f4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b083      	sub	sp, #12
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	4603      	mov	r3, r0
 80112fc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80112fe:	79fb      	ldrb	r3, [r7, #7]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d001      	beq.n	8011308 <USER_SPI_status+0x14>
 8011304:	2301      	movs	r3, #1
 8011306:	e002      	b.n	801130e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8011308:	4b04      	ldr	r3, [pc, #16]	; (801131c <USER_SPI_status+0x28>)
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	b2db      	uxtb	r3, r3
}
 801130e:	4618      	mov	r0, r3
 8011310:	370c      	adds	r7, #12
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	2000007c 	.word	0x2000007c

08011320 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	60b9      	str	r1, [r7, #8]
 8011328:	607a      	str	r2, [r7, #4]
 801132a:	603b      	str	r3, [r7, #0]
 801132c:	4603      	mov	r3, r0
 801132e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8011330:	7bfb      	ldrb	r3, [r7, #15]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d102      	bne.n	801133c <USER_SPI_read+0x1c>
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d101      	bne.n	8011340 <USER_SPI_read+0x20>
 801133c:	2304      	movs	r3, #4
 801133e:	e04d      	b.n	80113dc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8011340:	4b28      	ldr	r3, [pc, #160]	; (80113e4 <USER_SPI_read+0xc4>)
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	b2db      	uxtb	r3, r3
 8011346:	f003 0301 	and.w	r3, r3, #1
 801134a:	2b00      	cmp	r3, #0
 801134c:	d001      	beq.n	8011352 <USER_SPI_read+0x32>
 801134e:	2303      	movs	r3, #3
 8011350:	e044      	b.n	80113dc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8011352:	4b25      	ldr	r3, [pc, #148]	; (80113e8 <USER_SPI_read+0xc8>)
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	f003 0308 	and.w	r3, r3, #8
 801135a:	2b00      	cmp	r3, #0
 801135c:	d102      	bne.n	8011364 <USER_SPI_read+0x44>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	025b      	lsls	r3, r3, #9
 8011362:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	2b01      	cmp	r3, #1
 8011368:	d111      	bne.n	801138e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 801136a:	6879      	ldr	r1, [r7, #4]
 801136c:	2011      	movs	r0, #17
 801136e:	f7ff fe68 	bl	8011042 <send_cmd>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	d129      	bne.n	80113cc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8011378:	f44f 7100 	mov.w	r1, #512	; 0x200
 801137c:	68b8      	ldr	r0, [r7, #8]
 801137e:	f7ff fe05 	bl	8010f8c <rcvr_datablock>
 8011382:	4603      	mov	r3, r0
 8011384:	2b00      	cmp	r3, #0
 8011386:	d021      	beq.n	80113cc <USER_SPI_read+0xac>
			count = 0;
 8011388:	2300      	movs	r3, #0
 801138a:	603b      	str	r3, [r7, #0]
 801138c:	e01e      	b.n	80113cc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 801138e:	6879      	ldr	r1, [r7, #4]
 8011390:	2012      	movs	r0, #18
 8011392:	f7ff fe56 	bl	8011042 <send_cmd>
 8011396:	4603      	mov	r3, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	d117      	bne.n	80113cc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 801139c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80113a0:	68b8      	ldr	r0, [r7, #8]
 80113a2:	f7ff fdf3 	bl	8010f8c <rcvr_datablock>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00a      	beq.n	80113c2 <USER_SPI_read+0xa2>
				buff += 512;
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80113b2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	3b01      	subs	r3, #1
 80113b8:	603b      	str	r3, [r7, #0]
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d1ed      	bne.n	801139c <USER_SPI_read+0x7c>
 80113c0:	e000      	b.n	80113c4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80113c2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80113c4:	2100      	movs	r1, #0
 80113c6:	200c      	movs	r0, #12
 80113c8:	f7ff fe3b 	bl	8011042 <send_cmd>
		}
	}
	despiselect();
 80113cc:	f7ff fdb2 	bl	8010f34 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	bf14      	ite	ne
 80113d6:	2301      	movne	r3, #1
 80113d8:	2300      	moveq	r3, #0
 80113da:	b2db      	uxtb	r3, r3
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3710      	adds	r7, #16
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	2000007c 	.word	0x2000007c
 80113e8:	20000838 	.word	0x20000838

080113ec <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b084      	sub	sp, #16
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60b9      	str	r1, [r7, #8]
 80113f4:	607a      	str	r2, [r7, #4]
 80113f6:	603b      	str	r3, [r7, #0]
 80113f8:	4603      	mov	r3, r0
 80113fa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80113fc:	7bfb      	ldrb	r3, [r7, #15]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d102      	bne.n	8011408 <USER_SPI_write+0x1c>
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d101      	bne.n	801140c <USER_SPI_write+0x20>
 8011408:	2304      	movs	r3, #4
 801140a:	e063      	b.n	80114d4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 801140c:	4b33      	ldr	r3, [pc, #204]	; (80114dc <USER_SPI_write+0xf0>)
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	b2db      	uxtb	r3, r3
 8011412:	f003 0301 	and.w	r3, r3, #1
 8011416:	2b00      	cmp	r3, #0
 8011418:	d001      	beq.n	801141e <USER_SPI_write+0x32>
 801141a:	2303      	movs	r3, #3
 801141c:	e05a      	b.n	80114d4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 801141e:	4b2f      	ldr	r3, [pc, #188]	; (80114dc <USER_SPI_write+0xf0>)
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	b2db      	uxtb	r3, r3
 8011424:	f003 0304 	and.w	r3, r3, #4
 8011428:	2b00      	cmp	r3, #0
 801142a:	d001      	beq.n	8011430 <USER_SPI_write+0x44>
 801142c:	2302      	movs	r3, #2
 801142e:	e051      	b.n	80114d4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8011430:	4b2b      	ldr	r3, [pc, #172]	; (80114e0 <USER_SPI_write+0xf4>)
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	f003 0308 	and.w	r3, r3, #8
 8011438:	2b00      	cmp	r3, #0
 801143a:	d102      	bne.n	8011442 <USER_SPI_write+0x56>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	025b      	lsls	r3, r3, #9
 8011440:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	2b01      	cmp	r3, #1
 8011446:	d110      	bne.n	801146a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8011448:	6879      	ldr	r1, [r7, #4]
 801144a:	2018      	movs	r0, #24
 801144c:	f7ff fdf9 	bl	8011042 <send_cmd>
 8011450:	4603      	mov	r3, r0
 8011452:	2b00      	cmp	r3, #0
 8011454:	d136      	bne.n	80114c4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8011456:	21fe      	movs	r1, #254	; 0xfe
 8011458:	68b8      	ldr	r0, [r7, #8]
 801145a:	f7ff fdc0 	bl	8010fde <xmit_datablock>
 801145e:	4603      	mov	r3, r0
 8011460:	2b00      	cmp	r3, #0
 8011462:	d02f      	beq.n	80114c4 <USER_SPI_write+0xd8>
			count = 0;
 8011464:	2300      	movs	r3, #0
 8011466:	603b      	str	r3, [r7, #0]
 8011468:	e02c      	b.n	80114c4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 801146a:	4b1d      	ldr	r3, [pc, #116]	; (80114e0 <USER_SPI_write+0xf4>)
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	f003 0306 	and.w	r3, r3, #6
 8011472:	2b00      	cmp	r3, #0
 8011474:	d003      	beq.n	801147e <USER_SPI_write+0x92>
 8011476:	6839      	ldr	r1, [r7, #0]
 8011478:	2097      	movs	r0, #151	; 0x97
 801147a:	f7ff fde2 	bl	8011042 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 801147e:	6879      	ldr	r1, [r7, #4]
 8011480:	2019      	movs	r0, #25
 8011482:	f7ff fdde 	bl	8011042 <send_cmd>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d11b      	bne.n	80114c4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 801148c:	21fc      	movs	r1, #252	; 0xfc
 801148e:	68b8      	ldr	r0, [r7, #8]
 8011490:	f7ff fda5 	bl	8010fde <xmit_datablock>
 8011494:	4603      	mov	r3, r0
 8011496:	2b00      	cmp	r3, #0
 8011498:	d00a      	beq.n	80114b0 <USER_SPI_write+0xc4>
				buff += 512;
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80114a0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	3b01      	subs	r3, #1
 80114a6:	603b      	str	r3, [r7, #0]
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d1ee      	bne.n	801148c <USER_SPI_write+0xa0>
 80114ae:	e000      	b.n	80114b2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80114b0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80114b2:	21fd      	movs	r1, #253	; 0xfd
 80114b4:	2000      	movs	r0, #0
 80114b6:	f7ff fd92 	bl	8010fde <xmit_datablock>
 80114ba:	4603      	mov	r3, r0
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d101      	bne.n	80114c4 <USER_SPI_write+0xd8>
 80114c0:	2301      	movs	r3, #1
 80114c2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80114c4:	f7ff fd36 	bl	8010f34 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	bf14      	ite	ne
 80114ce:	2301      	movne	r3, #1
 80114d0:	2300      	moveq	r3, #0
 80114d2:	b2db      	uxtb	r3, r3
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	2000007c 	.word	0x2000007c
 80114e0:	20000838 	.word	0x20000838

080114e4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b08c      	sub	sp, #48	; 0x30
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	4603      	mov	r3, r0
 80114ec:	603a      	str	r2, [r7, #0]
 80114ee:	71fb      	strb	r3, [r7, #7]
 80114f0:	460b      	mov	r3, r1
 80114f2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80114f4:	79fb      	ldrb	r3, [r7, #7]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d001      	beq.n	80114fe <USER_SPI_ioctl+0x1a>
 80114fa:	2304      	movs	r3, #4
 80114fc:	e15a      	b.n	80117b4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80114fe:	4baf      	ldr	r3, [pc, #700]	; (80117bc <USER_SPI_ioctl+0x2d8>)
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	b2db      	uxtb	r3, r3
 8011504:	f003 0301 	and.w	r3, r3, #1
 8011508:	2b00      	cmp	r3, #0
 801150a:	d001      	beq.n	8011510 <USER_SPI_ioctl+0x2c>
 801150c:	2303      	movs	r3, #3
 801150e:	e151      	b.n	80117b4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8011510:	2301      	movs	r3, #1
 8011512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8011516:	79bb      	ldrb	r3, [r7, #6]
 8011518:	2b04      	cmp	r3, #4
 801151a:	f200 8136 	bhi.w	801178a <USER_SPI_ioctl+0x2a6>
 801151e:	a201      	add	r2, pc, #4	; (adr r2, 8011524 <USER_SPI_ioctl+0x40>)
 8011520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011524:	08011539 	.word	0x08011539
 8011528:	0801154d 	.word	0x0801154d
 801152c:	0801178b 	.word	0x0801178b
 8011530:	080115f9 	.word	0x080115f9
 8011534:	080116ef 	.word	0x080116ef
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8011538:	f7ff fd0c 	bl	8010f54 <spiselect>
 801153c:	4603      	mov	r3, r0
 801153e:	2b00      	cmp	r3, #0
 8011540:	f000 8127 	beq.w	8011792 <USER_SPI_ioctl+0x2ae>
 8011544:	2300      	movs	r3, #0
 8011546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 801154a:	e122      	b.n	8011792 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 801154c:	2100      	movs	r1, #0
 801154e:	2009      	movs	r0, #9
 8011550:	f7ff fd77 	bl	8011042 <send_cmd>
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	f040 811d 	bne.w	8011796 <USER_SPI_ioctl+0x2b2>
 801155c:	f107 030c 	add.w	r3, r7, #12
 8011560:	2110      	movs	r1, #16
 8011562:	4618      	mov	r0, r3
 8011564:	f7ff fd12 	bl	8010f8c <rcvr_datablock>
 8011568:	4603      	mov	r3, r0
 801156a:	2b00      	cmp	r3, #0
 801156c:	f000 8113 	beq.w	8011796 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8011570:	7b3b      	ldrb	r3, [r7, #12]
 8011572:	099b      	lsrs	r3, r3, #6
 8011574:	b2db      	uxtb	r3, r3
 8011576:	2b01      	cmp	r3, #1
 8011578:	d111      	bne.n	801159e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 801157a:	7d7b      	ldrb	r3, [r7, #21]
 801157c:	461a      	mov	r2, r3
 801157e:	7d3b      	ldrb	r3, [r7, #20]
 8011580:	021b      	lsls	r3, r3, #8
 8011582:	4413      	add	r3, r2
 8011584:	461a      	mov	r2, r3
 8011586:	7cfb      	ldrb	r3, [r7, #19]
 8011588:	041b      	lsls	r3, r3, #16
 801158a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 801158e:	4413      	add	r3, r2
 8011590:	3301      	adds	r3, #1
 8011592:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	029a      	lsls	r2, r3, #10
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	601a      	str	r2, [r3, #0]
 801159c:	e028      	b.n	80115f0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801159e:	7c7b      	ldrb	r3, [r7, #17]
 80115a0:	f003 030f 	and.w	r3, r3, #15
 80115a4:	b2da      	uxtb	r2, r3
 80115a6:	7dbb      	ldrb	r3, [r7, #22]
 80115a8:	09db      	lsrs	r3, r3, #7
 80115aa:	b2db      	uxtb	r3, r3
 80115ac:	4413      	add	r3, r2
 80115ae:	b2da      	uxtb	r2, r3
 80115b0:	7d7b      	ldrb	r3, [r7, #21]
 80115b2:	005b      	lsls	r3, r3, #1
 80115b4:	b2db      	uxtb	r3, r3
 80115b6:	f003 0306 	and.w	r3, r3, #6
 80115ba:	b2db      	uxtb	r3, r3
 80115bc:	4413      	add	r3, r2
 80115be:	b2db      	uxtb	r3, r3
 80115c0:	3302      	adds	r3, #2
 80115c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80115c6:	7d3b      	ldrb	r3, [r7, #20]
 80115c8:	099b      	lsrs	r3, r3, #6
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	461a      	mov	r2, r3
 80115ce:	7cfb      	ldrb	r3, [r7, #19]
 80115d0:	009b      	lsls	r3, r3, #2
 80115d2:	441a      	add	r2, r3
 80115d4:	7cbb      	ldrb	r3, [r7, #18]
 80115d6:	029b      	lsls	r3, r3, #10
 80115d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80115dc:	4413      	add	r3, r2
 80115de:	3301      	adds	r3, #1
 80115e0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80115e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80115e6:	3b09      	subs	r3, #9
 80115e8:	69fa      	ldr	r2, [r7, #28]
 80115ea:	409a      	lsls	r2, r3
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80115f0:	2300      	movs	r3, #0
 80115f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80115f6:	e0ce      	b.n	8011796 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80115f8:	4b71      	ldr	r3, [pc, #452]	; (80117c0 <USER_SPI_ioctl+0x2dc>)
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	f003 0304 	and.w	r3, r3, #4
 8011600:	2b00      	cmp	r3, #0
 8011602:	d031      	beq.n	8011668 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8011604:	2100      	movs	r1, #0
 8011606:	208d      	movs	r0, #141	; 0x8d
 8011608:	f7ff fd1b 	bl	8011042 <send_cmd>
 801160c:	4603      	mov	r3, r0
 801160e:	2b00      	cmp	r3, #0
 8011610:	f040 80c3 	bne.w	801179a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8011614:	20ff      	movs	r0, #255	; 0xff
 8011616:	f7ff fc1d 	bl	8010e54 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 801161a:	f107 030c 	add.w	r3, r7, #12
 801161e:	2110      	movs	r1, #16
 8011620:	4618      	mov	r0, r3
 8011622:	f7ff fcb3 	bl	8010f8c <rcvr_datablock>
 8011626:	4603      	mov	r3, r0
 8011628:	2b00      	cmp	r3, #0
 801162a:	f000 80b6 	beq.w	801179a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 801162e:	2330      	movs	r3, #48	; 0x30
 8011630:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8011634:	e007      	b.n	8011646 <USER_SPI_ioctl+0x162>
 8011636:	20ff      	movs	r0, #255	; 0xff
 8011638:	f7ff fc0c 	bl	8010e54 <xchg_spi>
 801163c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011640:	3b01      	subs	r3, #1
 8011642:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8011646:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801164a:	2b00      	cmp	r3, #0
 801164c:	d1f3      	bne.n	8011636 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 801164e:	7dbb      	ldrb	r3, [r7, #22]
 8011650:	091b      	lsrs	r3, r3, #4
 8011652:	b2db      	uxtb	r3, r3
 8011654:	461a      	mov	r2, r3
 8011656:	2310      	movs	r3, #16
 8011658:	fa03 f202 	lsl.w	r2, r3, r2
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8011660:	2300      	movs	r3, #0
 8011662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8011666:	e098      	b.n	801179a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8011668:	2100      	movs	r1, #0
 801166a:	2009      	movs	r0, #9
 801166c:	f7ff fce9 	bl	8011042 <send_cmd>
 8011670:	4603      	mov	r3, r0
 8011672:	2b00      	cmp	r3, #0
 8011674:	f040 8091 	bne.w	801179a <USER_SPI_ioctl+0x2b6>
 8011678:	f107 030c 	add.w	r3, r7, #12
 801167c:	2110      	movs	r1, #16
 801167e:	4618      	mov	r0, r3
 8011680:	f7ff fc84 	bl	8010f8c <rcvr_datablock>
 8011684:	4603      	mov	r3, r0
 8011686:	2b00      	cmp	r3, #0
 8011688:	f000 8087 	beq.w	801179a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 801168c:	4b4c      	ldr	r3, [pc, #304]	; (80117c0 <USER_SPI_ioctl+0x2dc>)
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	f003 0302 	and.w	r3, r3, #2
 8011694:	2b00      	cmp	r3, #0
 8011696:	d012      	beq.n	80116be <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8011698:	7dbb      	ldrb	r3, [r7, #22]
 801169a:	005b      	lsls	r3, r3, #1
 801169c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80116a0:	7dfa      	ldrb	r2, [r7, #23]
 80116a2:	09d2      	lsrs	r2, r2, #7
 80116a4:	b2d2      	uxtb	r2, r2
 80116a6:	4413      	add	r3, r2
 80116a8:	1c5a      	adds	r2, r3, #1
 80116aa:	7e7b      	ldrb	r3, [r7, #25]
 80116ac:	099b      	lsrs	r3, r3, #6
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	3b01      	subs	r3, #1
 80116b2:	fa02 f303 	lsl.w	r3, r2, r3
 80116b6:	461a      	mov	r2, r3
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	601a      	str	r2, [r3, #0]
 80116bc:	e013      	b.n	80116e6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80116be:	7dbb      	ldrb	r3, [r7, #22]
 80116c0:	109b      	asrs	r3, r3, #2
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	f003 031f 	and.w	r3, r3, #31
 80116c8:	3301      	adds	r3, #1
 80116ca:	7dfa      	ldrb	r2, [r7, #23]
 80116cc:	00d2      	lsls	r2, r2, #3
 80116ce:	f002 0218 	and.w	r2, r2, #24
 80116d2:	7df9      	ldrb	r1, [r7, #23]
 80116d4:	0949      	lsrs	r1, r1, #5
 80116d6:	b2c9      	uxtb	r1, r1
 80116d8:	440a      	add	r2, r1
 80116da:	3201      	adds	r2, #1
 80116dc:	fb02 f303 	mul.w	r3, r2, r3
 80116e0:	461a      	mov	r2, r3
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80116e6:	2300      	movs	r3, #0
 80116e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80116ec:	e055      	b.n	801179a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80116ee:	4b34      	ldr	r3, [pc, #208]	; (80117c0 <USER_SPI_ioctl+0x2dc>)
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	f003 0306 	and.w	r3, r3, #6
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d051      	beq.n	801179e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80116fa:	f107 020c 	add.w	r2, r7, #12
 80116fe:	79fb      	ldrb	r3, [r7, #7]
 8011700:	210b      	movs	r1, #11
 8011702:	4618      	mov	r0, r3
 8011704:	f7ff feee 	bl	80114e4 <USER_SPI_ioctl>
 8011708:	4603      	mov	r3, r0
 801170a:	2b00      	cmp	r3, #0
 801170c:	d149      	bne.n	80117a2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 801170e:	7b3b      	ldrb	r3, [r7, #12]
 8011710:	099b      	lsrs	r3, r3, #6
 8011712:	b2db      	uxtb	r3, r3
 8011714:	2b00      	cmp	r3, #0
 8011716:	d104      	bne.n	8011722 <USER_SPI_ioctl+0x23e>
 8011718:	7dbb      	ldrb	r3, [r7, #22]
 801171a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801171e:	2b00      	cmp	r3, #0
 8011720:	d041      	beq.n	80117a6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	623b      	str	r3, [r7, #32]
 8011726:	6a3b      	ldr	r3, [r7, #32]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	62bb      	str	r3, [r7, #40]	; 0x28
 801172c:	6a3b      	ldr	r3, [r7, #32]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8011732:	4b23      	ldr	r3, [pc, #140]	; (80117c0 <USER_SPI_ioctl+0x2dc>)
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	f003 0308 	and.w	r3, r3, #8
 801173a:	2b00      	cmp	r3, #0
 801173c:	d105      	bne.n	801174a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 801173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011740:	025b      	lsls	r3, r3, #9
 8011742:	62bb      	str	r3, [r7, #40]	; 0x28
 8011744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011746:	025b      	lsls	r3, r3, #9
 8011748:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 801174a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801174c:	2020      	movs	r0, #32
 801174e:	f7ff fc78 	bl	8011042 <send_cmd>
 8011752:	4603      	mov	r3, r0
 8011754:	2b00      	cmp	r3, #0
 8011756:	d128      	bne.n	80117aa <USER_SPI_ioctl+0x2c6>
 8011758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801175a:	2021      	movs	r0, #33	; 0x21
 801175c:	f7ff fc71 	bl	8011042 <send_cmd>
 8011760:	4603      	mov	r3, r0
 8011762:	2b00      	cmp	r3, #0
 8011764:	d121      	bne.n	80117aa <USER_SPI_ioctl+0x2c6>
 8011766:	2100      	movs	r1, #0
 8011768:	2026      	movs	r0, #38	; 0x26
 801176a:	f7ff fc6a 	bl	8011042 <send_cmd>
 801176e:	4603      	mov	r3, r0
 8011770:	2b00      	cmp	r3, #0
 8011772:	d11a      	bne.n	80117aa <USER_SPI_ioctl+0x2c6>
 8011774:	f247 5030 	movw	r0, #30000	; 0x7530
 8011778:	f7ff fbb9 	bl	8010eee <wait_ready>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d013      	beq.n	80117aa <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8011782:	2300      	movs	r3, #0
 8011784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8011788:	e00f      	b.n	80117aa <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 801178a:	2304      	movs	r3, #4
 801178c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011790:	e00c      	b.n	80117ac <USER_SPI_ioctl+0x2c8>
		break;
 8011792:	bf00      	nop
 8011794:	e00a      	b.n	80117ac <USER_SPI_ioctl+0x2c8>
		break;
 8011796:	bf00      	nop
 8011798:	e008      	b.n	80117ac <USER_SPI_ioctl+0x2c8>
		break;
 801179a:	bf00      	nop
 801179c:	e006      	b.n	80117ac <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 801179e:	bf00      	nop
 80117a0:	e004      	b.n	80117ac <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80117a2:	bf00      	nop
 80117a4:	e002      	b.n	80117ac <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80117a6:	bf00      	nop
 80117a8:	e000      	b.n	80117ac <USER_SPI_ioctl+0x2c8>
		break;
 80117aa:	bf00      	nop
	}

	despiselect();
 80117ac:	f7ff fbc2 	bl	8010f34 <despiselect>

	return res;
 80117b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3730      	adds	r7, #48	; 0x30
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	2000007c 	.word	0x2000007c
 80117c0:	20000838 	.word	0x20000838

080117c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	460b      	mov	r3, r1
 80117ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80117d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80117d4:	f008 fcc8 	bl	801a168 <USBD_static_malloc>
 80117d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d105      	bne.n	80117ec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80117e8:	2302      	movs	r3, #2
 80117ea:	e066      	b.n	80118ba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	68fa      	ldr	r2, [r7, #12]
 80117f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	7c1b      	ldrb	r3, [r3, #16]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d119      	bne.n	8011830 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80117fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011800:	2202      	movs	r2, #2
 8011802:	2181      	movs	r1, #129	; 0x81
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f008 fb8c 	bl	8019f22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2201      	movs	r2, #1
 801180e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011814:	2202      	movs	r2, #2
 8011816:	2101      	movs	r1, #1
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f008 fb82 	bl	8019f22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2201      	movs	r2, #1
 8011822:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2210      	movs	r2, #16
 801182a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801182e:	e016      	b.n	801185e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011830:	2340      	movs	r3, #64	; 0x40
 8011832:	2202      	movs	r2, #2
 8011834:	2181      	movs	r1, #129	; 0x81
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f008 fb73 	bl	8019f22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2201      	movs	r2, #1
 8011840:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011842:	2340      	movs	r3, #64	; 0x40
 8011844:	2202      	movs	r2, #2
 8011846:	2101      	movs	r1, #1
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f008 fb6a 	bl	8019f22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2201      	movs	r2, #1
 8011852:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2210      	movs	r2, #16
 801185a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801185e:	2308      	movs	r3, #8
 8011860:	2203      	movs	r2, #3
 8011862:	2182      	movs	r1, #130	; 0x82
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f008 fb5c 	bl	8019f22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2201      	movs	r2, #1
 801186e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	2200      	movs	r2, #0
 8011880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	2200      	movs	r2, #0
 8011888:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	7c1b      	ldrb	r3, [r3, #16]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d109      	bne.n	80118a8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801189a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801189e:	2101      	movs	r1, #1
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f008 fc2d 	bl	801a100 <USBD_LL_PrepareReceive>
 80118a6:	e007      	b.n	80118b8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80118ae:	2340      	movs	r3, #64	; 0x40
 80118b0:	2101      	movs	r1, #1
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f008 fc24 	bl	801a100 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80118b8:	2300      	movs	r3, #0
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3710      	adds	r7, #16
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}

080118c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80118c2:	b580      	push	{r7, lr}
 80118c4:	b082      	sub	sp, #8
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
 80118ca:	460b      	mov	r3, r1
 80118cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80118ce:	2181      	movs	r1, #129	; 0x81
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f008 fb4c 	bl	8019f6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2200      	movs	r2, #0
 80118da:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80118dc:	2101      	movs	r1, #1
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f008 fb45 	bl	8019f6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2200      	movs	r2, #0
 80118e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80118ec:	2182      	movs	r1, #130	; 0x82
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f008 fb3d 	bl	8019f6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2200      	movs	r2, #0
 80118f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2200      	movs	r2, #0
 8011900:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801190a:	2b00      	cmp	r3, #0
 801190c:	d00e      	beq.n	801192c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801191e:	4618      	mov	r0, r3
 8011920:	f008 fc30 	bl	801a184 <USBD_static_free>
    pdev->pClassData = NULL;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2200      	movs	r2, #0
 8011928:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801192c:	2300      	movs	r3, #0
}
 801192e:	4618      	mov	r0, r3
 8011930:	3708      	adds	r7, #8
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
	...

08011938 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b086      	sub	sp, #24
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011948:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801194a:	2300      	movs	r3, #0
 801194c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801194e:	2300      	movs	r3, #0
 8011950:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011952:	2300      	movs	r3, #0
 8011954:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d101      	bne.n	8011960 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801195c:	2303      	movs	r3, #3
 801195e:	e0af      	b.n	8011ac0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011968:	2b00      	cmp	r3, #0
 801196a:	d03f      	beq.n	80119ec <USBD_CDC_Setup+0xb4>
 801196c:	2b20      	cmp	r3, #32
 801196e:	f040 809f 	bne.w	8011ab0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	88db      	ldrh	r3, [r3, #6]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d02e      	beq.n	80119d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	b25b      	sxtb	r3, r3
 8011980:	2b00      	cmp	r3, #0
 8011982:	da16      	bge.n	80119b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801198a:	689b      	ldr	r3, [r3, #8]
 801198c:	683a      	ldr	r2, [r7, #0]
 801198e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011990:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011992:	683a      	ldr	r2, [r7, #0]
 8011994:	88d2      	ldrh	r2, [r2, #6]
 8011996:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	88db      	ldrh	r3, [r3, #6]
 801199c:	2b07      	cmp	r3, #7
 801199e:	bf28      	it	cs
 80119a0:	2307      	movcs	r3, #7
 80119a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	89fa      	ldrh	r2, [r7, #14]
 80119a8:	4619      	mov	r1, r3
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f001 fae9 	bl	8012f82 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80119b0:	e085      	b.n	8011abe <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	785a      	ldrb	r2, [r3, #1]
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	88db      	ldrh	r3, [r3, #6]
 80119c0:	b2da      	uxtb	r2, r3
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80119c8:	6939      	ldr	r1, [r7, #16]
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	88db      	ldrh	r3, [r3, #6]
 80119ce:	461a      	mov	r2, r3
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f001 fb02 	bl	8012fda <USBD_CtlPrepareRx>
      break;
 80119d6:	e072      	b.n	8011abe <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119de:	689b      	ldr	r3, [r3, #8]
 80119e0:	683a      	ldr	r2, [r7, #0]
 80119e2:	7850      	ldrb	r0, [r2, #1]
 80119e4:	2200      	movs	r2, #0
 80119e6:	6839      	ldr	r1, [r7, #0]
 80119e8:	4798      	blx	r3
      break;
 80119ea:	e068      	b.n	8011abe <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	785b      	ldrb	r3, [r3, #1]
 80119f0:	2b0b      	cmp	r3, #11
 80119f2:	d852      	bhi.n	8011a9a <USBD_CDC_Setup+0x162>
 80119f4:	a201      	add	r2, pc, #4	; (adr r2, 80119fc <USBD_CDC_Setup+0xc4>)
 80119f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119fa:	bf00      	nop
 80119fc:	08011a2d 	.word	0x08011a2d
 8011a00:	08011aa9 	.word	0x08011aa9
 8011a04:	08011a9b 	.word	0x08011a9b
 8011a08:	08011a9b 	.word	0x08011a9b
 8011a0c:	08011a9b 	.word	0x08011a9b
 8011a10:	08011a9b 	.word	0x08011a9b
 8011a14:	08011a9b 	.word	0x08011a9b
 8011a18:	08011a9b 	.word	0x08011a9b
 8011a1c:	08011a9b 	.word	0x08011a9b
 8011a20:	08011a9b 	.word	0x08011a9b
 8011a24:	08011a57 	.word	0x08011a57
 8011a28:	08011a81 	.word	0x08011a81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b03      	cmp	r3, #3
 8011a36:	d107      	bne.n	8011a48 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011a38:	f107 030a 	add.w	r3, r7, #10
 8011a3c:	2202      	movs	r2, #2
 8011a3e:	4619      	mov	r1, r3
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f001 fa9e 	bl	8012f82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011a46:	e032      	b.n	8011aae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011a48:	6839      	ldr	r1, [r7, #0]
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f001 fa28 	bl	8012ea0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011a50:	2303      	movs	r3, #3
 8011a52:	75fb      	strb	r3, [r7, #23]
          break;
 8011a54:	e02b      	b.n	8011aae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	2b03      	cmp	r3, #3
 8011a60:	d107      	bne.n	8011a72 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011a62:	f107 030d 	add.w	r3, r7, #13
 8011a66:	2201      	movs	r2, #1
 8011a68:	4619      	mov	r1, r3
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f001 fa89 	bl	8012f82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011a70:	e01d      	b.n	8011aae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011a72:	6839      	ldr	r1, [r7, #0]
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f001 fa13 	bl	8012ea0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011a7a:	2303      	movs	r3, #3
 8011a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8011a7e:	e016      	b.n	8011aae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	2b03      	cmp	r3, #3
 8011a8a:	d00f      	beq.n	8011aac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011a8c:	6839      	ldr	r1, [r7, #0]
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f001 fa06 	bl	8012ea0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011a94:	2303      	movs	r3, #3
 8011a96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011a98:	e008      	b.n	8011aac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011a9a:	6839      	ldr	r1, [r7, #0]
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f001 f9ff 	bl	8012ea0 <USBD_CtlError>
          ret = USBD_FAIL;
 8011aa2:	2303      	movs	r3, #3
 8011aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8011aa6:	e002      	b.n	8011aae <USBD_CDC_Setup+0x176>
          break;
 8011aa8:	bf00      	nop
 8011aaa:	e008      	b.n	8011abe <USBD_CDC_Setup+0x186>
          break;
 8011aac:	bf00      	nop
      }
      break;
 8011aae:	e006      	b.n	8011abe <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011ab0:	6839      	ldr	r1, [r7, #0]
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f001 f9f4 	bl	8012ea0 <USBD_CtlError>
      ret = USBD_FAIL;
 8011ab8:	2303      	movs	r3, #3
 8011aba:	75fb      	strb	r3, [r7, #23]
      break;
 8011abc:	bf00      	nop
  }

  return (uint8_t)ret;
 8011abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3718      	adds	r7, #24
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011ada:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d101      	bne.n	8011aea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011ae6:	2303      	movs	r3, #3
 8011ae8:	e04f      	b.n	8011b8a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011af0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011af2:	78fa      	ldrb	r2, [r7, #3]
 8011af4:	6879      	ldr	r1, [r7, #4]
 8011af6:	4613      	mov	r3, r2
 8011af8:	009b      	lsls	r3, r3, #2
 8011afa:	4413      	add	r3, r2
 8011afc:	009b      	lsls	r3, r3, #2
 8011afe:	440b      	add	r3, r1
 8011b00:	3318      	adds	r3, #24
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d029      	beq.n	8011b5c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011b08:	78fa      	ldrb	r2, [r7, #3]
 8011b0a:	6879      	ldr	r1, [r7, #4]
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4413      	add	r3, r2
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	440b      	add	r3, r1
 8011b16:	3318      	adds	r3, #24
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	78f9      	ldrb	r1, [r7, #3]
 8011b1c:	68f8      	ldr	r0, [r7, #12]
 8011b1e:	460b      	mov	r3, r1
 8011b20:	00db      	lsls	r3, r3, #3
 8011b22:	1a5b      	subs	r3, r3, r1
 8011b24:	009b      	lsls	r3, r3, #2
 8011b26:	4403      	add	r3, r0
 8011b28:	3344      	adds	r3, #68	; 0x44
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011b30:	fb03 f301 	mul.w	r3, r3, r1
 8011b34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d110      	bne.n	8011b5c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011b3a:	78fa      	ldrb	r2, [r7, #3]
 8011b3c:	6879      	ldr	r1, [r7, #4]
 8011b3e:	4613      	mov	r3, r2
 8011b40:	009b      	lsls	r3, r3, #2
 8011b42:	4413      	add	r3, r2
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	440b      	add	r3, r1
 8011b48:	3318      	adds	r3, #24
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011b4e:	78f9      	ldrb	r1, [r7, #3]
 8011b50:	2300      	movs	r3, #0
 8011b52:	2200      	movs	r2, #0
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f008 fab2 	bl	801a0be <USBD_LL_Transmit>
 8011b5a:	e015      	b.n	8011b88 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b6a:	691b      	ldr	r3, [r3, #16]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d00b      	beq.n	8011b88 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b76:	691b      	ldr	r3, [r3, #16]
 8011b78:	68ba      	ldr	r2, [r7, #8]
 8011b7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011b7e:	68ba      	ldr	r2, [r7, #8]
 8011b80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011b84:	78fa      	ldrb	r2, [r7, #3]
 8011b86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011b88:	2300      	movs	r3, #0
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3710      	adds	r7, #16
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}

08011b92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011b92:	b580      	push	{r7, lr}
 8011b94:	b084      	sub	sp, #16
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	6078      	str	r0, [r7, #4]
 8011b9a:	460b      	mov	r3, r1
 8011b9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ba4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d101      	bne.n	8011bb4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011bb0:	2303      	movs	r3, #3
 8011bb2:	e015      	b.n	8011be0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011bb4:	78fb      	ldrb	r3, [r7, #3]
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f008 fac2 	bl	801a142 <USBD_LL_GetRxDataSize>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	68fa      	ldr	r2, [r7, #12]
 8011bd0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011bda:	4611      	mov	r1, r2
 8011bdc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011bde:	2300      	movs	r3, #0
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3710      	adds	r7, #16
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bf6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d101      	bne.n	8011c02 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011bfe:	2303      	movs	r3, #3
 8011c00:	e01b      	b.n	8011c3a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d015      	beq.n	8011c38 <USBD_CDC_EP0_RxReady+0x50>
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011c12:	2bff      	cmp	r3, #255	; 0xff
 8011c14:	d010      	beq.n	8011c38 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c1c:	689b      	ldr	r3, [r3, #8]
 8011c1e:	68fa      	ldr	r2, [r7, #12]
 8011c20:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011c24:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011c26:	68fa      	ldr	r2, [r7, #12]
 8011c28:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011c2c:	b292      	uxth	r2, r2
 8011c2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	22ff      	movs	r2, #255	; 0xff
 8011c34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011c38:	2300      	movs	r3, #0
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3710      	adds	r7, #16
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
	...

08011c44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2243      	movs	r2, #67	; 0x43
 8011c50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011c52:	4b03      	ldr	r3, [pc, #12]	; (8011c60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	370c      	adds	r7, #12
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr
 8011c60:	20000108 	.word	0x20000108

08011c64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2243      	movs	r2, #67	; 0x43
 8011c70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011c72:	4b03      	ldr	r3, [pc, #12]	; (8011c80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	370c      	adds	r7, #12
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr
 8011c80:	200000c4 	.word	0x200000c4

08011c84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011c84:	b480      	push	{r7}
 8011c86:	b083      	sub	sp, #12
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2243      	movs	r2, #67	; 0x43
 8011c90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011c92:	4b03      	ldr	r3, [pc, #12]	; (8011ca0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	370c      	adds	r7, #12
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr
 8011ca0:	2000014c 	.word	0x2000014c

08011ca4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b083      	sub	sp, #12
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	220a      	movs	r2, #10
 8011cb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011cb2:	4b03      	ldr	r3, [pc, #12]	; (8011cc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	370c      	adds	r7, #12
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr
 8011cc0:	20000080 	.word	0x20000080

08011cc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d101      	bne.n	8011cd8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011cd4:	2303      	movs	r3, #3
 8011cd6:	e004      	b.n	8011ce2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	683a      	ldr	r2, [r7, #0]
 8011cdc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011ce0:	2300      	movs	r3, #0
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	370c      	adds	r7, #12
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr

08011cee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011cee:	b480      	push	{r7}
 8011cf0:	b087      	sub	sp, #28
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	60f8      	str	r0, [r7, #12]
 8011cf6:	60b9      	str	r1, [r7, #8]
 8011cf8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d00:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d101      	bne.n	8011d0c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011d08:	2303      	movs	r3, #3
 8011d0a:	e008      	b.n	8011d1e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	68ba      	ldr	r2, [r7, #8]
 8011d10:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	687a      	ldr	r2, [r7, #4]
 8011d18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011d1c:	2300      	movs	r3, #0
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	371c      	adds	r7, #28
 8011d22:	46bd      	mov	sp, r7
 8011d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d28:	4770      	bx	lr

08011d2a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011d2a:	b480      	push	{r7}
 8011d2c:	b085      	sub	sp, #20
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
 8011d32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d101      	bne.n	8011d46 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011d42:	2303      	movs	r3, #3
 8011d44:	e004      	b.n	8011d50 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	683a      	ldr	r2, [r7, #0]
 8011d4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011d4e:	2300      	movs	r3, #0
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3714      	adds	r7, #20
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr

08011d5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b084      	sub	sp, #16
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d101      	bne.n	8011d7a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011d76:	2303      	movs	r3, #3
 8011d78:	e016      	b.n	8011da8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	7c1b      	ldrb	r3, [r3, #16]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d109      	bne.n	8011d96 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d8c:	2101      	movs	r1, #1
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f008 f9b6 	bl	801a100 <USBD_LL_PrepareReceive>
 8011d94:	e007      	b.n	8011da6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011d9c:	2340      	movs	r3, #64	; 0x40
 8011d9e:	2101      	movs	r1, #1
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f008 f9ad 	bl	801a100 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011da6:	2300      	movs	r3, #0
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3710      	adds	r7, #16
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b086      	sub	sp, #24
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	4613      	mov	r3, r2
 8011dbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d101      	bne.n	8011dc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011dc4:	2303      	movs	r3, #3
 8011dc6:	e01f      	b.n	8011e08 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d003      	beq.n	8011dee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	68ba      	ldr	r2, [r7, #8]
 8011dea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	2201      	movs	r2, #1
 8011df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	79fa      	ldrb	r2, [r7, #7]
 8011dfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011dfc:	68f8      	ldr	r0, [r7, #12]
 8011dfe:	f008 f829 	bl	8019e54 <USBD_LL_Init>
 8011e02:	4603      	mov	r3, r0
 8011e04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3718      	adds	r7, #24
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d101      	bne.n	8011e28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011e24:	2303      	movs	r3, #3
 8011e26:	e016      	b.n	8011e56 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	683a      	ldr	r2, [r7, #0]
 8011e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00b      	beq.n	8011e54 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e44:	f107 020e 	add.w	r2, r7, #14
 8011e48:	4610      	mov	r0, r2
 8011e4a:	4798      	blx	r3
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011e54:	2300      	movs	r3, #0
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b082      	sub	sp, #8
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f008 f840 	bl	8019eec <USBD_LL_Start>
 8011e6c:	4603      	mov	r3, r0
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3708      	adds	r7, #8
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011e76:	b480      	push	{r7}
 8011e78:	b083      	sub	sp, #12
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011e7e:	2300      	movs	r3, #0
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	370c      	adds	r7, #12
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr

08011e8c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	460b      	mov	r3, r1
 8011e96:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011e98:	2303      	movs	r3, #3
 8011e9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d009      	beq.n	8011eba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	78fa      	ldrb	r2, [r7, #3]
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	4798      	blx	r3
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3710      	adds	r7, #16
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	460b      	mov	r3, r1
 8011ece:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d007      	beq.n	8011eea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	78fa      	ldrb	r2, [r7, #3]
 8011ee4:	4611      	mov	r1, r2
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	4798      	blx	r3
  }

  return USBD_OK;
 8011eea:	2300      	movs	r3, #0
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3708      	adds	r7, #8
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f04:	6839      	ldr	r1, [r7, #0]
 8011f06:	4618      	mov	r0, r3
 8011f08:	f000 ff90 	bl	8012e2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2201      	movs	r2, #1
 8011f10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011f28:	f003 031f 	and.w	r3, r3, #31
 8011f2c:	2b02      	cmp	r3, #2
 8011f2e:	d01a      	beq.n	8011f66 <USBD_LL_SetupStage+0x72>
 8011f30:	2b02      	cmp	r3, #2
 8011f32:	d822      	bhi.n	8011f7a <USBD_LL_SetupStage+0x86>
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d002      	beq.n	8011f3e <USBD_LL_SetupStage+0x4a>
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d00a      	beq.n	8011f52 <USBD_LL_SetupStage+0x5e>
 8011f3c:	e01d      	b.n	8011f7a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f44:	4619      	mov	r1, r3
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f000 fa62 	bl	8012410 <USBD_StdDevReq>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8011f50:	e020      	b.n	8011f94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f58:	4619      	mov	r1, r3
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 fac6 	bl	80124ec <USBD_StdItfReq>
 8011f60:	4603      	mov	r3, r0
 8011f62:	73fb      	strb	r3, [r7, #15]
      break;
 8011f64:	e016      	b.n	8011f94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 fb05 	bl	801257e <USBD_StdEPReq>
 8011f74:	4603      	mov	r3, r0
 8011f76:	73fb      	strb	r3, [r7, #15]
      break;
 8011f78:	e00c      	b.n	8011f94 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011f80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	4619      	mov	r1, r3
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f008 f80f 	bl	8019fac <USBD_LL_StallEP>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	73fb      	strb	r3, [r7, #15]
      break;
 8011f92:	bf00      	nop
  }

  return ret;
 8011f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3710      	adds	r7, #16
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}

08011f9e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011f9e:	b580      	push	{r7, lr}
 8011fa0:	b086      	sub	sp, #24
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	60f8      	str	r0, [r7, #12]
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	607a      	str	r2, [r7, #4]
 8011faa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011fac:	7afb      	ldrb	r3, [r7, #11]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d138      	bne.n	8012024 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011fb8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011fc0:	2b03      	cmp	r3, #3
 8011fc2:	d14a      	bne.n	801205a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	689a      	ldr	r2, [r3, #8]
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d913      	bls.n	8011ff8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	689a      	ldr	r2, [r3, #8]
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	1ad2      	subs	r2, r2, r3
 8011fda:	693b      	ldr	r3, [r7, #16]
 8011fdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	68da      	ldr	r2, [r3, #12]
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	689b      	ldr	r3, [r3, #8]
 8011fe6:	4293      	cmp	r3, r2
 8011fe8:	bf28      	it	cs
 8011fea:	4613      	movcs	r3, r2
 8011fec:	461a      	mov	r2, r3
 8011fee:	6879      	ldr	r1, [r7, #4]
 8011ff0:	68f8      	ldr	r0, [r7, #12]
 8011ff2:	f001 f80f 	bl	8013014 <USBD_CtlContinueRx>
 8011ff6:	e030      	b.n	801205a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	2b03      	cmp	r3, #3
 8012002:	d10b      	bne.n	801201c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d005      	beq.n	801201c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012016:	691b      	ldr	r3, [r3, #16]
 8012018:	68f8      	ldr	r0, [r7, #12]
 801201a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	f001 f80a 	bl	8013036 <USBD_CtlSendStatus>
 8012022:	e01a      	b.n	801205a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801202a:	b2db      	uxtb	r3, r3
 801202c:	2b03      	cmp	r3, #3
 801202e:	d114      	bne.n	801205a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012036:	699b      	ldr	r3, [r3, #24]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d00e      	beq.n	801205a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012042:	699b      	ldr	r3, [r3, #24]
 8012044:	7afa      	ldrb	r2, [r7, #11]
 8012046:	4611      	mov	r1, r2
 8012048:	68f8      	ldr	r0, [r7, #12]
 801204a:	4798      	blx	r3
 801204c:	4603      	mov	r3, r0
 801204e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012050:	7dfb      	ldrb	r3, [r7, #23]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d001      	beq.n	801205a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8012056:	7dfb      	ldrb	r3, [r7, #23]
 8012058:	e000      	b.n	801205c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801205a:	2300      	movs	r3, #0
}
 801205c:	4618      	mov	r0, r3
 801205e:	3718      	adds	r7, #24
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b086      	sub	sp, #24
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	460b      	mov	r3, r1
 801206e:	607a      	str	r2, [r7, #4]
 8012070:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012072:	7afb      	ldrb	r3, [r7, #11]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d16b      	bne.n	8012150 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	3314      	adds	r3, #20
 801207c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012084:	2b02      	cmp	r3, #2
 8012086:	d156      	bne.n	8012136 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	689a      	ldr	r2, [r3, #8]
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	429a      	cmp	r2, r3
 8012092:	d914      	bls.n	80120be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	689a      	ldr	r2, [r3, #8]
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	1ad2      	subs	r2, r2, r3
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	689b      	ldr	r3, [r3, #8]
 80120a6:	461a      	mov	r2, r3
 80120a8:	6879      	ldr	r1, [r7, #4]
 80120aa:	68f8      	ldr	r0, [r7, #12]
 80120ac:	f000 ff84 	bl	8012fb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80120b0:	2300      	movs	r3, #0
 80120b2:	2200      	movs	r2, #0
 80120b4:	2100      	movs	r1, #0
 80120b6:	68f8      	ldr	r0, [r7, #12]
 80120b8:	f008 f822 	bl	801a100 <USBD_LL_PrepareReceive>
 80120bc:	e03b      	b.n	8012136 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	68da      	ldr	r2, [r3, #12]
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	689b      	ldr	r3, [r3, #8]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d11c      	bne.n	8012104 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	685a      	ldr	r2, [r3, #4]
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d316      	bcc.n	8012104 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	685a      	ldr	r2, [r3, #4]
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d20f      	bcs.n	8012104 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80120e4:	2200      	movs	r2, #0
 80120e6:	2100      	movs	r1, #0
 80120e8:	68f8      	ldr	r0, [r7, #12]
 80120ea:	f000 ff65 	bl	8012fb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2200      	movs	r2, #0
 80120f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80120f6:	2300      	movs	r3, #0
 80120f8:	2200      	movs	r2, #0
 80120fa:	2100      	movs	r1, #0
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	f007 ffff 	bl	801a100 <USBD_LL_PrepareReceive>
 8012102:	e018      	b.n	8012136 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801210a:	b2db      	uxtb	r3, r3
 801210c:	2b03      	cmp	r3, #3
 801210e:	d10b      	bne.n	8012128 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d005      	beq.n	8012128 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012122:	68db      	ldr	r3, [r3, #12]
 8012124:	68f8      	ldr	r0, [r7, #12]
 8012126:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012128:	2180      	movs	r1, #128	; 0x80
 801212a:	68f8      	ldr	r0, [r7, #12]
 801212c:	f007 ff3e 	bl	8019fac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	f000 ff93 	bl	801305c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801213c:	2b01      	cmp	r3, #1
 801213e:	d122      	bne.n	8012186 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012140:	68f8      	ldr	r0, [r7, #12]
 8012142:	f7ff fe98 	bl	8011e76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2200      	movs	r2, #0
 801214a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801214e:	e01a      	b.n	8012186 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012156:	b2db      	uxtb	r3, r3
 8012158:	2b03      	cmp	r3, #3
 801215a:	d114      	bne.n	8012186 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012162:	695b      	ldr	r3, [r3, #20]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d00e      	beq.n	8012186 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801216e:	695b      	ldr	r3, [r3, #20]
 8012170:	7afa      	ldrb	r2, [r7, #11]
 8012172:	4611      	mov	r1, r2
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	4798      	blx	r3
 8012178:	4603      	mov	r3, r0
 801217a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801217c:	7dfb      	ldrb	r3, [r7, #23]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d001      	beq.n	8012186 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012182:	7dfb      	ldrb	r3, [r7, #23]
 8012184:	e000      	b.n	8012188 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012186:	2300      	movs	r3, #0
}
 8012188:	4618      	mov	r0, r3
 801218a:	3718      	adds	r7, #24
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2201      	movs	r2, #1
 801219c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2200      	movs	r2, #0
 80121a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2200      	movs	r2, #0
 80121ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2200      	movs	r2, #0
 80121b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d101      	bne.n	80121c4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80121c0:	2303      	movs	r3, #3
 80121c2:	e02f      	b.n	8012224 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00f      	beq.n	80121ee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d009      	beq.n	80121ee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121e0:	685b      	ldr	r3, [r3, #4]
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	6852      	ldr	r2, [r2, #4]
 80121e6:	b2d2      	uxtb	r2, r2
 80121e8:	4611      	mov	r1, r2
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80121ee:	2340      	movs	r3, #64	; 0x40
 80121f0:	2200      	movs	r2, #0
 80121f2:	2100      	movs	r1, #0
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f007 fe94 	bl	8019f22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2201      	movs	r2, #1
 80121fe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2240      	movs	r2, #64	; 0x40
 8012206:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801220a:	2340      	movs	r3, #64	; 0x40
 801220c:	2200      	movs	r2, #0
 801220e:	2180      	movs	r1, #128	; 0x80
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f007 fe86 	bl	8019f22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2201      	movs	r2, #1
 801221a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2240      	movs	r2, #64	; 0x40
 8012220:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8012222:	2300      	movs	r3, #0
}
 8012224:	4618      	mov	r0, r3
 8012226:	3708      	adds	r7, #8
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	460b      	mov	r3, r1
 8012236:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	78fa      	ldrb	r2, [r7, #3]
 801223c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801223e:	2300      	movs	r3, #0
}
 8012240:	4618      	mov	r0, r3
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801225a:	b2da      	uxtb	r2, r3
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2204      	movs	r2, #4
 8012266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801226a:	2300      	movs	r3, #0
}
 801226c:	4618      	mov	r0, r3
 801226e:	370c      	adds	r7, #12
 8012270:	46bd      	mov	sp, r7
 8012272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012276:	4770      	bx	lr

08012278 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012278:	b480      	push	{r7}
 801227a:	b083      	sub	sp, #12
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012286:	b2db      	uxtb	r3, r3
 8012288:	2b04      	cmp	r3, #4
 801228a:	d106      	bne.n	801229a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012292:	b2da      	uxtb	r2, r3
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801229a:	2300      	movs	r3, #0
}
 801229c:	4618      	mov	r0, r3
 801229e:	370c      	adds	r7, #12
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr

080122a8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d101      	bne.n	80122be <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80122ba:	2303      	movs	r3, #3
 80122bc:	e012      	b.n	80122e4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	2b03      	cmp	r3, #3
 80122c8:	d10b      	bne.n	80122e2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122d0:	69db      	ldr	r3, [r3, #28]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d005      	beq.n	80122e2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122dc:	69db      	ldr	r3, [r3, #28]
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80122e2:	2300      	movs	r3, #0
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	460b      	mov	r3, r1
 80122f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d101      	bne.n	8012306 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012302:	2303      	movs	r3, #3
 8012304:	e014      	b.n	8012330 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801230c:	b2db      	uxtb	r3, r3
 801230e:	2b03      	cmp	r3, #3
 8012310:	d10d      	bne.n	801232e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012318:	6a1b      	ldr	r3, [r3, #32]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d007      	beq.n	801232e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012324:	6a1b      	ldr	r3, [r3, #32]
 8012326:	78fa      	ldrb	r2, [r7, #3]
 8012328:	4611      	mov	r1, r2
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801232e:	2300      	movs	r3, #0
}
 8012330:	4618      	mov	r0, r3
 8012332:	3708      	adds	r7, #8
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	460b      	mov	r3, r1
 8012342:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801234a:	2b00      	cmp	r3, #0
 801234c:	d101      	bne.n	8012352 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801234e:	2303      	movs	r3, #3
 8012350:	e014      	b.n	801237c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012358:	b2db      	uxtb	r3, r3
 801235a:	2b03      	cmp	r3, #3
 801235c:	d10d      	bne.n	801237a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012366:	2b00      	cmp	r3, #0
 8012368:	d007      	beq.n	801237a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012372:	78fa      	ldrb	r2, [r7, #3]
 8012374:	4611      	mov	r1, r2
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801237a:	2300      	movs	r3, #0
}
 801237c:	4618      	mov	r0, r3
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012384:	b480      	push	{r7}
 8012386:	b083      	sub	sp, #12
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801238c:	2300      	movs	r3, #0
}
 801238e:	4618      	mov	r0, r3
 8012390:	370c      	adds	r7, #12
 8012392:	46bd      	mov	sp, r7
 8012394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012398:	4770      	bx	lr

0801239a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801239a:	b580      	push	{r7, lr}
 801239c:	b082      	sub	sp, #8
 801239e:	af00      	add	r7, sp, #0
 80123a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2201      	movs	r2, #1
 80123a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d009      	beq.n	80123c8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	6852      	ldr	r2, [r2, #4]
 80123c0:	b2d2      	uxtb	r2, r2
 80123c2:	4611      	mov	r1, r2
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	4798      	blx	r3
  }

  return USBD_OK;
 80123c8:	2300      	movs	r3, #0
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3708      	adds	r7, #8
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}

080123d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80123d2:	b480      	push	{r7}
 80123d4:	b087      	sub	sp, #28
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	3301      	adds	r3, #1
 80123e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80123f0:	8a3b      	ldrh	r3, [r7, #16]
 80123f2:	021b      	lsls	r3, r3, #8
 80123f4:	b21a      	sxth	r2, r3
 80123f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80123fa:	4313      	orrs	r3, r2
 80123fc:	b21b      	sxth	r3, r3
 80123fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012400:	89fb      	ldrh	r3, [r7, #14]
}
 8012402:	4618      	mov	r0, r3
 8012404:	371c      	adds	r7, #28
 8012406:	46bd      	mov	sp, r7
 8012408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240c:	4770      	bx	lr
	...

08012410 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801241a:	2300      	movs	r3, #0
 801241c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012426:	2b40      	cmp	r3, #64	; 0x40
 8012428:	d005      	beq.n	8012436 <USBD_StdDevReq+0x26>
 801242a:	2b40      	cmp	r3, #64	; 0x40
 801242c:	d853      	bhi.n	80124d6 <USBD_StdDevReq+0xc6>
 801242e:	2b00      	cmp	r3, #0
 8012430:	d00b      	beq.n	801244a <USBD_StdDevReq+0x3a>
 8012432:	2b20      	cmp	r3, #32
 8012434:	d14f      	bne.n	80124d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801243c:	689b      	ldr	r3, [r3, #8]
 801243e:	6839      	ldr	r1, [r7, #0]
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	4798      	blx	r3
 8012444:	4603      	mov	r3, r0
 8012446:	73fb      	strb	r3, [r7, #15]
      break;
 8012448:	e04a      	b.n	80124e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	785b      	ldrb	r3, [r3, #1]
 801244e:	2b09      	cmp	r3, #9
 8012450:	d83b      	bhi.n	80124ca <USBD_StdDevReq+0xba>
 8012452:	a201      	add	r2, pc, #4	; (adr r2, 8012458 <USBD_StdDevReq+0x48>)
 8012454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012458:	080124ad 	.word	0x080124ad
 801245c:	080124c1 	.word	0x080124c1
 8012460:	080124cb 	.word	0x080124cb
 8012464:	080124b7 	.word	0x080124b7
 8012468:	080124cb 	.word	0x080124cb
 801246c:	0801248b 	.word	0x0801248b
 8012470:	08012481 	.word	0x08012481
 8012474:	080124cb 	.word	0x080124cb
 8012478:	080124a3 	.word	0x080124a3
 801247c:	08012495 	.word	0x08012495
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012480:	6839      	ldr	r1, [r7, #0]
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 f9de 	bl	8012844 <USBD_GetDescriptor>
          break;
 8012488:	e024      	b.n	80124d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801248a:	6839      	ldr	r1, [r7, #0]
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 fb43 	bl	8012b18 <USBD_SetAddress>
          break;
 8012492:	e01f      	b.n	80124d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012494:	6839      	ldr	r1, [r7, #0]
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f000 fb82 	bl	8012ba0 <USBD_SetConfig>
 801249c:	4603      	mov	r3, r0
 801249e:	73fb      	strb	r3, [r7, #15]
          break;
 80124a0:	e018      	b.n	80124d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80124a2:	6839      	ldr	r1, [r7, #0]
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 fc21 	bl	8012cec <USBD_GetConfig>
          break;
 80124aa:	e013      	b.n	80124d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80124ac:	6839      	ldr	r1, [r7, #0]
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 fc52 	bl	8012d58 <USBD_GetStatus>
          break;
 80124b4:	e00e      	b.n	80124d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80124b6:	6839      	ldr	r1, [r7, #0]
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f000 fc81 	bl	8012dc0 <USBD_SetFeature>
          break;
 80124be:	e009      	b.n	80124d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80124c0:	6839      	ldr	r1, [r7, #0]
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 fc90 	bl	8012de8 <USBD_ClrFeature>
          break;
 80124c8:	e004      	b.n	80124d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80124ca:	6839      	ldr	r1, [r7, #0]
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f000 fce7 	bl	8012ea0 <USBD_CtlError>
          break;
 80124d2:	bf00      	nop
      }
      break;
 80124d4:	e004      	b.n	80124e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80124d6:	6839      	ldr	r1, [r7, #0]
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f000 fce1 	bl	8012ea0 <USBD_CtlError>
      break;
 80124de:	bf00      	nop
  }

  return ret;
 80124e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3710      	adds	r7, #16
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop

080124ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80124f6:	2300      	movs	r3, #0
 80124f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012502:	2b40      	cmp	r3, #64	; 0x40
 8012504:	d005      	beq.n	8012512 <USBD_StdItfReq+0x26>
 8012506:	2b40      	cmp	r3, #64	; 0x40
 8012508:	d82f      	bhi.n	801256a <USBD_StdItfReq+0x7e>
 801250a:	2b00      	cmp	r3, #0
 801250c:	d001      	beq.n	8012512 <USBD_StdItfReq+0x26>
 801250e:	2b20      	cmp	r3, #32
 8012510:	d12b      	bne.n	801256a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012518:	b2db      	uxtb	r3, r3
 801251a:	3b01      	subs	r3, #1
 801251c:	2b02      	cmp	r3, #2
 801251e:	d81d      	bhi.n	801255c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	889b      	ldrh	r3, [r3, #4]
 8012524:	b2db      	uxtb	r3, r3
 8012526:	2b01      	cmp	r3, #1
 8012528:	d813      	bhi.n	8012552 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012530:	689b      	ldr	r3, [r3, #8]
 8012532:	6839      	ldr	r1, [r7, #0]
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	4798      	blx	r3
 8012538:	4603      	mov	r3, r0
 801253a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	88db      	ldrh	r3, [r3, #6]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d110      	bne.n	8012566 <USBD_StdItfReq+0x7a>
 8012544:	7bfb      	ldrb	r3, [r7, #15]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d10d      	bne.n	8012566 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f000 fd73 	bl	8013036 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012550:	e009      	b.n	8012566 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8012552:	6839      	ldr	r1, [r7, #0]
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f000 fca3 	bl	8012ea0 <USBD_CtlError>
          break;
 801255a:	e004      	b.n	8012566 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801255c:	6839      	ldr	r1, [r7, #0]
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f000 fc9e 	bl	8012ea0 <USBD_CtlError>
          break;
 8012564:	e000      	b.n	8012568 <USBD_StdItfReq+0x7c>
          break;
 8012566:	bf00      	nop
      }
      break;
 8012568:	e004      	b.n	8012574 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801256a:	6839      	ldr	r1, [r7, #0]
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f000 fc97 	bl	8012ea0 <USBD_CtlError>
      break;
 8012572:	bf00      	nop
  }

  return ret;
 8012574:	7bfb      	ldrb	r3, [r7, #15]
}
 8012576:	4618      	mov	r0, r3
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801257e:	b580      	push	{r7, lr}
 8012580:	b084      	sub	sp, #16
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
 8012586:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012588:	2300      	movs	r3, #0
 801258a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	889b      	ldrh	r3, [r3, #4]
 8012590:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801259a:	2b40      	cmp	r3, #64	; 0x40
 801259c:	d007      	beq.n	80125ae <USBD_StdEPReq+0x30>
 801259e:	2b40      	cmp	r3, #64	; 0x40
 80125a0:	f200 8145 	bhi.w	801282e <USBD_StdEPReq+0x2b0>
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00c      	beq.n	80125c2 <USBD_StdEPReq+0x44>
 80125a8:	2b20      	cmp	r3, #32
 80125aa:	f040 8140 	bne.w	801282e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125b4:	689b      	ldr	r3, [r3, #8]
 80125b6:	6839      	ldr	r1, [r7, #0]
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	4798      	blx	r3
 80125bc:	4603      	mov	r3, r0
 80125be:	73fb      	strb	r3, [r7, #15]
      break;
 80125c0:	e13a      	b.n	8012838 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	785b      	ldrb	r3, [r3, #1]
 80125c6:	2b03      	cmp	r3, #3
 80125c8:	d007      	beq.n	80125da <USBD_StdEPReq+0x5c>
 80125ca:	2b03      	cmp	r3, #3
 80125cc:	f300 8129 	bgt.w	8012822 <USBD_StdEPReq+0x2a4>
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d07f      	beq.n	80126d4 <USBD_StdEPReq+0x156>
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	d03c      	beq.n	8012652 <USBD_StdEPReq+0xd4>
 80125d8:	e123      	b.n	8012822 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125e0:	b2db      	uxtb	r3, r3
 80125e2:	2b02      	cmp	r3, #2
 80125e4:	d002      	beq.n	80125ec <USBD_StdEPReq+0x6e>
 80125e6:	2b03      	cmp	r3, #3
 80125e8:	d016      	beq.n	8012618 <USBD_StdEPReq+0x9a>
 80125ea:	e02c      	b.n	8012646 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80125ec:	7bbb      	ldrb	r3, [r7, #14]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00d      	beq.n	801260e <USBD_StdEPReq+0x90>
 80125f2:	7bbb      	ldrb	r3, [r7, #14]
 80125f4:	2b80      	cmp	r3, #128	; 0x80
 80125f6:	d00a      	beq.n	801260e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80125f8:	7bbb      	ldrb	r3, [r7, #14]
 80125fa:	4619      	mov	r1, r3
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f007 fcd5 	bl	8019fac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012602:	2180      	movs	r1, #128	; 0x80
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f007 fcd1 	bl	8019fac <USBD_LL_StallEP>
 801260a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801260c:	e020      	b.n	8012650 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801260e:	6839      	ldr	r1, [r7, #0]
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f000 fc45 	bl	8012ea0 <USBD_CtlError>
              break;
 8012616:	e01b      	b.n	8012650 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	885b      	ldrh	r3, [r3, #2]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d10e      	bne.n	801263e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012620:	7bbb      	ldrb	r3, [r7, #14]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d00b      	beq.n	801263e <USBD_StdEPReq+0xc0>
 8012626:	7bbb      	ldrb	r3, [r7, #14]
 8012628:	2b80      	cmp	r3, #128	; 0x80
 801262a:	d008      	beq.n	801263e <USBD_StdEPReq+0xc0>
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	88db      	ldrh	r3, [r3, #6]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d104      	bne.n	801263e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012634:	7bbb      	ldrb	r3, [r7, #14]
 8012636:	4619      	mov	r1, r3
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f007 fcb7 	bl	8019fac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f000 fcf9 	bl	8013036 <USBD_CtlSendStatus>

              break;
 8012644:	e004      	b.n	8012650 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8012646:	6839      	ldr	r1, [r7, #0]
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f000 fc29 	bl	8012ea0 <USBD_CtlError>
              break;
 801264e:	bf00      	nop
          }
          break;
 8012650:	e0ec      	b.n	801282c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012658:	b2db      	uxtb	r3, r3
 801265a:	2b02      	cmp	r3, #2
 801265c:	d002      	beq.n	8012664 <USBD_StdEPReq+0xe6>
 801265e:	2b03      	cmp	r3, #3
 8012660:	d016      	beq.n	8012690 <USBD_StdEPReq+0x112>
 8012662:	e030      	b.n	80126c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012664:	7bbb      	ldrb	r3, [r7, #14]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d00d      	beq.n	8012686 <USBD_StdEPReq+0x108>
 801266a:	7bbb      	ldrb	r3, [r7, #14]
 801266c:	2b80      	cmp	r3, #128	; 0x80
 801266e:	d00a      	beq.n	8012686 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012670:	7bbb      	ldrb	r3, [r7, #14]
 8012672:	4619      	mov	r1, r3
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f007 fc99 	bl	8019fac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801267a:	2180      	movs	r1, #128	; 0x80
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f007 fc95 	bl	8019fac <USBD_LL_StallEP>
 8012682:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012684:	e025      	b.n	80126d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8012686:	6839      	ldr	r1, [r7, #0]
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 fc09 	bl	8012ea0 <USBD_CtlError>
              break;
 801268e:	e020      	b.n	80126d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	885b      	ldrh	r3, [r3, #2]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d11b      	bne.n	80126d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012698:	7bbb      	ldrb	r3, [r7, #14]
 801269a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d004      	beq.n	80126ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80126a2:	7bbb      	ldrb	r3, [r7, #14]
 80126a4:	4619      	mov	r1, r3
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f007 fc9f 	bl	8019fea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 fcc2 	bl	8013036 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126b8:	689b      	ldr	r3, [r3, #8]
 80126ba:	6839      	ldr	r1, [r7, #0]
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	4798      	blx	r3
 80126c0:	4603      	mov	r3, r0
 80126c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80126c4:	e004      	b.n	80126d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80126c6:	6839      	ldr	r1, [r7, #0]
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f000 fbe9 	bl	8012ea0 <USBD_CtlError>
              break;
 80126ce:	e000      	b.n	80126d2 <USBD_StdEPReq+0x154>
              break;
 80126d0:	bf00      	nop
          }
          break;
 80126d2:	e0ab      	b.n	801282c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	2b02      	cmp	r3, #2
 80126de:	d002      	beq.n	80126e6 <USBD_StdEPReq+0x168>
 80126e0:	2b03      	cmp	r3, #3
 80126e2:	d032      	beq.n	801274a <USBD_StdEPReq+0x1cc>
 80126e4:	e097      	b.n	8012816 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80126e6:	7bbb      	ldrb	r3, [r7, #14]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d007      	beq.n	80126fc <USBD_StdEPReq+0x17e>
 80126ec:	7bbb      	ldrb	r3, [r7, #14]
 80126ee:	2b80      	cmp	r3, #128	; 0x80
 80126f0:	d004      	beq.n	80126fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80126f2:	6839      	ldr	r1, [r7, #0]
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f000 fbd3 	bl	8012ea0 <USBD_CtlError>
                break;
 80126fa:	e091      	b.n	8012820 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80126fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012700:	2b00      	cmp	r3, #0
 8012702:	da0b      	bge.n	801271c <USBD_StdEPReq+0x19e>
 8012704:	7bbb      	ldrb	r3, [r7, #14]
 8012706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801270a:	4613      	mov	r3, r2
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	4413      	add	r3, r2
 8012710:	009b      	lsls	r3, r3, #2
 8012712:	3310      	adds	r3, #16
 8012714:	687a      	ldr	r2, [r7, #4]
 8012716:	4413      	add	r3, r2
 8012718:	3304      	adds	r3, #4
 801271a:	e00b      	b.n	8012734 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801271c:	7bbb      	ldrb	r3, [r7, #14]
 801271e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012722:	4613      	mov	r3, r2
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4413      	add	r3, r2
 8012728:	009b      	lsls	r3, r3, #2
 801272a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801272e:	687a      	ldr	r2, [r7, #4]
 8012730:	4413      	add	r3, r2
 8012732:	3304      	adds	r3, #4
 8012734:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	2200      	movs	r2, #0
 801273a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	2202      	movs	r2, #2
 8012740:	4619      	mov	r1, r3
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f000 fc1d 	bl	8012f82 <USBD_CtlSendData>
              break;
 8012748:	e06a      	b.n	8012820 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801274a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801274e:	2b00      	cmp	r3, #0
 8012750:	da11      	bge.n	8012776 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012752:	7bbb      	ldrb	r3, [r7, #14]
 8012754:	f003 020f 	and.w	r2, r3, #15
 8012758:	6879      	ldr	r1, [r7, #4]
 801275a:	4613      	mov	r3, r2
 801275c:	009b      	lsls	r3, r3, #2
 801275e:	4413      	add	r3, r2
 8012760:	009b      	lsls	r3, r3, #2
 8012762:	440b      	add	r3, r1
 8012764:	3324      	adds	r3, #36	; 0x24
 8012766:	881b      	ldrh	r3, [r3, #0]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d117      	bne.n	801279c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801276c:	6839      	ldr	r1, [r7, #0]
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f000 fb96 	bl	8012ea0 <USBD_CtlError>
                  break;
 8012774:	e054      	b.n	8012820 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012776:	7bbb      	ldrb	r3, [r7, #14]
 8012778:	f003 020f 	and.w	r2, r3, #15
 801277c:	6879      	ldr	r1, [r7, #4]
 801277e:	4613      	mov	r3, r2
 8012780:	009b      	lsls	r3, r3, #2
 8012782:	4413      	add	r3, r2
 8012784:	009b      	lsls	r3, r3, #2
 8012786:	440b      	add	r3, r1
 8012788:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801278c:	881b      	ldrh	r3, [r3, #0]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d104      	bne.n	801279c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012792:	6839      	ldr	r1, [r7, #0]
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f000 fb83 	bl	8012ea0 <USBD_CtlError>
                  break;
 801279a:	e041      	b.n	8012820 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801279c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	da0b      	bge.n	80127bc <USBD_StdEPReq+0x23e>
 80127a4:	7bbb      	ldrb	r3, [r7, #14]
 80127a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80127aa:	4613      	mov	r3, r2
 80127ac:	009b      	lsls	r3, r3, #2
 80127ae:	4413      	add	r3, r2
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	3310      	adds	r3, #16
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	4413      	add	r3, r2
 80127b8:	3304      	adds	r3, #4
 80127ba:	e00b      	b.n	80127d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80127bc:	7bbb      	ldrb	r3, [r7, #14]
 80127be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80127c2:	4613      	mov	r3, r2
 80127c4:	009b      	lsls	r3, r3, #2
 80127c6:	4413      	add	r3, r2
 80127c8:	009b      	lsls	r3, r3, #2
 80127ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	4413      	add	r3, r2
 80127d2:	3304      	adds	r3, #4
 80127d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80127d6:	7bbb      	ldrb	r3, [r7, #14]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d002      	beq.n	80127e2 <USBD_StdEPReq+0x264>
 80127dc:	7bbb      	ldrb	r3, [r7, #14]
 80127de:	2b80      	cmp	r3, #128	; 0x80
 80127e0:	d103      	bne.n	80127ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	2200      	movs	r2, #0
 80127e6:	601a      	str	r2, [r3, #0]
 80127e8:	e00e      	b.n	8012808 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80127ea:	7bbb      	ldrb	r3, [r7, #14]
 80127ec:	4619      	mov	r1, r3
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f007 fc1a 	bl	801a028 <USBD_LL_IsStallEP>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d003      	beq.n	8012802 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	2201      	movs	r2, #1
 80127fe:	601a      	str	r2, [r3, #0]
 8012800:	e002      	b.n	8012808 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	2200      	movs	r2, #0
 8012806:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	2202      	movs	r2, #2
 801280c:	4619      	mov	r1, r3
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 fbb7 	bl	8012f82 <USBD_CtlSendData>
              break;
 8012814:	e004      	b.n	8012820 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8012816:	6839      	ldr	r1, [r7, #0]
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f000 fb41 	bl	8012ea0 <USBD_CtlError>
              break;
 801281e:	bf00      	nop
          }
          break;
 8012820:	e004      	b.n	801282c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012822:	6839      	ldr	r1, [r7, #0]
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f000 fb3b 	bl	8012ea0 <USBD_CtlError>
          break;
 801282a:	bf00      	nop
      }
      break;
 801282c:	e004      	b.n	8012838 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801282e:	6839      	ldr	r1, [r7, #0]
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 fb35 	bl	8012ea0 <USBD_CtlError>
      break;
 8012836:	bf00      	nop
  }

  return ret;
 8012838:	7bfb      	ldrb	r3, [r7, #15]
}
 801283a:	4618      	mov	r0, r3
 801283c:	3710      	adds	r7, #16
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
	...

08012844 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801284e:	2300      	movs	r3, #0
 8012850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012852:	2300      	movs	r3, #0
 8012854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012856:	2300      	movs	r3, #0
 8012858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	885b      	ldrh	r3, [r3, #2]
 801285e:	0a1b      	lsrs	r3, r3, #8
 8012860:	b29b      	uxth	r3, r3
 8012862:	3b01      	subs	r3, #1
 8012864:	2b06      	cmp	r3, #6
 8012866:	f200 8128 	bhi.w	8012aba <USBD_GetDescriptor+0x276>
 801286a:	a201      	add	r2, pc, #4	; (adr r2, 8012870 <USBD_GetDescriptor+0x2c>)
 801286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012870:	0801288d 	.word	0x0801288d
 8012874:	080128a5 	.word	0x080128a5
 8012878:	080128e5 	.word	0x080128e5
 801287c:	08012abb 	.word	0x08012abb
 8012880:	08012abb 	.word	0x08012abb
 8012884:	08012a5b 	.word	0x08012a5b
 8012888:	08012a87 	.word	0x08012a87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	7c12      	ldrb	r2, [r2, #16]
 8012898:	f107 0108 	add.w	r1, r7, #8
 801289c:	4610      	mov	r0, r2
 801289e:	4798      	blx	r3
 80128a0:	60f8      	str	r0, [r7, #12]
      break;
 80128a2:	e112      	b.n	8012aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	7c1b      	ldrb	r3, [r3, #16]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d10d      	bne.n	80128c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128b4:	f107 0208 	add.w	r2, r7, #8
 80128b8:	4610      	mov	r0, r2
 80128ba:	4798      	blx	r3
 80128bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	3301      	adds	r3, #1
 80128c2:	2202      	movs	r2, #2
 80128c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80128c6:	e100      	b.n	8012aca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128d0:	f107 0208 	add.w	r2, r7, #8
 80128d4:	4610      	mov	r0, r2
 80128d6:	4798      	blx	r3
 80128d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	3301      	adds	r3, #1
 80128de:	2202      	movs	r2, #2
 80128e0:	701a      	strb	r2, [r3, #0]
      break;
 80128e2:	e0f2      	b.n	8012aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	885b      	ldrh	r3, [r3, #2]
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	2b05      	cmp	r3, #5
 80128ec:	f200 80ac 	bhi.w	8012a48 <USBD_GetDescriptor+0x204>
 80128f0:	a201      	add	r2, pc, #4	; (adr r2, 80128f8 <USBD_GetDescriptor+0xb4>)
 80128f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128f6:	bf00      	nop
 80128f8:	08012911 	.word	0x08012911
 80128fc:	08012945 	.word	0x08012945
 8012900:	08012979 	.word	0x08012979
 8012904:	080129ad 	.word	0x080129ad
 8012908:	080129e1 	.word	0x080129e1
 801290c:	08012a15 	.word	0x08012a15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d00b      	beq.n	8012934 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	687a      	ldr	r2, [r7, #4]
 8012926:	7c12      	ldrb	r2, [r2, #16]
 8012928:	f107 0108 	add.w	r1, r7, #8
 801292c:	4610      	mov	r0, r2
 801292e:	4798      	blx	r3
 8012930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012932:	e091      	b.n	8012a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012934:	6839      	ldr	r1, [r7, #0]
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f000 fab2 	bl	8012ea0 <USBD_CtlError>
            err++;
 801293c:	7afb      	ldrb	r3, [r7, #11]
 801293e:	3301      	adds	r3, #1
 8012940:	72fb      	strb	r3, [r7, #11]
          break;
 8012942:	e089      	b.n	8012a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d00b      	beq.n	8012968 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012956:	689b      	ldr	r3, [r3, #8]
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	7c12      	ldrb	r2, [r2, #16]
 801295c:	f107 0108 	add.w	r1, r7, #8
 8012960:	4610      	mov	r0, r2
 8012962:	4798      	blx	r3
 8012964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012966:	e077      	b.n	8012a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012968:	6839      	ldr	r1, [r7, #0]
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f000 fa98 	bl	8012ea0 <USBD_CtlError>
            err++;
 8012970:	7afb      	ldrb	r3, [r7, #11]
 8012972:	3301      	adds	r3, #1
 8012974:	72fb      	strb	r3, [r7, #11]
          break;
 8012976:	e06f      	b.n	8012a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801297e:	68db      	ldr	r3, [r3, #12]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d00b      	beq.n	801299c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801298a:	68db      	ldr	r3, [r3, #12]
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	7c12      	ldrb	r2, [r2, #16]
 8012990:	f107 0108 	add.w	r1, r7, #8
 8012994:	4610      	mov	r0, r2
 8012996:	4798      	blx	r3
 8012998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801299a:	e05d      	b.n	8012a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801299c:	6839      	ldr	r1, [r7, #0]
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f000 fa7e 	bl	8012ea0 <USBD_CtlError>
            err++;
 80129a4:	7afb      	ldrb	r3, [r7, #11]
 80129a6:	3301      	adds	r3, #1
 80129a8:	72fb      	strb	r3, [r7, #11]
          break;
 80129aa:	e055      	b.n	8012a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129b2:	691b      	ldr	r3, [r3, #16]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d00b      	beq.n	80129d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129be:	691b      	ldr	r3, [r3, #16]
 80129c0:	687a      	ldr	r2, [r7, #4]
 80129c2:	7c12      	ldrb	r2, [r2, #16]
 80129c4:	f107 0108 	add.w	r1, r7, #8
 80129c8:	4610      	mov	r0, r2
 80129ca:	4798      	blx	r3
 80129cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80129ce:	e043      	b.n	8012a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80129d0:	6839      	ldr	r1, [r7, #0]
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f000 fa64 	bl	8012ea0 <USBD_CtlError>
            err++;
 80129d8:	7afb      	ldrb	r3, [r7, #11]
 80129da:	3301      	adds	r3, #1
 80129dc:	72fb      	strb	r3, [r7, #11]
          break;
 80129de:	e03b      	b.n	8012a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129e6:	695b      	ldr	r3, [r3, #20]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d00b      	beq.n	8012a04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129f2:	695b      	ldr	r3, [r3, #20]
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	7c12      	ldrb	r2, [r2, #16]
 80129f8:	f107 0108 	add.w	r1, r7, #8
 80129fc:	4610      	mov	r0, r2
 80129fe:	4798      	blx	r3
 8012a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a02:	e029      	b.n	8012a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012a04:	6839      	ldr	r1, [r7, #0]
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f000 fa4a 	bl	8012ea0 <USBD_CtlError>
            err++;
 8012a0c:	7afb      	ldrb	r3, [r7, #11]
 8012a0e:	3301      	adds	r3, #1
 8012a10:	72fb      	strb	r3, [r7, #11]
          break;
 8012a12:	e021      	b.n	8012a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a1a:	699b      	ldr	r3, [r3, #24]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d00b      	beq.n	8012a38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a26:	699b      	ldr	r3, [r3, #24]
 8012a28:	687a      	ldr	r2, [r7, #4]
 8012a2a:	7c12      	ldrb	r2, [r2, #16]
 8012a2c:	f107 0108 	add.w	r1, r7, #8
 8012a30:	4610      	mov	r0, r2
 8012a32:	4798      	blx	r3
 8012a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a36:	e00f      	b.n	8012a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012a38:	6839      	ldr	r1, [r7, #0]
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 fa30 	bl	8012ea0 <USBD_CtlError>
            err++;
 8012a40:	7afb      	ldrb	r3, [r7, #11]
 8012a42:	3301      	adds	r3, #1
 8012a44:	72fb      	strb	r3, [r7, #11]
          break;
 8012a46:	e007      	b.n	8012a58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012a48:	6839      	ldr	r1, [r7, #0]
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f000 fa28 	bl	8012ea0 <USBD_CtlError>
          err++;
 8012a50:	7afb      	ldrb	r3, [r7, #11]
 8012a52:	3301      	adds	r3, #1
 8012a54:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012a56:	bf00      	nop
      }
      break;
 8012a58:	e037      	b.n	8012aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	7c1b      	ldrb	r3, [r3, #16]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d109      	bne.n	8012a76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a6a:	f107 0208 	add.w	r2, r7, #8
 8012a6e:	4610      	mov	r0, r2
 8012a70:	4798      	blx	r3
 8012a72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012a74:	e029      	b.n	8012aca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012a76:	6839      	ldr	r1, [r7, #0]
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f000 fa11 	bl	8012ea0 <USBD_CtlError>
        err++;
 8012a7e:	7afb      	ldrb	r3, [r7, #11]
 8012a80:	3301      	adds	r3, #1
 8012a82:	72fb      	strb	r3, [r7, #11]
      break;
 8012a84:	e021      	b.n	8012aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	7c1b      	ldrb	r3, [r3, #16]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d10d      	bne.n	8012aaa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a96:	f107 0208 	add.w	r2, r7, #8
 8012a9a:	4610      	mov	r0, r2
 8012a9c:	4798      	blx	r3
 8012a9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	2207      	movs	r2, #7
 8012aa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012aa8:	e00f      	b.n	8012aca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012aaa:	6839      	ldr	r1, [r7, #0]
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f000 f9f7 	bl	8012ea0 <USBD_CtlError>
        err++;
 8012ab2:	7afb      	ldrb	r3, [r7, #11]
 8012ab4:	3301      	adds	r3, #1
 8012ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8012ab8:	e007      	b.n	8012aca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012aba:	6839      	ldr	r1, [r7, #0]
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f000 f9ef 	bl	8012ea0 <USBD_CtlError>
      err++;
 8012ac2:	7afb      	ldrb	r3, [r7, #11]
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8012ac8:	bf00      	nop
  }

  if (err != 0U)
 8012aca:	7afb      	ldrb	r3, [r7, #11]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d11e      	bne.n	8012b0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	88db      	ldrh	r3, [r3, #6]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d016      	beq.n	8012b06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012ad8:	893b      	ldrh	r3, [r7, #8]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d00e      	beq.n	8012afc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	88da      	ldrh	r2, [r3, #6]
 8012ae2:	893b      	ldrh	r3, [r7, #8]
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	bf28      	it	cs
 8012ae8:	4613      	movcs	r3, r2
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012aee:	893b      	ldrh	r3, [r7, #8]
 8012af0:	461a      	mov	r2, r3
 8012af2:	68f9      	ldr	r1, [r7, #12]
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f000 fa44 	bl	8012f82 <USBD_CtlSendData>
 8012afa:	e009      	b.n	8012b10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012afc:	6839      	ldr	r1, [r7, #0]
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f000 f9ce 	bl	8012ea0 <USBD_CtlError>
 8012b04:	e004      	b.n	8012b10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 fa95 	bl	8013036 <USBD_CtlSendStatus>
 8012b0c:	e000      	b.n	8012b10 <USBD_GetDescriptor+0x2cc>
    return;
 8012b0e:	bf00      	nop
  }
}
 8012b10:	3710      	adds	r7, #16
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
 8012b16:	bf00      	nop

08012b18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	889b      	ldrh	r3, [r3, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d131      	bne.n	8012b8e <USBD_SetAddress+0x76>
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	88db      	ldrh	r3, [r3, #6]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d12d      	bne.n	8012b8e <USBD_SetAddress+0x76>
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	885b      	ldrh	r3, [r3, #2]
 8012b36:	2b7f      	cmp	r3, #127	; 0x7f
 8012b38:	d829      	bhi.n	8012b8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	885b      	ldrh	r3, [r3, #2]
 8012b3e:	b2db      	uxtb	r3, r3
 8012b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	2b03      	cmp	r3, #3
 8012b50:	d104      	bne.n	8012b5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012b52:	6839      	ldr	r1, [r7, #0]
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f000 f9a3 	bl	8012ea0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b5a:	e01d      	b.n	8012b98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	7bfa      	ldrb	r2, [r7, #15]
 8012b60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012b64:	7bfb      	ldrb	r3, [r7, #15]
 8012b66:	4619      	mov	r1, r3
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f007 fa89 	bl	801a080 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f000 fa61 	bl	8013036 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012b74:	7bfb      	ldrb	r3, [r7, #15]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d004      	beq.n	8012b84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2202      	movs	r2, #2
 8012b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b82:	e009      	b.n	8012b98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2201      	movs	r2, #1
 8012b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b8c:	e004      	b.n	8012b98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012b8e:	6839      	ldr	r1, [r7, #0]
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f000 f985 	bl	8012ea0 <USBD_CtlError>
  }
}
 8012b96:	bf00      	nop
 8012b98:	bf00      	nop
 8012b9a:	3710      	adds	r7, #16
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b084      	sub	sp, #16
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012baa:	2300      	movs	r3, #0
 8012bac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	885b      	ldrh	r3, [r3, #2]
 8012bb2:	b2da      	uxtb	r2, r3
 8012bb4:	4b4c      	ldr	r3, [pc, #304]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012bb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012bb8:	4b4b      	ldr	r3, [pc, #300]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d905      	bls.n	8012bcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012bc0:	6839      	ldr	r1, [r7, #0]
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f000 f96c 	bl	8012ea0 <USBD_CtlError>
    return USBD_FAIL;
 8012bc8:	2303      	movs	r3, #3
 8012bca:	e088      	b.n	8012cde <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bd2:	b2db      	uxtb	r3, r3
 8012bd4:	2b02      	cmp	r3, #2
 8012bd6:	d002      	beq.n	8012bde <USBD_SetConfig+0x3e>
 8012bd8:	2b03      	cmp	r3, #3
 8012bda:	d025      	beq.n	8012c28 <USBD_SetConfig+0x88>
 8012bdc:	e071      	b.n	8012cc2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012bde:	4b42      	ldr	r3, [pc, #264]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d01c      	beq.n	8012c20 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012be6:	4b40      	ldr	r3, [pc, #256]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	461a      	mov	r2, r3
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012bf0:	4b3d      	ldr	r3, [pc, #244]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	4619      	mov	r1, r3
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f7ff f948 	bl	8011e8c <USBD_SetClassConfig>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012c00:	7bfb      	ldrb	r3, [r7, #15]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d004      	beq.n	8012c10 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012c06:	6839      	ldr	r1, [r7, #0]
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f000 f949 	bl	8012ea0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012c0e:	e065      	b.n	8012cdc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f000 fa10 	bl	8013036 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2203      	movs	r2, #3
 8012c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012c1e:	e05d      	b.n	8012cdc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f000 fa08 	bl	8013036 <USBD_CtlSendStatus>
      break;
 8012c26:	e059      	b.n	8012cdc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012c28:	4b2f      	ldr	r3, [pc, #188]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d112      	bne.n	8012c56 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2202      	movs	r2, #2
 8012c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012c38:	4b2b      	ldr	r3, [pc, #172]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	461a      	mov	r2, r3
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012c42:	4b29      	ldr	r3, [pc, #164]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	4619      	mov	r1, r3
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f7ff f93b 	bl	8011ec4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f000 f9f1 	bl	8013036 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012c54:	e042      	b.n	8012cdc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012c56:	4b24      	ldr	r3, [pc, #144]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	685b      	ldr	r3, [r3, #4]
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d02a      	beq.n	8012cba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	685b      	ldr	r3, [r3, #4]
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f7ff f929 	bl	8011ec4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012c72:	4b1d      	ldr	r3, [pc, #116]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	461a      	mov	r2, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012c7c:	4b1a      	ldr	r3, [pc, #104]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	4619      	mov	r1, r3
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f7ff f902 	bl	8011e8c <USBD_SetClassConfig>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012c8c:	7bfb      	ldrb	r3, [r7, #15]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d00f      	beq.n	8012cb2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012c92:	6839      	ldr	r1, [r7, #0]
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f000 f903 	bl	8012ea0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	b2db      	uxtb	r3, r3
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f7ff f90e 	bl	8011ec4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2202      	movs	r2, #2
 8012cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012cb0:	e014      	b.n	8012cdc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 f9bf 	bl	8013036 <USBD_CtlSendStatus>
      break;
 8012cb8:	e010      	b.n	8012cdc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f000 f9bb 	bl	8013036 <USBD_CtlSendStatus>
      break;
 8012cc0:	e00c      	b.n	8012cdc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012cc2:	6839      	ldr	r1, [r7, #0]
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f000 f8eb 	bl	8012ea0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012cca:	4b07      	ldr	r3, [pc, #28]	; (8012ce8 <USBD_SetConfig+0x148>)
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	4619      	mov	r1, r3
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7ff f8f7 	bl	8011ec4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012cd6:	2303      	movs	r3, #3
 8012cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8012cda:	bf00      	nop
  }

  return ret;
 8012cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	20000839 	.word	0x20000839

08012cec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	88db      	ldrh	r3, [r3, #6]
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d004      	beq.n	8012d08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012cfe:	6839      	ldr	r1, [r7, #0]
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f000 f8cd 	bl	8012ea0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012d06:	e023      	b.n	8012d50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	2b02      	cmp	r3, #2
 8012d12:	dc02      	bgt.n	8012d1a <USBD_GetConfig+0x2e>
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	dc03      	bgt.n	8012d20 <USBD_GetConfig+0x34>
 8012d18:	e015      	b.n	8012d46 <USBD_GetConfig+0x5a>
 8012d1a:	2b03      	cmp	r3, #3
 8012d1c:	d00b      	beq.n	8012d36 <USBD_GetConfig+0x4a>
 8012d1e:	e012      	b.n	8012d46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2200      	movs	r2, #0
 8012d24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	3308      	adds	r3, #8
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f000 f927 	bl	8012f82 <USBD_CtlSendData>
        break;
 8012d34:	e00c      	b.n	8012d50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	3304      	adds	r3, #4
 8012d3a:	2201      	movs	r2, #1
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f000 f91f 	bl	8012f82 <USBD_CtlSendData>
        break;
 8012d44:	e004      	b.n	8012d50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012d46:	6839      	ldr	r1, [r7, #0]
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f000 f8a9 	bl	8012ea0 <USBD_CtlError>
        break;
 8012d4e:	bf00      	nop
}
 8012d50:	bf00      	nop
 8012d52:	3708      	adds	r7, #8
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	3b01      	subs	r3, #1
 8012d6c:	2b02      	cmp	r3, #2
 8012d6e:	d81e      	bhi.n	8012dae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	88db      	ldrh	r3, [r3, #6]
 8012d74:	2b02      	cmp	r3, #2
 8012d76:	d004      	beq.n	8012d82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012d78:	6839      	ldr	r1, [r7, #0]
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f000 f890 	bl	8012ea0 <USBD_CtlError>
        break;
 8012d80:	e01a      	b.n	8012db8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2201      	movs	r2, #1
 8012d86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d005      	beq.n	8012d9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	68db      	ldr	r3, [r3, #12]
 8012d96:	f043 0202 	orr.w	r2, r3, #2
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	330c      	adds	r3, #12
 8012da2:	2202      	movs	r2, #2
 8012da4:	4619      	mov	r1, r3
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f000 f8eb 	bl	8012f82 <USBD_CtlSendData>
      break;
 8012dac:	e004      	b.n	8012db8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012dae:	6839      	ldr	r1, [r7, #0]
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f000 f875 	bl	8012ea0 <USBD_CtlError>
      break;
 8012db6:	bf00      	nop
  }
}
 8012db8:	bf00      	nop
 8012dba:	3708      	adds	r7, #8
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}

08012dc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	885b      	ldrh	r3, [r3, #2]
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d106      	bne.n	8012de0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2201      	movs	r2, #1
 8012dd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012dda:	6878      	ldr	r0, [r7, #4]
 8012ddc:	f000 f92b 	bl	8013036 <USBD_CtlSendStatus>
  }
}
 8012de0:	bf00      	nop
 8012de2:	3708      	adds	r7, #8
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}

08012de8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b082      	sub	sp, #8
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012df8:	b2db      	uxtb	r3, r3
 8012dfa:	3b01      	subs	r3, #1
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	d80b      	bhi.n	8012e18 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012e00:	683b      	ldr	r3, [r7, #0]
 8012e02:	885b      	ldrh	r3, [r3, #2]
 8012e04:	2b01      	cmp	r3, #1
 8012e06:	d10c      	bne.n	8012e22 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f000 f910 	bl	8013036 <USBD_CtlSendStatus>
      }
      break;
 8012e16:	e004      	b.n	8012e22 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012e18:	6839      	ldr	r1, [r7, #0]
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f000 f840 	bl	8012ea0 <USBD_CtlError>
      break;
 8012e20:	e000      	b.n	8012e24 <USBD_ClrFeature+0x3c>
      break;
 8012e22:	bf00      	nop
  }
}
 8012e24:	bf00      	nop
 8012e26:	3708      	adds	r7, #8
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	781a      	ldrb	r2, [r3, #0]
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	3301      	adds	r3, #1
 8012e46:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	781a      	ldrb	r2, [r3, #0]
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	3301      	adds	r3, #1
 8012e54:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012e56:	68f8      	ldr	r0, [r7, #12]
 8012e58:	f7ff fabb 	bl	80123d2 <SWAPBYTE>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	461a      	mov	r2, r3
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	3301      	adds	r3, #1
 8012e68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012e70:	68f8      	ldr	r0, [r7, #12]
 8012e72:	f7ff faae 	bl	80123d2 <SWAPBYTE>
 8012e76:	4603      	mov	r3, r0
 8012e78:	461a      	mov	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	3301      	adds	r3, #1
 8012e82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	3301      	adds	r3, #1
 8012e88:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012e8a:	68f8      	ldr	r0, [r7, #12]
 8012e8c:	f7ff faa1 	bl	80123d2 <SWAPBYTE>
 8012e90:	4603      	mov	r3, r0
 8012e92:	461a      	mov	r2, r3
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	80da      	strh	r2, [r3, #6]
}
 8012e98:	bf00      	nop
 8012e9a:	3710      	adds	r7, #16
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}

08012ea0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012eaa:	2180      	movs	r1, #128	; 0x80
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f007 f87d 	bl	8019fac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012eb2:	2100      	movs	r1, #0
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f007 f879 	bl	8019fac <USBD_LL_StallEP>
}
 8012eba:	bf00      	nop
 8012ebc:	3708      	adds	r7, #8
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b086      	sub	sp, #24
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	60f8      	str	r0, [r7, #12]
 8012eca:	60b9      	str	r1, [r7, #8]
 8012ecc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d036      	beq.n	8012f46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012edc:	6938      	ldr	r0, [r7, #16]
 8012ede:	f000 f836 	bl	8012f4e <USBD_GetLen>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	005b      	lsls	r3, r3, #1
 8012eea:	b29a      	uxth	r2, r3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012ef0:	7dfb      	ldrb	r3, [r7, #23]
 8012ef2:	68ba      	ldr	r2, [r7, #8]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	687a      	ldr	r2, [r7, #4]
 8012ef8:	7812      	ldrb	r2, [r2, #0]
 8012efa:	701a      	strb	r2, [r3, #0]
  idx++;
 8012efc:	7dfb      	ldrb	r3, [r7, #23]
 8012efe:	3301      	adds	r3, #1
 8012f00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012f02:	7dfb      	ldrb	r3, [r7, #23]
 8012f04:	68ba      	ldr	r2, [r7, #8]
 8012f06:	4413      	add	r3, r2
 8012f08:	2203      	movs	r2, #3
 8012f0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012f0c:	7dfb      	ldrb	r3, [r7, #23]
 8012f0e:	3301      	adds	r3, #1
 8012f10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012f12:	e013      	b.n	8012f3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012f14:	7dfb      	ldrb	r3, [r7, #23]
 8012f16:	68ba      	ldr	r2, [r7, #8]
 8012f18:	4413      	add	r3, r2
 8012f1a:	693a      	ldr	r2, [r7, #16]
 8012f1c:	7812      	ldrb	r2, [r2, #0]
 8012f1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	3301      	adds	r3, #1
 8012f24:	613b      	str	r3, [r7, #16]
    idx++;
 8012f26:	7dfb      	ldrb	r3, [r7, #23]
 8012f28:	3301      	adds	r3, #1
 8012f2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012f2c:	7dfb      	ldrb	r3, [r7, #23]
 8012f2e:	68ba      	ldr	r2, [r7, #8]
 8012f30:	4413      	add	r3, r2
 8012f32:	2200      	movs	r2, #0
 8012f34:	701a      	strb	r2, [r3, #0]
    idx++;
 8012f36:	7dfb      	ldrb	r3, [r7, #23]
 8012f38:	3301      	adds	r3, #1
 8012f3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	781b      	ldrb	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d1e7      	bne.n	8012f14 <USBD_GetString+0x52>
 8012f44:	e000      	b.n	8012f48 <USBD_GetString+0x86>
    return;
 8012f46:	bf00      	nop
  }
}
 8012f48:	3718      	adds	r7, #24
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd80      	pop	{r7, pc}

08012f4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012f4e:	b480      	push	{r7}
 8012f50:	b085      	sub	sp, #20
 8012f52:	af00      	add	r7, sp, #0
 8012f54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012f56:	2300      	movs	r3, #0
 8012f58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012f5e:	e005      	b.n	8012f6c <USBD_GetLen+0x1e>
  {
    len++;
 8012f60:	7bfb      	ldrb	r3, [r7, #15]
 8012f62:	3301      	adds	r3, #1
 8012f64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	3301      	adds	r3, #1
 8012f6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d1f5      	bne.n	8012f60 <USBD_GetLen+0x12>
  }

  return len;
 8012f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3714      	adds	r7, #20
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f80:	4770      	bx	lr

08012f82 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012f82:	b580      	push	{r7, lr}
 8012f84:	b084      	sub	sp, #16
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	60f8      	str	r0, [r7, #12]
 8012f8a:	60b9      	str	r1, [r7, #8]
 8012f8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2202      	movs	r2, #2
 8012f92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	68ba      	ldr	r2, [r7, #8]
 8012fa6:	2100      	movs	r1, #0
 8012fa8:	68f8      	ldr	r0, [r7, #12]
 8012faa:	f007 f888 	bl	801a0be <USBD_LL_Transmit>

  return USBD_OK;
 8012fae:	2300      	movs	r3, #0
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3710      	adds	r7, #16
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	60b9      	str	r1, [r7, #8]
 8012fc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	68ba      	ldr	r2, [r7, #8]
 8012fc8:	2100      	movs	r1, #0
 8012fca:	68f8      	ldr	r0, [r7, #12]
 8012fcc:	f007 f877 	bl	801a0be <USBD_LL_Transmit>

  return USBD_OK;
 8012fd0:	2300      	movs	r3, #0
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3710      	adds	r7, #16
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}

08012fda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012fda:	b580      	push	{r7, lr}
 8012fdc:	b084      	sub	sp, #16
 8012fde:	af00      	add	r7, sp, #0
 8012fe0:	60f8      	str	r0, [r7, #12]
 8012fe2:	60b9      	str	r1, [r7, #8]
 8012fe4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	2203      	movs	r2, #3
 8012fea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	687a      	ldr	r2, [r7, #4]
 8012ffa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	68ba      	ldr	r2, [r7, #8]
 8013002:	2100      	movs	r1, #0
 8013004:	68f8      	ldr	r0, [r7, #12]
 8013006:	f007 f87b 	bl	801a100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801300a:	2300      	movs	r3, #0
}
 801300c:	4618      	mov	r0, r3
 801300e:	3710      	adds	r7, #16
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}

08013014 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b084      	sub	sp, #16
 8013018:	af00      	add	r7, sp, #0
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	68ba      	ldr	r2, [r7, #8]
 8013024:	2100      	movs	r1, #0
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	f007 f86a 	bl	801a100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801302c:	2300      	movs	r3, #0
}
 801302e:	4618      	mov	r0, r3
 8013030:	3710      	adds	r7, #16
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}

08013036 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013036:	b580      	push	{r7, lr}
 8013038:	b082      	sub	sp, #8
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2204      	movs	r2, #4
 8013042:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013046:	2300      	movs	r3, #0
 8013048:	2200      	movs	r2, #0
 801304a:	2100      	movs	r1, #0
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f007 f836 	bl	801a0be <USBD_LL_Transmit>

  return USBD_OK;
 8013052:	2300      	movs	r3, #0
}
 8013054:	4618      	mov	r0, r3
 8013056:	3708      	adds	r7, #8
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b082      	sub	sp, #8
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2205      	movs	r2, #5
 8013068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801306c:	2300      	movs	r3, #0
 801306e:	2200      	movs	r2, #0
 8013070:	2100      	movs	r1, #0
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f007 f844 	bl	801a100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013078:	2300      	movs	r3, #0
}
 801307a:	4618      	mov	r0, r3
 801307c:	3708      	adds	r7, #8
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
	...

08013084 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	4603      	mov	r3, r0
 801308c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801308e:	79fb      	ldrb	r3, [r7, #7]
 8013090:	4a08      	ldr	r2, [pc, #32]	; (80130b4 <disk_status+0x30>)
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	4413      	add	r3, r2
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	79fa      	ldrb	r2, [r7, #7]
 801309c:	4905      	ldr	r1, [pc, #20]	; (80130b4 <disk_status+0x30>)
 801309e:	440a      	add	r2, r1
 80130a0:	7a12      	ldrb	r2, [r2, #8]
 80130a2:	4610      	mov	r0, r2
 80130a4:	4798      	blx	r3
 80130a6:	4603      	mov	r3, r0
 80130a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80130aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3710      	adds	r7, #16
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	20000864 	.word	0x20000864

080130b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b084      	sub	sp, #16
 80130bc:	af00      	add	r7, sp, #0
 80130be:	4603      	mov	r3, r0
 80130c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80130c2:	2300      	movs	r3, #0
 80130c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80130c6:	79fb      	ldrb	r3, [r7, #7]
 80130c8:	4a0d      	ldr	r2, [pc, #52]	; (8013100 <disk_initialize+0x48>)
 80130ca:	5cd3      	ldrb	r3, [r2, r3]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d111      	bne.n	80130f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80130d0:	79fb      	ldrb	r3, [r7, #7]
 80130d2:	4a0b      	ldr	r2, [pc, #44]	; (8013100 <disk_initialize+0x48>)
 80130d4:	2101      	movs	r1, #1
 80130d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80130d8:	79fb      	ldrb	r3, [r7, #7]
 80130da:	4a09      	ldr	r2, [pc, #36]	; (8013100 <disk_initialize+0x48>)
 80130dc:	009b      	lsls	r3, r3, #2
 80130de:	4413      	add	r3, r2
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	79fa      	ldrb	r2, [r7, #7]
 80130e6:	4906      	ldr	r1, [pc, #24]	; (8013100 <disk_initialize+0x48>)
 80130e8:	440a      	add	r2, r1
 80130ea:	7a12      	ldrb	r2, [r2, #8]
 80130ec:	4610      	mov	r0, r2
 80130ee:	4798      	blx	r3
 80130f0:	4603      	mov	r3, r0
 80130f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80130f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3710      	adds	r7, #16
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	20000864 	.word	0x20000864

08013104 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013104:	b590      	push	{r4, r7, lr}
 8013106:	b087      	sub	sp, #28
 8013108:	af00      	add	r7, sp, #0
 801310a:	60b9      	str	r1, [r7, #8]
 801310c:	607a      	str	r2, [r7, #4]
 801310e:	603b      	str	r3, [r7, #0]
 8013110:	4603      	mov	r3, r0
 8013112:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013114:	7bfb      	ldrb	r3, [r7, #15]
 8013116:	4a0a      	ldr	r2, [pc, #40]	; (8013140 <disk_read+0x3c>)
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	4413      	add	r3, r2
 801311c:	685b      	ldr	r3, [r3, #4]
 801311e:	689c      	ldr	r4, [r3, #8]
 8013120:	7bfb      	ldrb	r3, [r7, #15]
 8013122:	4a07      	ldr	r2, [pc, #28]	; (8013140 <disk_read+0x3c>)
 8013124:	4413      	add	r3, r2
 8013126:	7a18      	ldrb	r0, [r3, #8]
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	687a      	ldr	r2, [r7, #4]
 801312c:	68b9      	ldr	r1, [r7, #8]
 801312e:	47a0      	blx	r4
 8013130:	4603      	mov	r3, r0
 8013132:	75fb      	strb	r3, [r7, #23]
  return res;
 8013134:	7dfb      	ldrb	r3, [r7, #23]
}
 8013136:	4618      	mov	r0, r3
 8013138:	371c      	adds	r7, #28
 801313a:	46bd      	mov	sp, r7
 801313c:	bd90      	pop	{r4, r7, pc}
 801313e:	bf00      	nop
 8013140:	20000864 	.word	0x20000864

08013144 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013144:	b590      	push	{r4, r7, lr}
 8013146:	b087      	sub	sp, #28
 8013148:	af00      	add	r7, sp, #0
 801314a:	60b9      	str	r1, [r7, #8]
 801314c:	607a      	str	r2, [r7, #4]
 801314e:	603b      	str	r3, [r7, #0]
 8013150:	4603      	mov	r3, r0
 8013152:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013154:	7bfb      	ldrb	r3, [r7, #15]
 8013156:	4a0a      	ldr	r2, [pc, #40]	; (8013180 <disk_write+0x3c>)
 8013158:	009b      	lsls	r3, r3, #2
 801315a:	4413      	add	r3, r2
 801315c:	685b      	ldr	r3, [r3, #4]
 801315e:	68dc      	ldr	r4, [r3, #12]
 8013160:	7bfb      	ldrb	r3, [r7, #15]
 8013162:	4a07      	ldr	r2, [pc, #28]	; (8013180 <disk_write+0x3c>)
 8013164:	4413      	add	r3, r2
 8013166:	7a18      	ldrb	r0, [r3, #8]
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	687a      	ldr	r2, [r7, #4]
 801316c:	68b9      	ldr	r1, [r7, #8]
 801316e:	47a0      	blx	r4
 8013170:	4603      	mov	r3, r0
 8013172:	75fb      	strb	r3, [r7, #23]
  return res;
 8013174:	7dfb      	ldrb	r3, [r7, #23]
}
 8013176:	4618      	mov	r0, r3
 8013178:	371c      	adds	r7, #28
 801317a:	46bd      	mov	sp, r7
 801317c:	bd90      	pop	{r4, r7, pc}
 801317e:	bf00      	nop
 8013180:	20000864 	.word	0x20000864

08013184 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b084      	sub	sp, #16
 8013188:	af00      	add	r7, sp, #0
 801318a:	4603      	mov	r3, r0
 801318c:	603a      	str	r2, [r7, #0]
 801318e:	71fb      	strb	r3, [r7, #7]
 8013190:	460b      	mov	r3, r1
 8013192:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013194:	79fb      	ldrb	r3, [r7, #7]
 8013196:	4a09      	ldr	r2, [pc, #36]	; (80131bc <disk_ioctl+0x38>)
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	4413      	add	r3, r2
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	691b      	ldr	r3, [r3, #16]
 80131a0:	79fa      	ldrb	r2, [r7, #7]
 80131a2:	4906      	ldr	r1, [pc, #24]	; (80131bc <disk_ioctl+0x38>)
 80131a4:	440a      	add	r2, r1
 80131a6:	7a10      	ldrb	r0, [r2, #8]
 80131a8:	79b9      	ldrb	r1, [r7, #6]
 80131aa:	683a      	ldr	r2, [r7, #0]
 80131ac:	4798      	blx	r3
 80131ae:	4603      	mov	r3, r0
 80131b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80131b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3710      	adds	r7, #16
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	20000864 	.word	0x20000864

080131c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80131c0:	b480      	push	{r7}
 80131c2:	b085      	sub	sp, #20
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	3301      	adds	r3, #1
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80131d0:	89fb      	ldrh	r3, [r7, #14]
 80131d2:	021b      	lsls	r3, r3, #8
 80131d4:	b21a      	sxth	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	b21b      	sxth	r3, r3
 80131dc:	4313      	orrs	r3, r2
 80131de:	b21b      	sxth	r3, r3
 80131e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80131e2:	89fb      	ldrh	r3, [r7, #14]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3714      	adds	r7, #20
 80131e8:	46bd      	mov	sp, r7
 80131ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ee:	4770      	bx	lr

080131f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80131f0:	b480      	push	{r7}
 80131f2:	b085      	sub	sp, #20
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	3303      	adds	r3, #3
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	021b      	lsls	r3, r3, #8
 8013204:	687a      	ldr	r2, [r7, #4]
 8013206:	3202      	adds	r2, #2
 8013208:	7812      	ldrb	r2, [r2, #0]
 801320a:	4313      	orrs	r3, r2
 801320c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	021b      	lsls	r3, r3, #8
 8013212:	687a      	ldr	r2, [r7, #4]
 8013214:	3201      	adds	r2, #1
 8013216:	7812      	ldrb	r2, [r2, #0]
 8013218:	4313      	orrs	r3, r2
 801321a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	021b      	lsls	r3, r3, #8
 8013220:	687a      	ldr	r2, [r7, #4]
 8013222:	7812      	ldrb	r2, [r2, #0]
 8013224:	4313      	orrs	r3, r2
 8013226:	60fb      	str	r3, [r7, #12]
	return rv;
 8013228:	68fb      	ldr	r3, [r7, #12]
}
 801322a:	4618      	mov	r0, r3
 801322c:	3714      	adds	r7, #20
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr

08013236 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013236:	b480      	push	{r7}
 8013238:	b083      	sub	sp, #12
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
 801323e:	460b      	mov	r3, r1
 8013240:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	1c5a      	adds	r2, r3, #1
 8013246:	607a      	str	r2, [r7, #4]
 8013248:	887a      	ldrh	r2, [r7, #2]
 801324a:	b2d2      	uxtb	r2, r2
 801324c:	701a      	strb	r2, [r3, #0]
 801324e:	887b      	ldrh	r3, [r7, #2]
 8013250:	0a1b      	lsrs	r3, r3, #8
 8013252:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	1c5a      	adds	r2, r3, #1
 8013258:	607a      	str	r2, [r7, #4]
 801325a:	887a      	ldrh	r2, [r7, #2]
 801325c:	b2d2      	uxtb	r2, r2
 801325e:	701a      	strb	r2, [r3, #0]
}
 8013260:	bf00      	nop
 8013262:	370c      	adds	r7, #12
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr

0801326c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801326c:	b480      	push	{r7}
 801326e:	b083      	sub	sp, #12
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	1c5a      	adds	r2, r3, #1
 801327a:	607a      	str	r2, [r7, #4]
 801327c:	683a      	ldr	r2, [r7, #0]
 801327e:	b2d2      	uxtb	r2, r2
 8013280:	701a      	strb	r2, [r3, #0]
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	0a1b      	lsrs	r3, r3, #8
 8013286:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	1c5a      	adds	r2, r3, #1
 801328c:	607a      	str	r2, [r7, #4]
 801328e:	683a      	ldr	r2, [r7, #0]
 8013290:	b2d2      	uxtb	r2, r2
 8013292:	701a      	strb	r2, [r3, #0]
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	0a1b      	lsrs	r3, r3, #8
 8013298:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	1c5a      	adds	r2, r3, #1
 801329e:	607a      	str	r2, [r7, #4]
 80132a0:	683a      	ldr	r2, [r7, #0]
 80132a2:	b2d2      	uxtb	r2, r2
 80132a4:	701a      	strb	r2, [r3, #0]
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	0a1b      	lsrs	r3, r3, #8
 80132aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	1c5a      	adds	r2, r3, #1
 80132b0:	607a      	str	r2, [r7, #4]
 80132b2:	683a      	ldr	r2, [r7, #0]
 80132b4:	b2d2      	uxtb	r2, r2
 80132b6:	701a      	strb	r2, [r3, #0]
}
 80132b8:	bf00      	nop
 80132ba:	370c      	adds	r7, #12
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr

080132c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80132c4:	b480      	push	{r7}
 80132c6:	b087      	sub	sp, #28
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d00d      	beq.n	80132fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80132de:	693a      	ldr	r2, [r7, #16]
 80132e0:	1c53      	adds	r3, r2, #1
 80132e2:	613b      	str	r3, [r7, #16]
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	1c59      	adds	r1, r3, #1
 80132e8:	6179      	str	r1, [r7, #20]
 80132ea:	7812      	ldrb	r2, [r2, #0]
 80132ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	3b01      	subs	r3, #1
 80132f2:	607b      	str	r3, [r7, #4]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d1f1      	bne.n	80132de <mem_cpy+0x1a>
	}
}
 80132fa:	bf00      	nop
 80132fc:	371c      	adds	r7, #28
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr

08013306 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013306:	b480      	push	{r7}
 8013308:	b087      	sub	sp, #28
 801330a:	af00      	add	r7, sp, #0
 801330c:	60f8      	str	r0, [r7, #12]
 801330e:	60b9      	str	r1, [r7, #8]
 8013310:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	1c5a      	adds	r2, r3, #1
 801331a:	617a      	str	r2, [r7, #20]
 801331c:	68ba      	ldr	r2, [r7, #8]
 801331e:	b2d2      	uxtb	r2, r2
 8013320:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	3b01      	subs	r3, #1
 8013326:	607b      	str	r3, [r7, #4]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d1f3      	bne.n	8013316 <mem_set+0x10>
}
 801332e:	bf00      	nop
 8013330:	bf00      	nop
 8013332:	371c      	adds	r7, #28
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr

0801333c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801333c:	b480      	push	{r7}
 801333e:	b089      	sub	sp, #36	; 0x24
 8013340:	af00      	add	r7, sp, #0
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	60b9      	str	r1, [r7, #8]
 8013346:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	61fb      	str	r3, [r7, #28]
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013350:	2300      	movs	r3, #0
 8013352:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	1c5a      	adds	r2, r3, #1
 8013358:	61fa      	str	r2, [r7, #28]
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	4619      	mov	r1, r3
 801335e:	69bb      	ldr	r3, [r7, #24]
 8013360:	1c5a      	adds	r2, r3, #1
 8013362:	61ba      	str	r2, [r7, #24]
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	1acb      	subs	r3, r1, r3
 8013368:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	3b01      	subs	r3, #1
 801336e:	607b      	str	r3, [r7, #4]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d002      	beq.n	801337c <mem_cmp+0x40>
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d0eb      	beq.n	8013354 <mem_cmp+0x18>

	return r;
 801337c:	697b      	ldr	r3, [r7, #20]
}
 801337e:	4618      	mov	r0, r3
 8013380:	3724      	adds	r7, #36	; 0x24
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr

0801338a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801338a:	b480      	push	{r7}
 801338c:	b083      	sub	sp, #12
 801338e:	af00      	add	r7, sp, #0
 8013390:	6078      	str	r0, [r7, #4]
 8013392:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8013394:	e002      	b.n	801339c <chk_chr+0x12>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	3301      	adds	r3, #1
 801339a:	607b      	str	r3, [r7, #4]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d005      	beq.n	80133b0 <chk_chr+0x26>
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	461a      	mov	r2, r3
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	4293      	cmp	r3, r2
 80133ae:	d1f2      	bne.n	8013396 <chk_chr+0xc>
	return *str;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	781b      	ldrb	r3, [r3, #0]
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d009      	beq.n	80133e2 <lock_fs+0x22>
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	68db      	ldr	r3, [r3, #12]
 80133d2:	4618      	mov	r0, r3
 80133d4:	f002 fcde 	bl	8015d94 <ff_req_grant>
 80133d8:	4603      	mov	r3, r0
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d001      	beq.n	80133e2 <lock_fs+0x22>
 80133de:	2301      	movs	r3, #1
 80133e0:	e000      	b.n	80133e4 <lock_fs+0x24>
 80133e2:	2300      	movs	r3, #0
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3708      	adds	r7, #8
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b082      	sub	sp, #8
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	460b      	mov	r3, r1
 80133f6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d00d      	beq.n	801341a <unlock_fs+0x2e>
 80133fe:	78fb      	ldrb	r3, [r7, #3]
 8013400:	2b0c      	cmp	r3, #12
 8013402:	d00a      	beq.n	801341a <unlock_fs+0x2e>
 8013404:	78fb      	ldrb	r3, [r7, #3]
 8013406:	2b0b      	cmp	r3, #11
 8013408:	d007      	beq.n	801341a <unlock_fs+0x2e>
 801340a:	78fb      	ldrb	r3, [r7, #3]
 801340c:	2b0f      	cmp	r3, #15
 801340e:	d004      	beq.n	801341a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	4618      	mov	r0, r3
 8013416:	f002 fcd2 	bl	8015dbe <ff_rel_grant>
	}
}
 801341a:	bf00      	nop
 801341c:	3708      	adds	r7, #8
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
	...

08013424 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013424:	b480      	push	{r7}
 8013426:	b085      	sub	sp, #20
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801342e:	2300      	movs	r3, #0
 8013430:	60bb      	str	r3, [r7, #8]
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	60fb      	str	r3, [r7, #12]
 8013436:	e029      	b.n	801348c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013438:	4a27      	ldr	r2, [pc, #156]	; (80134d8 <chk_lock+0xb4>)
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	011b      	lsls	r3, r3, #4
 801343e:	4413      	add	r3, r2
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d01d      	beq.n	8013482 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013446:	4a24      	ldr	r2, [pc, #144]	; (80134d8 <chk_lock+0xb4>)
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	011b      	lsls	r3, r3, #4
 801344c:	4413      	add	r3, r2
 801344e:	681a      	ldr	r2, [r3, #0]
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	429a      	cmp	r2, r3
 8013456:	d116      	bne.n	8013486 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013458:	4a1f      	ldr	r2, [pc, #124]	; (80134d8 <chk_lock+0xb4>)
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	011b      	lsls	r3, r3, #4
 801345e:	4413      	add	r3, r2
 8013460:	3304      	adds	r3, #4
 8013462:	681a      	ldr	r2, [r3, #0]
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013468:	429a      	cmp	r2, r3
 801346a:	d10c      	bne.n	8013486 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801346c:	4a1a      	ldr	r2, [pc, #104]	; (80134d8 <chk_lock+0xb4>)
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	011b      	lsls	r3, r3, #4
 8013472:	4413      	add	r3, r2
 8013474:	3308      	adds	r3, #8
 8013476:	681a      	ldr	r2, [r3, #0]
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801347c:	429a      	cmp	r2, r3
 801347e:	d102      	bne.n	8013486 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013480:	e007      	b.n	8013492 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013482:	2301      	movs	r3, #1
 8013484:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	3301      	adds	r3, #1
 801348a:	60fb      	str	r3, [r7, #12]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2b01      	cmp	r3, #1
 8013490:	d9d2      	bls.n	8013438 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2b02      	cmp	r3, #2
 8013496:	d109      	bne.n	80134ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d102      	bne.n	80134a4 <chk_lock+0x80>
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	2b02      	cmp	r3, #2
 80134a2:	d101      	bne.n	80134a8 <chk_lock+0x84>
 80134a4:	2300      	movs	r3, #0
 80134a6:	e010      	b.n	80134ca <chk_lock+0xa6>
 80134a8:	2312      	movs	r3, #18
 80134aa:	e00e      	b.n	80134ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d108      	bne.n	80134c4 <chk_lock+0xa0>
 80134b2:	4a09      	ldr	r2, [pc, #36]	; (80134d8 <chk_lock+0xb4>)
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	011b      	lsls	r3, r3, #4
 80134b8:	4413      	add	r3, r2
 80134ba:	330c      	adds	r3, #12
 80134bc:	881b      	ldrh	r3, [r3, #0]
 80134be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134c2:	d101      	bne.n	80134c8 <chk_lock+0xa4>
 80134c4:	2310      	movs	r3, #16
 80134c6:	e000      	b.n	80134ca <chk_lock+0xa6>
 80134c8:	2300      	movs	r3, #0
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3714      	adds	r7, #20
 80134ce:	46bd      	mov	sp, r7
 80134d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop
 80134d8:	20000844 	.word	0x20000844

080134dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80134dc:	b480      	push	{r7}
 80134de:	b083      	sub	sp, #12
 80134e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80134e2:	2300      	movs	r3, #0
 80134e4:	607b      	str	r3, [r7, #4]
 80134e6:	e002      	b.n	80134ee <enq_lock+0x12>
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	3301      	adds	r3, #1
 80134ec:	607b      	str	r3, [r7, #4]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2b01      	cmp	r3, #1
 80134f2:	d806      	bhi.n	8013502 <enq_lock+0x26>
 80134f4:	4a09      	ldr	r2, [pc, #36]	; (801351c <enq_lock+0x40>)
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	011b      	lsls	r3, r3, #4
 80134fa:	4413      	add	r3, r2
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d1f2      	bne.n	80134e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2b02      	cmp	r3, #2
 8013506:	bf14      	ite	ne
 8013508:	2301      	movne	r3, #1
 801350a:	2300      	moveq	r3, #0
 801350c:	b2db      	uxtb	r3, r3
}
 801350e:	4618      	mov	r0, r3
 8013510:	370c      	adds	r7, #12
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr
 801351a:	bf00      	nop
 801351c:	20000844 	.word	0x20000844

08013520 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013520:	b480      	push	{r7}
 8013522:	b085      	sub	sp, #20
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801352a:	2300      	movs	r3, #0
 801352c:	60fb      	str	r3, [r7, #12]
 801352e:	e01f      	b.n	8013570 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013530:	4a41      	ldr	r2, [pc, #260]	; (8013638 <inc_lock+0x118>)
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	011b      	lsls	r3, r3, #4
 8013536:	4413      	add	r3, r2
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	429a      	cmp	r2, r3
 8013540:	d113      	bne.n	801356a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013542:	4a3d      	ldr	r2, [pc, #244]	; (8013638 <inc_lock+0x118>)
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	011b      	lsls	r3, r3, #4
 8013548:	4413      	add	r3, r2
 801354a:	3304      	adds	r3, #4
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013552:	429a      	cmp	r2, r3
 8013554:	d109      	bne.n	801356a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013556:	4a38      	ldr	r2, [pc, #224]	; (8013638 <inc_lock+0x118>)
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	011b      	lsls	r3, r3, #4
 801355c:	4413      	add	r3, r2
 801355e:	3308      	adds	r3, #8
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013566:	429a      	cmp	r2, r3
 8013568:	d006      	beq.n	8013578 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	3301      	adds	r3, #1
 801356e:	60fb      	str	r3, [r7, #12]
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	2b01      	cmp	r3, #1
 8013574:	d9dc      	bls.n	8013530 <inc_lock+0x10>
 8013576:	e000      	b.n	801357a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013578:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2b02      	cmp	r3, #2
 801357e:	d132      	bne.n	80135e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013580:	2300      	movs	r3, #0
 8013582:	60fb      	str	r3, [r7, #12]
 8013584:	e002      	b.n	801358c <inc_lock+0x6c>
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	3301      	adds	r3, #1
 801358a:	60fb      	str	r3, [r7, #12]
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	2b01      	cmp	r3, #1
 8013590:	d806      	bhi.n	80135a0 <inc_lock+0x80>
 8013592:	4a29      	ldr	r2, [pc, #164]	; (8013638 <inc_lock+0x118>)
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	011b      	lsls	r3, r3, #4
 8013598:	4413      	add	r3, r2
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d1f2      	bne.n	8013586 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	2b02      	cmp	r3, #2
 80135a4:	d101      	bne.n	80135aa <inc_lock+0x8a>
 80135a6:	2300      	movs	r3, #0
 80135a8:	e040      	b.n	801362c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681a      	ldr	r2, [r3, #0]
 80135ae:	4922      	ldr	r1, [pc, #136]	; (8013638 <inc_lock+0x118>)
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	011b      	lsls	r3, r3, #4
 80135b4:	440b      	add	r3, r1
 80135b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	689a      	ldr	r2, [r3, #8]
 80135bc:	491e      	ldr	r1, [pc, #120]	; (8013638 <inc_lock+0x118>)
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	011b      	lsls	r3, r3, #4
 80135c2:	440b      	add	r3, r1
 80135c4:	3304      	adds	r3, #4
 80135c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	695a      	ldr	r2, [r3, #20]
 80135cc:	491a      	ldr	r1, [pc, #104]	; (8013638 <inc_lock+0x118>)
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	011b      	lsls	r3, r3, #4
 80135d2:	440b      	add	r3, r1
 80135d4:	3308      	adds	r3, #8
 80135d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80135d8:	4a17      	ldr	r2, [pc, #92]	; (8013638 <inc_lock+0x118>)
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	011b      	lsls	r3, r3, #4
 80135de:	4413      	add	r3, r2
 80135e0:	330c      	adds	r3, #12
 80135e2:	2200      	movs	r2, #0
 80135e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d009      	beq.n	8013600 <inc_lock+0xe0>
 80135ec:	4a12      	ldr	r2, [pc, #72]	; (8013638 <inc_lock+0x118>)
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	011b      	lsls	r3, r3, #4
 80135f2:	4413      	add	r3, r2
 80135f4:	330c      	adds	r3, #12
 80135f6:	881b      	ldrh	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d001      	beq.n	8013600 <inc_lock+0xe0>
 80135fc:	2300      	movs	r3, #0
 80135fe:	e015      	b.n	801362c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d108      	bne.n	8013618 <inc_lock+0xf8>
 8013606:	4a0c      	ldr	r2, [pc, #48]	; (8013638 <inc_lock+0x118>)
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	011b      	lsls	r3, r3, #4
 801360c:	4413      	add	r3, r2
 801360e:	330c      	adds	r3, #12
 8013610:	881b      	ldrh	r3, [r3, #0]
 8013612:	3301      	adds	r3, #1
 8013614:	b29a      	uxth	r2, r3
 8013616:	e001      	b.n	801361c <inc_lock+0xfc>
 8013618:	f44f 7280 	mov.w	r2, #256	; 0x100
 801361c:	4906      	ldr	r1, [pc, #24]	; (8013638 <inc_lock+0x118>)
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	011b      	lsls	r3, r3, #4
 8013622:	440b      	add	r3, r1
 8013624:	330c      	adds	r3, #12
 8013626:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	3301      	adds	r3, #1
}
 801362c:	4618      	mov	r0, r3
 801362e:	3714      	adds	r7, #20
 8013630:	46bd      	mov	sp, r7
 8013632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013636:	4770      	bx	lr
 8013638:	20000844 	.word	0x20000844

0801363c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801363c:	b480      	push	{r7}
 801363e:	b085      	sub	sp, #20
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	3b01      	subs	r3, #1
 8013648:	607b      	str	r3, [r7, #4]
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2b01      	cmp	r3, #1
 801364e:	d825      	bhi.n	801369c <dec_lock+0x60>
		n = Files[i].ctr;
 8013650:	4a17      	ldr	r2, [pc, #92]	; (80136b0 <dec_lock+0x74>)
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	011b      	lsls	r3, r3, #4
 8013656:	4413      	add	r3, r2
 8013658:	330c      	adds	r3, #12
 801365a:	881b      	ldrh	r3, [r3, #0]
 801365c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801365e:	89fb      	ldrh	r3, [r7, #14]
 8013660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013664:	d101      	bne.n	801366a <dec_lock+0x2e>
 8013666:	2300      	movs	r3, #0
 8013668:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801366a:	89fb      	ldrh	r3, [r7, #14]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d002      	beq.n	8013676 <dec_lock+0x3a>
 8013670:	89fb      	ldrh	r3, [r7, #14]
 8013672:	3b01      	subs	r3, #1
 8013674:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013676:	4a0e      	ldr	r2, [pc, #56]	; (80136b0 <dec_lock+0x74>)
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	011b      	lsls	r3, r3, #4
 801367c:	4413      	add	r3, r2
 801367e:	330c      	adds	r3, #12
 8013680:	89fa      	ldrh	r2, [r7, #14]
 8013682:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013684:	89fb      	ldrh	r3, [r7, #14]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d105      	bne.n	8013696 <dec_lock+0x5a>
 801368a:	4a09      	ldr	r2, [pc, #36]	; (80136b0 <dec_lock+0x74>)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	011b      	lsls	r3, r3, #4
 8013690:	4413      	add	r3, r2
 8013692:	2200      	movs	r2, #0
 8013694:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013696:	2300      	movs	r3, #0
 8013698:	737b      	strb	r3, [r7, #13]
 801369a:	e001      	b.n	80136a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801369c:	2302      	movs	r3, #2
 801369e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80136a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3714      	adds	r7, #20
 80136a6:	46bd      	mov	sp, r7
 80136a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ac:	4770      	bx	lr
 80136ae:	bf00      	nop
 80136b0:	20000844 	.word	0x20000844

080136b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80136b4:	b480      	push	{r7}
 80136b6:	b085      	sub	sp, #20
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80136bc:	2300      	movs	r3, #0
 80136be:	60fb      	str	r3, [r7, #12]
 80136c0:	e010      	b.n	80136e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80136c2:	4a0d      	ldr	r2, [pc, #52]	; (80136f8 <clear_lock+0x44>)
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	011b      	lsls	r3, r3, #4
 80136c8:	4413      	add	r3, r2
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d105      	bne.n	80136de <clear_lock+0x2a>
 80136d2:	4a09      	ldr	r2, [pc, #36]	; (80136f8 <clear_lock+0x44>)
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	011b      	lsls	r3, r3, #4
 80136d8:	4413      	add	r3, r2
 80136da:	2200      	movs	r2, #0
 80136dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	3301      	adds	r3, #1
 80136e2:	60fb      	str	r3, [r7, #12]
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2b01      	cmp	r3, #1
 80136e8:	d9eb      	bls.n	80136c2 <clear_lock+0xe>
	}
}
 80136ea:	bf00      	nop
 80136ec:	bf00      	nop
 80136ee:	3714      	adds	r7, #20
 80136f0:	46bd      	mov	sp, r7
 80136f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f6:	4770      	bx	lr
 80136f8:	20000844 	.word	0x20000844

080136fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b086      	sub	sp, #24
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013704:	2300      	movs	r3, #0
 8013706:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	78db      	ldrb	r3, [r3, #3]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d034      	beq.n	801377a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013714:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	7858      	ldrb	r0, [r3, #1]
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013720:	2301      	movs	r3, #1
 8013722:	697a      	ldr	r2, [r7, #20]
 8013724:	f7ff fd0e 	bl	8013144 <disk_write>
 8013728:	4603      	mov	r3, r0
 801372a:	2b00      	cmp	r3, #0
 801372c:	d002      	beq.n	8013734 <sync_window+0x38>
			res = FR_DISK_ERR;
 801372e:	2301      	movs	r3, #1
 8013730:	73fb      	strb	r3, [r7, #15]
 8013732:	e022      	b.n	801377a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2200      	movs	r2, #0
 8013738:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801373e:	697a      	ldr	r2, [r7, #20]
 8013740:	1ad2      	subs	r2, r2, r3
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	69db      	ldr	r3, [r3, #28]
 8013746:	429a      	cmp	r2, r3
 8013748:	d217      	bcs.n	801377a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	789b      	ldrb	r3, [r3, #2]
 801374e:	613b      	str	r3, [r7, #16]
 8013750:	e010      	b.n	8013774 <sync_window+0x78>
					wsect += fs->fsize;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	69db      	ldr	r3, [r3, #28]
 8013756:	697a      	ldr	r2, [r7, #20]
 8013758:	4413      	add	r3, r2
 801375a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	7858      	ldrb	r0, [r3, #1]
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013766:	2301      	movs	r3, #1
 8013768:	697a      	ldr	r2, [r7, #20]
 801376a:	f7ff fceb 	bl	8013144 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	3b01      	subs	r3, #1
 8013772:	613b      	str	r3, [r7, #16]
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	2b01      	cmp	r3, #1
 8013778:	d8eb      	bhi.n	8013752 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801377a:	7bfb      	ldrb	r3, [r7, #15]
}
 801377c:	4618      	mov	r0, r3
 801377e:	3718      	adds	r7, #24
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}

08013784 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801378e:	2300      	movs	r3, #0
 8013790:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013796:	683a      	ldr	r2, [r7, #0]
 8013798:	429a      	cmp	r2, r3
 801379a:	d01b      	beq.n	80137d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f7ff ffad 	bl	80136fc <sync_window>
 80137a2:	4603      	mov	r3, r0
 80137a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80137a6:	7bfb      	ldrb	r3, [r7, #15]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d113      	bne.n	80137d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	7858      	ldrb	r0, [r3, #1]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80137b6:	2301      	movs	r3, #1
 80137b8:	683a      	ldr	r2, [r7, #0]
 80137ba:	f7ff fca3 	bl	8013104 <disk_read>
 80137be:	4603      	mov	r3, r0
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d004      	beq.n	80137ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80137c4:	f04f 33ff 	mov.w	r3, #4294967295
 80137c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80137ca:	2301      	movs	r3, #1
 80137cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80137d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
	...

080137e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b084      	sub	sp, #16
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f7ff ff87 	bl	80136fc <sync_window>
 80137ee:	4603      	mov	r3, r0
 80137f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80137f2:	7bfb      	ldrb	r3, [r7, #15]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d158      	bne.n	80138aa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	2b03      	cmp	r3, #3
 80137fe:	d148      	bne.n	8013892 <sync_fs+0xb2>
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	791b      	ldrb	r3, [r3, #4]
 8013804:	2b01      	cmp	r3, #1
 8013806:	d144      	bne.n	8013892 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	3334      	adds	r3, #52	; 0x34
 801380c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013810:	2100      	movs	r1, #0
 8013812:	4618      	mov	r0, r3
 8013814:	f7ff fd77 	bl	8013306 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	3334      	adds	r3, #52	; 0x34
 801381c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013820:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013824:	4618      	mov	r0, r3
 8013826:	f7ff fd06 	bl	8013236 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	3334      	adds	r3, #52	; 0x34
 801382e:	4921      	ldr	r1, [pc, #132]	; (80138b4 <sync_fs+0xd4>)
 8013830:	4618      	mov	r0, r3
 8013832:	f7ff fd1b 	bl	801326c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	3334      	adds	r3, #52	; 0x34
 801383a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801383e:	491e      	ldr	r1, [pc, #120]	; (80138b8 <sync_fs+0xd8>)
 8013840:	4618      	mov	r0, r3
 8013842:	f7ff fd13 	bl	801326c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	3334      	adds	r3, #52	; 0x34
 801384a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	695b      	ldr	r3, [r3, #20]
 8013852:	4619      	mov	r1, r3
 8013854:	4610      	mov	r0, r2
 8013856:	f7ff fd09 	bl	801326c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	3334      	adds	r3, #52	; 0x34
 801385e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	691b      	ldr	r3, [r3, #16]
 8013866:	4619      	mov	r1, r3
 8013868:	4610      	mov	r0, r2
 801386a:	f7ff fcff 	bl	801326c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6a1b      	ldr	r3, [r3, #32]
 8013872:	1c5a      	adds	r2, r3, #1
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	7858      	ldrb	r0, [r3, #1]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013886:	2301      	movs	r3, #1
 8013888:	f7ff fc5c 	bl	8013144 <disk_write>
			fs->fsi_flag = 0;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2200      	movs	r2, #0
 8013890:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	785b      	ldrb	r3, [r3, #1]
 8013896:	2200      	movs	r2, #0
 8013898:	2100      	movs	r1, #0
 801389a:	4618      	mov	r0, r3
 801389c:	f7ff fc72 	bl	8013184 <disk_ioctl>
 80138a0:	4603      	mov	r3, r0
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d001      	beq.n	80138aa <sync_fs+0xca>
 80138a6:	2301      	movs	r3, #1
 80138a8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80138aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	3710      	adds	r7, #16
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}
 80138b4:	41615252 	.word	0x41615252
 80138b8:	61417272 	.word	0x61417272

080138bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80138bc:	b480      	push	{r7}
 80138be:	b083      	sub	sp, #12
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	3b02      	subs	r3, #2
 80138ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	699b      	ldr	r3, [r3, #24]
 80138d0:	3b02      	subs	r3, #2
 80138d2:	683a      	ldr	r2, [r7, #0]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d301      	bcc.n	80138dc <clust2sect+0x20>
 80138d8:	2300      	movs	r3, #0
 80138da:	e008      	b.n	80138ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	895b      	ldrh	r3, [r3, #10]
 80138e0:	461a      	mov	r2, r3
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	fb03 f202 	mul.w	r2, r3, r2
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ec:	4413      	add	r3, r2
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	370c      	adds	r7, #12
 80138f2:	46bd      	mov	sp, r7
 80138f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f8:	4770      	bx	lr

080138fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80138fa:	b580      	push	{r7, lr}
 80138fc:	b086      	sub	sp, #24
 80138fe:	af00      	add	r7, sp, #0
 8013900:	6078      	str	r0, [r7, #4]
 8013902:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	2b01      	cmp	r3, #1
 801390e:	d904      	bls.n	801391a <get_fat+0x20>
 8013910:	693b      	ldr	r3, [r7, #16]
 8013912:	699b      	ldr	r3, [r3, #24]
 8013914:	683a      	ldr	r2, [r7, #0]
 8013916:	429a      	cmp	r2, r3
 8013918:	d302      	bcc.n	8013920 <get_fat+0x26>
		val = 1;	/* Internal error */
 801391a:	2301      	movs	r3, #1
 801391c:	617b      	str	r3, [r7, #20]
 801391e:	e08f      	b.n	8013a40 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013920:	f04f 33ff 	mov.w	r3, #4294967295
 8013924:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013926:	693b      	ldr	r3, [r7, #16]
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	2b03      	cmp	r3, #3
 801392c:	d062      	beq.n	80139f4 <get_fat+0xfa>
 801392e:	2b03      	cmp	r3, #3
 8013930:	dc7c      	bgt.n	8013a2c <get_fat+0x132>
 8013932:	2b01      	cmp	r3, #1
 8013934:	d002      	beq.n	801393c <get_fat+0x42>
 8013936:	2b02      	cmp	r3, #2
 8013938:	d042      	beq.n	80139c0 <get_fat+0xc6>
 801393a:	e077      	b.n	8013a2c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	60fb      	str	r3, [r7, #12]
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	085b      	lsrs	r3, r3, #1
 8013944:	68fa      	ldr	r2, [r7, #12]
 8013946:	4413      	add	r3, r2
 8013948:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	0a5b      	lsrs	r3, r3, #9
 8013952:	4413      	add	r3, r2
 8013954:	4619      	mov	r1, r3
 8013956:	6938      	ldr	r0, [r7, #16]
 8013958:	f7ff ff14 	bl	8013784 <move_window>
 801395c:	4603      	mov	r3, r0
 801395e:	2b00      	cmp	r3, #0
 8013960:	d167      	bne.n	8013a32 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	1c5a      	adds	r2, r3, #1
 8013966:	60fa      	str	r2, [r7, #12]
 8013968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801396c:	693a      	ldr	r2, [r7, #16]
 801396e:	4413      	add	r3, r2
 8013970:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013974:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	0a5b      	lsrs	r3, r3, #9
 801397e:	4413      	add	r3, r2
 8013980:	4619      	mov	r1, r3
 8013982:	6938      	ldr	r0, [r7, #16]
 8013984:	f7ff fefe 	bl	8013784 <move_window>
 8013988:	4603      	mov	r3, r0
 801398a:	2b00      	cmp	r3, #0
 801398c:	d153      	bne.n	8013a36 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013994:	693a      	ldr	r2, [r7, #16]
 8013996:	4413      	add	r3, r2
 8013998:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801399c:	021b      	lsls	r3, r3, #8
 801399e:	461a      	mov	r2, r3
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	4313      	orrs	r3, r2
 80139a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	f003 0301 	and.w	r3, r3, #1
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d002      	beq.n	80139b6 <get_fat+0xbc>
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	091b      	lsrs	r3, r3, #4
 80139b4:	e002      	b.n	80139bc <get_fat+0xc2>
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80139bc:	617b      	str	r3, [r7, #20]
			break;
 80139be:	e03f      	b.n	8013a40 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	0a1b      	lsrs	r3, r3, #8
 80139c8:	4413      	add	r3, r2
 80139ca:	4619      	mov	r1, r3
 80139cc:	6938      	ldr	r0, [r7, #16]
 80139ce:	f7ff fed9 	bl	8013784 <move_window>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d130      	bne.n	8013a3a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	005b      	lsls	r3, r3, #1
 80139e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80139e6:	4413      	add	r3, r2
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7ff fbe9 	bl	80131c0 <ld_word>
 80139ee:	4603      	mov	r3, r0
 80139f0:	617b      	str	r3, [r7, #20]
			break;
 80139f2:	e025      	b.n	8013a40 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	09db      	lsrs	r3, r3, #7
 80139fc:	4413      	add	r3, r2
 80139fe:	4619      	mov	r1, r3
 8013a00:	6938      	ldr	r0, [r7, #16]
 8013a02:	f7ff febf 	bl	8013784 <move_window>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d118      	bne.n	8013a3e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	009b      	lsls	r3, r3, #2
 8013a16:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013a1a:	4413      	add	r3, r2
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f7ff fbe7 	bl	80131f0 <ld_dword>
 8013a22:	4603      	mov	r3, r0
 8013a24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013a28:	617b      	str	r3, [r7, #20]
			break;
 8013a2a:	e009      	b.n	8013a40 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	617b      	str	r3, [r7, #20]
 8013a30:	e006      	b.n	8013a40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013a32:	bf00      	nop
 8013a34:	e004      	b.n	8013a40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013a36:	bf00      	nop
 8013a38:	e002      	b.n	8013a40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013a3a:	bf00      	nop
 8013a3c:	e000      	b.n	8013a40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013a3e:	bf00      	nop
		}
	}

	return val;
 8013a40:	697b      	ldr	r3, [r7, #20]
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3718      	adds	r7, #24
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}

08013a4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013a4a:	b590      	push	{r4, r7, lr}
 8013a4c:	b089      	sub	sp, #36	; 0x24
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	60f8      	str	r0, [r7, #12]
 8013a52:	60b9      	str	r1, [r7, #8]
 8013a54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013a56:	2302      	movs	r3, #2
 8013a58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	2b01      	cmp	r3, #1
 8013a5e:	f240 80d2 	bls.w	8013c06 <put_fat+0x1bc>
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	699b      	ldr	r3, [r3, #24]
 8013a66:	68ba      	ldr	r2, [r7, #8]
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	f080 80cc 	bcs.w	8013c06 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	2b03      	cmp	r3, #3
 8013a74:	f000 8096 	beq.w	8013ba4 <put_fat+0x15a>
 8013a78:	2b03      	cmp	r3, #3
 8013a7a:	f300 80cd 	bgt.w	8013c18 <put_fat+0x1ce>
 8013a7e:	2b01      	cmp	r3, #1
 8013a80:	d002      	beq.n	8013a88 <put_fat+0x3e>
 8013a82:	2b02      	cmp	r3, #2
 8013a84:	d06e      	beq.n	8013b64 <put_fat+0x11a>
 8013a86:	e0c7      	b.n	8013c18 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	61bb      	str	r3, [r7, #24]
 8013a8c:	69bb      	ldr	r3, [r7, #24]
 8013a8e:	085b      	lsrs	r3, r3, #1
 8013a90:	69ba      	ldr	r2, [r7, #24]
 8013a92:	4413      	add	r3, r2
 8013a94:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a9a:	69bb      	ldr	r3, [r7, #24]
 8013a9c:	0a5b      	lsrs	r3, r3, #9
 8013a9e:	4413      	add	r3, r2
 8013aa0:	4619      	mov	r1, r3
 8013aa2:	68f8      	ldr	r0, [r7, #12]
 8013aa4:	f7ff fe6e 	bl	8013784 <move_window>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013aac:	7ffb      	ldrb	r3, [r7, #31]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f040 80ab 	bne.w	8013c0a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	1c59      	adds	r1, r3, #1
 8013abe:	61b9      	str	r1, [r7, #24]
 8013ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ac4:	4413      	add	r3, r2
 8013ac6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	f003 0301 	and.w	r3, r3, #1
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d00d      	beq.n	8013aee <put_fat+0xa4>
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	781b      	ldrb	r3, [r3, #0]
 8013ad6:	b25b      	sxtb	r3, r3
 8013ad8:	f003 030f 	and.w	r3, r3, #15
 8013adc:	b25a      	sxtb	r2, r3
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	011b      	lsls	r3, r3, #4
 8013ae4:	b25b      	sxtb	r3, r3
 8013ae6:	4313      	orrs	r3, r2
 8013ae8:	b25b      	sxtb	r3, r3
 8013aea:	b2db      	uxtb	r3, r3
 8013aec:	e001      	b.n	8013af2 <put_fat+0xa8>
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	b2db      	uxtb	r3, r3
 8013af2:	697a      	ldr	r2, [r7, #20]
 8013af4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2201      	movs	r2, #1
 8013afa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b00:	69bb      	ldr	r3, [r7, #24]
 8013b02:	0a5b      	lsrs	r3, r3, #9
 8013b04:	4413      	add	r3, r2
 8013b06:	4619      	mov	r1, r3
 8013b08:	68f8      	ldr	r0, [r7, #12]
 8013b0a:	f7ff fe3b 	bl	8013784 <move_window>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013b12:	7ffb      	ldrb	r3, [r7, #31]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d17a      	bne.n	8013c0e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013b1e:	69bb      	ldr	r3, [r7, #24]
 8013b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b24:	4413      	add	r3, r2
 8013b26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	f003 0301 	and.w	r3, r3, #1
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d003      	beq.n	8013b3a <put_fat+0xf0>
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	091b      	lsrs	r3, r3, #4
 8013b36:	b2db      	uxtb	r3, r3
 8013b38:	e00e      	b.n	8013b58 <put_fat+0x10e>
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	781b      	ldrb	r3, [r3, #0]
 8013b3e:	b25b      	sxtb	r3, r3
 8013b40:	f023 030f 	bic.w	r3, r3, #15
 8013b44:	b25a      	sxtb	r2, r3
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	0a1b      	lsrs	r3, r3, #8
 8013b4a:	b25b      	sxtb	r3, r3
 8013b4c:	f003 030f 	and.w	r3, r3, #15
 8013b50:	b25b      	sxtb	r3, r3
 8013b52:	4313      	orrs	r3, r2
 8013b54:	b25b      	sxtb	r3, r3
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	697a      	ldr	r2, [r7, #20]
 8013b5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2201      	movs	r2, #1
 8013b60:	70da      	strb	r2, [r3, #3]
			break;
 8013b62:	e059      	b.n	8013c18 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	0a1b      	lsrs	r3, r3, #8
 8013b6c:	4413      	add	r3, r2
 8013b6e:	4619      	mov	r1, r3
 8013b70:	68f8      	ldr	r0, [r7, #12]
 8013b72:	f7ff fe07 	bl	8013784 <move_window>
 8013b76:	4603      	mov	r3, r0
 8013b78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013b7a:	7ffb      	ldrb	r3, [r7, #31]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d148      	bne.n	8013c12 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	005b      	lsls	r3, r3, #1
 8013b8a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013b8e:	4413      	add	r3, r2
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	b292      	uxth	r2, r2
 8013b94:	4611      	mov	r1, r2
 8013b96:	4618      	mov	r0, r3
 8013b98:	f7ff fb4d 	bl	8013236 <st_word>
			fs->wflag = 1;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	70da      	strb	r2, [r3, #3]
			break;
 8013ba2:	e039      	b.n	8013c18 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	09db      	lsrs	r3, r3, #7
 8013bac:	4413      	add	r3, r2
 8013bae:	4619      	mov	r1, r3
 8013bb0:	68f8      	ldr	r0, [r7, #12]
 8013bb2:	f7ff fde7 	bl	8013784 <move_window>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013bba:	7ffb      	ldrb	r3, [r7, #31]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d12a      	bne.n	8013c16 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	009b      	lsls	r3, r3, #2
 8013bd0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013bd4:	4413      	add	r3, r2
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7ff fb0a 	bl	80131f0 <ld_dword>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013be2:	4323      	orrs	r3, r4
 8013be4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	009b      	lsls	r3, r3, #2
 8013bf0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013bf4:	4413      	add	r3, r2
 8013bf6:	6879      	ldr	r1, [r7, #4]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7ff fb37 	bl	801326c <st_dword>
			fs->wflag = 1;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	2201      	movs	r2, #1
 8013c02:	70da      	strb	r2, [r3, #3]
			break;
 8013c04:	e008      	b.n	8013c18 <put_fat+0x1ce>
		}
	}
 8013c06:	bf00      	nop
 8013c08:	e006      	b.n	8013c18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013c0a:	bf00      	nop
 8013c0c:	e004      	b.n	8013c18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013c0e:	bf00      	nop
 8013c10:	e002      	b.n	8013c18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013c12:	bf00      	nop
 8013c14:	e000      	b.n	8013c18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013c16:	bf00      	nop
	return res;
 8013c18:	7ffb      	ldrb	r3, [r7, #31]
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3724      	adds	r7, #36	; 0x24
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd90      	pop	{r4, r7, pc}

08013c22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013c22:	b580      	push	{r7, lr}
 8013c24:	b088      	sub	sp, #32
 8013c26:	af00      	add	r7, sp, #0
 8013c28:	60f8      	str	r0, [r7, #12]
 8013c2a:	60b9      	str	r1, [r7, #8]
 8013c2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	2b01      	cmp	r3, #1
 8013c3c:	d904      	bls.n	8013c48 <remove_chain+0x26>
 8013c3e:	69bb      	ldr	r3, [r7, #24]
 8013c40:	699b      	ldr	r3, [r3, #24]
 8013c42:	68ba      	ldr	r2, [r7, #8]
 8013c44:	429a      	cmp	r2, r3
 8013c46:	d301      	bcc.n	8013c4c <remove_chain+0x2a>
 8013c48:	2302      	movs	r3, #2
 8013c4a:	e04b      	b.n	8013ce4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d00c      	beq.n	8013c6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013c52:	f04f 32ff 	mov.w	r2, #4294967295
 8013c56:	6879      	ldr	r1, [r7, #4]
 8013c58:	69b8      	ldr	r0, [r7, #24]
 8013c5a:	f7ff fef6 	bl	8013a4a <put_fat>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013c62:	7ffb      	ldrb	r3, [r7, #31]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d001      	beq.n	8013c6c <remove_chain+0x4a>
 8013c68:	7ffb      	ldrb	r3, [r7, #31]
 8013c6a:	e03b      	b.n	8013ce4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013c6c:	68b9      	ldr	r1, [r7, #8]
 8013c6e:	68f8      	ldr	r0, [r7, #12]
 8013c70:	f7ff fe43 	bl	80138fa <get_fat>
 8013c74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d031      	beq.n	8013ce0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	2b01      	cmp	r3, #1
 8013c80:	d101      	bne.n	8013c86 <remove_chain+0x64>
 8013c82:	2302      	movs	r3, #2
 8013c84:	e02e      	b.n	8013ce4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c8c:	d101      	bne.n	8013c92 <remove_chain+0x70>
 8013c8e:	2301      	movs	r3, #1
 8013c90:	e028      	b.n	8013ce4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013c92:	2200      	movs	r2, #0
 8013c94:	68b9      	ldr	r1, [r7, #8]
 8013c96:	69b8      	ldr	r0, [r7, #24]
 8013c98:	f7ff fed7 	bl	8013a4a <put_fat>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013ca0:	7ffb      	ldrb	r3, [r7, #31]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d001      	beq.n	8013caa <remove_chain+0x88>
 8013ca6:	7ffb      	ldrb	r3, [r7, #31]
 8013ca8:	e01c      	b.n	8013ce4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	695a      	ldr	r2, [r3, #20]
 8013cae:	69bb      	ldr	r3, [r7, #24]
 8013cb0:	699b      	ldr	r3, [r3, #24]
 8013cb2:	3b02      	subs	r3, #2
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d20b      	bcs.n	8013cd0 <remove_chain+0xae>
			fs->free_clst++;
 8013cb8:	69bb      	ldr	r3, [r7, #24]
 8013cba:	695b      	ldr	r3, [r3, #20]
 8013cbc:	1c5a      	adds	r2, r3, #1
 8013cbe:	69bb      	ldr	r3, [r7, #24]
 8013cc0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013cc2:	69bb      	ldr	r3, [r7, #24]
 8013cc4:	791b      	ldrb	r3, [r3, #4]
 8013cc6:	f043 0301 	orr.w	r3, r3, #1
 8013cca:	b2da      	uxtb	r2, r3
 8013ccc:	69bb      	ldr	r3, [r7, #24]
 8013cce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013cd4:	69bb      	ldr	r3, [r7, #24]
 8013cd6:	699b      	ldr	r3, [r3, #24]
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d3c6      	bcc.n	8013c6c <remove_chain+0x4a>
 8013cde:	e000      	b.n	8013ce2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013ce0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013ce2:	2300      	movs	r3, #0
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3720      	adds	r7, #32
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}

08013cec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b088      	sub	sp, #32
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d10d      	bne.n	8013d1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	691b      	ldr	r3, [r3, #16]
 8013d06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013d08:	69bb      	ldr	r3, [r7, #24]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d004      	beq.n	8013d18 <create_chain+0x2c>
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	699b      	ldr	r3, [r3, #24]
 8013d12:	69ba      	ldr	r2, [r7, #24]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d31b      	bcc.n	8013d50 <create_chain+0x64>
 8013d18:	2301      	movs	r3, #1
 8013d1a:	61bb      	str	r3, [r7, #24]
 8013d1c:	e018      	b.n	8013d50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013d1e:	6839      	ldr	r1, [r7, #0]
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f7ff fdea 	bl	80138fa <get_fat>
 8013d26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	2b01      	cmp	r3, #1
 8013d2c:	d801      	bhi.n	8013d32 <create_chain+0x46>
 8013d2e:	2301      	movs	r3, #1
 8013d30:	e070      	b.n	8013e14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d38:	d101      	bne.n	8013d3e <create_chain+0x52>
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	e06a      	b.n	8013e14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	699b      	ldr	r3, [r3, #24]
 8013d42:	68fa      	ldr	r2, [r7, #12]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d201      	bcs.n	8013d4c <create_chain+0x60>
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	e063      	b.n	8013e14 <create_chain+0x128>
		scl = clst;
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013d50:	69bb      	ldr	r3, [r7, #24]
 8013d52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013d54:	69fb      	ldr	r3, [r7, #28]
 8013d56:	3301      	adds	r3, #1
 8013d58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	699b      	ldr	r3, [r3, #24]
 8013d5e:	69fa      	ldr	r2, [r7, #28]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d307      	bcc.n	8013d74 <create_chain+0x88>
				ncl = 2;
 8013d64:	2302      	movs	r3, #2
 8013d66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013d68:	69fa      	ldr	r2, [r7, #28]
 8013d6a:	69bb      	ldr	r3, [r7, #24]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d901      	bls.n	8013d74 <create_chain+0x88>
 8013d70:	2300      	movs	r3, #0
 8013d72:	e04f      	b.n	8013e14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013d74:	69f9      	ldr	r1, [r7, #28]
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f7ff fdbf 	bl	80138fa <get_fat>
 8013d7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d00e      	beq.n	8013da2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d003      	beq.n	8013d92 <create_chain+0xa6>
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d90:	d101      	bne.n	8013d96 <create_chain+0xaa>
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	e03e      	b.n	8013e14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013d96:	69fa      	ldr	r2, [r7, #28]
 8013d98:	69bb      	ldr	r3, [r7, #24]
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d1da      	bne.n	8013d54 <create_chain+0x68>
 8013d9e:	2300      	movs	r3, #0
 8013da0:	e038      	b.n	8013e14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013da2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013da4:	f04f 32ff 	mov.w	r2, #4294967295
 8013da8:	69f9      	ldr	r1, [r7, #28]
 8013daa:	6938      	ldr	r0, [r7, #16]
 8013dac:	f7ff fe4d 	bl	8013a4a <put_fat>
 8013db0:	4603      	mov	r3, r0
 8013db2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013db4:	7dfb      	ldrb	r3, [r7, #23]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d109      	bne.n	8013dce <create_chain+0xe2>
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d006      	beq.n	8013dce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013dc0:	69fa      	ldr	r2, [r7, #28]
 8013dc2:	6839      	ldr	r1, [r7, #0]
 8013dc4:	6938      	ldr	r0, [r7, #16]
 8013dc6:	f7ff fe40 	bl	8013a4a <put_fat>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013dce:	7dfb      	ldrb	r3, [r7, #23]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d116      	bne.n	8013e02 <create_chain+0x116>
		fs->last_clst = ncl;
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	69fa      	ldr	r2, [r7, #28]
 8013dd8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	695a      	ldr	r2, [r3, #20]
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	699b      	ldr	r3, [r3, #24]
 8013de2:	3b02      	subs	r3, #2
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d804      	bhi.n	8013df2 <create_chain+0x106>
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	695b      	ldr	r3, [r3, #20]
 8013dec:	1e5a      	subs	r2, r3, #1
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	791b      	ldrb	r3, [r3, #4]
 8013df6:	f043 0301 	orr.w	r3, r3, #1
 8013dfa:	b2da      	uxtb	r2, r3
 8013dfc:	693b      	ldr	r3, [r7, #16]
 8013dfe:	711a      	strb	r2, [r3, #4]
 8013e00:	e007      	b.n	8013e12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013e02:	7dfb      	ldrb	r3, [r7, #23]
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d102      	bne.n	8013e0e <create_chain+0x122>
 8013e08:	f04f 33ff 	mov.w	r3, #4294967295
 8013e0c:	e000      	b.n	8013e10 <create_chain+0x124>
 8013e0e:	2301      	movs	r3, #1
 8013e10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013e12:	69fb      	ldr	r3, [r7, #28]
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3720      	adds	r7, #32
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}

08013e1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b087      	sub	sp, #28
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e30:	3304      	adds	r3, #4
 8013e32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	0a5b      	lsrs	r3, r3, #9
 8013e38:	68fa      	ldr	r2, [r7, #12]
 8013e3a:	8952      	ldrh	r2, [r2, #10]
 8013e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	1d1a      	adds	r2, r3, #4
 8013e46:	613a      	str	r2, [r7, #16]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d101      	bne.n	8013e56 <clmt_clust+0x3a>
 8013e52:	2300      	movs	r3, #0
 8013e54:	e010      	b.n	8013e78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013e56:	697a      	ldr	r2, [r7, #20]
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d307      	bcc.n	8013e6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013e5e:	697a      	ldr	r2, [r7, #20]
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	1ad3      	subs	r3, r2, r3
 8013e64:	617b      	str	r3, [r7, #20]
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	3304      	adds	r3, #4
 8013e6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013e6c:	e7e9      	b.n	8013e42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013e6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	681a      	ldr	r2, [r3, #0]
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	4413      	add	r3, r2
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	371c      	adds	r7, #28
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr

08013e84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b086      	sub	sp, #24
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
 8013e8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013e9a:	d204      	bcs.n	8013ea6 <dir_sdi+0x22>
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	f003 031f 	and.w	r3, r3, #31
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d001      	beq.n	8013eaa <dir_sdi+0x26>
		return FR_INT_ERR;
 8013ea6:	2302      	movs	r3, #2
 8013ea8:	e063      	b.n	8013f72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	683a      	ldr	r2, [r7, #0]
 8013eae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	689b      	ldr	r3, [r3, #8]
 8013eb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d106      	bne.n	8013eca <dir_sdi+0x46>
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	2b02      	cmp	r3, #2
 8013ec2:	d902      	bls.n	8013eca <dir_sdi+0x46>
		clst = fs->dirbase;
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ec8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d10c      	bne.n	8013eea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	095b      	lsrs	r3, r3, #5
 8013ed4:	693a      	ldr	r2, [r7, #16]
 8013ed6:	8912      	ldrh	r2, [r2, #8]
 8013ed8:	4293      	cmp	r3, r2
 8013eda:	d301      	bcc.n	8013ee0 <dir_sdi+0x5c>
 8013edc:	2302      	movs	r3, #2
 8013ede:	e048      	b.n	8013f72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	61da      	str	r2, [r3, #28]
 8013ee8:	e029      	b.n	8013f3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	895b      	ldrh	r3, [r3, #10]
 8013eee:	025b      	lsls	r3, r3, #9
 8013ef0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013ef2:	e019      	b.n	8013f28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6979      	ldr	r1, [r7, #20]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7ff fcfe 	bl	80138fa <get_fat>
 8013efe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f06:	d101      	bne.n	8013f0c <dir_sdi+0x88>
 8013f08:	2301      	movs	r3, #1
 8013f0a:	e032      	b.n	8013f72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	d904      	bls.n	8013f1c <dir_sdi+0x98>
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	699b      	ldr	r3, [r3, #24]
 8013f16:	697a      	ldr	r2, [r7, #20]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d301      	bcc.n	8013f20 <dir_sdi+0x9c>
 8013f1c:	2302      	movs	r3, #2
 8013f1e:	e028      	b.n	8013f72 <dir_sdi+0xee>
			ofs -= csz;
 8013f20:	683a      	ldr	r2, [r7, #0]
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	1ad3      	subs	r3, r2, r3
 8013f26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013f28:	683a      	ldr	r2, [r7, #0]
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d2e1      	bcs.n	8013ef4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013f30:	6979      	ldr	r1, [r7, #20]
 8013f32:	6938      	ldr	r0, [r7, #16]
 8013f34:	f7ff fcc2 	bl	80138bc <clust2sect>
 8013f38:	4602      	mov	r2, r0
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	697a      	ldr	r2, [r7, #20]
 8013f42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	69db      	ldr	r3, [r3, #28]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d101      	bne.n	8013f50 <dir_sdi+0xcc>
 8013f4c:	2302      	movs	r3, #2
 8013f4e:	e010      	b.n	8013f72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	69da      	ldr	r2, [r3, #28]
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	0a5b      	lsrs	r3, r3, #9
 8013f58:	441a      	add	r2, r3
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f6a:	441a      	add	r2, r3
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013f70:	2300      	movs	r3, #0
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3718      	adds	r7, #24
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013f7a:	b580      	push	{r7, lr}
 8013f7c:	b086      	sub	sp, #24
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
 8013f82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	695b      	ldr	r3, [r3, #20]
 8013f8e:	3320      	adds	r3, #32
 8013f90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	69db      	ldr	r3, [r3, #28]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d003      	beq.n	8013fa2 <dir_next+0x28>
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013fa0:	d301      	bcc.n	8013fa6 <dir_next+0x2c>
 8013fa2:	2304      	movs	r3, #4
 8013fa4:	e0aa      	b.n	80140fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	f040 8098 	bne.w	80140e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	69db      	ldr	r3, [r3, #28]
 8013fb6:	1c5a      	adds	r2, r3, #1
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	699b      	ldr	r3, [r3, #24]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d10b      	bne.n	8013fdc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	095b      	lsrs	r3, r3, #5
 8013fc8:	68fa      	ldr	r2, [r7, #12]
 8013fca:	8912      	ldrh	r2, [r2, #8]
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	f0c0 8088 	bcc.w	80140e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	61da      	str	r2, [r3, #28]
 8013fd8:	2304      	movs	r3, #4
 8013fda:	e08f      	b.n	80140fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	0a5b      	lsrs	r3, r3, #9
 8013fe0:	68fa      	ldr	r2, [r7, #12]
 8013fe2:	8952      	ldrh	r2, [r2, #10]
 8013fe4:	3a01      	subs	r2, #1
 8013fe6:	4013      	ands	r3, r2
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d17a      	bne.n	80140e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013fec:	687a      	ldr	r2, [r7, #4]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	699b      	ldr	r3, [r3, #24]
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	4610      	mov	r0, r2
 8013ff6:	f7ff fc80 	bl	80138fa <get_fat>
 8013ffa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	2b01      	cmp	r3, #1
 8014000:	d801      	bhi.n	8014006 <dir_next+0x8c>
 8014002:	2302      	movs	r3, #2
 8014004:	e07a      	b.n	80140fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801400c:	d101      	bne.n	8014012 <dir_next+0x98>
 801400e:	2301      	movs	r3, #1
 8014010:	e074      	b.n	80140fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	699b      	ldr	r3, [r3, #24]
 8014016:	697a      	ldr	r2, [r7, #20]
 8014018:	429a      	cmp	r2, r3
 801401a:	d358      	bcc.n	80140ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d104      	bne.n	801402c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2200      	movs	r2, #0
 8014026:	61da      	str	r2, [r3, #28]
 8014028:	2304      	movs	r3, #4
 801402a:	e067      	b.n	80140fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801402c:	687a      	ldr	r2, [r7, #4]
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	699b      	ldr	r3, [r3, #24]
 8014032:	4619      	mov	r1, r3
 8014034:	4610      	mov	r0, r2
 8014036:	f7ff fe59 	bl	8013cec <create_chain>
 801403a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d101      	bne.n	8014046 <dir_next+0xcc>
 8014042:	2307      	movs	r3, #7
 8014044:	e05a      	b.n	80140fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	2b01      	cmp	r3, #1
 801404a:	d101      	bne.n	8014050 <dir_next+0xd6>
 801404c:	2302      	movs	r3, #2
 801404e:	e055      	b.n	80140fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014056:	d101      	bne.n	801405c <dir_next+0xe2>
 8014058:	2301      	movs	r3, #1
 801405a:	e04f      	b.n	80140fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801405c:	68f8      	ldr	r0, [r7, #12]
 801405e:	f7ff fb4d 	bl	80136fc <sync_window>
 8014062:	4603      	mov	r3, r0
 8014064:	2b00      	cmp	r3, #0
 8014066:	d001      	beq.n	801406c <dir_next+0xf2>
 8014068:	2301      	movs	r3, #1
 801406a:	e047      	b.n	80140fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	3334      	adds	r3, #52	; 0x34
 8014070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014074:	2100      	movs	r1, #0
 8014076:	4618      	mov	r0, r3
 8014078:	f7ff f945 	bl	8013306 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801407c:	2300      	movs	r3, #0
 801407e:	613b      	str	r3, [r7, #16]
 8014080:	6979      	ldr	r1, [r7, #20]
 8014082:	68f8      	ldr	r0, [r7, #12]
 8014084:	f7ff fc1a 	bl	80138bc <clust2sect>
 8014088:	4602      	mov	r2, r0
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	631a      	str	r2, [r3, #48]	; 0x30
 801408e:	e012      	b.n	80140b6 <dir_next+0x13c>
						fs->wflag = 1;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2201      	movs	r2, #1
 8014094:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014096:	68f8      	ldr	r0, [r7, #12]
 8014098:	f7ff fb30 	bl	80136fc <sync_window>
 801409c:	4603      	mov	r3, r0
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d001      	beq.n	80140a6 <dir_next+0x12c>
 80140a2:	2301      	movs	r3, #1
 80140a4:	e02a      	b.n	80140fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80140a6:	693b      	ldr	r3, [r7, #16]
 80140a8:	3301      	adds	r3, #1
 80140aa:	613b      	str	r3, [r7, #16]
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140b0:	1c5a      	adds	r2, r3, #1
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	631a      	str	r2, [r3, #48]	; 0x30
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	895b      	ldrh	r3, [r3, #10]
 80140ba:	461a      	mov	r2, r3
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	4293      	cmp	r3, r2
 80140c0:	d3e6      	bcc.n	8014090 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	1ad2      	subs	r2, r2, r3
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	697a      	ldr	r2, [r7, #20]
 80140d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80140d4:	6979      	ldr	r1, [r7, #20]
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f7ff fbf0 	bl	80138bc <clust2sect>
 80140dc:	4602      	mov	r2, r0
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	68ba      	ldr	r2, [r7, #8]
 80140e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140f4:	441a      	add	r2, r3
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80140fa:	2300      	movs	r3, #0
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3718      	adds	r7, #24
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b086      	sub	sp, #24
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
 801410c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8014114:	2100      	movs	r1, #0
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f7ff feb4 	bl	8013e84 <dir_sdi>
 801411c:	4603      	mov	r3, r0
 801411e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014120:	7dfb      	ldrb	r3, [r7, #23]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d12b      	bne.n	801417e <dir_alloc+0x7a>
		n = 0;
 8014126:	2300      	movs	r3, #0
 8014128:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	69db      	ldr	r3, [r3, #28]
 801412e:	4619      	mov	r1, r3
 8014130:	68f8      	ldr	r0, [r7, #12]
 8014132:	f7ff fb27 	bl	8013784 <move_window>
 8014136:	4603      	mov	r3, r0
 8014138:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801413a:	7dfb      	ldrb	r3, [r7, #23]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d11d      	bne.n	801417c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	6a1b      	ldr	r3, [r3, #32]
 8014144:	781b      	ldrb	r3, [r3, #0]
 8014146:	2be5      	cmp	r3, #229	; 0xe5
 8014148:	d004      	beq.n	8014154 <dir_alloc+0x50>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6a1b      	ldr	r3, [r3, #32]
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d107      	bne.n	8014164 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	3301      	adds	r3, #1
 8014158:	613b      	str	r3, [r7, #16]
 801415a:	693a      	ldr	r2, [r7, #16]
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	429a      	cmp	r2, r3
 8014160:	d102      	bne.n	8014168 <dir_alloc+0x64>
 8014162:	e00c      	b.n	801417e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014164:	2300      	movs	r3, #0
 8014166:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014168:	2101      	movs	r1, #1
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f7ff ff05 	bl	8013f7a <dir_next>
 8014170:	4603      	mov	r3, r0
 8014172:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014174:	7dfb      	ldrb	r3, [r7, #23]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d0d7      	beq.n	801412a <dir_alloc+0x26>
 801417a:	e000      	b.n	801417e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801417c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801417e:	7dfb      	ldrb	r3, [r7, #23]
 8014180:	2b04      	cmp	r3, #4
 8014182:	d101      	bne.n	8014188 <dir_alloc+0x84>
 8014184:	2307      	movs	r3, #7
 8014186:	75fb      	strb	r3, [r7, #23]
	return res;
 8014188:	7dfb      	ldrb	r3, [r7, #23]
}
 801418a:	4618      	mov	r0, r3
 801418c:	3718      	adds	r7, #24
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}

08014192 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014192:	b580      	push	{r7, lr}
 8014194:	b084      	sub	sp, #16
 8014196:	af00      	add	r7, sp, #0
 8014198:	6078      	str	r0, [r7, #4]
 801419a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	331a      	adds	r3, #26
 80141a0:	4618      	mov	r0, r3
 80141a2:	f7ff f80d 	bl	80131c0 <ld_word>
 80141a6:	4603      	mov	r3, r0
 80141a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	781b      	ldrb	r3, [r3, #0]
 80141ae:	2b03      	cmp	r3, #3
 80141b0:	d109      	bne.n	80141c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	3314      	adds	r3, #20
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7ff f802 	bl	80131c0 <ld_word>
 80141bc:	4603      	mov	r3, r0
 80141be:	041b      	lsls	r3, r3, #16
 80141c0:	68fa      	ldr	r2, [r7, #12]
 80141c2:	4313      	orrs	r3, r2
 80141c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80141c6:	68fb      	ldr	r3, [r7, #12]
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3710      	adds	r7, #16
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b084      	sub	sp, #16
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	60f8      	str	r0, [r7, #12]
 80141d8:	60b9      	str	r1, [r7, #8]
 80141da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	331a      	adds	r3, #26
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	b292      	uxth	r2, r2
 80141e4:	4611      	mov	r1, r2
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7ff f825 	bl	8013236 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	781b      	ldrb	r3, [r3, #0]
 80141f0:	2b03      	cmp	r3, #3
 80141f2:	d109      	bne.n	8014208 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	f103 0214 	add.w	r2, r3, #20
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	0c1b      	lsrs	r3, r3, #16
 80141fe:	b29b      	uxth	r3, r3
 8014200:	4619      	mov	r1, r3
 8014202:	4610      	mov	r0, r2
 8014204:	f7ff f817 	bl	8013236 <st_word>
	}
}
 8014208:	bf00      	nop
 801420a:	3710      	adds	r7, #16
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b086      	sub	sp, #24
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801421a:	2304      	movs	r3, #4
 801421c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8014224:	e03c      	b.n	80142a0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	69db      	ldr	r3, [r3, #28]
 801422a:	4619      	mov	r1, r3
 801422c:	6938      	ldr	r0, [r7, #16]
 801422e:	f7ff faa9 	bl	8013784 <move_window>
 8014232:	4603      	mov	r3, r0
 8014234:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014236:	7dfb      	ldrb	r3, [r7, #23]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d136      	bne.n	80142aa <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6a1b      	ldr	r3, [r3, #32]
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8014244:	7bfb      	ldrb	r3, [r7, #15]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d102      	bne.n	8014250 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801424a:	2304      	movs	r3, #4
 801424c:	75fb      	strb	r3, [r7, #23]
 801424e:	e031      	b.n	80142b4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	6a1b      	ldr	r3, [r3, #32]
 8014254:	330b      	adds	r3, #11
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801425c:	73bb      	strb	r3, [r7, #14]
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	7bba      	ldrb	r2, [r7, #14]
 8014262:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8014264:	7bfb      	ldrb	r3, [r7, #15]
 8014266:	2be5      	cmp	r3, #229	; 0xe5
 8014268:	d011      	beq.n	801428e <dir_read+0x7e>
 801426a:	7bfb      	ldrb	r3, [r7, #15]
 801426c:	2b2e      	cmp	r3, #46	; 0x2e
 801426e:	d00e      	beq.n	801428e <dir_read+0x7e>
 8014270:	7bbb      	ldrb	r3, [r7, #14]
 8014272:	2b0f      	cmp	r3, #15
 8014274:	d00b      	beq.n	801428e <dir_read+0x7e>
 8014276:	7bbb      	ldrb	r3, [r7, #14]
 8014278:	f023 0320 	bic.w	r3, r3, #32
 801427c:	2b08      	cmp	r3, #8
 801427e:	bf0c      	ite	eq
 8014280:	2301      	moveq	r3, #1
 8014282:	2300      	movne	r3, #0
 8014284:	b2db      	uxtb	r3, r3
 8014286:	461a      	mov	r2, r3
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	4293      	cmp	r3, r2
 801428c:	d00f      	beq.n	80142ae <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801428e:	2100      	movs	r1, #0
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f7ff fe72 	bl	8013f7a <dir_next>
 8014296:	4603      	mov	r3, r0
 8014298:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801429a:	7dfb      	ldrb	r3, [r7, #23]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d108      	bne.n	80142b2 <dir_read+0xa2>
	while (dp->sect) {
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	69db      	ldr	r3, [r3, #28]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d1be      	bne.n	8014226 <dir_read+0x16>
 80142a8:	e004      	b.n	80142b4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80142aa:	bf00      	nop
 80142ac:	e002      	b.n	80142b4 <dir_read+0xa4>
				break;
 80142ae:	bf00      	nop
 80142b0:	e000      	b.n	80142b4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80142b2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80142b4:	7dfb      	ldrb	r3, [r7, #23]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d002      	beq.n	80142c0 <dir_read+0xb0>
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2200      	movs	r2, #0
 80142be:	61da      	str	r2, [r3, #28]
	return res;
 80142c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3718      	adds	r7, #24
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}

080142ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80142ca:	b580      	push	{r7, lr}
 80142cc:	b086      	sub	sp, #24
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80142d8:	2100      	movs	r1, #0
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f7ff fdd2 	bl	8013e84 <dir_sdi>
 80142e0:	4603      	mov	r3, r0
 80142e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80142e4:	7dfb      	ldrb	r3, [r7, #23]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d001      	beq.n	80142ee <dir_find+0x24>
 80142ea:	7dfb      	ldrb	r3, [r7, #23]
 80142ec:	e03e      	b.n	801436c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	69db      	ldr	r3, [r3, #28]
 80142f2:	4619      	mov	r1, r3
 80142f4:	6938      	ldr	r0, [r7, #16]
 80142f6:	f7ff fa45 	bl	8013784 <move_window>
 80142fa:	4603      	mov	r3, r0
 80142fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80142fe:	7dfb      	ldrb	r3, [r7, #23]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d12f      	bne.n	8014364 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6a1b      	ldr	r3, [r3, #32]
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801430c:	7bfb      	ldrb	r3, [r7, #15]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d102      	bne.n	8014318 <dir_find+0x4e>
 8014312:	2304      	movs	r3, #4
 8014314:	75fb      	strb	r3, [r7, #23]
 8014316:	e028      	b.n	801436a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6a1b      	ldr	r3, [r3, #32]
 801431c:	330b      	adds	r3, #11
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014324:	b2da      	uxtb	r2, r3
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	6a1b      	ldr	r3, [r3, #32]
 801432e:	330b      	adds	r3, #11
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	f003 0308 	and.w	r3, r3, #8
 8014336:	2b00      	cmp	r3, #0
 8014338:	d10a      	bne.n	8014350 <dir_find+0x86>
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6a18      	ldr	r0, [r3, #32]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	3324      	adds	r3, #36	; 0x24
 8014342:	220b      	movs	r2, #11
 8014344:	4619      	mov	r1, r3
 8014346:	f7fe fff9 	bl	801333c <mem_cmp>
 801434a:	4603      	mov	r3, r0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d00b      	beq.n	8014368 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014350:	2100      	movs	r1, #0
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7ff fe11 	bl	8013f7a <dir_next>
 8014358:	4603      	mov	r3, r0
 801435a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801435c:	7dfb      	ldrb	r3, [r7, #23]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d0c5      	beq.n	80142ee <dir_find+0x24>
 8014362:	e002      	b.n	801436a <dir_find+0xa0>
		if (res != FR_OK) break;
 8014364:	bf00      	nop
 8014366:	e000      	b.n	801436a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014368:	bf00      	nop

	return res;
 801436a:	7dfb      	ldrb	r3, [r7, #23]
}
 801436c:	4618      	mov	r0, r3
 801436e:	3718      	adds	r7, #24
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}

08014374 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8014382:	2101      	movs	r1, #1
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f7ff febd 	bl	8014104 <dir_alloc>
 801438a:	4603      	mov	r3, r0
 801438c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801438e:	7bfb      	ldrb	r3, [r7, #15]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d11c      	bne.n	80143ce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	69db      	ldr	r3, [r3, #28]
 8014398:	4619      	mov	r1, r3
 801439a:	68b8      	ldr	r0, [r7, #8]
 801439c:	f7ff f9f2 	bl	8013784 <move_window>
 80143a0:	4603      	mov	r3, r0
 80143a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80143a4:	7bfb      	ldrb	r3, [r7, #15]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d111      	bne.n	80143ce <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6a1b      	ldr	r3, [r3, #32]
 80143ae:	2220      	movs	r2, #32
 80143b0:	2100      	movs	r1, #0
 80143b2:	4618      	mov	r0, r3
 80143b4:	f7fe ffa7 	bl	8013306 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6a18      	ldr	r0, [r3, #32]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	3324      	adds	r3, #36	; 0x24
 80143c0:	220b      	movs	r2, #11
 80143c2:	4619      	mov	r1, r3
 80143c4:	f7fe ff7e 	bl	80132c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	2201      	movs	r2, #1
 80143cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80143ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	3710      	adds	r7, #16
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}

080143d8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b086      	sub	sp, #24
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80143e2:	683b      	ldr	r3, [r7, #0]
 80143e4:	2200      	movs	r2, #0
 80143e6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	69db      	ldr	r3, [r3, #28]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d04e      	beq.n	801448e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80143f0:	2300      	movs	r3, #0
 80143f2:	613b      	str	r3, [r7, #16]
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80143f8:	e021      	b.n	801443e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6a1a      	ldr	r2, [r3, #32]
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	1c59      	adds	r1, r3, #1
 8014402:	6179      	str	r1, [r7, #20]
 8014404:	4413      	add	r3, r2
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801440a:	7bfb      	ldrb	r3, [r7, #15]
 801440c:	2b20      	cmp	r3, #32
 801440e:	d100      	bne.n	8014412 <get_fileinfo+0x3a>
 8014410:	e015      	b.n	801443e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8014412:	7bfb      	ldrb	r3, [r7, #15]
 8014414:	2b05      	cmp	r3, #5
 8014416:	d101      	bne.n	801441c <get_fileinfo+0x44>
 8014418:	23e5      	movs	r3, #229	; 0xe5
 801441a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801441c:	697b      	ldr	r3, [r7, #20]
 801441e:	2b09      	cmp	r3, #9
 8014420:	d106      	bne.n	8014430 <get_fileinfo+0x58>
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	1c5a      	adds	r2, r3, #1
 8014426:	613a      	str	r2, [r7, #16]
 8014428:	683a      	ldr	r2, [r7, #0]
 801442a:	4413      	add	r3, r2
 801442c:	222e      	movs	r2, #46	; 0x2e
 801442e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	1c5a      	adds	r2, r3, #1
 8014434:	613a      	str	r2, [r7, #16]
 8014436:	683a      	ldr	r2, [r7, #0]
 8014438:	4413      	add	r3, r2
 801443a:	7bfa      	ldrb	r2, [r7, #15]
 801443c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	2b0a      	cmp	r3, #10
 8014442:	d9da      	bls.n	80143fa <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8014444:	683a      	ldr	r2, [r7, #0]
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	4413      	add	r3, r2
 801444a:	3309      	adds	r3, #9
 801444c:	2200      	movs	r2, #0
 801444e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6a1b      	ldr	r3, [r3, #32]
 8014454:	7ada      	ldrb	r2, [r3, #11]
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6a1b      	ldr	r3, [r3, #32]
 801445e:	331c      	adds	r3, #28
 8014460:	4618      	mov	r0, r3
 8014462:	f7fe fec5 	bl	80131f0 <ld_dword>
 8014466:	4602      	mov	r2, r0
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6a1b      	ldr	r3, [r3, #32]
 8014470:	3316      	adds	r3, #22
 8014472:	4618      	mov	r0, r3
 8014474:	f7fe febc 	bl	80131f0 <ld_dword>
 8014478:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	b29a      	uxth	r2, r3
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	80da      	strh	r2, [r3, #6]
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	0c1b      	lsrs	r3, r3, #16
 8014486:	b29a      	uxth	r2, r3
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	809a      	strh	r2, [r3, #4]
 801448c:	e000      	b.n	8014490 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801448e:	bf00      	nop
}
 8014490:	3718      	adds	r7, #24
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}
	...

08014498 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b088      	sub	sp, #32
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	60fb      	str	r3, [r7, #12]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	3324      	adds	r3, #36	; 0x24
 80144ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80144ae:	220b      	movs	r2, #11
 80144b0:	2120      	movs	r1, #32
 80144b2:	68b8      	ldr	r0, [r7, #8]
 80144b4:	f7fe ff27 	bl	8013306 <mem_set>
	si = i = 0; ni = 8;
 80144b8:	2300      	movs	r3, #0
 80144ba:	613b      	str	r3, [r7, #16]
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	61fb      	str	r3, [r7, #28]
 80144c0:	2308      	movs	r3, #8
 80144c2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80144c4:	69fb      	ldr	r3, [r7, #28]
 80144c6:	1c5a      	adds	r2, r3, #1
 80144c8:	61fa      	str	r2, [r7, #28]
 80144ca:	68fa      	ldr	r2, [r7, #12]
 80144cc:	4413      	add	r3, r2
 80144ce:	781b      	ldrb	r3, [r3, #0]
 80144d0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80144d2:	7efb      	ldrb	r3, [r7, #27]
 80144d4:	2b20      	cmp	r3, #32
 80144d6:	d94e      	bls.n	8014576 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80144d8:	7efb      	ldrb	r3, [r7, #27]
 80144da:	2b2f      	cmp	r3, #47	; 0x2f
 80144dc:	d006      	beq.n	80144ec <create_name+0x54>
 80144de:	7efb      	ldrb	r3, [r7, #27]
 80144e0:	2b5c      	cmp	r3, #92	; 0x5c
 80144e2:	d110      	bne.n	8014506 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80144e4:	e002      	b.n	80144ec <create_name+0x54>
 80144e6:	69fb      	ldr	r3, [r7, #28]
 80144e8:	3301      	adds	r3, #1
 80144ea:	61fb      	str	r3, [r7, #28]
 80144ec:	68fa      	ldr	r2, [r7, #12]
 80144ee:	69fb      	ldr	r3, [r7, #28]
 80144f0:	4413      	add	r3, r2
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	2b2f      	cmp	r3, #47	; 0x2f
 80144f6:	d0f6      	beq.n	80144e6 <create_name+0x4e>
 80144f8:	68fa      	ldr	r2, [r7, #12]
 80144fa:	69fb      	ldr	r3, [r7, #28]
 80144fc:	4413      	add	r3, r2
 80144fe:	781b      	ldrb	r3, [r3, #0]
 8014500:	2b5c      	cmp	r3, #92	; 0x5c
 8014502:	d0f0      	beq.n	80144e6 <create_name+0x4e>
			break;
 8014504:	e038      	b.n	8014578 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8014506:	7efb      	ldrb	r3, [r7, #27]
 8014508:	2b2e      	cmp	r3, #46	; 0x2e
 801450a:	d003      	beq.n	8014514 <create_name+0x7c>
 801450c:	693a      	ldr	r2, [r7, #16]
 801450e:	697b      	ldr	r3, [r7, #20]
 8014510:	429a      	cmp	r2, r3
 8014512:	d30c      	bcc.n	801452e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	2b0b      	cmp	r3, #11
 8014518:	d002      	beq.n	8014520 <create_name+0x88>
 801451a:	7efb      	ldrb	r3, [r7, #27]
 801451c:	2b2e      	cmp	r3, #46	; 0x2e
 801451e:	d001      	beq.n	8014524 <create_name+0x8c>
 8014520:	2306      	movs	r3, #6
 8014522:	e044      	b.n	80145ae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8014524:	2308      	movs	r3, #8
 8014526:	613b      	str	r3, [r7, #16]
 8014528:	230b      	movs	r3, #11
 801452a:	617b      	str	r3, [r7, #20]
			continue;
 801452c:	e022      	b.n	8014574 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801452e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014532:	2b00      	cmp	r3, #0
 8014534:	da04      	bge.n	8014540 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8014536:	7efb      	ldrb	r3, [r7, #27]
 8014538:	3b80      	subs	r3, #128	; 0x80
 801453a:	4a1f      	ldr	r2, [pc, #124]	; (80145b8 <create_name+0x120>)
 801453c:	5cd3      	ldrb	r3, [r2, r3]
 801453e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014540:	7efb      	ldrb	r3, [r7, #27]
 8014542:	4619      	mov	r1, r3
 8014544:	481d      	ldr	r0, [pc, #116]	; (80145bc <create_name+0x124>)
 8014546:	f7fe ff20 	bl	801338a <chk_chr>
 801454a:	4603      	mov	r3, r0
 801454c:	2b00      	cmp	r3, #0
 801454e:	d001      	beq.n	8014554 <create_name+0xbc>
 8014550:	2306      	movs	r3, #6
 8014552:	e02c      	b.n	80145ae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014554:	7efb      	ldrb	r3, [r7, #27]
 8014556:	2b60      	cmp	r3, #96	; 0x60
 8014558:	d905      	bls.n	8014566 <create_name+0xce>
 801455a:	7efb      	ldrb	r3, [r7, #27]
 801455c:	2b7a      	cmp	r3, #122	; 0x7a
 801455e:	d802      	bhi.n	8014566 <create_name+0xce>
 8014560:	7efb      	ldrb	r3, [r7, #27]
 8014562:	3b20      	subs	r3, #32
 8014564:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	1c5a      	adds	r2, r3, #1
 801456a:	613a      	str	r2, [r7, #16]
 801456c:	68ba      	ldr	r2, [r7, #8]
 801456e:	4413      	add	r3, r2
 8014570:	7efa      	ldrb	r2, [r7, #27]
 8014572:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8014574:	e7a6      	b.n	80144c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014576:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8014578:	68fa      	ldr	r2, [r7, #12]
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	441a      	add	r2, r3
 801457e:	683b      	ldr	r3, [r7, #0]
 8014580:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d101      	bne.n	801458c <create_name+0xf4>
 8014588:	2306      	movs	r3, #6
 801458a:	e010      	b.n	80145ae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	2be5      	cmp	r3, #229	; 0xe5
 8014592:	d102      	bne.n	801459a <create_name+0x102>
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	2205      	movs	r2, #5
 8014598:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801459a:	7efb      	ldrb	r3, [r7, #27]
 801459c:	2b20      	cmp	r3, #32
 801459e:	d801      	bhi.n	80145a4 <create_name+0x10c>
 80145a0:	2204      	movs	r2, #4
 80145a2:	e000      	b.n	80145a6 <create_name+0x10e>
 80145a4:	2200      	movs	r2, #0
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	330b      	adds	r3, #11
 80145aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80145ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3720      	adds	r7, #32
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	08023108 	.word	0x08023108
 80145bc:	08022f0c 	.word	0x08022f0c

080145c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b086      	sub	sp, #24
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80145d4:	e002      	b.n	80145dc <follow_path+0x1c>
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	3301      	adds	r3, #1
 80145da:	603b      	str	r3, [r7, #0]
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	781b      	ldrb	r3, [r3, #0]
 80145e0:	2b2f      	cmp	r3, #47	; 0x2f
 80145e2:	d0f8      	beq.n	80145d6 <follow_path+0x16>
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	781b      	ldrb	r3, [r3, #0]
 80145e8:	2b5c      	cmp	r3, #92	; 0x5c
 80145ea:	d0f4      	beq.n	80145d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	2200      	movs	r2, #0
 80145f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	2b1f      	cmp	r3, #31
 80145f8:	d80a      	bhi.n	8014610 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	2280      	movs	r2, #128	; 0x80
 80145fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8014602:	2100      	movs	r1, #0
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f7ff fc3d 	bl	8013e84 <dir_sdi>
 801460a:	4603      	mov	r3, r0
 801460c:	75fb      	strb	r3, [r7, #23]
 801460e:	e043      	b.n	8014698 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014610:	463b      	mov	r3, r7
 8014612:	4619      	mov	r1, r3
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f7ff ff3f 	bl	8014498 <create_name>
 801461a:	4603      	mov	r3, r0
 801461c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801461e:	7dfb      	ldrb	r3, [r7, #23]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d134      	bne.n	801468e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f7ff fe50 	bl	80142ca <dir_find>
 801462a:	4603      	mov	r3, r0
 801462c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014634:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014636:	7dfb      	ldrb	r3, [r7, #23]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d00a      	beq.n	8014652 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801463c:	7dfb      	ldrb	r3, [r7, #23]
 801463e:	2b04      	cmp	r3, #4
 8014640:	d127      	bne.n	8014692 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014642:	7afb      	ldrb	r3, [r7, #11]
 8014644:	f003 0304 	and.w	r3, r3, #4
 8014648:	2b00      	cmp	r3, #0
 801464a:	d122      	bne.n	8014692 <follow_path+0xd2>
 801464c:	2305      	movs	r3, #5
 801464e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014650:	e01f      	b.n	8014692 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014652:	7afb      	ldrb	r3, [r7, #11]
 8014654:	f003 0304 	and.w	r3, r3, #4
 8014658:	2b00      	cmp	r3, #0
 801465a:	d11c      	bne.n	8014696 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	799b      	ldrb	r3, [r3, #6]
 8014660:	f003 0310 	and.w	r3, r3, #16
 8014664:	2b00      	cmp	r3, #0
 8014666:	d102      	bne.n	801466e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014668:	2305      	movs	r3, #5
 801466a:	75fb      	strb	r3, [r7, #23]
 801466c:	e014      	b.n	8014698 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	695b      	ldr	r3, [r3, #20]
 8014678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801467c:	4413      	add	r3, r2
 801467e:	4619      	mov	r1, r3
 8014680:	68f8      	ldr	r0, [r7, #12]
 8014682:	f7ff fd86 	bl	8014192 <ld_clust>
 8014686:	4602      	mov	r2, r0
 8014688:	693b      	ldr	r3, [r7, #16]
 801468a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801468c:	e7c0      	b.n	8014610 <follow_path+0x50>
			if (res != FR_OK) break;
 801468e:	bf00      	nop
 8014690:	e002      	b.n	8014698 <follow_path+0xd8>
				break;
 8014692:	bf00      	nop
 8014694:	e000      	b.n	8014698 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014696:	bf00      	nop
			}
		}
	}

	return res;
 8014698:	7dfb      	ldrb	r3, [r7, #23]
}
 801469a:	4618      	mov	r0, r3
 801469c:	3718      	adds	r7, #24
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80146a2:	b480      	push	{r7}
 80146a4:	b087      	sub	sp, #28
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80146aa:	f04f 33ff 	mov.w	r3, #4294967295
 80146ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d031      	beq.n	801471c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	617b      	str	r3, [r7, #20]
 80146be:	e002      	b.n	80146c6 <get_ldnumber+0x24>
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	3301      	adds	r3, #1
 80146c4:	617b      	str	r3, [r7, #20]
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	2b20      	cmp	r3, #32
 80146cc:	d903      	bls.n	80146d6 <get_ldnumber+0x34>
 80146ce:	697b      	ldr	r3, [r7, #20]
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	2b3a      	cmp	r3, #58	; 0x3a
 80146d4:	d1f4      	bne.n	80146c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80146d6:	697b      	ldr	r3, [r7, #20]
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	2b3a      	cmp	r3, #58	; 0x3a
 80146dc:	d11c      	bne.n	8014718 <get_ldnumber+0x76>
			tp = *path;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	1c5a      	adds	r2, r3, #1
 80146e8:	60fa      	str	r2, [r7, #12]
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	3b30      	subs	r3, #48	; 0x30
 80146ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	2b09      	cmp	r3, #9
 80146f4:	d80e      	bhi.n	8014714 <get_ldnumber+0x72>
 80146f6:	68fa      	ldr	r2, [r7, #12]
 80146f8:	697b      	ldr	r3, [r7, #20]
 80146fa:	429a      	cmp	r2, r3
 80146fc:	d10a      	bne.n	8014714 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d107      	bne.n	8014714 <get_ldnumber+0x72>
					vol = (int)i;
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014708:	697b      	ldr	r3, [r7, #20]
 801470a:	3301      	adds	r3, #1
 801470c:	617b      	str	r3, [r7, #20]
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	697a      	ldr	r2, [r7, #20]
 8014712:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	e002      	b.n	801471e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014718:	2300      	movs	r3, #0
 801471a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801471c:	693b      	ldr	r3, [r7, #16]
}
 801471e:	4618      	mov	r0, r3
 8014720:	371c      	adds	r7, #28
 8014722:	46bd      	mov	sp, r7
 8014724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014728:	4770      	bx	lr
	...

0801472c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b082      	sub	sp, #8
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
 8014734:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2200      	movs	r2, #0
 801473a:	70da      	strb	r2, [r3, #3]
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f04f 32ff 	mov.w	r2, #4294967295
 8014742:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014744:	6839      	ldr	r1, [r7, #0]
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f7ff f81c 	bl	8013784 <move_window>
 801474c:	4603      	mov	r3, r0
 801474e:	2b00      	cmp	r3, #0
 8014750:	d001      	beq.n	8014756 <check_fs+0x2a>
 8014752:	2304      	movs	r3, #4
 8014754:	e038      	b.n	80147c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	3334      	adds	r3, #52	; 0x34
 801475a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801475e:	4618      	mov	r0, r3
 8014760:	f7fe fd2e 	bl	80131c0 <ld_word>
 8014764:	4603      	mov	r3, r0
 8014766:	461a      	mov	r2, r3
 8014768:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801476c:	429a      	cmp	r2, r3
 801476e:	d001      	beq.n	8014774 <check_fs+0x48>
 8014770:	2303      	movs	r3, #3
 8014772:	e029      	b.n	80147c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801477a:	2be9      	cmp	r3, #233	; 0xe9
 801477c:	d009      	beq.n	8014792 <check_fs+0x66>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014784:	2beb      	cmp	r3, #235	; 0xeb
 8014786:	d11e      	bne.n	80147c6 <check_fs+0x9a>
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801478e:	2b90      	cmp	r3, #144	; 0x90
 8014790:	d119      	bne.n	80147c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	3334      	adds	r3, #52	; 0x34
 8014796:	3336      	adds	r3, #54	; 0x36
 8014798:	4618      	mov	r0, r3
 801479a:	f7fe fd29 	bl	80131f0 <ld_dword>
 801479e:	4603      	mov	r3, r0
 80147a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80147a4:	4a0a      	ldr	r2, [pc, #40]	; (80147d0 <check_fs+0xa4>)
 80147a6:	4293      	cmp	r3, r2
 80147a8:	d101      	bne.n	80147ae <check_fs+0x82>
 80147aa:	2300      	movs	r3, #0
 80147ac:	e00c      	b.n	80147c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	3334      	adds	r3, #52	; 0x34
 80147b2:	3352      	adds	r3, #82	; 0x52
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fe fd1b 	bl	80131f0 <ld_dword>
 80147ba:	4603      	mov	r3, r0
 80147bc:	4a05      	ldr	r2, [pc, #20]	; (80147d4 <check_fs+0xa8>)
 80147be:	4293      	cmp	r3, r2
 80147c0:	d101      	bne.n	80147c6 <check_fs+0x9a>
 80147c2:	2300      	movs	r3, #0
 80147c4:	e000      	b.n	80147c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80147c6:	2302      	movs	r3, #2
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	3708      	adds	r7, #8
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}
 80147d0:	00544146 	.word	0x00544146
 80147d4:	33544146 	.word	0x33544146

080147d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b096      	sub	sp, #88	; 0x58
 80147dc:	af00      	add	r7, sp, #0
 80147de:	60f8      	str	r0, [r7, #12]
 80147e0:	60b9      	str	r1, [r7, #8]
 80147e2:	4613      	mov	r3, r2
 80147e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	2200      	movs	r2, #0
 80147ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80147ec:	68f8      	ldr	r0, [r7, #12]
 80147ee:	f7ff ff58 	bl	80146a2 <get_ldnumber>
 80147f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80147f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	da01      	bge.n	80147fe <find_volume+0x26>
 80147fa:	230b      	movs	r3, #11
 80147fc:	e236      	b.n	8014c6c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80147fe:	4aac      	ldr	r2, [pc, #688]	; (8014ab0 <find_volume+0x2d8>)
 8014800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014806:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801480a:	2b00      	cmp	r3, #0
 801480c:	d101      	bne.n	8014812 <find_volume+0x3a>
 801480e:	230c      	movs	r3, #12
 8014810:	e22c      	b.n	8014c6c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8014812:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014814:	f7fe fdd4 	bl	80133c0 <lock_fs>
 8014818:	4603      	mov	r3, r0
 801481a:	2b00      	cmp	r3, #0
 801481c:	d101      	bne.n	8014822 <find_volume+0x4a>
 801481e:	230f      	movs	r3, #15
 8014820:	e224      	b.n	8014c6c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014826:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014828:	79fb      	ldrb	r3, [r7, #7]
 801482a:	f023 0301 	bic.w	r3, r3, #1
 801482e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014832:	781b      	ldrb	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d01a      	beq.n	801486e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8014838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801483a:	785b      	ldrb	r3, [r3, #1]
 801483c:	4618      	mov	r0, r3
 801483e:	f7fe fc21 	bl	8013084 <disk_status>
 8014842:	4603      	mov	r3, r0
 8014844:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801484c:	f003 0301 	and.w	r3, r3, #1
 8014850:	2b00      	cmp	r3, #0
 8014852:	d10c      	bne.n	801486e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014854:	79fb      	ldrb	r3, [r7, #7]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d007      	beq.n	801486a <find_volume+0x92>
 801485a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801485e:	f003 0304 	and.w	r3, r3, #4
 8014862:	2b00      	cmp	r3, #0
 8014864:	d001      	beq.n	801486a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8014866:	230a      	movs	r3, #10
 8014868:	e200      	b.n	8014c6c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801486a:	2300      	movs	r3, #0
 801486c:	e1fe      	b.n	8014c6c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014870:	2200      	movs	r2, #0
 8014872:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014876:	b2da      	uxtb	r2, r3
 8014878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801487a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801487e:	785b      	ldrb	r3, [r3, #1]
 8014880:	4618      	mov	r0, r3
 8014882:	f7fe fc19 	bl	80130b8 <disk_initialize>
 8014886:	4603      	mov	r3, r0
 8014888:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801488c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014890:	f003 0301 	and.w	r3, r3, #1
 8014894:	2b00      	cmp	r3, #0
 8014896:	d001      	beq.n	801489c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014898:	2303      	movs	r3, #3
 801489a:	e1e7      	b.n	8014c6c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801489c:	79fb      	ldrb	r3, [r7, #7]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d007      	beq.n	80148b2 <find_volume+0xda>
 80148a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80148a6:	f003 0304 	and.w	r3, r3, #4
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d001      	beq.n	80148b2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80148ae:	230a      	movs	r3, #10
 80148b0:	e1dc      	b.n	8014c6c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80148b2:	2300      	movs	r3, #0
 80148b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80148b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80148b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80148ba:	f7ff ff37 	bl	801472c <check_fs>
 80148be:	4603      	mov	r3, r0
 80148c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80148c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148c8:	2b02      	cmp	r3, #2
 80148ca:	d14b      	bne.n	8014964 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80148cc:	2300      	movs	r3, #0
 80148ce:	643b      	str	r3, [r7, #64]	; 0x40
 80148d0:	e01f      	b.n	8014912 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80148d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80148d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148da:	011b      	lsls	r3, r3, #4
 80148dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80148e0:	4413      	add	r3, r2
 80148e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80148e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e6:	3304      	adds	r3, #4
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d006      	beq.n	80148fc <find_volume+0x124>
 80148ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f0:	3308      	adds	r3, #8
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7fe fc7c 	bl	80131f0 <ld_dword>
 80148f8:	4602      	mov	r2, r0
 80148fa:	e000      	b.n	80148fe <find_volume+0x126>
 80148fc:	2200      	movs	r2, #0
 80148fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014900:	009b      	lsls	r3, r3, #2
 8014902:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014906:	440b      	add	r3, r1
 8014908:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801490e:	3301      	adds	r3, #1
 8014910:	643b      	str	r3, [r7, #64]	; 0x40
 8014912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014914:	2b03      	cmp	r3, #3
 8014916:	d9dc      	bls.n	80148d2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014918:	2300      	movs	r3, #0
 801491a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801491c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801491e:	2b00      	cmp	r3, #0
 8014920:	d002      	beq.n	8014928 <find_volume+0x150>
 8014922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014924:	3b01      	subs	r3, #1
 8014926:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801492a:	009b      	lsls	r3, r3, #2
 801492c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014930:	4413      	add	r3, r2
 8014932:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014936:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801493a:	2b00      	cmp	r3, #0
 801493c:	d005      	beq.n	801494a <find_volume+0x172>
 801493e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014940:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014942:	f7ff fef3 	bl	801472c <check_fs>
 8014946:	4603      	mov	r3, r0
 8014948:	e000      	b.n	801494c <find_volume+0x174>
 801494a:	2303      	movs	r3, #3
 801494c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014950:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014954:	2b01      	cmp	r3, #1
 8014956:	d905      	bls.n	8014964 <find_volume+0x18c>
 8014958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801495a:	3301      	adds	r3, #1
 801495c:	643b      	str	r3, [r7, #64]	; 0x40
 801495e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014960:	2b03      	cmp	r3, #3
 8014962:	d9e1      	bls.n	8014928 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014964:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014968:	2b04      	cmp	r3, #4
 801496a:	d101      	bne.n	8014970 <find_volume+0x198>
 801496c:	2301      	movs	r3, #1
 801496e:	e17d      	b.n	8014c6c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014970:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014974:	2b01      	cmp	r3, #1
 8014976:	d901      	bls.n	801497c <find_volume+0x1a4>
 8014978:	230d      	movs	r3, #13
 801497a:	e177      	b.n	8014c6c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497e:	3334      	adds	r3, #52	; 0x34
 8014980:	330b      	adds	r3, #11
 8014982:	4618      	mov	r0, r3
 8014984:	f7fe fc1c 	bl	80131c0 <ld_word>
 8014988:	4603      	mov	r3, r0
 801498a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801498e:	d001      	beq.n	8014994 <find_volume+0x1bc>
 8014990:	230d      	movs	r3, #13
 8014992:	e16b      	b.n	8014c6c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014996:	3334      	adds	r3, #52	; 0x34
 8014998:	3316      	adds	r3, #22
 801499a:	4618      	mov	r0, r3
 801499c:	f7fe fc10 	bl	80131c0 <ld_word>
 80149a0:	4603      	mov	r3, r0
 80149a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80149a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d106      	bne.n	80149b8 <find_volume+0x1e0>
 80149aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ac:	3334      	adds	r3, #52	; 0x34
 80149ae:	3324      	adds	r3, #36	; 0x24
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7fe fc1d 	bl	80131f0 <ld_dword>
 80149b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80149b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80149bc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80149be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80149c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80149c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ca:	789b      	ldrb	r3, [r3, #2]
 80149cc:	2b01      	cmp	r3, #1
 80149ce:	d005      	beq.n	80149dc <find_volume+0x204>
 80149d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149d2:	789b      	ldrb	r3, [r3, #2]
 80149d4:	2b02      	cmp	r3, #2
 80149d6:	d001      	beq.n	80149dc <find_volume+0x204>
 80149d8:	230d      	movs	r3, #13
 80149da:	e147      	b.n	8014c6c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80149dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149de:	789b      	ldrb	r3, [r3, #2]
 80149e0:	461a      	mov	r2, r3
 80149e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149e4:	fb02 f303 	mul.w	r3, r2, r3
 80149e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80149ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80149f0:	b29a      	uxth	r2, r3
 80149f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80149f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f8:	895b      	ldrh	r3, [r3, #10]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d008      	beq.n	8014a10 <find_volume+0x238>
 80149fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a00:	895b      	ldrh	r3, [r3, #10]
 8014a02:	461a      	mov	r2, r3
 8014a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a06:	895b      	ldrh	r3, [r3, #10]
 8014a08:	3b01      	subs	r3, #1
 8014a0a:	4013      	ands	r3, r2
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d001      	beq.n	8014a14 <find_volume+0x23c>
 8014a10:	230d      	movs	r3, #13
 8014a12:	e12b      	b.n	8014c6c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a16:	3334      	adds	r3, #52	; 0x34
 8014a18:	3311      	adds	r3, #17
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f7fe fbd0 	bl	80131c0 <ld_word>
 8014a20:	4603      	mov	r3, r0
 8014a22:	461a      	mov	r2, r3
 8014a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2a:	891b      	ldrh	r3, [r3, #8]
 8014a2c:	f003 030f 	and.w	r3, r3, #15
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d001      	beq.n	8014a3a <find_volume+0x262>
 8014a36:	230d      	movs	r3, #13
 8014a38:	e118      	b.n	8014c6c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3c:	3334      	adds	r3, #52	; 0x34
 8014a3e:	3313      	adds	r3, #19
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7fe fbbd 	bl	80131c0 <ld_word>
 8014a46:	4603      	mov	r3, r0
 8014a48:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d106      	bne.n	8014a5e <find_volume+0x286>
 8014a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a52:	3334      	adds	r3, #52	; 0x34
 8014a54:	3320      	adds	r3, #32
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7fe fbca 	bl	80131f0 <ld_dword>
 8014a5c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a60:	3334      	adds	r3, #52	; 0x34
 8014a62:	330e      	adds	r3, #14
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7fe fbab 	bl	80131c0 <ld_word>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014a6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d101      	bne.n	8014a78 <find_volume+0x2a0>
 8014a74:	230d      	movs	r3, #13
 8014a76:	e0f9      	b.n	8014c6c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014a78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a7c:	4413      	add	r3, r2
 8014a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a80:	8912      	ldrh	r2, [r2, #8]
 8014a82:	0912      	lsrs	r2, r2, #4
 8014a84:	b292      	uxth	r2, r2
 8014a86:	4413      	add	r3, r2
 8014a88:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8e:	429a      	cmp	r2, r3
 8014a90:	d201      	bcs.n	8014a96 <find_volume+0x2be>
 8014a92:	230d      	movs	r3, #13
 8014a94:	e0ea      	b.n	8014c6c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9a:	1ad3      	subs	r3, r2, r3
 8014a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a9e:	8952      	ldrh	r2, [r2, #10]
 8014aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8014aa4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d103      	bne.n	8014ab4 <find_volume+0x2dc>
 8014aac:	230d      	movs	r3, #13
 8014aae:	e0dd      	b.n	8014c6c <find_volume+0x494>
 8014ab0:	2000083c 	.word	0x2000083c
		fmt = FS_FAT32;
 8014ab4:	2303      	movs	r3, #3
 8014ab6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014abc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014ac0:	4293      	cmp	r3, r2
 8014ac2:	d802      	bhi.n	8014aca <find_volume+0x2f2>
 8014ac4:	2302      	movs	r3, #2
 8014ac6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014acc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014ad0:	4293      	cmp	r3, r2
 8014ad2:	d802      	bhi.n	8014ada <find_volume+0x302>
 8014ad4:	2301      	movs	r3, #1
 8014ad6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014adc:	1c9a      	adds	r2, r3, #2
 8014ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8014ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014ae6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014ae8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014aec:	441a      	add	r2, r3
 8014aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014af2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af6:	441a      	add	r2, r3
 8014af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014afa:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8014afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014b00:	2b03      	cmp	r3, #3
 8014b02:	d11e      	bne.n	8014b42 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b06:	3334      	adds	r3, #52	; 0x34
 8014b08:	332a      	adds	r3, #42	; 0x2a
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fe fb58 	bl	80131c0 <ld_word>
 8014b10:	4603      	mov	r3, r0
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d001      	beq.n	8014b1a <find_volume+0x342>
 8014b16:	230d      	movs	r3, #13
 8014b18:	e0a8      	b.n	8014c6c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b1c:	891b      	ldrh	r3, [r3, #8]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d001      	beq.n	8014b26 <find_volume+0x34e>
 8014b22:	230d      	movs	r3, #13
 8014b24:	e0a2      	b.n	8014c6c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b28:	3334      	adds	r3, #52	; 0x34
 8014b2a:	332c      	adds	r3, #44	; 0x2c
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f7fe fb5f 	bl	80131f0 <ld_dword>
 8014b32:	4602      	mov	r2, r0
 8014b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b36:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b3a:	699b      	ldr	r3, [r3, #24]
 8014b3c:	009b      	lsls	r3, r3, #2
 8014b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8014b40:	e01f      	b.n	8014b82 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b44:	891b      	ldrh	r3, [r3, #8]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d101      	bne.n	8014b4e <find_volume+0x376>
 8014b4a:	230d      	movs	r3, #13
 8014b4c:	e08e      	b.n	8014c6c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b54:	441a      	add	r2, r3
 8014b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b58:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014b5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014b5e:	2b02      	cmp	r3, #2
 8014b60:	d103      	bne.n	8014b6a <find_volume+0x392>
 8014b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b64:	699b      	ldr	r3, [r3, #24]
 8014b66:	005b      	lsls	r3, r3, #1
 8014b68:	e00a      	b.n	8014b80 <find_volume+0x3a8>
 8014b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b6c:	699a      	ldr	r2, [r3, #24]
 8014b6e:	4613      	mov	r3, r2
 8014b70:	005b      	lsls	r3, r3, #1
 8014b72:	4413      	add	r3, r2
 8014b74:	085a      	lsrs	r2, r3, #1
 8014b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b78:	699b      	ldr	r3, [r3, #24]
 8014b7a:	f003 0301 	and.w	r3, r3, #1
 8014b7e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014b80:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b84:	69da      	ldr	r2, [r3, #28]
 8014b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b88:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014b8c:	0a5b      	lsrs	r3, r3, #9
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d201      	bcs.n	8014b96 <find_volume+0x3be>
 8014b92:	230d      	movs	r3, #13
 8014b94:	e06a      	b.n	8014c6c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b98:	f04f 32ff 	mov.w	r2, #4294967295
 8014b9c:	615a      	str	r2, [r3, #20]
 8014b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ba0:	695a      	ldr	r2, [r3, #20]
 8014ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ba4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ba8:	2280      	movs	r2, #128	; 0x80
 8014baa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014bac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014bb0:	2b03      	cmp	r3, #3
 8014bb2:	d149      	bne.n	8014c48 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb6:	3334      	adds	r3, #52	; 0x34
 8014bb8:	3330      	adds	r3, #48	; 0x30
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7fe fb00 	bl	80131c0 <ld_word>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	2b01      	cmp	r3, #1
 8014bc4:	d140      	bne.n	8014c48 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bc8:	3301      	adds	r3, #1
 8014bca:	4619      	mov	r1, r3
 8014bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014bce:	f7fe fdd9 	bl	8013784 <move_window>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d137      	bne.n	8014c48 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8014bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bda:	2200      	movs	r2, #0
 8014bdc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014be0:	3334      	adds	r3, #52	; 0x34
 8014be2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7fe faea 	bl	80131c0 <ld_word>
 8014bec:	4603      	mov	r3, r0
 8014bee:	461a      	mov	r2, r3
 8014bf0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d127      	bne.n	8014c48 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bfa:	3334      	adds	r3, #52	; 0x34
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7fe faf7 	bl	80131f0 <ld_dword>
 8014c02:	4603      	mov	r3, r0
 8014c04:	4a1b      	ldr	r2, [pc, #108]	; (8014c74 <find_volume+0x49c>)
 8014c06:	4293      	cmp	r3, r2
 8014c08:	d11e      	bne.n	8014c48 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c0c:	3334      	adds	r3, #52	; 0x34
 8014c0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014c12:	4618      	mov	r0, r3
 8014c14:	f7fe faec 	bl	80131f0 <ld_dword>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	4a17      	ldr	r2, [pc, #92]	; (8014c78 <find_volume+0x4a0>)
 8014c1c:	4293      	cmp	r3, r2
 8014c1e:	d113      	bne.n	8014c48 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c22:	3334      	adds	r3, #52	; 0x34
 8014c24:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7fe fae1 	bl	80131f0 <ld_dword>
 8014c2e:	4602      	mov	r2, r0
 8014c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c32:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c36:	3334      	adds	r3, #52	; 0x34
 8014c38:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7fe fad7 	bl	80131f0 <ld_dword>
 8014c42:	4602      	mov	r2, r0
 8014c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c46:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c4a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014c4e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014c50:	4b0a      	ldr	r3, [pc, #40]	; (8014c7c <find_volume+0x4a4>)
 8014c52:	881b      	ldrh	r3, [r3, #0]
 8014c54:	3301      	adds	r3, #1
 8014c56:	b29a      	uxth	r2, r3
 8014c58:	4b08      	ldr	r3, [pc, #32]	; (8014c7c <find_volume+0x4a4>)
 8014c5a:	801a      	strh	r2, [r3, #0]
 8014c5c:	4b07      	ldr	r3, [pc, #28]	; (8014c7c <find_volume+0x4a4>)
 8014c5e:	881a      	ldrh	r2, [r3, #0]
 8014c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c62:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014c64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014c66:	f7fe fd25 	bl	80136b4 <clear_lock>
#endif
	return FR_OK;
 8014c6a:	2300      	movs	r3, #0
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3758      	adds	r7, #88	; 0x58
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	41615252 	.word	0x41615252
 8014c78:	61417272 	.word	0x61417272
 8014c7c:	20000840 	.word	0x20000840

08014c80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
 8014c88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014c8a:	2309      	movs	r3, #9
 8014c8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d02e      	beq.n	8014cf2 <validate+0x72>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d02a      	beq.n	8014cf2 <validate+0x72>
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d025      	beq.n	8014cf2 <validate+0x72>
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	889a      	ldrh	r2, [r3, #4]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	88db      	ldrh	r3, [r3, #6]
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d11e      	bne.n	8014cf2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7fe fb81 	bl	80133c0 <lock_fs>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d014      	beq.n	8014cee <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	785b      	ldrb	r3, [r3, #1]
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fe f9da 	bl	8013084 <disk_status>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	f003 0301 	and.w	r3, r3, #1
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d102      	bne.n	8014ce0 <validate+0x60>
				res = FR_OK;
 8014cda:	2300      	movs	r3, #0
 8014cdc:	73fb      	strb	r3, [r7, #15]
 8014cde:	e008      	b.n	8014cf2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	2100      	movs	r1, #0
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7fe fb80 	bl	80133ec <unlock_fs>
 8014cec:	e001      	b.n	8014cf2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014cee:	230f      	movs	r3, #15
 8014cf0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014cf2:	7bfb      	ldrb	r3, [r7, #15]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d102      	bne.n	8014cfe <validate+0x7e>
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	e000      	b.n	8014d00 <validate+0x80>
 8014cfe:	2300      	movs	r3, #0
 8014d00:	683a      	ldr	r2, [r7, #0]
 8014d02:	6013      	str	r3, [r2, #0]
	return res;
 8014d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	3710      	adds	r7, #16
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}
	...

08014d10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b088      	sub	sp, #32
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	60b9      	str	r1, [r7, #8]
 8014d1a:	4613      	mov	r3, r2
 8014d1c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014d22:	f107 0310 	add.w	r3, r7, #16
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7ff fcbb 	bl	80146a2 <get_ldnumber>
 8014d2c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014d2e:	69fb      	ldr	r3, [r7, #28]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	da01      	bge.n	8014d38 <f_mount+0x28>
 8014d34:	230b      	movs	r3, #11
 8014d36:	e048      	b.n	8014dca <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014d38:	4a26      	ldr	r2, [pc, #152]	; (8014dd4 <f_mount+0xc4>)
 8014d3a:	69fb      	ldr	r3, [r7, #28]
 8014d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d40:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014d42:	69bb      	ldr	r3, [r7, #24]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d00f      	beq.n	8014d68 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014d48:	69b8      	ldr	r0, [r7, #24]
 8014d4a:	f7fe fcb3 	bl	80136b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014d4e:	69bb      	ldr	r3, [r7, #24]
 8014d50:	68db      	ldr	r3, [r3, #12]
 8014d52:	4618      	mov	r0, r3
 8014d54:	f001 f812 	bl	8015d7c <ff_del_syncobj>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d101      	bne.n	8014d62 <f_mount+0x52>
 8014d5e:	2302      	movs	r3, #2
 8014d60:	e033      	b.n	8014dca <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014d62:	69bb      	ldr	r3, [r7, #24]
 8014d64:	2200      	movs	r2, #0
 8014d66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d00f      	beq.n	8014d8e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	2200      	movs	r2, #0
 8014d72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014d74:	69fb      	ldr	r3, [r7, #28]
 8014d76:	b2da      	uxtb	r2, r3
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	330c      	adds	r3, #12
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	4610      	mov	r0, r2
 8014d80:	f000 ffe1 	bl	8015d46 <ff_cre_syncobj>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d101      	bne.n	8014d8e <f_mount+0x7e>
 8014d8a:	2302      	movs	r3, #2
 8014d8c:	e01d      	b.n	8014dca <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014d8e:	68fa      	ldr	r2, [r7, #12]
 8014d90:	4910      	ldr	r1, [pc, #64]	; (8014dd4 <f_mount+0xc4>)
 8014d92:	69fb      	ldr	r3, [r7, #28]
 8014d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d002      	beq.n	8014da4 <f_mount+0x94>
 8014d9e:	79fb      	ldrb	r3, [r7, #7]
 8014da0:	2b01      	cmp	r3, #1
 8014da2:	d001      	beq.n	8014da8 <f_mount+0x98>
 8014da4:	2300      	movs	r3, #0
 8014da6:	e010      	b.n	8014dca <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014da8:	f107 010c 	add.w	r1, r7, #12
 8014dac:	f107 0308 	add.w	r3, r7, #8
 8014db0:	2200      	movs	r2, #0
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7ff fd10 	bl	80147d8 <find_volume>
 8014db8:	4603      	mov	r3, r0
 8014dba:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	7dfa      	ldrb	r2, [r7, #23]
 8014dc0:	4611      	mov	r1, r2
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7fe fb12 	bl	80133ec <unlock_fs>
 8014dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3720      	adds	r7, #32
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}
 8014dd2:	bf00      	nop
 8014dd4:	2000083c 	.word	0x2000083c

08014dd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b098      	sub	sp, #96	; 0x60
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	60f8      	str	r0, [r7, #12]
 8014de0:	60b9      	str	r1, [r7, #8]
 8014de2:	4613      	mov	r3, r2
 8014de4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d101      	bne.n	8014df0 <f_open+0x18>
 8014dec:	2309      	movs	r3, #9
 8014dee:	e1b4      	b.n	801515a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014df0:	79fb      	ldrb	r3, [r7, #7]
 8014df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014df6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014df8:	79fa      	ldrb	r2, [r7, #7]
 8014dfa:	f107 0110 	add.w	r1, r7, #16
 8014dfe:	f107 0308 	add.w	r3, r7, #8
 8014e02:	4618      	mov	r0, r3
 8014e04:	f7ff fce8 	bl	80147d8 <find_volume>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014e0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	f040 8191 	bne.w	801513a <f_open+0x362>
		dj.obj.fs = fs;
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014e1c:	68ba      	ldr	r2, [r7, #8]
 8014e1e:	f107 0314 	add.w	r3, r7, #20
 8014e22:	4611      	mov	r1, r2
 8014e24:	4618      	mov	r0, r3
 8014e26:	f7ff fbcb 	bl	80145c0 <follow_path>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014e30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d11a      	bne.n	8014e6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014e38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014e3c:	b25b      	sxtb	r3, r3
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	da03      	bge.n	8014e4a <f_open+0x72>
				res = FR_INVALID_NAME;
 8014e42:	2306      	movs	r3, #6
 8014e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014e48:	e011      	b.n	8014e6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014e4a:	79fb      	ldrb	r3, [r7, #7]
 8014e4c:	f023 0301 	bic.w	r3, r3, #1
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	bf14      	ite	ne
 8014e54:	2301      	movne	r3, #1
 8014e56:	2300      	moveq	r3, #0
 8014e58:	b2db      	uxtb	r3, r3
 8014e5a:	461a      	mov	r2, r3
 8014e5c:	f107 0314 	add.w	r3, r7, #20
 8014e60:	4611      	mov	r1, r2
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7fe fade 	bl	8013424 <chk_lock>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014e6e:	79fb      	ldrb	r3, [r7, #7]
 8014e70:	f003 031c 	and.w	r3, r3, #28
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d07f      	beq.n	8014f78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014e78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d017      	beq.n	8014eb0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014e80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e84:	2b04      	cmp	r3, #4
 8014e86:	d10e      	bne.n	8014ea6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014e88:	f7fe fb28 	bl	80134dc <enq_lock>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d006      	beq.n	8014ea0 <f_open+0xc8>
 8014e92:	f107 0314 	add.w	r3, r7, #20
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7ff fa6c 	bl	8014374 <dir_register>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	e000      	b.n	8014ea2 <f_open+0xca>
 8014ea0:	2312      	movs	r3, #18
 8014ea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014ea6:	79fb      	ldrb	r3, [r7, #7]
 8014ea8:	f043 0308 	orr.w	r3, r3, #8
 8014eac:	71fb      	strb	r3, [r7, #7]
 8014eae:	e010      	b.n	8014ed2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014eb0:	7ebb      	ldrb	r3, [r7, #26]
 8014eb2:	f003 0311 	and.w	r3, r3, #17
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d003      	beq.n	8014ec2 <f_open+0xea>
					res = FR_DENIED;
 8014eba:	2307      	movs	r3, #7
 8014ebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014ec0:	e007      	b.n	8014ed2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014ec2:	79fb      	ldrb	r3, [r7, #7]
 8014ec4:	f003 0304 	and.w	r3, r3, #4
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d002      	beq.n	8014ed2 <f_open+0xfa>
 8014ecc:	2308      	movs	r3, #8
 8014ece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d168      	bne.n	8014fac <f_open+0x1d4>
 8014eda:	79fb      	ldrb	r3, [r7, #7]
 8014edc:	f003 0308 	and.w	r3, r3, #8
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d063      	beq.n	8014fac <f_open+0x1d4>
				dw = GET_FATTIME();
 8014ee4:	f7fb ff2e 	bl	8010d44 <get_fattime>
 8014ee8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014eec:	330e      	adds	r3, #14
 8014eee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7fe f9bb 	bl	801326c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ef8:	3316      	adds	r3, #22
 8014efa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7fe f9b5 	bl	801326c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f04:	330b      	adds	r3, #11
 8014f06:	2220      	movs	r2, #32
 8014f08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f0e:	4611      	mov	r1, r2
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7ff f93e 	bl	8014192 <ld_clust>
 8014f16:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014f18:	693b      	ldr	r3, [r7, #16]
 8014f1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f7ff f956 	bl	80141d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f26:	331c      	adds	r3, #28
 8014f28:	2100      	movs	r1, #0
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7fe f99e 	bl	801326c <st_dword>
					fs->wflag = 1;
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	2201      	movs	r2, #1
 8014f34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d037      	beq.n	8014fac <f_open+0x1d4>
						dw = fs->winsect;
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f40:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014f42:	f107 0314 	add.w	r3, r7, #20
 8014f46:	2200      	movs	r2, #0
 8014f48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7fe fe69 	bl	8013c22 <remove_chain>
 8014f50:	4603      	mov	r3, r0
 8014f52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014f56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d126      	bne.n	8014fac <f_open+0x1d4>
							res = move_window(fs, dw);
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7fe fc0e 	bl	8013784 <move_window>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014f72:	3a01      	subs	r2, #1
 8014f74:	611a      	str	r2, [r3, #16]
 8014f76:	e019      	b.n	8014fac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014f78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d115      	bne.n	8014fac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014f80:	7ebb      	ldrb	r3, [r7, #26]
 8014f82:	f003 0310 	and.w	r3, r3, #16
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d003      	beq.n	8014f92 <f_open+0x1ba>
					res = FR_NO_FILE;
 8014f8a:	2304      	movs	r3, #4
 8014f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014f90:	e00c      	b.n	8014fac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014f92:	79fb      	ldrb	r3, [r7, #7]
 8014f94:	f003 0302 	and.w	r3, r3, #2
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d007      	beq.n	8014fac <f_open+0x1d4>
 8014f9c:	7ebb      	ldrb	r3, [r7, #26]
 8014f9e:	f003 0301 	and.w	r3, r3, #1
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d002      	beq.n	8014fac <f_open+0x1d4>
						res = FR_DENIED;
 8014fa6:	2307      	movs	r3, #7
 8014fa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014fac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d128      	bne.n	8015006 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014fb4:	79fb      	ldrb	r3, [r7, #7]
 8014fb6:	f003 0308 	and.w	r3, r3, #8
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d003      	beq.n	8014fc6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014fbe:	79fb      	ldrb	r3, [r7, #7]
 8014fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fc4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014fd4:	79fb      	ldrb	r3, [r7, #7]
 8014fd6:	f023 0301 	bic.w	r3, r3, #1
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	bf14      	ite	ne
 8014fde:	2301      	movne	r3, #1
 8014fe0:	2300      	moveq	r3, #0
 8014fe2:	b2db      	uxtb	r3, r3
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	f107 0314 	add.w	r3, r7, #20
 8014fea:	4611      	mov	r1, r2
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fe fa97 	bl	8013520 <inc_lock>
 8014ff2:	4602      	mov	r2, r0
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	691b      	ldr	r3, [r3, #16]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d102      	bne.n	8015006 <f_open+0x22e>
 8015000:	2302      	movs	r3, #2
 8015002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801500a:	2b00      	cmp	r3, #0
 801500c:	f040 8095 	bne.w	801513a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015014:	4611      	mov	r1, r2
 8015016:	4618      	mov	r0, r3
 8015018:	f7ff f8bb 	bl	8014192 <ld_clust>
 801501c:	4602      	mov	r2, r0
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015024:	331c      	adds	r3, #28
 8015026:	4618      	mov	r0, r3
 8015028:	f7fe f8e2 	bl	80131f0 <ld_dword>
 801502c:	4602      	mov	r2, r0
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	2200      	movs	r2, #0
 8015036:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8015038:	693a      	ldr	r2, [r7, #16]
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	88da      	ldrh	r2, [r3, #6]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	79fa      	ldrb	r2, [r7, #7]
 801504a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	2200      	movs	r2, #0
 8015050:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	2200      	movs	r2, #0
 8015056:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	2200      	movs	r2, #0
 801505c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	3330      	adds	r3, #48	; 0x30
 8015062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015066:	2100      	movs	r1, #0
 8015068:	4618      	mov	r0, r3
 801506a:	f7fe f94c 	bl	8013306 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801506e:	79fb      	ldrb	r3, [r7, #7]
 8015070:	f003 0320 	and.w	r3, r3, #32
 8015074:	2b00      	cmp	r3, #0
 8015076:	d060      	beq.n	801513a <f_open+0x362>
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d05c      	beq.n	801513a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	68da      	ldr	r2, [r3, #12]
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015088:	693b      	ldr	r3, [r7, #16]
 801508a:	895b      	ldrh	r3, [r3, #10]
 801508c:	025b      	lsls	r3, r3, #9
 801508e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	689b      	ldr	r3, [r3, #8]
 8015094:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	68db      	ldr	r3, [r3, #12]
 801509a:	657b      	str	r3, [r7, #84]	; 0x54
 801509c:	e016      	b.n	80150cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7fe fc29 	bl	80138fa <get_fat>
 80150a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80150aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80150ac:	2b01      	cmp	r3, #1
 80150ae:	d802      	bhi.n	80150b6 <f_open+0x2de>
 80150b0:	2302      	movs	r3, #2
 80150b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80150b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80150b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150bc:	d102      	bne.n	80150c4 <f_open+0x2ec>
 80150be:	2301      	movs	r3, #1
 80150c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80150c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80150c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150c8:	1ad3      	subs	r3, r2, r3
 80150ca:	657b      	str	r3, [r7, #84]	; 0x54
 80150cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d103      	bne.n	80150dc <f_open+0x304>
 80150d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80150d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150d8:	429a      	cmp	r2, r3
 80150da:	d8e0      	bhi.n	801509e <f_open+0x2c6>
				}
				fp->clust = clst;
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80150e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80150e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d127      	bne.n	801513a <f_open+0x362>
 80150ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d022      	beq.n	801513a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7fe fbdf 	bl	80138bc <clust2sect>
 80150fe:	6478      	str	r0, [r7, #68]	; 0x44
 8015100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015102:	2b00      	cmp	r3, #0
 8015104:	d103      	bne.n	801510e <f_open+0x336>
						res = FR_INT_ERR;
 8015106:	2302      	movs	r3, #2
 8015108:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801510c:	e015      	b.n	801513a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801510e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015110:	0a5a      	lsrs	r2, r3, #9
 8015112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015114:	441a      	add	r2, r3
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801511a:	693b      	ldr	r3, [r7, #16]
 801511c:	7858      	ldrb	r0, [r3, #1]
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	6a1a      	ldr	r2, [r3, #32]
 8015128:	2301      	movs	r3, #1
 801512a:	f7fd ffeb 	bl	8013104 <disk_read>
 801512e:	4603      	mov	r3, r0
 8015130:	2b00      	cmp	r3, #0
 8015132:	d002      	beq.n	801513a <f_open+0x362>
 8015134:	2301      	movs	r3, #1
 8015136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801513a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801513e:	2b00      	cmp	r3, #0
 8015140:	d002      	beq.n	8015148 <f_open+0x370>
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2200      	movs	r2, #0
 8015146:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801514e:	4611      	mov	r1, r2
 8015150:	4618      	mov	r0, r3
 8015152:	f7fe f94b 	bl	80133ec <unlock_fs>
 8015156:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801515a:	4618      	mov	r0, r3
 801515c:	3760      	adds	r7, #96	; 0x60
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}

08015162 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8015162:	b580      	push	{r7, lr}
 8015164:	b08c      	sub	sp, #48	; 0x30
 8015166:	af00      	add	r7, sp, #0
 8015168:	60f8      	str	r0, [r7, #12]
 801516a:	60b9      	str	r1, [r7, #8]
 801516c:	607a      	str	r2, [r7, #4]
 801516e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	2200      	movs	r2, #0
 8015178:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	f107 0210 	add.w	r2, r7, #16
 8015180:	4611      	mov	r1, r2
 8015182:	4618      	mov	r0, r3
 8015184:	f7ff fd7c 	bl	8014c80 <validate>
 8015188:	4603      	mov	r3, r0
 801518a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801518e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015192:	2b00      	cmp	r3, #0
 8015194:	d107      	bne.n	80151a6 <f_write+0x44>
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	7d5b      	ldrb	r3, [r3, #21]
 801519a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801519e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d009      	beq.n	80151ba <f_write+0x58>
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80151ac:	4611      	mov	r1, r2
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7fe f91c 	bl	80133ec <unlock_fs>
 80151b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80151b8:	e173      	b.n	80154a2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	7d1b      	ldrb	r3, [r3, #20]
 80151be:	f003 0302 	and.w	r3, r3, #2
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d106      	bne.n	80151d4 <f_write+0x72>
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	2107      	movs	r1, #7
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7fe f90e 	bl	80133ec <unlock_fs>
 80151d0:	2307      	movs	r3, #7
 80151d2:	e166      	b.n	80154a2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	699a      	ldr	r2, [r3, #24]
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	441a      	add	r2, r3
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	699b      	ldr	r3, [r3, #24]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	f080 814b 	bcs.w	801547c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	699b      	ldr	r3, [r3, #24]
 80151ea:	43db      	mvns	r3, r3
 80151ec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80151ee:	e145      	b.n	801547c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	699b      	ldr	r3, [r3, #24]
 80151f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	f040 8101 	bne.w	8015400 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	699b      	ldr	r3, [r3, #24]
 8015202:	0a5b      	lsrs	r3, r3, #9
 8015204:	693a      	ldr	r2, [r7, #16]
 8015206:	8952      	ldrh	r2, [r2, #10]
 8015208:	3a01      	subs	r2, #1
 801520a:	4013      	ands	r3, r2
 801520c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801520e:	69bb      	ldr	r3, [r7, #24]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d14d      	bne.n	80152b0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	699b      	ldr	r3, [r3, #24]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d10c      	bne.n	8015236 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	689b      	ldr	r3, [r3, #8]
 8015220:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015224:	2b00      	cmp	r3, #0
 8015226:	d11a      	bne.n	801525e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2100      	movs	r1, #0
 801522c:	4618      	mov	r0, r3
 801522e:	f7fe fd5d 	bl	8013cec <create_chain>
 8015232:	62b8      	str	r0, [r7, #40]	; 0x28
 8015234:	e013      	b.n	801525e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801523a:	2b00      	cmp	r3, #0
 801523c:	d007      	beq.n	801524e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	699b      	ldr	r3, [r3, #24]
 8015242:	4619      	mov	r1, r3
 8015244:	68f8      	ldr	r0, [r7, #12]
 8015246:	f7fe fde9 	bl	8013e1c <clmt_clust>
 801524a:	62b8      	str	r0, [r7, #40]	; 0x28
 801524c:	e007      	b.n	801525e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801524e:	68fa      	ldr	r2, [r7, #12]
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	69db      	ldr	r3, [r3, #28]
 8015254:	4619      	mov	r1, r3
 8015256:	4610      	mov	r0, r2
 8015258:	f7fe fd48 	bl	8013cec <create_chain>
 801525c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015260:	2b00      	cmp	r3, #0
 8015262:	f000 8110 	beq.w	8015486 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015268:	2b01      	cmp	r3, #1
 801526a:	d109      	bne.n	8015280 <f_write+0x11e>
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	2202      	movs	r2, #2
 8015270:	755a      	strb	r2, [r3, #21]
 8015272:	693b      	ldr	r3, [r7, #16]
 8015274:	2102      	movs	r1, #2
 8015276:	4618      	mov	r0, r3
 8015278:	f7fe f8b8 	bl	80133ec <unlock_fs>
 801527c:	2302      	movs	r3, #2
 801527e:	e110      	b.n	80154a2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015286:	d109      	bne.n	801529c <f_write+0x13a>
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	2201      	movs	r2, #1
 801528c:	755a      	strb	r2, [r3, #21]
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	2101      	movs	r1, #1
 8015292:	4618      	mov	r0, r3
 8015294:	f7fe f8aa 	bl	80133ec <unlock_fs>
 8015298:	2301      	movs	r3, #1
 801529a:	e102      	b.n	80154a2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152a0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	689b      	ldr	r3, [r3, #8]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d102      	bne.n	80152b0 <f_write+0x14e>
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152ae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	7d1b      	ldrb	r3, [r3, #20]
 80152b4:	b25b      	sxtb	r3, r3
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	da1d      	bge.n	80152f6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	7858      	ldrb	r0, [r3, #1]
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	6a1a      	ldr	r2, [r3, #32]
 80152c8:	2301      	movs	r3, #1
 80152ca:	f7fd ff3b 	bl	8013144 <disk_write>
 80152ce:	4603      	mov	r3, r0
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d009      	beq.n	80152e8 <f_write+0x186>
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	2201      	movs	r2, #1
 80152d8:	755a      	strb	r2, [r3, #21]
 80152da:	693b      	ldr	r3, [r7, #16]
 80152dc:	2101      	movs	r1, #1
 80152de:	4618      	mov	r0, r3
 80152e0:	f7fe f884 	bl	80133ec <unlock_fs>
 80152e4:	2301      	movs	r3, #1
 80152e6:	e0dc      	b.n	80154a2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	7d1b      	ldrb	r3, [r3, #20]
 80152ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152f0:	b2da      	uxtb	r2, r3
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80152f6:	693a      	ldr	r2, [r7, #16]
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	69db      	ldr	r3, [r3, #28]
 80152fc:	4619      	mov	r1, r3
 80152fe:	4610      	mov	r0, r2
 8015300:	f7fe fadc 	bl	80138bc <clust2sect>
 8015304:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d109      	bne.n	8015320 <f_write+0x1be>
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2202      	movs	r2, #2
 8015310:	755a      	strb	r2, [r3, #21]
 8015312:	693b      	ldr	r3, [r7, #16]
 8015314:	2102      	movs	r1, #2
 8015316:	4618      	mov	r0, r3
 8015318:	f7fe f868 	bl	80133ec <unlock_fs>
 801531c:	2302      	movs	r3, #2
 801531e:	e0c0      	b.n	80154a2 <f_write+0x340>
			sect += csect;
 8015320:	697a      	ldr	r2, [r7, #20]
 8015322:	69bb      	ldr	r3, [r7, #24]
 8015324:	4413      	add	r3, r2
 8015326:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	0a5b      	lsrs	r3, r3, #9
 801532c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801532e:	6a3b      	ldr	r3, [r7, #32]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d041      	beq.n	80153b8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015334:	69ba      	ldr	r2, [r7, #24]
 8015336:	6a3b      	ldr	r3, [r7, #32]
 8015338:	4413      	add	r3, r2
 801533a:	693a      	ldr	r2, [r7, #16]
 801533c:	8952      	ldrh	r2, [r2, #10]
 801533e:	4293      	cmp	r3, r2
 8015340:	d905      	bls.n	801534e <f_write+0x1ec>
					cc = fs->csize - csect;
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	895b      	ldrh	r3, [r3, #10]
 8015346:	461a      	mov	r2, r3
 8015348:	69bb      	ldr	r3, [r7, #24]
 801534a:	1ad3      	subs	r3, r2, r3
 801534c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	7858      	ldrb	r0, [r3, #1]
 8015352:	6a3b      	ldr	r3, [r7, #32]
 8015354:	697a      	ldr	r2, [r7, #20]
 8015356:	69f9      	ldr	r1, [r7, #28]
 8015358:	f7fd fef4 	bl	8013144 <disk_write>
 801535c:	4603      	mov	r3, r0
 801535e:	2b00      	cmp	r3, #0
 8015360:	d009      	beq.n	8015376 <f_write+0x214>
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	2201      	movs	r2, #1
 8015366:	755a      	strb	r2, [r3, #21]
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	2101      	movs	r1, #1
 801536c:	4618      	mov	r0, r3
 801536e:	f7fe f83d 	bl	80133ec <unlock_fs>
 8015372:	2301      	movs	r3, #1
 8015374:	e095      	b.n	80154a2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	6a1a      	ldr	r2, [r3, #32]
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	1ad3      	subs	r3, r2, r3
 801537e:	6a3a      	ldr	r2, [r7, #32]
 8015380:	429a      	cmp	r2, r3
 8015382:	d915      	bls.n	80153b0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	6a1a      	ldr	r2, [r3, #32]
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	1ad3      	subs	r3, r2, r3
 8015392:	025b      	lsls	r3, r3, #9
 8015394:	69fa      	ldr	r2, [r7, #28]
 8015396:	4413      	add	r3, r2
 8015398:	f44f 7200 	mov.w	r2, #512	; 0x200
 801539c:	4619      	mov	r1, r3
 801539e:	f7fd ff91 	bl	80132c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	7d1b      	ldrb	r3, [r3, #20]
 80153a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153aa:	b2da      	uxtb	r2, r3
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80153b0:	6a3b      	ldr	r3, [r7, #32]
 80153b2:	025b      	lsls	r3, r3, #9
 80153b4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80153b6:	e044      	b.n	8015442 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	6a1b      	ldr	r3, [r3, #32]
 80153bc:	697a      	ldr	r2, [r7, #20]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d01b      	beq.n	80153fa <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	699a      	ldr	r2, [r3, #24]
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d215      	bcs.n	80153fa <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	7858      	ldrb	r0, [r3, #1]
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80153d8:	2301      	movs	r3, #1
 80153da:	697a      	ldr	r2, [r7, #20]
 80153dc:	f7fd fe92 	bl	8013104 <disk_read>
 80153e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d009      	beq.n	80153fa <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	2201      	movs	r2, #1
 80153ea:	755a      	strb	r2, [r3, #21]
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	2101      	movs	r1, #1
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7fd fffb 	bl	80133ec <unlock_fs>
 80153f6:	2301      	movs	r3, #1
 80153f8:	e053      	b.n	80154a2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	697a      	ldr	r2, [r7, #20]
 80153fe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	699b      	ldr	r3, [r3, #24]
 8015404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015408:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801540c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	429a      	cmp	r2, r3
 8015414:	d901      	bls.n	801541a <f_write+0x2b8>
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	699b      	ldr	r3, [r3, #24]
 8015424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015428:	4413      	add	r3, r2
 801542a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801542c:	69f9      	ldr	r1, [r7, #28]
 801542e:	4618      	mov	r0, r3
 8015430:	f7fd ff48 	bl	80132c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	7d1b      	ldrb	r3, [r3, #20]
 8015438:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801543c:	b2da      	uxtb	r2, r3
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015442:	69fa      	ldr	r2, [r7, #28]
 8015444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015446:	4413      	add	r3, r2
 8015448:	61fb      	str	r3, [r7, #28]
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	699a      	ldr	r2, [r3, #24]
 801544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015450:	441a      	add	r2, r3
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	619a      	str	r2, [r3, #24]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	68da      	ldr	r2, [r3, #12]
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	699b      	ldr	r3, [r3, #24]
 801545e:	429a      	cmp	r2, r3
 8015460:	bf38      	it	cc
 8015462:	461a      	movcc	r2, r3
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	60da      	str	r2, [r3, #12]
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	681a      	ldr	r2, [r3, #0]
 801546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546e:	441a      	add	r2, r3
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	601a      	str	r2, [r3, #0]
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015478:	1ad3      	subs	r3, r2, r3
 801547a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2b00      	cmp	r3, #0
 8015480:	f47f aeb6 	bne.w	80151f0 <f_write+0x8e>
 8015484:	e000      	b.n	8015488 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015486:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	7d1b      	ldrb	r3, [r3, #20]
 801548c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015490:	b2da      	uxtb	r2, r3
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	2100      	movs	r1, #0
 801549a:	4618      	mov	r0, r3
 801549c:	f7fd ffa6 	bl	80133ec <unlock_fs>
 80154a0:	2300      	movs	r3, #0
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3730      	adds	r7, #48	; 0x30
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}

080154aa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80154aa:	b580      	push	{r7, lr}
 80154ac:	b086      	sub	sp, #24
 80154ae:	af00      	add	r7, sp, #0
 80154b0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	f107 0208 	add.w	r2, r7, #8
 80154b8:	4611      	mov	r1, r2
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7ff fbe0 	bl	8014c80 <validate>
 80154c0:	4603      	mov	r3, r0
 80154c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80154c4:	7dfb      	ldrb	r3, [r7, #23]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d16d      	bne.n	80155a6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	7d1b      	ldrb	r3, [r3, #20]
 80154ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d067      	beq.n	80155a6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	7d1b      	ldrb	r3, [r3, #20]
 80154da:	b25b      	sxtb	r3, r3
 80154dc:	2b00      	cmp	r3, #0
 80154de:	da1a      	bge.n	8015516 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	7858      	ldrb	r0, [r3, #1]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6a1a      	ldr	r2, [r3, #32]
 80154ee:	2301      	movs	r3, #1
 80154f0:	f7fd fe28 	bl	8013144 <disk_write>
 80154f4:	4603      	mov	r3, r0
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d006      	beq.n	8015508 <f_sync+0x5e>
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	2101      	movs	r1, #1
 80154fe:	4618      	mov	r0, r3
 8015500:	f7fd ff74 	bl	80133ec <unlock_fs>
 8015504:	2301      	movs	r3, #1
 8015506:	e055      	b.n	80155b4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	7d1b      	ldrb	r3, [r3, #20]
 801550c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015510:	b2da      	uxtb	r2, r3
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015516:	f7fb fc15 	bl	8010d44 <get_fattime>
 801551a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801551c:	68ba      	ldr	r2, [r7, #8]
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015522:	4619      	mov	r1, r3
 8015524:	4610      	mov	r0, r2
 8015526:	f7fe f92d 	bl	8013784 <move_window>
 801552a:	4603      	mov	r3, r0
 801552c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801552e:	7dfb      	ldrb	r3, [r7, #23]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d138      	bne.n	80155a6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015538:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	330b      	adds	r3, #11
 801553e:	781a      	ldrb	r2, [r3, #0]
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	330b      	adds	r3, #11
 8015544:	f042 0220 	orr.w	r2, r2, #32
 8015548:	b2d2      	uxtb	r2, r2
 801554a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	6818      	ldr	r0, [r3, #0]
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	689b      	ldr	r3, [r3, #8]
 8015554:	461a      	mov	r2, r3
 8015556:	68f9      	ldr	r1, [r7, #12]
 8015558:	f7fe fe3a 	bl	80141d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	f103 021c 	add.w	r2, r3, #28
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	68db      	ldr	r3, [r3, #12]
 8015566:	4619      	mov	r1, r3
 8015568:	4610      	mov	r0, r2
 801556a:	f7fd fe7f 	bl	801326c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	3316      	adds	r3, #22
 8015572:	6939      	ldr	r1, [r7, #16]
 8015574:	4618      	mov	r0, r3
 8015576:	f7fd fe79 	bl	801326c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	3312      	adds	r3, #18
 801557e:	2100      	movs	r1, #0
 8015580:	4618      	mov	r0, r3
 8015582:	f7fd fe58 	bl	8013236 <st_word>
					fs->wflag = 1;
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	2201      	movs	r2, #1
 801558a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	4618      	mov	r0, r3
 8015590:	f7fe f926 	bl	80137e0 <sync_fs>
 8015594:	4603      	mov	r3, r0
 8015596:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	7d1b      	ldrb	r3, [r3, #20]
 801559c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80155a0:	b2da      	uxtb	r2, r3
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	7dfa      	ldrb	r2, [r7, #23]
 80155aa:	4611      	mov	r1, r2
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7fd ff1d 	bl	80133ec <unlock_fs>
 80155b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	3718      	adds	r7, #24
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f7ff ff70 	bl	80154aa <f_sync>
 80155ca:	4603      	mov	r3, r0
 80155cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80155ce:	7bfb      	ldrb	r3, [r7, #15]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d11d      	bne.n	8015610 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f107 0208 	add.w	r2, r7, #8
 80155da:	4611      	mov	r1, r2
 80155dc:	4618      	mov	r0, r3
 80155de:	f7ff fb4f 	bl	8014c80 <validate>
 80155e2:	4603      	mov	r3, r0
 80155e4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80155e6:	7bfb      	ldrb	r3, [r7, #15]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d111      	bne.n	8015610 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	691b      	ldr	r3, [r3, #16]
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7fe f823 	bl	801363c <dec_lock>
 80155f6:	4603      	mov	r3, r0
 80155f8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80155fa:	7bfb      	ldrb	r3, [r7, #15]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d102      	bne.n	8015606 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2200      	movs	r2, #0
 8015604:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	2100      	movs	r1, #0
 801560a:	4618      	mov	r0, r3
 801560c:	f7fd feee 	bl	80133ec <unlock_fs>
#endif
		}
	}
	return res;
 8015610:	7bfb      	ldrb	r3, [r7, #15]
}
 8015612:	4618      	mov	r0, r3
 8015614:	3710      	adds	r7, #16
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}

0801561a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801561a:	b580      	push	{r7, lr}
 801561c:	b090      	sub	sp, #64	; 0x40
 801561e:	af00      	add	r7, sp, #0
 8015620:	6078      	str	r0, [r7, #4]
 8015622:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	f107 0208 	add.w	r2, r7, #8
 801562a:	4611      	mov	r1, r2
 801562c:	4618      	mov	r0, r3
 801562e:	f7ff fb27 	bl	8014c80 <validate>
 8015632:	4603      	mov	r3, r0
 8015634:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015638:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801563c:	2b00      	cmp	r3, #0
 801563e:	d103      	bne.n	8015648 <f_lseek+0x2e>
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	7d5b      	ldrb	r3, [r3, #21]
 8015644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015648:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801564c:	2b00      	cmp	r3, #0
 801564e:	d009      	beq.n	8015664 <f_lseek+0x4a>
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015656:	4611      	mov	r1, r2
 8015658:	4618      	mov	r0, r3
 801565a:	f7fd fec7 	bl	80133ec <unlock_fs>
 801565e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015662:	e229      	b.n	8015ab8 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015668:	2b00      	cmp	r3, #0
 801566a:	f000 80ea 	beq.w	8015842 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015674:	d164      	bne.n	8015740 <f_lseek+0x126>
			tbl = fp->cltbl;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801567a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567e:	1d1a      	adds	r2, r3, #4
 8015680:	627a      	str	r2, [r7, #36]	; 0x24
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	617b      	str	r3, [r7, #20]
 8015686:	2302      	movs	r3, #2
 8015688:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	689b      	ldr	r3, [r3, #8]
 801568e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015692:	2b00      	cmp	r3, #0
 8015694:	d044      	beq.n	8015720 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015698:	613b      	str	r3, [r7, #16]
 801569a:	2300      	movs	r3, #0
 801569c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a0:	3302      	adds	r3, #2
 80156a2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80156a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a6:	60fb      	str	r3, [r7, #12]
 80156a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156aa:	3301      	adds	r3, #1
 80156ac:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7fe f921 	bl	80138fa <get_fat>
 80156b8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80156ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156bc:	2b01      	cmp	r3, #1
 80156be:	d809      	bhi.n	80156d4 <f_lseek+0xba>
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	2202      	movs	r2, #2
 80156c4:	755a      	strb	r2, [r3, #21]
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	2102      	movs	r1, #2
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7fd fe8e 	bl	80133ec <unlock_fs>
 80156d0:	2302      	movs	r3, #2
 80156d2:	e1f1      	b.n	8015ab8 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80156d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156da:	d109      	bne.n	80156f0 <f_lseek+0xd6>
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2201      	movs	r2, #1
 80156e0:	755a      	strb	r2, [r3, #21]
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	2101      	movs	r1, #1
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7fd fe80 	bl	80133ec <unlock_fs>
 80156ec:	2301      	movs	r3, #1
 80156ee:	e1e3      	b.n	8015ab8 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	3301      	adds	r3, #1
 80156f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156f6:	429a      	cmp	r2, r3
 80156f8:	d0d4      	beq.n	80156a4 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80156fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156fc:	697b      	ldr	r3, [r7, #20]
 80156fe:	429a      	cmp	r2, r3
 8015700:	d809      	bhi.n	8015716 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8015702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015704:	1d1a      	adds	r2, r3, #4
 8015706:	627a      	str	r2, [r7, #36]	; 0x24
 8015708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801570a:	601a      	str	r2, [r3, #0]
 801570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801570e:	1d1a      	adds	r2, r3, #4
 8015710:	627a      	str	r2, [r7, #36]	; 0x24
 8015712:	693a      	ldr	r2, [r7, #16]
 8015714:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8015716:	68bb      	ldr	r3, [r7, #8]
 8015718:	699b      	ldr	r3, [r3, #24]
 801571a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801571c:	429a      	cmp	r2, r3
 801571e:	d3ba      	bcc.n	8015696 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015726:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8015728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	429a      	cmp	r2, r3
 801572e:	d803      	bhi.n	8015738 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8015730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015732:	2200      	movs	r2, #0
 8015734:	601a      	str	r2, [r3, #0]
 8015736:	e1b6      	b.n	8015aa6 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015738:	2311      	movs	r3, #17
 801573a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801573e:	e1b2      	b.n	8015aa6 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	68db      	ldr	r3, [r3, #12]
 8015744:	683a      	ldr	r2, [r7, #0]
 8015746:	429a      	cmp	r2, r3
 8015748:	d902      	bls.n	8015750 <f_lseek+0x136>
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	68db      	ldr	r3, [r3, #12]
 801574e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	683a      	ldr	r2, [r7, #0]
 8015754:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	2b00      	cmp	r3, #0
 801575a:	f000 81a4 	beq.w	8015aa6 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	3b01      	subs	r3, #1
 8015762:	4619      	mov	r1, r3
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f7fe fb59 	bl	8013e1c <clmt_clust>
 801576a:	4602      	mov	r2, r0
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015770:	68ba      	ldr	r2, [r7, #8]
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	69db      	ldr	r3, [r3, #28]
 8015776:	4619      	mov	r1, r3
 8015778:	4610      	mov	r0, r2
 801577a:	f7fe f89f 	bl	80138bc <clust2sect>
 801577e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015780:	69bb      	ldr	r3, [r7, #24]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d109      	bne.n	801579a <f_lseek+0x180>
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2202      	movs	r2, #2
 801578a:	755a      	strb	r2, [r3, #21]
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	2102      	movs	r1, #2
 8015790:	4618      	mov	r0, r3
 8015792:	f7fd fe2b 	bl	80133ec <unlock_fs>
 8015796:	2302      	movs	r3, #2
 8015798:	e18e      	b.n	8015ab8 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	3b01      	subs	r3, #1
 801579e:	0a5b      	lsrs	r3, r3, #9
 80157a0:	68ba      	ldr	r2, [r7, #8]
 80157a2:	8952      	ldrh	r2, [r2, #10]
 80157a4:	3a01      	subs	r2, #1
 80157a6:	4013      	ands	r3, r2
 80157a8:	69ba      	ldr	r2, [r7, #24]
 80157aa:	4413      	add	r3, r2
 80157ac:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	699b      	ldr	r3, [r3, #24]
 80157b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	f000 8175 	beq.w	8015aa6 <f_lseek+0x48c>
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	6a1b      	ldr	r3, [r3, #32]
 80157c0:	69ba      	ldr	r2, [r7, #24]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	f000 816f 	beq.w	8015aa6 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	7d1b      	ldrb	r3, [r3, #20]
 80157cc:	b25b      	sxtb	r3, r3
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	da1d      	bge.n	801580e <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	7858      	ldrb	r0, [r3, #1]
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	6a1a      	ldr	r2, [r3, #32]
 80157e0:	2301      	movs	r3, #1
 80157e2:	f7fd fcaf 	bl	8013144 <disk_write>
 80157e6:	4603      	mov	r3, r0
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d009      	beq.n	8015800 <f_lseek+0x1e6>
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2201      	movs	r2, #1
 80157f0:	755a      	strb	r2, [r3, #21]
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	2101      	movs	r1, #1
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7fd fdf8 	bl	80133ec <unlock_fs>
 80157fc:	2301      	movs	r3, #1
 80157fe:	e15b      	b.n	8015ab8 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	7d1b      	ldrb	r3, [r3, #20]
 8015804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015808:	b2da      	uxtb	r2, r3
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	7858      	ldrb	r0, [r3, #1]
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015818:	2301      	movs	r3, #1
 801581a:	69ba      	ldr	r2, [r7, #24]
 801581c:	f7fd fc72 	bl	8013104 <disk_read>
 8015820:	4603      	mov	r3, r0
 8015822:	2b00      	cmp	r3, #0
 8015824:	d009      	beq.n	801583a <f_lseek+0x220>
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2201      	movs	r2, #1
 801582a:	755a      	strb	r2, [r3, #21]
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	2101      	movs	r1, #1
 8015830:	4618      	mov	r0, r3
 8015832:	f7fd fddb 	bl	80133ec <unlock_fs>
 8015836:	2301      	movs	r3, #1
 8015838:	e13e      	b.n	8015ab8 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	69ba      	ldr	r2, [r7, #24]
 801583e:	621a      	str	r2, [r3, #32]
 8015840:	e131      	b.n	8015aa6 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	68db      	ldr	r3, [r3, #12]
 8015846:	683a      	ldr	r2, [r7, #0]
 8015848:	429a      	cmp	r2, r3
 801584a:	d908      	bls.n	801585e <f_lseek+0x244>
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	7d1b      	ldrb	r3, [r3, #20]
 8015850:	f003 0302 	and.w	r3, r3, #2
 8015854:	2b00      	cmp	r3, #0
 8015856:	d102      	bne.n	801585e <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	68db      	ldr	r3, [r3, #12]
 801585c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	699b      	ldr	r3, [r3, #24]
 8015862:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8015864:	2300      	movs	r3, #0
 8015866:	637b      	str	r3, [r7, #52]	; 0x34
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801586c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	f000 80c0 	beq.w	80159f6 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	895b      	ldrh	r3, [r3, #10]
 801587a:	025b      	lsls	r3, r3, #9
 801587c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801587e:	6a3b      	ldr	r3, [r7, #32]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d01b      	beq.n	80158bc <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015884:	683b      	ldr	r3, [r7, #0]
 8015886:	1e5a      	subs	r2, r3, #1
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	fbb2 f2f3 	udiv	r2, r2, r3
 801588e:	6a3b      	ldr	r3, [r7, #32]
 8015890:	1e59      	subs	r1, r3, #1
 8015892:	69fb      	ldr	r3, [r7, #28]
 8015894:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015898:	429a      	cmp	r2, r3
 801589a:	d30f      	bcc.n	80158bc <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801589c:	6a3b      	ldr	r3, [r7, #32]
 801589e:	1e5a      	subs	r2, r3, #1
 80158a0:	69fb      	ldr	r3, [r7, #28]
 80158a2:	425b      	negs	r3, r3
 80158a4:	401a      	ands	r2, r3
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	699b      	ldr	r3, [r3, #24]
 80158ae:	683a      	ldr	r2, [r7, #0]
 80158b0:	1ad3      	subs	r3, r2, r3
 80158b2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	69db      	ldr	r3, [r3, #28]
 80158b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80158ba:	e02c      	b.n	8015916 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	689b      	ldr	r3, [r3, #8]
 80158c0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80158c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d123      	bne.n	8015910 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	2100      	movs	r1, #0
 80158cc:	4618      	mov	r0, r3
 80158ce:	f7fe fa0d 	bl	8013cec <create_chain>
 80158d2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80158d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158d6:	2b01      	cmp	r3, #1
 80158d8:	d109      	bne.n	80158ee <f_lseek+0x2d4>
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	2202      	movs	r2, #2
 80158de:	755a      	strb	r2, [r3, #21]
 80158e0:	68bb      	ldr	r3, [r7, #8]
 80158e2:	2102      	movs	r1, #2
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7fd fd81 	bl	80133ec <unlock_fs>
 80158ea:	2302      	movs	r3, #2
 80158ec:	e0e4      	b.n	8015ab8 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158f4:	d109      	bne.n	801590a <f_lseek+0x2f0>
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	2201      	movs	r2, #1
 80158fa:	755a      	strb	r2, [r3, #21]
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	2101      	movs	r1, #1
 8015900:	4618      	mov	r0, r3
 8015902:	f7fd fd73 	bl	80133ec <unlock_fs>
 8015906:	2301      	movs	r3, #1
 8015908:	e0d6      	b.n	8015ab8 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801590e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015914:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8015916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015918:	2b00      	cmp	r3, #0
 801591a:	d06c      	beq.n	80159f6 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 801591c:	e044      	b.n	80159a8 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 801591e:	683a      	ldr	r2, [r7, #0]
 8015920:	69fb      	ldr	r3, [r7, #28]
 8015922:	1ad3      	subs	r3, r2, r3
 8015924:	603b      	str	r3, [r7, #0]
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	699a      	ldr	r2, [r3, #24]
 801592a:	69fb      	ldr	r3, [r7, #28]
 801592c:	441a      	add	r2, r3
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	7d1b      	ldrb	r3, [r3, #20]
 8015936:	f003 0302 	and.w	r3, r3, #2
 801593a:	2b00      	cmp	r3, #0
 801593c:	d00b      	beq.n	8015956 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015942:	4618      	mov	r0, r3
 8015944:	f7fe f9d2 	bl	8013cec <create_chain>
 8015948:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801594c:	2b00      	cmp	r3, #0
 801594e:	d108      	bne.n	8015962 <f_lseek+0x348>
							ofs = 0; break;
 8015950:	2300      	movs	r3, #0
 8015952:	603b      	str	r3, [r7, #0]
 8015954:	e02c      	b.n	80159b0 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801595a:	4618      	mov	r0, r3
 801595c:	f7fd ffcd 	bl	80138fa <get_fat>
 8015960:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015968:	d109      	bne.n	801597e <f_lseek+0x364>
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2201      	movs	r2, #1
 801596e:	755a      	strb	r2, [r3, #21]
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	2101      	movs	r1, #1
 8015974:	4618      	mov	r0, r3
 8015976:	f7fd fd39 	bl	80133ec <unlock_fs>
 801597a:	2301      	movs	r3, #1
 801597c:	e09c      	b.n	8015ab8 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015980:	2b01      	cmp	r3, #1
 8015982:	d904      	bls.n	801598e <f_lseek+0x374>
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	699b      	ldr	r3, [r3, #24]
 8015988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801598a:	429a      	cmp	r2, r3
 801598c:	d309      	bcc.n	80159a2 <f_lseek+0x388>
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	2202      	movs	r2, #2
 8015992:	755a      	strb	r2, [r3, #21]
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	2102      	movs	r1, #2
 8015998:	4618      	mov	r0, r3
 801599a:	f7fd fd27 	bl	80133ec <unlock_fs>
 801599e:	2302      	movs	r3, #2
 80159a0:	e08a      	b.n	8015ab8 <f_lseek+0x49e>
					fp->clust = clst;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159a6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80159a8:	683a      	ldr	r2, [r7, #0]
 80159aa:	69fb      	ldr	r3, [r7, #28]
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d8b6      	bhi.n	801591e <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	699a      	ldr	r2, [r3, #24]
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	441a      	add	r2, r3
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80159bc:	683b      	ldr	r3, [r7, #0]
 80159be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d017      	beq.n	80159f6 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80159c6:	68bb      	ldr	r3, [r7, #8]
 80159c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7fd ff76 	bl	80138bc <clust2sect>
 80159d0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80159d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d109      	bne.n	80159ec <f_lseek+0x3d2>
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	2202      	movs	r2, #2
 80159dc:	755a      	strb	r2, [r3, #21]
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	2102      	movs	r1, #2
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7fd fd02 	bl	80133ec <unlock_fs>
 80159e8:	2302      	movs	r3, #2
 80159ea:	e065      	b.n	8015ab8 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	0a5b      	lsrs	r3, r3, #9
 80159f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80159f2:	4413      	add	r3, r2
 80159f4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	699a      	ldr	r2, [r3, #24]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	68db      	ldr	r3, [r3, #12]
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d90a      	bls.n	8015a18 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	699a      	ldr	r2, [r3, #24]
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	7d1b      	ldrb	r3, [r3, #20]
 8015a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a12:	b2da      	uxtb	r2, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	699b      	ldr	r3, [r3, #24]
 8015a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d040      	beq.n	8015aa6 <f_lseek+0x48c>
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	6a1b      	ldr	r3, [r3, #32]
 8015a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a2a:	429a      	cmp	r2, r3
 8015a2c:	d03b      	beq.n	8015aa6 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	7d1b      	ldrb	r3, [r3, #20]
 8015a32:	b25b      	sxtb	r3, r3
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	da1d      	bge.n	8015a74 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015a38:	68bb      	ldr	r3, [r7, #8]
 8015a3a:	7858      	ldrb	r0, [r3, #1]
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	6a1a      	ldr	r2, [r3, #32]
 8015a46:	2301      	movs	r3, #1
 8015a48:	f7fd fb7c 	bl	8013144 <disk_write>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d009      	beq.n	8015a66 <f_lseek+0x44c>
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2201      	movs	r2, #1
 8015a56:	755a      	strb	r2, [r3, #21]
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	2101      	movs	r1, #1
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7fd fcc5 	bl	80133ec <unlock_fs>
 8015a62:	2301      	movs	r3, #1
 8015a64:	e028      	b.n	8015ab8 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	7d1b      	ldrb	r3, [r3, #20]
 8015a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a6e:	b2da      	uxtb	r2, r3
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015a74:	68bb      	ldr	r3, [r7, #8]
 8015a76:	7858      	ldrb	r0, [r3, #1]
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a7e:	2301      	movs	r3, #1
 8015a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a82:	f7fd fb3f 	bl	8013104 <disk_read>
 8015a86:	4603      	mov	r3, r0
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d009      	beq.n	8015aa0 <f_lseek+0x486>
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2201      	movs	r2, #1
 8015a90:	755a      	strb	r2, [r3, #21]
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	2101      	movs	r1, #1
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7fd fca8 	bl	80133ec <unlock_fs>
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	e00b      	b.n	8015ab8 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015aa4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015aac:	4611      	mov	r1, r2
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f7fd fc9c 	bl	80133ec <unlock_fs>
 8015ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015ab8:	4618      	mov	r0, r3
 8015aba:	3740      	adds	r7, #64	; 0x40
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}

08015ac0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b086      	sub	sp, #24
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d101      	bne.n	8015ad4 <f_opendir+0x14>
 8015ad0:	2309      	movs	r3, #9
 8015ad2:	e06a      	b.n	8015baa <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015ad8:	f107 010c 	add.w	r1, r7, #12
 8015adc:	463b      	mov	r3, r7
 8015ade:	2200      	movs	r2, #0
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7fe fe79 	bl	80147d8 <find_volume>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015aea:	7dfb      	ldrb	r3, [r7, #23]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d14f      	bne.n	8015b90 <f_opendir+0xd0>
		obj->fs = fs;
 8015af0:	68fa      	ldr	r2, [r7, #12]
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	4619      	mov	r1, r3
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f7fe fd60 	bl	80145c0 <follow_path>
 8015b00:	4603      	mov	r3, r0
 8015b02:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015b04:	7dfb      	ldrb	r3, [r7, #23]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d13d      	bne.n	8015b86 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015b10:	b25b      	sxtb	r3, r3
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	db12      	blt.n	8015b3c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8015b16:	693b      	ldr	r3, [r7, #16]
 8015b18:	799b      	ldrb	r3, [r3, #6]
 8015b1a:	f003 0310 	and.w	r3, r3, #16
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d00a      	beq.n	8015b38 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015b22:	68fa      	ldr	r2, [r7, #12]
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	6a1b      	ldr	r3, [r3, #32]
 8015b28:	4619      	mov	r1, r3
 8015b2a:	4610      	mov	r0, r2
 8015b2c:	f7fe fb31 	bl	8014192 <ld_clust>
 8015b30:	4602      	mov	r2, r0
 8015b32:	693b      	ldr	r3, [r7, #16]
 8015b34:	609a      	str	r2, [r3, #8]
 8015b36:	e001      	b.n	8015b3c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015b38:	2305      	movs	r3, #5
 8015b3a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015b3c:	7dfb      	ldrb	r3, [r7, #23]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d121      	bne.n	8015b86 <f_opendir+0xc6>
				obj->id = fs->id;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	88da      	ldrh	r2, [r3, #6]
 8015b46:	693b      	ldr	r3, [r7, #16]
 8015b48:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015b4a:	2100      	movs	r1, #0
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f7fe f999 	bl	8013e84 <dir_sdi>
 8015b52:	4603      	mov	r3, r0
 8015b54:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015b56:	7dfb      	ldrb	r3, [r7, #23]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d114      	bne.n	8015b86 <f_opendir+0xc6>
					if (obj->sclust) {
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	689b      	ldr	r3, [r3, #8]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d00d      	beq.n	8015b80 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015b64:	2100      	movs	r1, #0
 8015b66:	6878      	ldr	r0, [r7, #4]
 8015b68:	f7fd fcda 	bl	8013520 <inc_lock>
 8015b6c:	4602      	mov	r2, r0
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	691b      	ldr	r3, [r3, #16]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d105      	bne.n	8015b86 <f_opendir+0xc6>
 8015b7a:	2312      	movs	r3, #18
 8015b7c:	75fb      	strb	r3, [r7, #23]
 8015b7e:	e002      	b.n	8015b86 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	2200      	movs	r2, #0
 8015b84:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015b86:	7dfb      	ldrb	r3, [r7, #23]
 8015b88:	2b04      	cmp	r3, #4
 8015b8a:	d101      	bne.n	8015b90 <f_opendir+0xd0>
 8015b8c:	2305      	movs	r3, #5
 8015b8e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015b90:	7dfb      	ldrb	r3, [r7, #23]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d002      	beq.n	8015b9c <f_opendir+0xdc>
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	7dfa      	ldrb	r2, [r7, #23]
 8015ba0:	4611      	mov	r1, r2
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f7fd fc22 	bl	80133ec <unlock_fs>
 8015ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3718      	adds	r7, #24
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}

08015bb2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015bb2:	b580      	push	{r7, lr}
 8015bb4:	b084      	sub	sp, #16
 8015bb6:	af00      	add	r7, sp, #0
 8015bb8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f107 0208 	add.w	r2, r7, #8
 8015bc0:	4611      	mov	r1, r2
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7ff f85c 	bl	8014c80 <validate>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015bcc:	7bfb      	ldrb	r3, [r7, #15]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d115      	bne.n	8015bfe <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	691b      	ldr	r3, [r3, #16]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d006      	beq.n	8015be8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	691b      	ldr	r3, [r3, #16]
 8015bde:	4618      	mov	r0, r3
 8015be0:	f7fd fd2c 	bl	801363c <dec_lock>
 8015be4:	4603      	mov	r3, r0
 8015be6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8015be8:	7bfb      	ldrb	r3, [r7, #15]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d102      	bne.n	8015bf4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015bf4:	68bb      	ldr	r3, [r7, #8]
 8015bf6:	2100      	movs	r1, #0
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7fd fbf7 	bl	80133ec <unlock_fs>
#endif
	}
	return res;
 8015bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3710      	adds	r7, #16
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}

08015c08 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f107 0208 	add.w	r2, r7, #8
 8015c18:	4611      	mov	r1, r2
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f7ff f830 	bl	8014c80 <validate>
 8015c20:	4603      	mov	r3, r0
 8015c22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015c24:	7bfb      	ldrb	r3, [r7, #15]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d126      	bne.n	8015c78 <f_readdir+0x70>
		if (!fno) {
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d106      	bne.n	8015c3e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015c30:	2100      	movs	r1, #0
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f7fe f926 	bl	8013e84 <dir_sdi>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	73fb      	strb	r3, [r7, #15]
 8015c3c:	e01c      	b.n	8015c78 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8015c3e:	2100      	movs	r1, #0
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f7fe fae5 	bl	8014210 <dir_read>
 8015c46:	4603      	mov	r3, r0
 8015c48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015c4a:	7bfb      	ldrb	r3, [r7, #15]
 8015c4c:	2b04      	cmp	r3, #4
 8015c4e:	d101      	bne.n	8015c54 <f_readdir+0x4c>
 8015c50:	2300      	movs	r3, #0
 8015c52:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015c54:	7bfb      	ldrb	r3, [r7, #15]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d10e      	bne.n	8015c78 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015c5a:	6839      	ldr	r1, [r7, #0]
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f7fe fbbb 	bl	80143d8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015c62:	2100      	movs	r1, #0
 8015c64:	6878      	ldr	r0, [r7, #4]
 8015c66:	f7fe f988 	bl	8013f7a <dir_next>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015c6e:	7bfb      	ldrb	r3, [r7, #15]
 8015c70:	2b04      	cmp	r3, #4
 8015c72:	d101      	bne.n	8015c78 <f_readdir+0x70>
 8015c74:	2300      	movs	r3, #0
 8015c76:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	7bfa      	ldrb	r2, [r7, #15]
 8015c7c:	4611      	mov	r1, r2
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7fd fbb4 	bl	80133ec <unlock_fs>
 8015c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3710      	adds	r7, #16
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}
	...

08015c90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015c90:	b480      	push	{r7}
 8015c92:	b087      	sub	sp, #28
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	60f8      	str	r0, [r7, #12]
 8015c98:	60b9      	str	r1, [r7, #8]
 8015c9a:	4613      	mov	r3, r2
 8015c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015ca6:	4b1f      	ldr	r3, [pc, #124]	; (8015d24 <FATFS_LinkDriverEx+0x94>)
 8015ca8:	7a5b      	ldrb	r3, [r3, #9]
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d131      	bne.n	8015d14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015cb0:	4b1c      	ldr	r3, [pc, #112]	; (8015d24 <FATFS_LinkDriverEx+0x94>)
 8015cb2:	7a5b      	ldrb	r3, [r3, #9]
 8015cb4:	b2db      	uxtb	r3, r3
 8015cb6:	461a      	mov	r2, r3
 8015cb8:	4b1a      	ldr	r3, [pc, #104]	; (8015d24 <FATFS_LinkDriverEx+0x94>)
 8015cba:	2100      	movs	r1, #0
 8015cbc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015cbe:	4b19      	ldr	r3, [pc, #100]	; (8015d24 <FATFS_LinkDriverEx+0x94>)
 8015cc0:	7a5b      	ldrb	r3, [r3, #9]
 8015cc2:	b2db      	uxtb	r3, r3
 8015cc4:	4a17      	ldr	r2, [pc, #92]	; (8015d24 <FATFS_LinkDriverEx+0x94>)
 8015cc6:	009b      	lsls	r3, r3, #2
 8015cc8:	4413      	add	r3, r2
 8015cca:	68fa      	ldr	r2, [r7, #12]
 8015ccc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015cce:	4b15      	ldr	r3, [pc, #84]	; (8015d24 <FATFS_LinkDriverEx+0x94>)
 8015cd0:	7a5b      	ldrb	r3, [r3, #9]
 8015cd2:	b2db      	uxtb	r3, r3
 8015cd4:	461a      	mov	r2, r3
 8015cd6:	4b13      	ldr	r3, [pc, #76]	; (8015d24 <FATFS_LinkDriverEx+0x94>)
 8015cd8:	4413      	add	r3, r2
 8015cda:	79fa      	ldrb	r2, [r7, #7]
 8015cdc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015cde:	4b11      	ldr	r3, [pc, #68]	; (8015d24 <FATFS_LinkDriverEx+0x94>)
 8015ce0:	7a5b      	ldrb	r3, [r3, #9]
 8015ce2:	b2db      	uxtb	r3, r3
 8015ce4:	1c5a      	adds	r2, r3, #1
 8015ce6:	b2d1      	uxtb	r1, r2
 8015ce8:	4a0e      	ldr	r2, [pc, #56]	; (8015d24 <FATFS_LinkDriverEx+0x94>)
 8015cea:	7251      	strb	r1, [r2, #9]
 8015cec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015cee:	7dbb      	ldrb	r3, [r7, #22]
 8015cf0:	3330      	adds	r3, #48	; 0x30
 8015cf2:	b2da      	uxtb	r2, r3
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	3301      	adds	r3, #1
 8015cfc:	223a      	movs	r2, #58	; 0x3a
 8015cfe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	3302      	adds	r3, #2
 8015d04:	222f      	movs	r2, #47	; 0x2f
 8015d06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	3303      	adds	r3, #3
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015d10:	2300      	movs	r3, #0
 8015d12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	371c      	adds	r7, #28
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d20:	4770      	bx	lr
 8015d22:	bf00      	nop
 8015d24:	20000864 	.word	0x20000864

08015d28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b082      	sub	sp, #8
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
 8015d30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015d32:	2200      	movs	r2, #0
 8015d34:	6839      	ldr	r1, [r7, #0]
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f7ff ffaa 	bl	8015c90 <FATFS_LinkDriverEx>
 8015d3c:	4603      	mov	r3, r0
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3708      	adds	r7, #8
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}

08015d46 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015d46:	b580      	push	{r7, lr}
 8015d48:	b084      	sub	sp, #16
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	6039      	str	r1, [r7, #0]
 8015d50:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015d52:	2200      	movs	r2, #0
 8015d54:	2101      	movs	r1, #1
 8015d56:	2001      	movs	r0, #1
 8015d58:	f000 f9e6 	bl	8016128 <osSemaphoreNew>
 8015d5c:	4602      	mov	r2, r0
 8015d5e:	683b      	ldr	r3, [r7, #0]
 8015d60:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	bf14      	ite	ne
 8015d6a:	2301      	movne	r3, #1
 8015d6c:	2300      	moveq	r3, #0
 8015d6e:	b2db      	uxtb	r3, r3
 8015d70:	60fb      	str	r3, [r7, #12]

    return ret;
 8015d72:	68fb      	ldr	r3, [r7, #12]
}
 8015d74:	4618      	mov	r0, r3
 8015d76:	3710      	adds	r7, #16
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bd80      	pop	{r7, pc}

08015d7c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b082      	sub	sp, #8
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015d84:	6878      	ldr	r0, [r7, #4]
 8015d86:	f000 faef 	bl	8016368 <osSemaphoreDelete>
#endif
    return 1;
 8015d8a:	2301      	movs	r3, #1
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3708      	adds	r7, #8
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015da0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f000 fa49 	bl	801623c <osSemaphoreAcquire>
 8015daa:	4603      	mov	r3, r0
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d101      	bne.n	8015db4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8015db0:	2301      	movs	r3, #1
 8015db2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015db4:	68fb      	ldr	r3, [r7, #12]
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3710      	adds	r7, #16
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}

08015dbe <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015dbe:	b580      	push	{r7, lr}
 8015dc0:	b082      	sub	sp, #8
 8015dc2:	af00      	add	r7, sp, #0
 8015dc4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	f000 fa8a 	bl	80162e0 <osSemaphoreRelease>
#endif
}
 8015dcc:	bf00      	nop
 8015dce:	3708      	adds	r7, #8
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}

08015dd4 <__NVIC_SetPriority>:
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b083      	sub	sp, #12
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	4603      	mov	r3, r0
 8015ddc:	6039      	str	r1, [r7, #0]
 8015dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	db0a      	blt.n	8015dfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	b2da      	uxtb	r2, r3
 8015dec:	490c      	ldr	r1, [pc, #48]	; (8015e20 <__NVIC_SetPriority+0x4c>)
 8015dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015df2:	0112      	lsls	r2, r2, #4
 8015df4:	b2d2      	uxtb	r2, r2
 8015df6:	440b      	add	r3, r1
 8015df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015dfc:	e00a      	b.n	8015e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	b2da      	uxtb	r2, r3
 8015e02:	4908      	ldr	r1, [pc, #32]	; (8015e24 <__NVIC_SetPriority+0x50>)
 8015e04:	79fb      	ldrb	r3, [r7, #7]
 8015e06:	f003 030f 	and.w	r3, r3, #15
 8015e0a:	3b04      	subs	r3, #4
 8015e0c:	0112      	lsls	r2, r2, #4
 8015e0e:	b2d2      	uxtb	r2, r2
 8015e10:	440b      	add	r3, r1
 8015e12:	761a      	strb	r2, [r3, #24]
}
 8015e14:	bf00      	nop
 8015e16:	370c      	adds	r7, #12
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1e:	4770      	bx	lr
 8015e20:	e000e100 	.word	0xe000e100
 8015e24:	e000ed00 	.word	0xe000ed00

08015e28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015e2c:	4b05      	ldr	r3, [pc, #20]	; (8015e44 <SysTick_Handler+0x1c>)
 8015e2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015e30:	f002 fb74 	bl	801851c <xTaskGetSchedulerState>
 8015e34:	4603      	mov	r3, r0
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d001      	beq.n	8015e3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015e3a:	f003 fa5d 	bl	80192f8 <xPortSysTickHandler>
  }
}
 8015e3e:	bf00      	nop
 8015e40:	bd80      	pop	{r7, pc}
 8015e42:	bf00      	nop
 8015e44:	e000e010 	.word	0xe000e010

08015e48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015e4c:	2100      	movs	r1, #0
 8015e4e:	f06f 0004 	mvn.w	r0, #4
 8015e52:	f7ff ffbf 	bl	8015dd4 <__NVIC_SetPriority>
#endif
}
 8015e56:	bf00      	nop
 8015e58:	bd80      	pop	{r7, pc}
	...

08015e5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015e5c:	b480      	push	{r7}
 8015e5e:	b083      	sub	sp, #12
 8015e60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e62:	f3ef 8305 	mrs	r3, IPSR
 8015e66:	603b      	str	r3, [r7, #0]
  return(result);
 8015e68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d003      	beq.n	8015e76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015e6e:	f06f 0305 	mvn.w	r3, #5
 8015e72:	607b      	str	r3, [r7, #4]
 8015e74:	e00c      	b.n	8015e90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015e76:	4b0a      	ldr	r3, [pc, #40]	; (8015ea0 <osKernelInitialize+0x44>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d105      	bne.n	8015e8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015e7e:	4b08      	ldr	r3, [pc, #32]	; (8015ea0 <osKernelInitialize+0x44>)
 8015e80:	2201      	movs	r2, #1
 8015e82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015e84:	2300      	movs	r3, #0
 8015e86:	607b      	str	r3, [r7, #4]
 8015e88:	e002      	b.n	8015e90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015e90:	687b      	ldr	r3, [r7, #4]
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	370c      	adds	r7, #12
 8015e96:	46bd      	mov	sp, r7
 8015e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9c:	4770      	bx	lr
 8015e9e:	bf00      	nop
 8015ea0:	20000870 	.word	0x20000870

08015ea4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015eaa:	f3ef 8305 	mrs	r3, IPSR
 8015eae:	603b      	str	r3, [r7, #0]
  return(result);
 8015eb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d003      	beq.n	8015ebe <osKernelStart+0x1a>
    stat = osErrorISR;
 8015eb6:	f06f 0305 	mvn.w	r3, #5
 8015eba:	607b      	str	r3, [r7, #4]
 8015ebc:	e010      	b.n	8015ee0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015ebe:	4b0b      	ldr	r3, [pc, #44]	; (8015eec <osKernelStart+0x48>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	2b01      	cmp	r3, #1
 8015ec4:	d109      	bne.n	8015eda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015ec6:	f7ff ffbf 	bl	8015e48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015eca:	4b08      	ldr	r3, [pc, #32]	; (8015eec <osKernelStart+0x48>)
 8015ecc:	2202      	movs	r2, #2
 8015ece:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015ed0:	f001 feb8 	bl	8017c44 <vTaskStartScheduler>
      stat = osOK;
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	607b      	str	r3, [r7, #4]
 8015ed8:	e002      	b.n	8015ee0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015eda:	f04f 33ff 	mov.w	r3, #4294967295
 8015ede:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015ee0:	687b      	ldr	r3, [r7, #4]
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	3708      	adds	r7, #8
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop
 8015eec:	20000870 	.word	0x20000870

08015ef0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b08e      	sub	sp, #56	; 0x38
 8015ef4:	af04      	add	r7, sp, #16
 8015ef6:	60f8      	str	r0, [r7, #12]
 8015ef8:	60b9      	str	r1, [r7, #8]
 8015efa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015efc:	2300      	movs	r3, #0
 8015efe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f00:	f3ef 8305 	mrs	r3, IPSR
 8015f04:	617b      	str	r3, [r7, #20]
  return(result);
 8015f06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d17e      	bne.n	801600a <osThreadNew+0x11a>
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d07b      	beq.n	801600a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015f12:	2380      	movs	r3, #128	; 0x80
 8015f14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015f16:	2318      	movs	r3, #24
 8015f18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015f22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d045      	beq.n	8015fb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d002      	beq.n	8015f38 <osThreadNew+0x48>
        name = attr->name;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	699b      	ldr	r3, [r3, #24]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d002      	beq.n	8015f46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	699b      	ldr	r3, [r3, #24]
 8015f44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015f46:	69fb      	ldr	r3, [r7, #28]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d008      	beq.n	8015f5e <osThreadNew+0x6e>
 8015f4c:	69fb      	ldr	r3, [r7, #28]
 8015f4e:	2b38      	cmp	r3, #56	; 0x38
 8015f50:	d805      	bhi.n	8015f5e <osThreadNew+0x6e>
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	685b      	ldr	r3, [r3, #4]
 8015f56:	f003 0301 	and.w	r3, r3, #1
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d001      	beq.n	8015f62 <osThreadNew+0x72>
        return (NULL);
 8015f5e:	2300      	movs	r3, #0
 8015f60:	e054      	b.n	801600c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	695b      	ldr	r3, [r3, #20]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d003      	beq.n	8015f72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	695b      	ldr	r3, [r3, #20]
 8015f6e:	089b      	lsrs	r3, r3, #2
 8015f70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	689b      	ldr	r3, [r3, #8]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d00e      	beq.n	8015f98 <osThreadNew+0xa8>
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	68db      	ldr	r3, [r3, #12]
 8015f7e:	2bbb      	cmp	r3, #187	; 0xbb
 8015f80:	d90a      	bls.n	8015f98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d006      	beq.n	8015f98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	695b      	ldr	r3, [r3, #20]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d002      	beq.n	8015f98 <osThreadNew+0xa8>
        mem = 1;
 8015f92:	2301      	movs	r3, #1
 8015f94:	61bb      	str	r3, [r7, #24]
 8015f96:	e010      	b.n	8015fba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	689b      	ldr	r3, [r3, #8]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d10c      	bne.n	8015fba <osThreadNew+0xca>
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	68db      	ldr	r3, [r3, #12]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d108      	bne.n	8015fba <osThreadNew+0xca>
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	691b      	ldr	r3, [r3, #16]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d104      	bne.n	8015fba <osThreadNew+0xca>
          mem = 0;
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	61bb      	str	r3, [r7, #24]
 8015fb4:	e001      	b.n	8015fba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015fba:	69bb      	ldr	r3, [r7, #24]
 8015fbc:	2b01      	cmp	r3, #1
 8015fbe:	d110      	bne.n	8015fe2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015fc4:	687a      	ldr	r2, [r7, #4]
 8015fc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015fc8:	9202      	str	r2, [sp, #8]
 8015fca:	9301      	str	r3, [sp, #4]
 8015fcc:	69fb      	ldr	r3, [r7, #28]
 8015fce:	9300      	str	r3, [sp, #0]
 8015fd0:	68bb      	ldr	r3, [r7, #8]
 8015fd2:	6a3a      	ldr	r2, [r7, #32]
 8015fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015fd6:	68f8      	ldr	r0, [r7, #12]
 8015fd8:	f001 fae0 	bl	801759c <xTaskCreateStatic>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	613b      	str	r3, [r7, #16]
 8015fe0:	e013      	b.n	801600a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015fe2:	69bb      	ldr	r3, [r7, #24]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d110      	bne.n	801600a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015fe8:	6a3b      	ldr	r3, [r7, #32]
 8015fea:	b29a      	uxth	r2, r3
 8015fec:	f107 0310 	add.w	r3, r7, #16
 8015ff0:	9301      	str	r3, [sp, #4]
 8015ff2:	69fb      	ldr	r3, [r7, #28]
 8015ff4:	9300      	str	r3, [sp, #0]
 8015ff6:	68bb      	ldr	r3, [r7, #8]
 8015ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015ffa:	68f8      	ldr	r0, [r7, #12]
 8015ffc:	f001 fb2b 	bl	8017656 <xTaskCreate>
 8016000:	4603      	mov	r3, r0
 8016002:	2b01      	cmp	r3, #1
 8016004:	d001      	beq.n	801600a <osThreadNew+0x11a>
            hTask = NULL;
 8016006:	2300      	movs	r3, #0
 8016008:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801600a:	693b      	ldr	r3, [r7, #16]
}
 801600c:	4618      	mov	r0, r3
 801600e:	3728      	adds	r7, #40	; 0x28
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}

08016014 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8016014:	b580      	push	{r7, lr}
 8016016:	b082      	sub	sp, #8
 8016018:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 801601a:	f002 fa6f 	bl	80184fc <xTaskGetCurrentTaskHandle>
 801601e:	6078      	str	r0, [r7, #4]

  return (id);
 8016020:	687b      	ldr	r3, [r7, #4]
}
 8016022:	4618      	mov	r0, r3
 8016024:	3708      	adds	r7, #8
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}
	...

0801602c <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 801602c:	b580      	push	{r7, lr}
 801602e:	b086      	sub	sp, #24
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016038:	f3ef 8305 	mrs	r3, IPSR
 801603c:	60fb      	str	r3, [r7, #12]
  return(result);
 801603e:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8016040:	2b00      	cmp	r3, #0
 8016042:	d102      	bne.n	801604a <osThreadGetState+0x1e>
 8016044:	693b      	ldr	r3, [r7, #16]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d103      	bne.n	8016052 <osThreadGetState+0x26>
    state = osThreadError;
 801604a:	f04f 33ff 	mov.w	r3, #4294967295
 801604e:	617b      	str	r3, [r7, #20]
 8016050:	e022      	b.n	8016098 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8016052:	6938      	ldr	r0, [r7, #16]
 8016054:	f001 fd00 	bl	8017a58 <eTaskGetState>
 8016058:	4603      	mov	r3, r0
 801605a:	2b04      	cmp	r3, #4
 801605c:	d818      	bhi.n	8016090 <osThreadGetState+0x64>
 801605e:	a201      	add	r2, pc, #4	; (adr r2, 8016064 <osThreadGetState+0x38>)
 8016060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016064:	08016079 	.word	0x08016079
 8016068:	0801607f 	.word	0x0801607f
 801606c:	08016085 	.word	0x08016085
 8016070:	08016085 	.word	0x08016085
 8016074:	0801608b 	.word	0x0801608b
      case eRunning:   state = osThreadRunning;    break;
 8016078:	2302      	movs	r3, #2
 801607a:	617b      	str	r3, [r7, #20]
 801607c:	e00c      	b.n	8016098 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 801607e:	2301      	movs	r3, #1
 8016080:	617b      	str	r3, [r7, #20]
 8016082:	e009      	b.n	8016098 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8016084:	2303      	movs	r3, #3
 8016086:	617b      	str	r3, [r7, #20]
 8016088:	e006      	b.n	8016098 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 801608a:	2304      	movs	r3, #4
 801608c:	617b      	str	r3, [r7, #20]
 801608e:	e003      	b.n	8016098 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8016090:	f04f 33ff 	mov.w	r3, #4294967295
 8016094:	617b      	str	r3, [r7, #20]
 8016096:	bf00      	nop
    }
  }

  return (state);
 8016098:	697b      	ldr	r3, [r7, #20]
}
 801609a:	4618      	mov	r0, r3
 801609c:	3718      	adds	r7, #24
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd80      	pop	{r7, pc}
 80160a2:	bf00      	nop

080160a4 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b086      	sub	sp, #24
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80160b0:	f3ef 8305 	mrs	r3, IPSR
 80160b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80160b6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d003      	beq.n	80160c4 <osThreadResume+0x20>
    stat = osErrorISR;
 80160bc:	f06f 0305 	mvn.w	r3, #5
 80160c0:	617b      	str	r3, [r7, #20]
 80160c2:	e00b      	b.n	80160dc <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d103      	bne.n	80160d2 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80160ca:	f06f 0303 	mvn.w	r3, #3
 80160ce:	617b      	str	r3, [r7, #20]
 80160d0:	e004      	b.n	80160dc <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80160d2:	2300      	movs	r3, #0
 80160d4:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80160d6:	6938      	ldr	r0, [r7, #16]
 80160d8:	f001 fd56 	bl	8017b88 <vTaskResume>
  }

  return (stat);
 80160dc:	697b      	ldr	r3, [r7, #20]
}
 80160de:	4618      	mov	r0, r3
 80160e0:	3718      	adds	r7, #24
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}

080160e6 <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80160e6:	b580      	push	{r7, lr}
 80160e8:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80160ea:	2000      	movs	r0, #0
 80160ec:	f001 fc0e 	bl	801790c <vTaskDelete>
#endif
  for (;;);
 80160f0:	e7fe      	b.n	80160f0 <osThreadExit+0xa>

080160f2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80160f2:	b580      	push	{r7, lr}
 80160f4:	b084      	sub	sp, #16
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80160fa:	f3ef 8305 	mrs	r3, IPSR
 80160fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8016100:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016102:	2b00      	cmp	r3, #0
 8016104:	d003      	beq.n	801610e <osDelay+0x1c>
    stat = osErrorISR;
 8016106:	f06f 0305 	mvn.w	r3, #5
 801610a:	60fb      	str	r3, [r7, #12]
 801610c:	e007      	b.n	801611e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801610e:	2300      	movs	r3, #0
 8016110:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d002      	beq.n	801611e <osDelay+0x2c>
      vTaskDelay(ticks);
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f001 fc69 	bl	80179f0 <vTaskDelay>
    }
  }

  return (stat);
 801611e:	68fb      	ldr	r3, [r7, #12]
}
 8016120:	4618      	mov	r0, r3
 8016122:	3710      	adds	r7, #16
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}

08016128 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8016128:	b580      	push	{r7, lr}
 801612a:	b08a      	sub	sp, #40	; 0x28
 801612c:	af02      	add	r7, sp, #8
 801612e:	60f8      	str	r0, [r7, #12]
 8016130:	60b9      	str	r1, [r7, #8]
 8016132:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8016134:	2300      	movs	r3, #0
 8016136:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016138:	f3ef 8305 	mrs	r3, IPSR
 801613c:	613b      	str	r3, [r7, #16]
  return(result);
 801613e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8016140:	2b00      	cmp	r3, #0
 8016142:	d175      	bne.n	8016230 <osSemaphoreNew+0x108>
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d072      	beq.n	8016230 <osSemaphoreNew+0x108>
 801614a:	68ba      	ldr	r2, [r7, #8]
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	429a      	cmp	r2, r3
 8016150:	d86e      	bhi.n	8016230 <osSemaphoreNew+0x108>
    mem = -1;
 8016152:	f04f 33ff 	mov.w	r3, #4294967295
 8016156:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d015      	beq.n	801618a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	689b      	ldr	r3, [r3, #8]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d006      	beq.n	8016174 <osSemaphoreNew+0x4c>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	68db      	ldr	r3, [r3, #12]
 801616a:	2b4f      	cmp	r3, #79	; 0x4f
 801616c:	d902      	bls.n	8016174 <osSemaphoreNew+0x4c>
        mem = 1;
 801616e:	2301      	movs	r3, #1
 8016170:	61bb      	str	r3, [r7, #24]
 8016172:	e00c      	b.n	801618e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	689b      	ldr	r3, [r3, #8]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d108      	bne.n	801618e <osSemaphoreNew+0x66>
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	68db      	ldr	r3, [r3, #12]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d104      	bne.n	801618e <osSemaphoreNew+0x66>
          mem = 0;
 8016184:	2300      	movs	r3, #0
 8016186:	61bb      	str	r3, [r7, #24]
 8016188:	e001      	b.n	801618e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801618a:	2300      	movs	r3, #0
 801618c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801618e:	69bb      	ldr	r3, [r7, #24]
 8016190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016194:	d04c      	beq.n	8016230 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	2b01      	cmp	r3, #1
 801619a:	d128      	bne.n	80161ee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801619c:	69bb      	ldr	r3, [r7, #24]
 801619e:	2b01      	cmp	r3, #1
 80161a0:	d10a      	bne.n	80161b8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	689b      	ldr	r3, [r3, #8]
 80161a6:	2203      	movs	r2, #3
 80161a8:	9200      	str	r2, [sp, #0]
 80161aa:	2200      	movs	r2, #0
 80161ac:	2100      	movs	r1, #0
 80161ae:	2001      	movs	r0, #1
 80161b0:	f000 fa4e 	bl	8016650 <xQueueGenericCreateStatic>
 80161b4:	61f8      	str	r0, [r7, #28]
 80161b6:	e005      	b.n	80161c4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80161b8:	2203      	movs	r2, #3
 80161ba:	2100      	movs	r1, #0
 80161bc:	2001      	movs	r0, #1
 80161be:	f000 fabf 	bl	8016740 <xQueueGenericCreate>
 80161c2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80161c4:	69fb      	ldr	r3, [r7, #28]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d022      	beq.n	8016210 <osSemaphoreNew+0xe8>
 80161ca:	68bb      	ldr	r3, [r7, #8]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d01f      	beq.n	8016210 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80161d0:	2300      	movs	r3, #0
 80161d2:	2200      	movs	r2, #0
 80161d4:	2100      	movs	r1, #0
 80161d6:	69f8      	ldr	r0, [r7, #28]
 80161d8:	f000 fb7a 	bl	80168d0 <xQueueGenericSend>
 80161dc:	4603      	mov	r3, r0
 80161de:	2b01      	cmp	r3, #1
 80161e0:	d016      	beq.n	8016210 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80161e2:	69f8      	ldr	r0, [r7, #28]
 80161e4:	f001 f806 	bl	80171f4 <vQueueDelete>
            hSemaphore = NULL;
 80161e8:	2300      	movs	r3, #0
 80161ea:	61fb      	str	r3, [r7, #28]
 80161ec:	e010      	b.n	8016210 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80161ee:	69bb      	ldr	r3, [r7, #24]
 80161f0:	2b01      	cmp	r3, #1
 80161f2:	d108      	bne.n	8016206 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	689b      	ldr	r3, [r3, #8]
 80161f8:	461a      	mov	r2, r3
 80161fa:	68b9      	ldr	r1, [r7, #8]
 80161fc:	68f8      	ldr	r0, [r7, #12]
 80161fe:	f000 fafc 	bl	80167fa <xQueueCreateCountingSemaphoreStatic>
 8016202:	61f8      	str	r0, [r7, #28]
 8016204:	e004      	b.n	8016210 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8016206:	68b9      	ldr	r1, [r7, #8]
 8016208:	68f8      	ldr	r0, [r7, #12]
 801620a:	f000 fb2d 	bl	8016868 <xQueueCreateCountingSemaphore>
 801620e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8016210:	69fb      	ldr	r3, [r7, #28]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d00c      	beq.n	8016230 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d003      	beq.n	8016224 <osSemaphoreNew+0xfc>
          name = attr->name;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	617b      	str	r3, [r7, #20]
 8016222:	e001      	b.n	8016228 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8016224:	2300      	movs	r3, #0
 8016226:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8016228:	6979      	ldr	r1, [r7, #20]
 801622a:	69f8      	ldr	r0, [r7, #28]
 801622c:	f001 f92e 	bl	801748c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8016230:	69fb      	ldr	r3, [r7, #28]
}
 8016232:	4618      	mov	r0, r3
 8016234:	3720      	adds	r7, #32
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
	...

0801623c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801623c:	b580      	push	{r7, lr}
 801623e:	b086      	sub	sp, #24
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
 8016244:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801624a:	2300      	movs	r3, #0
 801624c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801624e:	693b      	ldr	r3, [r7, #16]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d103      	bne.n	801625c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8016254:	f06f 0303 	mvn.w	r3, #3
 8016258:	617b      	str	r3, [r7, #20]
 801625a:	e039      	b.n	80162d0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801625c:	f3ef 8305 	mrs	r3, IPSR
 8016260:	60fb      	str	r3, [r7, #12]
  return(result);
 8016262:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016264:	2b00      	cmp	r3, #0
 8016266:	d022      	beq.n	80162ae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8016268:	683b      	ldr	r3, [r7, #0]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d003      	beq.n	8016276 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801626e:	f06f 0303 	mvn.w	r3, #3
 8016272:	617b      	str	r3, [r7, #20]
 8016274:	e02c      	b.n	80162d0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8016276:	2300      	movs	r3, #0
 8016278:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801627a:	f107 0308 	add.w	r3, r7, #8
 801627e:	461a      	mov	r2, r3
 8016280:	2100      	movs	r1, #0
 8016282:	6938      	ldr	r0, [r7, #16]
 8016284:	f000 ff36 	bl	80170f4 <xQueueReceiveFromISR>
 8016288:	4603      	mov	r3, r0
 801628a:	2b01      	cmp	r3, #1
 801628c:	d003      	beq.n	8016296 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801628e:	f06f 0302 	mvn.w	r3, #2
 8016292:	617b      	str	r3, [r7, #20]
 8016294:	e01c      	b.n	80162d0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d019      	beq.n	80162d0 <osSemaphoreAcquire+0x94>
 801629c:	4b0f      	ldr	r3, [pc, #60]	; (80162dc <osSemaphoreAcquire+0xa0>)
 801629e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162a2:	601a      	str	r2, [r3, #0]
 80162a4:	f3bf 8f4f 	dsb	sy
 80162a8:	f3bf 8f6f 	isb	sy
 80162ac:	e010      	b.n	80162d0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80162ae:	6839      	ldr	r1, [r7, #0]
 80162b0:	6938      	ldr	r0, [r7, #16]
 80162b2:	f000 fe13 	bl	8016edc <xQueueSemaphoreTake>
 80162b6:	4603      	mov	r3, r0
 80162b8:	2b01      	cmp	r3, #1
 80162ba:	d009      	beq.n	80162d0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d003      	beq.n	80162ca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80162c2:	f06f 0301 	mvn.w	r3, #1
 80162c6:	617b      	str	r3, [r7, #20]
 80162c8:	e002      	b.n	80162d0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80162ca:	f06f 0302 	mvn.w	r3, #2
 80162ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80162d0:	697b      	ldr	r3, [r7, #20]
}
 80162d2:	4618      	mov	r0, r3
 80162d4:	3718      	adds	r7, #24
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}
 80162da:	bf00      	nop
 80162dc:	e000ed04 	.word	0xe000ed04

080162e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b086      	sub	sp, #24
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80162ec:	2300      	movs	r3, #0
 80162ee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d103      	bne.n	80162fe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80162f6:	f06f 0303 	mvn.w	r3, #3
 80162fa:	617b      	str	r3, [r7, #20]
 80162fc:	e02c      	b.n	8016358 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162fe:	f3ef 8305 	mrs	r3, IPSR
 8016302:	60fb      	str	r3, [r7, #12]
  return(result);
 8016304:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016306:	2b00      	cmp	r3, #0
 8016308:	d01a      	beq.n	8016340 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801630a:	2300      	movs	r3, #0
 801630c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801630e:	f107 0308 	add.w	r3, r7, #8
 8016312:	4619      	mov	r1, r3
 8016314:	6938      	ldr	r0, [r7, #16]
 8016316:	f000 fc74 	bl	8016c02 <xQueueGiveFromISR>
 801631a:	4603      	mov	r3, r0
 801631c:	2b01      	cmp	r3, #1
 801631e:	d003      	beq.n	8016328 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8016320:	f06f 0302 	mvn.w	r3, #2
 8016324:	617b      	str	r3, [r7, #20]
 8016326:	e017      	b.n	8016358 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8016328:	68bb      	ldr	r3, [r7, #8]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d014      	beq.n	8016358 <osSemaphoreRelease+0x78>
 801632e:	4b0d      	ldr	r3, [pc, #52]	; (8016364 <osSemaphoreRelease+0x84>)
 8016330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016334:	601a      	str	r2, [r3, #0]
 8016336:	f3bf 8f4f 	dsb	sy
 801633a:	f3bf 8f6f 	isb	sy
 801633e:	e00b      	b.n	8016358 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016340:	2300      	movs	r3, #0
 8016342:	2200      	movs	r2, #0
 8016344:	2100      	movs	r1, #0
 8016346:	6938      	ldr	r0, [r7, #16]
 8016348:	f000 fac2 	bl	80168d0 <xQueueGenericSend>
 801634c:	4603      	mov	r3, r0
 801634e:	2b01      	cmp	r3, #1
 8016350:	d002      	beq.n	8016358 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8016352:	f06f 0302 	mvn.w	r3, #2
 8016356:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8016358:	697b      	ldr	r3, [r7, #20]
}
 801635a:	4618      	mov	r0, r3
 801635c:	3718      	adds	r7, #24
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
 8016362:	bf00      	nop
 8016364:	e000ed04 	.word	0xe000ed04

08016368 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8016368:	b580      	push	{r7, lr}
 801636a:	b086      	sub	sp, #24
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016374:	f3ef 8305 	mrs	r3, IPSR
 8016378:	60fb      	str	r3, [r7, #12]
  return(result);
 801637a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801637c:	2b00      	cmp	r3, #0
 801637e:	d003      	beq.n	8016388 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8016380:	f06f 0305 	mvn.w	r3, #5
 8016384:	617b      	str	r3, [r7, #20]
 8016386:	e00e      	b.n	80163a6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d103      	bne.n	8016396 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801638e:	f06f 0303 	mvn.w	r3, #3
 8016392:	617b      	str	r3, [r7, #20]
 8016394:	e007      	b.n	80163a6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8016396:	6938      	ldr	r0, [r7, #16]
 8016398:	f001 f8a2 	bl	80174e0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801639c:	2300      	movs	r3, #0
 801639e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80163a0:	6938      	ldr	r0, [r7, #16]
 80163a2:	f000 ff27 	bl	80171f4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80163a6:	697b      	ldr	r3, [r7, #20]
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3718      	adds	r7, #24
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80163b0:	b480      	push	{r7}
 80163b2:	b085      	sub	sp, #20
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	4a07      	ldr	r2, [pc, #28]	; (80163dc <vApplicationGetIdleTaskMemory+0x2c>)
 80163c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	4a06      	ldr	r2, [pc, #24]	; (80163e0 <vApplicationGetIdleTaskMemory+0x30>)
 80163c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2280      	movs	r2, #128	; 0x80
 80163cc:	601a      	str	r2, [r3, #0]
}
 80163ce:	bf00      	nop
 80163d0:	3714      	adds	r7, #20
 80163d2:	46bd      	mov	sp, r7
 80163d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d8:	4770      	bx	lr
 80163da:	bf00      	nop
 80163dc:	20000874 	.word	0x20000874
 80163e0:	20000930 	.word	0x20000930

080163e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80163e4:	b480      	push	{r7}
 80163e6:	b085      	sub	sp, #20
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	4a07      	ldr	r2, [pc, #28]	; (8016410 <vApplicationGetTimerTaskMemory+0x2c>)
 80163f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80163f6:	68bb      	ldr	r3, [r7, #8]
 80163f8:	4a06      	ldr	r2, [pc, #24]	; (8016414 <vApplicationGetTimerTaskMemory+0x30>)
 80163fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016402:	601a      	str	r2, [r3, #0]
}
 8016404:	bf00      	nop
 8016406:	3714      	adds	r7, #20
 8016408:	46bd      	mov	sp, r7
 801640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640e:	4770      	bx	lr
 8016410:	20000b30 	.word	0x20000b30
 8016414:	20000bec 	.word	0x20000bec

08016418 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016418:	b480      	push	{r7}
 801641a:	b083      	sub	sp, #12
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f103 0208 	add.w	r2, r3, #8
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	f04f 32ff 	mov.w	r2, #4294967295
 8016430:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f103 0208 	add.w	r2, r3, #8
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f103 0208 	add.w	r2, r3, #8
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2200      	movs	r2, #0
 801644a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801644c:	bf00      	nop
 801644e:	370c      	adds	r7, #12
 8016450:	46bd      	mov	sp, r7
 8016452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016456:	4770      	bx	lr

08016458 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016458:	b480      	push	{r7}
 801645a:	b083      	sub	sp, #12
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2200      	movs	r2, #0
 8016464:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016466:	bf00      	nop
 8016468:	370c      	adds	r7, #12
 801646a:	46bd      	mov	sp, r7
 801646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016470:	4770      	bx	lr

08016472 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016472:	b480      	push	{r7}
 8016474:	b085      	sub	sp, #20
 8016476:	af00      	add	r7, sp, #0
 8016478:	6078      	str	r0, [r7, #4]
 801647a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	685b      	ldr	r3, [r3, #4]
 8016480:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016482:	683b      	ldr	r3, [r7, #0]
 8016484:	68fa      	ldr	r2, [r7, #12]
 8016486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	689a      	ldr	r2, [r3, #8]
 801648c:	683b      	ldr	r3, [r7, #0]
 801648e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	689b      	ldr	r3, [r3, #8]
 8016494:	683a      	ldr	r2, [r7, #0]
 8016496:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	683a      	ldr	r2, [r7, #0]
 801649c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	687a      	ldr	r2, [r7, #4]
 80164a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	1c5a      	adds	r2, r3, #1
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	601a      	str	r2, [r3, #0]
}
 80164ae:	bf00      	nop
 80164b0:	3714      	adds	r7, #20
 80164b2:	46bd      	mov	sp, r7
 80164b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b8:	4770      	bx	lr

080164ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80164ba:	b480      	push	{r7}
 80164bc:	b085      	sub	sp, #20
 80164be:	af00      	add	r7, sp, #0
 80164c0:	6078      	str	r0, [r7, #4]
 80164c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80164c4:	683b      	ldr	r3, [r7, #0]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80164ca:	68bb      	ldr	r3, [r7, #8]
 80164cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164d0:	d103      	bne.n	80164da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	691b      	ldr	r3, [r3, #16]
 80164d6:	60fb      	str	r3, [r7, #12]
 80164d8:	e00c      	b.n	80164f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	3308      	adds	r3, #8
 80164de:	60fb      	str	r3, [r7, #12]
 80164e0:	e002      	b.n	80164e8 <vListInsert+0x2e>
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	60fb      	str	r3, [r7, #12]
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	685b      	ldr	r3, [r3, #4]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	68ba      	ldr	r2, [r7, #8]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d2f6      	bcs.n	80164e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	685a      	ldr	r2, [r3, #4]
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	685b      	ldr	r3, [r3, #4]
 8016500:	683a      	ldr	r2, [r7, #0]
 8016502:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016504:	683b      	ldr	r3, [r7, #0]
 8016506:	68fa      	ldr	r2, [r7, #12]
 8016508:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	683a      	ldr	r2, [r7, #0]
 801650e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016510:	683b      	ldr	r3, [r7, #0]
 8016512:	687a      	ldr	r2, [r7, #4]
 8016514:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	1c5a      	adds	r2, r3, #1
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	601a      	str	r2, [r3, #0]
}
 8016520:	bf00      	nop
 8016522:	3714      	adds	r7, #20
 8016524:	46bd      	mov	sp, r7
 8016526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652a:	4770      	bx	lr

0801652c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801652c:	b480      	push	{r7}
 801652e:	b085      	sub	sp, #20
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	691b      	ldr	r3, [r3, #16]
 8016538:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	685b      	ldr	r3, [r3, #4]
 801653e:	687a      	ldr	r2, [r7, #4]
 8016540:	6892      	ldr	r2, [r2, #8]
 8016542:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	689b      	ldr	r3, [r3, #8]
 8016548:	687a      	ldr	r2, [r7, #4]
 801654a:	6852      	ldr	r2, [r2, #4]
 801654c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	685b      	ldr	r3, [r3, #4]
 8016552:	687a      	ldr	r2, [r7, #4]
 8016554:	429a      	cmp	r2, r3
 8016556:	d103      	bne.n	8016560 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	689a      	ldr	r2, [r3, #8]
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2200      	movs	r2, #0
 8016564:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	1e5a      	subs	r2, r3, #1
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	681b      	ldr	r3, [r3, #0]
}
 8016574:	4618      	mov	r0, r3
 8016576:	3714      	adds	r7, #20
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr

08016580 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b084      	sub	sp, #16
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d10a      	bne.n	80165aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016598:	f383 8811 	msr	BASEPRI, r3
 801659c:	f3bf 8f6f 	isb	sy
 80165a0:	f3bf 8f4f 	dsb	sy
 80165a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80165a6:	bf00      	nop
 80165a8:	e7fe      	b.n	80165a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80165aa:	f002 fe13 	bl	80191d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	681a      	ldr	r2, [r3, #0]
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165b6:	68f9      	ldr	r1, [r7, #12]
 80165b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80165ba:	fb01 f303 	mul.w	r3, r1, r3
 80165be:	441a      	add	r2, r3
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	2200      	movs	r2, #0
 80165c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	681a      	ldr	r2, [r3, #0]
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	681a      	ldr	r2, [r3, #0]
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165da:	3b01      	subs	r3, #1
 80165dc:	68f9      	ldr	r1, [r7, #12]
 80165de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80165e0:	fb01 f303 	mul.w	r3, r1, r3
 80165e4:	441a      	add	r2, r3
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	22ff      	movs	r2, #255	; 0xff
 80165ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	22ff      	movs	r2, #255	; 0xff
 80165f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d114      	bne.n	801662a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	691b      	ldr	r3, [r3, #16]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d01a      	beq.n	801663e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	3310      	adds	r3, #16
 801660c:	4618      	mov	r0, r3
 801660e:	f001 fdb3 	bl	8018178 <xTaskRemoveFromEventList>
 8016612:	4603      	mov	r3, r0
 8016614:	2b00      	cmp	r3, #0
 8016616:	d012      	beq.n	801663e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016618:	4b0c      	ldr	r3, [pc, #48]	; (801664c <xQueueGenericReset+0xcc>)
 801661a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801661e:	601a      	str	r2, [r3, #0]
 8016620:	f3bf 8f4f 	dsb	sy
 8016624:	f3bf 8f6f 	isb	sy
 8016628:	e009      	b.n	801663e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	3310      	adds	r3, #16
 801662e:	4618      	mov	r0, r3
 8016630:	f7ff fef2 	bl	8016418 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	3324      	adds	r3, #36	; 0x24
 8016638:	4618      	mov	r0, r3
 801663a:	f7ff feed 	bl	8016418 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801663e:	f002 fdf9 	bl	8019234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016642:	2301      	movs	r3, #1
}
 8016644:	4618      	mov	r0, r3
 8016646:	3710      	adds	r7, #16
 8016648:	46bd      	mov	sp, r7
 801664a:	bd80      	pop	{r7, pc}
 801664c:	e000ed04 	.word	0xe000ed04

08016650 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016650:	b580      	push	{r7, lr}
 8016652:	b08e      	sub	sp, #56	; 0x38
 8016654:	af02      	add	r7, sp, #8
 8016656:	60f8      	str	r0, [r7, #12]
 8016658:	60b9      	str	r1, [r7, #8]
 801665a:	607a      	str	r2, [r7, #4]
 801665c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d10a      	bne.n	801667a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016668:	f383 8811 	msr	BASEPRI, r3
 801666c:	f3bf 8f6f 	isb	sy
 8016670:	f3bf 8f4f 	dsb	sy
 8016674:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016676:	bf00      	nop
 8016678:	e7fe      	b.n	8016678 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801667a:	683b      	ldr	r3, [r7, #0]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d10a      	bne.n	8016696 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016684:	f383 8811 	msr	BASEPRI, r3
 8016688:	f3bf 8f6f 	isb	sy
 801668c:	f3bf 8f4f 	dsb	sy
 8016690:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016692:	bf00      	nop
 8016694:	e7fe      	b.n	8016694 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d002      	beq.n	80166a2 <xQueueGenericCreateStatic+0x52>
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d001      	beq.n	80166a6 <xQueueGenericCreateStatic+0x56>
 80166a2:	2301      	movs	r3, #1
 80166a4:	e000      	b.n	80166a8 <xQueueGenericCreateStatic+0x58>
 80166a6:	2300      	movs	r3, #0
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d10a      	bne.n	80166c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80166ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166b0:	f383 8811 	msr	BASEPRI, r3
 80166b4:	f3bf 8f6f 	isb	sy
 80166b8:	f3bf 8f4f 	dsb	sy
 80166bc:	623b      	str	r3, [r7, #32]
}
 80166be:	bf00      	nop
 80166c0:	e7fe      	b.n	80166c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d102      	bne.n	80166ce <xQueueGenericCreateStatic+0x7e>
 80166c8:	68bb      	ldr	r3, [r7, #8]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d101      	bne.n	80166d2 <xQueueGenericCreateStatic+0x82>
 80166ce:	2301      	movs	r3, #1
 80166d0:	e000      	b.n	80166d4 <xQueueGenericCreateStatic+0x84>
 80166d2:	2300      	movs	r3, #0
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d10a      	bne.n	80166ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80166d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166dc:	f383 8811 	msr	BASEPRI, r3
 80166e0:	f3bf 8f6f 	isb	sy
 80166e4:	f3bf 8f4f 	dsb	sy
 80166e8:	61fb      	str	r3, [r7, #28]
}
 80166ea:	bf00      	nop
 80166ec:	e7fe      	b.n	80166ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80166ee:	2350      	movs	r3, #80	; 0x50
 80166f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80166f2:	697b      	ldr	r3, [r7, #20]
 80166f4:	2b50      	cmp	r3, #80	; 0x50
 80166f6:	d00a      	beq.n	801670e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80166f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166fc:	f383 8811 	msr	BASEPRI, r3
 8016700:	f3bf 8f6f 	isb	sy
 8016704:	f3bf 8f4f 	dsb	sy
 8016708:	61bb      	str	r3, [r7, #24]
}
 801670a:	bf00      	nop
 801670c:	e7fe      	b.n	801670c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801670e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016716:	2b00      	cmp	r3, #0
 8016718:	d00d      	beq.n	8016736 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801671c:	2201      	movs	r2, #1
 801671e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016722:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016728:	9300      	str	r3, [sp, #0]
 801672a:	4613      	mov	r3, r2
 801672c:	687a      	ldr	r2, [r7, #4]
 801672e:	68b9      	ldr	r1, [r7, #8]
 8016730:	68f8      	ldr	r0, [r7, #12]
 8016732:	f000 f83f 	bl	80167b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016738:	4618      	mov	r0, r3
 801673a:	3730      	adds	r7, #48	; 0x30
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}

08016740 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016740:	b580      	push	{r7, lr}
 8016742:	b08a      	sub	sp, #40	; 0x28
 8016744:	af02      	add	r7, sp, #8
 8016746:	60f8      	str	r0, [r7, #12]
 8016748:	60b9      	str	r1, [r7, #8]
 801674a:	4613      	mov	r3, r2
 801674c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d10a      	bne.n	801676a <xQueueGenericCreate+0x2a>
	__asm volatile
 8016754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016758:	f383 8811 	msr	BASEPRI, r3
 801675c:	f3bf 8f6f 	isb	sy
 8016760:	f3bf 8f4f 	dsb	sy
 8016764:	613b      	str	r3, [r7, #16]
}
 8016766:	bf00      	nop
 8016768:	e7fe      	b.n	8016768 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	68ba      	ldr	r2, [r7, #8]
 801676e:	fb02 f303 	mul.w	r3, r2, r3
 8016772:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016774:	69fb      	ldr	r3, [r7, #28]
 8016776:	3350      	adds	r3, #80	; 0x50
 8016778:	4618      	mov	r0, r3
 801677a:	f002 fe4d 	bl	8019418 <pvPortMalloc>
 801677e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016780:	69bb      	ldr	r3, [r7, #24]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d011      	beq.n	80167aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016786:	69bb      	ldr	r3, [r7, #24]
 8016788:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801678a:	697b      	ldr	r3, [r7, #20]
 801678c:	3350      	adds	r3, #80	; 0x50
 801678e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016790:	69bb      	ldr	r3, [r7, #24]
 8016792:	2200      	movs	r2, #0
 8016794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016798:	79fa      	ldrb	r2, [r7, #7]
 801679a:	69bb      	ldr	r3, [r7, #24]
 801679c:	9300      	str	r3, [sp, #0]
 801679e:	4613      	mov	r3, r2
 80167a0:	697a      	ldr	r2, [r7, #20]
 80167a2:	68b9      	ldr	r1, [r7, #8]
 80167a4:	68f8      	ldr	r0, [r7, #12]
 80167a6:	f000 f805 	bl	80167b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80167aa:	69bb      	ldr	r3, [r7, #24]
	}
 80167ac:	4618      	mov	r0, r3
 80167ae:	3720      	adds	r7, #32
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd80      	pop	{r7, pc}

080167b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b084      	sub	sp, #16
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	60f8      	str	r0, [r7, #12]
 80167bc:	60b9      	str	r1, [r7, #8]
 80167be:	607a      	str	r2, [r7, #4]
 80167c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d103      	bne.n	80167d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80167c8:	69bb      	ldr	r3, [r7, #24]
 80167ca:	69ba      	ldr	r2, [r7, #24]
 80167cc:	601a      	str	r2, [r3, #0]
 80167ce:	e002      	b.n	80167d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80167d0:	69bb      	ldr	r3, [r7, #24]
 80167d2:	687a      	ldr	r2, [r7, #4]
 80167d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80167d6:	69bb      	ldr	r3, [r7, #24]
 80167d8:	68fa      	ldr	r2, [r7, #12]
 80167da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80167dc:	69bb      	ldr	r3, [r7, #24]
 80167de:	68ba      	ldr	r2, [r7, #8]
 80167e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80167e2:	2101      	movs	r1, #1
 80167e4:	69b8      	ldr	r0, [r7, #24]
 80167e6:	f7ff fecb 	bl	8016580 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80167ea:	69bb      	ldr	r3, [r7, #24]
 80167ec:	78fa      	ldrb	r2, [r7, #3]
 80167ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80167f2:	bf00      	nop
 80167f4:	3710      	adds	r7, #16
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}

080167fa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80167fa:	b580      	push	{r7, lr}
 80167fc:	b08a      	sub	sp, #40	; 0x28
 80167fe:	af02      	add	r7, sp, #8
 8016800:	60f8      	str	r0, [r7, #12]
 8016802:	60b9      	str	r1, [r7, #8]
 8016804:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d10a      	bne.n	8016822 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 801680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016810:	f383 8811 	msr	BASEPRI, r3
 8016814:	f3bf 8f6f 	isb	sy
 8016818:	f3bf 8f4f 	dsb	sy
 801681c:	61bb      	str	r3, [r7, #24]
}
 801681e:	bf00      	nop
 8016820:	e7fe      	b.n	8016820 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016822:	68ba      	ldr	r2, [r7, #8]
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	429a      	cmp	r2, r3
 8016828:	d90a      	bls.n	8016840 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801682e:	f383 8811 	msr	BASEPRI, r3
 8016832:	f3bf 8f6f 	isb	sy
 8016836:	f3bf 8f4f 	dsb	sy
 801683a:	617b      	str	r3, [r7, #20]
}
 801683c:	bf00      	nop
 801683e:	e7fe      	b.n	801683e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016840:	2302      	movs	r3, #2
 8016842:	9300      	str	r3, [sp, #0]
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	2200      	movs	r2, #0
 8016848:	2100      	movs	r1, #0
 801684a:	68f8      	ldr	r0, [r7, #12]
 801684c:	f7ff ff00 	bl	8016650 <xQueueGenericCreateStatic>
 8016850:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016852:	69fb      	ldr	r3, [r7, #28]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d002      	beq.n	801685e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016858:	69fb      	ldr	r3, [r7, #28]
 801685a:	68ba      	ldr	r2, [r7, #8]
 801685c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801685e:	69fb      	ldr	r3, [r7, #28]
	}
 8016860:	4618      	mov	r0, r3
 8016862:	3720      	adds	r7, #32
 8016864:	46bd      	mov	sp, r7
 8016866:	bd80      	pop	{r7, pc}

08016868 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016868:	b580      	push	{r7, lr}
 801686a:	b086      	sub	sp, #24
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
 8016870:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d10a      	bne.n	801688e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8016878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801687c:	f383 8811 	msr	BASEPRI, r3
 8016880:	f3bf 8f6f 	isb	sy
 8016884:	f3bf 8f4f 	dsb	sy
 8016888:	613b      	str	r3, [r7, #16]
}
 801688a:	bf00      	nop
 801688c:	e7fe      	b.n	801688c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801688e:	683a      	ldr	r2, [r7, #0]
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	429a      	cmp	r2, r3
 8016894:	d90a      	bls.n	80168ac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8016896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801689a:	f383 8811 	msr	BASEPRI, r3
 801689e:	f3bf 8f6f 	isb	sy
 80168a2:	f3bf 8f4f 	dsb	sy
 80168a6:	60fb      	str	r3, [r7, #12]
}
 80168a8:	bf00      	nop
 80168aa:	e7fe      	b.n	80168aa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80168ac:	2202      	movs	r2, #2
 80168ae:	2100      	movs	r1, #0
 80168b0:	6878      	ldr	r0, [r7, #4]
 80168b2:	f7ff ff45 	bl	8016740 <xQueueGenericCreate>
 80168b6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d002      	beq.n	80168c4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80168be:	697b      	ldr	r3, [r7, #20]
 80168c0:	683a      	ldr	r2, [r7, #0]
 80168c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80168c4:	697b      	ldr	r3, [r7, #20]
	}
 80168c6:	4618      	mov	r0, r3
 80168c8:	3718      	adds	r7, #24
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}
	...

080168d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b08e      	sub	sp, #56	; 0x38
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	60f8      	str	r0, [r7, #12]
 80168d8:	60b9      	str	r1, [r7, #8]
 80168da:	607a      	str	r2, [r7, #4]
 80168dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80168de:	2300      	movs	r3, #0
 80168e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80168e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d10a      	bne.n	8016902 <xQueueGenericSend+0x32>
	__asm volatile
 80168ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168f0:	f383 8811 	msr	BASEPRI, r3
 80168f4:	f3bf 8f6f 	isb	sy
 80168f8:	f3bf 8f4f 	dsb	sy
 80168fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80168fe:	bf00      	nop
 8016900:	e7fe      	b.n	8016900 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d103      	bne.n	8016910 <xQueueGenericSend+0x40>
 8016908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801690c:	2b00      	cmp	r3, #0
 801690e:	d101      	bne.n	8016914 <xQueueGenericSend+0x44>
 8016910:	2301      	movs	r3, #1
 8016912:	e000      	b.n	8016916 <xQueueGenericSend+0x46>
 8016914:	2300      	movs	r3, #0
 8016916:	2b00      	cmp	r3, #0
 8016918:	d10a      	bne.n	8016930 <xQueueGenericSend+0x60>
	__asm volatile
 801691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801691e:	f383 8811 	msr	BASEPRI, r3
 8016922:	f3bf 8f6f 	isb	sy
 8016926:	f3bf 8f4f 	dsb	sy
 801692a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801692c:	bf00      	nop
 801692e:	e7fe      	b.n	801692e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	2b02      	cmp	r3, #2
 8016934:	d103      	bne.n	801693e <xQueueGenericSend+0x6e>
 8016936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801693a:	2b01      	cmp	r3, #1
 801693c:	d101      	bne.n	8016942 <xQueueGenericSend+0x72>
 801693e:	2301      	movs	r3, #1
 8016940:	e000      	b.n	8016944 <xQueueGenericSend+0x74>
 8016942:	2300      	movs	r3, #0
 8016944:	2b00      	cmp	r3, #0
 8016946:	d10a      	bne.n	801695e <xQueueGenericSend+0x8e>
	__asm volatile
 8016948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801694c:	f383 8811 	msr	BASEPRI, r3
 8016950:	f3bf 8f6f 	isb	sy
 8016954:	f3bf 8f4f 	dsb	sy
 8016958:	623b      	str	r3, [r7, #32]
}
 801695a:	bf00      	nop
 801695c:	e7fe      	b.n	801695c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801695e:	f001 fddd 	bl	801851c <xTaskGetSchedulerState>
 8016962:	4603      	mov	r3, r0
 8016964:	2b00      	cmp	r3, #0
 8016966:	d102      	bne.n	801696e <xQueueGenericSend+0x9e>
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d101      	bne.n	8016972 <xQueueGenericSend+0xa2>
 801696e:	2301      	movs	r3, #1
 8016970:	e000      	b.n	8016974 <xQueueGenericSend+0xa4>
 8016972:	2300      	movs	r3, #0
 8016974:	2b00      	cmp	r3, #0
 8016976:	d10a      	bne.n	801698e <xQueueGenericSend+0xbe>
	__asm volatile
 8016978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801697c:	f383 8811 	msr	BASEPRI, r3
 8016980:	f3bf 8f6f 	isb	sy
 8016984:	f3bf 8f4f 	dsb	sy
 8016988:	61fb      	str	r3, [r7, #28]
}
 801698a:	bf00      	nop
 801698c:	e7fe      	b.n	801698c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801698e:	f002 fc21 	bl	80191d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801699a:	429a      	cmp	r2, r3
 801699c:	d302      	bcc.n	80169a4 <xQueueGenericSend+0xd4>
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	2b02      	cmp	r3, #2
 80169a2:	d129      	bne.n	80169f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80169a4:	683a      	ldr	r2, [r7, #0]
 80169a6:	68b9      	ldr	r1, [r7, #8]
 80169a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169aa:	f000 fc5e 	bl	801726a <prvCopyDataToQueue>
 80169ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80169b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d010      	beq.n	80169da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80169b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ba:	3324      	adds	r3, #36	; 0x24
 80169bc:	4618      	mov	r0, r3
 80169be:	f001 fbdb 	bl	8018178 <xTaskRemoveFromEventList>
 80169c2:	4603      	mov	r3, r0
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d013      	beq.n	80169f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80169c8:	4b3f      	ldr	r3, [pc, #252]	; (8016ac8 <xQueueGenericSend+0x1f8>)
 80169ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169ce:	601a      	str	r2, [r3, #0]
 80169d0:	f3bf 8f4f 	dsb	sy
 80169d4:	f3bf 8f6f 	isb	sy
 80169d8:	e00a      	b.n	80169f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80169da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d007      	beq.n	80169f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80169e0:	4b39      	ldr	r3, [pc, #228]	; (8016ac8 <xQueueGenericSend+0x1f8>)
 80169e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169e6:	601a      	str	r2, [r3, #0]
 80169e8:	f3bf 8f4f 	dsb	sy
 80169ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80169f0:	f002 fc20 	bl	8019234 <vPortExitCritical>
				return pdPASS;
 80169f4:	2301      	movs	r3, #1
 80169f6:	e063      	b.n	8016ac0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d103      	bne.n	8016a06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80169fe:	f002 fc19 	bl	8019234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016a02:	2300      	movs	r3, #0
 8016a04:	e05c      	b.n	8016ac0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d106      	bne.n	8016a1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016a0c:	f107 0314 	add.w	r3, r7, #20
 8016a10:	4618      	mov	r0, r3
 8016a12:	f001 fc15 	bl	8018240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016a16:	2301      	movs	r3, #1
 8016a18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016a1a:	f002 fc0b 	bl	8019234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016a1e:	f001 f981 	bl	8017d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016a22:	f002 fbd7 	bl	80191d4 <vPortEnterCritical>
 8016a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016a2c:	b25b      	sxtb	r3, r3
 8016a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a32:	d103      	bne.n	8016a3c <xQueueGenericSend+0x16c>
 8016a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a36:	2200      	movs	r2, #0
 8016a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016a42:	b25b      	sxtb	r3, r3
 8016a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a48:	d103      	bne.n	8016a52 <xQueueGenericSend+0x182>
 8016a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a52:	f002 fbef 	bl	8019234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016a56:	1d3a      	adds	r2, r7, #4
 8016a58:	f107 0314 	add.w	r3, r7, #20
 8016a5c:	4611      	mov	r1, r2
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f001 fc04 	bl	801826c <xTaskCheckForTimeOut>
 8016a64:	4603      	mov	r3, r0
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d124      	bne.n	8016ab4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a6c:	f000 fcf5 	bl	801745a <prvIsQueueFull>
 8016a70:	4603      	mov	r3, r0
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d018      	beq.n	8016aa8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a78:	3310      	adds	r3, #16
 8016a7a:	687a      	ldr	r2, [r7, #4]
 8016a7c:	4611      	mov	r1, r2
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f001 fb2a 	bl	80180d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a86:	f000 fc80 	bl	801738a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016a8a:	f001 f959 	bl	8017d40 <xTaskResumeAll>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	f47f af7c 	bne.w	801698e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016a96:	4b0c      	ldr	r3, [pc, #48]	; (8016ac8 <xQueueGenericSend+0x1f8>)
 8016a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a9c:	601a      	str	r2, [r3, #0]
 8016a9e:	f3bf 8f4f 	dsb	sy
 8016aa2:	f3bf 8f6f 	isb	sy
 8016aa6:	e772      	b.n	801698e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016aaa:	f000 fc6e 	bl	801738a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016aae:	f001 f947 	bl	8017d40 <xTaskResumeAll>
 8016ab2:	e76c      	b.n	801698e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ab6:	f000 fc68 	bl	801738a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016aba:	f001 f941 	bl	8017d40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016abe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3738      	adds	r7, #56	; 0x38
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	e000ed04 	.word	0xe000ed04

08016acc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b090      	sub	sp, #64	; 0x40
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	60f8      	str	r0, [r7, #12]
 8016ad4:	60b9      	str	r1, [r7, #8]
 8016ad6:	607a      	str	r2, [r7, #4]
 8016ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d10a      	bne.n	8016afa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ae8:	f383 8811 	msr	BASEPRI, r3
 8016aec:	f3bf 8f6f 	isb	sy
 8016af0:	f3bf 8f4f 	dsb	sy
 8016af4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016af6:	bf00      	nop
 8016af8:	e7fe      	b.n	8016af8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016afa:	68bb      	ldr	r3, [r7, #8]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d103      	bne.n	8016b08 <xQueueGenericSendFromISR+0x3c>
 8016b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d101      	bne.n	8016b0c <xQueueGenericSendFromISR+0x40>
 8016b08:	2301      	movs	r3, #1
 8016b0a:	e000      	b.n	8016b0e <xQueueGenericSendFromISR+0x42>
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d10a      	bne.n	8016b28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b16:	f383 8811 	msr	BASEPRI, r3
 8016b1a:	f3bf 8f6f 	isb	sy
 8016b1e:	f3bf 8f4f 	dsb	sy
 8016b22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016b24:	bf00      	nop
 8016b26:	e7fe      	b.n	8016b26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016b28:	683b      	ldr	r3, [r7, #0]
 8016b2a:	2b02      	cmp	r3, #2
 8016b2c:	d103      	bne.n	8016b36 <xQueueGenericSendFromISR+0x6a>
 8016b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b32:	2b01      	cmp	r3, #1
 8016b34:	d101      	bne.n	8016b3a <xQueueGenericSendFromISR+0x6e>
 8016b36:	2301      	movs	r3, #1
 8016b38:	e000      	b.n	8016b3c <xQueueGenericSendFromISR+0x70>
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d10a      	bne.n	8016b56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b44:	f383 8811 	msr	BASEPRI, r3
 8016b48:	f3bf 8f6f 	isb	sy
 8016b4c:	f3bf 8f4f 	dsb	sy
 8016b50:	623b      	str	r3, [r7, #32]
}
 8016b52:	bf00      	nop
 8016b54:	e7fe      	b.n	8016b54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016b56:	f002 fc1f 	bl	8019398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8016b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b62:	f383 8811 	msr	BASEPRI, r3
 8016b66:	f3bf 8f6f 	isb	sy
 8016b6a:	f3bf 8f4f 	dsb	sy
 8016b6e:	61fa      	str	r2, [r7, #28]
 8016b70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016b72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016b74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d302      	bcc.n	8016b88 <xQueueGenericSendFromISR+0xbc>
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	2b02      	cmp	r3, #2
 8016b86:	d12f      	bne.n	8016be8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016b98:	683a      	ldr	r2, [r7, #0]
 8016b9a:	68b9      	ldr	r1, [r7, #8]
 8016b9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016b9e:	f000 fb64 	bl	801726a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016ba2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016baa:	d112      	bne.n	8016bd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d016      	beq.n	8016be2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bb6:	3324      	adds	r3, #36	; 0x24
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f001 fadd 	bl	8018178 <xTaskRemoveFromEventList>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d00e      	beq.n	8016be2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d00b      	beq.n	8016be2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2201      	movs	r2, #1
 8016bce:	601a      	str	r2, [r3, #0]
 8016bd0:	e007      	b.n	8016be2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016bd6:	3301      	adds	r3, #1
 8016bd8:	b2db      	uxtb	r3, r3
 8016bda:	b25a      	sxtb	r2, r3
 8016bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016be2:	2301      	movs	r3, #1
 8016be4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016be6:	e001      	b.n	8016bec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016be8:	2300      	movs	r3, #0
 8016bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016bf0:	697b      	ldr	r3, [r7, #20]
 8016bf2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016bf6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	3740      	adds	r7, #64	; 0x40
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	bd80      	pop	{r7, pc}

08016c02 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016c02:	b580      	push	{r7, lr}
 8016c04:	b08e      	sub	sp, #56	; 0x38
 8016c06:	af00      	add	r7, sp, #0
 8016c08:	6078      	str	r0, [r7, #4]
 8016c0a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d10a      	bne.n	8016c2c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8016c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c1a:	f383 8811 	msr	BASEPRI, r3
 8016c1e:	f3bf 8f6f 	isb	sy
 8016c22:	f3bf 8f4f 	dsb	sy
 8016c26:	623b      	str	r3, [r7, #32]
}
 8016c28:	bf00      	nop
 8016c2a:	e7fe      	b.n	8016c2a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d00a      	beq.n	8016c4a <xQueueGiveFromISR+0x48>
	__asm volatile
 8016c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c38:	f383 8811 	msr	BASEPRI, r3
 8016c3c:	f3bf 8f6f 	isb	sy
 8016c40:	f3bf 8f4f 	dsb	sy
 8016c44:	61fb      	str	r3, [r7, #28]
}
 8016c46:	bf00      	nop
 8016c48:	e7fe      	b.n	8016c48 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d103      	bne.n	8016c5a <xQueueGiveFromISR+0x58>
 8016c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c54:	689b      	ldr	r3, [r3, #8]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d101      	bne.n	8016c5e <xQueueGiveFromISR+0x5c>
 8016c5a:	2301      	movs	r3, #1
 8016c5c:	e000      	b.n	8016c60 <xQueueGiveFromISR+0x5e>
 8016c5e:	2300      	movs	r3, #0
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d10a      	bne.n	8016c7a <xQueueGiveFromISR+0x78>
	__asm volatile
 8016c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c68:	f383 8811 	msr	BASEPRI, r3
 8016c6c:	f3bf 8f6f 	isb	sy
 8016c70:	f3bf 8f4f 	dsb	sy
 8016c74:	61bb      	str	r3, [r7, #24]
}
 8016c76:	bf00      	nop
 8016c78:	e7fe      	b.n	8016c78 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016c7a:	f002 fb8d 	bl	8019398 <vPortValidateInterruptPriority>
	__asm volatile
 8016c7e:	f3ef 8211 	mrs	r2, BASEPRI
 8016c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c86:	f383 8811 	msr	BASEPRI, r3
 8016c8a:	f3bf 8f6f 	isb	sy
 8016c8e:	f3bf 8f4f 	dsb	sy
 8016c92:	617a      	str	r2, [r7, #20]
 8016c94:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016c96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	d22b      	bcs.n	8016d02 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb6:	1c5a      	adds	r2, r3, #1
 8016cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016cbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cc4:	d112      	bne.n	8016cec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d016      	beq.n	8016cfc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd0:	3324      	adds	r3, #36	; 0x24
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f001 fa50 	bl	8018178 <xTaskRemoveFromEventList>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d00e      	beq.n	8016cfc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016cde:	683b      	ldr	r3, [r7, #0]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d00b      	beq.n	8016cfc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016ce4:	683b      	ldr	r3, [r7, #0]
 8016ce6:	2201      	movs	r2, #1
 8016ce8:	601a      	str	r2, [r3, #0]
 8016cea:	e007      	b.n	8016cfc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016cf0:	3301      	adds	r3, #1
 8016cf2:	b2db      	uxtb	r3, r3
 8016cf4:	b25a      	sxtb	r2, r3
 8016cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8016d00:	e001      	b.n	8016d06 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016d02:	2300      	movs	r3, #0
 8016d04:	637b      	str	r3, [r7, #52]	; 0x34
 8016d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	f383 8811 	msr	BASEPRI, r3
}
 8016d10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016d14:	4618      	mov	r0, r3
 8016d16:	3738      	adds	r7, #56	; 0x38
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd80      	pop	{r7, pc}

08016d1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b08c      	sub	sp, #48	; 0x30
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	60f8      	str	r0, [r7, #12]
 8016d24:	60b9      	str	r1, [r7, #8]
 8016d26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016d28:	2300      	movs	r3, #0
 8016d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d10a      	bne.n	8016d4c <xQueueReceive+0x30>
	__asm volatile
 8016d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d3a:	f383 8811 	msr	BASEPRI, r3
 8016d3e:	f3bf 8f6f 	isb	sy
 8016d42:	f3bf 8f4f 	dsb	sy
 8016d46:	623b      	str	r3, [r7, #32]
}
 8016d48:	bf00      	nop
 8016d4a:	e7fe      	b.n	8016d4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016d4c:	68bb      	ldr	r3, [r7, #8]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d103      	bne.n	8016d5a <xQueueReceive+0x3e>
 8016d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d101      	bne.n	8016d5e <xQueueReceive+0x42>
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	e000      	b.n	8016d60 <xQueueReceive+0x44>
 8016d5e:	2300      	movs	r3, #0
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d10a      	bne.n	8016d7a <xQueueReceive+0x5e>
	__asm volatile
 8016d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d68:	f383 8811 	msr	BASEPRI, r3
 8016d6c:	f3bf 8f6f 	isb	sy
 8016d70:	f3bf 8f4f 	dsb	sy
 8016d74:	61fb      	str	r3, [r7, #28]
}
 8016d76:	bf00      	nop
 8016d78:	e7fe      	b.n	8016d78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d7a:	f001 fbcf 	bl	801851c <xTaskGetSchedulerState>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d102      	bne.n	8016d8a <xQueueReceive+0x6e>
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d101      	bne.n	8016d8e <xQueueReceive+0x72>
 8016d8a:	2301      	movs	r3, #1
 8016d8c:	e000      	b.n	8016d90 <xQueueReceive+0x74>
 8016d8e:	2300      	movs	r3, #0
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d10a      	bne.n	8016daa <xQueueReceive+0x8e>
	__asm volatile
 8016d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d98:	f383 8811 	msr	BASEPRI, r3
 8016d9c:	f3bf 8f6f 	isb	sy
 8016da0:	f3bf 8f4f 	dsb	sy
 8016da4:	61bb      	str	r3, [r7, #24]
}
 8016da6:	bf00      	nop
 8016da8:	e7fe      	b.n	8016da8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016daa:	f002 fa13 	bl	80191d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016db2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d01f      	beq.n	8016dfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016dba:	68b9      	ldr	r1, [r7, #8]
 8016dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016dbe:	f000 fabe 	bl	801733e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc4:	1e5a      	subs	r2, r3, #1
 8016dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dcc:	691b      	ldr	r3, [r3, #16]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d00f      	beq.n	8016df2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd4:	3310      	adds	r3, #16
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f001 f9ce 	bl	8018178 <xTaskRemoveFromEventList>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d007      	beq.n	8016df2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016de2:	4b3d      	ldr	r3, [pc, #244]	; (8016ed8 <xQueueReceive+0x1bc>)
 8016de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016de8:	601a      	str	r2, [r3, #0]
 8016dea:	f3bf 8f4f 	dsb	sy
 8016dee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016df2:	f002 fa1f 	bl	8019234 <vPortExitCritical>
				return pdPASS;
 8016df6:	2301      	movs	r3, #1
 8016df8:	e069      	b.n	8016ece <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d103      	bne.n	8016e08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016e00:	f002 fa18 	bl	8019234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016e04:	2300      	movs	r3, #0
 8016e06:	e062      	b.n	8016ece <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d106      	bne.n	8016e1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016e0e:	f107 0310 	add.w	r3, r7, #16
 8016e12:	4618      	mov	r0, r3
 8016e14:	f001 fa14 	bl	8018240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016e18:	2301      	movs	r3, #1
 8016e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016e1c:	f002 fa0a 	bl	8019234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016e20:	f000 ff80 	bl	8017d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016e24:	f002 f9d6 	bl	80191d4 <vPortEnterCritical>
 8016e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e2e:	b25b      	sxtb	r3, r3
 8016e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e34:	d103      	bne.n	8016e3e <xQueueReceive+0x122>
 8016e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e38:	2200      	movs	r2, #0
 8016e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e44:	b25b      	sxtb	r3, r3
 8016e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e4a:	d103      	bne.n	8016e54 <xQueueReceive+0x138>
 8016e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e4e:	2200      	movs	r2, #0
 8016e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016e54:	f002 f9ee 	bl	8019234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e58:	1d3a      	adds	r2, r7, #4
 8016e5a:	f107 0310 	add.w	r3, r7, #16
 8016e5e:	4611      	mov	r1, r2
 8016e60:	4618      	mov	r0, r3
 8016e62:	f001 fa03 	bl	801826c <xTaskCheckForTimeOut>
 8016e66:	4603      	mov	r3, r0
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d123      	bne.n	8016eb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e6e:	f000 fade 	bl	801742e <prvIsQueueEmpty>
 8016e72:	4603      	mov	r3, r0
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d017      	beq.n	8016ea8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e7a:	3324      	adds	r3, #36	; 0x24
 8016e7c:	687a      	ldr	r2, [r7, #4]
 8016e7e:	4611      	mov	r1, r2
 8016e80:	4618      	mov	r0, r3
 8016e82:	f001 f929 	bl	80180d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e88:	f000 fa7f 	bl	801738a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016e8c:	f000 ff58 	bl	8017d40 <xTaskResumeAll>
 8016e90:	4603      	mov	r3, r0
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d189      	bne.n	8016daa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016e96:	4b10      	ldr	r3, [pc, #64]	; (8016ed8 <xQueueReceive+0x1bc>)
 8016e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e9c:	601a      	str	r2, [r3, #0]
 8016e9e:	f3bf 8f4f 	dsb	sy
 8016ea2:	f3bf 8f6f 	isb	sy
 8016ea6:	e780      	b.n	8016daa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016eaa:	f000 fa6e 	bl	801738a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016eae:	f000 ff47 	bl	8017d40 <xTaskResumeAll>
 8016eb2:	e77a      	b.n	8016daa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016eb6:	f000 fa68 	bl	801738a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016eba:	f000 ff41 	bl	8017d40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ec0:	f000 fab5 	bl	801742e <prvIsQueueEmpty>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	f43f af6f 	beq.w	8016daa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016ecc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016ece:	4618      	mov	r0, r3
 8016ed0:	3730      	adds	r7, #48	; 0x30
 8016ed2:	46bd      	mov	sp, r7
 8016ed4:	bd80      	pop	{r7, pc}
 8016ed6:	bf00      	nop
 8016ed8:	e000ed04 	.word	0xe000ed04

08016edc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b08e      	sub	sp, #56	; 0x38
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
 8016ee4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016eee:	2300      	movs	r3, #0
 8016ef0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d10a      	bne.n	8016f0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016efc:	f383 8811 	msr	BASEPRI, r3
 8016f00:	f3bf 8f6f 	isb	sy
 8016f04:	f3bf 8f4f 	dsb	sy
 8016f08:	623b      	str	r3, [r7, #32]
}
 8016f0a:	bf00      	nop
 8016f0c:	e7fe      	b.n	8016f0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d00a      	beq.n	8016f2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f1a:	f383 8811 	msr	BASEPRI, r3
 8016f1e:	f3bf 8f6f 	isb	sy
 8016f22:	f3bf 8f4f 	dsb	sy
 8016f26:	61fb      	str	r3, [r7, #28]
}
 8016f28:	bf00      	nop
 8016f2a:	e7fe      	b.n	8016f2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016f2c:	f001 faf6 	bl	801851c <xTaskGetSchedulerState>
 8016f30:	4603      	mov	r3, r0
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d102      	bne.n	8016f3c <xQueueSemaphoreTake+0x60>
 8016f36:	683b      	ldr	r3, [r7, #0]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d101      	bne.n	8016f40 <xQueueSemaphoreTake+0x64>
 8016f3c:	2301      	movs	r3, #1
 8016f3e:	e000      	b.n	8016f42 <xQueueSemaphoreTake+0x66>
 8016f40:	2300      	movs	r3, #0
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d10a      	bne.n	8016f5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f4a:	f383 8811 	msr	BASEPRI, r3
 8016f4e:	f3bf 8f6f 	isb	sy
 8016f52:	f3bf 8f4f 	dsb	sy
 8016f56:	61bb      	str	r3, [r7, #24]
}
 8016f58:	bf00      	nop
 8016f5a:	e7fe      	b.n	8016f5a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016f5c:	f002 f93a 	bl	80191d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d024      	beq.n	8016fb6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f6e:	1e5a      	subs	r2, r3, #1
 8016f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d104      	bne.n	8016f86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016f7c:	f001 fc44 	bl	8018808 <pvTaskIncrementMutexHeldCount>
 8016f80:	4602      	mov	r2, r0
 8016f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f88:	691b      	ldr	r3, [r3, #16]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d00f      	beq.n	8016fae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f90:	3310      	adds	r3, #16
 8016f92:	4618      	mov	r0, r3
 8016f94:	f001 f8f0 	bl	8018178 <xTaskRemoveFromEventList>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d007      	beq.n	8016fae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016f9e:	4b54      	ldr	r3, [pc, #336]	; (80170f0 <xQueueSemaphoreTake+0x214>)
 8016fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016fa4:	601a      	str	r2, [r3, #0]
 8016fa6:	f3bf 8f4f 	dsb	sy
 8016faa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016fae:	f002 f941 	bl	8019234 <vPortExitCritical>
				return pdPASS;
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	e097      	b.n	80170e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d111      	bne.n	8016fe0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d00a      	beq.n	8016fd8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fc6:	f383 8811 	msr	BASEPRI, r3
 8016fca:	f3bf 8f6f 	isb	sy
 8016fce:	f3bf 8f4f 	dsb	sy
 8016fd2:	617b      	str	r3, [r7, #20]
}
 8016fd4:	bf00      	nop
 8016fd6:	e7fe      	b.n	8016fd6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016fd8:	f002 f92c 	bl	8019234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016fdc:	2300      	movs	r3, #0
 8016fde:	e082      	b.n	80170e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d106      	bne.n	8016ff4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016fe6:	f107 030c 	add.w	r3, r7, #12
 8016fea:	4618      	mov	r0, r3
 8016fec:	f001 f928 	bl	8018240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016ff4:	f002 f91e 	bl	8019234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016ff8:	f000 fe94 	bl	8017d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016ffc:	f002 f8ea 	bl	80191d4 <vPortEnterCritical>
 8017000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017006:	b25b      	sxtb	r3, r3
 8017008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801700c:	d103      	bne.n	8017016 <xQueueSemaphoreTake+0x13a>
 801700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017010:	2200      	movs	r2, #0
 8017012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801701c:	b25b      	sxtb	r3, r3
 801701e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017022:	d103      	bne.n	801702c <xQueueSemaphoreTake+0x150>
 8017024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017026:	2200      	movs	r2, #0
 8017028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801702c:	f002 f902 	bl	8019234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017030:	463a      	mov	r2, r7
 8017032:	f107 030c 	add.w	r3, r7, #12
 8017036:	4611      	mov	r1, r2
 8017038:	4618      	mov	r0, r3
 801703a:	f001 f917 	bl	801826c <xTaskCheckForTimeOut>
 801703e:	4603      	mov	r3, r0
 8017040:	2b00      	cmp	r3, #0
 8017042:	d132      	bne.n	80170aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017046:	f000 f9f2 	bl	801742e <prvIsQueueEmpty>
 801704a:	4603      	mov	r3, r0
 801704c:	2b00      	cmp	r3, #0
 801704e:	d026      	beq.n	801709e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d109      	bne.n	801706c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8017058:	f002 f8bc 	bl	80191d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801705e:	689b      	ldr	r3, [r3, #8]
 8017060:	4618      	mov	r0, r3
 8017062:	f001 fa79 	bl	8018558 <xTaskPriorityInherit>
 8017066:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8017068:	f002 f8e4 	bl	8019234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801706e:	3324      	adds	r3, #36	; 0x24
 8017070:	683a      	ldr	r2, [r7, #0]
 8017072:	4611      	mov	r1, r2
 8017074:	4618      	mov	r0, r3
 8017076:	f001 f82f 	bl	80180d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801707a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801707c:	f000 f985 	bl	801738a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017080:	f000 fe5e 	bl	8017d40 <xTaskResumeAll>
 8017084:	4603      	mov	r3, r0
 8017086:	2b00      	cmp	r3, #0
 8017088:	f47f af68 	bne.w	8016f5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801708c:	4b18      	ldr	r3, [pc, #96]	; (80170f0 <xQueueSemaphoreTake+0x214>)
 801708e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017092:	601a      	str	r2, [r3, #0]
 8017094:	f3bf 8f4f 	dsb	sy
 8017098:	f3bf 8f6f 	isb	sy
 801709c:	e75e      	b.n	8016f5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801709e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170a0:	f000 f973 	bl	801738a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80170a4:	f000 fe4c 	bl	8017d40 <xTaskResumeAll>
 80170a8:	e758      	b.n	8016f5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80170aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170ac:	f000 f96d 	bl	801738a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80170b0:	f000 fe46 	bl	8017d40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80170b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170b6:	f000 f9ba 	bl	801742e <prvIsQueueEmpty>
 80170ba:	4603      	mov	r3, r0
 80170bc:	2b00      	cmp	r3, #0
 80170be:	f43f af4d 	beq.w	8016f5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80170c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d00d      	beq.n	80170e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80170c8:	f002 f884 	bl	80191d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80170cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170ce:	f000 f8b4 	bl	801723a <prvGetDisinheritPriorityAfterTimeout>
 80170d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80170d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d6:	689b      	ldr	r3, [r3, #8]
 80170d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170da:	4618      	mov	r0, r3
 80170dc:	f001 fb12 	bl	8018704 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80170e0:	f002 f8a8 	bl	8019234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80170e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80170e6:	4618      	mov	r0, r3
 80170e8:	3738      	adds	r7, #56	; 0x38
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	e000ed04 	.word	0xe000ed04

080170f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b08e      	sub	sp, #56	; 0x38
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	60f8      	str	r0, [r7, #12]
 80170fc:	60b9      	str	r1, [r7, #8]
 80170fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017106:	2b00      	cmp	r3, #0
 8017108:	d10a      	bne.n	8017120 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801710e:	f383 8811 	msr	BASEPRI, r3
 8017112:	f3bf 8f6f 	isb	sy
 8017116:	f3bf 8f4f 	dsb	sy
 801711a:	623b      	str	r3, [r7, #32]
}
 801711c:	bf00      	nop
 801711e:	e7fe      	b.n	801711e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d103      	bne.n	801712e <xQueueReceiveFromISR+0x3a>
 8017126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801712a:	2b00      	cmp	r3, #0
 801712c:	d101      	bne.n	8017132 <xQueueReceiveFromISR+0x3e>
 801712e:	2301      	movs	r3, #1
 8017130:	e000      	b.n	8017134 <xQueueReceiveFromISR+0x40>
 8017132:	2300      	movs	r3, #0
 8017134:	2b00      	cmp	r3, #0
 8017136:	d10a      	bne.n	801714e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8017138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801713c:	f383 8811 	msr	BASEPRI, r3
 8017140:	f3bf 8f6f 	isb	sy
 8017144:	f3bf 8f4f 	dsb	sy
 8017148:	61fb      	str	r3, [r7, #28]
}
 801714a:	bf00      	nop
 801714c:	e7fe      	b.n	801714c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801714e:	f002 f923 	bl	8019398 <vPortValidateInterruptPriority>
	__asm volatile
 8017152:	f3ef 8211 	mrs	r2, BASEPRI
 8017156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801715a:	f383 8811 	msr	BASEPRI, r3
 801715e:	f3bf 8f6f 	isb	sy
 8017162:	f3bf 8f4f 	dsb	sy
 8017166:	61ba      	str	r2, [r7, #24]
 8017168:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801716a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801716c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017172:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017176:	2b00      	cmp	r3, #0
 8017178:	d02f      	beq.n	80171da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801717c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017184:	68b9      	ldr	r1, [r7, #8]
 8017186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017188:	f000 f8d9 	bl	801733e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801718e:	1e5a      	subs	r2, r3, #1
 8017190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017192:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017194:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017198:	f1b3 3fff 	cmp.w	r3, #4294967295
 801719c:	d112      	bne.n	80171c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171a0:	691b      	ldr	r3, [r3, #16]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d016      	beq.n	80171d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80171a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171a8:	3310      	adds	r3, #16
 80171aa:	4618      	mov	r0, r3
 80171ac:	f000 ffe4 	bl	8018178 <xTaskRemoveFromEventList>
 80171b0:	4603      	mov	r3, r0
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d00e      	beq.n	80171d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d00b      	beq.n	80171d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	2201      	movs	r2, #1
 80171c0:	601a      	str	r2, [r3, #0]
 80171c2:	e007      	b.n	80171d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80171c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171c8:	3301      	adds	r3, #1
 80171ca:	b2db      	uxtb	r3, r3
 80171cc:	b25a      	sxtb	r2, r3
 80171ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80171d4:	2301      	movs	r3, #1
 80171d6:	637b      	str	r3, [r7, #52]	; 0x34
 80171d8:	e001      	b.n	80171de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80171da:	2300      	movs	r3, #0
 80171dc:	637b      	str	r3, [r7, #52]	; 0x34
 80171de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	f383 8811 	msr	BASEPRI, r3
}
 80171e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80171ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	3738      	adds	r7, #56	; 0x38
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bd80      	pop	{r7, pc}

080171f4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b084      	sub	sp, #16
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d10a      	bne.n	801721c <vQueueDelete+0x28>
	__asm volatile
 8017206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801720a:	f383 8811 	msr	BASEPRI, r3
 801720e:	f3bf 8f6f 	isb	sy
 8017212:	f3bf 8f4f 	dsb	sy
 8017216:	60bb      	str	r3, [r7, #8]
}
 8017218:	bf00      	nop
 801721a:	e7fe      	b.n	801721a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801721c:	68f8      	ldr	r0, [r7, #12]
 801721e:	f000 f95f 	bl	80174e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8017228:	2b00      	cmp	r3, #0
 801722a:	d102      	bne.n	8017232 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801722c:	68f8      	ldr	r0, [r7, #12]
 801722e:	f002 f9bf 	bl	80195b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017232:	bf00      	nop
 8017234:	3710      	adds	r7, #16
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}

0801723a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801723a:	b480      	push	{r7}
 801723c:	b085      	sub	sp, #20
 801723e:	af00      	add	r7, sp, #0
 8017240:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017246:	2b00      	cmp	r3, #0
 8017248:	d006      	beq.n	8017258 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8017254:	60fb      	str	r3, [r7, #12]
 8017256:	e001      	b.n	801725c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017258:	2300      	movs	r3, #0
 801725a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801725c:	68fb      	ldr	r3, [r7, #12]
	}
 801725e:	4618      	mov	r0, r3
 8017260:	3714      	adds	r7, #20
 8017262:	46bd      	mov	sp, r7
 8017264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017268:	4770      	bx	lr

0801726a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801726a:	b580      	push	{r7, lr}
 801726c:	b086      	sub	sp, #24
 801726e:	af00      	add	r7, sp, #0
 8017270:	60f8      	str	r0, [r7, #12]
 8017272:	60b9      	str	r1, [r7, #8]
 8017274:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017276:	2300      	movs	r3, #0
 8017278:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801727e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017284:	2b00      	cmp	r3, #0
 8017286:	d10d      	bne.n	80172a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d14d      	bne.n	801732c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	689b      	ldr	r3, [r3, #8]
 8017294:	4618      	mov	r0, r3
 8017296:	f001 f9c7 	bl	8018628 <xTaskPriorityDisinherit>
 801729a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	2200      	movs	r2, #0
 80172a0:	609a      	str	r2, [r3, #8]
 80172a2:	e043      	b.n	801732c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d119      	bne.n	80172de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	6858      	ldr	r0, [r3, #4]
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172b2:	461a      	mov	r2, r3
 80172b4:	68b9      	ldr	r1, [r7, #8]
 80172b6:	f004 f9d7 	bl	801b668 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	685a      	ldr	r2, [r3, #4]
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172c2:	441a      	add	r2, r3
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	685a      	ldr	r2, [r3, #4]
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	689b      	ldr	r3, [r3, #8]
 80172d0:	429a      	cmp	r2, r3
 80172d2:	d32b      	bcc.n	801732c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	681a      	ldr	r2, [r3, #0]
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	605a      	str	r2, [r3, #4]
 80172dc:	e026      	b.n	801732c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	68d8      	ldr	r0, [r3, #12]
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172e6:	461a      	mov	r2, r3
 80172e8:	68b9      	ldr	r1, [r7, #8]
 80172ea:	f004 f9bd 	bl	801b668 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	68da      	ldr	r2, [r3, #12]
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172f6:	425b      	negs	r3, r3
 80172f8:	441a      	add	r2, r3
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	68da      	ldr	r2, [r3, #12]
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	429a      	cmp	r2, r3
 8017308:	d207      	bcs.n	801731a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	689a      	ldr	r2, [r3, #8]
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017312:	425b      	negs	r3, r3
 8017314:	441a      	add	r2, r3
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	2b02      	cmp	r3, #2
 801731e:	d105      	bne.n	801732c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017320:	693b      	ldr	r3, [r7, #16]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d002      	beq.n	801732c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017326:	693b      	ldr	r3, [r7, #16]
 8017328:	3b01      	subs	r3, #1
 801732a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801732c:	693b      	ldr	r3, [r7, #16]
 801732e:	1c5a      	adds	r2, r3, #1
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017334:	697b      	ldr	r3, [r7, #20]
}
 8017336:	4618      	mov	r0, r3
 8017338:	3718      	adds	r7, #24
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}

0801733e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801733e:	b580      	push	{r7, lr}
 8017340:	b082      	sub	sp, #8
 8017342:	af00      	add	r7, sp, #0
 8017344:	6078      	str	r0, [r7, #4]
 8017346:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801734c:	2b00      	cmp	r3, #0
 801734e:	d018      	beq.n	8017382 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	68da      	ldr	r2, [r3, #12]
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017358:	441a      	add	r2, r3
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	68da      	ldr	r2, [r3, #12]
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	689b      	ldr	r3, [r3, #8]
 8017366:	429a      	cmp	r2, r3
 8017368:	d303      	bcc.n	8017372 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	681a      	ldr	r2, [r3, #0]
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	68d9      	ldr	r1, [r3, #12]
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801737a:	461a      	mov	r2, r3
 801737c:	6838      	ldr	r0, [r7, #0]
 801737e:	f004 f973 	bl	801b668 <memcpy>
	}
}
 8017382:	bf00      	nop
 8017384:	3708      	adds	r7, #8
 8017386:	46bd      	mov	sp, r7
 8017388:	bd80      	pop	{r7, pc}

0801738a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801738a:	b580      	push	{r7, lr}
 801738c:	b084      	sub	sp, #16
 801738e:	af00      	add	r7, sp, #0
 8017390:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017392:	f001 ff1f 	bl	80191d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801739c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801739e:	e011      	b.n	80173c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d012      	beq.n	80173ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	3324      	adds	r3, #36	; 0x24
 80173ac:	4618      	mov	r0, r3
 80173ae:	f000 fee3 	bl	8018178 <xTaskRemoveFromEventList>
 80173b2:	4603      	mov	r3, r0
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d001      	beq.n	80173bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80173b8:	f000 ffba 	bl	8018330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80173bc:	7bfb      	ldrb	r3, [r7, #15]
 80173be:	3b01      	subs	r3, #1
 80173c0:	b2db      	uxtb	r3, r3
 80173c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80173c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	dce9      	bgt.n	80173a0 <prvUnlockQueue+0x16>
 80173cc:	e000      	b.n	80173d0 <prvUnlockQueue+0x46>
					break;
 80173ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	22ff      	movs	r2, #255	; 0xff
 80173d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80173d8:	f001 ff2c 	bl	8019234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80173dc:	f001 fefa 	bl	80191d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80173e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80173e8:	e011      	b.n	801740e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	691b      	ldr	r3, [r3, #16]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d012      	beq.n	8017418 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	3310      	adds	r3, #16
 80173f6:	4618      	mov	r0, r3
 80173f8:	f000 febe 	bl	8018178 <xTaskRemoveFromEventList>
 80173fc:	4603      	mov	r3, r0
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d001      	beq.n	8017406 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017402:	f000 ff95 	bl	8018330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017406:	7bbb      	ldrb	r3, [r7, #14]
 8017408:	3b01      	subs	r3, #1
 801740a:	b2db      	uxtb	r3, r3
 801740c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801740e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017412:	2b00      	cmp	r3, #0
 8017414:	dce9      	bgt.n	80173ea <prvUnlockQueue+0x60>
 8017416:	e000      	b.n	801741a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017418:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	22ff      	movs	r2, #255	; 0xff
 801741e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017422:	f001 ff07 	bl	8019234 <vPortExitCritical>
}
 8017426:	bf00      	nop
 8017428:	3710      	adds	r7, #16
 801742a:	46bd      	mov	sp, r7
 801742c:	bd80      	pop	{r7, pc}

0801742e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801742e:	b580      	push	{r7, lr}
 8017430:	b084      	sub	sp, #16
 8017432:	af00      	add	r7, sp, #0
 8017434:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017436:	f001 fecd 	bl	80191d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801743e:	2b00      	cmp	r3, #0
 8017440:	d102      	bne.n	8017448 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017442:	2301      	movs	r3, #1
 8017444:	60fb      	str	r3, [r7, #12]
 8017446:	e001      	b.n	801744c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017448:	2300      	movs	r3, #0
 801744a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801744c:	f001 fef2 	bl	8019234 <vPortExitCritical>

	return xReturn;
 8017450:	68fb      	ldr	r3, [r7, #12]
}
 8017452:	4618      	mov	r0, r3
 8017454:	3710      	adds	r7, #16
 8017456:	46bd      	mov	sp, r7
 8017458:	bd80      	pop	{r7, pc}

0801745a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801745a:	b580      	push	{r7, lr}
 801745c:	b084      	sub	sp, #16
 801745e:	af00      	add	r7, sp, #0
 8017460:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017462:	f001 feb7 	bl	80191d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801746e:	429a      	cmp	r2, r3
 8017470:	d102      	bne.n	8017478 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017472:	2301      	movs	r3, #1
 8017474:	60fb      	str	r3, [r7, #12]
 8017476:	e001      	b.n	801747c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017478:	2300      	movs	r3, #0
 801747a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801747c:	f001 feda 	bl	8019234 <vPortExitCritical>

	return xReturn;
 8017480:	68fb      	ldr	r3, [r7, #12]
}
 8017482:	4618      	mov	r0, r3
 8017484:	3710      	adds	r7, #16
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}
	...

0801748c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801748c:	b480      	push	{r7}
 801748e:	b085      	sub	sp, #20
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
 8017494:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017496:	2300      	movs	r3, #0
 8017498:	60fb      	str	r3, [r7, #12]
 801749a:	e014      	b.n	80174c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801749c:	4a0f      	ldr	r2, [pc, #60]	; (80174dc <vQueueAddToRegistry+0x50>)
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d10b      	bne.n	80174c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80174a8:	490c      	ldr	r1, [pc, #48]	; (80174dc <vQueueAddToRegistry+0x50>)
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	683a      	ldr	r2, [r7, #0]
 80174ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80174b2:	4a0a      	ldr	r2, [pc, #40]	; (80174dc <vQueueAddToRegistry+0x50>)
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	00db      	lsls	r3, r3, #3
 80174b8:	4413      	add	r3, r2
 80174ba:	687a      	ldr	r2, [r7, #4]
 80174bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80174be:	e006      	b.n	80174ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	3301      	adds	r3, #1
 80174c4:	60fb      	str	r3, [r7, #12]
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	2b07      	cmp	r3, #7
 80174ca:	d9e7      	bls.n	801749c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80174cc:	bf00      	nop
 80174ce:	bf00      	nop
 80174d0:	3714      	adds	r7, #20
 80174d2:	46bd      	mov	sp, r7
 80174d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d8:	4770      	bx	lr
 80174da:	bf00      	nop
 80174dc:	200077b4 	.word	0x200077b4

080174e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80174e0:	b480      	push	{r7}
 80174e2:	b085      	sub	sp, #20
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80174e8:	2300      	movs	r3, #0
 80174ea:	60fb      	str	r3, [r7, #12]
 80174ec:	e016      	b.n	801751c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80174ee:	4a10      	ldr	r2, [pc, #64]	; (8017530 <vQueueUnregisterQueue+0x50>)
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	00db      	lsls	r3, r3, #3
 80174f4:	4413      	add	r3, r2
 80174f6:	685b      	ldr	r3, [r3, #4]
 80174f8:	687a      	ldr	r2, [r7, #4]
 80174fa:	429a      	cmp	r2, r3
 80174fc:	d10b      	bne.n	8017516 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80174fe:	4a0c      	ldr	r2, [pc, #48]	; (8017530 <vQueueUnregisterQueue+0x50>)
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	2100      	movs	r1, #0
 8017504:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017508:	4a09      	ldr	r2, [pc, #36]	; (8017530 <vQueueUnregisterQueue+0x50>)
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	00db      	lsls	r3, r3, #3
 801750e:	4413      	add	r3, r2
 8017510:	2200      	movs	r2, #0
 8017512:	605a      	str	r2, [r3, #4]
				break;
 8017514:	e006      	b.n	8017524 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	3301      	adds	r3, #1
 801751a:	60fb      	str	r3, [r7, #12]
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	2b07      	cmp	r3, #7
 8017520:	d9e5      	bls.n	80174ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017522:	bf00      	nop
 8017524:	bf00      	nop
 8017526:	3714      	adds	r7, #20
 8017528:	46bd      	mov	sp, r7
 801752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752e:	4770      	bx	lr
 8017530:	200077b4 	.word	0x200077b4

08017534 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017534:	b580      	push	{r7, lr}
 8017536:	b086      	sub	sp, #24
 8017538:	af00      	add	r7, sp, #0
 801753a:	60f8      	str	r0, [r7, #12]
 801753c:	60b9      	str	r1, [r7, #8]
 801753e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017544:	f001 fe46 	bl	80191d4 <vPortEnterCritical>
 8017548:	697b      	ldr	r3, [r7, #20]
 801754a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801754e:	b25b      	sxtb	r3, r3
 8017550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017554:	d103      	bne.n	801755e <vQueueWaitForMessageRestricted+0x2a>
 8017556:	697b      	ldr	r3, [r7, #20]
 8017558:	2200      	movs	r2, #0
 801755a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017564:	b25b      	sxtb	r3, r3
 8017566:	f1b3 3fff 	cmp.w	r3, #4294967295
 801756a:	d103      	bne.n	8017574 <vQueueWaitForMessageRestricted+0x40>
 801756c:	697b      	ldr	r3, [r7, #20]
 801756e:	2200      	movs	r2, #0
 8017570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017574:	f001 fe5e 	bl	8019234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017578:	697b      	ldr	r3, [r7, #20]
 801757a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801757c:	2b00      	cmp	r3, #0
 801757e:	d106      	bne.n	801758e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017580:	697b      	ldr	r3, [r7, #20]
 8017582:	3324      	adds	r3, #36	; 0x24
 8017584:	687a      	ldr	r2, [r7, #4]
 8017586:	68b9      	ldr	r1, [r7, #8]
 8017588:	4618      	mov	r0, r3
 801758a:	f000 fdc9 	bl	8018120 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801758e:	6978      	ldr	r0, [r7, #20]
 8017590:	f7ff fefb 	bl	801738a <prvUnlockQueue>
	}
 8017594:	bf00      	nop
 8017596:	3718      	adds	r7, #24
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}

0801759c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801759c:	b580      	push	{r7, lr}
 801759e:	b08e      	sub	sp, #56	; 0x38
 80175a0:	af04      	add	r7, sp, #16
 80175a2:	60f8      	str	r0, [r7, #12]
 80175a4:	60b9      	str	r1, [r7, #8]
 80175a6:	607a      	str	r2, [r7, #4]
 80175a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80175aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d10a      	bne.n	80175c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80175b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175b4:	f383 8811 	msr	BASEPRI, r3
 80175b8:	f3bf 8f6f 	isb	sy
 80175bc:	f3bf 8f4f 	dsb	sy
 80175c0:	623b      	str	r3, [r7, #32]
}
 80175c2:	bf00      	nop
 80175c4:	e7fe      	b.n	80175c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80175c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d10a      	bne.n	80175e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80175cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175d0:	f383 8811 	msr	BASEPRI, r3
 80175d4:	f3bf 8f6f 	isb	sy
 80175d8:	f3bf 8f4f 	dsb	sy
 80175dc:	61fb      	str	r3, [r7, #28]
}
 80175de:	bf00      	nop
 80175e0:	e7fe      	b.n	80175e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80175e2:	23bc      	movs	r3, #188	; 0xbc
 80175e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	2bbc      	cmp	r3, #188	; 0xbc
 80175ea:	d00a      	beq.n	8017602 <xTaskCreateStatic+0x66>
	__asm volatile
 80175ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175f0:	f383 8811 	msr	BASEPRI, r3
 80175f4:	f3bf 8f6f 	isb	sy
 80175f8:	f3bf 8f4f 	dsb	sy
 80175fc:	61bb      	str	r3, [r7, #24]
}
 80175fe:	bf00      	nop
 8017600:	e7fe      	b.n	8017600 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017602:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017606:	2b00      	cmp	r3, #0
 8017608:	d01e      	beq.n	8017648 <xTaskCreateStatic+0xac>
 801760a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801760c:	2b00      	cmp	r3, #0
 801760e:	d01b      	beq.n	8017648 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017612:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017618:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761c:	2202      	movs	r2, #2
 801761e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017622:	2300      	movs	r3, #0
 8017624:	9303      	str	r3, [sp, #12]
 8017626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017628:	9302      	str	r3, [sp, #8]
 801762a:	f107 0314 	add.w	r3, r7, #20
 801762e:	9301      	str	r3, [sp, #4]
 8017630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017632:	9300      	str	r3, [sp, #0]
 8017634:	683b      	ldr	r3, [r7, #0]
 8017636:	687a      	ldr	r2, [r7, #4]
 8017638:	68b9      	ldr	r1, [r7, #8]
 801763a:	68f8      	ldr	r0, [r7, #12]
 801763c:	f000 f850 	bl	80176e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017642:	f000 f8f3 	bl	801782c <prvAddNewTaskToReadyList>
 8017646:	e001      	b.n	801764c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017648:	2300      	movs	r3, #0
 801764a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801764c:	697b      	ldr	r3, [r7, #20]
	}
 801764e:	4618      	mov	r0, r3
 8017650:	3728      	adds	r7, #40	; 0x28
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}

08017656 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017656:	b580      	push	{r7, lr}
 8017658:	b08c      	sub	sp, #48	; 0x30
 801765a:	af04      	add	r7, sp, #16
 801765c:	60f8      	str	r0, [r7, #12]
 801765e:	60b9      	str	r1, [r7, #8]
 8017660:	603b      	str	r3, [r7, #0]
 8017662:	4613      	mov	r3, r2
 8017664:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017666:	88fb      	ldrh	r3, [r7, #6]
 8017668:	009b      	lsls	r3, r3, #2
 801766a:	4618      	mov	r0, r3
 801766c:	f001 fed4 	bl	8019418 <pvPortMalloc>
 8017670:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017672:	697b      	ldr	r3, [r7, #20]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d00e      	beq.n	8017696 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017678:	20bc      	movs	r0, #188	; 0xbc
 801767a:	f001 fecd 	bl	8019418 <pvPortMalloc>
 801767e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017680:	69fb      	ldr	r3, [r7, #28]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d003      	beq.n	801768e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017686:	69fb      	ldr	r3, [r7, #28]
 8017688:	697a      	ldr	r2, [r7, #20]
 801768a:	631a      	str	r2, [r3, #48]	; 0x30
 801768c:	e005      	b.n	801769a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801768e:	6978      	ldr	r0, [r7, #20]
 8017690:	f001 ff8e 	bl	80195b0 <vPortFree>
 8017694:	e001      	b.n	801769a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017696:	2300      	movs	r3, #0
 8017698:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801769a:	69fb      	ldr	r3, [r7, #28]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d017      	beq.n	80176d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80176a0:	69fb      	ldr	r3, [r7, #28]
 80176a2:	2200      	movs	r2, #0
 80176a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80176a8:	88fa      	ldrh	r2, [r7, #6]
 80176aa:	2300      	movs	r3, #0
 80176ac:	9303      	str	r3, [sp, #12]
 80176ae:	69fb      	ldr	r3, [r7, #28]
 80176b0:	9302      	str	r3, [sp, #8]
 80176b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b4:	9301      	str	r3, [sp, #4]
 80176b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176b8:	9300      	str	r3, [sp, #0]
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	68b9      	ldr	r1, [r7, #8]
 80176be:	68f8      	ldr	r0, [r7, #12]
 80176c0:	f000 f80e 	bl	80176e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80176c4:	69f8      	ldr	r0, [r7, #28]
 80176c6:	f000 f8b1 	bl	801782c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80176ca:	2301      	movs	r3, #1
 80176cc:	61bb      	str	r3, [r7, #24]
 80176ce:	e002      	b.n	80176d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80176d0:	f04f 33ff 	mov.w	r3, #4294967295
 80176d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80176d6:	69bb      	ldr	r3, [r7, #24]
	}
 80176d8:	4618      	mov	r0, r3
 80176da:	3720      	adds	r7, #32
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}

080176e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b088      	sub	sp, #32
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	60f8      	str	r0, [r7, #12]
 80176e8:	60b9      	str	r1, [r7, #8]
 80176ea:	607a      	str	r2, [r7, #4]
 80176ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80176ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	009b      	lsls	r3, r3, #2
 80176f6:	461a      	mov	r2, r3
 80176f8:	21a5      	movs	r1, #165	; 0xa5
 80176fa:	f003 ffdd 	bl	801b6b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80176fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017708:	3b01      	subs	r3, #1
 801770a:	009b      	lsls	r3, r3, #2
 801770c:	4413      	add	r3, r2
 801770e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017710:	69bb      	ldr	r3, [r7, #24]
 8017712:	f023 0307 	bic.w	r3, r3, #7
 8017716:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017718:	69bb      	ldr	r3, [r7, #24]
 801771a:	f003 0307 	and.w	r3, r3, #7
 801771e:	2b00      	cmp	r3, #0
 8017720:	d00a      	beq.n	8017738 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017726:	f383 8811 	msr	BASEPRI, r3
 801772a:	f3bf 8f6f 	isb	sy
 801772e:	f3bf 8f4f 	dsb	sy
 8017732:	617b      	str	r3, [r7, #20]
}
 8017734:	bf00      	nop
 8017736:	e7fe      	b.n	8017736 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d01f      	beq.n	801777e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801773e:	2300      	movs	r3, #0
 8017740:	61fb      	str	r3, [r7, #28]
 8017742:	e012      	b.n	801776a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017744:	68ba      	ldr	r2, [r7, #8]
 8017746:	69fb      	ldr	r3, [r7, #28]
 8017748:	4413      	add	r3, r2
 801774a:	7819      	ldrb	r1, [r3, #0]
 801774c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801774e:	69fb      	ldr	r3, [r7, #28]
 8017750:	4413      	add	r3, r2
 8017752:	3334      	adds	r3, #52	; 0x34
 8017754:	460a      	mov	r2, r1
 8017756:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017758:	68ba      	ldr	r2, [r7, #8]
 801775a:	69fb      	ldr	r3, [r7, #28]
 801775c:	4413      	add	r3, r2
 801775e:	781b      	ldrb	r3, [r3, #0]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d006      	beq.n	8017772 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017764:	69fb      	ldr	r3, [r7, #28]
 8017766:	3301      	adds	r3, #1
 8017768:	61fb      	str	r3, [r7, #28]
 801776a:	69fb      	ldr	r3, [r7, #28]
 801776c:	2b0f      	cmp	r3, #15
 801776e:	d9e9      	bls.n	8017744 <prvInitialiseNewTask+0x64>
 8017770:	e000      	b.n	8017774 <prvInitialiseNewTask+0x94>
			{
				break;
 8017772:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017776:	2200      	movs	r2, #0
 8017778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801777c:	e003      	b.n	8017786 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017780:	2200      	movs	r2, #0
 8017782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017788:	2b37      	cmp	r3, #55	; 0x37
 801778a:	d901      	bls.n	8017790 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801778c:	2337      	movs	r3, #55	; 0x37
 801778e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017794:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801779a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801779e:	2200      	movs	r2, #0
 80177a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80177a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177a4:	3304      	adds	r3, #4
 80177a6:	4618      	mov	r0, r3
 80177a8:	f7fe fe56 	bl	8016458 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80177ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ae:	3318      	adds	r3, #24
 80177b0:	4618      	mov	r0, r3
 80177b2:	f7fe fe51 	bl	8016458 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80177b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80177bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80177c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80177c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80177cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ce:	2200      	movs	r2, #0
 80177d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80177d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177d6:	2200      	movs	r2, #0
 80177d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80177dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177de:	3354      	adds	r3, #84	; 0x54
 80177e0:	2260      	movs	r2, #96	; 0x60
 80177e2:	2100      	movs	r1, #0
 80177e4:	4618      	mov	r0, r3
 80177e6:	f003 ff67 	bl	801b6b8 <memset>
 80177ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ec:	4a0c      	ldr	r2, [pc, #48]	; (8017820 <prvInitialiseNewTask+0x140>)
 80177ee:	659a      	str	r2, [r3, #88]	; 0x58
 80177f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f2:	4a0c      	ldr	r2, [pc, #48]	; (8017824 <prvInitialiseNewTask+0x144>)
 80177f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80177f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f8:	4a0b      	ldr	r2, [pc, #44]	; (8017828 <prvInitialiseNewTask+0x148>)
 80177fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80177fc:	683a      	ldr	r2, [r7, #0]
 80177fe:	68f9      	ldr	r1, [r7, #12]
 8017800:	69b8      	ldr	r0, [r7, #24]
 8017802:	f001 fbb7 	bl	8018f74 <pxPortInitialiseStack>
 8017806:	4602      	mov	r2, r0
 8017808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801780a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801780e:	2b00      	cmp	r3, #0
 8017810:	d002      	beq.n	8017818 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017816:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017818:	bf00      	nop
 801781a:	3720      	adds	r7, #32
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}
 8017820:	080232ec 	.word	0x080232ec
 8017824:	0802330c 	.word	0x0802330c
 8017828:	080232cc 	.word	0x080232cc

0801782c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b082      	sub	sp, #8
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017834:	f001 fcce 	bl	80191d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017838:	4b2d      	ldr	r3, [pc, #180]	; (80178f0 <prvAddNewTaskToReadyList+0xc4>)
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	3301      	adds	r3, #1
 801783e:	4a2c      	ldr	r2, [pc, #176]	; (80178f0 <prvAddNewTaskToReadyList+0xc4>)
 8017840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017842:	4b2c      	ldr	r3, [pc, #176]	; (80178f4 <prvAddNewTaskToReadyList+0xc8>)
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d109      	bne.n	801785e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801784a:	4a2a      	ldr	r2, [pc, #168]	; (80178f4 <prvAddNewTaskToReadyList+0xc8>)
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017850:	4b27      	ldr	r3, [pc, #156]	; (80178f0 <prvAddNewTaskToReadyList+0xc4>)
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2b01      	cmp	r3, #1
 8017856:	d110      	bne.n	801787a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017858:	f000 fd8e 	bl	8018378 <prvInitialiseTaskLists>
 801785c:	e00d      	b.n	801787a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801785e:	4b26      	ldr	r3, [pc, #152]	; (80178f8 <prvAddNewTaskToReadyList+0xcc>)
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d109      	bne.n	801787a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017866:	4b23      	ldr	r3, [pc, #140]	; (80178f4 <prvAddNewTaskToReadyList+0xc8>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017870:	429a      	cmp	r2, r3
 8017872:	d802      	bhi.n	801787a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017874:	4a1f      	ldr	r2, [pc, #124]	; (80178f4 <prvAddNewTaskToReadyList+0xc8>)
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801787a:	4b20      	ldr	r3, [pc, #128]	; (80178fc <prvAddNewTaskToReadyList+0xd0>)
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	3301      	adds	r3, #1
 8017880:	4a1e      	ldr	r2, [pc, #120]	; (80178fc <prvAddNewTaskToReadyList+0xd0>)
 8017882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017884:	4b1d      	ldr	r3, [pc, #116]	; (80178fc <prvAddNewTaskToReadyList+0xd0>)
 8017886:	681a      	ldr	r2, [r3, #0]
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017890:	4b1b      	ldr	r3, [pc, #108]	; (8017900 <prvAddNewTaskToReadyList+0xd4>)
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	429a      	cmp	r2, r3
 8017896:	d903      	bls.n	80178a0 <prvAddNewTaskToReadyList+0x74>
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801789c:	4a18      	ldr	r2, [pc, #96]	; (8017900 <prvAddNewTaskToReadyList+0xd4>)
 801789e:	6013      	str	r3, [r2, #0]
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178a4:	4613      	mov	r3, r2
 80178a6:	009b      	lsls	r3, r3, #2
 80178a8:	4413      	add	r3, r2
 80178aa:	009b      	lsls	r3, r3, #2
 80178ac:	4a15      	ldr	r2, [pc, #84]	; (8017904 <prvAddNewTaskToReadyList+0xd8>)
 80178ae:	441a      	add	r2, r3
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	3304      	adds	r3, #4
 80178b4:	4619      	mov	r1, r3
 80178b6:	4610      	mov	r0, r2
 80178b8:	f7fe fddb 	bl	8016472 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80178bc:	f001 fcba 	bl	8019234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80178c0:	4b0d      	ldr	r3, [pc, #52]	; (80178f8 <prvAddNewTaskToReadyList+0xcc>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d00e      	beq.n	80178e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80178c8:	4b0a      	ldr	r3, [pc, #40]	; (80178f4 <prvAddNewTaskToReadyList+0xc8>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178d2:	429a      	cmp	r2, r3
 80178d4:	d207      	bcs.n	80178e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80178d6:	4b0c      	ldr	r3, [pc, #48]	; (8017908 <prvAddNewTaskToReadyList+0xdc>)
 80178d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178dc:	601a      	str	r2, [r3, #0]
 80178de:	f3bf 8f4f 	dsb	sy
 80178e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80178e6:	bf00      	nop
 80178e8:	3708      	adds	r7, #8
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd80      	pop	{r7, pc}
 80178ee:	bf00      	nop
 80178f0:	200014c0 	.word	0x200014c0
 80178f4:	20000fec 	.word	0x20000fec
 80178f8:	200014cc 	.word	0x200014cc
 80178fc:	200014dc 	.word	0x200014dc
 8017900:	200014c8 	.word	0x200014c8
 8017904:	20000ff0 	.word	0x20000ff0
 8017908:	e000ed04 	.word	0xe000ed04

0801790c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801790c:	b580      	push	{r7, lr}
 801790e:	b084      	sub	sp, #16
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8017914:	f001 fc5e 	bl	80191d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d102      	bne.n	8017924 <vTaskDelete+0x18>
 801791e:	4b2c      	ldr	r3, [pc, #176]	; (80179d0 <vTaskDelete+0xc4>)
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	e000      	b.n	8017926 <vTaskDelete+0x1a>
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	3304      	adds	r3, #4
 801792c:	4618      	mov	r0, r3
 801792e:	f7fe fdfd 	bl	801652c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017936:	2b00      	cmp	r3, #0
 8017938:	d004      	beq.n	8017944 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	3318      	adds	r3, #24
 801793e:	4618      	mov	r0, r3
 8017940:	f7fe fdf4 	bl	801652c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8017944:	4b23      	ldr	r3, [pc, #140]	; (80179d4 <vTaskDelete+0xc8>)
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	3301      	adds	r3, #1
 801794a:	4a22      	ldr	r2, [pc, #136]	; (80179d4 <vTaskDelete+0xc8>)
 801794c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801794e:	4b20      	ldr	r3, [pc, #128]	; (80179d0 <vTaskDelete+0xc4>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	68fa      	ldr	r2, [r7, #12]
 8017954:	429a      	cmp	r2, r3
 8017956:	d10b      	bne.n	8017970 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	3304      	adds	r3, #4
 801795c:	4619      	mov	r1, r3
 801795e:	481e      	ldr	r0, [pc, #120]	; (80179d8 <vTaskDelete+0xcc>)
 8017960:	f7fe fd87 	bl	8016472 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8017964:	4b1d      	ldr	r3, [pc, #116]	; (80179dc <vTaskDelete+0xd0>)
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	3301      	adds	r3, #1
 801796a:	4a1c      	ldr	r2, [pc, #112]	; (80179dc <vTaskDelete+0xd0>)
 801796c:	6013      	str	r3, [r2, #0]
 801796e:	e009      	b.n	8017984 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8017970:	4b1b      	ldr	r3, [pc, #108]	; (80179e0 <vTaskDelete+0xd4>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	3b01      	subs	r3, #1
 8017976:	4a1a      	ldr	r2, [pc, #104]	; (80179e0 <vTaskDelete+0xd4>)
 8017978:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801797a:	68f8      	ldr	r0, [r7, #12]
 801797c:	f000 fd6a 	bl	8018454 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8017980:	f000 fd9c 	bl	80184bc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8017984:	f001 fc56 	bl	8019234 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8017988:	4b16      	ldr	r3, [pc, #88]	; (80179e4 <vTaskDelete+0xd8>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d01b      	beq.n	80179c8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8017990:	4b0f      	ldr	r3, [pc, #60]	; (80179d0 <vTaskDelete+0xc4>)
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	68fa      	ldr	r2, [r7, #12]
 8017996:	429a      	cmp	r2, r3
 8017998:	d116      	bne.n	80179c8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801799a:	4b13      	ldr	r3, [pc, #76]	; (80179e8 <vTaskDelete+0xdc>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d00a      	beq.n	80179b8 <vTaskDelete+0xac>
	__asm volatile
 80179a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179a6:	f383 8811 	msr	BASEPRI, r3
 80179aa:	f3bf 8f6f 	isb	sy
 80179ae:	f3bf 8f4f 	dsb	sy
 80179b2:	60bb      	str	r3, [r7, #8]
}
 80179b4:	bf00      	nop
 80179b6:	e7fe      	b.n	80179b6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80179b8:	4b0c      	ldr	r3, [pc, #48]	; (80179ec <vTaskDelete+0xe0>)
 80179ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179be:	601a      	str	r2, [r3, #0]
 80179c0:	f3bf 8f4f 	dsb	sy
 80179c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80179c8:	bf00      	nop
 80179ca:	3710      	adds	r7, #16
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}
 80179d0:	20000fec 	.word	0x20000fec
 80179d4:	200014dc 	.word	0x200014dc
 80179d8:	20001494 	.word	0x20001494
 80179dc:	200014a8 	.word	0x200014a8
 80179e0:	200014c0 	.word	0x200014c0
 80179e4:	200014cc 	.word	0x200014cc
 80179e8:	200014e8 	.word	0x200014e8
 80179ec:	e000ed04 	.word	0xe000ed04

080179f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b084      	sub	sp, #16
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80179f8:	2300      	movs	r3, #0
 80179fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d017      	beq.n	8017a32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017a02:	4b13      	ldr	r3, [pc, #76]	; (8017a50 <vTaskDelay+0x60>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d00a      	beq.n	8017a20 <vTaskDelay+0x30>
	__asm volatile
 8017a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a0e:	f383 8811 	msr	BASEPRI, r3
 8017a12:	f3bf 8f6f 	isb	sy
 8017a16:	f3bf 8f4f 	dsb	sy
 8017a1a:	60bb      	str	r3, [r7, #8]
}
 8017a1c:	bf00      	nop
 8017a1e:	e7fe      	b.n	8017a1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017a20:	f000 f980 	bl	8017d24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017a24:	2100      	movs	r1, #0
 8017a26:	6878      	ldr	r0, [r7, #4]
 8017a28:	f000 ff02 	bl	8018830 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017a2c:	f000 f988 	bl	8017d40 <xTaskResumeAll>
 8017a30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d107      	bne.n	8017a48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017a38:	4b06      	ldr	r3, [pc, #24]	; (8017a54 <vTaskDelay+0x64>)
 8017a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a3e:	601a      	str	r2, [r3, #0]
 8017a40:	f3bf 8f4f 	dsb	sy
 8017a44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017a48:	bf00      	nop
 8017a4a:	3710      	adds	r7, #16
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}
 8017a50:	200014e8 	.word	0x200014e8
 8017a54:	e000ed04 	.word	0xe000ed04

08017a58 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b088      	sub	sp, #32
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8017a64:	69bb      	ldr	r3, [r7, #24]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d10a      	bne.n	8017a80 <eTaskGetState+0x28>
	__asm volatile
 8017a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a6e:	f383 8811 	msr	BASEPRI, r3
 8017a72:	f3bf 8f6f 	isb	sy
 8017a76:	f3bf 8f4f 	dsb	sy
 8017a7a:	60bb      	str	r3, [r7, #8]
}
 8017a7c:	bf00      	nop
 8017a7e:	e7fe      	b.n	8017a7e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8017a80:	4b23      	ldr	r3, [pc, #140]	; (8017b10 <eTaskGetState+0xb8>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	69ba      	ldr	r2, [r7, #24]
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d102      	bne.n	8017a90 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	77fb      	strb	r3, [r7, #31]
 8017a8e:	e03a      	b.n	8017b06 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8017a90:	f001 fba0 	bl	80191d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8017a94:	69bb      	ldr	r3, [r7, #24]
 8017a96:	695b      	ldr	r3, [r3, #20]
 8017a98:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8017a9a:	4b1e      	ldr	r3, [pc, #120]	; (8017b14 <eTaskGetState+0xbc>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8017aa0:	4b1d      	ldr	r3, [pc, #116]	; (8017b18 <eTaskGetState+0xc0>)
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8017aa6:	f001 fbc5 	bl	8019234 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8017aaa:	697a      	ldr	r2, [r7, #20]
 8017aac:	693b      	ldr	r3, [r7, #16]
 8017aae:	429a      	cmp	r2, r3
 8017ab0:	d003      	beq.n	8017aba <eTaskGetState+0x62>
 8017ab2:	697a      	ldr	r2, [r7, #20]
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	d102      	bne.n	8017ac0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8017aba:	2302      	movs	r3, #2
 8017abc:	77fb      	strb	r3, [r7, #31]
 8017abe:	e022      	b.n	8017b06 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8017ac0:	697b      	ldr	r3, [r7, #20]
 8017ac2:	4a16      	ldr	r2, [pc, #88]	; (8017b1c <eTaskGetState+0xc4>)
 8017ac4:	4293      	cmp	r3, r2
 8017ac6:	d112      	bne.n	8017aee <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8017ac8:	69bb      	ldr	r3, [r7, #24]
 8017aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d10b      	bne.n	8017ae8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8017ad0:	69bb      	ldr	r3, [r7, #24]
 8017ad2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8017ad6:	b2db      	uxtb	r3, r3
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	d102      	bne.n	8017ae2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8017adc:	2302      	movs	r3, #2
 8017ade:	77fb      	strb	r3, [r7, #31]
 8017ae0:	e011      	b.n	8017b06 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8017ae2:	2303      	movs	r3, #3
 8017ae4:	77fb      	strb	r3, [r7, #31]
 8017ae6:	e00e      	b.n	8017b06 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8017ae8:	2302      	movs	r3, #2
 8017aea:	77fb      	strb	r3, [r7, #31]
 8017aec:	e00b      	b.n	8017b06 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8017aee:	697b      	ldr	r3, [r7, #20]
 8017af0:	4a0b      	ldr	r2, [pc, #44]	; (8017b20 <eTaskGetState+0xc8>)
 8017af2:	4293      	cmp	r3, r2
 8017af4:	d002      	beq.n	8017afc <eTaskGetState+0xa4>
 8017af6:	697b      	ldr	r3, [r7, #20]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d102      	bne.n	8017b02 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8017afc:	2304      	movs	r3, #4
 8017afe:	77fb      	strb	r3, [r7, #31]
 8017b00:	e001      	b.n	8017b06 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8017b02:	2301      	movs	r3, #1
 8017b04:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8017b06:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017b08:	4618      	mov	r0, r3
 8017b0a:	3720      	adds	r7, #32
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bd80      	pop	{r7, pc}
 8017b10:	20000fec 	.word	0x20000fec
 8017b14:	20001478 	.word	0x20001478
 8017b18:	2000147c 	.word	0x2000147c
 8017b1c:	200014ac 	.word	0x200014ac
 8017b20:	20001494 	.word	0x20001494

08017b24 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8017b24:	b480      	push	{r7}
 8017b26:	b087      	sub	sp, #28
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d10a      	bne.n	8017b50 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8017b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b3e:	f383 8811 	msr	BASEPRI, r3
 8017b42:	f3bf 8f6f 	isb	sy
 8017b46:	f3bf 8f4f 	dsb	sy
 8017b4a:	60fb      	str	r3, [r7, #12]
}
 8017b4c:	bf00      	nop
 8017b4e:	e7fe      	b.n	8017b4e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017b50:	693b      	ldr	r3, [r7, #16]
 8017b52:	695b      	ldr	r3, [r3, #20]
 8017b54:	4a0a      	ldr	r2, [pc, #40]	; (8017b80 <prvTaskIsTaskSuspended+0x5c>)
 8017b56:	4293      	cmp	r3, r2
 8017b58:	d10a      	bne.n	8017b70 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8017b5a:	693b      	ldr	r3, [r7, #16]
 8017b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b5e:	4a09      	ldr	r2, [pc, #36]	; (8017b84 <prvTaskIsTaskSuspended+0x60>)
 8017b60:	4293      	cmp	r3, r2
 8017b62:	d005      	beq.n	8017b70 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8017b64:	693b      	ldr	r3, [r7, #16]
 8017b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d101      	bne.n	8017b70 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8017b6c:	2301      	movs	r3, #1
 8017b6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017b70:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017b72:	4618      	mov	r0, r3
 8017b74:	371c      	adds	r7, #28
 8017b76:	46bd      	mov	sp, r7
 8017b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7c:	4770      	bx	lr
 8017b7e:	bf00      	nop
 8017b80:	200014ac 	.word	0x200014ac
 8017b84:	20001480 	.word	0x20001480

08017b88 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b084      	sub	sp, #16
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d10a      	bne.n	8017bb0 <vTaskResume+0x28>
	__asm volatile
 8017b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b9e:	f383 8811 	msr	BASEPRI, r3
 8017ba2:	f3bf 8f6f 	isb	sy
 8017ba6:	f3bf 8f4f 	dsb	sy
 8017baa:	60bb      	str	r3, [r7, #8]
}
 8017bac:	bf00      	nop
 8017bae:	e7fe      	b.n	8017bae <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8017bb0:	4b20      	ldr	r3, [pc, #128]	; (8017c34 <vTaskResume+0xac>)
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	68fa      	ldr	r2, [r7, #12]
 8017bb6:	429a      	cmp	r2, r3
 8017bb8:	d038      	beq.n	8017c2c <vTaskResume+0xa4>
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d035      	beq.n	8017c2c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8017bc0:	f001 fb08 	bl	80191d4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8017bc4:	68f8      	ldr	r0, [r7, #12]
 8017bc6:	f7ff ffad 	bl	8017b24 <prvTaskIsTaskSuspended>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d02b      	beq.n	8017c28 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	3304      	adds	r3, #4
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	f7fe fca9 	bl	801652c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bde:	4b16      	ldr	r3, [pc, #88]	; (8017c38 <vTaskResume+0xb0>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d903      	bls.n	8017bee <vTaskResume+0x66>
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bea:	4a13      	ldr	r2, [pc, #76]	; (8017c38 <vTaskResume+0xb0>)
 8017bec:	6013      	str	r3, [r2, #0]
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bf2:	4613      	mov	r3, r2
 8017bf4:	009b      	lsls	r3, r3, #2
 8017bf6:	4413      	add	r3, r2
 8017bf8:	009b      	lsls	r3, r3, #2
 8017bfa:	4a10      	ldr	r2, [pc, #64]	; (8017c3c <vTaskResume+0xb4>)
 8017bfc:	441a      	add	r2, r3
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	3304      	adds	r3, #4
 8017c02:	4619      	mov	r1, r3
 8017c04:	4610      	mov	r0, r2
 8017c06:	f7fe fc34 	bl	8016472 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c0e:	4b09      	ldr	r3, [pc, #36]	; (8017c34 <vTaskResume+0xac>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c14:	429a      	cmp	r2, r3
 8017c16:	d307      	bcc.n	8017c28 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8017c18:	4b09      	ldr	r3, [pc, #36]	; (8017c40 <vTaskResume+0xb8>)
 8017c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c1e:	601a      	str	r2, [r3, #0]
 8017c20:	f3bf 8f4f 	dsb	sy
 8017c24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8017c28:	f001 fb04 	bl	8019234 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017c2c:	bf00      	nop
 8017c2e:	3710      	adds	r7, #16
 8017c30:	46bd      	mov	sp, r7
 8017c32:	bd80      	pop	{r7, pc}
 8017c34:	20000fec 	.word	0x20000fec
 8017c38:	200014c8 	.word	0x200014c8
 8017c3c:	20000ff0 	.word	0x20000ff0
 8017c40:	e000ed04 	.word	0xe000ed04

08017c44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b08a      	sub	sp, #40	; 0x28
 8017c48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017c52:	463a      	mov	r2, r7
 8017c54:	1d39      	adds	r1, r7, #4
 8017c56:	f107 0308 	add.w	r3, r7, #8
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f7fe fba8 	bl	80163b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017c60:	6839      	ldr	r1, [r7, #0]
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	68ba      	ldr	r2, [r7, #8]
 8017c66:	9202      	str	r2, [sp, #8]
 8017c68:	9301      	str	r3, [sp, #4]
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	9300      	str	r3, [sp, #0]
 8017c6e:	2300      	movs	r3, #0
 8017c70:	460a      	mov	r2, r1
 8017c72:	4924      	ldr	r1, [pc, #144]	; (8017d04 <vTaskStartScheduler+0xc0>)
 8017c74:	4824      	ldr	r0, [pc, #144]	; (8017d08 <vTaskStartScheduler+0xc4>)
 8017c76:	f7ff fc91 	bl	801759c <xTaskCreateStatic>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	4a23      	ldr	r2, [pc, #140]	; (8017d0c <vTaskStartScheduler+0xc8>)
 8017c7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017c80:	4b22      	ldr	r3, [pc, #136]	; (8017d0c <vTaskStartScheduler+0xc8>)
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d002      	beq.n	8017c8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017c88:	2301      	movs	r3, #1
 8017c8a:	617b      	str	r3, [r7, #20]
 8017c8c:	e001      	b.n	8017c92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017c92:	697b      	ldr	r3, [r7, #20]
 8017c94:	2b01      	cmp	r3, #1
 8017c96:	d102      	bne.n	8017c9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017c98:	f000 fe1e 	bl	80188d8 <xTimerCreateTimerTask>
 8017c9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017c9e:	697b      	ldr	r3, [r7, #20]
 8017ca0:	2b01      	cmp	r3, #1
 8017ca2:	d11b      	bne.n	8017cdc <vTaskStartScheduler+0x98>
	__asm volatile
 8017ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ca8:	f383 8811 	msr	BASEPRI, r3
 8017cac:	f3bf 8f6f 	isb	sy
 8017cb0:	f3bf 8f4f 	dsb	sy
 8017cb4:	613b      	str	r3, [r7, #16]
}
 8017cb6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017cb8:	4b15      	ldr	r3, [pc, #84]	; (8017d10 <vTaskStartScheduler+0xcc>)
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	3354      	adds	r3, #84	; 0x54
 8017cbe:	4a15      	ldr	r2, [pc, #84]	; (8017d14 <vTaskStartScheduler+0xd0>)
 8017cc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017cc2:	4b15      	ldr	r3, [pc, #84]	; (8017d18 <vTaskStartScheduler+0xd4>)
 8017cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8017cc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017cca:	4b14      	ldr	r3, [pc, #80]	; (8017d1c <vTaskStartScheduler+0xd8>)
 8017ccc:	2201      	movs	r2, #1
 8017cce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017cd0:	4b13      	ldr	r3, [pc, #76]	; (8017d20 <vTaskStartScheduler+0xdc>)
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017cd6:	f001 f9db 	bl	8019090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017cda:	e00e      	b.n	8017cfa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017cdc:	697b      	ldr	r3, [r7, #20]
 8017cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ce2:	d10a      	bne.n	8017cfa <vTaskStartScheduler+0xb6>
	__asm volatile
 8017ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce8:	f383 8811 	msr	BASEPRI, r3
 8017cec:	f3bf 8f6f 	isb	sy
 8017cf0:	f3bf 8f4f 	dsb	sy
 8017cf4:	60fb      	str	r3, [r7, #12]
}
 8017cf6:	bf00      	nop
 8017cf8:	e7fe      	b.n	8017cf8 <vTaskStartScheduler+0xb4>
}
 8017cfa:	bf00      	nop
 8017cfc:	3718      	adds	r7, #24
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	bd80      	pop	{r7, pc}
 8017d02:	bf00      	nop
 8017d04:	08022f50 	.word	0x08022f50
 8017d08:	08018349 	.word	0x08018349
 8017d0c:	200014e4 	.word	0x200014e4
 8017d10:	20000fec 	.word	0x20000fec
 8017d14:	20000200 	.word	0x20000200
 8017d18:	200014e0 	.word	0x200014e0
 8017d1c:	200014cc 	.word	0x200014cc
 8017d20:	200014c4 	.word	0x200014c4

08017d24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017d24:	b480      	push	{r7}
 8017d26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017d28:	4b04      	ldr	r3, [pc, #16]	; (8017d3c <vTaskSuspendAll+0x18>)
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	4a03      	ldr	r2, [pc, #12]	; (8017d3c <vTaskSuspendAll+0x18>)
 8017d30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017d32:	bf00      	nop
 8017d34:	46bd      	mov	sp, r7
 8017d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d3a:	4770      	bx	lr
 8017d3c:	200014e8 	.word	0x200014e8

08017d40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b084      	sub	sp, #16
 8017d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017d46:	2300      	movs	r3, #0
 8017d48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017d4e:	4b42      	ldr	r3, [pc, #264]	; (8017e58 <xTaskResumeAll+0x118>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d10a      	bne.n	8017d6c <xTaskResumeAll+0x2c>
	__asm volatile
 8017d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d5a:	f383 8811 	msr	BASEPRI, r3
 8017d5e:	f3bf 8f6f 	isb	sy
 8017d62:	f3bf 8f4f 	dsb	sy
 8017d66:	603b      	str	r3, [r7, #0]
}
 8017d68:	bf00      	nop
 8017d6a:	e7fe      	b.n	8017d6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017d6c:	f001 fa32 	bl	80191d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017d70:	4b39      	ldr	r3, [pc, #228]	; (8017e58 <xTaskResumeAll+0x118>)
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	3b01      	subs	r3, #1
 8017d76:	4a38      	ldr	r2, [pc, #224]	; (8017e58 <xTaskResumeAll+0x118>)
 8017d78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d7a:	4b37      	ldr	r3, [pc, #220]	; (8017e58 <xTaskResumeAll+0x118>)
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d162      	bne.n	8017e48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017d82:	4b36      	ldr	r3, [pc, #216]	; (8017e5c <xTaskResumeAll+0x11c>)
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d05e      	beq.n	8017e48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017d8a:	e02f      	b.n	8017dec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d8c:	4b34      	ldr	r3, [pc, #208]	; (8017e60 <xTaskResumeAll+0x120>)
 8017d8e:	68db      	ldr	r3, [r3, #12]
 8017d90:	68db      	ldr	r3, [r3, #12]
 8017d92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	3318      	adds	r3, #24
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f7fe fbc7 	bl	801652c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	3304      	adds	r3, #4
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fe fbc2 	bl	801652c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dac:	4b2d      	ldr	r3, [pc, #180]	; (8017e64 <xTaskResumeAll+0x124>)
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d903      	bls.n	8017dbc <xTaskResumeAll+0x7c>
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017db8:	4a2a      	ldr	r2, [pc, #168]	; (8017e64 <xTaskResumeAll+0x124>)
 8017dba:	6013      	str	r3, [r2, #0]
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dc0:	4613      	mov	r3, r2
 8017dc2:	009b      	lsls	r3, r3, #2
 8017dc4:	4413      	add	r3, r2
 8017dc6:	009b      	lsls	r3, r3, #2
 8017dc8:	4a27      	ldr	r2, [pc, #156]	; (8017e68 <xTaskResumeAll+0x128>)
 8017dca:	441a      	add	r2, r3
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	3304      	adds	r3, #4
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	4610      	mov	r0, r2
 8017dd4:	f7fe fb4d 	bl	8016472 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ddc:	4b23      	ldr	r3, [pc, #140]	; (8017e6c <xTaskResumeAll+0x12c>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d302      	bcc.n	8017dec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017de6:	4b22      	ldr	r3, [pc, #136]	; (8017e70 <xTaskResumeAll+0x130>)
 8017de8:	2201      	movs	r2, #1
 8017dea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017dec:	4b1c      	ldr	r3, [pc, #112]	; (8017e60 <xTaskResumeAll+0x120>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d1cb      	bne.n	8017d8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d001      	beq.n	8017dfe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017dfa:	f000 fb5f 	bl	80184bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017dfe:	4b1d      	ldr	r3, [pc, #116]	; (8017e74 <xTaskResumeAll+0x134>)
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d010      	beq.n	8017e2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017e0a:	f000 f847 	bl	8017e9c <xTaskIncrementTick>
 8017e0e:	4603      	mov	r3, r0
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d002      	beq.n	8017e1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017e14:	4b16      	ldr	r3, [pc, #88]	; (8017e70 <xTaskResumeAll+0x130>)
 8017e16:	2201      	movs	r2, #1
 8017e18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	3b01      	subs	r3, #1
 8017e1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d1f1      	bne.n	8017e0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017e26:	4b13      	ldr	r3, [pc, #76]	; (8017e74 <xTaskResumeAll+0x134>)
 8017e28:	2200      	movs	r2, #0
 8017e2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017e2c:	4b10      	ldr	r3, [pc, #64]	; (8017e70 <xTaskResumeAll+0x130>)
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d009      	beq.n	8017e48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017e34:	2301      	movs	r3, #1
 8017e36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017e38:	4b0f      	ldr	r3, [pc, #60]	; (8017e78 <xTaskResumeAll+0x138>)
 8017e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e3e:	601a      	str	r2, [r3, #0]
 8017e40:	f3bf 8f4f 	dsb	sy
 8017e44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017e48:	f001 f9f4 	bl	8019234 <vPortExitCritical>

	return xAlreadyYielded;
 8017e4c:	68bb      	ldr	r3, [r7, #8]
}
 8017e4e:	4618      	mov	r0, r3
 8017e50:	3710      	adds	r7, #16
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	200014e8 	.word	0x200014e8
 8017e5c:	200014c0 	.word	0x200014c0
 8017e60:	20001480 	.word	0x20001480
 8017e64:	200014c8 	.word	0x200014c8
 8017e68:	20000ff0 	.word	0x20000ff0
 8017e6c:	20000fec 	.word	0x20000fec
 8017e70:	200014d4 	.word	0x200014d4
 8017e74:	200014d0 	.word	0x200014d0
 8017e78:	e000ed04 	.word	0xe000ed04

08017e7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b083      	sub	sp, #12
 8017e80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017e82:	4b05      	ldr	r3, [pc, #20]	; (8017e98 <xTaskGetTickCount+0x1c>)
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017e88:	687b      	ldr	r3, [r7, #4]
}
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	370c      	adds	r7, #12
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e94:	4770      	bx	lr
 8017e96:	bf00      	nop
 8017e98:	200014c4 	.word	0x200014c4

08017e9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b086      	sub	sp, #24
 8017ea0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017ea6:	4b4f      	ldr	r3, [pc, #316]	; (8017fe4 <xTaskIncrementTick+0x148>)
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	f040 808f 	bne.w	8017fce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017eb0:	4b4d      	ldr	r3, [pc, #308]	; (8017fe8 <xTaskIncrementTick+0x14c>)
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	3301      	adds	r3, #1
 8017eb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017eb8:	4a4b      	ldr	r2, [pc, #300]	; (8017fe8 <xTaskIncrementTick+0x14c>)
 8017eba:	693b      	ldr	r3, [r7, #16]
 8017ebc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017ebe:	693b      	ldr	r3, [r7, #16]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d120      	bne.n	8017f06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017ec4:	4b49      	ldr	r3, [pc, #292]	; (8017fec <xTaskIncrementTick+0x150>)
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d00a      	beq.n	8017ee4 <xTaskIncrementTick+0x48>
	__asm volatile
 8017ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ed2:	f383 8811 	msr	BASEPRI, r3
 8017ed6:	f3bf 8f6f 	isb	sy
 8017eda:	f3bf 8f4f 	dsb	sy
 8017ede:	603b      	str	r3, [r7, #0]
}
 8017ee0:	bf00      	nop
 8017ee2:	e7fe      	b.n	8017ee2 <xTaskIncrementTick+0x46>
 8017ee4:	4b41      	ldr	r3, [pc, #260]	; (8017fec <xTaskIncrementTick+0x150>)
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	60fb      	str	r3, [r7, #12]
 8017eea:	4b41      	ldr	r3, [pc, #260]	; (8017ff0 <xTaskIncrementTick+0x154>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	4a3f      	ldr	r2, [pc, #252]	; (8017fec <xTaskIncrementTick+0x150>)
 8017ef0:	6013      	str	r3, [r2, #0]
 8017ef2:	4a3f      	ldr	r2, [pc, #252]	; (8017ff0 <xTaskIncrementTick+0x154>)
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	6013      	str	r3, [r2, #0]
 8017ef8:	4b3e      	ldr	r3, [pc, #248]	; (8017ff4 <xTaskIncrementTick+0x158>)
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	3301      	adds	r3, #1
 8017efe:	4a3d      	ldr	r2, [pc, #244]	; (8017ff4 <xTaskIncrementTick+0x158>)
 8017f00:	6013      	str	r3, [r2, #0]
 8017f02:	f000 fadb 	bl	80184bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017f06:	4b3c      	ldr	r3, [pc, #240]	; (8017ff8 <xTaskIncrementTick+0x15c>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	693a      	ldr	r2, [r7, #16]
 8017f0c:	429a      	cmp	r2, r3
 8017f0e:	d349      	bcc.n	8017fa4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017f10:	4b36      	ldr	r3, [pc, #216]	; (8017fec <xTaskIncrementTick+0x150>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d104      	bne.n	8017f24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f1a:	4b37      	ldr	r3, [pc, #220]	; (8017ff8 <xTaskIncrementTick+0x15c>)
 8017f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8017f20:	601a      	str	r2, [r3, #0]
					break;
 8017f22:	e03f      	b.n	8017fa4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f24:	4b31      	ldr	r3, [pc, #196]	; (8017fec <xTaskIncrementTick+0x150>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	68db      	ldr	r3, [r3, #12]
 8017f2a:	68db      	ldr	r3, [r3, #12]
 8017f2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	685b      	ldr	r3, [r3, #4]
 8017f32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017f34:	693a      	ldr	r2, [r7, #16]
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d203      	bcs.n	8017f44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017f3c:	4a2e      	ldr	r2, [pc, #184]	; (8017ff8 <xTaskIncrementTick+0x15c>)
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017f42:	e02f      	b.n	8017fa4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017f44:	68bb      	ldr	r3, [r7, #8]
 8017f46:	3304      	adds	r3, #4
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f7fe faef 	bl	801652c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017f4e:	68bb      	ldr	r3, [r7, #8]
 8017f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d004      	beq.n	8017f60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	3318      	adds	r3, #24
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f7fe fae6 	bl	801652c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f64:	4b25      	ldr	r3, [pc, #148]	; (8017ffc <xTaskIncrementTick+0x160>)
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	429a      	cmp	r2, r3
 8017f6a:	d903      	bls.n	8017f74 <xTaskIncrementTick+0xd8>
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f70:	4a22      	ldr	r2, [pc, #136]	; (8017ffc <xTaskIncrementTick+0x160>)
 8017f72:	6013      	str	r3, [r2, #0]
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f78:	4613      	mov	r3, r2
 8017f7a:	009b      	lsls	r3, r3, #2
 8017f7c:	4413      	add	r3, r2
 8017f7e:	009b      	lsls	r3, r3, #2
 8017f80:	4a1f      	ldr	r2, [pc, #124]	; (8018000 <xTaskIncrementTick+0x164>)
 8017f82:	441a      	add	r2, r3
 8017f84:	68bb      	ldr	r3, [r7, #8]
 8017f86:	3304      	adds	r3, #4
 8017f88:	4619      	mov	r1, r3
 8017f8a:	4610      	mov	r0, r2
 8017f8c:	f7fe fa71 	bl	8016472 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f94:	4b1b      	ldr	r3, [pc, #108]	; (8018004 <xTaskIncrementTick+0x168>)
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d3b8      	bcc.n	8017f10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017f9e:	2301      	movs	r3, #1
 8017fa0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017fa2:	e7b5      	b.n	8017f10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017fa4:	4b17      	ldr	r3, [pc, #92]	; (8018004 <xTaskIncrementTick+0x168>)
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017faa:	4915      	ldr	r1, [pc, #84]	; (8018000 <xTaskIncrementTick+0x164>)
 8017fac:	4613      	mov	r3, r2
 8017fae:	009b      	lsls	r3, r3, #2
 8017fb0:	4413      	add	r3, r2
 8017fb2:	009b      	lsls	r3, r3, #2
 8017fb4:	440b      	add	r3, r1
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	2b01      	cmp	r3, #1
 8017fba:	d901      	bls.n	8017fc0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017fbc:	2301      	movs	r3, #1
 8017fbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017fc0:	4b11      	ldr	r3, [pc, #68]	; (8018008 <xTaskIncrementTick+0x16c>)
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d007      	beq.n	8017fd8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017fc8:	2301      	movs	r3, #1
 8017fca:	617b      	str	r3, [r7, #20]
 8017fcc:	e004      	b.n	8017fd8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017fce:	4b0f      	ldr	r3, [pc, #60]	; (801800c <xTaskIncrementTick+0x170>)
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	3301      	adds	r3, #1
 8017fd4:	4a0d      	ldr	r2, [pc, #52]	; (801800c <xTaskIncrementTick+0x170>)
 8017fd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017fd8:	697b      	ldr	r3, [r7, #20]
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	3718      	adds	r7, #24
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd80      	pop	{r7, pc}
 8017fe2:	bf00      	nop
 8017fe4:	200014e8 	.word	0x200014e8
 8017fe8:	200014c4 	.word	0x200014c4
 8017fec:	20001478 	.word	0x20001478
 8017ff0:	2000147c 	.word	0x2000147c
 8017ff4:	200014d8 	.word	0x200014d8
 8017ff8:	200014e0 	.word	0x200014e0
 8017ffc:	200014c8 	.word	0x200014c8
 8018000:	20000ff0 	.word	0x20000ff0
 8018004:	20000fec 	.word	0x20000fec
 8018008:	200014d4 	.word	0x200014d4
 801800c:	200014d0 	.word	0x200014d0

08018010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018010:	b480      	push	{r7}
 8018012:	b085      	sub	sp, #20
 8018014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018016:	4b2a      	ldr	r3, [pc, #168]	; (80180c0 <vTaskSwitchContext+0xb0>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d003      	beq.n	8018026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801801e:	4b29      	ldr	r3, [pc, #164]	; (80180c4 <vTaskSwitchContext+0xb4>)
 8018020:	2201      	movs	r2, #1
 8018022:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018024:	e046      	b.n	80180b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8018026:	4b27      	ldr	r3, [pc, #156]	; (80180c4 <vTaskSwitchContext+0xb4>)
 8018028:	2200      	movs	r2, #0
 801802a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801802c:	4b26      	ldr	r3, [pc, #152]	; (80180c8 <vTaskSwitchContext+0xb8>)
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	60fb      	str	r3, [r7, #12]
 8018032:	e010      	b.n	8018056 <vTaskSwitchContext+0x46>
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d10a      	bne.n	8018050 <vTaskSwitchContext+0x40>
	__asm volatile
 801803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801803e:	f383 8811 	msr	BASEPRI, r3
 8018042:	f3bf 8f6f 	isb	sy
 8018046:	f3bf 8f4f 	dsb	sy
 801804a:	607b      	str	r3, [r7, #4]
}
 801804c:	bf00      	nop
 801804e:	e7fe      	b.n	801804e <vTaskSwitchContext+0x3e>
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	3b01      	subs	r3, #1
 8018054:	60fb      	str	r3, [r7, #12]
 8018056:	491d      	ldr	r1, [pc, #116]	; (80180cc <vTaskSwitchContext+0xbc>)
 8018058:	68fa      	ldr	r2, [r7, #12]
 801805a:	4613      	mov	r3, r2
 801805c:	009b      	lsls	r3, r3, #2
 801805e:	4413      	add	r3, r2
 8018060:	009b      	lsls	r3, r3, #2
 8018062:	440b      	add	r3, r1
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d0e4      	beq.n	8018034 <vTaskSwitchContext+0x24>
 801806a:	68fa      	ldr	r2, [r7, #12]
 801806c:	4613      	mov	r3, r2
 801806e:	009b      	lsls	r3, r3, #2
 8018070:	4413      	add	r3, r2
 8018072:	009b      	lsls	r3, r3, #2
 8018074:	4a15      	ldr	r2, [pc, #84]	; (80180cc <vTaskSwitchContext+0xbc>)
 8018076:	4413      	add	r3, r2
 8018078:	60bb      	str	r3, [r7, #8]
 801807a:	68bb      	ldr	r3, [r7, #8]
 801807c:	685b      	ldr	r3, [r3, #4]
 801807e:	685a      	ldr	r2, [r3, #4]
 8018080:	68bb      	ldr	r3, [r7, #8]
 8018082:	605a      	str	r2, [r3, #4]
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	685a      	ldr	r2, [r3, #4]
 8018088:	68bb      	ldr	r3, [r7, #8]
 801808a:	3308      	adds	r3, #8
 801808c:	429a      	cmp	r2, r3
 801808e:	d104      	bne.n	801809a <vTaskSwitchContext+0x8a>
 8018090:	68bb      	ldr	r3, [r7, #8]
 8018092:	685b      	ldr	r3, [r3, #4]
 8018094:	685a      	ldr	r2, [r3, #4]
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	605a      	str	r2, [r3, #4]
 801809a:	68bb      	ldr	r3, [r7, #8]
 801809c:	685b      	ldr	r3, [r3, #4]
 801809e:	68db      	ldr	r3, [r3, #12]
 80180a0:	4a0b      	ldr	r2, [pc, #44]	; (80180d0 <vTaskSwitchContext+0xc0>)
 80180a2:	6013      	str	r3, [r2, #0]
 80180a4:	4a08      	ldr	r2, [pc, #32]	; (80180c8 <vTaskSwitchContext+0xb8>)
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80180aa:	4b09      	ldr	r3, [pc, #36]	; (80180d0 <vTaskSwitchContext+0xc0>)
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	3354      	adds	r3, #84	; 0x54
 80180b0:	4a08      	ldr	r2, [pc, #32]	; (80180d4 <vTaskSwitchContext+0xc4>)
 80180b2:	6013      	str	r3, [r2, #0]
}
 80180b4:	bf00      	nop
 80180b6:	3714      	adds	r7, #20
 80180b8:	46bd      	mov	sp, r7
 80180ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180be:	4770      	bx	lr
 80180c0:	200014e8 	.word	0x200014e8
 80180c4:	200014d4 	.word	0x200014d4
 80180c8:	200014c8 	.word	0x200014c8
 80180cc:	20000ff0 	.word	0x20000ff0
 80180d0:	20000fec 	.word	0x20000fec
 80180d4:	20000200 	.word	0x20000200

080180d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b084      	sub	sp, #16
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
 80180e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d10a      	bne.n	80180fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80180e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180ec:	f383 8811 	msr	BASEPRI, r3
 80180f0:	f3bf 8f6f 	isb	sy
 80180f4:	f3bf 8f4f 	dsb	sy
 80180f8:	60fb      	str	r3, [r7, #12]
}
 80180fa:	bf00      	nop
 80180fc:	e7fe      	b.n	80180fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80180fe:	4b07      	ldr	r3, [pc, #28]	; (801811c <vTaskPlaceOnEventList+0x44>)
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	3318      	adds	r3, #24
 8018104:	4619      	mov	r1, r3
 8018106:	6878      	ldr	r0, [r7, #4]
 8018108:	f7fe f9d7 	bl	80164ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801810c:	2101      	movs	r1, #1
 801810e:	6838      	ldr	r0, [r7, #0]
 8018110:	f000 fb8e 	bl	8018830 <prvAddCurrentTaskToDelayedList>
}
 8018114:	bf00      	nop
 8018116:	3710      	adds	r7, #16
 8018118:	46bd      	mov	sp, r7
 801811a:	bd80      	pop	{r7, pc}
 801811c:	20000fec 	.word	0x20000fec

08018120 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018120:	b580      	push	{r7, lr}
 8018122:	b086      	sub	sp, #24
 8018124:	af00      	add	r7, sp, #0
 8018126:	60f8      	str	r0, [r7, #12]
 8018128:	60b9      	str	r1, [r7, #8]
 801812a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d10a      	bne.n	8018148 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018136:	f383 8811 	msr	BASEPRI, r3
 801813a:	f3bf 8f6f 	isb	sy
 801813e:	f3bf 8f4f 	dsb	sy
 8018142:	617b      	str	r3, [r7, #20]
}
 8018144:	bf00      	nop
 8018146:	e7fe      	b.n	8018146 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018148:	4b0a      	ldr	r3, [pc, #40]	; (8018174 <vTaskPlaceOnEventListRestricted+0x54>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	3318      	adds	r3, #24
 801814e:	4619      	mov	r1, r3
 8018150:	68f8      	ldr	r0, [r7, #12]
 8018152:	f7fe f98e 	bl	8016472 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d002      	beq.n	8018162 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801815c:	f04f 33ff 	mov.w	r3, #4294967295
 8018160:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018162:	6879      	ldr	r1, [r7, #4]
 8018164:	68b8      	ldr	r0, [r7, #8]
 8018166:	f000 fb63 	bl	8018830 <prvAddCurrentTaskToDelayedList>
	}
 801816a:	bf00      	nop
 801816c:	3718      	adds	r7, #24
 801816e:	46bd      	mov	sp, r7
 8018170:	bd80      	pop	{r7, pc}
 8018172:	bf00      	nop
 8018174:	20000fec 	.word	0x20000fec

08018178 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b086      	sub	sp, #24
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	68db      	ldr	r3, [r3, #12]
 8018184:	68db      	ldr	r3, [r3, #12]
 8018186:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018188:	693b      	ldr	r3, [r7, #16]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d10a      	bne.n	80181a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018192:	f383 8811 	msr	BASEPRI, r3
 8018196:	f3bf 8f6f 	isb	sy
 801819a:	f3bf 8f4f 	dsb	sy
 801819e:	60fb      	str	r3, [r7, #12]
}
 80181a0:	bf00      	nop
 80181a2:	e7fe      	b.n	80181a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80181a4:	693b      	ldr	r3, [r7, #16]
 80181a6:	3318      	adds	r3, #24
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7fe f9bf 	bl	801652c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80181ae:	4b1e      	ldr	r3, [pc, #120]	; (8018228 <xTaskRemoveFromEventList+0xb0>)
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d11d      	bne.n	80181f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80181b6:	693b      	ldr	r3, [r7, #16]
 80181b8:	3304      	adds	r3, #4
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7fe f9b6 	bl	801652c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80181c0:	693b      	ldr	r3, [r7, #16]
 80181c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181c4:	4b19      	ldr	r3, [pc, #100]	; (801822c <xTaskRemoveFromEventList+0xb4>)
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d903      	bls.n	80181d4 <xTaskRemoveFromEventList+0x5c>
 80181cc:	693b      	ldr	r3, [r7, #16]
 80181ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181d0:	4a16      	ldr	r2, [pc, #88]	; (801822c <xTaskRemoveFromEventList+0xb4>)
 80181d2:	6013      	str	r3, [r2, #0]
 80181d4:	693b      	ldr	r3, [r7, #16]
 80181d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181d8:	4613      	mov	r3, r2
 80181da:	009b      	lsls	r3, r3, #2
 80181dc:	4413      	add	r3, r2
 80181de:	009b      	lsls	r3, r3, #2
 80181e0:	4a13      	ldr	r2, [pc, #76]	; (8018230 <xTaskRemoveFromEventList+0xb8>)
 80181e2:	441a      	add	r2, r3
 80181e4:	693b      	ldr	r3, [r7, #16]
 80181e6:	3304      	adds	r3, #4
 80181e8:	4619      	mov	r1, r3
 80181ea:	4610      	mov	r0, r2
 80181ec:	f7fe f941 	bl	8016472 <vListInsertEnd>
 80181f0:	e005      	b.n	80181fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80181f2:	693b      	ldr	r3, [r7, #16]
 80181f4:	3318      	adds	r3, #24
 80181f6:	4619      	mov	r1, r3
 80181f8:	480e      	ldr	r0, [pc, #56]	; (8018234 <xTaskRemoveFromEventList+0xbc>)
 80181fa:	f7fe f93a 	bl	8016472 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80181fe:	693b      	ldr	r3, [r7, #16]
 8018200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018202:	4b0d      	ldr	r3, [pc, #52]	; (8018238 <xTaskRemoveFromEventList+0xc0>)
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018208:	429a      	cmp	r2, r3
 801820a:	d905      	bls.n	8018218 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801820c:	2301      	movs	r3, #1
 801820e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018210:	4b0a      	ldr	r3, [pc, #40]	; (801823c <xTaskRemoveFromEventList+0xc4>)
 8018212:	2201      	movs	r2, #1
 8018214:	601a      	str	r2, [r3, #0]
 8018216:	e001      	b.n	801821c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018218:	2300      	movs	r3, #0
 801821a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801821c:	697b      	ldr	r3, [r7, #20]
}
 801821e:	4618      	mov	r0, r3
 8018220:	3718      	adds	r7, #24
 8018222:	46bd      	mov	sp, r7
 8018224:	bd80      	pop	{r7, pc}
 8018226:	bf00      	nop
 8018228:	200014e8 	.word	0x200014e8
 801822c:	200014c8 	.word	0x200014c8
 8018230:	20000ff0 	.word	0x20000ff0
 8018234:	20001480 	.word	0x20001480
 8018238:	20000fec 	.word	0x20000fec
 801823c:	200014d4 	.word	0x200014d4

08018240 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018240:	b480      	push	{r7}
 8018242:	b083      	sub	sp, #12
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018248:	4b06      	ldr	r3, [pc, #24]	; (8018264 <vTaskInternalSetTimeOutState+0x24>)
 801824a:	681a      	ldr	r2, [r3, #0]
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018250:	4b05      	ldr	r3, [pc, #20]	; (8018268 <vTaskInternalSetTimeOutState+0x28>)
 8018252:	681a      	ldr	r2, [r3, #0]
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	605a      	str	r2, [r3, #4]
}
 8018258:	bf00      	nop
 801825a:	370c      	adds	r7, #12
 801825c:	46bd      	mov	sp, r7
 801825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018262:	4770      	bx	lr
 8018264:	200014d8 	.word	0x200014d8
 8018268:	200014c4 	.word	0x200014c4

0801826c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b088      	sub	sp, #32
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
 8018274:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d10a      	bne.n	8018292 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018280:	f383 8811 	msr	BASEPRI, r3
 8018284:	f3bf 8f6f 	isb	sy
 8018288:	f3bf 8f4f 	dsb	sy
 801828c:	613b      	str	r3, [r7, #16]
}
 801828e:	bf00      	nop
 8018290:	e7fe      	b.n	8018290 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018292:	683b      	ldr	r3, [r7, #0]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d10a      	bne.n	80182ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801829c:	f383 8811 	msr	BASEPRI, r3
 80182a0:	f3bf 8f6f 	isb	sy
 80182a4:	f3bf 8f4f 	dsb	sy
 80182a8:	60fb      	str	r3, [r7, #12]
}
 80182aa:	bf00      	nop
 80182ac:	e7fe      	b.n	80182ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80182ae:	f000 ff91 	bl	80191d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80182b2:	4b1d      	ldr	r3, [pc, #116]	; (8018328 <xTaskCheckForTimeOut+0xbc>)
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	69ba      	ldr	r2, [r7, #24]
 80182be:	1ad3      	subs	r3, r2, r3
 80182c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80182c2:	683b      	ldr	r3, [r7, #0]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182ca:	d102      	bne.n	80182d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80182cc:	2300      	movs	r3, #0
 80182ce:	61fb      	str	r3, [r7, #28]
 80182d0:	e023      	b.n	801831a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	681a      	ldr	r2, [r3, #0]
 80182d6:	4b15      	ldr	r3, [pc, #84]	; (801832c <xTaskCheckForTimeOut+0xc0>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	429a      	cmp	r2, r3
 80182dc:	d007      	beq.n	80182ee <xTaskCheckForTimeOut+0x82>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	685b      	ldr	r3, [r3, #4]
 80182e2:	69ba      	ldr	r2, [r7, #24]
 80182e4:	429a      	cmp	r2, r3
 80182e6:	d302      	bcc.n	80182ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80182e8:	2301      	movs	r3, #1
 80182ea:	61fb      	str	r3, [r7, #28]
 80182ec:	e015      	b.n	801831a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80182ee:	683b      	ldr	r3, [r7, #0]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	697a      	ldr	r2, [r7, #20]
 80182f4:	429a      	cmp	r2, r3
 80182f6:	d20b      	bcs.n	8018310 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	681a      	ldr	r2, [r3, #0]
 80182fc:	697b      	ldr	r3, [r7, #20]
 80182fe:	1ad2      	subs	r2, r2, r3
 8018300:	683b      	ldr	r3, [r7, #0]
 8018302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018304:	6878      	ldr	r0, [r7, #4]
 8018306:	f7ff ff9b 	bl	8018240 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801830a:	2300      	movs	r3, #0
 801830c:	61fb      	str	r3, [r7, #28]
 801830e:	e004      	b.n	801831a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018310:	683b      	ldr	r3, [r7, #0]
 8018312:	2200      	movs	r2, #0
 8018314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018316:	2301      	movs	r3, #1
 8018318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801831a:	f000 ff8b 	bl	8019234 <vPortExitCritical>

	return xReturn;
 801831e:	69fb      	ldr	r3, [r7, #28]
}
 8018320:	4618      	mov	r0, r3
 8018322:	3720      	adds	r7, #32
 8018324:	46bd      	mov	sp, r7
 8018326:	bd80      	pop	{r7, pc}
 8018328:	200014c4 	.word	0x200014c4
 801832c:	200014d8 	.word	0x200014d8

08018330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018330:	b480      	push	{r7}
 8018332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018334:	4b03      	ldr	r3, [pc, #12]	; (8018344 <vTaskMissedYield+0x14>)
 8018336:	2201      	movs	r2, #1
 8018338:	601a      	str	r2, [r3, #0]
}
 801833a:	bf00      	nop
 801833c:	46bd      	mov	sp, r7
 801833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018342:	4770      	bx	lr
 8018344:	200014d4 	.word	0x200014d4

08018348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b082      	sub	sp, #8
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018350:	f000 f852 	bl	80183f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018354:	4b06      	ldr	r3, [pc, #24]	; (8018370 <prvIdleTask+0x28>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	2b01      	cmp	r3, #1
 801835a:	d9f9      	bls.n	8018350 <prvIdleTask+0x8>
			{
				taskYIELD();
 801835c:	4b05      	ldr	r3, [pc, #20]	; (8018374 <prvIdleTask+0x2c>)
 801835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018362:	601a      	str	r2, [r3, #0]
 8018364:	f3bf 8f4f 	dsb	sy
 8018368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801836c:	e7f0      	b.n	8018350 <prvIdleTask+0x8>
 801836e:	bf00      	nop
 8018370:	20000ff0 	.word	0x20000ff0
 8018374:	e000ed04 	.word	0xe000ed04

08018378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b082      	sub	sp, #8
 801837c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801837e:	2300      	movs	r3, #0
 8018380:	607b      	str	r3, [r7, #4]
 8018382:	e00c      	b.n	801839e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018384:	687a      	ldr	r2, [r7, #4]
 8018386:	4613      	mov	r3, r2
 8018388:	009b      	lsls	r3, r3, #2
 801838a:	4413      	add	r3, r2
 801838c:	009b      	lsls	r3, r3, #2
 801838e:	4a12      	ldr	r2, [pc, #72]	; (80183d8 <prvInitialiseTaskLists+0x60>)
 8018390:	4413      	add	r3, r2
 8018392:	4618      	mov	r0, r3
 8018394:	f7fe f840 	bl	8016418 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	3301      	adds	r3, #1
 801839c:	607b      	str	r3, [r7, #4]
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	2b37      	cmp	r3, #55	; 0x37
 80183a2:	d9ef      	bls.n	8018384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80183a4:	480d      	ldr	r0, [pc, #52]	; (80183dc <prvInitialiseTaskLists+0x64>)
 80183a6:	f7fe f837 	bl	8016418 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80183aa:	480d      	ldr	r0, [pc, #52]	; (80183e0 <prvInitialiseTaskLists+0x68>)
 80183ac:	f7fe f834 	bl	8016418 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80183b0:	480c      	ldr	r0, [pc, #48]	; (80183e4 <prvInitialiseTaskLists+0x6c>)
 80183b2:	f7fe f831 	bl	8016418 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80183b6:	480c      	ldr	r0, [pc, #48]	; (80183e8 <prvInitialiseTaskLists+0x70>)
 80183b8:	f7fe f82e 	bl	8016418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80183bc:	480b      	ldr	r0, [pc, #44]	; (80183ec <prvInitialiseTaskLists+0x74>)
 80183be:	f7fe f82b 	bl	8016418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80183c2:	4b0b      	ldr	r3, [pc, #44]	; (80183f0 <prvInitialiseTaskLists+0x78>)
 80183c4:	4a05      	ldr	r2, [pc, #20]	; (80183dc <prvInitialiseTaskLists+0x64>)
 80183c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80183c8:	4b0a      	ldr	r3, [pc, #40]	; (80183f4 <prvInitialiseTaskLists+0x7c>)
 80183ca:	4a05      	ldr	r2, [pc, #20]	; (80183e0 <prvInitialiseTaskLists+0x68>)
 80183cc:	601a      	str	r2, [r3, #0]
}
 80183ce:	bf00      	nop
 80183d0:	3708      	adds	r7, #8
 80183d2:	46bd      	mov	sp, r7
 80183d4:	bd80      	pop	{r7, pc}
 80183d6:	bf00      	nop
 80183d8:	20000ff0 	.word	0x20000ff0
 80183dc:	20001450 	.word	0x20001450
 80183e0:	20001464 	.word	0x20001464
 80183e4:	20001480 	.word	0x20001480
 80183e8:	20001494 	.word	0x20001494
 80183ec:	200014ac 	.word	0x200014ac
 80183f0:	20001478 	.word	0x20001478
 80183f4:	2000147c 	.word	0x2000147c

080183f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b082      	sub	sp, #8
 80183fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80183fe:	e019      	b.n	8018434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018400:	f000 fee8 	bl	80191d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018404:	4b10      	ldr	r3, [pc, #64]	; (8018448 <prvCheckTasksWaitingTermination+0x50>)
 8018406:	68db      	ldr	r3, [r3, #12]
 8018408:	68db      	ldr	r3, [r3, #12]
 801840a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	3304      	adds	r3, #4
 8018410:	4618      	mov	r0, r3
 8018412:	f7fe f88b 	bl	801652c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018416:	4b0d      	ldr	r3, [pc, #52]	; (801844c <prvCheckTasksWaitingTermination+0x54>)
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	3b01      	subs	r3, #1
 801841c:	4a0b      	ldr	r2, [pc, #44]	; (801844c <prvCheckTasksWaitingTermination+0x54>)
 801841e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018420:	4b0b      	ldr	r3, [pc, #44]	; (8018450 <prvCheckTasksWaitingTermination+0x58>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	3b01      	subs	r3, #1
 8018426:	4a0a      	ldr	r2, [pc, #40]	; (8018450 <prvCheckTasksWaitingTermination+0x58>)
 8018428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801842a:	f000 ff03 	bl	8019234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801842e:	6878      	ldr	r0, [r7, #4]
 8018430:	f000 f810 	bl	8018454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018434:	4b06      	ldr	r3, [pc, #24]	; (8018450 <prvCheckTasksWaitingTermination+0x58>)
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	2b00      	cmp	r3, #0
 801843a:	d1e1      	bne.n	8018400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801843c:	bf00      	nop
 801843e:	bf00      	nop
 8018440:	3708      	adds	r7, #8
 8018442:	46bd      	mov	sp, r7
 8018444:	bd80      	pop	{r7, pc}
 8018446:	bf00      	nop
 8018448:	20001494 	.word	0x20001494
 801844c:	200014c0 	.word	0x200014c0
 8018450:	200014a8 	.word	0x200014a8

08018454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018454:	b580      	push	{r7, lr}
 8018456:	b084      	sub	sp, #16
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	3354      	adds	r3, #84	; 0x54
 8018460:	4618      	mov	r0, r3
 8018462:	f004 fb6f 	bl	801cb44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801846c:	2b00      	cmp	r3, #0
 801846e:	d108      	bne.n	8018482 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018474:	4618      	mov	r0, r3
 8018476:	f001 f89b 	bl	80195b0 <vPortFree>
				vPortFree( pxTCB );
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	f001 f898 	bl	80195b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018480:	e018      	b.n	80184b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8018488:	2b01      	cmp	r3, #1
 801848a:	d103      	bne.n	8018494 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801848c:	6878      	ldr	r0, [r7, #4]
 801848e:	f001 f88f 	bl	80195b0 <vPortFree>
	}
 8018492:	e00f      	b.n	80184b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801849a:	2b02      	cmp	r3, #2
 801849c:	d00a      	beq.n	80184b4 <prvDeleteTCB+0x60>
	__asm volatile
 801849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184a2:	f383 8811 	msr	BASEPRI, r3
 80184a6:	f3bf 8f6f 	isb	sy
 80184aa:	f3bf 8f4f 	dsb	sy
 80184ae:	60fb      	str	r3, [r7, #12]
}
 80184b0:	bf00      	nop
 80184b2:	e7fe      	b.n	80184b2 <prvDeleteTCB+0x5e>
	}
 80184b4:	bf00      	nop
 80184b6:	3710      	adds	r7, #16
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}

080184bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80184bc:	b480      	push	{r7}
 80184be:	b083      	sub	sp, #12
 80184c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80184c2:	4b0c      	ldr	r3, [pc, #48]	; (80184f4 <prvResetNextTaskUnblockTime+0x38>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d104      	bne.n	80184d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80184cc:	4b0a      	ldr	r3, [pc, #40]	; (80184f8 <prvResetNextTaskUnblockTime+0x3c>)
 80184ce:	f04f 32ff 	mov.w	r2, #4294967295
 80184d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80184d4:	e008      	b.n	80184e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184d6:	4b07      	ldr	r3, [pc, #28]	; (80184f4 <prvResetNextTaskUnblockTime+0x38>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	68db      	ldr	r3, [r3, #12]
 80184dc:	68db      	ldr	r3, [r3, #12]
 80184de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	685b      	ldr	r3, [r3, #4]
 80184e4:	4a04      	ldr	r2, [pc, #16]	; (80184f8 <prvResetNextTaskUnblockTime+0x3c>)
 80184e6:	6013      	str	r3, [r2, #0]
}
 80184e8:	bf00      	nop
 80184ea:	370c      	adds	r7, #12
 80184ec:	46bd      	mov	sp, r7
 80184ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f2:	4770      	bx	lr
 80184f4:	20001478 	.word	0x20001478
 80184f8:	200014e0 	.word	0x200014e0

080184fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80184fc:	b480      	push	{r7}
 80184fe:	b083      	sub	sp, #12
 8018500:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018502:	4b05      	ldr	r3, [pc, #20]	; (8018518 <xTaskGetCurrentTaskHandle+0x1c>)
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018508:	687b      	ldr	r3, [r7, #4]
	}
 801850a:	4618      	mov	r0, r3
 801850c:	370c      	adds	r7, #12
 801850e:	46bd      	mov	sp, r7
 8018510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018514:	4770      	bx	lr
 8018516:	bf00      	nop
 8018518:	20000fec 	.word	0x20000fec

0801851c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801851c:	b480      	push	{r7}
 801851e:	b083      	sub	sp, #12
 8018520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018522:	4b0b      	ldr	r3, [pc, #44]	; (8018550 <xTaskGetSchedulerState+0x34>)
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d102      	bne.n	8018530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801852a:	2301      	movs	r3, #1
 801852c:	607b      	str	r3, [r7, #4]
 801852e:	e008      	b.n	8018542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018530:	4b08      	ldr	r3, [pc, #32]	; (8018554 <xTaskGetSchedulerState+0x38>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d102      	bne.n	801853e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018538:	2302      	movs	r3, #2
 801853a:	607b      	str	r3, [r7, #4]
 801853c:	e001      	b.n	8018542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801853e:	2300      	movs	r3, #0
 8018540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018542:	687b      	ldr	r3, [r7, #4]
	}
 8018544:	4618      	mov	r0, r3
 8018546:	370c      	adds	r7, #12
 8018548:	46bd      	mov	sp, r7
 801854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801854e:	4770      	bx	lr
 8018550:	200014cc 	.word	0x200014cc
 8018554:	200014e8 	.word	0x200014e8

08018558 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018558:	b580      	push	{r7, lr}
 801855a:	b084      	sub	sp, #16
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018564:	2300      	movs	r3, #0
 8018566:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d051      	beq.n	8018612 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801856e:	68bb      	ldr	r3, [r7, #8]
 8018570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018572:	4b2a      	ldr	r3, [pc, #168]	; (801861c <xTaskPriorityInherit+0xc4>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018578:	429a      	cmp	r2, r3
 801857a:	d241      	bcs.n	8018600 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801857c:	68bb      	ldr	r3, [r7, #8]
 801857e:	699b      	ldr	r3, [r3, #24]
 8018580:	2b00      	cmp	r3, #0
 8018582:	db06      	blt.n	8018592 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018584:	4b25      	ldr	r3, [pc, #148]	; (801861c <xTaskPriorityInherit+0xc4>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801858a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801858e:	68bb      	ldr	r3, [r7, #8]
 8018590:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018592:	68bb      	ldr	r3, [r7, #8]
 8018594:	6959      	ldr	r1, [r3, #20]
 8018596:	68bb      	ldr	r3, [r7, #8]
 8018598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801859a:	4613      	mov	r3, r2
 801859c:	009b      	lsls	r3, r3, #2
 801859e:	4413      	add	r3, r2
 80185a0:	009b      	lsls	r3, r3, #2
 80185a2:	4a1f      	ldr	r2, [pc, #124]	; (8018620 <xTaskPriorityInherit+0xc8>)
 80185a4:	4413      	add	r3, r2
 80185a6:	4299      	cmp	r1, r3
 80185a8:	d122      	bne.n	80185f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80185aa:	68bb      	ldr	r3, [r7, #8]
 80185ac:	3304      	adds	r3, #4
 80185ae:	4618      	mov	r0, r3
 80185b0:	f7fd ffbc 	bl	801652c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80185b4:	4b19      	ldr	r3, [pc, #100]	; (801861c <xTaskPriorityInherit+0xc4>)
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185ba:	68bb      	ldr	r3, [r7, #8]
 80185bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185c2:	4b18      	ldr	r3, [pc, #96]	; (8018624 <xTaskPriorityInherit+0xcc>)
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	429a      	cmp	r2, r3
 80185c8:	d903      	bls.n	80185d2 <xTaskPriorityInherit+0x7a>
 80185ca:	68bb      	ldr	r3, [r7, #8]
 80185cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185ce:	4a15      	ldr	r2, [pc, #84]	; (8018624 <xTaskPriorityInherit+0xcc>)
 80185d0:	6013      	str	r3, [r2, #0]
 80185d2:	68bb      	ldr	r3, [r7, #8]
 80185d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185d6:	4613      	mov	r3, r2
 80185d8:	009b      	lsls	r3, r3, #2
 80185da:	4413      	add	r3, r2
 80185dc:	009b      	lsls	r3, r3, #2
 80185de:	4a10      	ldr	r2, [pc, #64]	; (8018620 <xTaskPriorityInherit+0xc8>)
 80185e0:	441a      	add	r2, r3
 80185e2:	68bb      	ldr	r3, [r7, #8]
 80185e4:	3304      	adds	r3, #4
 80185e6:	4619      	mov	r1, r3
 80185e8:	4610      	mov	r0, r2
 80185ea:	f7fd ff42 	bl	8016472 <vListInsertEnd>
 80185ee:	e004      	b.n	80185fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80185f0:	4b0a      	ldr	r3, [pc, #40]	; (801861c <xTaskPriorityInherit+0xc4>)
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185f6:	68bb      	ldr	r3, [r7, #8]
 80185f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80185fa:	2301      	movs	r3, #1
 80185fc:	60fb      	str	r3, [r7, #12]
 80185fe:	e008      	b.n	8018612 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018600:	68bb      	ldr	r3, [r7, #8]
 8018602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018604:	4b05      	ldr	r3, [pc, #20]	; (801861c <xTaskPriorityInherit+0xc4>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801860a:	429a      	cmp	r2, r3
 801860c:	d201      	bcs.n	8018612 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801860e:	2301      	movs	r3, #1
 8018610:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018612:	68fb      	ldr	r3, [r7, #12]
	}
 8018614:	4618      	mov	r0, r3
 8018616:	3710      	adds	r7, #16
 8018618:	46bd      	mov	sp, r7
 801861a:	bd80      	pop	{r7, pc}
 801861c:	20000fec 	.word	0x20000fec
 8018620:	20000ff0 	.word	0x20000ff0
 8018624:	200014c8 	.word	0x200014c8

08018628 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018628:	b580      	push	{r7, lr}
 801862a:	b086      	sub	sp, #24
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018634:	2300      	movs	r3, #0
 8018636:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d056      	beq.n	80186ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801863e:	4b2e      	ldr	r3, [pc, #184]	; (80186f8 <xTaskPriorityDisinherit+0xd0>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	693a      	ldr	r2, [r7, #16]
 8018644:	429a      	cmp	r2, r3
 8018646:	d00a      	beq.n	801865e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801864c:	f383 8811 	msr	BASEPRI, r3
 8018650:	f3bf 8f6f 	isb	sy
 8018654:	f3bf 8f4f 	dsb	sy
 8018658:	60fb      	str	r3, [r7, #12]
}
 801865a:	bf00      	nop
 801865c:	e7fe      	b.n	801865c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801865e:	693b      	ldr	r3, [r7, #16]
 8018660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018662:	2b00      	cmp	r3, #0
 8018664:	d10a      	bne.n	801867c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801866a:	f383 8811 	msr	BASEPRI, r3
 801866e:	f3bf 8f6f 	isb	sy
 8018672:	f3bf 8f4f 	dsb	sy
 8018676:	60bb      	str	r3, [r7, #8]
}
 8018678:	bf00      	nop
 801867a:	e7fe      	b.n	801867a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801867c:	693b      	ldr	r3, [r7, #16]
 801867e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018680:	1e5a      	subs	r2, r3, #1
 8018682:	693b      	ldr	r3, [r7, #16]
 8018684:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018686:	693b      	ldr	r3, [r7, #16]
 8018688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801868a:	693b      	ldr	r3, [r7, #16]
 801868c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801868e:	429a      	cmp	r2, r3
 8018690:	d02c      	beq.n	80186ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018692:	693b      	ldr	r3, [r7, #16]
 8018694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018696:	2b00      	cmp	r3, #0
 8018698:	d128      	bne.n	80186ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801869a:	693b      	ldr	r3, [r7, #16]
 801869c:	3304      	adds	r3, #4
 801869e:	4618      	mov	r0, r3
 80186a0:	f7fd ff44 	bl	801652c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80186a4:	693b      	ldr	r3, [r7, #16]
 80186a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80186a8:	693b      	ldr	r3, [r7, #16]
 80186aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186ac:	693b      	ldr	r3, [r7, #16]
 80186ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80186b4:	693b      	ldr	r3, [r7, #16]
 80186b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80186b8:	693b      	ldr	r3, [r7, #16]
 80186ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186bc:	4b0f      	ldr	r3, [pc, #60]	; (80186fc <xTaskPriorityDisinherit+0xd4>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d903      	bls.n	80186cc <xTaskPriorityDisinherit+0xa4>
 80186c4:	693b      	ldr	r3, [r7, #16]
 80186c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186c8:	4a0c      	ldr	r2, [pc, #48]	; (80186fc <xTaskPriorityDisinherit+0xd4>)
 80186ca:	6013      	str	r3, [r2, #0]
 80186cc:	693b      	ldr	r3, [r7, #16]
 80186ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186d0:	4613      	mov	r3, r2
 80186d2:	009b      	lsls	r3, r3, #2
 80186d4:	4413      	add	r3, r2
 80186d6:	009b      	lsls	r3, r3, #2
 80186d8:	4a09      	ldr	r2, [pc, #36]	; (8018700 <xTaskPriorityDisinherit+0xd8>)
 80186da:	441a      	add	r2, r3
 80186dc:	693b      	ldr	r3, [r7, #16]
 80186de:	3304      	adds	r3, #4
 80186e0:	4619      	mov	r1, r3
 80186e2:	4610      	mov	r0, r2
 80186e4:	f7fd fec5 	bl	8016472 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80186e8:	2301      	movs	r3, #1
 80186ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80186ec:	697b      	ldr	r3, [r7, #20]
	}
 80186ee:	4618      	mov	r0, r3
 80186f0:	3718      	adds	r7, #24
 80186f2:	46bd      	mov	sp, r7
 80186f4:	bd80      	pop	{r7, pc}
 80186f6:	bf00      	nop
 80186f8:	20000fec 	.word	0x20000fec
 80186fc:	200014c8 	.word	0x200014c8
 8018700:	20000ff0 	.word	0x20000ff0

08018704 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018704:	b580      	push	{r7, lr}
 8018706:	b088      	sub	sp, #32
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
 801870c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018712:	2301      	movs	r3, #1
 8018714:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d06a      	beq.n	80187f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801871c:	69bb      	ldr	r3, [r7, #24]
 801871e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018720:	2b00      	cmp	r3, #0
 8018722:	d10a      	bne.n	801873a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8018724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018728:	f383 8811 	msr	BASEPRI, r3
 801872c:	f3bf 8f6f 	isb	sy
 8018730:	f3bf 8f4f 	dsb	sy
 8018734:	60fb      	str	r3, [r7, #12]
}
 8018736:	bf00      	nop
 8018738:	e7fe      	b.n	8018738 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801873a:	69bb      	ldr	r3, [r7, #24]
 801873c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801873e:	683a      	ldr	r2, [r7, #0]
 8018740:	429a      	cmp	r2, r3
 8018742:	d902      	bls.n	801874a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018744:	683b      	ldr	r3, [r7, #0]
 8018746:	61fb      	str	r3, [r7, #28]
 8018748:	e002      	b.n	8018750 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801874a:	69bb      	ldr	r3, [r7, #24]
 801874c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801874e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018750:	69bb      	ldr	r3, [r7, #24]
 8018752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018754:	69fa      	ldr	r2, [r7, #28]
 8018756:	429a      	cmp	r2, r3
 8018758:	d04b      	beq.n	80187f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801875a:	69bb      	ldr	r3, [r7, #24]
 801875c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801875e:	697a      	ldr	r2, [r7, #20]
 8018760:	429a      	cmp	r2, r3
 8018762:	d146      	bne.n	80187f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018764:	4b25      	ldr	r3, [pc, #148]	; (80187fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	69ba      	ldr	r2, [r7, #24]
 801876a:	429a      	cmp	r2, r3
 801876c:	d10a      	bne.n	8018784 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018772:	f383 8811 	msr	BASEPRI, r3
 8018776:	f3bf 8f6f 	isb	sy
 801877a:	f3bf 8f4f 	dsb	sy
 801877e:	60bb      	str	r3, [r7, #8]
}
 8018780:	bf00      	nop
 8018782:	e7fe      	b.n	8018782 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018784:	69bb      	ldr	r3, [r7, #24]
 8018786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018788:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801878a:	69bb      	ldr	r3, [r7, #24]
 801878c:	69fa      	ldr	r2, [r7, #28]
 801878e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018790:	69bb      	ldr	r3, [r7, #24]
 8018792:	699b      	ldr	r3, [r3, #24]
 8018794:	2b00      	cmp	r3, #0
 8018796:	db04      	blt.n	80187a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018798:	69fb      	ldr	r3, [r7, #28]
 801879a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801879e:	69bb      	ldr	r3, [r7, #24]
 80187a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80187a2:	69bb      	ldr	r3, [r7, #24]
 80187a4:	6959      	ldr	r1, [r3, #20]
 80187a6:	693a      	ldr	r2, [r7, #16]
 80187a8:	4613      	mov	r3, r2
 80187aa:	009b      	lsls	r3, r3, #2
 80187ac:	4413      	add	r3, r2
 80187ae:	009b      	lsls	r3, r3, #2
 80187b0:	4a13      	ldr	r2, [pc, #76]	; (8018800 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80187b2:	4413      	add	r3, r2
 80187b4:	4299      	cmp	r1, r3
 80187b6:	d11c      	bne.n	80187f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80187b8:	69bb      	ldr	r3, [r7, #24]
 80187ba:	3304      	adds	r3, #4
 80187bc:	4618      	mov	r0, r3
 80187be:	f7fd feb5 	bl	801652c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80187c2:	69bb      	ldr	r3, [r7, #24]
 80187c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187c6:	4b0f      	ldr	r3, [pc, #60]	; (8018804 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	429a      	cmp	r2, r3
 80187cc:	d903      	bls.n	80187d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80187ce:	69bb      	ldr	r3, [r7, #24]
 80187d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187d2:	4a0c      	ldr	r2, [pc, #48]	; (8018804 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80187d4:	6013      	str	r3, [r2, #0]
 80187d6:	69bb      	ldr	r3, [r7, #24]
 80187d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187da:	4613      	mov	r3, r2
 80187dc:	009b      	lsls	r3, r3, #2
 80187de:	4413      	add	r3, r2
 80187e0:	009b      	lsls	r3, r3, #2
 80187e2:	4a07      	ldr	r2, [pc, #28]	; (8018800 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80187e4:	441a      	add	r2, r3
 80187e6:	69bb      	ldr	r3, [r7, #24]
 80187e8:	3304      	adds	r3, #4
 80187ea:	4619      	mov	r1, r3
 80187ec:	4610      	mov	r0, r2
 80187ee:	f7fd fe40 	bl	8016472 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80187f2:	bf00      	nop
 80187f4:	3720      	adds	r7, #32
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd80      	pop	{r7, pc}
 80187fa:	bf00      	nop
 80187fc:	20000fec 	.word	0x20000fec
 8018800:	20000ff0 	.word	0x20000ff0
 8018804:	200014c8 	.word	0x200014c8

08018808 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018808:	b480      	push	{r7}
 801880a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801880c:	4b07      	ldr	r3, [pc, #28]	; (801882c <pvTaskIncrementMutexHeldCount+0x24>)
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d004      	beq.n	801881e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018814:	4b05      	ldr	r3, [pc, #20]	; (801882c <pvTaskIncrementMutexHeldCount+0x24>)
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801881a:	3201      	adds	r2, #1
 801881c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801881e:	4b03      	ldr	r3, [pc, #12]	; (801882c <pvTaskIncrementMutexHeldCount+0x24>)
 8018820:	681b      	ldr	r3, [r3, #0]
	}
 8018822:	4618      	mov	r0, r3
 8018824:	46bd      	mov	sp, r7
 8018826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801882a:	4770      	bx	lr
 801882c:	20000fec 	.word	0x20000fec

08018830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b084      	sub	sp, #16
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
 8018838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801883a:	4b21      	ldr	r3, [pc, #132]	; (80188c0 <prvAddCurrentTaskToDelayedList+0x90>)
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018840:	4b20      	ldr	r3, [pc, #128]	; (80188c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	3304      	adds	r3, #4
 8018846:	4618      	mov	r0, r3
 8018848:	f7fd fe70 	bl	801652c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018852:	d10a      	bne.n	801886a <prvAddCurrentTaskToDelayedList+0x3a>
 8018854:	683b      	ldr	r3, [r7, #0]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d007      	beq.n	801886a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801885a:	4b1a      	ldr	r3, [pc, #104]	; (80188c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	3304      	adds	r3, #4
 8018860:	4619      	mov	r1, r3
 8018862:	4819      	ldr	r0, [pc, #100]	; (80188c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8018864:	f7fd fe05 	bl	8016472 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018868:	e026      	b.n	80188b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801886a:	68fa      	ldr	r2, [r7, #12]
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	4413      	add	r3, r2
 8018870:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018872:	4b14      	ldr	r3, [pc, #80]	; (80188c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	68ba      	ldr	r2, [r7, #8]
 8018878:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801887a:	68ba      	ldr	r2, [r7, #8]
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	429a      	cmp	r2, r3
 8018880:	d209      	bcs.n	8018896 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018882:	4b12      	ldr	r3, [pc, #72]	; (80188cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8018884:	681a      	ldr	r2, [r3, #0]
 8018886:	4b0f      	ldr	r3, [pc, #60]	; (80188c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	3304      	adds	r3, #4
 801888c:	4619      	mov	r1, r3
 801888e:	4610      	mov	r0, r2
 8018890:	f7fd fe13 	bl	80164ba <vListInsert>
}
 8018894:	e010      	b.n	80188b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018896:	4b0e      	ldr	r3, [pc, #56]	; (80188d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018898:	681a      	ldr	r2, [r3, #0]
 801889a:	4b0a      	ldr	r3, [pc, #40]	; (80188c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	3304      	adds	r3, #4
 80188a0:	4619      	mov	r1, r3
 80188a2:	4610      	mov	r0, r2
 80188a4:	f7fd fe09 	bl	80164ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80188a8:	4b0a      	ldr	r3, [pc, #40]	; (80188d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	68ba      	ldr	r2, [r7, #8]
 80188ae:	429a      	cmp	r2, r3
 80188b0:	d202      	bcs.n	80188b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80188b2:	4a08      	ldr	r2, [pc, #32]	; (80188d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80188b4:	68bb      	ldr	r3, [r7, #8]
 80188b6:	6013      	str	r3, [r2, #0]
}
 80188b8:	bf00      	nop
 80188ba:	3710      	adds	r7, #16
 80188bc:	46bd      	mov	sp, r7
 80188be:	bd80      	pop	{r7, pc}
 80188c0:	200014c4 	.word	0x200014c4
 80188c4:	20000fec 	.word	0x20000fec
 80188c8:	200014ac 	.word	0x200014ac
 80188cc:	2000147c 	.word	0x2000147c
 80188d0:	20001478 	.word	0x20001478
 80188d4:	200014e0 	.word	0x200014e0

080188d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b08a      	sub	sp, #40	; 0x28
 80188dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80188de:	2300      	movs	r3, #0
 80188e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80188e2:	f000 fb07 	bl	8018ef4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80188e6:	4b1c      	ldr	r3, [pc, #112]	; (8018958 <xTimerCreateTimerTask+0x80>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d021      	beq.n	8018932 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80188ee:	2300      	movs	r3, #0
 80188f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80188f2:	2300      	movs	r3, #0
 80188f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80188f6:	1d3a      	adds	r2, r7, #4
 80188f8:	f107 0108 	add.w	r1, r7, #8
 80188fc:	f107 030c 	add.w	r3, r7, #12
 8018900:	4618      	mov	r0, r3
 8018902:	f7fd fd6f 	bl	80163e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018906:	6879      	ldr	r1, [r7, #4]
 8018908:	68bb      	ldr	r3, [r7, #8]
 801890a:	68fa      	ldr	r2, [r7, #12]
 801890c:	9202      	str	r2, [sp, #8]
 801890e:	9301      	str	r3, [sp, #4]
 8018910:	2302      	movs	r3, #2
 8018912:	9300      	str	r3, [sp, #0]
 8018914:	2300      	movs	r3, #0
 8018916:	460a      	mov	r2, r1
 8018918:	4910      	ldr	r1, [pc, #64]	; (801895c <xTimerCreateTimerTask+0x84>)
 801891a:	4811      	ldr	r0, [pc, #68]	; (8018960 <xTimerCreateTimerTask+0x88>)
 801891c:	f7fe fe3e 	bl	801759c <xTaskCreateStatic>
 8018920:	4603      	mov	r3, r0
 8018922:	4a10      	ldr	r2, [pc, #64]	; (8018964 <xTimerCreateTimerTask+0x8c>)
 8018924:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018926:	4b0f      	ldr	r3, [pc, #60]	; (8018964 <xTimerCreateTimerTask+0x8c>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d001      	beq.n	8018932 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801892e:	2301      	movs	r3, #1
 8018930:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018932:	697b      	ldr	r3, [r7, #20]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d10a      	bne.n	801894e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801893c:	f383 8811 	msr	BASEPRI, r3
 8018940:	f3bf 8f6f 	isb	sy
 8018944:	f3bf 8f4f 	dsb	sy
 8018948:	613b      	str	r3, [r7, #16]
}
 801894a:	bf00      	nop
 801894c:	e7fe      	b.n	801894c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801894e:	697b      	ldr	r3, [r7, #20]
}
 8018950:	4618      	mov	r0, r3
 8018952:	3718      	adds	r7, #24
 8018954:	46bd      	mov	sp, r7
 8018956:	bd80      	pop	{r7, pc}
 8018958:	2000151c 	.word	0x2000151c
 801895c:	08022f58 	.word	0x08022f58
 8018960:	08018a9d 	.word	0x08018a9d
 8018964:	20001520 	.word	0x20001520

08018968 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b08a      	sub	sp, #40	; 0x28
 801896c:	af00      	add	r7, sp, #0
 801896e:	60f8      	str	r0, [r7, #12]
 8018970:	60b9      	str	r1, [r7, #8]
 8018972:	607a      	str	r2, [r7, #4]
 8018974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018976:	2300      	movs	r3, #0
 8018978:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d10a      	bne.n	8018996 <xTimerGenericCommand+0x2e>
	__asm volatile
 8018980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018984:	f383 8811 	msr	BASEPRI, r3
 8018988:	f3bf 8f6f 	isb	sy
 801898c:	f3bf 8f4f 	dsb	sy
 8018990:	623b      	str	r3, [r7, #32]
}
 8018992:	bf00      	nop
 8018994:	e7fe      	b.n	8018994 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018996:	4b1a      	ldr	r3, [pc, #104]	; (8018a00 <xTimerGenericCommand+0x98>)
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d02a      	beq.n	80189f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801899e:	68bb      	ldr	r3, [r7, #8]
 80189a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80189aa:	68bb      	ldr	r3, [r7, #8]
 80189ac:	2b05      	cmp	r3, #5
 80189ae:	dc18      	bgt.n	80189e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80189b0:	f7ff fdb4 	bl	801851c <xTaskGetSchedulerState>
 80189b4:	4603      	mov	r3, r0
 80189b6:	2b02      	cmp	r3, #2
 80189b8:	d109      	bne.n	80189ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80189ba:	4b11      	ldr	r3, [pc, #68]	; (8018a00 <xTimerGenericCommand+0x98>)
 80189bc:	6818      	ldr	r0, [r3, #0]
 80189be:	f107 0110 	add.w	r1, r7, #16
 80189c2:	2300      	movs	r3, #0
 80189c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80189c6:	f7fd ff83 	bl	80168d0 <xQueueGenericSend>
 80189ca:	6278      	str	r0, [r7, #36]	; 0x24
 80189cc:	e012      	b.n	80189f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80189ce:	4b0c      	ldr	r3, [pc, #48]	; (8018a00 <xTimerGenericCommand+0x98>)
 80189d0:	6818      	ldr	r0, [r3, #0]
 80189d2:	f107 0110 	add.w	r1, r7, #16
 80189d6:	2300      	movs	r3, #0
 80189d8:	2200      	movs	r2, #0
 80189da:	f7fd ff79 	bl	80168d0 <xQueueGenericSend>
 80189de:	6278      	str	r0, [r7, #36]	; 0x24
 80189e0:	e008      	b.n	80189f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80189e2:	4b07      	ldr	r3, [pc, #28]	; (8018a00 <xTimerGenericCommand+0x98>)
 80189e4:	6818      	ldr	r0, [r3, #0]
 80189e6:	f107 0110 	add.w	r1, r7, #16
 80189ea:	2300      	movs	r3, #0
 80189ec:	683a      	ldr	r2, [r7, #0]
 80189ee:	f7fe f86d 	bl	8016acc <xQueueGenericSendFromISR>
 80189f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80189f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80189f6:	4618      	mov	r0, r3
 80189f8:	3728      	adds	r7, #40	; 0x28
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop
 8018a00:	2000151c 	.word	0x2000151c

08018a04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b088      	sub	sp, #32
 8018a08:	af02      	add	r7, sp, #8
 8018a0a:	6078      	str	r0, [r7, #4]
 8018a0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a0e:	4b22      	ldr	r3, [pc, #136]	; (8018a98 <prvProcessExpiredTimer+0x94>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	68db      	ldr	r3, [r3, #12]
 8018a14:	68db      	ldr	r3, [r3, #12]
 8018a16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018a18:	697b      	ldr	r3, [r7, #20]
 8018a1a:	3304      	adds	r3, #4
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f7fd fd85 	bl	801652c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018a22:	697b      	ldr	r3, [r7, #20]
 8018a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a28:	f003 0304 	and.w	r3, r3, #4
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d022      	beq.n	8018a76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018a30:	697b      	ldr	r3, [r7, #20]
 8018a32:	699a      	ldr	r2, [r3, #24]
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	18d1      	adds	r1, r2, r3
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	683a      	ldr	r2, [r7, #0]
 8018a3c:	6978      	ldr	r0, [r7, #20]
 8018a3e:	f000 f8d1 	bl	8018be4 <prvInsertTimerInActiveList>
 8018a42:	4603      	mov	r3, r0
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d01f      	beq.n	8018a88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018a48:	2300      	movs	r3, #0
 8018a4a:	9300      	str	r3, [sp, #0]
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	687a      	ldr	r2, [r7, #4]
 8018a50:	2100      	movs	r1, #0
 8018a52:	6978      	ldr	r0, [r7, #20]
 8018a54:	f7ff ff88 	bl	8018968 <xTimerGenericCommand>
 8018a58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018a5a:	693b      	ldr	r3, [r7, #16]
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d113      	bne.n	8018a88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a64:	f383 8811 	msr	BASEPRI, r3
 8018a68:	f3bf 8f6f 	isb	sy
 8018a6c:	f3bf 8f4f 	dsb	sy
 8018a70:	60fb      	str	r3, [r7, #12]
}
 8018a72:	bf00      	nop
 8018a74:	e7fe      	b.n	8018a74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018a76:	697b      	ldr	r3, [r7, #20]
 8018a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a7c:	f023 0301 	bic.w	r3, r3, #1
 8018a80:	b2da      	uxtb	r2, r3
 8018a82:	697b      	ldr	r3, [r7, #20]
 8018a84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	6a1b      	ldr	r3, [r3, #32]
 8018a8c:	6978      	ldr	r0, [r7, #20]
 8018a8e:	4798      	blx	r3
}
 8018a90:	bf00      	nop
 8018a92:	3718      	adds	r7, #24
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}
 8018a98:	20001514 	.word	0x20001514

08018a9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	b084      	sub	sp, #16
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018aa4:	f107 0308 	add.w	r3, r7, #8
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	f000 f857 	bl	8018b5c <prvGetNextExpireTime>
 8018aae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	4619      	mov	r1, r3
 8018ab4:	68f8      	ldr	r0, [r7, #12]
 8018ab6:	f000 f803 	bl	8018ac0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018aba:	f000 f8d5 	bl	8018c68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018abe:	e7f1      	b.n	8018aa4 <prvTimerTask+0x8>

08018ac0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b084      	sub	sp, #16
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
 8018ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018aca:	f7ff f92b 	bl	8017d24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018ace:	f107 0308 	add.w	r3, r7, #8
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f000 f866 	bl	8018ba4 <prvSampleTimeNow>
 8018ad8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d130      	bne.n	8018b42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018ae0:	683b      	ldr	r3, [r7, #0]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d10a      	bne.n	8018afc <prvProcessTimerOrBlockTask+0x3c>
 8018ae6:	687a      	ldr	r2, [r7, #4]
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	429a      	cmp	r2, r3
 8018aec:	d806      	bhi.n	8018afc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018aee:	f7ff f927 	bl	8017d40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018af2:	68f9      	ldr	r1, [r7, #12]
 8018af4:	6878      	ldr	r0, [r7, #4]
 8018af6:	f7ff ff85 	bl	8018a04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018afa:	e024      	b.n	8018b46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d008      	beq.n	8018b14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018b02:	4b13      	ldr	r3, [pc, #76]	; (8018b50 <prvProcessTimerOrBlockTask+0x90>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d101      	bne.n	8018b10 <prvProcessTimerOrBlockTask+0x50>
 8018b0c:	2301      	movs	r3, #1
 8018b0e:	e000      	b.n	8018b12 <prvProcessTimerOrBlockTask+0x52>
 8018b10:	2300      	movs	r3, #0
 8018b12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018b14:	4b0f      	ldr	r3, [pc, #60]	; (8018b54 <prvProcessTimerOrBlockTask+0x94>)
 8018b16:	6818      	ldr	r0, [r3, #0]
 8018b18:	687a      	ldr	r2, [r7, #4]
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	1ad3      	subs	r3, r2, r3
 8018b1e:	683a      	ldr	r2, [r7, #0]
 8018b20:	4619      	mov	r1, r3
 8018b22:	f7fe fd07 	bl	8017534 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018b26:	f7ff f90b 	bl	8017d40 <xTaskResumeAll>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d10a      	bne.n	8018b46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018b30:	4b09      	ldr	r3, [pc, #36]	; (8018b58 <prvProcessTimerOrBlockTask+0x98>)
 8018b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b36:	601a      	str	r2, [r3, #0]
 8018b38:	f3bf 8f4f 	dsb	sy
 8018b3c:	f3bf 8f6f 	isb	sy
}
 8018b40:	e001      	b.n	8018b46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018b42:	f7ff f8fd 	bl	8017d40 <xTaskResumeAll>
}
 8018b46:	bf00      	nop
 8018b48:	3710      	adds	r7, #16
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	bd80      	pop	{r7, pc}
 8018b4e:	bf00      	nop
 8018b50:	20001518 	.word	0x20001518
 8018b54:	2000151c 	.word	0x2000151c
 8018b58:	e000ed04 	.word	0xe000ed04

08018b5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018b5c:	b480      	push	{r7}
 8018b5e:	b085      	sub	sp, #20
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018b64:	4b0e      	ldr	r3, [pc, #56]	; (8018ba0 <prvGetNextExpireTime+0x44>)
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d101      	bne.n	8018b72 <prvGetNextExpireTime+0x16>
 8018b6e:	2201      	movs	r2, #1
 8018b70:	e000      	b.n	8018b74 <prvGetNextExpireTime+0x18>
 8018b72:	2200      	movs	r2, #0
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d105      	bne.n	8018b8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018b80:	4b07      	ldr	r3, [pc, #28]	; (8018ba0 <prvGetNextExpireTime+0x44>)
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	68db      	ldr	r3, [r3, #12]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	60fb      	str	r3, [r7, #12]
 8018b8a:	e001      	b.n	8018b90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018b90:	68fb      	ldr	r3, [r7, #12]
}
 8018b92:	4618      	mov	r0, r3
 8018b94:	3714      	adds	r7, #20
 8018b96:	46bd      	mov	sp, r7
 8018b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b9c:	4770      	bx	lr
 8018b9e:	bf00      	nop
 8018ba0:	20001514 	.word	0x20001514

08018ba4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b084      	sub	sp, #16
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018bac:	f7ff f966 	bl	8017e7c <xTaskGetTickCount>
 8018bb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018bb2:	4b0b      	ldr	r3, [pc, #44]	; (8018be0 <prvSampleTimeNow+0x3c>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	68fa      	ldr	r2, [r7, #12]
 8018bb8:	429a      	cmp	r2, r3
 8018bba:	d205      	bcs.n	8018bc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018bbc:	f000 f936 	bl	8018e2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	2201      	movs	r2, #1
 8018bc4:	601a      	str	r2, [r3, #0]
 8018bc6:	e002      	b.n	8018bce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	2200      	movs	r2, #0
 8018bcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018bce:	4a04      	ldr	r2, [pc, #16]	; (8018be0 <prvSampleTimeNow+0x3c>)
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018bd4:	68fb      	ldr	r3, [r7, #12]
}
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	3710      	adds	r7, #16
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}
 8018bde:	bf00      	nop
 8018be0:	20001524 	.word	0x20001524

08018be4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b086      	sub	sp, #24
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	60f8      	str	r0, [r7, #12]
 8018bec:	60b9      	str	r1, [r7, #8]
 8018bee:	607a      	str	r2, [r7, #4]
 8018bf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	68ba      	ldr	r2, [r7, #8]
 8018bfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	68fa      	ldr	r2, [r7, #12]
 8018c00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018c02:	68ba      	ldr	r2, [r7, #8]
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	429a      	cmp	r2, r3
 8018c08:	d812      	bhi.n	8018c30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c0a:	687a      	ldr	r2, [r7, #4]
 8018c0c:	683b      	ldr	r3, [r7, #0]
 8018c0e:	1ad2      	subs	r2, r2, r3
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	699b      	ldr	r3, [r3, #24]
 8018c14:	429a      	cmp	r2, r3
 8018c16:	d302      	bcc.n	8018c1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018c18:	2301      	movs	r3, #1
 8018c1a:	617b      	str	r3, [r7, #20]
 8018c1c:	e01b      	b.n	8018c56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018c1e:	4b10      	ldr	r3, [pc, #64]	; (8018c60 <prvInsertTimerInActiveList+0x7c>)
 8018c20:	681a      	ldr	r2, [r3, #0]
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	3304      	adds	r3, #4
 8018c26:	4619      	mov	r1, r3
 8018c28:	4610      	mov	r0, r2
 8018c2a:	f7fd fc46 	bl	80164ba <vListInsert>
 8018c2e:	e012      	b.n	8018c56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018c30:	687a      	ldr	r2, [r7, #4]
 8018c32:	683b      	ldr	r3, [r7, #0]
 8018c34:	429a      	cmp	r2, r3
 8018c36:	d206      	bcs.n	8018c46 <prvInsertTimerInActiveList+0x62>
 8018c38:	68ba      	ldr	r2, [r7, #8]
 8018c3a:	683b      	ldr	r3, [r7, #0]
 8018c3c:	429a      	cmp	r2, r3
 8018c3e:	d302      	bcc.n	8018c46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018c40:	2301      	movs	r3, #1
 8018c42:	617b      	str	r3, [r7, #20]
 8018c44:	e007      	b.n	8018c56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018c46:	4b07      	ldr	r3, [pc, #28]	; (8018c64 <prvInsertTimerInActiveList+0x80>)
 8018c48:	681a      	ldr	r2, [r3, #0]
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	3304      	adds	r3, #4
 8018c4e:	4619      	mov	r1, r3
 8018c50:	4610      	mov	r0, r2
 8018c52:	f7fd fc32 	bl	80164ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018c56:	697b      	ldr	r3, [r7, #20]
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3718      	adds	r7, #24
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	20001518 	.word	0x20001518
 8018c64:	20001514 	.word	0x20001514

08018c68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b08e      	sub	sp, #56	; 0x38
 8018c6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018c6e:	e0ca      	b.n	8018e06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	da18      	bge.n	8018ca8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018c76:	1d3b      	adds	r3, r7, #4
 8018c78:	3304      	adds	r3, #4
 8018c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d10a      	bne.n	8018c98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c86:	f383 8811 	msr	BASEPRI, r3
 8018c8a:	f3bf 8f6f 	isb	sy
 8018c8e:	f3bf 8f4f 	dsb	sy
 8018c92:	61fb      	str	r3, [r7, #28]
}
 8018c94:	bf00      	nop
 8018c96:	e7fe      	b.n	8018c96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c9e:	6850      	ldr	r0, [r2, #4]
 8018ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ca2:	6892      	ldr	r2, [r2, #8]
 8018ca4:	4611      	mov	r1, r2
 8018ca6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	f2c0 80aa 	blt.w	8018e04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cb6:	695b      	ldr	r3, [r3, #20]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d004      	beq.n	8018cc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cbe:	3304      	adds	r3, #4
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f7fd fc33 	bl	801652c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018cc6:	463b      	mov	r3, r7
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f7ff ff6b 	bl	8018ba4 <prvSampleTimeNow>
 8018cce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	2b09      	cmp	r3, #9
 8018cd4:	f200 8097 	bhi.w	8018e06 <prvProcessReceivedCommands+0x19e>
 8018cd8:	a201      	add	r2, pc, #4	; (adr r2, 8018ce0 <prvProcessReceivedCommands+0x78>)
 8018cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cde:	bf00      	nop
 8018ce0:	08018d09 	.word	0x08018d09
 8018ce4:	08018d09 	.word	0x08018d09
 8018ce8:	08018d09 	.word	0x08018d09
 8018cec:	08018d7d 	.word	0x08018d7d
 8018cf0:	08018d91 	.word	0x08018d91
 8018cf4:	08018ddb 	.word	0x08018ddb
 8018cf8:	08018d09 	.word	0x08018d09
 8018cfc:	08018d09 	.word	0x08018d09
 8018d00:	08018d7d 	.word	0x08018d7d
 8018d04:	08018d91 	.word	0x08018d91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d0e:	f043 0301 	orr.w	r3, r3, #1
 8018d12:	b2da      	uxtb	r2, r3
 8018d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018d1a:	68ba      	ldr	r2, [r7, #8]
 8018d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d1e:	699b      	ldr	r3, [r3, #24]
 8018d20:	18d1      	adds	r1, r2, r3
 8018d22:	68bb      	ldr	r3, [r7, #8]
 8018d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018d28:	f7ff ff5c 	bl	8018be4 <prvInsertTimerInActiveList>
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d069      	beq.n	8018e06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d34:	6a1b      	ldr	r3, [r3, #32]
 8018d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018d38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d40:	f003 0304 	and.w	r3, r3, #4
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d05e      	beq.n	8018e06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018d48:	68ba      	ldr	r2, [r7, #8]
 8018d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d4c:	699b      	ldr	r3, [r3, #24]
 8018d4e:	441a      	add	r2, r3
 8018d50:	2300      	movs	r3, #0
 8018d52:	9300      	str	r3, [sp, #0]
 8018d54:	2300      	movs	r3, #0
 8018d56:	2100      	movs	r1, #0
 8018d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018d5a:	f7ff fe05 	bl	8018968 <xTimerGenericCommand>
 8018d5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018d60:	6a3b      	ldr	r3, [r7, #32]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d14f      	bne.n	8018e06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d6a:	f383 8811 	msr	BASEPRI, r3
 8018d6e:	f3bf 8f6f 	isb	sy
 8018d72:	f3bf 8f4f 	dsb	sy
 8018d76:	61bb      	str	r3, [r7, #24]
}
 8018d78:	bf00      	nop
 8018d7a:	e7fe      	b.n	8018d7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d82:	f023 0301 	bic.w	r3, r3, #1
 8018d86:	b2da      	uxtb	r2, r3
 8018d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018d8e:	e03a      	b.n	8018e06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d96:	f043 0301 	orr.w	r3, r3, #1
 8018d9a:	b2da      	uxtb	r2, r3
 8018d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018da2:	68ba      	ldr	r2, [r7, #8]
 8018da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018da6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018daa:	699b      	ldr	r3, [r3, #24]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d10a      	bne.n	8018dc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018db4:	f383 8811 	msr	BASEPRI, r3
 8018db8:	f3bf 8f6f 	isb	sy
 8018dbc:	f3bf 8f4f 	dsb	sy
 8018dc0:	617b      	str	r3, [r7, #20]
}
 8018dc2:	bf00      	nop
 8018dc4:	e7fe      	b.n	8018dc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dc8:	699a      	ldr	r2, [r3, #24]
 8018dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dcc:	18d1      	adds	r1, r2, r3
 8018dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018dd4:	f7ff ff06 	bl	8018be4 <prvInsertTimerInActiveList>
					break;
 8018dd8:	e015      	b.n	8018e06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018de0:	f003 0302 	and.w	r3, r3, #2
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d103      	bne.n	8018df0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018dea:	f000 fbe1 	bl	80195b0 <vPortFree>
 8018dee:	e00a      	b.n	8018e06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018df6:	f023 0301 	bic.w	r3, r3, #1
 8018dfa:	b2da      	uxtb	r2, r3
 8018dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018e02:	e000      	b.n	8018e06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018e04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018e06:	4b08      	ldr	r3, [pc, #32]	; (8018e28 <prvProcessReceivedCommands+0x1c0>)
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	1d39      	adds	r1, r7, #4
 8018e0c:	2200      	movs	r2, #0
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f7fd ff84 	bl	8016d1c <xQueueReceive>
 8018e14:	4603      	mov	r3, r0
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	f47f af2a 	bne.w	8018c70 <prvProcessReceivedCommands+0x8>
	}
}
 8018e1c:	bf00      	nop
 8018e1e:	bf00      	nop
 8018e20:	3730      	adds	r7, #48	; 0x30
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}
 8018e26:	bf00      	nop
 8018e28:	2000151c 	.word	0x2000151c

08018e2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b088      	sub	sp, #32
 8018e30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018e32:	e048      	b.n	8018ec6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018e34:	4b2d      	ldr	r3, [pc, #180]	; (8018eec <prvSwitchTimerLists+0xc0>)
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	68db      	ldr	r3, [r3, #12]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e3e:	4b2b      	ldr	r3, [pc, #172]	; (8018eec <prvSwitchTimerLists+0xc0>)
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	68db      	ldr	r3, [r3, #12]
 8018e44:	68db      	ldr	r3, [r3, #12]
 8018e46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	3304      	adds	r3, #4
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7fd fb6d 	bl	801652c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	6a1b      	ldr	r3, [r3, #32]
 8018e56:	68f8      	ldr	r0, [r7, #12]
 8018e58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e60:	f003 0304 	and.w	r3, r3, #4
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d02e      	beq.n	8018ec6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	699b      	ldr	r3, [r3, #24]
 8018e6c:	693a      	ldr	r2, [r7, #16]
 8018e6e:	4413      	add	r3, r2
 8018e70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018e72:	68ba      	ldr	r2, [r7, #8]
 8018e74:	693b      	ldr	r3, [r7, #16]
 8018e76:	429a      	cmp	r2, r3
 8018e78:	d90e      	bls.n	8018e98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	68ba      	ldr	r2, [r7, #8]
 8018e7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	68fa      	ldr	r2, [r7, #12]
 8018e84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018e86:	4b19      	ldr	r3, [pc, #100]	; (8018eec <prvSwitchTimerLists+0xc0>)
 8018e88:	681a      	ldr	r2, [r3, #0]
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	3304      	adds	r3, #4
 8018e8e:	4619      	mov	r1, r3
 8018e90:	4610      	mov	r0, r2
 8018e92:	f7fd fb12 	bl	80164ba <vListInsert>
 8018e96:	e016      	b.n	8018ec6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018e98:	2300      	movs	r3, #0
 8018e9a:	9300      	str	r3, [sp, #0]
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	693a      	ldr	r2, [r7, #16]
 8018ea0:	2100      	movs	r1, #0
 8018ea2:	68f8      	ldr	r0, [r7, #12]
 8018ea4:	f7ff fd60 	bl	8018968 <xTimerGenericCommand>
 8018ea8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d10a      	bne.n	8018ec6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eb4:	f383 8811 	msr	BASEPRI, r3
 8018eb8:	f3bf 8f6f 	isb	sy
 8018ebc:	f3bf 8f4f 	dsb	sy
 8018ec0:	603b      	str	r3, [r7, #0]
}
 8018ec2:	bf00      	nop
 8018ec4:	e7fe      	b.n	8018ec4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018ec6:	4b09      	ldr	r3, [pc, #36]	; (8018eec <prvSwitchTimerLists+0xc0>)
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d1b1      	bne.n	8018e34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018ed0:	4b06      	ldr	r3, [pc, #24]	; (8018eec <prvSwitchTimerLists+0xc0>)
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018ed6:	4b06      	ldr	r3, [pc, #24]	; (8018ef0 <prvSwitchTimerLists+0xc4>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	4a04      	ldr	r2, [pc, #16]	; (8018eec <prvSwitchTimerLists+0xc0>)
 8018edc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018ede:	4a04      	ldr	r2, [pc, #16]	; (8018ef0 <prvSwitchTimerLists+0xc4>)
 8018ee0:	697b      	ldr	r3, [r7, #20]
 8018ee2:	6013      	str	r3, [r2, #0]
}
 8018ee4:	bf00      	nop
 8018ee6:	3718      	adds	r7, #24
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}
 8018eec:	20001514 	.word	0x20001514
 8018ef0:	20001518 	.word	0x20001518

08018ef4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b082      	sub	sp, #8
 8018ef8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018efa:	f000 f96b 	bl	80191d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018efe:	4b15      	ldr	r3, [pc, #84]	; (8018f54 <prvCheckForValidListAndQueue+0x60>)
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d120      	bne.n	8018f48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018f06:	4814      	ldr	r0, [pc, #80]	; (8018f58 <prvCheckForValidListAndQueue+0x64>)
 8018f08:	f7fd fa86 	bl	8016418 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018f0c:	4813      	ldr	r0, [pc, #76]	; (8018f5c <prvCheckForValidListAndQueue+0x68>)
 8018f0e:	f7fd fa83 	bl	8016418 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018f12:	4b13      	ldr	r3, [pc, #76]	; (8018f60 <prvCheckForValidListAndQueue+0x6c>)
 8018f14:	4a10      	ldr	r2, [pc, #64]	; (8018f58 <prvCheckForValidListAndQueue+0x64>)
 8018f16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018f18:	4b12      	ldr	r3, [pc, #72]	; (8018f64 <prvCheckForValidListAndQueue+0x70>)
 8018f1a:	4a10      	ldr	r2, [pc, #64]	; (8018f5c <prvCheckForValidListAndQueue+0x68>)
 8018f1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018f1e:	2300      	movs	r3, #0
 8018f20:	9300      	str	r3, [sp, #0]
 8018f22:	4b11      	ldr	r3, [pc, #68]	; (8018f68 <prvCheckForValidListAndQueue+0x74>)
 8018f24:	4a11      	ldr	r2, [pc, #68]	; (8018f6c <prvCheckForValidListAndQueue+0x78>)
 8018f26:	2110      	movs	r1, #16
 8018f28:	200a      	movs	r0, #10
 8018f2a:	f7fd fb91 	bl	8016650 <xQueueGenericCreateStatic>
 8018f2e:	4603      	mov	r3, r0
 8018f30:	4a08      	ldr	r2, [pc, #32]	; (8018f54 <prvCheckForValidListAndQueue+0x60>)
 8018f32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018f34:	4b07      	ldr	r3, [pc, #28]	; (8018f54 <prvCheckForValidListAndQueue+0x60>)
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d005      	beq.n	8018f48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018f3c:	4b05      	ldr	r3, [pc, #20]	; (8018f54 <prvCheckForValidListAndQueue+0x60>)
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	490b      	ldr	r1, [pc, #44]	; (8018f70 <prvCheckForValidListAndQueue+0x7c>)
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7fe faa2 	bl	801748c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018f48:	f000 f974 	bl	8019234 <vPortExitCritical>
}
 8018f4c:	bf00      	nop
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	bd80      	pop	{r7, pc}
 8018f52:	bf00      	nop
 8018f54:	2000151c 	.word	0x2000151c
 8018f58:	200014ec 	.word	0x200014ec
 8018f5c:	20001500 	.word	0x20001500
 8018f60:	20001514 	.word	0x20001514
 8018f64:	20001518 	.word	0x20001518
 8018f68:	200015c8 	.word	0x200015c8
 8018f6c:	20001528 	.word	0x20001528
 8018f70:	08022f60 	.word	0x08022f60

08018f74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018f74:	b480      	push	{r7}
 8018f76:	b085      	sub	sp, #20
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	60f8      	str	r0, [r7, #12]
 8018f7c:	60b9      	str	r1, [r7, #8]
 8018f7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	3b04      	subs	r3, #4
 8018f84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	3b04      	subs	r3, #4
 8018f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018f94:	68bb      	ldr	r3, [r7, #8]
 8018f96:	f023 0201 	bic.w	r2, r3, #1
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	3b04      	subs	r3, #4
 8018fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018fa4:	4a0c      	ldr	r2, [pc, #48]	; (8018fd8 <pxPortInitialiseStack+0x64>)
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	3b14      	subs	r3, #20
 8018fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018fb0:	687a      	ldr	r2, [r7, #4]
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	3b04      	subs	r3, #4
 8018fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	f06f 0202 	mvn.w	r2, #2
 8018fc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	3b20      	subs	r3, #32
 8018fc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018fca:	68fb      	ldr	r3, [r7, #12]
}
 8018fcc:	4618      	mov	r0, r3
 8018fce:	3714      	adds	r7, #20
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd6:	4770      	bx	lr
 8018fd8:	08018fdd 	.word	0x08018fdd

08018fdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018fdc:	b480      	push	{r7}
 8018fde:	b085      	sub	sp, #20
 8018fe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018fe6:	4b12      	ldr	r3, [pc, #72]	; (8019030 <prvTaskExitError+0x54>)
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018fee:	d00a      	beq.n	8019006 <prvTaskExitError+0x2a>
	__asm volatile
 8018ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ff4:	f383 8811 	msr	BASEPRI, r3
 8018ff8:	f3bf 8f6f 	isb	sy
 8018ffc:	f3bf 8f4f 	dsb	sy
 8019000:	60fb      	str	r3, [r7, #12]
}
 8019002:	bf00      	nop
 8019004:	e7fe      	b.n	8019004 <prvTaskExitError+0x28>
	__asm volatile
 8019006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801900a:	f383 8811 	msr	BASEPRI, r3
 801900e:	f3bf 8f6f 	isb	sy
 8019012:	f3bf 8f4f 	dsb	sy
 8019016:	60bb      	str	r3, [r7, #8]
}
 8019018:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801901a:	bf00      	nop
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d0fc      	beq.n	801901c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019022:	bf00      	nop
 8019024:	bf00      	nop
 8019026:	3714      	adds	r7, #20
 8019028:	46bd      	mov	sp, r7
 801902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801902e:	4770      	bx	lr
 8019030:	20000190 	.word	0x20000190
	...

08019040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019040:	4b07      	ldr	r3, [pc, #28]	; (8019060 <pxCurrentTCBConst2>)
 8019042:	6819      	ldr	r1, [r3, #0]
 8019044:	6808      	ldr	r0, [r1, #0]
 8019046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801904a:	f380 8809 	msr	PSP, r0
 801904e:	f3bf 8f6f 	isb	sy
 8019052:	f04f 0000 	mov.w	r0, #0
 8019056:	f380 8811 	msr	BASEPRI, r0
 801905a:	4770      	bx	lr
 801905c:	f3af 8000 	nop.w

08019060 <pxCurrentTCBConst2>:
 8019060:	20000fec 	.word	0x20000fec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019064:	bf00      	nop
 8019066:	bf00      	nop

08019068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019068:	4808      	ldr	r0, [pc, #32]	; (801908c <prvPortStartFirstTask+0x24>)
 801906a:	6800      	ldr	r0, [r0, #0]
 801906c:	6800      	ldr	r0, [r0, #0]
 801906e:	f380 8808 	msr	MSP, r0
 8019072:	f04f 0000 	mov.w	r0, #0
 8019076:	f380 8814 	msr	CONTROL, r0
 801907a:	b662      	cpsie	i
 801907c:	b661      	cpsie	f
 801907e:	f3bf 8f4f 	dsb	sy
 8019082:	f3bf 8f6f 	isb	sy
 8019086:	df00      	svc	0
 8019088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801908a:	bf00      	nop
 801908c:	e000ed08 	.word	0xe000ed08

08019090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b086      	sub	sp, #24
 8019094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019096:	4b46      	ldr	r3, [pc, #280]	; (80191b0 <xPortStartScheduler+0x120>)
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	4a46      	ldr	r2, [pc, #280]	; (80191b4 <xPortStartScheduler+0x124>)
 801909c:	4293      	cmp	r3, r2
 801909e:	d10a      	bne.n	80190b6 <xPortStartScheduler+0x26>
	__asm volatile
 80190a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190a4:	f383 8811 	msr	BASEPRI, r3
 80190a8:	f3bf 8f6f 	isb	sy
 80190ac:	f3bf 8f4f 	dsb	sy
 80190b0:	613b      	str	r3, [r7, #16]
}
 80190b2:	bf00      	nop
 80190b4:	e7fe      	b.n	80190b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80190b6:	4b3e      	ldr	r3, [pc, #248]	; (80191b0 <xPortStartScheduler+0x120>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	4a3f      	ldr	r2, [pc, #252]	; (80191b8 <xPortStartScheduler+0x128>)
 80190bc:	4293      	cmp	r3, r2
 80190be:	d10a      	bne.n	80190d6 <xPortStartScheduler+0x46>
	__asm volatile
 80190c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190c4:	f383 8811 	msr	BASEPRI, r3
 80190c8:	f3bf 8f6f 	isb	sy
 80190cc:	f3bf 8f4f 	dsb	sy
 80190d0:	60fb      	str	r3, [r7, #12]
}
 80190d2:	bf00      	nop
 80190d4:	e7fe      	b.n	80190d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80190d6:	4b39      	ldr	r3, [pc, #228]	; (80191bc <xPortStartScheduler+0x12c>)
 80190d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80190da:	697b      	ldr	r3, [r7, #20]
 80190dc:	781b      	ldrb	r3, [r3, #0]
 80190de:	b2db      	uxtb	r3, r3
 80190e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80190e2:	697b      	ldr	r3, [r7, #20]
 80190e4:	22ff      	movs	r2, #255	; 0xff
 80190e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80190e8:	697b      	ldr	r3, [r7, #20]
 80190ea:	781b      	ldrb	r3, [r3, #0]
 80190ec:	b2db      	uxtb	r3, r3
 80190ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80190f0:	78fb      	ldrb	r3, [r7, #3]
 80190f2:	b2db      	uxtb	r3, r3
 80190f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80190f8:	b2da      	uxtb	r2, r3
 80190fa:	4b31      	ldr	r3, [pc, #196]	; (80191c0 <xPortStartScheduler+0x130>)
 80190fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80190fe:	4b31      	ldr	r3, [pc, #196]	; (80191c4 <xPortStartScheduler+0x134>)
 8019100:	2207      	movs	r2, #7
 8019102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019104:	e009      	b.n	801911a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019106:	4b2f      	ldr	r3, [pc, #188]	; (80191c4 <xPortStartScheduler+0x134>)
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	3b01      	subs	r3, #1
 801910c:	4a2d      	ldr	r2, [pc, #180]	; (80191c4 <xPortStartScheduler+0x134>)
 801910e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019110:	78fb      	ldrb	r3, [r7, #3]
 8019112:	b2db      	uxtb	r3, r3
 8019114:	005b      	lsls	r3, r3, #1
 8019116:	b2db      	uxtb	r3, r3
 8019118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801911a:	78fb      	ldrb	r3, [r7, #3]
 801911c:	b2db      	uxtb	r3, r3
 801911e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019122:	2b80      	cmp	r3, #128	; 0x80
 8019124:	d0ef      	beq.n	8019106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019126:	4b27      	ldr	r3, [pc, #156]	; (80191c4 <xPortStartScheduler+0x134>)
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	f1c3 0307 	rsb	r3, r3, #7
 801912e:	2b04      	cmp	r3, #4
 8019130:	d00a      	beq.n	8019148 <xPortStartScheduler+0xb8>
	__asm volatile
 8019132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019136:	f383 8811 	msr	BASEPRI, r3
 801913a:	f3bf 8f6f 	isb	sy
 801913e:	f3bf 8f4f 	dsb	sy
 8019142:	60bb      	str	r3, [r7, #8]
}
 8019144:	bf00      	nop
 8019146:	e7fe      	b.n	8019146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019148:	4b1e      	ldr	r3, [pc, #120]	; (80191c4 <xPortStartScheduler+0x134>)
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	021b      	lsls	r3, r3, #8
 801914e:	4a1d      	ldr	r2, [pc, #116]	; (80191c4 <xPortStartScheduler+0x134>)
 8019150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019152:	4b1c      	ldr	r3, [pc, #112]	; (80191c4 <xPortStartScheduler+0x134>)
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801915a:	4a1a      	ldr	r2, [pc, #104]	; (80191c4 <xPortStartScheduler+0x134>)
 801915c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	b2da      	uxtb	r2, r3
 8019162:	697b      	ldr	r3, [r7, #20]
 8019164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019166:	4b18      	ldr	r3, [pc, #96]	; (80191c8 <xPortStartScheduler+0x138>)
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	4a17      	ldr	r2, [pc, #92]	; (80191c8 <xPortStartScheduler+0x138>)
 801916c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019172:	4b15      	ldr	r3, [pc, #84]	; (80191c8 <xPortStartScheduler+0x138>)
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	4a14      	ldr	r2, [pc, #80]	; (80191c8 <xPortStartScheduler+0x138>)
 8019178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801917c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801917e:	f000 f8dd 	bl	801933c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019182:	4b12      	ldr	r3, [pc, #72]	; (80191cc <xPortStartScheduler+0x13c>)
 8019184:	2200      	movs	r2, #0
 8019186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019188:	f000 f8fc 	bl	8019384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801918c:	4b10      	ldr	r3, [pc, #64]	; (80191d0 <xPortStartScheduler+0x140>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	4a0f      	ldr	r2, [pc, #60]	; (80191d0 <xPortStartScheduler+0x140>)
 8019192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019198:	f7ff ff66 	bl	8019068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801919c:	f7fe ff38 	bl	8018010 <vTaskSwitchContext>
	prvTaskExitError();
 80191a0:	f7ff ff1c 	bl	8018fdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80191a4:	2300      	movs	r3, #0
}
 80191a6:	4618      	mov	r0, r3
 80191a8:	3718      	adds	r7, #24
 80191aa:	46bd      	mov	sp, r7
 80191ac:	bd80      	pop	{r7, pc}
 80191ae:	bf00      	nop
 80191b0:	e000ed00 	.word	0xe000ed00
 80191b4:	410fc271 	.word	0x410fc271
 80191b8:	410fc270 	.word	0x410fc270
 80191bc:	e000e400 	.word	0xe000e400
 80191c0:	20001618 	.word	0x20001618
 80191c4:	2000161c 	.word	0x2000161c
 80191c8:	e000ed20 	.word	0xe000ed20
 80191cc:	20000190 	.word	0x20000190
 80191d0:	e000ef34 	.word	0xe000ef34

080191d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80191d4:	b480      	push	{r7}
 80191d6:	b083      	sub	sp, #12
 80191d8:	af00      	add	r7, sp, #0
	__asm volatile
 80191da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191de:	f383 8811 	msr	BASEPRI, r3
 80191e2:	f3bf 8f6f 	isb	sy
 80191e6:	f3bf 8f4f 	dsb	sy
 80191ea:	607b      	str	r3, [r7, #4]
}
 80191ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80191ee:	4b0f      	ldr	r3, [pc, #60]	; (801922c <vPortEnterCritical+0x58>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	3301      	adds	r3, #1
 80191f4:	4a0d      	ldr	r2, [pc, #52]	; (801922c <vPortEnterCritical+0x58>)
 80191f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80191f8:	4b0c      	ldr	r3, [pc, #48]	; (801922c <vPortEnterCritical+0x58>)
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	2b01      	cmp	r3, #1
 80191fe:	d10f      	bne.n	8019220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019200:	4b0b      	ldr	r3, [pc, #44]	; (8019230 <vPortEnterCritical+0x5c>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	b2db      	uxtb	r3, r3
 8019206:	2b00      	cmp	r3, #0
 8019208:	d00a      	beq.n	8019220 <vPortEnterCritical+0x4c>
	__asm volatile
 801920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801920e:	f383 8811 	msr	BASEPRI, r3
 8019212:	f3bf 8f6f 	isb	sy
 8019216:	f3bf 8f4f 	dsb	sy
 801921a:	603b      	str	r3, [r7, #0]
}
 801921c:	bf00      	nop
 801921e:	e7fe      	b.n	801921e <vPortEnterCritical+0x4a>
	}
}
 8019220:	bf00      	nop
 8019222:	370c      	adds	r7, #12
 8019224:	46bd      	mov	sp, r7
 8019226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801922a:	4770      	bx	lr
 801922c:	20000190 	.word	0x20000190
 8019230:	e000ed04 	.word	0xe000ed04

08019234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019234:	b480      	push	{r7}
 8019236:	b083      	sub	sp, #12
 8019238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801923a:	4b12      	ldr	r3, [pc, #72]	; (8019284 <vPortExitCritical+0x50>)
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d10a      	bne.n	8019258 <vPortExitCritical+0x24>
	__asm volatile
 8019242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019246:	f383 8811 	msr	BASEPRI, r3
 801924a:	f3bf 8f6f 	isb	sy
 801924e:	f3bf 8f4f 	dsb	sy
 8019252:	607b      	str	r3, [r7, #4]
}
 8019254:	bf00      	nop
 8019256:	e7fe      	b.n	8019256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019258:	4b0a      	ldr	r3, [pc, #40]	; (8019284 <vPortExitCritical+0x50>)
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	3b01      	subs	r3, #1
 801925e:	4a09      	ldr	r2, [pc, #36]	; (8019284 <vPortExitCritical+0x50>)
 8019260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019262:	4b08      	ldr	r3, [pc, #32]	; (8019284 <vPortExitCritical+0x50>)
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d105      	bne.n	8019276 <vPortExitCritical+0x42>
 801926a:	2300      	movs	r3, #0
 801926c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801926e:	683b      	ldr	r3, [r7, #0]
 8019270:	f383 8811 	msr	BASEPRI, r3
}
 8019274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019276:	bf00      	nop
 8019278:	370c      	adds	r7, #12
 801927a:	46bd      	mov	sp, r7
 801927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019280:	4770      	bx	lr
 8019282:	bf00      	nop
 8019284:	20000190 	.word	0x20000190
	...

08019290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019290:	f3ef 8009 	mrs	r0, PSP
 8019294:	f3bf 8f6f 	isb	sy
 8019298:	4b15      	ldr	r3, [pc, #84]	; (80192f0 <pxCurrentTCBConst>)
 801929a:	681a      	ldr	r2, [r3, #0]
 801929c:	f01e 0f10 	tst.w	lr, #16
 80192a0:	bf08      	it	eq
 80192a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80192a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192aa:	6010      	str	r0, [r2, #0]
 80192ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80192b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80192b4:	f380 8811 	msr	BASEPRI, r0
 80192b8:	f3bf 8f4f 	dsb	sy
 80192bc:	f3bf 8f6f 	isb	sy
 80192c0:	f7fe fea6 	bl	8018010 <vTaskSwitchContext>
 80192c4:	f04f 0000 	mov.w	r0, #0
 80192c8:	f380 8811 	msr	BASEPRI, r0
 80192cc:	bc09      	pop	{r0, r3}
 80192ce:	6819      	ldr	r1, [r3, #0]
 80192d0:	6808      	ldr	r0, [r1, #0]
 80192d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192d6:	f01e 0f10 	tst.w	lr, #16
 80192da:	bf08      	it	eq
 80192dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80192e0:	f380 8809 	msr	PSP, r0
 80192e4:	f3bf 8f6f 	isb	sy
 80192e8:	4770      	bx	lr
 80192ea:	bf00      	nop
 80192ec:	f3af 8000 	nop.w

080192f0 <pxCurrentTCBConst>:
 80192f0:	20000fec 	.word	0x20000fec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80192f4:	bf00      	nop
 80192f6:	bf00      	nop

080192f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b082      	sub	sp, #8
 80192fc:	af00      	add	r7, sp, #0
	__asm volatile
 80192fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019302:	f383 8811 	msr	BASEPRI, r3
 8019306:	f3bf 8f6f 	isb	sy
 801930a:	f3bf 8f4f 	dsb	sy
 801930e:	607b      	str	r3, [r7, #4]
}
 8019310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019312:	f7fe fdc3 	bl	8017e9c <xTaskIncrementTick>
 8019316:	4603      	mov	r3, r0
 8019318:	2b00      	cmp	r3, #0
 801931a:	d003      	beq.n	8019324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801931c:	4b06      	ldr	r3, [pc, #24]	; (8019338 <xPortSysTickHandler+0x40>)
 801931e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019322:	601a      	str	r2, [r3, #0]
 8019324:	2300      	movs	r3, #0
 8019326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019328:	683b      	ldr	r3, [r7, #0]
 801932a:	f383 8811 	msr	BASEPRI, r3
}
 801932e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019330:	bf00      	nop
 8019332:	3708      	adds	r7, #8
 8019334:	46bd      	mov	sp, r7
 8019336:	bd80      	pop	{r7, pc}
 8019338:	e000ed04 	.word	0xe000ed04

0801933c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801933c:	b480      	push	{r7}
 801933e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019340:	4b0b      	ldr	r3, [pc, #44]	; (8019370 <vPortSetupTimerInterrupt+0x34>)
 8019342:	2200      	movs	r2, #0
 8019344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019346:	4b0b      	ldr	r3, [pc, #44]	; (8019374 <vPortSetupTimerInterrupt+0x38>)
 8019348:	2200      	movs	r2, #0
 801934a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801934c:	4b0a      	ldr	r3, [pc, #40]	; (8019378 <vPortSetupTimerInterrupt+0x3c>)
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	4a0a      	ldr	r2, [pc, #40]	; (801937c <vPortSetupTimerInterrupt+0x40>)
 8019352:	fba2 2303 	umull	r2, r3, r2, r3
 8019356:	099b      	lsrs	r3, r3, #6
 8019358:	4a09      	ldr	r2, [pc, #36]	; (8019380 <vPortSetupTimerInterrupt+0x44>)
 801935a:	3b01      	subs	r3, #1
 801935c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801935e:	4b04      	ldr	r3, [pc, #16]	; (8019370 <vPortSetupTimerInterrupt+0x34>)
 8019360:	2207      	movs	r2, #7
 8019362:	601a      	str	r2, [r3, #0]
}
 8019364:	bf00      	nop
 8019366:	46bd      	mov	sp, r7
 8019368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936c:	4770      	bx	lr
 801936e:	bf00      	nop
 8019370:	e000e010 	.word	0xe000e010
 8019374:	e000e018 	.word	0xe000e018
 8019378:	20000004 	.word	0x20000004
 801937c:	10624dd3 	.word	0x10624dd3
 8019380:	e000e014 	.word	0xe000e014

08019384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019394 <vPortEnableVFP+0x10>
 8019388:	6801      	ldr	r1, [r0, #0]
 801938a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801938e:	6001      	str	r1, [r0, #0]
 8019390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019392:	bf00      	nop
 8019394:	e000ed88 	.word	0xe000ed88

08019398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019398:	b480      	push	{r7}
 801939a:	b085      	sub	sp, #20
 801939c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801939e:	f3ef 8305 	mrs	r3, IPSR
 80193a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	2b0f      	cmp	r3, #15
 80193a8:	d914      	bls.n	80193d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80193aa:	4a17      	ldr	r2, [pc, #92]	; (8019408 <vPortValidateInterruptPriority+0x70>)
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	4413      	add	r3, r2
 80193b0:	781b      	ldrb	r3, [r3, #0]
 80193b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80193b4:	4b15      	ldr	r3, [pc, #84]	; (801940c <vPortValidateInterruptPriority+0x74>)
 80193b6:	781b      	ldrb	r3, [r3, #0]
 80193b8:	7afa      	ldrb	r2, [r7, #11]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d20a      	bcs.n	80193d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80193be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193c2:	f383 8811 	msr	BASEPRI, r3
 80193c6:	f3bf 8f6f 	isb	sy
 80193ca:	f3bf 8f4f 	dsb	sy
 80193ce:	607b      	str	r3, [r7, #4]
}
 80193d0:	bf00      	nop
 80193d2:	e7fe      	b.n	80193d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80193d4:	4b0e      	ldr	r3, [pc, #56]	; (8019410 <vPortValidateInterruptPriority+0x78>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80193dc:	4b0d      	ldr	r3, [pc, #52]	; (8019414 <vPortValidateInterruptPriority+0x7c>)
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	429a      	cmp	r2, r3
 80193e2:	d90a      	bls.n	80193fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80193e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193e8:	f383 8811 	msr	BASEPRI, r3
 80193ec:	f3bf 8f6f 	isb	sy
 80193f0:	f3bf 8f4f 	dsb	sy
 80193f4:	603b      	str	r3, [r7, #0]
}
 80193f6:	bf00      	nop
 80193f8:	e7fe      	b.n	80193f8 <vPortValidateInterruptPriority+0x60>
	}
 80193fa:	bf00      	nop
 80193fc:	3714      	adds	r7, #20
 80193fe:	46bd      	mov	sp, r7
 8019400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019404:	4770      	bx	lr
 8019406:	bf00      	nop
 8019408:	e000e3f0 	.word	0xe000e3f0
 801940c:	20001618 	.word	0x20001618
 8019410:	e000ed0c 	.word	0xe000ed0c
 8019414:	2000161c 	.word	0x2000161c

08019418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b08a      	sub	sp, #40	; 0x28
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019420:	2300      	movs	r3, #0
 8019422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019424:	f7fe fc7e 	bl	8017d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019428:	4b5b      	ldr	r3, [pc, #364]	; (8019598 <pvPortMalloc+0x180>)
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d101      	bne.n	8019434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019430:	f000 f920 	bl	8019674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019434:	4b59      	ldr	r3, [pc, #356]	; (801959c <pvPortMalloc+0x184>)
 8019436:	681a      	ldr	r2, [r3, #0]
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	4013      	ands	r3, r2
 801943c:	2b00      	cmp	r3, #0
 801943e:	f040 8093 	bne.w	8019568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d01d      	beq.n	8019484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019448:	2208      	movs	r2, #8
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	4413      	add	r3, r2
 801944e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	f003 0307 	and.w	r3, r3, #7
 8019456:	2b00      	cmp	r3, #0
 8019458:	d014      	beq.n	8019484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	f023 0307 	bic.w	r3, r3, #7
 8019460:	3308      	adds	r3, #8
 8019462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	f003 0307 	and.w	r3, r3, #7
 801946a:	2b00      	cmp	r3, #0
 801946c:	d00a      	beq.n	8019484 <pvPortMalloc+0x6c>
	__asm volatile
 801946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019472:	f383 8811 	msr	BASEPRI, r3
 8019476:	f3bf 8f6f 	isb	sy
 801947a:	f3bf 8f4f 	dsb	sy
 801947e:	617b      	str	r3, [r7, #20]
}
 8019480:	bf00      	nop
 8019482:	e7fe      	b.n	8019482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d06e      	beq.n	8019568 <pvPortMalloc+0x150>
 801948a:	4b45      	ldr	r3, [pc, #276]	; (80195a0 <pvPortMalloc+0x188>)
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	687a      	ldr	r2, [r7, #4]
 8019490:	429a      	cmp	r2, r3
 8019492:	d869      	bhi.n	8019568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019494:	4b43      	ldr	r3, [pc, #268]	; (80195a4 <pvPortMalloc+0x18c>)
 8019496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019498:	4b42      	ldr	r3, [pc, #264]	; (80195a4 <pvPortMalloc+0x18c>)
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801949e:	e004      	b.n	80194aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80194a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80194a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80194aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ac:	685b      	ldr	r3, [r3, #4]
 80194ae:	687a      	ldr	r2, [r7, #4]
 80194b0:	429a      	cmp	r2, r3
 80194b2:	d903      	bls.n	80194bc <pvPortMalloc+0xa4>
 80194b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d1f1      	bne.n	80194a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80194bc:	4b36      	ldr	r3, [pc, #216]	; (8019598 <pvPortMalloc+0x180>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194c2:	429a      	cmp	r2, r3
 80194c4:	d050      	beq.n	8019568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80194c6:	6a3b      	ldr	r3, [r7, #32]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	2208      	movs	r2, #8
 80194cc:	4413      	add	r3, r2
 80194ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80194d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194d2:	681a      	ldr	r2, [r3, #0]
 80194d4:	6a3b      	ldr	r3, [r7, #32]
 80194d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80194d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194da:	685a      	ldr	r2, [r3, #4]
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	1ad2      	subs	r2, r2, r3
 80194e0:	2308      	movs	r3, #8
 80194e2:	005b      	lsls	r3, r3, #1
 80194e4:	429a      	cmp	r2, r3
 80194e6:	d91f      	bls.n	8019528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80194e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	4413      	add	r3, r2
 80194ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80194f0:	69bb      	ldr	r3, [r7, #24]
 80194f2:	f003 0307 	and.w	r3, r3, #7
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d00a      	beq.n	8019510 <pvPortMalloc+0xf8>
	__asm volatile
 80194fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194fe:	f383 8811 	msr	BASEPRI, r3
 8019502:	f3bf 8f6f 	isb	sy
 8019506:	f3bf 8f4f 	dsb	sy
 801950a:	613b      	str	r3, [r7, #16]
}
 801950c:	bf00      	nop
 801950e:	e7fe      	b.n	801950e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019512:	685a      	ldr	r2, [r3, #4]
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	1ad2      	subs	r2, r2, r3
 8019518:	69bb      	ldr	r3, [r7, #24]
 801951a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801951e:	687a      	ldr	r2, [r7, #4]
 8019520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019522:	69b8      	ldr	r0, [r7, #24]
 8019524:	f000 f908 	bl	8019738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019528:	4b1d      	ldr	r3, [pc, #116]	; (80195a0 <pvPortMalloc+0x188>)
 801952a:	681a      	ldr	r2, [r3, #0]
 801952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801952e:	685b      	ldr	r3, [r3, #4]
 8019530:	1ad3      	subs	r3, r2, r3
 8019532:	4a1b      	ldr	r2, [pc, #108]	; (80195a0 <pvPortMalloc+0x188>)
 8019534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019536:	4b1a      	ldr	r3, [pc, #104]	; (80195a0 <pvPortMalloc+0x188>)
 8019538:	681a      	ldr	r2, [r3, #0]
 801953a:	4b1b      	ldr	r3, [pc, #108]	; (80195a8 <pvPortMalloc+0x190>)
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	429a      	cmp	r2, r3
 8019540:	d203      	bcs.n	801954a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019542:	4b17      	ldr	r3, [pc, #92]	; (80195a0 <pvPortMalloc+0x188>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	4a18      	ldr	r2, [pc, #96]	; (80195a8 <pvPortMalloc+0x190>)
 8019548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801954c:	685a      	ldr	r2, [r3, #4]
 801954e:	4b13      	ldr	r3, [pc, #76]	; (801959c <pvPortMalloc+0x184>)
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	431a      	orrs	r2, r3
 8019554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801955a:	2200      	movs	r2, #0
 801955c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801955e:	4b13      	ldr	r3, [pc, #76]	; (80195ac <pvPortMalloc+0x194>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	3301      	adds	r3, #1
 8019564:	4a11      	ldr	r2, [pc, #68]	; (80195ac <pvPortMalloc+0x194>)
 8019566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019568:	f7fe fbea 	bl	8017d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801956c:	69fb      	ldr	r3, [r7, #28]
 801956e:	f003 0307 	and.w	r3, r3, #7
 8019572:	2b00      	cmp	r3, #0
 8019574:	d00a      	beq.n	801958c <pvPortMalloc+0x174>
	__asm volatile
 8019576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801957a:	f383 8811 	msr	BASEPRI, r3
 801957e:	f3bf 8f6f 	isb	sy
 8019582:	f3bf 8f4f 	dsb	sy
 8019586:	60fb      	str	r3, [r7, #12]
}
 8019588:	bf00      	nop
 801958a:	e7fe      	b.n	801958a <pvPortMalloc+0x172>
	return pvReturn;
 801958c:	69fb      	ldr	r3, [r7, #28]
}
 801958e:	4618      	mov	r0, r3
 8019590:	3728      	adds	r7, #40	; 0x28
 8019592:	46bd      	mov	sp, r7
 8019594:	bd80      	pop	{r7, pc}
 8019596:	bf00      	nop
 8019598:	20005c78 	.word	0x20005c78
 801959c:	20005c8c 	.word	0x20005c8c
 80195a0:	20005c7c 	.word	0x20005c7c
 80195a4:	20005c70 	.word	0x20005c70
 80195a8:	20005c80 	.word	0x20005c80
 80195ac:	20005c84 	.word	0x20005c84

080195b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80195b0:	b580      	push	{r7, lr}
 80195b2:	b086      	sub	sp, #24
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d04d      	beq.n	801965e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80195c2:	2308      	movs	r3, #8
 80195c4:	425b      	negs	r3, r3
 80195c6:	697a      	ldr	r2, [r7, #20]
 80195c8:	4413      	add	r3, r2
 80195ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80195cc:	697b      	ldr	r3, [r7, #20]
 80195ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80195d0:	693b      	ldr	r3, [r7, #16]
 80195d2:	685a      	ldr	r2, [r3, #4]
 80195d4:	4b24      	ldr	r3, [pc, #144]	; (8019668 <vPortFree+0xb8>)
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	4013      	ands	r3, r2
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d10a      	bne.n	80195f4 <vPortFree+0x44>
	__asm volatile
 80195de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e2:	f383 8811 	msr	BASEPRI, r3
 80195e6:	f3bf 8f6f 	isb	sy
 80195ea:	f3bf 8f4f 	dsb	sy
 80195ee:	60fb      	str	r3, [r7, #12]
}
 80195f0:	bf00      	nop
 80195f2:	e7fe      	b.n	80195f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80195f4:	693b      	ldr	r3, [r7, #16]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d00a      	beq.n	8019612 <vPortFree+0x62>
	__asm volatile
 80195fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019600:	f383 8811 	msr	BASEPRI, r3
 8019604:	f3bf 8f6f 	isb	sy
 8019608:	f3bf 8f4f 	dsb	sy
 801960c:	60bb      	str	r3, [r7, #8]
}
 801960e:	bf00      	nop
 8019610:	e7fe      	b.n	8019610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019612:	693b      	ldr	r3, [r7, #16]
 8019614:	685a      	ldr	r2, [r3, #4]
 8019616:	4b14      	ldr	r3, [pc, #80]	; (8019668 <vPortFree+0xb8>)
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	4013      	ands	r3, r2
 801961c:	2b00      	cmp	r3, #0
 801961e:	d01e      	beq.n	801965e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019620:	693b      	ldr	r3, [r7, #16]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	2b00      	cmp	r3, #0
 8019626:	d11a      	bne.n	801965e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019628:	693b      	ldr	r3, [r7, #16]
 801962a:	685a      	ldr	r2, [r3, #4]
 801962c:	4b0e      	ldr	r3, [pc, #56]	; (8019668 <vPortFree+0xb8>)
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	43db      	mvns	r3, r3
 8019632:	401a      	ands	r2, r3
 8019634:	693b      	ldr	r3, [r7, #16]
 8019636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019638:	f7fe fb74 	bl	8017d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801963c:	693b      	ldr	r3, [r7, #16]
 801963e:	685a      	ldr	r2, [r3, #4]
 8019640:	4b0a      	ldr	r3, [pc, #40]	; (801966c <vPortFree+0xbc>)
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	4413      	add	r3, r2
 8019646:	4a09      	ldr	r2, [pc, #36]	; (801966c <vPortFree+0xbc>)
 8019648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801964a:	6938      	ldr	r0, [r7, #16]
 801964c:	f000 f874 	bl	8019738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019650:	4b07      	ldr	r3, [pc, #28]	; (8019670 <vPortFree+0xc0>)
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	3301      	adds	r3, #1
 8019656:	4a06      	ldr	r2, [pc, #24]	; (8019670 <vPortFree+0xc0>)
 8019658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801965a:	f7fe fb71 	bl	8017d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801965e:	bf00      	nop
 8019660:	3718      	adds	r7, #24
 8019662:	46bd      	mov	sp, r7
 8019664:	bd80      	pop	{r7, pc}
 8019666:	bf00      	nop
 8019668:	20005c8c 	.word	0x20005c8c
 801966c:	20005c7c 	.word	0x20005c7c
 8019670:	20005c88 	.word	0x20005c88

08019674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019674:	b480      	push	{r7}
 8019676:	b085      	sub	sp, #20
 8019678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801967a:	f244 6350 	movw	r3, #18000	; 0x4650
 801967e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019680:	4b27      	ldr	r3, [pc, #156]	; (8019720 <prvHeapInit+0xac>)
 8019682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	f003 0307 	and.w	r3, r3, #7
 801968a:	2b00      	cmp	r3, #0
 801968c:	d00c      	beq.n	80196a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	3307      	adds	r3, #7
 8019692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	f023 0307 	bic.w	r3, r3, #7
 801969a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801969c:	68ba      	ldr	r2, [r7, #8]
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	1ad3      	subs	r3, r2, r3
 80196a2:	4a1f      	ldr	r2, [pc, #124]	; (8019720 <prvHeapInit+0xac>)
 80196a4:	4413      	add	r3, r2
 80196a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80196ac:	4a1d      	ldr	r2, [pc, #116]	; (8019724 <prvHeapInit+0xb0>)
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80196b2:	4b1c      	ldr	r3, [pc, #112]	; (8019724 <prvHeapInit+0xb0>)
 80196b4:	2200      	movs	r2, #0
 80196b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	68ba      	ldr	r2, [r7, #8]
 80196bc:	4413      	add	r3, r2
 80196be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80196c0:	2208      	movs	r2, #8
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	1a9b      	subs	r3, r3, r2
 80196c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	f023 0307 	bic.w	r3, r3, #7
 80196ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	4a15      	ldr	r2, [pc, #84]	; (8019728 <prvHeapInit+0xb4>)
 80196d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80196d6:	4b14      	ldr	r3, [pc, #80]	; (8019728 <prvHeapInit+0xb4>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	2200      	movs	r2, #0
 80196dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80196de:	4b12      	ldr	r3, [pc, #72]	; (8019728 <prvHeapInit+0xb4>)
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	2200      	movs	r2, #0
 80196e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80196ea:	683b      	ldr	r3, [r7, #0]
 80196ec:	68fa      	ldr	r2, [r7, #12]
 80196ee:	1ad2      	subs	r2, r2, r3
 80196f0:	683b      	ldr	r3, [r7, #0]
 80196f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80196f4:	4b0c      	ldr	r3, [pc, #48]	; (8019728 <prvHeapInit+0xb4>)
 80196f6:	681a      	ldr	r2, [r3, #0]
 80196f8:	683b      	ldr	r3, [r7, #0]
 80196fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80196fc:	683b      	ldr	r3, [r7, #0]
 80196fe:	685b      	ldr	r3, [r3, #4]
 8019700:	4a0a      	ldr	r2, [pc, #40]	; (801972c <prvHeapInit+0xb8>)
 8019702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019704:	683b      	ldr	r3, [r7, #0]
 8019706:	685b      	ldr	r3, [r3, #4]
 8019708:	4a09      	ldr	r2, [pc, #36]	; (8019730 <prvHeapInit+0xbc>)
 801970a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801970c:	4b09      	ldr	r3, [pc, #36]	; (8019734 <prvHeapInit+0xc0>)
 801970e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019712:	601a      	str	r2, [r3, #0]
}
 8019714:	bf00      	nop
 8019716:	3714      	adds	r7, #20
 8019718:	46bd      	mov	sp, r7
 801971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971e:	4770      	bx	lr
 8019720:	20001620 	.word	0x20001620
 8019724:	20005c70 	.word	0x20005c70
 8019728:	20005c78 	.word	0x20005c78
 801972c:	20005c80 	.word	0x20005c80
 8019730:	20005c7c 	.word	0x20005c7c
 8019734:	20005c8c 	.word	0x20005c8c

08019738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019738:	b480      	push	{r7}
 801973a:	b085      	sub	sp, #20
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019740:	4b28      	ldr	r3, [pc, #160]	; (80197e4 <prvInsertBlockIntoFreeList+0xac>)
 8019742:	60fb      	str	r3, [r7, #12]
 8019744:	e002      	b.n	801974c <prvInsertBlockIntoFreeList+0x14>
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	60fb      	str	r3, [r7, #12]
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	687a      	ldr	r2, [r7, #4]
 8019752:	429a      	cmp	r2, r3
 8019754:	d8f7      	bhi.n	8019746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	685b      	ldr	r3, [r3, #4]
 801975e:	68ba      	ldr	r2, [r7, #8]
 8019760:	4413      	add	r3, r2
 8019762:	687a      	ldr	r2, [r7, #4]
 8019764:	429a      	cmp	r2, r3
 8019766:	d108      	bne.n	801977a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	685a      	ldr	r2, [r3, #4]
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	685b      	ldr	r3, [r3, #4]
 8019770:	441a      	add	r2, r3
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019776:	68fb      	ldr	r3, [r7, #12]
 8019778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	685b      	ldr	r3, [r3, #4]
 8019782:	68ba      	ldr	r2, [r7, #8]
 8019784:	441a      	add	r2, r3
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	429a      	cmp	r2, r3
 801978c:	d118      	bne.n	80197c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	681a      	ldr	r2, [r3, #0]
 8019792:	4b15      	ldr	r3, [pc, #84]	; (80197e8 <prvInsertBlockIntoFreeList+0xb0>)
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	429a      	cmp	r2, r3
 8019798:	d00d      	beq.n	80197b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	685a      	ldr	r2, [r3, #4]
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	685b      	ldr	r3, [r3, #4]
 80197a4:	441a      	add	r2, r3
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	681a      	ldr	r2, [r3, #0]
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	601a      	str	r2, [r3, #0]
 80197b4:	e008      	b.n	80197c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80197b6:	4b0c      	ldr	r3, [pc, #48]	; (80197e8 <prvInsertBlockIntoFreeList+0xb0>)
 80197b8:	681a      	ldr	r2, [r3, #0]
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	601a      	str	r2, [r3, #0]
 80197be:	e003      	b.n	80197c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	681a      	ldr	r2, [r3, #0]
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80197c8:	68fa      	ldr	r2, [r7, #12]
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	429a      	cmp	r2, r3
 80197ce:	d002      	beq.n	80197d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	687a      	ldr	r2, [r7, #4]
 80197d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80197d6:	bf00      	nop
 80197d8:	3714      	adds	r7, #20
 80197da:	46bd      	mov	sp, r7
 80197dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197e0:	4770      	bx	lr
 80197e2:	bf00      	nop
 80197e4:	20005c70 	.word	0x20005c70
 80197e8:	20005c78 	.word	0x20005c78

080197ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80197f0:	2200      	movs	r2, #0
 80197f2:	4912      	ldr	r1, [pc, #72]	; (801983c <MX_USB_DEVICE_Init+0x50>)
 80197f4:	4812      	ldr	r0, [pc, #72]	; (8019840 <MX_USB_DEVICE_Init+0x54>)
 80197f6:	f7f8 fadb 	bl	8011db0 <USBD_Init>
 80197fa:	4603      	mov	r3, r0
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d001      	beq.n	8019804 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019800:	f7e9 fabe 	bl	8002d80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019804:	490f      	ldr	r1, [pc, #60]	; (8019844 <MX_USB_DEVICE_Init+0x58>)
 8019806:	480e      	ldr	r0, [pc, #56]	; (8019840 <MX_USB_DEVICE_Init+0x54>)
 8019808:	f7f8 fb02 	bl	8011e10 <USBD_RegisterClass>
 801980c:	4603      	mov	r3, r0
 801980e:	2b00      	cmp	r3, #0
 8019810:	d001      	beq.n	8019816 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019812:	f7e9 fab5 	bl	8002d80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019816:	490c      	ldr	r1, [pc, #48]	; (8019848 <MX_USB_DEVICE_Init+0x5c>)
 8019818:	4809      	ldr	r0, [pc, #36]	; (8019840 <MX_USB_DEVICE_Init+0x54>)
 801981a:	f7f8 fa53 	bl	8011cc4 <USBD_CDC_RegisterInterface>
 801981e:	4603      	mov	r3, r0
 8019820:	2b00      	cmp	r3, #0
 8019822:	d001      	beq.n	8019828 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019824:	f7e9 faac 	bl	8002d80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019828:	4805      	ldr	r0, [pc, #20]	; (8019840 <MX_USB_DEVICE_Init+0x54>)
 801982a:	f7f8 fb18 	bl	8011e5e <USBD_Start>
 801982e:	4603      	mov	r3, r0
 8019830:	2b00      	cmp	r3, #0
 8019832:	d001      	beq.n	8019838 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019834:	f7e9 faa4 	bl	8002d80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019838:	bf00      	nop
 801983a:	bd80      	pop	{r7, pc}
 801983c:	200001a8 	.word	0x200001a8
 8019840:	200077f4 	.word	0x200077f4
 8019844:	2000008c 	.word	0x2000008c
 8019848:	20000194 	.word	0x20000194

0801984c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801984c:	b580      	push	{r7, lr}
 801984e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019850:	2200      	movs	r2, #0
 8019852:	4905      	ldr	r1, [pc, #20]	; (8019868 <CDC_Init_FS+0x1c>)
 8019854:	4805      	ldr	r0, [pc, #20]	; (801986c <CDC_Init_FS+0x20>)
 8019856:	f7f8 fa4a 	bl	8011cee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801985a:	4905      	ldr	r1, [pc, #20]	; (8019870 <CDC_Init_FS+0x24>)
 801985c:	4803      	ldr	r0, [pc, #12]	; (801986c <CDC_Init_FS+0x20>)
 801985e:	f7f8 fa64 	bl	8011d2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019862:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019864:	4618      	mov	r0, r3
 8019866:	bd80      	pop	{r7, pc}
 8019868:	200082c4 	.word	0x200082c4
 801986c:	200077f4 	.word	0x200077f4
 8019870:	20007ac4 	.word	0x20007ac4

08019874 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019874:	b480      	push	{r7}
 8019876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019878:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801987a:	4618      	mov	r0, r3
 801987c:	46bd      	mov	sp, r7
 801987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019882:	4770      	bx	lr

08019884 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019884:	b480      	push	{r7}
 8019886:	b083      	sub	sp, #12
 8019888:	af00      	add	r7, sp, #0
 801988a:	4603      	mov	r3, r0
 801988c:	6039      	str	r1, [r7, #0]
 801988e:	71fb      	strb	r3, [r7, #7]
 8019890:	4613      	mov	r3, r2
 8019892:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019894:	79fb      	ldrb	r3, [r7, #7]
 8019896:	2b23      	cmp	r3, #35	; 0x23
 8019898:	d84a      	bhi.n	8019930 <CDC_Control_FS+0xac>
 801989a:	a201      	add	r2, pc, #4	; (adr r2, 80198a0 <CDC_Control_FS+0x1c>)
 801989c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198a0:	08019931 	.word	0x08019931
 80198a4:	08019931 	.word	0x08019931
 80198a8:	08019931 	.word	0x08019931
 80198ac:	08019931 	.word	0x08019931
 80198b0:	08019931 	.word	0x08019931
 80198b4:	08019931 	.word	0x08019931
 80198b8:	08019931 	.word	0x08019931
 80198bc:	08019931 	.word	0x08019931
 80198c0:	08019931 	.word	0x08019931
 80198c4:	08019931 	.word	0x08019931
 80198c8:	08019931 	.word	0x08019931
 80198cc:	08019931 	.word	0x08019931
 80198d0:	08019931 	.word	0x08019931
 80198d4:	08019931 	.word	0x08019931
 80198d8:	08019931 	.word	0x08019931
 80198dc:	08019931 	.word	0x08019931
 80198e0:	08019931 	.word	0x08019931
 80198e4:	08019931 	.word	0x08019931
 80198e8:	08019931 	.word	0x08019931
 80198ec:	08019931 	.word	0x08019931
 80198f0:	08019931 	.word	0x08019931
 80198f4:	08019931 	.word	0x08019931
 80198f8:	08019931 	.word	0x08019931
 80198fc:	08019931 	.word	0x08019931
 8019900:	08019931 	.word	0x08019931
 8019904:	08019931 	.word	0x08019931
 8019908:	08019931 	.word	0x08019931
 801990c:	08019931 	.word	0x08019931
 8019910:	08019931 	.word	0x08019931
 8019914:	08019931 	.word	0x08019931
 8019918:	08019931 	.word	0x08019931
 801991c:	08019931 	.word	0x08019931
 8019920:	08019931 	.word	0x08019931
 8019924:	08019931 	.word	0x08019931
 8019928:	08019931 	.word	0x08019931
 801992c:	08019931 	.word	0x08019931
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019930:	bf00      	nop
  }

  return (USBD_OK);
 8019932:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019934:	4618      	mov	r0, r3
 8019936:	370c      	adds	r7, #12
 8019938:	46bd      	mov	sp, r7
 801993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993e:	4770      	bx	lr

08019940 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b082      	sub	sp, #8
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
 8019948:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801994a:	6879      	ldr	r1, [r7, #4]
 801994c:	4805      	ldr	r0, [pc, #20]	; (8019964 <CDC_Receive_FS+0x24>)
 801994e:	f7f8 f9ec 	bl	8011d2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019952:	4804      	ldr	r0, [pc, #16]	; (8019964 <CDC_Receive_FS+0x24>)
 8019954:	f7f8 fa02 	bl	8011d5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019958:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801995a:	4618      	mov	r0, r3
 801995c:	3708      	adds	r7, #8
 801995e:	46bd      	mov	sp, r7
 8019960:	bd80      	pop	{r7, pc}
 8019962:	bf00      	nop
 8019964:	200077f4 	.word	0x200077f4

08019968 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019968:	b480      	push	{r7}
 801996a:	b087      	sub	sp, #28
 801996c:	af00      	add	r7, sp, #0
 801996e:	60f8      	str	r0, [r7, #12]
 8019970:	60b9      	str	r1, [r7, #8]
 8019972:	4613      	mov	r3, r2
 8019974:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019976:	2300      	movs	r3, #0
 8019978:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801997a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801997e:	4618      	mov	r0, r3
 8019980:	371c      	adds	r7, #28
 8019982:	46bd      	mov	sp, r7
 8019984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019988:	4770      	bx	lr
	...

0801998c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801998c:	b480      	push	{r7}
 801998e:	b083      	sub	sp, #12
 8019990:	af00      	add	r7, sp, #0
 8019992:	4603      	mov	r3, r0
 8019994:	6039      	str	r1, [r7, #0]
 8019996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019998:	683b      	ldr	r3, [r7, #0]
 801999a:	2212      	movs	r2, #18
 801999c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801999e:	4b03      	ldr	r3, [pc, #12]	; (80199ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80199a0:	4618      	mov	r0, r3
 80199a2:	370c      	adds	r7, #12
 80199a4:	46bd      	mov	sp, r7
 80199a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199aa:	4770      	bx	lr
 80199ac:	200001c4 	.word	0x200001c4

080199b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199b0:	b480      	push	{r7}
 80199b2:	b083      	sub	sp, #12
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	4603      	mov	r3, r0
 80199b8:	6039      	str	r1, [r7, #0]
 80199ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80199bc:	683b      	ldr	r3, [r7, #0]
 80199be:	2204      	movs	r2, #4
 80199c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80199c2:	4b03      	ldr	r3, [pc, #12]	; (80199d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80199c4:	4618      	mov	r0, r3
 80199c6:	370c      	adds	r7, #12
 80199c8:	46bd      	mov	sp, r7
 80199ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ce:	4770      	bx	lr
 80199d0:	200001d8 	.word	0x200001d8

080199d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b082      	sub	sp, #8
 80199d8:	af00      	add	r7, sp, #0
 80199da:	4603      	mov	r3, r0
 80199dc:	6039      	str	r1, [r7, #0]
 80199de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80199e0:	79fb      	ldrb	r3, [r7, #7]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d105      	bne.n	80199f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80199e6:	683a      	ldr	r2, [r7, #0]
 80199e8:	4907      	ldr	r1, [pc, #28]	; (8019a08 <USBD_FS_ProductStrDescriptor+0x34>)
 80199ea:	4808      	ldr	r0, [pc, #32]	; (8019a0c <USBD_FS_ProductStrDescriptor+0x38>)
 80199ec:	f7f9 fa69 	bl	8012ec2 <USBD_GetString>
 80199f0:	e004      	b.n	80199fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80199f2:	683a      	ldr	r2, [r7, #0]
 80199f4:	4904      	ldr	r1, [pc, #16]	; (8019a08 <USBD_FS_ProductStrDescriptor+0x34>)
 80199f6:	4805      	ldr	r0, [pc, #20]	; (8019a0c <USBD_FS_ProductStrDescriptor+0x38>)
 80199f8:	f7f9 fa63 	bl	8012ec2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80199fc:	4b02      	ldr	r3, [pc, #8]	; (8019a08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80199fe:	4618      	mov	r0, r3
 8019a00:	3708      	adds	r7, #8
 8019a02:	46bd      	mov	sp, r7
 8019a04:	bd80      	pop	{r7, pc}
 8019a06:	bf00      	nop
 8019a08:	20008ac4 	.word	0x20008ac4
 8019a0c:	08022f68 	.word	0x08022f68

08019a10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a10:	b580      	push	{r7, lr}
 8019a12:	b082      	sub	sp, #8
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	4603      	mov	r3, r0
 8019a18:	6039      	str	r1, [r7, #0]
 8019a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019a1c:	683a      	ldr	r2, [r7, #0]
 8019a1e:	4904      	ldr	r1, [pc, #16]	; (8019a30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019a20:	4804      	ldr	r0, [pc, #16]	; (8019a34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019a22:	f7f9 fa4e 	bl	8012ec2 <USBD_GetString>
  return USBD_StrDesc;
 8019a26:	4b02      	ldr	r3, [pc, #8]	; (8019a30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019a28:	4618      	mov	r0, r3
 8019a2a:	3708      	adds	r7, #8
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	bd80      	pop	{r7, pc}
 8019a30:	20008ac4 	.word	0x20008ac4
 8019a34:	08022f80 	.word	0x08022f80

08019a38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b082      	sub	sp, #8
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	4603      	mov	r3, r0
 8019a40:	6039      	str	r1, [r7, #0]
 8019a42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019a44:	683b      	ldr	r3, [r7, #0]
 8019a46:	221a      	movs	r2, #26
 8019a48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019a4a:	f000 f843 	bl	8019ad4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019a4e:	4b02      	ldr	r3, [pc, #8]	; (8019a58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019a50:	4618      	mov	r0, r3
 8019a52:	3708      	adds	r7, #8
 8019a54:	46bd      	mov	sp, r7
 8019a56:	bd80      	pop	{r7, pc}
 8019a58:	200001dc 	.word	0x200001dc

08019a5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b082      	sub	sp, #8
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	4603      	mov	r3, r0
 8019a64:	6039      	str	r1, [r7, #0]
 8019a66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019a68:	79fb      	ldrb	r3, [r7, #7]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d105      	bne.n	8019a7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019a6e:	683a      	ldr	r2, [r7, #0]
 8019a70:	4907      	ldr	r1, [pc, #28]	; (8019a90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019a72:	4808      	ldr	r0, [pc, #32]	; (8019a94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019a74:	f7f9 fa25 	bl	8012ec2 <USBD_GetString>
 8019a78:	e004      	b.n	8019a84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019a7a:	683a      	ldr	r2, [r7, #0]
 8019a7c:	4904      	ldr	r1, [pc, #16]	; (8019a90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019a7e:	4805      	ldr	r0, [pc, #20]	; (8019a94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019a80:	f7f9 fa1f 	bl	8012ec2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019a84:	4b02      	ldr	r3, [pc, #8]	; (8019a90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019a86:	4618      	mov	r0, r3
 8019a88:	3708      	adds	r7, #8
 8019a8a:	46bd      	mov	sp, r7
 8019a8c:	bd80      	pop	{r7, pc}
 8019a8e:	bf00      	nop
 8019a90:	20008ac4 	.word	0x20008ac4
 8019a94:	08022f94 	.word	0x08022f94

08019a98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	b082      	sub	sp, #8
 8019a9c:	af00      	add	r7, sp, #0
 8019a9e:	4603      	mov	r3, r0
 8019aa0:	6039      	str	r1, [r7, #0]
 8019aa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019aa4:	79fb      	ldrb	r3, [r7, #7]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d105      	bne.n	8019ab6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019aaa:	683a      	ldr	r2, [r7, #0]
 8019aac:	4907      	ldr	r1, [pc, #28]	; (8019acc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019aae:	4808      	ldr	r0, [pc, #32]	; (8019ad0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019ab0:	f7f9 fa07 	bl	8012ec2 <USBD_GetString>
 8019ab4:	e004      	b.n	8019ac0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019ab6:	683a      	ldr	r2, [r7, #0]
 8019ab8:	4904      	ldr	r1, [pc, #16]	; (8019acc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019aba:	4805      	ldr	r0, [pc, #20]	; (8019ad0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019abc:	f7f9 fa01 	bl	8012ec2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019ac0:	4b02      	ldr	r3, [pc, #8]	; (8019acc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	3708      	adds	r7, #8
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	bd80      	pop	{r7, pc}
 8019aca:	bf00      	nop
 8019acc:	20008ac4 	.word	0x20008ac4
 8019ad0:	08022fa0 	.word	0x08022fa0

08019ad4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b084      	sub	sp, #16
 8019ad8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019ada:	4b0f      	ldr	r3, [pc, #60]	; (8019b18 <Get_SerialNum+0x44>)
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019ae0:	4b0e      	ldr	r3, [pc, #56]	; (8019b1c <Get_SerialNum+0x48>)
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019ae6:	4b0e      	ldr	r3, [pc, #56]	; (8019b20 <Get_SerialNum+0x4c>)
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019aec:	68fa      	ldr	r2, [r7, #12]
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	4413      	add	r3, r2
 8019af2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d009      	beq.n	8019b0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019afa:	2208      	movs	r2, #8
 8019afc:	4909      	ldr	r1, [pc, #36]	; (8019b24 <Get_SerialNum+0x50>)
 8019afe:	68f8      	ldr	r0, [r7, #12]
 8019b00:	f000 f814 	bl	8019b2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019b04:	2204      	movs	r2, #4
 8019b06:	4908      	ldr	r1, [pc, #32]	; (8019b28 <Get_SerialNum+0x54>)
 8019b08:	68b8      	ldr	r0, [r7, #8]
 8019b0a:	f000 f80f 	bl	8019b2c <IntToUnicode>
  }
}
 8019b0e:	bf00      	nop
 8019b10:	3710      	adds	r7, #16
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}
 8019b16:	bf00      	nop
 8019b18:	1fff7a10 	.word	0x1fff7a10
 8019b1c:	1fff7a14 	.word	0x1fff7a14
 8019b20:	1fff7a18 	.word	0x1fff7a18
 8019b24:	200001de 	.word	0x200001de
 8019b28:	200001ee 	.word	0x200001ee

08019b2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019b2c:	b480      	push	{r7}
 8019b2e:	b087      	sub	sp, #28
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	60f8      	str	r0, [r7, #12]
 8019b34:	60b9      	str	r1, [r7, #8]
 8019b36:	4613      	mov	r3, r2
 8019b38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019b3e:	2300      	movs	r3, #0
 8019b40:	75fb      	strb	r3, [r7, #23]
 8019b42:	e027      	b.n	8019b94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	0f1b      	lsrs	r3, r3, #28
 8019b48:	2b09      	cmp	r3, #9
 8019b4a:	d80b      	bhi.n	8019b64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	0f1b      	lsrs	r3, r3, #28
 8019b50:	b2da      	uxtb	r2, r3
 8019b52:	7dfb      	ldrb	r3, [r7, #23]
 8019b54:	005b      	lsls	r3, r3, #1
 8019b56:	4619      	mov	r1, r3
 8019b58:	68bb      	ldr	r3, [r7, #8]
 8019b5a:	440b      	add	r3, r1
 8019b5c:	3230      	adds	r2, #48	; 0x30
 8019b5e:	b2d2      	uxtb	r2, r2
 8019b60:	701a      	strb	r2, [r3, #0]
 8019b62:	e00a      	b.n	8019b7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	0f1b      	lsrs	r3, r3, #28
 8019b68:	b2da      	uxtb	r2, r3
 8019b6a:	7dfb      	ldrb	r3, [r7, #23]
 8019b6c:	005b      	lsls	r3, r3, #1
 8019b6e:	4619      	mov	r1, r3
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	440b      	add	r3, r1
 8019b74:	3237      	adds	r2, #55	; 0x37
 8019b76:	b2d2      	uxtb	r2, r2
 8019b78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	011b      	lsls	r3, r3, #4
 8019b7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019b80:	7dfb      	ldrb	r3, [r7, #23]
 8019b82:	005b      	lsls	r3, r3, #1
 8019b84:	3301      	adds	r3, #1
 8019b86:	68ba      	ldr	r2, [r7, #8]
 8019b88:	4413      	add	r3, r2
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019b8e:	7dfb      	ldrb	r3, [r7, #23]
 8019b90:	3301      	adds	r3, #1
 8019b92:	75fb      	strb	r3, [r7, #23]
 8019b94:	7dfa      	ldrb	r2, [r7, #23]
 8019b96:	79fb      	ldrb	r3, [r7, #7]
 8019b98:	429a      	cmp	r2, r3
 8019b9a:	d3d3      	bcc.n	8019b44 <IntToUnicode+0x18>
  }
}
 8019b9c:	bf00      	nop
 8019b9e:	bf00      	nop
 8019ba0:	371c      	adds	r7, #28
 8019ba2:	46bd      	mov	sp, r7
 8019ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba8:	4770      	bx	lr
	...

08019bac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b08a      	sub	sp, #40	; 0x28
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019bb4:	f107 0314 	add.w	r3, r7, #20
 8019bb8:	2200      	movs	r2, #0
 8019bba:	601a      	str	r2, [r3, #0]
 8019bbc:	605a      	str	r2, [r3, #4]
 8019bbe:	609a      	str	r2, [r3, #8]
 8019bc0:	60da      	str	r2, [r3, #12]
 8019bc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019bcc:	d147      	bne.n	8019c5e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019bce:	2300      	movs	r3, #0
 8019bd0:	613b      	str	r3, [r7, #16]
 8019bd2:	4b25      	ldr	r3, [pc, #148]	; (8019c68 <HAL_PCD_MspInit+0xbc>)
 8019bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019bd6:	4a24      	ldr	r2, [pc, #144]	; (8019c68 <HAL_PCD_MspInit+0xbc>)
 8019bd8:	f043 0301 	orr.w	r3, r3, #1
 8019bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8019bde:	4b22      	ldr	r3, [pc, #136]	; (8019c68 <HAL_PCD_MspInit+0xbc>)
 8019be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019be2:	f003 0301 	and.w	r3, r3, #1
 8019be6:	613b      	str	r3, [r7, #16]
 8019be8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8019bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019bf8:	f107 0314 	add.w	r3, r7, #20
 8019bfc:	4619      	mov	r1, r3
 8019bfe:	481b      	ldr	r0, [pc, #108]	; (8019c6c <HAL_PCD_MspInit+0xc0>)
 8019c00:	f7ef fd1a 	bl	8009638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019c04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019c0a:	2302      	movs	r3, #2
 8019c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019c0e:	2300      	movs	r3, #0
 8019c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019c12:	2303      	movs	r3, #3
 8019c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019c16:	230a      	movs	r3, #10
 8019c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019c1a:	f107 0314 	add.w	r3, r7, #20
 8019c1e:	4619      	mov	r1, r3
 8019c20:	4812      	ldr	r0, [pc, #72]	; (8019c6c <HAL_PCD_MspInit+0xc0>)
 8019c22:	f7ef fd09 	bl	8009638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019c26:	4b10      	ldr	r3, [pc, #64]	; (8019c68 <HAL_PCD_MspInit+0xbc>)
 8019c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c2a:	4a0f      	ldr	r2, [pc, #60]	; (8019c68 <HAL_PCD_MspInit+0xbc>)
 8019c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c30:	6353      	str	r3, [r2, #52]	; 0x34
 8019c32:	2300      	movs	r3, #0
 8019c34:	60fb      	str	r3, [r7, #12]
 8019c36:	4b0c      	ldr	r3, [pc, #48]	; (8019c68 <HAL_PCD_MspInit+0xbc>)
 8019c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c3a:	4a0b      	ldr	r2, [pc, #44]	; (8019c68 <HAL_PCD_MspInit+0xbc>)
 8019c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019c40:	6453      	str	r3, [r2, #68]	; 0x44
 8019c42:	4b09      	ldr	r3, [pc, #36]	; (8019c68 <HAL_PCD_MspInit+0xbc>)
 8019c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019c4a:	60fb      	str	r3, [r7, #12]
 8019c4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019c4e:	2200      	movs	r2, #0
 8019c50:	2105      	movs	r1, #5
 8019c52:	2043      	movs	r0, #67	; 0x43
 8019c54:	f7ef fcb8 	bl	80095c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019c58:	2043      	movs	r0, #67	; 0x43
 8019c5a:	f7ef fcd1 	bl	8009600 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019c5e:	bf00      	nop
 8019c60:	3728      	adds	r7, #40	; 0x28
 8019c62:	46bd      	mov	sp, r7
 8019c64:	bd80      	pop	{r7, pc}
 8019c66:	bf00      	nop
 8019c68:	40023800 	.word	0x40023800
 8019c6c:	40020000 	.word	0x40020000

08019c70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b082      	sub	sp, #8
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019c84:	4619      	mov	r1, r3
 8019c86:	4610      	mov	r0, r2
 8019c88:	f7f8 f934 	bl	8011ef4 <USBD_LL_SetupStage>
}
 8019c8c:	bf00      	nop
 8019c8e:	3708      	adds	r7, #8
 8019c90:	46bd      	mov	sp, r7
 8019c92:	bd80      	pop	{r7, pc}

08019c94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c94:	b580      	push	{r7, lr}
 8019c96:	b082      	sub	sp, #8
 8019c98:	af00      	add	r7, sp, #0
 8019c9a:	6078      	str	r0, [r7, #4]
 8019c9c:	460b      	mov	r3, r1
 8019c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019ca6:	78fa      	ldrb	r2, [r7, #3]
 8019ca8:	6879      	ldr	r1, [r7, #4]
 8019caa:	4613      	mov	r3, r2
 8019cac:	00db      	lsls	r3, r3, #3
 8019cae:	1a9b      	subs	r3, r3, r2
 8019cb0:	009b      	lsls	r3, r3, #2
 8019cb2:	440b      	add	r3, r1
 8019cb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019cb8:	681a      	ldr	r2, [r3, #0]
 8019cba:	78fb      	ldrb	r3, [r7, #3]
 8019cbc:	4619      	mov	r1, r3
 8019cbe:	f7f8 f96e 	bl	8011f9e <USBD_LL_DataOutStage>
}
 8019cc2:	bf00      	nop
 8019cc4:	3708      	adds	r7, #8
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	bd80      	pop	{r7, pc}

08019cca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cca:	b580      	push	{r7, lr}
 8019ccc:	b082      	sub	sp, #8
 8019cce:	af00      	add	r7, sp, #0
 8019cd0:	6078      	str	r0, [r7, #4]
 8019cd2:	460b      	mov	r3, r1
 8019cd4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019cdc:	78fa      	ldrb	r2, [r7, #3]
 8019cde:	6879      	ldr	r1, [r7, #4]
 8019ce0:	4613      	mov	r3, r2
 8019ce2:	00db      	lsls	r3, r3, #3
 8019ce4:	1a9b      	subs	r3, r3, r2
 8019ce6:	009b      	lsls	r3, r3, #2
 8019ce8:	440b      	add	r3, r1
 8019cea:	3348      	adds	r3, #72	; 0x48
 8019cec:	681a      	ldr	r2, [r3, #0]
 8019cee:	78fb      	ldrb	r3, [r7, #3]
 8019cf0:	4619      	mov	r1, r3
 8019cf2:	f7f8 f9b7 	bl	8012064 <USBD_LL_DataInStage>
}
 8019cf6:	bf00      	nop
 8019cf8:	3708      	adds	r7, #8
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	bd80      	pop	{r7, pc}

08019cfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cfe:	b580      	push	{r7, lr}
 8019d00:	b082      	sub	sp, #8
 8019d02:	af00      	add	r7, sp, #0
 8019d04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	f7f8 facb 	bl	80122a8 <USBD_LL_SOF>
}
 8019d12:	bf00      	nop
 8019d14:	3708      	adds	r7, #8
 8019d16:	46bd      	mov	sp, r7
 8019d18:	bd80      	pop	{r7, pc}

08019d1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d1a:	b580      	push	{r7, lr}
 8019d1c:	b084      	sub	sp, #16
 8019d1e:	af00      	add	r7, sp, #0
 8019d20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019d22:	2301      	movs	r3, #1
 8019d24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	68db      	ldr	r3, [r3, #12]
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d102      	bne.n	8019d34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8019d2e:	2300      	movs	r3, #0
 8019d30:	73fb      	strb	r3, [r7, #15]
 8019d32:	e008      	b.n	8019d46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	68db      	ldr	r3, [r3, #12]
 8019d38:	2b02      	cmp	r3, #2
 8019d3a:	d102      	bne.n	8019d42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019d3c:	2301      	movs	r3, #1
 8019d3e:	73fb      	strb	r3, [r7, #15]
 8019d40:	e001      	b.n	8019d46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019d42:	f7e9 f81d 	bl	8002d80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d4c:	7bfa      	ldrb	r2, [r7, #15]
 8019d4e:	4611      	mov	r1, r2
 8019d50:	4618      	mov	r0, r3
 8019d52:	f7f8 fa6b 	bl	801222c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	f7f8 fa17 	bl	8012190 <USBD_LL_Reset>
}
 8019d62:	bf00      	nop
 8019d64:	3710      	adds	r7, #16
 8019d66:	46bd      	mov	sp, r7
 8019d68:	bd80      	pop	{r7, pc}
	...

08019d6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b082      	sub	sp, #8
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	f7f8 fa66 	bl	801224c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	687a      	ldr	r2, [r7, #4]
 8019d8c:	6812      	ldr	r2, [r2, #0]
 8019d8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019d92:	f043 0301 	orr.w	r3, r3, #1
 8019d96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	6a1b      	ldr	r3, [r3, #32]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d005      	beq.n	8019dac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019da0:	4b04      	ldr	r3, [pc, #16]	; (8019db4 <HAL_PCD_SuspendCallback+0x48>)
 8019da2:	691b      	ldr	r3, [r3, #16]
 8019da4:	4a03      	ldr	r2, [pc, #12]	; (8019db4 <HAL_PCD_SuspendCallback+0x48>)
 8019da6:	f043 0306 	orr.w	r3, r3, #6
 8019daa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019dac:	bf00      	nop
 8019dae:	3708      	adds	r7, #8
 8019db0:	46bd      	mov	sp, r7
 8019db2:	bd80      	pop	{r7, pc}
 8019db4:	e000ed00 	.word	0xe000ed00

08019db8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b082      	sub	sp, #8
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f7f8 fa56 	bl	8012278 <USBD_LL_Resume>
}
 8019dcc:	bf00      	nop
 8019dce:	3708      	adds	r7, #8
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bd80      	pop	{r7, pc}

08019dd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019dd4:	b580      	push	{r7, lr}
 8019dd6:	b082      	sub	sp, #8
 8019dd8:	af00      	add	r7, sp, #0
 8019dda:	6078      	str	r0, [r7, #4]
 8019ddc:	460b      	mov	r3, r1
 8019dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019de6:	78fa      	ldrb	r2, [r7, #3]
 8019de8:	4611      	mov	r1, r2
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7f8 faa4 	bl	8012338 <USBD_LL_IsoOUTIncomplete>
}
 8019df0:	bf00      	nop
 8019df2:	3708      	adds	r7, #8
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}

08019df8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b082      	sub	sp, #8
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
 8019e00:	460b      	mov	r3, r1
 8019e02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019e0a:	78fa      	ldrb	r2, [r7, #3]
 8019e0c:	4611      	mov	r1, r2
 8019e0e:	4618      	mov	r0, r3
 8019e10:	f7f8 fa6c 	bl	80122ec <USBD_LL_IsoINIncomplete>
}
 8019e14:	bf00      	nop
 8019e16:	3708      	adds	r7, #8
 8019e18:	46bd      	mov	sp, r7
 8019e1a:	bd80      	pop	{r7, pc}

08019e1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e1c:	b580      	push	{r7, lr}
 8019e1e:	b082      	sub	sp, #8
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	f7f8 faaa 	bl	8012384 <USBD_LL_DevConnected>
}
 8019e30:	bf00      	nop
 8019e32:	3708      	adds	r7, #8
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}

08019e38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	b082      	sub	sp, #8
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019e46:	4618      	mov	r0, r3
 8019e48:	f7f8 faa7 	bl	801239a <USBD_LL_DevDisconnected>
}
 8019e4c:	bf00      	nop
 8019e4e:	3708      	adds	r7, #8
 8019e50:	46bd      	mov	sp, r7
 8019e52:	bd80      	pop	{r7, pc}

08019e54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b082      	sub	sp, #8
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	781b      	ldrb	r3, [r3, #0]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d13c      	bne.n	8019ede <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019e64:	4a20      	ldr	r2, [pc, #128]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	4a1e      	ldr	r2, [pc, #120]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019e70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019e74:	4b1c      	ldr	r3, [pc, #112]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019e76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019e7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8019e7c:	4b1a      	ldr	r3, [pc, #104]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019e7e:	2204      	movs	r2, #4
 8019e80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019e82:	4b19      	ldr	r3, [pc, #100]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019e84:	2202      	movs	r2, #2
 8019e86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019e88:	4b17      	ldr	r3, [pc, #92]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019e8a:	2200      	movs	r2, #0
 8019e8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019e8e:	4b16      	ldr	r3, [pc, #88]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019e90:	2202      	movs	r2, #2
 8019e92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019e94:	4b14      	ldr	r3, [pc, #80]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019e96:	2200      	movs	r2, #0
 8019e98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019e9a:	4b13      	ldr	r3, [pc, #76]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019e9c:	2200      	movs	r2, #0
 8019e9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019ea0:	4b11      	ldr	r3, [pc, #68]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8019ea6:	4b10      	ldr	r3, [pc, #64]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019ea8:	2201      	movs	r2, #1
 8019eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019eac:	4b0e      	ldr	r3, [pc, #56]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019eae:	2200      	movs	r2, #0
 8019eb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019eb2:	480d      	ldr	r0, [pc, #52]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019eb4:	f7f0 fe78 	bl	800aba8 <HAL_PCD_Init>
 8019eb8:	4603      	mov	r3, r0
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d001      	beq.n	8019ec2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019ebe:	f7e8 ff5f 	bl	8002d80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019ec2:	2180      	movs	r1, #128	; 0x80
 8019ec4:	4808      	ldr	r0, [pc, #32]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019ec6:	f7f1 ffd6 	bl	800be76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019eca:	2240      	movs	r2, #64	; 0x40
 8019ecc:	2100      	movs	r1, #0
 8019ece:	4806      	ldr	r0, [pc, #24]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019ed0:	f7f1 ff8a 	bl	800bde8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019ed4:	2280      	movs	r2, #128	; 0x80
 8019ed6:	2101      	movs	r1, #1
 8019ed8:	4803      	ldr	r0, [pc, #12]	; (8019ee8 <USBD_LL_Init+0x94>)
 8019eda:	f7f1 ff85 	bl	800bde8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019ede:	2300      	movs	r3, #0
}
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	3708      	adds	r7, #8
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	bd80      	pop	{r7, pc}
 8019ee8:	20008cc4 	.word	0x20008cc4

08019eec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b084      	sub	sp, #16
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ef4:	2300      	movs	r3, #0
 8019ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ef8:	2300      	movs	r3, #0
 8019efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019f02:	4618      	mov	r0, r3
 8019f04:	f7f0 ff6d 	bl	800ade2 <HAL_PCD_Start>
 8019f08:	4603      	mov	r3, r0
 8019f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f0c:	7bfb      	ldrb	r3, [r7, #15]
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f000 f942 	bl	801a198 <USBD_Get_USB_Status>
 8019f14:	4603      	mov	r3, r0
 8019f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	3710      	adds	r7, #16
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	bd80      	pop	{r7, pc}

08019f22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019f22:	b580      	push	{r7, lr}
 8019f24:	b084      	sub	sp, #16
 8019f26:	af00      	add	r7, sp, #0
 8019f28:	6078      	str	r0, [r7, #4]
 8019f2a:	4608      	mov	r0, r1
 8019f2c:	4611      	mov	r1, r2
 8019f2e:	461a      	mov	r2, r3
 8019f30:	4603      	mov	r3, r0
 8019f32:	70fb      	strb	r3, [r7, #3]
 8019f34:	460b      	mov	r3, r1
 8019f36:	70bb      	strb	r3, [r7, #2]
 8019f38:	4613      	mov	r3, r2
 8019f3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f40:	2300      	movs	r3, #0
 8019f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019f4a:	78bb      	ldrb	r3, [r7, #2]
 8019f4c:	883a      	ldrh	r2, [r7, #0]
 8019f4e:	78f9      	ldrb	r1, [r7, #3]
 8019f50:	f7f1 fb51 	bl	800b5f6 <HAL_PCD_EP_Open>
 8019f54:	4603      	mov	r3, r0
 8019f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f58:	7bfb      	ldrb	r3, [r7, #15]
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	f000 f91c 	bl	801a198 <USBD_Get_USB_Status>
 8019f60:	4603      	mov	r3, r0
 8019f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f66:	4618      	mov	r0, r3
 8019f68:	3710      	adds	r7, #16
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd80      	pop	{r7, pc}

08019f6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f6e:	b580      	push	{r7, lr}
 8019f70:	b084      	sub	sp, #16
 8019f72:	af00      	add	r7, sp, #0
 8019f74:	6078      	str	r0, [r7, #4]
 8019f76:	460b      	mov	r3, r1
 8019f78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f7e:	2300      	movs	r3, #0
 8019f80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019f88:	78fa      	ldrb	r2, [r7, #3]
 8019f8a:	4611      	mov	r1, r2
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	f7f1 fb9a 	bl	800b6c6 <HAL_PCD_EP_Close>
 8019f92:	4603      	mov	r3, r0
 8019f94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f96:	7bfb      	ldrb	r3, [r7, #15]
 8019f98:	4618      	mov	r0, r3
 8019f9a:	f000 f8fd 	bl	801a198 <USBD_Get_USB_Status>
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019fa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	3710      	adds	r7, #16
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	bd80      	pop	{r7, pc}

08019fac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b084      	sub	sp, #16
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	6078      	str	r0, [r7, #4]
 8019fb4:	460b      	mov	r3, r1
 8019fb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fb8:	2300      	movs	r3, #0
 8019fba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019fc6:	78fa      	ldrb	r2, [r7, #3]
 8019fc8:	4611      	mov	r1, r2
 8019fca:	4618      	mov	r0, r3
 8019fcc:	f7f1 fc72 	bl	800b8b4 <HAL_PCD_EP_SetStall>
 8019fd0:	4603      	mov	r3, r0
 8019fd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019fd4:	7bfb      	ldrb	r3, [r7, #15]
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f000 f8de 	bl	801a198 <USBD_Get_USB_Status>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	3710      	adds	r7, #16
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	bd80      	pop	{r7, pc}

08019fea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019fea:	b580      	push	{r7, lr}
 8019fec:	b084      	sub	sp, #16
 8019fee:	af00      	add	r7, sp, #0
 8019ff0:	6078      	str	r0, [r7, #4]
 8019ff2:	460b      	mov	r3, r1
 8019ff4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a004:	78fa      	ldrb	r2, [r7, #3]
 801a006:	4611      	mov	r1, r2
 801a008:	4618      	mov	r0, r3
 801a00a:	f7f1 fcb7 	bl	800b97c <HAL_PCD_EP_ClrStall>
 801a00e:	4603      	mov	r3, r0
 801a010:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a012:	7bfb      	ldrb	r3, [r7, #15]
 801a014:	4618      	mov	r0, r3
 801a016:	f000 f8bf 	bl	801a198 <USBD_Get_USB_Status>
 801a01a:	4603      	mov	r3, r0
 801a01c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a01e:	7bbb      	ldrb	r3, [r7, #14]
}
 801a020:	4618      	mov	r0, r3
 801a022:	3710      	adds	r7, #16
 801a024:	46bd      	mov	sp, r7
 801a026:	bd80      	pop	{r7, pc}

0801a028 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a028:	b480      	push	{r7}
 801a02a:	b085      	sub	sp, #20
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
 801a030:	460b      	mov	r3, r1
 801a032:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a03a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a03c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a040:	2b00      	cmp	r3, #0
 801a042:	da0b      	bge.n	801a05c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a044:	78fb      	ldrb	r3, [r7, #3]
 801a046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a04a:	68f9      	ldr	r1, [r7, #12]
 801a04c:	4613      	mov	r3, r2
 801a04e:	00db      	lsls	r3, r3, #3
 801a050:	1a9b      	subs	r3, r3, r2
 801a052:	009b      	lsls	r3, r3, #2
 801a054:	440b      	add	r3, r1
 801a056:	333e      	adds	r3, #62	; 0x3e
 801a058:	781b      	ldrb	r3, [r3, #0]
 801a05a:	e00b      	b.n	801a074 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a05c:	78fb      	ldrb	r3, [r7, #3]
 801a05e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a062:	68f9      	ldr	r1, [r7, #12]
 801a064:	4613      	mov	r3, r2
 801a066:	00db      	lsls	r3, r3, #3
 801a068:	1a9b      	subs	r3, r3, r2
 801a06a:	009b      	lsls	r3, r3, #2
 801a06c:	440b      	add	r3, r1
 801a06e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a072:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a074:	4618      	mov	r0, r3
 801a076:	3714      	adds	r7, #20
 801a078:	46bd      	mov	sp, r7
 801a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a07e:	4770      	bx	lr

0801a080 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a080:	b580      	push	{r7, lr}
 801a082:	b084      	sub	sp, #16
 801a084:	af00      	add	r7, sp, #0
 801a086:	6078      	str	r0, [r7, #4]
 801a088:	460b      	mov	r3, r1
 801a08a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a08c:	2300      	movs	r3, #0
 801a08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a090:	2300      	movs	r3, #0
 801a092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a09a:	78fa      	ldrb	r2, [r7, #3]
 801a09c:	4611      	mov	r1, r2
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f7f1 fa84 	bl	800b5ac <HAL_PCD_SetAddress>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a0a8:	7bfb      	ldrb	r3, [r7, #15]
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	f000 f874 	bl	801a198 <USBD_Get_USB_Status>
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	3710      	adds	r7, #16
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	bd80      	pop	{r7, pc}

0801a0be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a0be:	b580      	push	{r7, lr}
 801a0c0:	b086      	sub	sp, #24
 801a0c2:	af00      	add	r7, sp, #0
 801a0c4:	60f8      	str	r0, [r7, #12]
 801a0c6:	607a      	str	r2, [r7, #4]
 801a0c8:	603b      	str	r3, [r7, #0]
 801a0ca:	460b      	mov	r3, r1
 801a0cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a0dc:	7af9      	ldrb	r1, [r7, #11]
 801a0de:	683b      	ldr	r3, [r7, #0]
 801a0e0:	687a      	ldr	r2, [r7, #4]
 801a0e2:	f7f1 fb9d 	bl	800b820 <HAL_PCD_EP_Transmit>
 801a0e6:	4603      	mov	r3, r0
 801a0e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a0ea:	7dfb      	ldrb	r3, [r7, #23]
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f000 f853 	bl	801a198 <USBD_Get_USB_Status>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a0f6:	7dbb      	ldrb	r3, [r7, #22]
}
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	3718      	adds	r7, #24
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd80      	pop	{r7, pc}

0801a100 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b086      	sub	sp, #24
 801a104:	af00      	add	r7, sp, #0
 801a106:	60f8      	str	r0, [r7, #12]
 801a108:	607a      	str	r2, [r7, #4]
 801a10a:	603b      	str	r3, [r7, #0]
 801a10c:	460b      	mov	r3, r1
 801a10e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a110:	2300      	movs	r3, #0
 801a112:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a114:	2300      	movs	r3, #0
 801a116:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a11e:	7af9      	ldrb	r1, [r7, #11]
 801a120:	683b      	ldr	r3, [r7, #0]
 801a122:	687a      	ldr	r2, [r7, #4]
 801a124:	f7f1 fb19 	bl	800b75a <HAL_PCD_EP_Receive>
 801a128:	4603      	mov	r3, r0
 801a12a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a12c:	7dfb      	ldrb	r3, [r7, #23]
 801a12e:	4618      	mov	r0, r3
 801a130:	f000 f832 	bl	801a198 <USBD_Get_USB_Status>
 801a134:	4603      	mov	r3, r0
 801a136:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a138:	7dbb      	ldrb	r3, [r7, #22]
}
 801a13a:	4618      	mov	r0, r3
 801a13c:	3718      	adds	r7, #24
 801a13e:	46bd      	mov	sp, r7
 801a140:	bd80      	pop	{r7, pc}

0801a142 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a142:	b580      	push	{r7, lr}
 801a144:	b082      	sub	sp, #8
 801a146:	af00      	add	r7, sp, #0
 801a148:	6078      	str	r0, [r7, #4]
 801a14a:	460b      	mov	r3, r1
 801a14c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a154:	78fa      	ldrb	r2, [r7, #3]
 801a156:	4611      	mov	r1, r2
 801a158:	4618      	mov	r0, r3
 801a15a:	f7f1 fb49 	bl	800b7f0 <HAL_PCD_EP_GetRxCount>
 801a15e:	4603      	mov	r3, r0
}
 801a160:	4618      	mov	r0, r3
 801a162:	3708      	adds	r7, #8
 801a164:	46bd      	mov	sp, r7
 801a166:	bd80      	pop	{r7, pc}

0801a168 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a168:	b480      	push	{r7}
 801a16a:	b083      	sub	sp, #12
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a170:	4b03      	ldr	r3, [pc, #12]	; (801a180 <USBD_static_malloc+0x18>)
}
 801a172:	4618      	mov	r0, r3
 801a174:	370c      	adds	r7, #12
 801a176:	46bd      	mov	sp, r7
 801a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17c:	4770      	bx	lr
 801a17e:	bf00      	nop
 801a180:	20005c90 	.word	0x20005c90

0801a184 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a184:	b480      	push	{r7}
 801a186:	b083      	sub	sp, #12
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]

}
 801a18c:	bf00      	nop
 801a18e:	370c      	adds	r7, #12
 801a190:	46bd      	mov	sp, r7
 801a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a196:	4770      	bx	lr

0801a198 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a198:	b480      	push	{r7}
 801a19a:	b085      	sub	sp, #20
 801a19c:	af00      	add	r7, sp, #0
 801a19e:	4603      	mov	r3, r0
 801a1a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a1a6:	79fb      	ldrb	r3, [r7, #7]
 801a1a8:	2b03      	cmp	r3, #3
 801a1aa:	d817      	bhi.n	801a1dc <USBD_Get_USB_Status+0x44>
 801a1ac:	a201      	add	r2, pc, #4	; (adr r2, 801a1b4 <USBD_Get_USB_Status+0x1c>)
 801a1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1b2:	bf00      	nop
 801a1b4:	0801a1c5 	.word	0x0801a1c5
 801a1b8:	0801a1cb 	.word	0x0801a1cb
 801a1bc:	0801a1d1 	.word	0x0801a1d1
 801a1c0:	0801a1d7 	.word	0x0801a1d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	73fb      	strb	r3, [r7, #15]
    break;
 801a1c8:	e00b      	b.n	801a1e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a1ca:	2303      	movs	r3, #3
 801a1cc:	73fb      	strb	r3, [r7, #15]
    break;
 801a1ce:	e008      	b.n	801a1e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	73fb      	strb	r3, [r7, #15]
    break;
 801a1d4:	e005      	b.n	801a1e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a1d6:	2303      	movs	r3, #3
 801a1d8:	73fb      	strb	r3, [r7, #15]
    break;
 801a1da:	e002      	b.n	801a1e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a1dc:	2303      	movs	r3, #3
 801a1de:	73fb      	strb	r3, [r7, #15]
    break;
 801a1e0:	bf00      	nop
  }
  return usb_status;
 801a1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	3714      	adds	r7, #20
 801a1e8:	46bd      	mov	sp, r7
 801a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ee:	4770      	bx	lr

0801a1f0 <_Znwj>:
 801a1f0:	2801      	cmp	r0, #1
 801a1f2:	bf38      	it	cc
 801a1f4:	2001      	movcc	r0, #1
 801a1f6:	b510      	push	{r4, lr}
 801a1f8:	4604      	mov	r4, r0
 801a1fa:	4620      	mov	r0, r4
 801a1fc:	f001 fa24 	bl	801b648 <malloc>
 801a200:	b930      	cbnz	r0, 801a210 <_Znwj+0x20>
 801a202:	f000 f81b 	bl	801a23c <_ZSt15get_new_handlerv>
 801a206:	b908      	cbnz	r0, 801a20c <_Znwj+0x1c>
 801a208:	f000 ffd4 	bl	801b1b4 <abort>
 801a20c:	4780      	blx	r0
 801a20e:	e7f4      	b.n	801a1fa <_Znwj+0xa>
 801a210:	bd10      	pop	{r4, pc}

0801a212 <__cxa_pure_virtual>:
 801a212:	b508      	push	{r3, lr}
 801a214:	f000 f80c 	bl	801a230 <_ZSt9terminatev>

0801a218 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801a218:	b508      	push	{r3, lr}
 801a21a:	4780      	blx	r0
 801a21c:	f000 ffca 	bl	801b1b4 <abort>

0801a220 <_ZSt13get_terminatev>:
 801a220:	4b02      	ldr	r3, [pc, #8]	; (801a22c <_ZSt13get_terminatev+0xc>)
 801a222:	6818      	ldr	r0, [r3, #0]
 801a224:	f3bf 8f5b 	dmb	ish
 801a228:	4770      	bx	lr
 801a22a:	bf00      	nop
 801a22c:	200001f8 	.word	0x200001f8

0801a230 <_ZSt9terminatev>:
 801a230:	b508      	push	{r3, lr}
 801a232:	f7ff fff5 	bl	801a220 <_ZSt13get_terminatev>
 801a236:	f7ff ffef 	bl	801a218 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801a23c <_ZSt15get_new_handlerv>:
 801a23c:	4b02      	ldr	r3, [pc, #8]	; (801a248 <_ZSt15get_new_handlerv+0xc>)
 801a23e:	6818      	ldr	r0, [r3, #0]
 801a240:	f3bf 8f5b 	dmb	ish
 801a244:	4770      	bx	lr
 801a246:	bf00      	nop
 801a248:	20005eb0 	.word	0x20005eb0

0801a24c <pow>:
 801a24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a250:	ec59 8b10 	vmov	r8, r9, d0
 801a254:	ec57 6b11 	vmov	r6, r7, d1
 801a258:	f000 f8a6 	bl	801a3a8 <__ieee754_pow>
 801a25c:	4b4e      	ldr	r3, [pc, #312]	; (801a398 <pow+0x14c>)
 801a25e:	f993 3000 	ldrsb.w	r3, [r3]
 801a262:	3301      	adds	r3, #1
 801a264:	ec55 4b10 	vmov	r4, r5, d0
 801a268:	d015      	beq.n	801a296 <pow+0x4a>
 801a26a:	4632      	mov	r2, r6
 801a26c:	463b      	mov	r3, r7
 801a26e:	4630      	mov	r0, r6
 801a270:	4639      	mov	r1, r7
 801a272:	f7e6 fc7b 	bl	8000b6c <__aeabi_dcmpun>
 801a276:	b970      	cbnz	r0, 801a296 <pow+0x4a>
 801a278:	4642      	mov	r2, r8
 801a27a:	464b      	mov	r3, r9
 801a27c:	4640      	mov	r0, r8
 801a27e:	4649      	mov	r1, r9
 801a280:	f7e6 fc74 	bl	8000b6c <__aeabi_dcmpun>
 801a284:	2200      	movs	r2, #0
 801a286:	2300      	movs	r3, #0
 801a288:	b148      	cbz	r0, 801a29e <pow+0x52>
 801a28a:	4630      	mov	r0, r6
 801a28c:	4639      	mov	r1, r7
 801a28e:	f7e6 fc3b 	bl	8000b08 <__aeabi_dcmpeq>
 801a292:	2800      	cmp	r0, #0
 801a294:	d17d      	bne.n	801a392 <pow+0x146>
 801a296:	ec45 4b10 	vmov	d0, r4, r5
 801a29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a29e:	4640      	mov	r0, r8
 801a2a0:	4649      	mov	r1, r9
 801a2a2:	f7e6 fc31 	bl	8000b08 <__aeabi_dcmpeq>
 801a2a6:	b1e0      	cbz	r0, 801a2e2 <pow+0x96>
 801a2a8:	2200      	movs	r2, #0
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	4630      	mov	r0, r6
 801a2ae:	4639      	mov	r1, r7
 801a2b0:	f7e6 fc2a 	bl	8000b08 <__aeabi_dcmpeq>
 801a2b4:	2800      	cmp	r0, #0
 801a2b6:	d16c      	bne.n	801a392 <pow+0x146>
 801a2b8:	ec47 6b10 	vmov	d0, r6, r7
 801a2bc:	f000 fe53 	bl	801af66 <finite>
 801a2c0:	2800      	cmp	r0, #0
 801a2c2:	d0e8      	beq.n	801a296 <pow+0x4a>
 801a2c4:	2200      	movs	r2, #0
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	4630      	mov	r0, r6
 801a2ca:	4639      	mov	r1, r7
 801a2cc:	f7e6 fc26 	bl	8000b1c <__aeabi_dcmplt>
 801a2d0:	2800      	cmp	r0, #0
 801a2d2:	d0e0      	beq.n	801a296 <pow+0x4a>
 801a2d4:	f000 ff76 	bl	801b1c4 <__errno>
 801a2d8:	2321      	movs	r3, #33	; 0x21
 801a2da:	6003      	str	r3, [r0, #0]
 801a2dc:	2400      	movs	r4, #0
 801a2de:	4d2f      	ldr	r5, [pc, #188]	; (801a39c <pow+0x150>)
 801a2e0:	e7d9      	b.n	801a296 <pow+0x4a>
 801a2e2:	ec45 4b10 	vmov	d0, r4, r5
 801a2e6:	f000 fe3e 	bl	801af66 <finite>
 801a2ea:	bbb8      	cbnz	r0, 801a35c <pow+0x110>
 801a2ec:	ec49 8b10 	vmov	d0, r8, r9
 801a2f0:	f000 fe39 	bl	801af66 <finite>
 801a2f4:	b390      	cbz	r0, 801a35c <pow+0x110>
 801a2f6:	ec47 6b10 	vmov	d0, r6, r7
 801a2fa:	f000 fe34 	bl	801af66 <finite>
 801a2fe:	b368      	cbz	r0, 801a35c <pow+0x110>
 801a300:	4622      	mov	r2, r4
 801a302:	462b      	mov	r3, r5
 801a304:	4620      	mov	r0, r4
 801a306:	4629      	mov	r1, r5
 801a308:	f7e6 fc30 	bl	8000b6c <__aeabi_dcmpun>
 801a30c:	b160      	cbz	r0, 801a328 <pow+0xdc>
 801a30e:	f000 ff59 	bl	801b1c4 <__errno>
 801a312:	2321      	movs	r3, #33	; 0x21
 801a314:	6003      	str	r3, [r0, #0]
 801a316:	2200      	movs	r2, #0
 801a318:	2300      	movs	r3, #0
 801a31a:	4610      	mov	r0, r2
 801a31c:	4619      	mov	r1, r3
 801a31e:	f7e6 fab5 	bl	800088c <__aeabi_ddiv>
 801a322:	4604      	mov	r4, r0
 801a324:	460d      	mov	r5, r1
 801a326:	e7b6      	b.n	801a296 <pow+0x4a>
 801a328:	f000 ff4c 	bl	801b1c4 <__errno>
 801a32c:	2322      	movs	r3, #34	; 0x22
 801a32e:	6003      	str	r3, [r0, #0]
 801a330:	2200      	movs	r2, #0
 801a332:	2300      	movs	r3, #0
 801a334:	4640      	mov	r0, r8
 801a336:	4649      	mov	r1, r9
 801a338:	f7e6 fbf0 	bl	8000b1c <__aeabi_dcmplt>
 801a33c:	2400      	movs	r4, #0
 801a33e:	b158      	cbz	r0, 801a358 <pow+0x10c>
 801a340:	ec47 6b10 	vmov	d0, r6, r7
 801a344:	f000 fe24 	bl	801af90 <rint>
 801a348:	4632      	mov	r2, r6
 801a34a:	ec51 0b10 	vmov	r0, r1, d0
 801a34e:	463b      	mov	r3, r7
 801a350:	f7e6 fbda 	bl	8000b08 <__aeabi_dcmpeq>
 801a354:	2800      	cmp	r0, #0
 801a356:	d0c2      	beq.n	801a2de <pow+0x92>
 801a358:	4d11      	ldr	r5, [pc, #68]	; (801a3a0 <pow+0x154>)
 801a35a:	e79c      	b.n	801a296 <pow+0x4a>
 801a35c:	2200      	movs	r2, #0
 801a35e:	2300      	movs	r3, #0
 801a360:	4620      	mov	r0, r4
 801a362:	4629      	mov	r1, r5
 801a364:	f7e6 fbd0 	bl	8000b08 <__aeabi_dcmpeq>
 801a368:	2800      	cmp	r0, #0
 801a36a:	d094      	beq.n	801a296 <pow+0x4a>
 801a36c:	ec49 8b10 	vmov	d0, r8, r9
 801a370:	f000 fdf9 	bl	801af66 <finite>
 801a374:	2800      	cmp	r0, #0
 801a376:	d08e      	beq.n	801a296 <pow+0x4a>
 801a378:	ec47 6b10 	vmov	d0, r6, r7
 801a37c:	f000 fdf3 	bl	801af66 <finite>
 801a380:	2800      	cmp	r0, #0
 801a382:	d088      	beq.n	801a296 <pow+0x4a>
 801a384:	f000 ff1e 	bl	801b1c4 <__errno>
 801a388:	2322      	movs	r3, #34	; 0x22
 801a38a:	6003      	str	r3, [r0, #0]
 801a38c:	2400      	movs	r4, #0
 801a38e:	2500      	movs	r5, #0
 801a390:	e781      	b.n	801a296 <pow+0x4a>
 801a392:	4d04      	ldr	r5, [pc, #16]	; (801a3a4 <pow+0x158>)
 801a394:	2400      	movs	r4, #0
 801a396:	e77e      	b.n	801a296 <pow+0x4a>
 801a398:	200001fc 	.word	0x200001fc
 801a39c:	fff00000 	.word	0xfff00000
 801a3a0:	7ff00000 	.word	0x7ff00000
 801a3a4:	3ff00000 	.word	0x3ff00000

0801a3a8 <__ieee754_pow>:
 801a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3ac:	ed2d 8b06 	vpush	{d8-d10}
 801a3b0:	b08d      	sub	sp, #52	; 0x34
 801a3b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801a3b6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801a3ba:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801a3be:	ea56 0100 	orrs.w	r1, r6, r0
 801a3c2:	ec53 2b10 	vmov	r2, r3, d0
 801a3c6:	f000 84d1 	beq.w	801ad6c <__ieee754_pow+0x9c4>
 801a3ca:	497f      	ldr	r1, [pc, #508]	; (801a5c8 <__ieee754_pow+0x220>)
 801a3cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801a3d0:	428c      	cmp	r4, r1
 801a3d2:	ee10 8a10 	vmov	r8, s0
 801a3d6:	4699      	mov	r9, r3
 801a3d8:	dc09      	bgt.n	801a3ee <__ieee754_pow+0x46>
 801a3da:	d103      	bne.n	801a3e4 <__ieee754_pow+0x3c>
 801a3dc:	b97a      	cbnz	r2, 801a3fe <__ieee754_pow+0x56>
 801a3de:	42a6      	cmp	r6, r4
 801a3e0:	dd02      	ble.n	801a3e8 <__ieee754_pow+0x40>
 801a3e2:	e00c      	b.n	801a3fe <__ieee754_pow+0x56>
 801a3e4:	428e      	cmp	r6, r1
 801a3e6:	dc02      	bgt.n	801a3ee <__ieee754_pow+0x46>
 801a3e8:	428e      	cmp	r6, r1
 801a3ea:	d110      	bne.n	801a40e <__ieee754_pow+0x66>
 801a3ec:	b178      	cbz	r0, 801a40e <__ieee754_pow+0x66>
 801a3ee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a3f2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a3f6:	ea54 0308 	orrs.w	r3, r4, r8
 801a3fa:	f000 84b7 	beq.w	801ad6c <__ieee754_pow+0x9c4>
 801a3fe:	4873      	ldr	r0, [pc, #460]	; (801a5cc <__ieee754_pow+0x224>)
 801a400:	b00d      	add	sp, #52	; 0x34
 801a402:	ecbd 8b06 	vpop	{d8-d10}
 801a406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a40a:	f000 bdb9 	b.w	801af80 <nan>
 801a40e:	f1b9 0f00 	cmp.w	r9, #0
 801a412:	da36      	bge.n	801a482 <__ieee754_pow+0xda>
 801a414:	496e      	ldr	r1, [pc, #440]	; (801a5d0 <__ieee754_pow+0x228>)
 801a416:	428e      	cmp	r6, r1
 801a418:	dc51      	bgt.n	801a4be <__ieee754_pow+0x116>
 801a41a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801a41e:	428e      	cmp	r6, r1
 801a420:	f340 84af 	ble.w	801ad82 <__ieee754_pow+0x9da>
 801a424:	1531      	asrs	r1, r6, #20
 801a426:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a42a:	2914      	cmp	r1, #20
 801a42c:	dd0f      	ble.n	801a44e <__ieee754_pow+0xa6>
 801a42e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801a432:	fa20 fc01 	lsr.w	ip, r0, r1
 801a436:	fa0c f101 	lsl.w	r1, ip, r1
 801a43a:	4281      	cmp	r1, r0
 801a43c:	f040 84a1 	bne.w	801ad82 <__ieee754_pow+0x9da>
 801a440:	f00c 0c01 	and.w	ip, ip, #1
 801a444:	f1cc 0102 	rsb	r1, ip, #2
 801a448:	9100      	str	r1, [sp, #0]
 801a44a:	b180      	cbz	r0, 801a46e <__ieee754_pow+0xc6>
 801a44c:	e059      	b.n	801a502 <__ieee754_pow+0x15a>
 801a44e:	2800      	cmp	r0, #0
 801a450:	d155      	bne.n	801a4fe <__ieee754_pow+0x156>
 801a452:	f1c1 0114 	rsb	r1, r1, #20
 801a456:	fa46 fc01 	asr.w	ip, r6, r1
 801a45a:	fa0c f101 	lsl.w	r1, ip, r1
 801a45e:	42b1      	cmp	r1, r6
 801a460:	f040 848c 	bne.w	801ad7c <__ieee754_pow+0x9d4>
 801a464:	f00c 0c01 	and.w	ip, ip, #1
 801a468:	f1cc 0102 	rsb	r1, ip, #2
 801a46c:	9100      	str	r1, [sp, #0]
 801a46e:	4959      	ldr	r1, [pc, #356]	; (801a5d4 <__ieee754_pow+0x22c>)
 801a470:	428e      	cmp	r6, r1
 801a472:	d12d      	bne.n	801a4d0 <__ieee754_pow+0x128>
 801a474:	2f00      	cmp	r7, #0
 801a476:	da79      	bge.n	801a56c <__ieee754_pow+0x1c4>
 801a478:	4956      	ldr	r1, [pc, #344]	; (801a5d4 <__ieee754_pow+0x22c>)
 801a47a:	2000      	movs	r0, #0
 801a47c:	f7e6 fa06 	bl	800088c <__aeabi_ddiv>
 801a480:	e016      	b.n	801a4b0 <__ieee754_pow+0x108>
 801a482:	2100      	movs	r1, #0
 801a484:	9100      	str	r1, [sp, #0]
 801a486:	2800      	cmp	r0, #0
 801a488:	d13b      	bne.n	801a502 <__ieee754_pow+0x15a>
 801a48a:	494f      	ldr	r1, [pc, #316]	; (801a5c8 <__ieee754_pow+0x220>)
 801a48c:	428e      	cmp	r6, r1
 801a48e:	d1ee      	bne.n	801a46e <__ieee754_pow+0xc6>
 801a490:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a494:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a498:	ea53 0308 	orrs.w	r3, r3, r8
 801a49c:	f000 8466 	beq.w	801ad6c <__ieee754_pow+0x9c4>
 801a4a0:	4b4d      	ldr	r3, [pc, #308]	; (801a5d8 <__ieee754_pow+0x230>)
 801a4a2:	429c      	cmp	r4, r3
 801a4a4:	dd0d      	ble.n	801a4c2 <__ieee754_pow+0x11a>
 801a4a6:	2f00      	cmp	r7, #0
 801a4a8:	f280 8464 	bge.w	801ad74 <__ieee754_pow+0x9cc>
 801a4ac:	2000      	movs	r0, #0
 801a4ae:	2100      	movs	r1, #0
 801a4b0:	ec41 0b10 	vmov	d0, r0, r1
 801a4b4:	b00d      	add	sp, #52	; 0x34
 801a4b6:	ecbd 8b06 	vpop	{d8-d10}
 801a4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4be:	2102      	movs	r1, #2
 801a4c0:	e7e0      	b.n	801a484 <__ieee754_pow+0xdc>
 801a4c2:	2f00      	cmp	r7, #0
 801a4c4:	daf2      	bge.n	801a4ac <__ieee754_pow+0x104>
 801a4c6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801a4ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a4ce:	e7ef      	b.n	801a4b0 <__ieee754_pow+0x108>
 801a4d0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801a4d4:	d104      	bne.n	801a4e0 <__ieee754_pow+0x138>
 801a4d6:	4610      	mov	r0, r2
 801a4d8:	4619      	mov	r1, r3
 801a4da:	f7e6 f8ad 	bl	8000638 <__aeabi_dmul>
 801a4de:	e7e7      	b.n	801a4b0 <__ieee754_pow+0x108>
 801a4e0:	493e      	ldr	r1, [pc, #248]	; (801a5dc <__ieee754_pow+0x234>)
 801a4e2:	428f      	cmp	r7, r1
 801a4e4:	d10d      	bne.n	801a502 <__ieee754_pow+0x15a>
 801a4e6:	f1b9 0f00 	cmp.w	r9, #0
 801a4ea:	db0a      	blt.n	801a502 <__ieee754_pow+0x15a>
 801a4ec:	ec43 2b10 	vmov	d0, r2, r3
 801a4f0:	b00d      	add	sp, #52	; 0x34
 801a4f2:	ecbd 8b06 	vpop	{d8-d10}
 801a4f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4fa:	f000 bc77 	b.w	801adec <__ieee754_sqrt>
 801a4fe:	2100      	movs	r1, #0
 801a500:	9100      	str	r1, [sp, #0]
 801a502:	ec43 2b10 	vmov	d0, r2, r3
 801a506:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a50a:	f000 fd23 	bl	801af54 <fabs>
 801a50e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a512:	ec51 0b10 	vmov	r0, r1, d0
 801a516:	f1b8 0f00 	cmp.w	r8, #0
 801a51a:	d12a      	bne.n	801a572 <__ieee754_pow+0x1ca>
 801a51c:	b12c      	cbz	r4, 801a52a <__ieee754_pow+0x182>
 801a51e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801a5d4 <__ieee754_pow+0x22c>
 801a522:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801a526:	45e6      	cmp	lr, ip
 801a528:	d123      	bne.n	801a572 <__ieee754_pow+0x1ca>
 801a52a:	2f00      	cmp	r7, #0
 801a52c:	da05      	bge.n	801a53a <__ieee754_pow+0x192>
 801a52e:	4602      	mov	r2, r0
 801a530:	460b      	mov	r3, r1
 801a532:	2000      	movs	r0, #0
 801a534:	4927      	ldr	r1, [pc, #156]	; (801a5d4 <__ieee754_pow+0x22c>)
 801a536:	f7e6 f9a9 	bl	800088c <__aeabi_ddiv>
 801a53a:	f1b9 0f00 	cmp.w	r9, #0
 801a53e:	dab7      	bge.n	801a4b0 <__ieee754_pow+0x108>
 801a540:	9b00      	ldr	r3, [sp, #0]
 801a542:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a546:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a54a:	4323      	orrs	r3, r4
 801a54c:	d108      	bne.n	801a560 <__ieee754_pow+0x1b8>
 801a54e:	4602      	mov	r2, r0
 801a550:	460b      	mov	r3, r1
 801a552:	4610      	mov	r0, r2
 801a554:	4619      	mov	r1, r3
 801a556:	f7e5 feb7 	bl	80002c8 <__aeabi_dsub>
 801a55a:	4602      	mov	r2, r0
 801a55c:	460b      	mov	r3, r1
 801a55e:	e78d      	b.n	801a47c <__ieee754_pow+0xd4>
 801a560:	9b00      	ldr	r3, [sp, #0]
 801a562:	2b01      	cmp	r3, #1
 801a564:	d1a4      	bne.n	801a4b0 <__ieee754_pow+0x108>
 801a566:	4602      	mov	r2, r0
 801a568:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a56c:	4610      	mov	r0, r2
 801a56e:	4619      	mov	r1, r3
 801a570:	e79e      	b.n	801a4b0 <__ieee754_pow+0x108>
 801a572:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801a576:	f10c 35ff 	add.w	r5, ip, #4294967295
 801a57a:	950a      	str	r5, [sp, #40]	; 0x28
 801a57c:	9d00      	ldr	r5, [sp, #0]
 801a57e:	46ac      	mov	ip, r5
 801a580:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a582:	ea5c 0505 	orrs.w	r5, ip, r5
 801a586:	d0e4      	beq.n	801a552 <__ieee754_pow+0x1aa>
 801a588:	4b15      	ldr	r3, [pc, #84]	; (801a5e0 <__ieee754_pow+0x238>)
 801a58a:	429e      	cmp	r6, r3
 801a58c:	f340 80fc 	ble.w	801a788 <__ieee754_pow+0x3e0>
 801a590:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a594:	429e      	cmp	r6, r3
 801a596:	4b10      	ldr	r3, [pc, #64]	; (801a5d8 <__ieee754_pow+0x230>)
 801a598:	dd07      	ble.n	801a5aa <__ieee754_pow+0x202>
 801a59a:	429c      	cmp	r4, r3
 801a59c:	dc0a      	bgt.n	801a5b4 <__ieee754_pow+0x20c>
 801a59e:	2f00      	cmp	r7, #0
 801a5a0:	da84      	bge.n	801a4ac <__ieee754_pow+0x104>
 801a5a2:	a307      	add	r3, pc, #28	; (adr r3, 801a5c0 <__ieee754_pow+0x218>)
 801a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5a8:	e795      	b.n	801a4d6 <__ieee754_pow+0x12e>
 801a5aa:	429c      	cmp	r4, r3
 801a5ac:	dbf7      	blt.n	801a59e <__ieee754_pow+0x1f6>
 801a5ae:	4b09      	ldr	r3, [pc, #36]	; (801a5d4 <__ieee754_pow+0x22c>)
 801a5b0:	429c      	cmp	r4, r3
 801a5b2:	dd17      	ble.n	801a5e4 <__ieee754_pow+0x23c>
 801a5b4:	2f00      	cmp	r7, #0
 801a5b6:	dcf4      	bgt.n	801a5a2 <__ieee754_pow+0x1fa>
 801a5b8:	e778      	b.n	801a4ac <__ieee754_pow+0x104>
 801a5ba:	bf00      	nop
 801a5bc:	f3af 8000 	nop.w
 801a5c0:	8800759c 	.word	0x8800759c
 801a5c4:	7e37e43c 	.word	0x7e37e43c
 801a5c8:	7ff00000 	.word	0x7ff00000
 801a5cc:	08023567 	.word	0x08023567
 801a5d0:	433fffff 	.word	0x433fffff
 801a5d4:	3ff00000 	.word	0x3ff00000
 801a5d8:	3fefffff 	.word	0x3fefffff
 801a5dc:	3fe00000 	.word	0x3fe00000
 801a5e0:	41e00000 	.word	0x41e00000
 801a5e4:	4b64      	ldr	r3, [pc, #400]	; (801a778 <__ieee754_pow+0x3d0>)
 801a5e6:	2200      	movs	r2, #0
 801a5e8:	f7e5 fe6e 	bl	80002c8 <__aeabi_dsub>
 801a5ec:	a356      	add	r3, pc, #344	; (adr r3, 801a748 <__ieee754_pow+0x3a0>)
 801a5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5f2:	4604      	mov	r4, r0
 801a5f4:	460d      	mov	r5, r1
 801a5f6:	f7e6 f81f 	bl	8000638 <__aeabi_dmul>
 801a5fa:	a355      	add	r3, pc, #340	; (adr r3, 801a750 <__ieee754_pow+0x3a8>)
 801a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a600:	4606      	mov	r6, r0
 801a602:	460f      	mov	r7, r1
 801a604:	4620      	mov	r0, r4
 801a606:	4629      	mov	r1, r5
 801a608:	f7e6 f816 	bl	8000638 <__aeabi_dmul>
 801a60c:	4b5b      	ldr	r3, [pc, #364]	; (801a77c <__ieee754_pow+0x3d4>)
 801a60e:	4682      	mov	sl, r0
 801a610:	468b      	mov	fp, r1
 801a612:	2200      	movs	r2, #0
 801a614:	4620      	mov	r0, r4
 801a616:	4629      	mov	r1, r5
 801a618:	f7e6 f80e 	bl	8000638 <__aeabi_dmul>
 801a61c:	4602      	mov	r2, r0
 801a61e:	460b      	mov	r3, r1
 801a620:	a14d      	add	r1, pc, #308	; (adr r1, 801a758 <__ieee754_pow+0x3b0>)
 801a622:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a626:	f7e5 fe4f 	bl	80002c8 <__aeabi_dsub>
 801a62a:	4622      	mov	r2, r4
 801a62c:	462b      	mov	r3, r5
 801a62e:	f7e6 f803 	bl	8000638 <__aeabi_dmul>
 801a632:	4602      	mov	r2, r0
 801a634:	460b      	mov	r3, r1
 801a636:	2000      	movs	r0, #0
 801a638:	4951      	ldr	r1, [pc, #324]	; (801a780 <__ieee754_pow+0x3d8>)
 801a63a:	f7e5 fe45 	bl	80002c8 <__aeabi_dsub>
 801a63e:	4622      	mov	r2, r4
 801a640:	4680      	mov	r8, r0
 801a642:	4689      	mov	r9, r1
 801a644:	462b      	mov	r3, r5
 801a646:	4620      	mov	r0, r4
 801a648:	4629      	mov	r1, r5
 801a64a:	f7e5 fff5 	bl	8000638 <__aeabi_dmul>
 801a64e:	4602      	mov	r2, r0
 801a650:	460b      	mov	r3, r1
 801a652:	4640      	mov	r0, r8
 801a654:	4649      	mov	r1, r9
 801a656:	f7e5 ffef 	bl	8000638 <__aeabi_dmul>
 801a65a:	a341      	add	r3, pc, #260	; (adr r3, 801a760 <__ieee754_pow+0x3b8>)
 801a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a660:	f7e5 ffea 	bl	8000638 <__aeabi_dmul>
 801a664:	4602      	mov	r2, r0
 801a666:	460b      	mov	r3, r1
 801a668:	4650      	mov	r0, sl
 801a66a:	4659      	mov	r1, fp
 801a66c:	f7e5 fe2c 	bl	80002c8 <__aeabi_dsub>
 801a670:	4602      	mov	r2, r0
 801a672:	460b      	mov	r3, r1
 801a674:	4680      	mov	r8, r0
 801a676:	4689      	mov	r9, r1
 801a678:	4630      	mov	r0, r6
 801a67a:	4639      	mov	r1, r7
 801a67c:	f7e5 fe26 	bl	80002cc <__adddf3>
 801a680:	2400      	movs	r4, #0
 801a682:	4632      	mov	r2, r6
 801a684:	463b      	mov	r3, r7
 801a686:	4620      	mov	r0, r4
 801a688:	460d      	mov	r5, r1
 801a68a:	f7e5 fe1d 	bl	80002c8 <__aeabi_dsub>
 801a68e:	4602      	mov	r2, r0
 801a690:	460b      	mov	r3, r1
 801a692:	4640      	mov	r0, r8
 801a694:	4649      	mov	r1, r9
 801a696:	f7e5 fe17 	bl	80002c8 <__aeabi_dsub>
 801a69a:	9b00      	ldr	r3, [sp, #0]
 801a69c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a69e:	3b01      	subs	r3, #1
 801a6a0:	4313      	orrs	r3, r2
 801a6a2:	4682      	mov	sl, r0
 801a6a4:	468b      	mov	fp, r1
 801a6a6:	f040 81f1 	bne.w	801aa8c <__ieee754_pow+0x6e4>
 801a6aa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801a768 <__ieee754_pow+0x3c0>
 801a6ae:	eeb0 8a47 	vmov.f32	s16, s14
 801a6b2:	eef0 8a67 	vmov.f32	s17, s15
 801a6b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a6ba:	2600      	movs	r6, #0
 801a6bc:	4632      	mov	r2, r6
 801a6be:	463b      	mov	r3, r7
 801a6c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a6c4:	f7e5 fe00 	bl	80002c8 <__aeabi_dsub>
 801a6c8:	4622      	mov	r2, r4
 801a6ca:	462b      	mov	r3, r5
 801a6cc:	f7e5 ffb4 	bl	8000638 <__aeabi_dmul>
 801a6d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a6d4:	4680      	mov	r8, r0
 801a6d6:	4689      	mov	r9, r1
 801a6d8:	4650      	mov	r0, sl
 801a6da:	4659      	mov	r1, fp
 801a6dc:	f7e5 ffac 	bl	8000638 <__aeabi_dmul>
 801a6e0:	4602      	mov	r2, r0
 801a6e2:	460b      	mov	r3, r1
 801a6e4:	4640      	mov	r0, r8
 801a6e6:	4649      	mov	r1, r9
 801a6e8:	f7e5 fdf0 	bl	80002cc <__adddf3>
 801a6ec:	4632      	mov	r2, r6
 801a6ee:	463b      	mov	r3, r7
 801a6f0:	4680      	mov	r8, r0
 801a6f2:	4689      	mov	r9, r1
 801a6f4:	4620      	mov	r0, r4
 801a6f6:	4629      	mov	r1, r5
 801a6f8:	f7e5 ff9e 	bl	8000638 <__aeabi_dmul>
 801a6fc:	460b      	mov	r3, r1
 801a6fe:	4604      	mov	r4, r0
 801a700:	460d      	mov	r5, r1
 801a702:	4602      	mov	r2, r0
 801a704:	4649      	mov	r1, r9
 801a706:	4640      	mov	r0, r8
 801a708:	f7e5 fde0 	bl	80002cc <__adddf3>
 801a70c:	4b1d      	ldr	r3, [pc, #116]	; (801a784 <__ieee754_pow+0x3dc>)
 801a70e:	4299      	cmp	r1, r3
 801a710:	ec45 4b19 	vmov	d9, r4, r5
 801a714:	4606      	mov	r6, r0
 801a716:	460f      	mov	r7, r1
 801a718:	468b      	mov	fp, r1
 801a71a:	f340 82fe 	ble.w	801ad1a <__ieee754_pow+0x972>
 801a71e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801a722:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801a726:	4303      	orrs	r3, r0
 801a728:	f000 81f0 	beq.w	801ab0c <__ieee754_pow+0x764>
 801a72c:	a310      	add	r3, pc, #64	; (adr r3, 801a770 <__ieee754_pow+0x3c8>)
 801a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a732:	ec51 0b18 	vmov	r0, r1, d8
 801a736:	f7e5 ff7f 	bl	8000638 <__aeabi_dmul>
 801a73a:	a30d      	add	r3, pc, #52	; (adr r3, 801a770 <__ieee754_pow+0x3c8>)
 801a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a740:	e6cb      	b.n	801a4da <__ieee754_pow+0x132>
 801a742:	bf00      	nop
 801a744:	f3af 8000 	nop.w
 801a748:	60000000 	.word	0x60000000
 801a74c:	3ff71547 	.word	0x3ff71547
 801a750:	f85ddf44 	.word	0xf85ddf44
 801a754:	3e54ae0b 	.word	0x3e54ae0b
 801a758:	55555555 	.word	0x55555555
 801a75c:	3fd55555 	.word	0x3fd55555
 801a760:	652b82fe 	.word	0x652b82fe
 801a764:	3ff71547 	.word	0x3ff71547
 801a768:	00000000 	.word	0x00000000
 801a76c:	bff00000 	.word	0xbff00000
 801a770:	8800759c 	.word	0x8800759c
 801a774:	7e37e43c 	.word	0x7e37e43c
 801a778:	3ff00000 	.word	0x3ff00000
 801a77c:	3fd00000 	.word	0x3fd00000
 801a780:	3fe00000 	.word	0x3fe00000
 801a784:	408fffff 	.word	0x408fffff
 801a788:	4bd7      	ldr	r3, [pc, #860]	; (801aae8 <__ieee754_pow+0x740>)
 801a78a:	ea03 0309 	and.w	r3, r3, r9
 801a78e:	2200      	movs	r2, #0
 801a790:	b92b      	cbnz	r3, 801a79e <__ieee754_pow+0x3f6>
 801a792:	4bd6      	ldr	r3, [pc, #856]	; (801aaec <__ieee754_pow+0x744>)
 801a794:	f7e5 ff50 	bl	8000638 <__aeabi_dmul>
 801a798:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801a79c:	460c      	mov	r4, r1
 801a79e:	1523      	asrs	r3, r4, #20
 801a7a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a7a4:	4413      	add	r3, r2
 801a7a6:	9309      	str	r3, [sp, #36]	; 0x24
 801a7a8:	4bd1      	ldr	r3, [pc, #836]	; (801aaf0 <__ieee754_pow+0x748>)
 801a7aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a7ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801a7b2:	429c      	cmp	r4, r3
 801a7b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a7b8:	dd08      	ble.n	801a7cc <__ieee754_pow+0x424>
 801a7ba:	4bce      	ldr	r3, [pc, #824]	; (801aaf4 <__ieee754_pow+0x74c>)
 801a7bc:	429c      	cmp	r4, r3
 801a7be:	f340 8163 	ble.w	801aa88 <__ieee754_pow+0x6e0>
 801a7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7c4:	3301      	adds	r3, #1
 801a7c6:	9309      	str	r3, [sp, #36]	; 0x24
 801a7c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801a7cc:	2400      	movs	r4, #0
 801a7ce:	00e3      	lsls	r3, r4, #3
 801a7d0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a7d2:	4bc9      	ldr	r3, [pc, #804]	; (801aaf8 <__ieee754_pow+0x750>)
 801a7d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a7d8:	ed93 7b00 	vldr	d7, [r3]
 801a7dc:	4629      	mov	r1, r5
 801a7de:	ec53 2b17 	vmov	r2, r3, d7
 801a7e2:	eeb0 8a47 	vmov.f32	s16, s14
 801a7e6:	eef0 8a67 	vmov.f32	s17, s15
 801a7ea:	4682      	mov	sl, r0
 801a7ec:	f7e5 fd6c 	bl	80002c8 <__aeabi_dsub>
 801a7f0:	4652      	mov	r2, sl
 801a7f2:	4606      	mov	r6, r0
 801a7f4:	460f      	mov	r7, r1
 801a7f6:	462b      	mov	r3, r5
 801a7f8:	ec51 0b18 	vmov	r0, r1, d8
 801a7fc:	f7e5 fd66 	bl	80002cc <__adddf3>
 801a800:	4602      	mov	r2, r0
 801a802:	460b      	mov	r3, r1
 801a804:	2000      	movs	r0, #0
 801a806:	49bd      	ldr	r1, [pc, #756]	; (801aafc <__ieee754_pow+0x754>)
 801a808:	f7e6 f840 	bl	800088c <__aeabi_ddiv>
 801a80c:	ec41 0b19 	vmov	d9, r0, r1
 801a810:	4602      	mov	r2, r0
 801a812:	460b      	mov	r3, r1
 801a814:	4630      	mov	r0, r6
 801a816:	4639      	mov	r1, r7
 801a818:	f7e5 ff0e 	bl	8000638 <__aeabi_dmul>
 801a81c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a820:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a824:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a828:	2300      	movs	r3, #0
 801a82a:	9304      	str	r3, [sp, #16]
 801a82c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801a830:	46ab      	mov	fp, r5
 801a832:	106d      	asrs	r5, r5, #1
 801a834:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801a838:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801a83c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801a840:	2200      	movs	r2, #0
 801a842:	4640      	mov	r0, r8
 801a844:	4649      	mov	r1, r9
 801a846:	4614      	mov	r4, r2
 801a848:	461d      	mov	r5, r3
 801a84a:	f7e5 fef5 	bl	8000638 <__aeabi_dmul>
 801a84e:	4602      	mov	r2, r0
 801a850:	460b      	mov	r3, r1
 801a852:	4630      	mov	r0, r6
 801a854:	4639      	mov	r1, r7
 801a856:	f7e5 fd37 	bl	80002c8 <__aeabi_dsub>
 801a85a:	ec53 2b18 	vmov	r2, r3, d8
 801a85e:	4606      	mov	r6, r0
 801a860:	460f      	mov	r7, r1
 801a862:	4620      	mov	r0, r4
 801a864:	4629      	mov	r1, r5
 801a866:	f7e5 fd2f 	bl	80002c8 <__aeabi_dsub>
 801a86a:	4602      	mov	r2, r0
 801a86c:	460b      	mov	r3, r1
 801a86e:	4650      	mov	r0, sl
 801a870:	4659      	mov	r1, fp
 801a872:	f7e5 fd29 	bl	80002c8 <__aeabi_dsub>
 801a876:	4642      	mov	r2, r8
 801a878:	464b      	mov	r3, r9
 801a87a:	f7e5 fedd 	bl	8000638 <__aeabi_dmul>
 801a87e:	4602      	mov	r2, r0
 801a880:	460b      	mov	r3, r1
 801a882:	4630      	mov	r0, r6
 801a884:	4639      	mov	r1, r7
 801a886:	f7e5 fd1f 	bl	80002c8 <__aeabi_dsub>
 801a88a:	ec53 2b19 	vmov	r2, r3, d9
 801a88e:	f7e5 fed3 	bl	8000638 <__aeabi_dmul>
 801a892:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a896:	ec41 0b18 	vmov	d8, r0, r1
 801a89a:	4610      	mov	r0, r2
 801a89c:	4619      	mov	r1, r3
 801a89e:	f7e5 fecb 	bl	8000638 <__aeabi_dmul>
 801a8a2:	a37d      	add	r3, pc, #500	; (adr r3, 801aa98 <__ieee754_pow+0x6f0>)
 801a8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8a8:	4604      	mov	r4, r0
 801a8aa:	460d      	mov	r5, r1
 801a8ac:	f7e5 fec4 	bl	8000638 <__aeabi_dmul>
 801a8b0:	a37b      	add	r3, pc, #492	; (adr r3, 801aaa0 <__ieee754_pow+0x6f8>)
 801a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8b6:	f7e5 fd09 	bl	80002cc <__adddf3>
 801a8ba:	4622      	mov	r2, r4
 801a8bc:	462b      	mov	r3, r5
 801a8be:	f7e5 febb 	bl	8000638 <__aeabi_dmul>
 801a8c2:	a379      	add	r3, pc, #484	; (adr r3, 801aaa8 <__ieee754_pow+0x700>)
 801a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c8:	f7e5 fd00 	bl	80002cc <__adddf3>
 801a8cc:	4622      	mov	r2, r4
 801a8ce:	462b      	mov	r3, r5
 801a8d0:	f7e5 feb2 	bl	8000638 <__aeabi_dmul>
 801a8d4:	a376      	add	r3, pc, #472	; (adr r3, 801aab0 <__ieee754_pow+0x708>)
 801a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8da:	f7e5 fcf7 	bl	80002cc <__adddf3>
 801a8de:	4622      	mov	r2, r4
 801a8e0:	462b      	mov	r3, r5
 801a8e2:	f7e5 fea9 	bl	8000638 <__aeabi_dmul>
 801a8e6:	a374      	add	r3, pc, #464	; (adr r3, 801aab8 <__ieee754_pow+0x710>)
 801a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ec:	f7e5 fcee 	bl	80002cc <__adddf3>
 801a8f0:	4622      	mov	r2, r4
 801a8f2:	462b      	mov	r3, r5
 801a8f4:	f7e5 fea0 	bl	8000638 <__aeabi_dmul>
 801a8f8:	a371      	add	r3, pc, #452	; (adr r3, 801aac0 <__ieee754_pow+0x718>)
 801a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8fe:	f7e5 fce5 	bl	80002cc <__adddf3>
 801a902:	4622      	mov	r2, r4
 801a904:	4606      	mov	r6, r0
 801a906:	460f      	mov	r7, r1
 801a908:	462b      	mov	r3, r5
 801a90a:	4620      	mov	r0, r4
 801a90c:	4629      	mov	r1, r5
 801a90e:	f7e5 fe93 	bl	8000638 <__aeabi_dmul>
 801a912:	4602      	mov	r2, r0
 801a914:	460b      	mov	r3, r1
 801a916:	4630      	mov	r0, r6
 801a918:	4639      	mov	r1, r7
 801a91a:	f7e5 fe8d 	bl	8000638 <__aeabi_dmul>
 801a91e:	4642      	mov	r2, r8
 801a920:	4604      	mov	r4, r0
 801a922:	460d      	mov	r5, r1
 801a924:	464b      	mov	r3, r9
 801a926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a92a:	f7e5 fccf 	bl	80002cc <__adddf3>
 801a92e:	ec53 2b18 	vmov	r2, r3, d8
 801a932:	f7e5 fe81 	bl	8000638 <__aeabi_dmul>
 801a936:	4622      	mov	r2, r4
 801a938:	462b      	mov	r3, r5
 801a93a:	f7e5 fcc7 	bl	80002cc <__adddf3>
 801a93e:	4642      	mov	r2, r8
 801a940:	4682      	mov	sl, r0
 801a942:	468b      	mov	fp, r1
 801a944:	464b      	mov	r3, r9
 801a946:	4640      	mov	r0, r8
 801a948:	4649      	mov	r1, r9
 801a94a:	f7e5 fe75 	bl	8000638 <__aeabi_dmul>
 801a94e:	4b6c      	ldr	r3, [pc, #432]	; (801ab00 <__ieee754_pow+0x758>)
 801a950:	2200      	movs	r2, #0
 801a952:	4606      	mov	r6, r0
 801a954:	460f      	mov	r7, r1
 801a956:	f7e5 fcb9 	bl	80002cc <__adddf3>
 801a95a:	4652      	mov	r2, sl
 801a95c:	465b      	mov	r3, fp
 801a95e:	f7e5 fcb5 	bl	80002cc <__adddf3>
 801a962:	9c04      	ldr	r4, [sp, #16]
 801a964:	460d      	mov	r5, r1
 801a966:	4622      	mov	r2, r4
 801a968:	460b      	mov	r3, r1
 801a96a:	4640      	mov	r0, r8
 801a96c:	4649      	mov	r1, r9
 801a96e:	f7e5 fe63 	bl	8000638 <__aeabi_dmul>
 801a972:	4b63      	ldr	r3, [pc, #396]	; (801ab00 <__ieee754_pow+0x758>)
 801a974:	4680      	mov	r8, r0
 801a976:	4689      	mov	r9, r1
 801a978:	2200      	movs	r2, #0
 801a97a:	4620      	mov	r0, r4
 801a97c:	4629      	mov	r1, r5
 801a97e:	f7e5 fca3 	bl	80002c8 <__aeabi_dsub>
 801a982:	4632      	mov	r2, r6
 801a984:	463b      	mov	r3, r7
 801a986:	f7e5 fc9f 	bl	80002c8 <__aeabi_dsub>
 801a98a:	4602      	mov	r2, r0
 801a98c:	460b      	mov	r3, r1
 801a98e:	4650      	mov	r0, sl
 801a990:	4659      	mov	r1, fp
 801a992:	f7e5 fc99 	bl	80002c8 <__aeabi_dsub>
 801a996:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a99a:	f7e5 fe4d 	bl	8000638 <__aeabi_dmul>
 801a99e:	4622      	mov	r2, r4
 801a9a0:	4606      	mov	r6, r0
 801a9a2:	460f      	mov	r7, r1
 801a9a4:	462b      	mov	r3, r5
 801a9a6:	ec51 0b18 	vmov	r0, r1, d8
 801a9aa:	f7e5 fe45 	bl	8000638 <__aeabi_dmul>
 801a9ae:	4602      	mov	r2, r0
 801a9b0:	460b      	mov	r3, r1
 801a9b2:	4630      	mov	r0, r6
 801a9b4:	4639      	mov	r1, r7
 801a9b6:	f7e5 fc89 	bl	80002cc <__adddf3>
 801a9ba:	4606      	mov	r6, r0
 801a9bc:	460f      	mov	r7, r1
 801a9be:	4602      	mov	r2, r0
 801a9c0:	460b      	mov	r3, r1
 801a9c2:	4640      	mov	r0, r8
 801a9c4:	4649      	mov	r1, r9
 801a9c6:	f7e5 fc81 	bl	80002cc <__adddf3>
 801a9ca:	9c04      	ldr	r4, [sp, #16]
 801a9cc:	a33e      	add	r3, pc, #248	; (adr r3, 801aac8 <__ieee754_pow+0x720>)
 801a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9d2:	4620      	mov	r0, r4
 801a9d4:	460d      	mov	r5, r1
 801a9d6:	f7e5 fe2f 	bl	8000638 <__aeabi_dmul>
 801a9da:	4642      	mov	r2, r8
 801a9dc:	ec41 0b18 	vmov	d8, r0, r1
 801a9e0:	464b      	mov	r3, r9
 801a9e2:	4620      	mov	r0, r4
 801a9e4:	4629      	mov	r1, r5
 801a9e6:	f7e5 fc6f 	bl	80002c8 <__aeabi_dsub>
 801a9ea:	4602      	mov	r2, r0
 801a9ec:	460b      	mov	r3, r1
 801a9ee:	4630      	mov	r0, r6
 801a9f0:	4639      	mov	r1, r7
 801a9f2:	f7e5 fc69 	bl	80002c8 <__aeabi_dsub>
 801a9f6:	a336      	add	r3, pc, #216	; (adr r3, 801aad0 <__ieee754_pow+0x728>)
 801a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9fc:	f7e5 fe1c 	bl	8000638 <__aeabi_dmul>
 801aa00:	a335      	add	r3, pc, #212	; (adr r3, 801aad8 <__ieee754_pow+0x730>)
 801aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa06:	4606      	mov	r6, r0
 801aa08:	460f      	mov	r7, r1
 801aa0a:	4620      	mov	r0, r4
 801aa0c:	4629      	mov	r1, r5
 801aa0e:	f7e5 fe13 	bl	8000638 <__aeabi_dmul>
 801aa12:	4602      	mov	r2, r0
 801aa14:	460b      	mov	r3, r1
 801aa16:	4630      	mov	r0, r6
 801aa18:	4639      	mov	r1, r7
 801aa1a:	f7e5 fc57 	bl	80002cc <__adddf3>
 801aa1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aa20:	4b38      	ldr	r3, [pc, #224]	; (801ab04 <__ieee754_pow+0x75c>)
 801aa22:	4413      	add	r3, r2
 801aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa28:	f7e5 fc50 	bl	80002cc <__adddf3>
 801aa2c:	4682      	mov	sl, r0
 801aa2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa30:	468b      	mov	fp, r1
 801aa32:	f7e5 fd97 	bl	8000564 <__aeabi_i2d>
 801aa36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aa38:	4b33      	ldr	r3, [pc, #204]	; (801ab08 <__ieee754_pow+0x760>)
 801aa3a:	4413      	add	r3, r2
 801aa3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801aa40:	4606      	mov	r6, r0
 801aa42:	460f      	mov	r7, r1
 801aa44:	4652      	mov	r2, sl
 801aa46:	465b      	mov	r3, fp
 801aa48:	ec51 0b18 	vmov	r0, r1, d8
 801aa4c:	f7e5 fc3e 	bl	80002cc <__adddf3>
 801aa50:	4642      	mov	r2, r8
 801aa52:	464b      	mov	r3, r9
 801aa54:	f7e5 fc3a 	bl	80002cc <__adddf3>
 801aa58:	4632      	mov	r2, r6
 801aa5a:	463b      	mov	r3, r7
 801aa5c:	f7e5 fc36 	bl	80002cc <__adddf3>
 801aa60:	9c04      	ldr	r4, [sp, #16]
 801aa62:	4632      	mov	r2, r6
 801aa64:	463b      	mov	r3, r7
 801aa66:	4620      	mov	r0, r4
 801aa68:	460d      	mov	r5, r1
 801aa6a:	f7e5 fc2d 	bl	80002c8 <__aeabi_dsub>
 801aa6e:	4642      	mov	r2, r8
 801aa70:	464b      	mov	r3, r9
 801aa72:	f7e5 fc29 	bl	80002c8 <__aeabi_dsub>
 801aa76:	ec53 2b18 	vmov	r2, r3, d8
 801aa7a:	f7e5 fc25 	bl	80002c8 <__aeabi_dsub>
 801aa7e:	4602      	mov	r2, r0
 801aa80:	460b      	mov	r3, r1
 801aa82:	4650      	mov	r0, sl
 801aa84:	4659      	mov	r1, fp
 801aa86:	e606      	b.n	801a696 <__ieee754_pow+0x2ee>
 801aa88:	2401      	movs	r4, #1
 801aa8a:	e6a0      	b.n	801a7ce <__ieee754_pow+0x426>
 801aa8c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801aae0 <__ieee754_pow+0x738>
 801aa90:	e60d      	b.n	801a6ae <__ieee754_pow+0x306>
 801aa92:	bf00      	nop
 801aa94:	f3af 8000 	nop.w
 801aa98:	4a454eef 	.word	0x4a454eef
 801aa9c:	3fca7e28 	.word	0x3fca7e28
 801aaa0:	93c9db65 	.word	0x93c9db65
 801aaa4:	3fcd864a 	.word	0x3fcd864a
 801aaa8:	a91d4101 	.word	0xa91d4101
 801aaac:	3fd17460 	.word	0x3fd17460
 801aab0:	518f264d 	.word	0x518f264d
 801aab4:	3fd55555 	.word	0x3fd55555
 801aab8:	db6fabff 	.word	0xdb6fabff
 801aabc:	3fdb6db6 	.word	0x3fdb6db6
 801aac0:	33333303 	.word	0x33333303
 801aac4:	3fe33333 	.word	0x3fe33333
 801aac8:	e0000000 	.word	0xe0000000
 801aacc:	3feec709 	.word	0x3feec709
 801aad0:	dc3a03fd 	.word	0xdc3a03fd
 801aad4:	3feec709 	.word	0x3feec709
 801aad8:	145b01f5 	.word	0x145b01f5
 801aadc:	be3e2fe0 	.word	0xbe3e2fe0
 801aae0:	00000000 	.word	0x00000000
 801aae4:	3ff00000 	.word	0x3ff00000
 801aae8:	7ff00000 	.word	0x7ff00000
 801aaec:	43400000 	.word	0x43400000
 801aaf0:	0003988e 	.word	0x0003988e
 801aaf4:	000bb679 	.word	0x000bb679
 801aaf8:	08023188 	.word	0x08023188
 801aafc:	3ff00000 	.word	0x3ff00000
 801ab00:	40080000 	.word	0x40080000
 801ab04:	080231a8 	.word	0x080231a8
 801ab08:	08023198 	.word	0x08023198
 801ab0c:	a3b5      	add	r3, pc, #724	; (adr r3, 801ade4 <__ieee754_pow+0xa3c>)
 801ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab12:	4640      	mov	r0, r8
 801ab14:	4649      	mov	r1, r9
 801ab16:	f7e5 fbd9 	bl	80002cc <__adddf3>
 801ab1a:	4622      	mov	r2, r4
 801ab1c:	ec41 0b1a 	vmov	d10, r0, r1
 801ab20:	462b      	mov	r3, r5
 801ab22:	4630      	mov	r0, r6
 801ab24:	4639      	mov	r1, r7
 801ab26:	f7e5 fbcf 	bl	80002c8 <__aeabi_dsub>
 801ab2a:	4602      	mov	r2, r0
 801ab2c:	460b      	mov	r3, r1
 801ab2e:	ec51 0b1a 	vmov	r0, r1, d10
 801ab32:	f7e6 f811 	bl	8000b58 <__aeabi_dcmpgt>
 801ab36:	2800      	cmp	r0, #0
 801ab38:	f47f adf8 	bne.w	801a72c <__ieee754_pow+0x384>
 801ab3c:	4aa4      	ldr	r2, [pc, #656]	; (801add0 <__ieee754_pow+0xa28>)
 801ab3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ab42:	4293      	cmp	r3, r2
 801ab44:	f340 810b 	ble.w	801ad5e <__ieee754_pow+0x9b6>
 801ab48:	151b      	asrs	r3, r3, #20
 801ab4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ab4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ab52:	fa4a f303 	asr.w	r3, sl, r3
 801ab56:	445b      	add	r3, fp
 801ab58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ab5c:	4e9d      	ldr	r6, [pc, #628]	; (801add4 <__ieee754_pow+0xa2c>)
 801ab5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ab62:	4116      	asrs	r6, r2
 801ab64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801ab68:	2000      	movs	r0, #0
 801ab6a:	ea23 0106 	bic.w	r1, r3, r6
 801ab6e:	f1c2 0214 	rsb	r2, r2, #20
 801ab72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ab76:	fa4a fa02 	asr.w	sl, sl, r2
 801ab7a:	f1bb 0f00 	cmp.w	fp, #0
 801ab7e:	4602      	mov	r2, r0
 801ab80:	460b      	mov	r3, r1
 801ab82:	4620      	mov	r0, r4
 801ab84:	4629      	mov	r1, r5
 801ab86:	bfb8      	it	lt
 801ab88:	f1ca 0a00 	rsblt	sl, sl, #0
 801ab8c:	f7e5 fb9c 	bl	80002c8 <__aeabi_dsub>
 801ab90:	ec41 0b19 	vmov	d9, r0, r1
 801ab94:	4642      	mov	r2, r8
 801ab96:	464b      	mov	r3, r9
 801ab98:	ec51 0b19 	vmov	r0, r1, d9
 801ab9c:	f7e5 fb96 	bl	80002cc <__adddf3>
 801aba0:	2400      	movs	r4, #0
 801aba2:	a379      	add	r3, pc, #484	; (adr r3, 801ad88 <__ieee754_pow+0x9e0>)
 801aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba8:	4620      	mov	r0, r4
 801abaa:	460d      	mov	r5, r1
 801abac:	f7e5 fd44 	bl	8000638 <__aeabi_dmul>
 801abb0:	ec53 2b19 	vmov	r2, r3, d9
 801abb4:	4606      	mov	r6, r0
 801abb6:	460f      	mov	r7, r1
 801abb8:	4620      	mov	r0, r4
 801abba:	4629      	mov	r1, r5
 801abbc:	f7e5 fb84 	bl	80002c8 <__aeabi_dsub>
 801abc0:	4602      	mov	r2, r0
 801abc2:	460b      	mov	r3, r1
 801abc4:	4640      	mov	r0, r8
 801abc6:	4649      	mov	r1, r9
 801abc8:	f7e5 fb7e 	bl	80002c8 <__aeabi_dsub>
 801abcc:	a370      	add	r3, pc, #448	; (adr r3, 801ad90 <__ieee754_pow+0x9e8>)
 801abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abd2:	f7e5 fd31 	bl	8000638 <__aeabi_dmul>
 801abd6:	a370      	add	r3, pc, #448	; (adr r3, 801ad98 <__ieee754_pow+0x9f0>)
 801abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abdc:	4680      	mov	r8, r0
 801abde:	4689      	mov	r9, r1
 801abe0:	4620      	mov	r0, r4
 801abe2:	4629      	mov	r1, r5
 801abe4:	f7e5 fd28 	bl	8000638 <__aeabi_dmul>
 801abe8:	4602      	mov	r2, r0
 801abea:	460b      	mov	r3, r1
 801abec:	4640      	mov	r0, r8
 801abee:	4649      	mov	r1, r9
 801abf0:	f7e5 fb6c 	bl	80002cc <__adddf3>
 801abf4:	4604      	mov	r4, r0
 801abf6:	460d      	mov	r5, r1
 801abf8:	4602      	mov	r2, r0
 801abfa:	460b      	mov	r3, r1
 801abfc:	4630      	mov	r0, r6
 801abfe:	4639      	mov	r1, r7
 801ac00:	f7e5 fb64 	bl	80002cc <__adddf3>
 801ac04:	4632      	mov	r2, r6
 801ac06:	463b      	mov	r3, r7
 801ac08:	4680      	mov	r8, r0
 801ac0a:	4689      	mov	r9, r1
 801ac0c:	f7e5 fb5c 	bl	80002c8 <__aeabi_dsub>
 801ac10:	4602      	mov	r2, r0
 801ac12:	460b      	mov	r3, r1
 801ac14:	4620      	mov	r0, r4
 801ac16:	4629      	mov	r1, r5
 801ac18:	f7e5 fb56 	bl	80002c8 <__aeabi_dsub>
 801ac1c:	4642      	mov	r2, r8
 801ac1e:	4606      	mov	r6, r0
 801ac20:	460f      	mov	r7, r1
 801ac22:	464b      	mov	r3, r9
 801ac24:	4640      	mov	r0, r8
 801ac26:	4649      	mov	r1, r9
 801ac28:	f7e5 fd06 	bl	8000638 <__aeabi_dmul>
 801ac2c:	a35c      	add	r3, pc, #368	; (adr r3, 801ada0 <__ieee754_pow+0x9f8>)
 801ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac32:	4604      	mov	r4, r0
 801ac34:	460d      	mov	r5, r1
 801ac36:	f7e5 fcff 	bl	8000638 <__aeabi_dmul>
 801ac3a:	a35b      	add	r3, pc, #364	; (adr r3, 801ada8 <__ieee754_pow+0xa00>)
 801ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac40:	f7e5 fb42 	bl	80002c8 <__aeabi_dsub>
 801ac44:	4622      	mov	r2, r4
 801ac46:	462b      	mov	r3, r5
 801ac48:	f7e5 fcf6 	bl	8000638 <__aeabi_dmul>
 801ac4c:	a358      	add	r3, pc, #352	; (adr r3, 801adb0 <__ieee754_pow+0xa08>)
 801ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac52:	f7e5 fb3b 	bl	80002cc <__adddf3>
 801ac56:	4622      	mov	r2, r4
 801ac58:	462b      	mov	r3, r5
 801ac5a:	f7e5 fced 	bl	8000638 <__aeabi_dmul>
 801ac5e:	a356      	add	r3, pc, #344	; (adr r3, 801adb8 <__ieee754_pow+0xa10>)
 801ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac64:	f7e5 fb30 	bl	80002c8 <__aeabi_dsub>
 801ac68:	4622      	mov	r2, r4
 801ac6a:	462b      	mov	r3, r5
 801ac6c:	f7e5 fce4 	bl	8000638 <__aeabi_dmul>
 801ac70:	a353      	add	r3, pc, #332	; (adr r3, 801adc0 <__ieee754_pow+0xa18>)
 801ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac76:	f7e5 fb29 	bl	80002cc <__adddf3>
 801ac7a:	4622      	mov	r2, r4
 801ac7c:	462b      	mov	r3, r5
 801ac7e:	f7e5 fcdb 	bl	8000638 <__aeabi_dmul>
 801ac82:	4602      	mov	r2, r0
 801ac84:	460b      	mov	r3, r1
 801ac86:	4640      	mov	r0, r8
 801ac88:	4649      	mov	r1, r9
 801ac8a:	f7e5 fb1d 	bl	80002c8 <__aeabi_dsub>
 801ac8e:	4604      	mov	r4, r0
 801ac90:	460d      	mov	r5, r1
 801ac92:	4602      	mov	r2, r0
 801ac94:	460b      	mov	r3, r1
 801ac96:	4640      	mov	r0, r8
 801ac98:	4649      	mov	r1, r9
 801ac9a:	f7e5 fccd 	bl	8000638 <__aeabi_dmul>
 801ac9e:	2200      	movs	r2, #0
 801aca0:	ec41 0b19 	vmov	d9, r0, r1
 801aca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801aca8:	4620      	mov	r0, r4
 801acaa:	4629      	mov	r1, r5
 801acac:	f7e5 fb0c 	bl	80002c8 <__aeabi_dsub>
 801acb0:	4602      	mov	r2, r0
 801acb2:	460b      	mov	r3, r1
 801acb4:	ec51 0b19 	vmov	r0, r1, d9
 801acb8:	f7e5 fde8 	bl	800088c <__aeabi_ddiv>
 801acbc:	4632      	mov	r2, r6
 801acbe:	4604      	mov	r4, r0
 801acc0:	460d      	mov	r5, r1
 801acc2:	463b      	mov	r3, r7
 801acc4:	4640      	mov	r0, r8
 801acc6:	4649      	mov	r1, r9
 801acc8:	f7e5 fcb6 	bl	8000638 <__aeabi_dmul>
 801accc:	4632      	mov	r2, r6
 801acce:	463b      	mov	r3, r7
 801acd0:	f7e5 fafc 	bl	80002cc <__adddf3>
 801acd4:	4602      	mov	r2, r0
 801acd6:	460b      	mov	r3, r1
 801acd8:	4620      	mov	r0, r4
 801acda:	4629      	mov	r1, r5
 801acdc:	f7e5 faf4 	bl	80002c8 <__aeabi_dsub>
 801ace0:	4642      	mov	r2, r8
 801ace2:	464b      	mov	r3, r9
 801ace4:	f7e5 faf0 	bl	80002c8 <__aeabi_dsub>
 801ace8:	460b      	mov	r3, r1
 801acea:	4602      	mov	r2, r0
 801acec:	493a      	ldr	r1, [pc, #232]	; (801add8 <__ieee754_pow+0xa30>)
 801acee:	2000      	movs	r0, #0
 801acf0:	f7e5 faea 	bl	80002c8 <__aeabi_dsub>
 801acf4:	e9cd 0100 	strd	r0, r1, [sp]
 801acf8:	9b01      	ldr	r3, [sp, #4]
 801acfa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801acfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ad02:	da2f      	bge.n	801ad64 <__ieee754_pow+0x9bc>
 801ad04:	4650      	mov	r0, sl
 801ad06:	ed9d 0b00 	vldr	d0, [sp]
 801ad0a:	f000 f9cd 	bl	801b0a8 <scalbn>
 801ad0e:	ec51 0b10 	vmov	r0, r1, d0
 801ad12:	ec53 2b18 	vmov	r2, r3, d8
 801ad16:	f7ff bbe0 	b.w	801a4da <__ieee754_pow+0x132>
 801ad1a:	4b30      	ldr	r3, [pc, #192]	; (801addc <__ieee754_pow+0xa34>)
 801ad1c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ad20:	429e      	cmp	r6, r3
 801ad22:	f77f af0b 	ble.w	801ab3c <__ieee754_pow+0x794>
 801ad26:	4b2e      	ldr	r3, [pc, #184]	; (801ade0 <__ieee754_pow+0xa38>)
 801ad28:	440b      	add	r3, r1
 801ad2a:	4303      	orrs	r3, r0
 801ad2c:	d00b      	beq.n	801ad46 <__ieee754_pow+0x99e>
 801ad2e:	a326      	add	r3, pc, #152	; (adr r3, 801adc8 <__ieee754_pow+0xa20>)
 801ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad34:	ec51 0b18 	vmov	r0, r1, d8
 801ad38:	f7e5 fc7e 	bl	8000638 <__aeabi_dmul>
 801ad3c:	a322      	add	r3, pc, #136	; (adr r3, 801adc8 <__ieee754_pow+0xa20>)
 801ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad42:	f7ff bbca 	b.w	801a4da <__ieee754_pow+0x132>
 801ad46:	4622      	mov	r2, r4
 801ad48:	462b      	mov	r3, r5
 801ad4a:	f7e5 fabd 	bl	80002c8 <__aeabi_dsub>
 801ad4e:	4642      	mov	r2, r8
 801ad50:	464b      	mov	r3, r9
 801ad52:	f7e5 fef7 	bl	8000b44 <__aeabi_dcmpge>
 801ad56:	2800      	cmp	r0, #0
 801ad58:	f43f aef0 	beq.w	801ab3c <__ieee754_pow+0x794>
 801ad5c:	e7e7      	b.n	801ad2e <__ieee754_pow+0x986>
 801ad5e:	f04f 0a00 	mov.w	sl, #0
 801ad62:	e717      	b.n	801ab94 <__ieee754_pow+0x7ec>
 801ad64:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ad68:	4619      	mov	r1, r3
 801ad6a:	e7d2      	b.n	801ad12 <__ieee754_pow+0x96a>
 801ad6c:	491a      	ldr	r1, [pc, #104]	; (801add8 <__ieee754_pow+0xa30>)
 801ad6e:	2000      	movs	r0, #0
 801ad70:	f7ff bb9e 	b.w	801a4b0 <__ieee754_pow+0x108>
 801ad74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ad78:	f7ff bb9a 	b.w	801a4b0 <__ieee754_pow+0x108>
 801ad7c:	9000      	str	r0, [sp, #0]
 801ad7e:	f7ff bb76 	b.w	801a46e <__ieee754_pow+0xc6>
 801ad82:	2100      	movs	r1, #0
 801ad84:	f7ff bb60 	b.w	801a448 <__ieee754_pow+0xa0>
 801ad88:	00000000 	.word	0x00000000
 801ad8c:	3fe62e43 	.word	0x3fe62e43
 801ad90:	fefa39ef 	.word	0xfefa39ef
 801ad94:	3fe62e42 	.word	0x3fe62e42
 801ad98:	0ca86c39 	.word	0x0ca86c39
 801ad9c:	be205c61 	.word	0xbe205c61
 801ada0:	72bea4d0 	.word	0x72bea4d0
 801ada4:	3e663769 	.word	0x3e663769
 801ada8:	c5d26bf1 	.word	0xc5d26bf1
 801adac:	3ebbbd41 	.word	0x3ebbbd41
 801adb0:	af25de2c 	.word	0xaf25de2c
 801adb4:	3f11566a 	.word	0x3f11566a
 801adb8:	16bebd93 	.word	0x16bebd93
 801adbc:	3f66c16c 	.word	0x3f66c16c
 801adc0:	5555553e 	.word	0x5555553e
 801adc4:	3fc55555 	.word	0x3fc55555
 801adc8:	c2f8f359 	.word	0xc2f8f359
 801adcc:	01a56e1f 	.word	0x01a56e1f
 801add0:	3fe00000 	.word	0x3fe00000
 801add4:	000fffff 	.word	0x000fffff
 801add8:	3ff00000 	.word	0x3ff00000
 801addc:	4090cbff 	.word	0x4090cbff
 801ade0:	3f6f3400 	.word	0x3f6f3400
 801ade4:	652b82fe 	.word	0x652b82fe
 801ade8:	3c971547 	.word	0x3c971547

0801adec <__ieee754_sqrt>:
 801adec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adf0:	ec55 4b10 	vmov	r4, r5, d0
 801adf4:	4e56      	ldr	r6, [pc, #344]	; (801af50 <__ieee754_sqrt+0x164>)
 801adf6:	43ae      	bics	r6, r5
 801adf8:	ee10 0a10 	vmov	r0, s0
 801adfc:	ee10 3a10 	vmov	r3, s0
 801ae00:	4629      	mov	r1, r5
 801ae02:	462a      	mov	r2, r5
 801ae04:	d110      	bne.n	801ae28 <__ieee754_sqrt+0x3c>
 801ae06:	ee10 2a10 	vmov	r2, s0
 801ae0a:	462b      	mov	r3, r5
 801ae0c:	f7e5 fc14 	bl	8000638 <__aeabi_dmul>
 801ae10:	4602      	mov	r2, r0
 801ae12:	460b      	mov	r3, r1
 801ae14:	4620      	mov	r0, r4
 801ae16:	4629      	mov	r1, r5
 801ae18:	f7e5 fa58 	bl	80002cc <__adddf3>
 801ae1c:	4604      	mov	r4, r0
 801ae1e:	460d      	mov	r5, r1
 801ae20:	ec45 4b10 	vmov	d0, r4, r5
 801ae24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae28:	2d00      	cmp	r5, #0
 801ae2a:	dc10      	bgt.n	801ae4e <__ieee754_sqrt+0x62>
 801ae2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ae30:	4330      	orrs	r0, r6
 801ae32:	d0f5      	beq.n	801ae20 <__ieee754_sqrt+0x34>
 801ae34:	b15d      	cbz	r5, 801ae4e <__ieee754_sqrt+0x62>
 801ae36:	ee10 2a10 	vmov	r2, s0
 801ae3a:	462b      	mov	r3, r5
 801ae3c:	ee10 0a10 	vmov	r0, s0
 801ae40:	f7e5 fa42 	bl	80002c8 <__aeabi_dsub>
 801ae44:	4602      	mov	r2, r0
 801ae46:	460b      	mov	r3, r1
 801ae48:	f7e5 fd20 	bl	800088c <__aeabi_ddiv>
 801ae4c:	e7e6      	b.n	801ae1c <__ieee754_sqrt+0x30>
 801ae4e:	1509      	asrs	r1, r1, #20
 801ae50:	d076      	beq.n	801af40 <__ieee754_sqrt+0x154>
 801ae52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ae56:	07ce      	lsls	r6, r1, #31
 801ae58:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801ae5c:	bf5e      	ittt	pl
 801ae5e:	0fda      	lsrpl	r2, r3, #31
 801ae60:	005b      	lslpl	r3, r3, #1
 801ae62:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801ae66:	0fda      	lsrs	r2, r3, #31
 801ae68:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801ae6c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801ae70:	2000      	movs	r0, #0
 801ae72:	106d      	asrs	r5, r5, #1
 801ae74:	005b      	lsls	r3, r3, #1
 801ae76:	f04f 0e16 	mov.w	lr, #22
 801ae7a:	4684      	mov	ip, r0
 801ae7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ae80:	eb0c 0401 	add.w	r4, ip, r1
 801ae84:	4294      	cmp	r4, r2
 801ae86:	bfde      	ittt	le
 801ae88:	1b12      	suble	r2, r2, r4
 801ae8a:	eb04 0c01 	addle.w	ip, r4, r1
 801ae8e:	1840      	addle	r0, r0, r1
 801ae90:	0052      	lsls	r2, r2, #1
 801ae92:	f1be 0e01 	subs.w	lr, lr, #1
 801ae96:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801ae9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801ae9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801aea2:	d1ed      	bne.n	801ae80 <__ieee754_sqrt+0x94>
 801aea4:	4671      	mov	r1, lr
 801aea6:	2720      	movs	r7, #32
 801aea8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801aeac:	4562      	cmp	r2, ip
 801aeae:	eb04 060e 	add.w	r6, r4, lr
 801aeb2:	dc02      	bgt.n	801aeba <__ieee754_sqrt+0xce>
 801aeb4:	d113      	bne.n	801aede <__ieee754_sqrt+0xf2>
 801aeb6:	429e      	cmp	r6, r3
 801aeb8:	d811      	bhi.n	801aede <__ieee754_sqrt+0xf2>
 801aeba:	2e00      	cmp	r6, #0
 801aebc:	eb06 0e04 	add.w	lr, r6, r4
 801aec0:	da43      	bge.n	801af4a <__ieee754_sqrt+0x15e>
 801aec2:	f1be 0f00 	cmp.w	lr, #0
 801aec6:	db40      	blt.n	801af4a <__ieee754_sqrt+0x15e>
 801aec8:	f10c 0801 	add.w	r8, ip, #1
 801aecc:	eba2 020c 	sub.w	r2, r2, ip
 801aed0:	429e      	cmp	r6, r3
 801aed2:	bf88      	it	hi
 801aed4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801aed8:	1b9b      	subs	r3, r3, r6
 801aeda:	4421      	add	r1, r4
 801aedc:	46c4      	mov	ip, r8
 801aede:	0052      	lsls	r2, r2, #1
 801aee0:	3f01      	subs	r7, #1
 801aee2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801aee6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801aeea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801aeee:	d1dd      	bne.n	801aeac <__ieee754_sqrt+0xc0>
 801aef0:	4313      	orrs	r3, r2
 801aef2:	d006      	beq.n	801af02 <__ieee754_sqrt+0x116>
 801aef4:	1c4c      	adds	r4, r1, #1
 801aef6:	bf13      	iteet	ne
 801aef8:	3101      	addne	r1, #1
 801aefa:	3001      	addeq	r0, #1
 801aefc:	4639      	moveq	r1, r7
 801aefe:	f021 0101 	bicne.w	r1, r1, #1
 801af02:	1043      	asrs	r3, r0, #1
 801af04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801af08:	0849      	lsrs	r1, r1, #1
 801af0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801af0e:	07c2      	lsls	r2, r0, #31
 801af10:	bf48      	it	mi
 801af12:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801af16:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801af1a:	460c      	mov	r4, r1
 801af1c:	463d      	mov	r5, r7
 801af1e:	e77f      	b.n	801ae20 <__ieee754_sqrt+0x34>
 801af20:	0ada      	lsrs	r2, r3, #11
 801af22:	3815      	subs	r0, #21
 801af24:	055b      	lsls	r3, r3, #21
 801af26:	2a00      	cmp	r2, #0
 801af28:	d0fa      	beq.n	801af20 <__ieee754_sqrt+0x134>
 801af2a:	02d7      	lsls	r7, r2, #11
 801af2c:	d50a      	bpl.n	801af44 <__ieee754_sqrt+0x158>
 801af2e:	f1c1 0420 	rsb	r4, r1, #32
 801af32:	fa23 f404 	lsr.w	r4, r3, r4
 801af36:	1e4d      	subs	r5, r1, #1
 801af38:	408b      	lsls	r3, r1
 801af3a:	4322      	orrs	r2, r4
 801af3c:	1b41      	subs	r1, r0, r5
 801af3e:	e788      	b.n	801ae52 <__ieee754_sqrt+0x66>
 801af40:	4608      	mov	r0, r1
 801af42:	e7f0      	b.n	801af26 <__ieee754_sqrt+0x13a>
 801af44:	0052      	lsls	r2, r2, #1
 801af46:	3101      	adds	r1, #1
 801af48:	e7ef      	b.n	801af2a <__ieee754_sqrt+0x13e>
 801af4a:	46e0      	mov	r8, ip
 801af4c:	e7be      	b.n	801aecc <__ieee754_sqrt+0xe0>
 801af4e:	bf00      	nop
 801af50:	7ff00000 	.word	0x7ff00000

0801af54 <fabs>:
 801af54:	ec51 0b10 	vmov	r0, r1, d0
 801af58:	ee10 2a10 	vmov	r2, s0
 801af5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801af60:	ec43 2b10 	vmov	d0, r2, r3
 801af64:	4770      	bx	lr

0801af66 <finite>:
 801af66:	b082      	sub	sp, #8
 801af68:	ed8d 0b00 	vstr	d0, [sp]
 801af6c:	9801      	ldr	r0, [sp, #4]
 801af6e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801af72:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801af76:	0fc0      	lsrs	r0, r0, #31
 801af78:	b002      	add	sp, #8
 801af7a:	4770      	bx	lr
 801af7c:	0000      	movs	r0, r0
	...

0801af80 <nan>:
 801af80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801af88 <nan+0x8>
 801af84:	4770      	bx	lr
 801af86:	bf00      	nop
 801af88:	00000000 	.word	0x00000000
 801af8c:	7ff80000 	.word	0x7ff80000

0801af90 <rint>:
 801af90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af92:	ec51 0b10 	vmov	r0, r1, d0
 801af96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801af9a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801af9e:	2e13      	cmp	r6, #19
 801afa0:	ee10 4a10 	vmov	r4, s0
 801afa4:	460b      	mov	r3, r1
 801afa6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801afaa:	dc58      	bgt.n	801b05e <rint+0xce>
 801afac:	2e00      	cmp	r6, #0
 801afae:	da2b      	bge.n	801b008 <rint+0x78>
 801afb0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801afb4:	4302      	orrs	r2, r0
 801afb6:	d023      	beq.n	801b000 <rint+0x70>
 801afb8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801afbc:	4302      	orrs	r2, r0
 801afbe:	4254      	negs	r4, r2
 801afc0:	4314      	orrs	r4, r2
 801afc2:	0c4b      	lsrs	r3, r1, #17
 801afc4:	0b24      	lsrs	r4, r4, #12
 801afc6:	045b      	lsls	r3, r3, #17
 801afc8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801afcc:	ea44 0103 	orr.w	r1, r4, r3
 801afd0:	4b32      	ldr	r3, [pc, #200]	; (801b09c <rint+0x10c>)
 801afd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801afd6:	e9d3 6700 	ldrd	r6, r7, [r3]
 801afda:	4602      	mov	r2, r0
 801afdc:	460b      	mov	r3, r1
 801afde:	4630      	mov	r0, r6
 801afe0:	4639      	mov	r1, r7
 801afe2:	f7e5 f973 	bl	80002cc <__adddf3>
 801afe6:	e9cd 0100 	strd	r0, r1, [sp]
 801afea:	463b      	mov	r3, r7
 801afec:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aff0:	4632      	mov	r2, r6
 801aff2:	f7e5 f969 	bl	80002c8 <__aeabi_dsub>
 801aff6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801affa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801affe:	4639      	mov	r1, r7
 801b000:	ec41 0b10 	vmov	d0, r0, r1
 801b004:	b003      	add	sp, #12
 801b006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b008:	4a25      	ldr	r2, [pc, #148]	; (801b0a0 <rint+0x110>)
 801b00a:	4132      	asrs	r2, r6
 801b00c:	ea01 0702 	and.w	r7, r1, r2
 801b010:	4307      	orrs	r7, r0
 801b012:	d0f5      	beq.n	801b000 <rint+0x70>
 801b014:	0851      	lsrs	r1, r2, #1
 801b016:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801b01a:	4314      	orrs	r4, r2
 801b01c:	d00c      	beq.n	801b038 <rint+0xa8>
 801b01e:	ea23 0201 	bic.w	r2, r3, r1
 801b022:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b026:	2e13      	cmp	r6, #19
 801b028:	fa43 f606 	asr.w	r6, r3, r6
 801b02c:	bf0c      	ite	eq
 801b02e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801b032:	2400      	movne	r4, #0
 801b034:	ea42 0306 	orr.w	r3, r2, r6
 801b038:	4918      	ldr	r1, [pc, #96]	; (801b09c <rint+0x10c>)
 801b03a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801b03e:	4622      	mov	r2, r4
 801b040:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b044:	4620      	mov	r0, r4
 801b046:	4629      	mov	r1, r5
 801b048:	f7e5 f940 	bl	80002cc <__adddf3>
 801b04c:	e9cd 0100 	strd	r0, r1, [sp]
 801b050:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b054:	4622      	mov	r2, r4
 801b056:	462b      	mov	r3, r5
 801b058:	f7e5 f936 	bl	80002c8 <__aeabi_dsub>
 801b05c:	e7d0      	b.n	801b000 <rint+0x70>
 801b05e:	2e33      	cmp	r6, #51	; 0x33
 801b060:	dd07      	ble.n	801b072 <rint+0xe2>
 801b062:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b066:	d1cb      	bne.n	801b000 <rint+0x70>
 801b068:	ee10 2a10 	vmov	r2, s0
 801b06c:	f7e5 f92e 	bl	80002cc <__adddf3>
 801b070:	e7c6      	b.n	801b000 <rint+0x70>
 801b072:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801b076:	f04f 36ff 	mov.w	r6, #4294967295
 801b07a:	40d6      	lsrs	r6, r2
 801b07c:	4230      	tst	r0, r6
 801b07e:	d0bf      	beq.n	801b000 <rint+0x70>
 801b080:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801b084:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801b088:	bf1f      	itttt	ne
 801b08a:	ea24 0101 	bicne.w	r1, r4, r1
 801b08e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801b092:	fa44 f202 	asrne.w	r2, r4, r2
 801b096:	ea41 0402 	orrne.w	r4, r1, r2
 801b09a:	e7cd      	b.n	801b038 <rint+0xa8>
 801b09c:	080231b8 	.word	0x080231b8
 801b0a0:	000fffff 	.word	0x000fffff
 801b0a4:	00000000 	.word	0x00000000

0801b0a8 <scalbn>:
 801b0a8:	b570      	push	{r4, r5, r6, lr}
 801b0aa:	ec55 4b10 	vmov	r4, r5, d0
 801b0ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b0b2:	4606      	mov	r6, r0
 801b0b4:	462b      	mov	r3, r5
 801b0b6:	b99a      	cbnz	r2, 801b0e0 <scalbn+0x38>
 801b0b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b0bc:	4323      	orrs	r3, r4
 801b0be:	d036      	beq.n	801b12e <scalbn+0x86>
 801b0c0:	4b39      	ldr	r3, [pc, #228]	; (801b1a8 <scalbn+0x100>)
 801b0c2:	4629      	mov	r1, r5
 801b0c4:	ee10 0a10 	vmov	r0, s0
 801b0c8:	2200      	movs	r2, #0
 801b0ca:	f7e5 fab5 	bl	8000638 <__aeabi_dmul>
 801b0ce:	4b37      	ldr	r3, [pc, #220]	; (801b1ac <scalbn+0x104>)
 801b0d0:	429e      	cmp	r6, r3
 801b0d2:	4604      	mov	r4, r0
 801b0d4:	460d      	mov	r5, r1
 801b0d6:	da10      	bge.n	801b0fa <scalbn+0x52>
 801b0d8:	a32b      	add	r3, pc, #172	; (adr r3, 801b188 <scalbn+0xe0>)
 801b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0de:	e03a      	b.n	801b156 <scalbn+0xae>
 801b0e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b0e4:	428a      	cmp	r2, r1
 801b0e6:	d10c      	bne.n	801b102 <scalbn+0x5a>
 801b0e8:	ee10 2a10 	vmov	r2, s0
 801b0ec:	4620      	mov	r0, r4
 801b0ee:	4629      	mov	r1, r5
 801b0f0:	f7e5 f8ec 	bl	80002cc <__adddf3>
 801b0f4:	4604      	mov	r4, r0
 801b0f6:	460d      	mov	r5, r1
 801b0f8:	e019      	b.n	801b12e <scalbn+0x86>
 801b0fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b0fe:	460b      	mov	r3, r1
 801b100:	3a36      	subs	r2, #54	; 0x36
 801b102:	4432      	add	r2, r6
 801b104:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b108:	428a      	cmp	r2, r1
 801b10a:	dd08      	ble.n	801b11e <scalbn+0x76>
 801b10c:	2d00      	cmp	r5, #0
 801b10e:	a120      	add	r1, pc, #128	; (adr r1, 801b190 <scalbn+0xe8>)
 801b110:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b114:	da1c      	bge.n	801b150 <scalbn+0xa8>
 801b116:	a120      	add	r1, pc, #128	; (adr r1, 801b198 <scalbn+0xf0>)
 801b118:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b11c:	e018      	b.n	801b150 <scalbn+0xa8>
 801b11e:	2a00      	cmp	r2, #0
 801b120:	dd08      	ble.n	801b134 <scalbn+0x8c>
 801b122:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b126:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b12a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b12e:	ec45 4b10 	vmov	d0, r4, r5
 801b132:	bd70      	pop	{r4, r5, r6, pc}
 801b134:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b138:	da19      	bge.n	801b16e <scalbn+0xc6>
 801b13a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b13e:	429e      	cmp	r6, r3
 801b140:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801b144:	dd0a      	ble.n	801b15c <scalbn+0xb4>
 801b146:	a112      	add	r1, pc, #72	; (adr r1, 801b190 <scalbn+0xe8>)
 801b148:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d1e2      	bne.n	801b116 <scalbn+0x6e>
 801b150:	a30f      	add	r3, pc, #60	; (adr r3, 801b190 <scalbn+0xe8>)
 801b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b156:	f7e5 fa6f 	bl	8000638 <__aeabi_dmul>
 801b15a:	e7cb      	b.n	801b0f4 <scalbn+0x4c>
 801b15c:	a10a      	add	r1, pc, #40	; (adr r1, 801b188 <scalbn+0xe0>)
 801b15e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d0b8      	beq.n	801b0d8 <scalbn+0x30>
 801b166:	a10e      	add	r1, pc, #56	; (adr r1, 801b1a0 <scalbn+0xf8>)
 801b168:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b16c:	e7b4      	b.n	801b0d8 <scalbn+0x30>
 801b16e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b172:	3236      	adds	r2, #54	; 0x36
 801b174:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b178:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b17c:	4620      	mov	r0, r4
 801b17e:	4b0c      	ldr	r3, [pc, #48]	; (801b1b0 <scalbn+0x108>)
 801b180:	2200      	movs	r2, #0
 801b182:	e7e8      	b.n	801b156 <scalbn+0xae>
 801b184:	f3af 8000 	nop.w
 801b188:	c2f8f359 	.word	0xc2f8f359
 801b18c:	01a56e1f 	.word	0x01a56e1f
 801b190:	8800759c 	.word	0x8800759c
 801b194:	7e37e43c 	.word	0x7e37e43c
 801b198:	8800759c 	.word	0x8800759c
 801b19c:	fe37e43c 	.word	0xfe37e43c
 801b1a0:	c2f8f359 	.word	0xc2f8f359
 801b1a4:	81a56e1f 	.word	0x81a56e1f
 801b1a8:	43500000 	.word	0x43500000
 801b1ac:	ffff3cb0 	.word	0xffff3cb0
 801b1b0:	3c900000 	.word	0x3c900000

0801b1b4 <abort>:
 801b1b4:	b508      	push	{r3, lr}
 801b1b6:	2006      	movs	r0, #6
 801b1b8:	f001 fd5e 	bl	801cc78 <raise>
 801b1bc:	2001      	movs	r0, #1
 801b1be:	f7e8 f9d3 	bl	8003568 <_exit>
	...

0801b1c4 <__errno>:
 801b1c4:	4b01      	ldr	r3, [pc, #4]	; (801b1cc <__errno+0x8>)
 801b1c6:	6818      	ldr	r0, [r3, #0]
 801b1c8:	4770      	bx	lr
 801b1ca:	bf00      	nop
 801b1cc:	20000200 	.word	0x20000200

0801b1d0 <std>:
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	b510      	push	{r4, lr}
 801b1d4:	4604      	mov	r4, r0
 801b1d6:	e9c0 3300 	strd	r3, r3, [r0]
 801b1da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b1de:	6083      	str	r3, [r0, #8]
 801b1e0:	8181      	strh	r1, [r0, #12]
 801b1e2:	6643      	str	r3, [r0, #100]	; 0x64
 801b1e4:	81c2      	strh	r2, [r0, #14]
 801b1e6:	6183      	str	r3, [r0, #24]
 801b1e8:	4619      	mov	r1, r3
 801b1ea:	2208      	movs	r2, #8
 801b1ec:	305c      	adds	r0, #92	; 0x5c
 801b1ee:	f000 fa63 	bl	801b6b8 <memset>
 801b1f2:	4b05      	ldr	r3, [pc, #20]	; (801b208 <std+0x38>)
 801b1f4:	6263      	str	r3, [r4, #36]	; 0x24
 801b1f6:	4b05      	ldr	r3, [pc, #20]	; (801b20c <std+0x3c>)
 801b1f8:	62a3      	str	r3, [r4, #40]	; 0x28
 801b1fa:	4b05      	ldr	r3, [pc, #20]	; (801b210 <std+0x40>)
 801b1fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b1fe:	4b05      	ldr	r3, [pc, #20]	; (801b214 <std+0x44>)
 801b200:	6224      	str	r4, [r4, #32]
 801b202:	6323      	str	r3, [r4, #48]	; 0x30
 801b204:	bd10      	pop	{r4, pc}
 801b206:	bf00      	nop
 801b208:	0801cd49 	.word	0x0801cd49
 801b20c:	0801cd6f 	.word	0x0801cd6f
 801b210:	0801cda7 	.word	0x0801cda7
 801b214:	0801cdcb 	.word	0x0801cdcb

0801b218 <_cleanup_r>:
 801b218:	4901      	ldr	r1, [pc, #4]	; (801b220 <_cleanup_r+0x8>)
 801b21a:	f000 b8af 	b.w	801b37c <_fwalk_reent>
 801b21e:	bf00      	nop
 801b220:	0801f195 	.word	0x0801f195

0801b224 <__sfmoreglue>:
 801b224:	b570      	push	{r4, r5, r6, lr}
 801b226:	1e4a      	subs	r2, r1, #1
 801b228:	2568      	movs	r5, #104	; 0x68
 801b22a:	4355      	muls	r5, r2
 801b22c:	460e      	mov	r6, r1
 801b22e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b232:	f000 fd17 	bl	801bc64 <_malloc_r>
 801b236:	4604      	mov	r4, r0
 801b238:	b140      	cbz	r0, 801b24c <__sfmoreglue+0x28>
 801b23a:	2100      	movs	r1, #0
 801b23c:	e9c0 1600 	strd	r1, r6, [r0]
 801b240:	300c      	adds	r0, #12
 801b242:	60a0      	str	r0, [r4, #8]
 801b244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b248:	f000 fa36 	bl	801b6b8 <memset>
 801b24c:	4620      	mov	r0, r4
 801b24e:	bd70      	pop	{r4, r5, r6, pc}

0801b250 <__sfp_lock_acquire>:
 801b250:	4801      	ldr	r0, [pc, #4]	; (801b258 <__sfp_lock_acquire+0x8>)
 801b252:	f000 b9f5 	b.w	801b640 <__retarget_lock_acquire_recursive>
 801b256:	bf00      	nop
 801b258:	200090d4 	.word	0x200090d4

0801b25c <__sfp_lock_release>:
 801b25c:	4801      	ldr	r0, [pc, #4]	; (801b264 <__sfp_lock_release+0x8>)
 801b25e:	f000 b9f1 	b.w	801b644 <__retarget_lock_release_recursive>
 801b262:	bf00      	nop
 801b264:	200090d4 	.word	0x200090d4

0801b268 <__sinit_lock_acquire>:
 801b268:	4801      	ldr	r0, [pc, #4]	; (801b270 <__sinit_lock_acquire+0x8>)
 801b26a:	f000 b9e9 	b.w	801b640 <__retarget_lock_acquire_recursive>
 801b26e:	bf00      	nop
 801b270:	200090cf 	.word	0x200090cf

0801b274 <__sinit_lock_release>:
 801b274:	4801      	ldr	r0, [pc, #4]	; (801b27c <__sinit_lock_release+0x8>)
 801b276:	f000 b9e5 	b.w	801b644 <__retarget_lock_release_recursive>
 801b27a:	bf00      	nop
 801b27c:	200090cf 	.word	0x200090cf

0801b280 <__sinit>:
 801b280:	b510      	push	{r4, lr}
 801b282:	4604      	mov	r4, r0
 801b284:	f7ff fff0 	bl	801b268 <__sinit_lock_acquire>
 801b288:	69a3      	ldr	r3, [r4, #24]
 801b28a:	b11b      	cbz	r3, 801b294 <__sinit+0x14>
 801b28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b290:	f7ff bff0 	b.w	801b274 <__sinit_lock_release>
 801b294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b298:	6523      	str	r3, [r4, #80]	; 0x50
 801b29a:	4b13      	ldr	r3, [pc, #76]	; (801b2e8 <__sinit+0x68>)
 801b29c:	4a13      	ldr	r2, [pc, #76]	; (801b2ec <__sinit+0x6c>)
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	62a2      	str	r2, [r4, #40]	; 0x28
 801b2a2:	42a3      	cmp	r3, r4
 801b2a4:	bf04      	itt	eq
 801b2a6:	2301      	moveq	r3, #1
 801b2a8:	61a3      	streq	r3, [r4, #24]
 801b2aa:	4620      	mov	r0, r4
 801b2ac:	f000 f820 	bl	801b2f0 <__sfp>
 801b2b0:	6060      	str	r0, [r4, #4]
 801b2b2:	4620      	mov	r0, r4
 801b2b4:	f000 f81c 	bl	801b2f0 <__sfp>
 801b2b8:	60a0      	str	r0, [r4, #8]
 801b2ba:	4620      	mov	r0, r4
 801b2bc:	f000 f818 	bl	801b2f0 <__sfp>
 801b2c0:	2200      	movs	r2, #0
 801b2c2:	60e0      	str	r0, [r4, #12]
 801b2c4:	2104      	movs	r1, #4
 801b2c6:	6860      	ldr	r0, [r4, #4]
 801b2c8:	f7ff ff82 	bl	801b1d0 <std>
 801b2cc:	68a0      	ldr	r0, [r4, #8]
 801b2ce:	2201      	movs	r2, #1
 801b2d0:	2109      	movs	r1, #9
 801b2d2:	f7ff ff7d 	bl	801b1d0 <std>
 801b2d6:	68e0      	ldr	r0, [r4, #12]
 801b2d8:	2202      	movs	r2, #2
 801b2da:	2112      	movs	r1, #18
 801b2dc:	f7ff ff78 	bl	801b1d0 <std>
 801b2e0:	2301      	movs	r3, #1
 801b2e2:	61a3      	str	r3, [r4, #24]
 801b2e4:	e7d2      	b.n	801b28c <__sinit+0xc>
 801b2e6:	bf00      	nop
 801b2e8:	0802332c 	.word	0x0802332c
 801b2ec:	0801b219 	.word	0x0801b219

0801b2f0 <__sfp>:
 801b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2f2:	4607      	mov	r7, r0
 801b2f4:	f7ff ffac 	bl	801b250 <__sfp_lock_acquire>
 801b2f8:	4b1e      	ldr	r3, [pc, #120]	; (801b374 <__sfp+0x84>)
 801b2fa:	681e      	ldr	r6, [r3, #0]
 801b2fc:	69b3      	ldr	r3, [r6, #24]
 801b2fe:	b913      	cbnz	r3, 801b306 <__sfp+0x16>
 801b300:	4630      	mov	r0, r6
 801b302:	f7ff ffbd 	bl	801b280 <__sinit>
 801b306:	3648      	adds	r6, #72	; 0x48
 801b308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b30c:	3b01      	subs	r3, #1
 801b30e:	d503      	bpl.n	801b318 <__sfp+0x28>
 801b310:	6833      	ldr	r3, [r6, #0]
 801b312:	b30b      	cbz	r3, 801b358 <__sfp+0x68>
 801b314:	6836      	ldr	r6, [r6, #0]
 801b316:	e7f7      	b.n	801b308 <__sfp+0x18>
 801b318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b31c:	b9d5      	cbnz	r5, 801b354 <__sfp+0x64>
 801b31e:	4b16      	ldr	r3, [pc, #88]	; (801b378 <__sfp+0x88>)
 801b320:	60e3      	str	r3, [r4, #12]
 801b322:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b326:	6665      	str	r5, [r4, #100]	; 0x64
 801b328:	f000 f988 	bl	801b63c <__retarget_lock_init_recursive>
 801b32c:	f7ff ff96 	bl	801b25c <__sfp_lock_release>
 801b330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b338:	6025      	str	r5, [r4, #0]
 801b33a:	61a5      	str	r5, [r4, #24]
 801b33c:	2208      	movs	r2, #8
 801b33e:	4629      	mov	r1, r5
 801b340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b344:	f000 f9b8 	bl	801b6b8 <memset>
 801b348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b34c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b350:	4620      	mov	r0, r4
 801b352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b354:	3468      	adds	r4, #104	; 0x68
 801b356:	e7d9      	b.n	801b30c <__sfp+0x1c>
 801b358:	2104      	movs	r1, #4
 801b35a:	4638      	mov	r0, r7
 801b35c:	f7ff ff62 	bl	801b224 <__sfmoreglue>
 801b360:	4604      	mov	r4, r0
 801b362:	6030      	str	r0, [r6, #0]
 801b364:	2800      	cmp	r0, #0
 801b366:	d1d5      	bne.n	801b314 <__sfp+0x24>
 801b368:	f7ff ff78 	bl	801b25c <__sfp_lock_release>
 801b36c:	230c      	movs	r3, #12
 801b36e:	603b      	str	r3, [r7, #0]
 801b370:	e7ee      	b.n	801b350 <__sfp+0x60>
 801b372:	bf00      	nop
 801b374:	0802332c 	.word	0x0802332c
 801b378:	ffff0001 	.word	0xffff0001

0801b37c <_fwalk_reent>:
 801b37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b380:	4606      	mov	r6, r0
 801b382:	4688      	mov	r8, r1
 801b384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b388:	2700      	movs	r7, #0
 801b38a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b38e:	f1b9 0901 	subs.w	r9, r9, #1
 801b392:	d505      	bpl.n	801b3a0 <_fwalk_reent+0x24>
 801b394:	6824      	ldr	r4, [r4, #0]
 801b396:	2c00      	cmp	r4, #0
 801b398:	d1f7      	bne.n	801b38a <_fwalk_reent+0xe>
 801b39a:	4638      	mov	r0, r7
 801b39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3a0:	89ab      	ldrh	r3, [r5, #12]
 801b3a2:	2b01      	cmp	r3, #1
 801b3a4:	d907      	bls.n	801b3b6 <_fwalk_reent+0x3a>
 801b3a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b3aa:	3301      	adds	r3, #1
 801b3ac:	d003      	beq.n	801b3b6 <_fwalk_reent+0x3a>
 801b3ae:	4629      	mov	r1, r5
 801b3b0:	4630      	mov	r0, r6
 801b3b2:	47c0      	blx	r8
 801b3b4:	4307      	orrs	r7, r0
 801b3b6:	3568      	adds	r5, #104	; 0x68
 801b3b8:	e7e9      	b.n	801b38e <_fwalk_reent+0x12>
	...

0801b3bc <__libc_init_array>:
 801b3bc:	b570      	push	{r4, r5, r6, lr}
 801b3be:	4d0d      	ldr	r5, [pc, #52]	; (801b3f4 <__libc_init_array+0x38>)
 801b3c0:	4c0d      	ldr	r4, [pc, #52]	; (801b3f8 <__libc_init_array+0x3c>)
 801b3c2:	1b64      	subs	r4, r4, r5
 801b3c4:	10a4      	asrs	r4, r4, #2
 801b3c6:	2600      	movs	r6, #0
 801b3c8:	42a6      	cmp	r6, r4
 801b3ca:	d109      	bne.n	801b3e0 <__libc_init_array+0x24>
 801b3cc:	4d0b      	ldr	r5, [pc, #44]	; (801b3fc <__libc_init_array+0x40>)
 801b3ce:	4c0c      	ldr	r4, [pc, #48]	; (801b400 <__libc_init_array+0x44>)
 801b3d0:	f005 ffba 	bl	8021348 <_init>
 801b3d4:	1b64      	subs	r4, r4, r5
 801b3d6:	10a4      	asrs	r4, r4, #2
 801b3d8:	2600      	movs	r6, #0
 801b3da:	42a6      	cmp	r6, r4
 801b3dc:	d105      	bne.n	801b3ea <__libc_init_array+0x2e>
 801b3de:	bd70      	pop	{r4, r5, r6, pc}
 801b3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3e4:	4798      	blx	r3
 801b3e6:	3601      	adds	r6, #1
 801b3e8:	e7ee      	b.n	801b3c8 <__libc_init_array+0xc>
 801b3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3ee:	4798      	blx	r3
 801b3f0:	3601      	adds	r6, #1
 801b3f2:	e7f2      	b.n	801b3da <__libc_init_array+0x1e>
 801b3f4:	080237f8 	.word	0x080237f8
 801b3f8:	080237f8 	.word	0x080237f8
 801b3fc:	080237f8 	.word	0x080237f8
 801b400:	08023800 	.word	0x08023800

0801b404 <isxdigit>:
 801b404:	4b02      	ldr	r3, [pc, #8]	; (801b410 <isxdigit+0xc>)
 801b406:	4418      	add	r0, r3
 801b408:	7840      	ldrb	r0, [r0, #1]
 801b40a:	f000 0044 	and.w	r0, r0, #68	; 0x44
 801b40e:	4770      	bx	lr
 801b410:	080231c8 	.word	0x080231c8

0801b414 <localtime>:
 801b414:	b538      	push	{r3, r4, r5, lr}
 801b416:	4b0b      	ldr	r3, [pc, #44]	; (801b444 <localtime+0x30>)
 801b418:	681d      	ldr	r5, [r3, #0]
 801b41a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801b41c:	4604      	mov	r4, r0
 801b41e:	b953      	cbnz	r3, 801b436 <localtime+0x22>
 801b420:	2024      	movs	r0, #36	; 0x24
 801b422:	f000 f911 	bl	801b648 <malloc>
 801b426:	4602      	mov	r2, r0
 801b428:	63e8      	str	r0, [r5, #60]	; 0x3c
 801b42a:	b920      	cbnz	r0, 801b436 <localtime+0x22>
 801b42c:	4b06      	ldr	r3, [pc, #24]	; (801b448 <localtime+0x34>)
 801b42e:	4807      	ldr	r0, [pc, #28]	; (801b44c <localtime+0x38>)
 801b430:	2132      	movs	r1, #50	; 0x32
 801b432:	f002 ff6f 	bl	801e314 <__assert_func>
 801b436:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801b438:	4620      	mov	r0, r4
 801b43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b43e:	f000 b807 	b.w	801b450 <localtime_r>
 801b442:	bf00      	nop
 801b444:	20000200 	.word	0x20000200
 801b448:	08023330 	.word	0x08023330
 801b44c:	08023347 	.word	0x08023347

0801b450 <localtime_r>:
 801b450:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b454:	4607      	mov	r7, r0
 801b456:	9101      	str	r1, [sp, #4]
 801b458:	f004 fa9c 	bl	801f994 <__gettzinfo>
 801b45c:	9901      	ldr	r1, [sp, #4]
 801b45e:	4680      	mov	r8, r0
 801b460:	4638      	mov	r0, r7
 801b462:	f004 fa9b 	bl	801f99c <gmtime_r>
 801b466:	6943      	ldr	r3, [r0, #20]
 801b468:	079a      	lsls	r2, r3, #30
 801b46a:	4604      	mov	r4, r0
 801b46c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801b470:	d105      	bne.n	801b47e <localtime_r+0x2e>
 801b472:	2264      	movs	r2, #100	; 0x64
 801b474:	fb96 f3f2 	sdiv	r3, r6, r2
 801b478:	fb02 6313 	mls	r3, r2, r3, r6
 801b47c:	bb7b      	cbnz	r3, 801b4de <localtime_r+0x8e>
 801b47e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801b482:	fb96 f5f3 	sdiv	r5, r6, r3
 801b486:	fb03 6515 	mls	r5, r3, r5, r6
 801b48a:	fab5 f585 	clz	r5, r5
 801b48e:	096d      	lsrs	r5, r5, #5
 801b490:	4b68      	ldr	r3, [pc, #416]	; (801b634 <localtime_r+0x1e4>)
 801b492:	2230      	movs	r2, #48	; 0x30
 801b494:	fb02 3505 	mla	r5, r2, r5, r3
 801b498:	f002 fca2 	bl	801dde0 <__tz_lock>
 801b49c:	f002 fcac 	bl	801ddf8 <_tzset_unlocked>
 801b4a0:	4b65      	ldr	r3, [pc, #404]	; (801b638 <localtime_r+0x1e8>)
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	b353      	cbz	r3, 801b4fc <localtime_r+0xac>
 801b4a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b4aa:	42b3      	cmp	r3, r6
 801b4ac:	d119      	bne.n	801b4e2 <localtime_r+0x92>
 801b4ae:	f8d8 1000 	ldr.w	r1, [r8]
 801b4b2:	e9d7 6700 	ldrd	r6, r7, [r7]
 801b4b6:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801b4ba:	b9d1      	cbnz	r1, 801b4f2 <localtime_r+0xa2>
 801b4bc:	4296      	cmp	r6, r2
 801b4be:	eb77 0303 	sbcs.w	r3, r7, r3
 801b4c2:	da23      	bge.n	801b50c <localtime_r+0xbc>
 801b4c4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b4c8:	4296      	cmp	r6, r2
 801b4ca:	eb77 0303 	sbcs.w	r3, r7, r3
 801b4ce:	bfb4      	ite	lt
 801b4d0:	2301      	movlt	r3, #1
 801b4d2:	2300      	movge	r3, #0
 801b4d4:	6223      	str	r3, [r4, #32]
 801b4d6:	db1b      	blt.n	801b510 <localtime_r+0xc0>
 801b4d8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801b4dc:	e01a      	b.n	801b514 <localtime_r+0xc4>
 801b4de:	2501      	movs	r5, #1
 801b4e0:	e7d6      	b.n	801b490 <localtime_r+0x40>
 801b4e2:	4630      	mov	r0, r6
 801b4e4:	f002 fbd4 	bl	801dc90 <__tzcalc_limits>
 801b4e8:	2800      	cmp	r0, #0
 801b4ea:	d1e0      	bne.n	801b4ae <localtime_r+0x5e>
 801b4ec:	f04f 33ff 	mov.w	r3, #4294967295
 801b4f0:	e004      	b.n	801b4fc <localtime_r+0xac>
 801b4f2:	4296      	cmp	r6, r2
 801b4f4:	eb77 0303 	sbcs.w	r3, r7, r3
 801b4f8:	da02      	bge.n	801b500 <localtime_r+0xb0>
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	6223      	str	r3, [r4, #32]
 801b4fe:	e7eb      	b.n	801b4d8 <localtime_r+0x88>
 801b500:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b504:	4296      	cmp	r6, r2
 801b506:	eb77 0303 	sbcs.w	r3, r7, r3
 801b50a:	daf6      	bge.n	801b4fa <localtime_r+0xaa>
 801b50c:	2301      	movs	r3, #1
 801b50e:	6223      	str	r3, [r4, #32]
 801b510:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801b514:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801b518:	203c      	movs	r0, #60	; 0x3c
 801b51a:	fb91 f6f3 	sdiv	r6, r1, r3
 801b51e:	fb03 1316 	mls	r3, r3, r6, r1
 801b522:	6861      	ldr	r1, [r4, #4]
 801b524:	fb93 f2f0 	sdiv	r2, r3, r0
 801b528:	fb00 3012 	mls	r0, r0, r2, r3
 801b52c:	6823      	ldr	r3, [r4, #0]
 801b52e:	1a89      	subs	r1, r1, r2
 801b530:	68a2      	ldr	r2, [r4, #8]
 801b532:	6061      	str	r1, [r4, #4]
 801b534:	1a1b      	subs	r3, r3, r0
 801b536:	1b92      	subs	r2, r2, r6
 801b538:	2b3b      	cmp	r3, #59	; 0x3b
 801b53a:	6023      	str	r3, [r4, #0]
 801b53c:	60a2      	str	r2, [r4, #8]
 801b53e:	dd35      	ble.n	801b5ac <localtime_r+0x15c>
 801b540:	3101      	adds	r1, #1
 801b542:	6061      	str	r1, [r4, #4]
 801b544:	3b3c      	subs	r3, #60	; 0x3c
 801b546:	6023      	str	r3, [r4, #0]
 801b548:	6863      	ldr	r3, [r4, #4]
 801b54a:	2b3b      	cmp	r3, #59	; 0x3b
 801b54c:	dd34      	ble.n	801b5b8 <localtime_r+0x168>
 801b54e:	3201      	adds	r2, #1
 801b550:	60a2      	str	r2, [r4, #8]
 801b552:	3b3c      	subs	r3, #60	; 0x3c
 801b554:	6063      	str	r3, [r4, #4]
 801b556:	68a3      	ldr	r3, [r4, #8]
 801b558:	2b17      	cmp	r3, #23
 801b55a:	dd33      	ble.n	801b5c4 <localtime_r+0x174>
 801b55c:	69e2      	ldr	r2, [r4, #28]
 801b55e:	3201      	adds	r2, #1
 801b560:	61e2      	str	r2, [r4, #28]
 801b562:	69a2      	ldr	r2, [r4, #24]
 801b564:	3201      	adds	r2, #1
 801b566:	2a06      	cmp	r2, #6
 801b568:	bfc8      	it	gt
 801b56a:	2200      	movgt	r2, #0
 801b56c:	61a2      	str	r2, [r4, #24]
 801b56e:	68e2      	ldr	r2, [r4, #12]
 801b570:	3b18      	subs	r3, #24
 801b572:	3201      	adds	r2, #1
 801b574:	60a3      	str	r3, [r4, #8]
 801b576:	6923      	ldr	r3, [r4, #16]
 801b578:	60e2      	str	r2, [r4, #12]
 801b57a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801b57e:	428a      	cmp	r2, r1
 801b580:	dd0e      	ble.n	801b5a0 <localtime_r+0x150>
 801b582:	2b0b      	cmp	r3, #11
 801b584:	eba2 0201 	sub.w	r2, r2, r1
 801b588:	60e2      	str	r2, [r4, #12]
 801b58a:	f103 0201 	add.w	r2, r3, #1
 801b58e:	bf09      	itett	eq
 801b590:	6963      	ldreq	r3, [r4, #20]
 801b592:	6122      	strne	r2, [r4, #16]
 801b594:	2200      	moveq	r2, #0
 801b596:	3301      	addeq	r3, #1
 801b598:	bf02      	ittt	eq
 801b59a:	6122      	streq	r2, [r4, #16]
 801b59c:	6163      	streq	r3, [r4, #20]
 801b59e:	61e2      	streq	r2, [r4, #28]
 801b5a0:	f002 fc24 	bl	801ddec <__tz_unlock>
 801b5a4:	4620      	mov	r0, r4
 801b5a6:	b002      	add	sp, #8
 801b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	dacb      	bge.n	801b548 <localtime_r+0xf8>
 801b5b0:	3901      	subs	r1, #1
 801b5b2:	6061      	str	r1, [r4, #4]
 801b5b4:	333c      	adds	r3, #60	; 0x3c
 801b5b6:	e7c6      	b.n	801b546 <localtime_r+0xf6>
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	dacc      	bge.n	801b556 <localtime_r+0x106>
 801b5bc:	3a01      	subs	r2, #1
 801b5be:	60a2      	str	r2, [r4, #8]
 801b5c0:	333c      	adds	r3, #60	; 0x3c
 801b5c2:	e7c7      	b.n	801b554 <localtime_r+0x104>
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	daeb      	bge.n	801b5a0 <localtime_r+0x150>
 801b5c8:	69e2      	ldr	r2, [r4, #28]
 801b5ca:	3a01      	subs	r2, #1
 801b5cc:	61e2      	str	r2, [r4, #28]
 801b5ce:	69a2      	ldr	r2, [r4, #24]
 801b5d0:	3a01      	subs	r2, #1
 801b5d2:	bf48      	it	mi
 801b5d4:	2206      	movmi	r2, #6
 801b5d6:	61a2      	str	r2, [r4, #24]
 801b5d8:	68e2      	ldr	r2, [r4, #12]
 801b5da:	3318      	adds	r3, #24
 801b5dc:	3a01      	subs	r2, #1
 801b5de:	60e2      	str	r2, [r4, #12]
 801b5e0:	60a3      	str	r3, [r4, #8]
 801b5e2:	2a00      	cmp	r2, #0
 801b5e4:	d1dc      	bne.n	801b5a0 <localtime_r+0x150>
 801b5e6:	6923      	ldr	r3, [r4, #16]
 801b5e8:	3b01      	subs	r3, #1
 801b5ea:	d405      	bmi.n	801b5f8 <localtime_r+0x1a8>
 801b5ec:	6123      	str	r3, [r4, #16]
 801b5ee:	6923      	ldr	r3, [r4, #16]
 801b5f0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801b5f4:	60e3      	str	r3, [r4, #12]
 801b5f6:	e7d3      	b.n	801b5a0 <localtime_r+0x150>
 801b5f8:	230b      	movs	r3, #11
 801b5fa:	6123      	str	r3, [r4, #16]
 801b5fc:	6963      	ldr	r3, [r4, #20]
 801b5fe:	1e5a      	subs	r2, r3, #1
 801b600:	6162      	str	r2, [r4, #20]
 801b602:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801b606:	0793      	lsls	r3, r2, #30
 801b608:	d105      	bne.n	801b616 <localtime_r+0x1c6>
 801b60a:	2164      	movs	r1, #100	; 0x64
 801b60c:	fb92 f3f1 	sdiv	r3, r2, r1
 801b610:	fb01 2313 	mls	r3, r1, r3, r2
 801b614:	b963      	cbnz	r3, 801b630 <localtime_r+0x1e0>
 801b616:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b61a:	fb92 f3f1 	sdiv	r3, r2, r1
 801b61e:	fb01 2313 	mls	r3, r1, r3, r2
 801b622:	fab3 f383 	clz	r3, r3
 801b626:	095b      	lsrs	r3, r3, #5
 801b628:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801b62c:	61e3      	str	r3, [r4, #28]
 801b62e:	e7de      	b.n	801b5ee <localtime_r+0x19e>
 801b630:	2301      	movs	r3, #1
 801b632:	e7f9      	b.n	801b628 <localtime_r+0x1d8>
 801b634:	08023408 	.word	0x08023408
 801b638:	20005ed8 	.word	0x20005ed8

0801b63c <__retarget_lock_init_recursive>:
 801b63c:	4770      	bx	lr

0801b63e <__retarget_lock_acquire>:
 801b63e:	4770      	bx	lr

0801b640 <__retarget_lock_acquire_recursive>:
 801b640:	4770      	bx	lr

0801b642 <__retarget_lock_release>:
 801b642:	4770      	bx	lr

0801b644 <__retarget_lock_release_recursive>:
 801b644:	4770      	bx	lr
	...

0801b648 <malloc>:
 801b648:	4b02      	ldr	r3, [pc, #8]	; (801b654 <malloc+0xc>)
 801b64a:	4601      	mov	r1, r0
 801b64c:	6818      	ldr	r0, [r3, #0]
 801b64e:	f000 bb09 	b.w	801bc64 <_malloc_r>
 801b652:	bf00      	nop
 801b654:	20000200 	.word	0x20000200

0801b658 <free>:
 801b658:	4b02      	ldr	r3, [pc, #8]	; (801b664 <free+0xc>)
 801b65a:	4601      	mov	r1, r0
 801b65c:	6818      	ldr	r0, [r3, #0]
 801b65e:	f000 bab1 	b.w	801bbc4 <_free_r>
 801b662:	bf00      	nop
 801b664:	20000200 	.word	0x20000200

0801b668 <memcpy>:
 801b668:	440a      	add	r2, r1
 801b66a:	4291      	cmp	r1, r2
 801b66c:	f100 33ff 	add.w	r3, r0, #4294967295
 801b670:	d100      	bne.n	801b674 <memcpy+0xc>
 801b672:	4770      	bx	lr
 801b674:	b510      	push	{r4, lr}
 801b676:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b67a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b67e:	4291      	cmp	r1, r2
 801b680:	d1f9      	bne.n	801b676 <memcpy+0xe>
 801b682:	bd10      	pop	{r4, pc}

0801b684 <memmove>:
 801b684:	4288      	cmp	r0, r1
 801b686:	b510      	push	{r4, lr}
 801b688:	eb01 0402 	add.w	r4, r1, r2
 801b68c:	d902      	bls.n	801b694 <memmove+0x10>
 801b68e:	4284      	cmp	r4, r0
 801b690:	4623      	mov	r3, r4
 801b692:	d807      	bhi.n	801b6a4 <memmove+0x20>
 801b694:	1e43      	subs	r3, r0, #1
 801b696:	42a1      	cmp	r1, r4
 801b698:	d008      	beq.n	801b6ac <memmove+0x28>
 801b69a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b69e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b6a2:	e7f8      	b.n	801b696 <memmove+0x12>
 801b6a4:	4402      	add	r2, r0
 801b6a6:	4601      	mov	r1, r0
 801b6a8:	428a      	cmp	r2, r1
 801b6aa:	d100      	bne.n	801b6ae <memmove+0x2a>
 801b6ac:	bd10      	pop	{r4, pc}
 801b6ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b6b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b6b6:	e7f7      	b.n	801b6a8 <memmove+0x24>

0801b6b8 <memset>:
 801b6b8:	4402      	add	r2, r0
 801b6ba:	4603      	mov	r3, r0
 801b6bc:	4293      	cmp	r3, r2
 801b6be:	d100      	bne.n	801b6c2 <memset+0xa>
 801b6c0:	4770      	bx	lr
 801b6c2:	f803 1b01 	strb.w	r1, [r3], #1
 801b6c6:	e7f9      	b.n	801b6bc <memset+0x4>

0801b6c8 <validate_structure>:
 801b6c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b6ca:	6801      	ldr	r1, [r0, #0]
 801b6cc:	293b      	cmp	r1, #59	; 0x3b
 801b6ce:	4604      	mov	r4, r0
 801b6d0:	d911      	bls.n	801b6f6 <validate_structure+0x2e>
 801b6d2:	223c      	movs	r2, #60	; 0x3c
 801b6d4:	4668      	mov	r0, sp
 801b6d6:	f002 fe4b 	bl	801e370 <div>
 801b6da:	9a01      	ldr	r2, [sp, #4]
 801b6dc:	6863      	ldr	r3, [r4, #4]
 801b6de:	9900      	ldr	r1, [sp, #0]
 801b6e0:	2a00      	cmp	r2, #0
 801b6e2:	440b      	add	r3, r1
 801b6e4:	6063      	str	r3, [r4, #4]
 801b6e6:	bfbb      	ittet	lt
 801b6e8:	323c      	addlt	r2, #60	; 0x3c
 801b6ea:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b6ee:	6022      	strge	r2, [r4, #0]
 801b6f0:	6022      	strlt	r2, [r4, #0]
 801b6f2:	bfb8      	it	lt
 801b6f4:	6063      	strlt	r3, [r4, #4]
 801b6f6:	6861      	ldr	r1, [r4, #4]
 801b6f8:	293b      	cmp	r1, #59	; 0x3b
 801b6fa:	d911      	bls.n	801b720 <validate_structure+0x58>
 801b6fc:	223c      	movs	r2, #60	; 0x3c
 801b6fe:	4668      	mov	r0, sp
 801b700:	f002 fe36 	bl	801e370 <div>
 801b704:	9a01      	ldr	r2, [sp, #4]
 801b706:	68a3      	ldr	r3, [r4, #8]
 801b708:	9900      	ldr	r1, [sp, #0]
 801b70a:	2a00      	cmp	r2, #0
 801b70c:	440b      	add	r3, r1
 801b70e:	60a3      	str	r3, [r4, #8]
 801b710:	bfbb      	ittet	lt
 801b712:	323c      	addlt	r2, #60	; 0x3c
 801b714:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b718:	6062      	strge	r2, [r4, #4]
 801b71a:	6062      	strlt	r2, [r4, #4]
 801b71c:	bfb8      	it	lt
 801b71e:	60a3      	strlt	r3, [r4, #8]
 801b720:	68a1      	ldr	r1, [r4, #8]
 801b722:	2917      	cmp	r1, #23
 801b724:	d911      	bls.n	801b74a <validate_structure+0x82>
 801b726:	2218      	movs	r2, #24
 801b728:	4668      	mov	r0, sp
 801b72a:	f002 fe21 	bl	801e370 <div>
 801b72e:	9a01      	ldr	r2, [sp, #4]
 801b730:	68e3      	ldr	r3, [r4, #12]
 801b732:	9900      	ldr	r1, [sp, #0]
 801b734:	2a00      	cmp	r2, #0
 801b736:	440b      	add	r3, r1
 801b738:	60e3      	str	r3, [r4, #12]
 801b73a:	bfbb      	ittet	lt
 801b73c:	3218      	addlt	r2, #24
 801b73e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b742:	60a2      	strge	r2, [r4, #8]
 801b744:	60a2      	strlt	r2, [r4, #8]
 801b746:	bfb8      	it	lt
 801b748:	60e3      	strlt	r3, [r4, #12]
 801b74a:	6921      	ldr	r1, [r4, #16]
 801b74c:	290b      	cmp	r1, #11
 801b74e:	d911      	bls.n	801b774 <validate_structure+0xac>
 801b750:	220c      	movs	r2, #12
 801b752:	4668      	mov	r0, sp
 801b754:	f002 fe0c 	bl	801e370 <div>
 801b758:	9a01      	ldr	r2, [sp, #4]
 801b75a:	6963      	ldr	r3, [r4, #20]
 801b75c:	9900      	ldr	r1, [sp, #0]
 801b75e:	2a00      	cmp	r2, #0
 801b760:	440b      	add	r3, r1
 801b762:	6163      	str	r3, [r4, #20]
 801b764:	bfbb      	ittet	lt
 801b766:	320c      	addlt	r2, #12
 801b768:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b76c:	6122      	strge	r2, [r4, #16]
 801b76e:	6122      	strlt	r2, [r4, #16]
 801b770:	bfb8      	it	lt
 801b772:	6163      	strlt	r3, [r4, #20]
 801b774:	6963      	ldr	r3, [r4, #20]
 801b776:	0799      	lsls	r1, r3, #30
 801b778:	d120      	bne.n	801b7bc <validate_structure+0xf4>
 801b77a:	2164      	movs	r1, #100	; 0x64
 801b77c:	fb93 f2f1 	sdiv	r2, r3, r1
 801b780:	fb01 3212 	mls	r2, r1, r2, r3
 801b784:	b9e2      	cbnz	r2, 801b7c0 <validate_structure+0xf8>
 801b786:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801b78a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b78e:	fb93 f2f1 	sdiv	r2, r3, r1
 801b792:	fb01 3312 	mls	r3, r1, r2, r3
 801b796:	2b00      	cmp	r3, #0
 801b798:	bf14      	ite	ne
 801b79a:	231c      	movne	r3, #28
 801b79c:	231d      	moveq	r3, #29
 801b79e:	68e2      	ldr	r2, [r4, #12]
 801b7a0:	2a00      	cmp	r2, #0
 801b7a2:	dc0f      	bgt.n	801b7c4 <validate_structure+0xfc>
 801b7a4:	4f33      	ldr	r7, [pc, #204]	; (801b874 <validate_structure+0x1ac>)
 801b7a6:	260b      	movs	r6, #11
 801b7a8:	2064      	movs	r0, #100	; 0x64
 801b7aa:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801b7ae:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801b7b2:	f1bc 0f00 	cmp.w	ip, #0
 801b7b6:	dd31      	ble.n	801b81c <validate_structure+0x154>
 801b7b8:	b003      	add	sp, #12
 801b7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7bc:	231c      	movs	r3, #28
 801b7be:	e7ee      	b.n	801b79e <validate_structure+0xd6>
 801b7c0:	231d      	movs	r3, #29
 801b7c2:	e7ec      	b.n	801b79e <validate_structure+0xd6>
 801b7c4:	4f2b      	ldr	r7, [pc, #172]	; (801b874 <validate_structure+0x1ac>)
 801b7c6:	f04f 0c00 	mov.w	ip, #0
 801b7ca:	2564      	movs	r5, #100	; 0x64
 801b7cc:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801b7d0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801b7d4:	2a01      	cmp	r2, #1
 801b7d6:	bf14      	ite	ne
 801b7d8:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801b7dc:	4618      	moveq	r0, r3
 801b7de:	4281      	cmp	r1, r0
 801b7e0:	ddea      	ble.n	801b7b8 <validate_structure+0xf0>
 801b7e2:	3201      	adds	r2, #1
 801b7e4:	1a09      	subs	r1, r1, r0
 801b7e6:	2a0c      	cmp	r2, #12
 801b7e8:	60e1      	str	r1, [r4, #12]
 801b7ea:	6122      	str	r2, [r4, #16]
 801b7ec:	d1f0      	bne.n	801b7d0 <validate_structure+0x108>
 801b7ee:	6963      	ldr	r3, [r4, #20]
 801b7f0:	1c5a      	adds	r2, r3, #1
 801b7f2:	0791      	lsls	r1, r2, #30
 801b7f4:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801b7f8:	d137      	bne.n	801b86a <validate_structure+0x1a2>
 801b7fa:	fb92 f1f5 	sdiv	r1, r2, r5
 801b7fe:	fb05 2211 	mls	r2, r5, r1, r2
 801b802:	2a00      	cmp	r2, #0
 801b804:	d133      	bne.n	801b86e <validate_structure+0x1a6>
 801b806:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801b80a:	fb93 f2f6 	sdiv	r2, r3, r6
 801b80e:	fb06 3312 	mls	r3, r6, r2, r3
 801b812:	2b00      	cmp	r3, #0
 801b814:	bf14      	ite	ne
 801b816:	231c      	movne	r3, #28
 801b818:	231d      	moveq	r3, #29
 801b81a:	e7d9      	b.n	801b7d0 <validate_structure+0x108>
 801b81c:	6921      	ldr	r1, [r4, #16]
 801b81e:	3901      	subs	r1, #1
 801b820:	6121      	str	r1, [r4, #16]
 801b822:	3101      	adds	r1, #1
 801b824:	d114      	bne.n	801b850 <validate_structure+0x188>
 801b826:	6963      	ldr	r3, [r4, #20]
 801b828:	1e59      	subs	r1, r3, #1
 801b82a:	078a      	lsls	r2, r1, #30
 801b82c:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801b830:	d117      	bne.n	801b862 <validate_structure+0x19a>
 801b832:	fb91 f2f0 	sdiv	r2, r1, r0
 801b836:	fb00 1112 	mls	r1, r0, r2, r1
 801b83a:	b9a1      	cbnz	r1, 801b866 <validate_structure+0x19e>
 801b83c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801b840:	fb93 f2f5 	sdiv	r2, r3, r5
 801b844:	fb05 3312 	mls	r3, r5, r2, r3
 801b848:	2b00      	cmp	r3, #0
 801b84a:	bf14      	ite	ne
 801b84c:	231c      	movne	r3, #28
 801b84e:	231d      	moveq	r3, #29
 801b850:	6922      	ldr	r2, [r4, #16]
 801b852:	2a01      	cmp	r2, #1
 801b854:	bf14      	ite	ne
 801b856:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801b85a:	461a      	moveq	r2, r3
 801b85c:	4462      	add	r2, ip
 801b85e:	60e2      	str	r2, [r4, #12]
 801b860:	e7a5      	b.n	801b7ae <validate_structure+0xe6>
 801b862:	231c      	movs	r3, #28
 801b864:	e7f4      	b.n	801b850 <validate_structure+0x188>
 801b866:	231d      	movs	r3, #29
 801b868:	e7f2      	b.n	801b850 <validate_structure+0x188>
 801b86a:	231c      	movs	r3, #28
 801b86c:	e7b0      	b.n	801b7d0 <validate_structure+0x108>
 801b86e:	231d      	movs	r3, #29
 801b870:	e7ae      	b.n	801b7d0 <validate_structure+0x108>
 801b872:	bf00      	nop
 801b874:	080233a8 	.word	0x080233a8

0801b878 <mktime>:
 801b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b87c:	b08b      	sub	sp, #44	; 0x2c
 801b87e:	4605      	mov	r5, r0
 801b880:	f004 f888 	bl	801f994 <__gettzinfo>
 801b884:	4607      	mov	r7, r0
 801b886:	4628      	mov	r0, r5
 801b888:	f7ff ff1e 	bl	801b6c8 <validate_structure>
 801b88c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b890:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801b894:	68a8      	ldr	r0, [r5, #8]
 801b896:	696e      	ldr	r6, [r5, #20]
 801b898:	fb0a 2303 	mla	r3, sl, r3, r2
 801b89c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801b8a0:	fb0a 3a00 	mla	sl, sl, r0, r3
 801b8a4:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801b8a8:	4ac3      	ldr	r2, [pc, #780]	; (801bbb8 <mktime+0x340>)
 801b8aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801b8ae:	3c01      	subs	r4, #1
 801b8b0:	2b01      	cmp	r3, #1
 801b8b2:	4414      	add	r4, r2
 801b8b4:	dd11      	ble.n	801b8da <mktime+0x62>
 801b8b6:	07b1      	lsls	r1, r6, #30
 801b8b8:	d10f      	bne.n	801b8da <mktime+0x62>
 801b8ba:	2264      	movs	r2, #100	; 0x64
 801b8bc:	fb96 f3f2 	sdiv	r3, r6, r2
 801b8c0:	fb02 6313 	mls	r3, r2, r3, r6
 801b8c4:	b943      	cbnz	r3, 801b8d8 <mktime+0x60>
 801b8c6:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801b8ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b8ce:	fb91 f3f2 	sdiv	r3, r1, r2
 801b8d2:	fb02 1313 	mls	r3, r2, r3, r1
 801b8d6:	b903      	cbnz	r3, 801b8da <mktime+0x62>
 801b8d8:	3401      	adds	r4, #1
 801b8da:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801b8de:	3310      	adds	r3, #16
 801b8e0:	f644 6220 	movw	r2, #20000	; 0x4e20
 801b8e4:	4293      	cmp	r3, r2
 801b8e6:	61ec      	str	r4, [r5, #28]
 801b8e8:	f200 8161 	bhi.w	801bbae <mktime+0x336>
 801b8ec:	2e46      	cmp	r6, #70	; 0x46
 801b8ee:	dd77      	ble.n	801b9e0 <mktime+0x168>
 801b8f0:	2346      	movs	r3, #70	; 0x46
 801b8f2:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b8f6:	2164      	movs	r1, #100	; 0x64
 801b8f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b8fc:	079a      	lsls	r2, r3, #30
 801b8fe:	d169      	bne.n	801b9d4 <mktime+0x15c>
 801b900:	fb93 f2f1 	sdiv	r2, r3, r1
 801b904:	fb01 3212 	mls	r2, r1, r2, r3
 801b908:	2a00      	cmp	r2, #0
 801b90a:	d166      	bne.n	801b9da <mktime+0x162>
 801b90c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801b910:	fb9c f2f0 	sdiv	r2, ip, r0
 801b914:	fb00 c212 	mls	r2, r0, r2, ip
 801b918:	2a00      	cmp	r2, #0
 801b91a:	bf14      	ite	ne
 801b91c:	4672      	movne	r2, lr
 801b91e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b922:	3301      	adds	r3, #1
 801b924:	429e      	cmp	r6, r3
 801b926:	4414      	add	r4, r2
 801b928:	d1e8      	bne.n	801b8fc <mktime+0x84>
 801b92a:	4ba4      	ldr	r3, [pc, #656]	; (801bbbc <mktime+0x344>)
 801b92c:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801b930:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801b934:	f002 fa54 	bl	801dde0 <__tz_lock>
 801b938:	f002 fa5e 	bl	801ddf8 <_tzset_unlocked>
 801b93c:	4ba0      	ldr	r3, [pc, #640]	; (801bbc0 <mktime+0x348>)
 801b93e:	f8d3 9000 	ldr.w	r9, [r3]
 801b942:	f1b9 0f00 	cmp.w	r9, #0
 801b946:	d03f      	beq.n	801b9c8 <mktime+0x150>
 801b948:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801b94c:	6968      	ldr	r0, [r5, #20]
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	f1b9 0f01 	cmp.w	r9, #1
 801b954:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801b958:	46c8      	mov	r8, r9
 801b95a:	bfa8      	it	ge
 801b95c:	f04f 0801 	movge.w	r8, #1
 801b960:	4283      	cmp	r3, r0
 801b962:	d17f      	bne.n	801ba64 <mktime+0x1ec>
 801b964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b966:	4619      	mov	r1, r3
 801b968:	17da      	asrs	r2, r3, #31
 801b96a:	e9cd 1200 	strd	r1, r2, [sp]
 801b96e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801b972:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b97a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b97c:	1a80      	subs	r0, r0, r2
 801b97e:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801b982:	4582      	cmp	sl, r0
 801b984:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b988:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b98c:	da71      	bge.n	801ba72 <mktime+0x1fa>
 801b98e:	9800      	ldr	r0, [sp, #0]
 801b990:	6a39      	ldr	r1, [r7, #32]
 801b992:	1a09      	subs	r1, r1, r0
 801b994:	9104      	str	r1, [sp, #16]
 801b996:	9801      	ldr	r0, [sp, #4]
 801b998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b99a:	eb61 0100 	sbc.w	r1, r1, r0
 801b99e:	9105      	str	r1, [sp, #20]
 801b9a0:	6839      	ldr	r1, [r7, #0]
 801b9a2:	2900      	cmp	r1, #0
 801b9a4:	d075      	beq.n	801ba92 <mktime+0x21a>
 801b9a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b9aa:	4582      	cmp	sl, r0
 801b9ac:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b9b0:	db05      	blt.n	801b9be <mktime+0x146>
 801b9b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b9b6:	4582      	cmp	sl, r0
 801b9b8:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b9bc:	db6f      	blt.n	801ba9e <mktime+0x226>
 801b9be:	f1b9 0f00 	cmp.w	r9, #0
 801b9c2:	f04f 0900 	mov.w	r9, #0
 801b9c6:	da6f      	bge.n	801baa8 <mktime+0x230>
 801b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9ca:	eb1a 0a03 	adds.w	sl, sl, r3
 801b9ce:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b9d2:	e0ae      	b.n	801bb32 <mktime+0x2ba>
 801b9d4:	f240 126d 	movw	r2, #365	; 0x16d
 801b9d8:	e7a3      	b.n	801b922 <mktime+0xaa>
 801b9da:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b9de:	e7a0      	b.n	801b922 <mktime+0xaa>
 801b9e0:	d0a3      	beq.n	801b92a <mktime+0xb2>
 801b9e2:	2345      	movs	r3, #69	; 0x45
 801b9e4:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b9e8:	2164      	movs	r1, #100	; 0x64
 801b9ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b9ee:	e012      	b.n	801ba16 <mktime+0x19e>
 801b9f0:	bb62      	cbnz	r2, 801ba4c <mktime+0x1d4>
 801b9f2:	fb93 f2f1 	sdiv	r2, r3, r1
 801b9f6:	fb01 3212 	mls	r2, r1, r2, r3
 801b9fa:	bb52      	cbnz	r2, 801ba52 <mktime+0x1da>
 801b9fc:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801ba00:	fb9c f2f0 	sdiv	r2, ip, r0
 801ba04:	fb00 c212 	mls	r2, r0, r2, ip
 801ba08:	2a00      	cmp	r2, #0
 801ba0a:	bf14      	ite	ne
 801ba0c:	4672      	movne	r2, lr
 801ba0e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801ba12:	1aa4      	subs	r4, r4, r2
 801ba14:	3b01      	subs	r3, #1
 801ba16:	429e      	cmp	r6, r3
 801ba18:	f003 0203 	and.w	r2, r3, #3
 801ba1c:	dbe8      	blt.n	801b9f0 <mktime+0x178>
 801ba1e:	b9da      	cbnz	r2, 801ba58 <mktime+0x1e0>
 801ba20:	2264      	movs	r2, #100	; 0x64
 801ba22:	fb96 f3f2 	sdiv	r3, r6, r2
 801ba26:	fb02 6313 	mls	r3, r2, r3, r6
 801ba2a:	b9c3      	cbnz	r3, 801ba5e <mktime+0x1e6>
 801ba2c:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801ba30:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801ba34:	fb91 f3f2 	sdiv	r3, r1, r2
 801ba38:	fb02 1313 	mls	r3, r2, r3, r1
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	f240 136d 	movw	r3, #365	; 0x16d
 801ba42:	bf08      	it	eq
 801ba44:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801ba48:	1ae4      	subs	r4, r4, r3
 801ba4a:	e76e      	b.n	801b92a <mktime+0xb2>
 801ba4c:	f240 126d 	movw	r2, #365	; 0x16d
 801ba50:	e7df      	b.n	801ba12 <mktime+0x19a>
 801ba52:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801ba56:	e7dc      	b.n	801ba12 <mktime+0x19a>
 801ba58:	f240 136d 	movw	r3, #365	; 0x16d
 801ba5c:	e7f4      	b.n	801ba48 <mktime+0x1d0>
 801ba5e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801ba62:	e7f1      	b.n	801ba48 <mktime+0x1d0>
 801ba64:	f002 f914 	bl	801dc90 <__tzcalc_limits>
 801ba68:	2800      	cmp	r0, #0
 801ba6a:	f47f af7b 	bne.w	801b964 <mktime+0xec>
 801ba6e:	46c1      	mov	r9, r8
 801ba70:	e054      	b.n	801bb1c <mktime+0x2a4>
 801ba72:	9800      	ldr	r0, [sp, #0]
 801ba74:	9902      	ldr	r1, [sp, #8]
 801ba76:	1a09      	subs	r1, r1, r0
 801ba78:	9108      	str	r1, [sp, #32]
 801ba7a:	9801      	ldr	r0, [sp, #4]
 801ba7c:	9903      	ldr	r1, [sp, #12]
 801ba7e:	eb61 0100 	sbc.w	r1, r1, r0
 801ba82:	9109      	str	r1, [sp, #36]	; 0x24
 801ba84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ba88:	4582      	cmp	sl, r0
 801ba8a:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ba8e:	dbee      	blt.n	801ba6e <mktime+0x1f6>
 801ba90:	e77d      	b.n	801b98e <mktime+0x116>
 801ba92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ba96:	4582      	cmp	sl, r0
 801ba98:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ba9c:	db89      	blt.n	801b9b2 <mktime+0x13a>
 801ba9e:	f1b9 0f00 	cmp.w	r9, #0
 801baa2:	db3f      	blt.n	801bb24 <mktime+0x2ac>
 801baa4:	f04f 0901 	mov.w	r9, #1
 801baa8:	ea88 0809 	eor.w	r8, r8, r9
 801baac:	f1b8 0f01 	cmp.w	r8, #1
 801bab0:	d134      	bne.n	801bb1c <mktime+0x2a4>
 801bab2:	f1b9 0f00 	cmp.w	r9, #0
 801bab6:	d04f      	beq.n	801bb58 <mktime+0x2e0>
 801bab8:	1ad3      	subs	r3, r2, r3
 801baba:	682a      	ldr	r2, [r5, #0]
 801babc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801bac0:	441a      	add	r2, r3
 801bac2:	eb1a 0a03 	adds.w	sl, sl, r3
 801bac6:	602a      	str	r2, [r5, #0]
 801bac8:	4628      	mov	r0, r5
 801baca:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801bace:	f7ff fdfb 	bl	801b6c8 <validate_structure>
 801bad2:	68ea      	ldr	r2, [r5, #12]
 801bad4:	ebb2 0208 	subs.w	r2, r2, r8
 801bad8:	d020      	beq.n	801bb1c <mktime+0x2a4>
 801bada:	2a01      	cmp	r2, #1
 801badc:	dc3e      	bgt.n	801bb5c <mktime+0x2e4>
 801bade:	1c90      	adds	r0, r2, #2
 801bae0:	bfd8      	it	le
 801bae2:	2201      	movle	r2, #1
 801bae4:	69eb      	ldr	r3, [r5, #28]
 801bae6:	18d3      	adds	r3, r2, r3
 801bae8:	4414      	add	r4, r2
 801baea:	d540      	bpl.n	801bb6e <mktime+0x2f6>
 801baec:	1e72      	subs	r2, r6, #1
 801baee:	0791      	lsls	r1, r2, #30
 801baf0:	d137      	bne.n	801bb62 <mktime+0x2ea>
 801baf2:	2164      	movs	r1, #100	; 0x64
 801baf4:	fb92 f3f1 	sdiv	r3, r2, r1
 801baf8:	fb01 2313 	mls	r3, r1, r3, r2
 801bafc:	bba3      	cbnz	r3, 801bb68 <mktime+0x2f0>
 801bafe:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801bb02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801bb06:	fb96 f3f2 	sdiv	r3, r6, r2
 801bb0a:	fb02 6613 	mls	r6, r2, r3, r6
 801bb0e:	2e00      	cmp	r6, #0
 801bb10:	f240 136d 	movw	r3, #365	; 0x16d
 801bb14:	bf18      	it	ne
 801bb16:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801bb1a:	61eb      	str	r3, [r5, #28]
 801bb1c:	f1b9 0f01 	cmp.w	r9, #1
 801bb20:	f47f af52 	bne.w	801b9c8 <mktime+0x150>
 801bb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb26:	eb1a 0a03 	adds.w	sl, sl, r3
 801bb2a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801bb2e:	f04f 0901 	mov.w	r9, #1
 801bb32:	f002 f95b 	bl	801ddec <__tz_unlock>
 801bb36:	3404      	adds	r4, #4
 801bb38:	2307      	movs	r3, #7
 801bb3a:	fb94 f3f3 	sdiv	r3, r4, r3
 801bb3e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801bb42:	1ae4      	subs	r4, r4, r3
 801bb44:	bf48      	it	mi
 801bb46:	3407      	addmi	r4, #7
 801bb48:	f8c5 9020 	str.w	r9, [r5, #32]
 801bb4c:	61ac      	str	r4, [r5, #24]
 801bb4e:	4650      	mov	r0, sl
 801bb50:	4659      	mov	r1, fp
 801bb52:	b00b      	add	sp, #44	; 0x2c
 801bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb58:	1a9b      	subs	r3, r3, r2
 801bb5a:	e7ae      	b.n	801baba <mktime+0x242>
 801bb5c:	f04f 32ff 	mov.w	r2, #4294967295
 801bb60:	e7c0      	b.n	801bae4 <mktime+0x26c>
 801bb62:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801bb66:	e7d8      	b.n	801bb1a <mktime+0x2a2>
 801bb68:	f240 136d 	movw	r3, #365	; 0x16d
 801bb6c:	e7d5      	b.n	801bb1a <mktime+0x2a2>
 801bb6e:	07b2      	lsls	r2, r6, #30
 801bb70:	d117      	bne.n	801bba2 <mktime+0x32a>
 801bb72:	2164      	movs	r1, #100	; 0x64
 801bb74:	fb96 f2f1 	sdiv	r2, r6, r1
 801bb78:	fb01 6212 	mls	r2, r1, r2, r6
 801bb7c:	b9a2      	cbnz	r2, 801bba8 <mktime+0x330>
 801bb7e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801bb82:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801bb86:	fb96 f2f1 	sdiv	r2, r6, r1
 801bb8a:	fb01 6612 	mls	r6, r1, r2, r6
 801bb8e:	2e00      	cmp	r6, #0
 801bb90:	f240 126d 	movw	r2, #365	; 0x16d
 801bb94:	bf08      	it	eq
 801bb96:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801bb9a:	4293      	cmp	r3, r2
 801bb9c:	bfa8      	it	ge
 801bb9e:	1a9b      	subge	r3, r3, r2
 801bba0:	e7bb      	b.n	801bb1a <mktime+0x2a2>
 801bba2:	f240 126d 	movw	r2, #365	; 0x16d
 801bba6:	e7f8      	b.n	801bb9a <mktime+0x322>
 801bba8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801bbac:	e7f5      	b.n	801bb9a <mktime+0x322>
 801bbae:	f04f 3aff 	mov.w	sl, #4294967295
 801bbb2:	f04f 3bff 	mov.w	fp, #4294967295
 801bbb6:	e7ca      	b.n	801bb4e <mktime+0x2d6>
 801bbb8:	080233d8 	.word	0x080233d8
 801bbbc:	00015180 	.word	0x00015180
 801bbc0:	20005ed8 	.word	0x20005ed8

0801bbc4 <_free_r>:
 801bbc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bbc6:	2900      	cmp	r1, #0
 801bbc8:	d048      	beq.n	801bc5c <_free_r+0x98>
 801bbca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bbce:	9001      	str	r0, [sp, #4]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	f1a1 0404 	sub.w	r4, r1, #4
 801bbd6:	bfb8      	it	lt
 801bbd8:	18e4      	addlt	r4, r4, r3
 801bbda:	f004 f81b 	bl	801fc14 <__malloc_lock>
 801bbde:	4a20      	ldr	r2, [pc, #128]	; (801bc60 <_free_r+0x9c>)
 801bbe0:	9801      	ldr	r0, [sp, #4]
 801bbe2:	6813      	ldr	r3, [r2, #0]
 801bbe4:	4615      	mov	r5, r2
 801bbe6:	b933      	cbnz	r3, 801bbf6 <_free_r+0x32>
 801bbe8:	6063      	str	r3, [r4, #4]
 801bbea:	6014      	str	r4, [r2, #0]
 801bbec:	b003      	add	sp, #12
 801bbee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bbf2:	f004 b815 	b.w	801fc20 <__malloc_unlock>
 801bbf6:	42a3      	cmp	r3, r4
 801bbf8:	d90b      	bls.n	801bc12 <_free_r+0x4e>
 801bbfa:	6821      	ldr	r1, [r4, #0]
 801bbfc:	1862      	adds	r2, r4, r1
 801bbfe:	4293      	cmp	r3, r2
 801bc00:	bf04      	itt	eq
 801bc02:	681a      	ldreq	r2, [r3, #0]
 801bc04:	685b      	ldreq	r3, [r3, #4]
 801bc06:	6063      	str	r3, [r4, #4]
 801bc08:	bf04      	itt	eq
 801bc0a:	1852      	addeq	r2, r2, r1
 801bc0c:	6022      	streq	r2, [r4, #0]
 801bc0e:	602c      	str	r4, [r5, #0]
 801bc10:	e7ec      	b.n	801bbec <_free_r+0x28>
 801bc12:	461a      	mov	r2, r3
 801bc14:	685b      	ldr	r3, [r3, #4]
 801bc16:	b10b      	cbz	r3, 801bc1c <_free_r+0x58>
 801bc18:	42a3      	cmp	r3, r4
 801bc1a:	d9fa      	bls.n	801bc12 <_free_r+0x4e>
 801bc1c:	6811      	ldr	r1, [r2, #0]
 801bc1e:	1855      	adds	r5, r2, r1
 801bc20:	42a5      	cmp	r5, r4
 801bc22:	d10b      	bne.n	801bc3c <_free_r+0x78>
 801bc24:	6824      	ldr	r4, [r4, #0]
 801bc26:	4421      	add	r1, r4
 801bc28:	1854      	adds	r4, r2, r1
 801bc2a:	42a3      	cmp	r3, r4
 801bc2c:	6011      	str	r1, [r2, #0]
 801bc2e:	d1dd      	bne.n	801bbec <_free_r+0x28>
 801bc30:	681c      	ldr	r4, [r3, #0]
 801bc32:	685b      	ldr	r3, [r3, #4]
 801bc34:	6053      	str	r3, [r2, #4]
 801bc36:	4421      	add	r1, r4
 801bc38:	6011      	str	r1, [r2, #0]
 801bc3a:	e7d7      	b.n	801bbec <_free_r+0x28>
 801bc3c:	d902      	bls.n	801bc44 <_free_r+0x80>
 801bc3e:	230c      	movs	r3, #12
 801bc40:	6003      	str	r3, [r0, #0]
 801bc42:	e7d3      	b.n	801bbec <_free_r+0x28>
 801bc44:	6825      	ldr	r5, [r4, #0]
 801bc46:	1961      	adds	r1, r4, r5
 801bc48:	428b      	cmp	r3, r1
 801bc4a:	bf04      	itt	eq
 801bc4c:	6819      	ldreq	r1, [r3, #0]
 801bc4e:	685b      	ldreq	r3, [r3, #4]
 801bc50:	6063      	str	r3, [r4, #4]
 801bc52:	bf04      	itt	eq
 801bc54:	1949      	addeq	r1, r1, r5
 801bc56:	6021      	streq	r1, [r4, #0]
 801bc58:	6054      	str	r4, [r2, #4]
 801bc5a:	e7c7      	b.n	801bbec <_free_r+0x28>
 801bc5c:	b003      	add	sp, #12
 801bc5e:	bd30      	pop	{r4, r5, pc}
 801bc60:	20005eb4 	.word	0x20005eb4

0801bc64 <_malloc_r>:
 801bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc66:	1ccd      	adds	r5, r1, #3
 801bc68:	f025 0503 	bic.w	r5, r5, #3
 801bc6c:	3508      	adds	r5, #8
 801bc6e:	2d0c      	cmp	r5, #12
 801bc70:	bf38      	it	cc
 801bc72:	250c      	movcc	r5, #12
 801bc74:	2d00      	cmp	r5, #0
 801bc76:	4606      	mov	r6, r0
 801bc78:	db01      	blt.n	801bc7e <_malloc_r+0x1a>
 801bc7a:	42a9      	cmp	r1, r5
 801bc7c:	d903      	bls.n	801bc86 <_malloc_r+0x22>
 801bc7e:	230c      	movs	r3, #12
 801bc80:	6033      	str	r3, [r6, #0]
 801bc82:	2000      	movs	r0, #0
 801bc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc86:	f003 ffc5 	bl	801fc14 <__malloc_lock>
 801bc8a:	4921      	ldr	r1, [pc, #132]	; (801bd10 <_malloc_r+0xac>)
 801bc8c:	680a      	ldr	r2, [r1, #0]
 801bc8e:	4614      	mov	r4, r2
 801bc90:	b99c      	cbnz	r4, 801bcba <_malloc_r+0x56>
 801bc92:	4f20      	ldr	r7, [pc, #128]	; (801bd14 <_malloc_r+0xb0>)
 801bc94:	683b      	ldr	r3, [r7, #0]
 801bc96:	b923      	cbnz	r3, 801bca2 <_malloc_r+0x3e>
 801bc98:	4621      	mov	r1, r4
 801bc9a:	4630      	mov	r0, r6
 801bc9c:	f000 ffae 	bl	801cbfc <_sbrk_r>
 801bca0:	6038      	str	r0, [r7, #0]
 801bca2:	4629      	mov	r1, r5
 801bca4:	4630      	mov	r0, r6
 801bca6:	f000 ffa9 	bl	801cbfc <_sbrk_r>
 801bcaa:	1c43      	adds	r3, r0, #1
 801bcac:	d123      	bne.n	801bcf6 <_malloc_r+0x92>
 801bcae:	230c      	movs	r3, #12
 801bcb0:	6033      	str	r3, [r6, #0]
 801bcb2:	4630      	mov	r0, r6
 801bcb4:	f003 ffb4 	bl	801fc20 <__malloc_unlock>
 801bcb8:	e7e3      	b.n	801bc82 <_malloc_r+0x1e>
 801bcba:	6823      	ldr	r3, [r4, #0]
 801bcbc:	1b5b      	subs	r3, r3, r5
 801bcbe:	d417      	bmi.n	801bcf0 <_malloc_r+0x8c>
 801bcc0:	2b0b      	cmp	r3, #11
 801bcc2:	d903      	bls.n	801bccc <_malloc_r+0x68>
 801bcc4:	6023      	str	r3, [r4, #0]
 801bcc6:	441c      	add	r4, r3
 801bcc8:	6025      	str	r5, [r4, #0]
 801bcca:	e004      	b.n	801bcd6 <_malloc_r+0x72>
 801bccc:	6863      	ldr	r3, [r4, #4]
 801bcce:	42a2      	cmp	r2, r4
 801bcd0:	bf0c      	ite	eq
 801bcd2:	600b      	streq	r3, [r1, #0]
 801bcd4:	6053      	strne	r3, [r2, #4]
 801bcd6:	4630      	mov	r0, r6
 801bcd8:	f003 ffa2 	bl	801fc20 <__malloc_unlock>
 801bcdc:	f104 000b 	add.w	r0, r4, #11
 801bce0:	1d23      	adds	r3, r4, #4
 801bce2:	f020 0007 	bic.w	r0, r0, #7
 801bce6:	1ac2      	subs	r2, r0, r3
 801bce8:	d0cc      	beq.n	801bc84 <_malloc_r+0x20>
 801bcea:	1a1b      	subs	r3, r3, r0
 801bcec:	50a3      	str	r3, [r4, r2]
 801bcee:	e7c9      	b.n	801bc84 <_malloc_r+0x20>
 801bcf0:	4622      	mov	r2, r4
 801bcf2:	6864      	ldr	r4, [r4, #4]
 801bcf4:	e7cc      	b.n	801bc90 <_malloc_r+0x2c>
 801bcf6:	1cc4      	adds	r4, r0, #3
 801bcf8:	f024 0403 	bic.w	r4, r4, #3
 801bcfc:	42a0      	cmp	r0, r4
 801bcfe:	d0e3      	beq.n	801bcc8 <_malloc_r+0x64>
 801bd00:	1a21      	subs	r1, r4, r0
 801bd02:	4630      	mov	r0, r6
 801bd04:	f000 ff7a 	bl	801cbfc <_sbrk_r>
 801bd08:	3001      	adds	r0, #1
 801bd0a:	d1dd      	bne.n	801bcc8 <_malloc_r+0x64>
 801bd0c:	e7cf      	b.n	801bcae <_malloc_r+0x4a>
 801bd0e:	bf00      	nop
 801bd10:	20005eb4 	.word	0x20005eb4
 801bd14:	20005eb8 	.word	0x20005eb8

0801bd18 <__cvt>:
 801bd18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bd1c:	ec55 4b10 	vmov	r4, r5, d0
 801bd20:	2d00      	cmp	r5, #0
 801bd22:	460e      	mov	r6, r1
 801bd24:	4619      	mov	r1, r3
 801bd26:	462b      	mov	r3, r5
 801bd28:	bfbb      	ittet	lt
 801bd2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801bd2e:	461d      	movlt	r5, r3
 801bd30:	2300      	movge	r3, #0
 801bd32:	232d      	movlt	r3, #45	; 0x2d
 801bd34:	700b      	strb	r3, [r1, #0]
 801bd36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801bd3c:	4691      	mov	r9, r2
 801bd3e:	f023 0820 	bic.w	r8, r3, #32
 801bd42:	bfbc      	itt	lt
 801bd44:	4622      	movlt	r2, r4
 801bd46:	4614      	movlt	r4, r2
 801bd48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801bd4c:	d005      	beq.n	801bd5a <__cvt+0x42>
 801bd4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801bd52:	d100      	bne.n	801bd56 <__cvt+0x3e>
 801bd54:	3601      	adds	r6, #1
 801bd56:	2102      	movs	r1, #2
 801bd58:	e000      	b.n	801bd5c <__cvt+0x44>
 801bd5a:	2103      	movs	r1, #3
 801bd5c:	ab03      	add	r3, sp, #12
 801bd5e:	9301      	str	r3, [sp, #4]
 801bd60:	ab02      	add	r3, sp, #8
 801bd62:	9300      	str	r3, [sp, #0]
 801bd64:	ec45 4b10 	vmov	d0, r4, r5
 801bd68:	4653      	mov	r3, sl
 801bd6a:	4632      	mov	r2, r6
 801bd6c:	f002 fba0 	bl	801e4b0 <_dtoa_r>
 801bd70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801bd74:	4607      	mov	r7, r0
 801bd76:	d102      	bne.n	801bd7e <__cvt+0x66>
 801bd78:	f019 0f01 	tst.w	r9, #1
 801bd7c:	d022      	beq.n	801bdc4 <__cvt+0xac>
 801bd7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801bd82:	eb07 0906 	add.w	r9, r7, r6
 801bd86:	d110      	bne.n	801bdaa <__cvt+0x92>
 801bd88:	783b      	ldrb	r3, [r7, #0]
 801bd8a:	2b30      	cmp	r3, #48	; 0x30
 801bd8c:	d10a      	bne.n	801bda4 <__cvt+0x8c>
 801bd8e:	2200      	movs	r2, #0
 801bd90:	2300      	movs	r3, #0
 801bd92:	4620      	mov	r0, r4
 801bd94:	4629      	mov	r1, r5
 801bd96:	f7e4 feb7 	bl	8000b08 <__aeabi_dcmpeq>
 801bd9a:	b918      	cbnz	r0, 801bda4 <__cvt+0x8c>
 801bd9c:	f1c6 0601 	rsb	r6, r6, #1
 801bda0:	f8ca 6000 	str.w	r6, [sl]
 801bda4:	f8da 3000 	ldr.w	r3, [sl]
 801bda8:	4499      	add	r9, r3
 801bdaa:	2200      	movs	r2, #0
 801bdac:	2300      	movs	r3, #0
 801bdae:	4620      	mov	r0, r4
 801bdb0:	4629      	mov	r1, r5
 801bdb2:	f7e4 fea9 	bl	8000b08 <__aeabi_dcmpeq>
 801bdb6:	b108      	cbz	r0, 801bdbc <__cvt+0xa4>
 801bdb8:	f8cd 900c 	str.w	r9, [sp, #12]
 801bdbc:	2230      	movs	r2, #48	; 0x30
 801bdbe:	9b03      	ldr	r3, [sp, #12]
 801bdc0:	454b      	cmp	r3, r9
 801bdc2:	d307      	bcc.n	801bdd4 <__cvt+0xbc>
 801bdc4:	9b03      	ldr	r3, [sp, #12]
 801bdc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bdc8:	1bdb      	subs	r3, r3, r7
 801bdca:	4638      	mov	r0, r7
 801bdcc:	6013      	str	r3, [r2, #0]
 801bdce:	b004      	add	sp, #16
 801bdd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdd4:	1c59      	adds	r1, r3, #1
 801bdd6:	9103      	str	r1, [sp, #12]
 801bdd8:	701a      	strb	r2, [r3, #0]
 801bdda:	e7f0      	b.n	801bdbe <__cvt+0xa6>

0801bddc <__exponent>:
 801bddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bdde:	4603      	mov	r3, r0
 801bde0:	2900      	cmp	r1, #0
 801bde2:	bfb8      	it	lt
 801bde4:	4249      	neglt	r1, r1
 801bde6:	f803 2b02 	strb.w	r2, [r3], #2
 801bdea:	bfb4      	ite	lt
 801bdec:	222d      	movlt	r2, #45	; 0x2d
 801bdee:	222b      	movge	r2, #43	; 0x2b
 801bdf0:	2909      	cmp	r1, #9
 801bdf2:	7042      	strb	r2, [r0, #1]
 801bdf4:	dd2a      	ble.n	801be4c <__exponent+0x70>
 801bdf6:	f10d 0407 	add.w	r4, sp, #7
 801bdfa:	46a4      	mov	ip, r4
 801bdfc:	270a      	movs	r7, #10
 801bdfe:	46a6      	mov	lr, r4
 801be00:	460a      	mov	r2, r1
 801be02:	fb91 f6f7 	sdiv	r6, r1, r7
 801be06:	fb07 1516 	mls	r5, r7, r6, r1
 801be0a:	3530      	adds	r5, #48	; 0x30
 801be0c:	2a63      	cmp	r2, #99	; 0x63
 801be0e:	f104 34ff 	add.w	r4, r4, #4294967295
 801be12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801be16:	4631      	mov	r1, r6
 801be18:	dcf1      	bgt.n	801bdfe <__exponent+0x22>
 801be1a:	3130      	adds	r1, #48	; 0x30
 801be1c:	f1ae 0502 	sub.w	r5, lr, #2
 801be20:	f804 1c01 	strb.w	r1, [r4, #-1]
 801be24:	1c44      	adds	r4, r0, #1
 801be26:	4629      	mov	r1, r5
 801be28:	4561      	cmp	r1, ip
 801be2a:	d30a      	bcc.n	801be42 <__exponent+0x66>
 801be2c:	f10d 0209 	add.w	r2, sp, #9
 801be30:	eba2 020e 	sub.w	r2, r2, lr
 801be34:	4565      	cmp	r5, ip
 801be36:	bf88      	it	hi
 801be38:	2200      	movhi	r2, #0
 801be3a:	4413      	add	r3, r2
 801be3c:	1a18      	subs	r0, r3, r0
 801be3e:	b003      	add	sp, #12
 801be40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be42:	f811 2b01 	ldrb.w	r2, [r1], #1
 801be46:	f804 2f01 	strb.w	r2, [r4, #1]!
 801be4a:	e7ed      	b.n	801be28 <__exponent+0x4c>
 801be4c:	2330      	movs	r3, #48	; 0x30
 801be4e:	3130      	adds	r1, #48	; 0x30
 801be50:	7083      	strb	r3, [r0, #2]
 801be52:	70c1      	strb	r1, [r0, #3]
 801be54:	1d03      	adds	r3, r0, #4
 801be56:	e7f1      	b.n	801be3c <__exponent+0x60>

0801be58 <_printf_float>:
 801be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be5c:	ed2d 8b02 	vpush	{d8}
 801be60:	b08d      	sub	sp, #52	; 0x34
 801be62:	460c      	mov	r4, r1
 801be64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801be68:	4616      	mov	r6, r2
 801be6a:	461f      	mov	r7, r3
 801be6c:	4605      	mov	r5, r0
 801be6e:	f003 fe45 	bl	801fafc <_localeconv_r>
 801be72:	f8d0 a000 	ldr.w	sl, [r0]
 801be76:	4650      	mov	r0, sl
 801be78:	f7e4 f9c4 	bl	8000204 <strlen>
 801be7c:	2300      	movs	r3, #0
 801be7e:	930a      	str	r3, [sp, #40]	; 0x28
 801be80:	6823      	ldr	r3, [r4, #0]
 801be82:	9305      	str	r3, [sp, #20]
 801be84:	f8d8 3000 	ldr.w	r3, [r8]
 801be88:	f894 b018 	ldrb.w	fp, [r4, #24]
 801be8c:	3307      	adds	r3, #7
 801be8e:	f023 0307 	bic.w	r3, r3, #7
 801be92:	f103 0208 	add.w	r2, r3, #8
 801be96:	f8c8 2000 	str.w	r2, [r8]
 801be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801bea2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801bea6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801beaa:	9307      	str	r3, [sp, #28]
 801beac:	f8cd 8018 	str.w	r8, [sp, #24]
 801beb0:	ee08 0a10 	vmov	s16, r0
 801beb4:	4b9f      	ldr	r3, [pc, #636]	; (801c134 <_printf_float+0x2dc>)
 801beb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801beba:	f04f 32ff 	mov.w	r2, #4294967295
 801bebe:	f7e4 fe55 	bl	8000b6c <__aeabi_dcmpun>
 801bec2:	bb88      	cbnz	r0, 801bf28 <_printf_float+0xd0>
 801bec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bec8:	4b9a      	ldr	r3, [pc, #616]	; (801c134 <_printf_float+0x2dc>)
 801beca:	f04f 32ff 	mov.w	r2, #4294967295
 801bece:	f7e4 fe2f 	bl	8000b30 <__aeabi_dcmple>
 801bed2:	bb48      	cbnz	r0, 801bf28 <_printf_float+0xd0>
 801bed4:	2200      	movs	r2, #0
 801bed6:	2300      	movs	r3, #0
 801bed8:	4640      	mov	r0, r8
 801beda:	4649      	mov	r1, r9
 801bedc:	f7e4 fe1e 	bl	8000b1c <__aeabi_dcmplt>
 801bee0:	b110      	cbz	r0, 801bee8 <_printf_float+0x90>
 801bee2:	232d      	movs	r3, #45	; 0x2d
 801bee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bee8:	4b93      	ldr	r3, [pc, #588]	; (801c138 <_printf_float+0x2e0>)
 801beea:	4894      	ldr	r0, [pc, #592]	; (801c13c <_printf_float+0x2e4>)
 801beec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801bef0:	bf94      	ite	ls
 801bef2:	4698      	movls	r8, r3
 801bef4:	4680      	movhi	r8, r0
 801bef6:	2303      	movs	r3, #3
 801bef8:	6123      	str	r3, [r4, #16]
 801befa:	9b05      	ldr	r3, [sp, #20]
 801befc:	f023 0204 	bic.w	r2, r3, #4
 801bf00:	6022      	str	r2, [r4, #0]
 801bf02:	f04f 0900 	mov.w	r9, #0
 801bf06:	9700      	str	r7, [sp, #0]
 801bf08:	4633      	mov	r3, r6
 801bf0a:	aa0b      	add	r2, sp, #44	; 0x2c
 801bf0c:	4621      	mov	r1, r4
 801bf0e:	4628      	mov	r0, r5
 801bf10:	f000 f9d8 	bl	801c2c4 <_printf_common>
 801bf14:	3001      	adds	r0, #1
 801bf16:	f040 8090 	bne.w	801c03a <_printf_float+0x1e2>
 801bf1a:	f04f 30ff 	mov.w	r0, #4294967295
 801bf1e:	b00d      	add	sp, #52	; 0x34
 801bf20:	ecbd 8b02 	vpop	{d8}
 801bf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf28:	4642      	mov	r2, r8
 801bf2a:	464b      	mov	r3, r9
 801bf2c:	4640      	mov	r0, r8
 801bf2e:	4649      	mov	r1, r9
 801bf30:	f7e4 fe1c 	bl	8000b6c <__aeabi_dcmpun>
 801bf34:	b140      	cbz	r0, 801bf48 <_printf_float+0xf0>
 801bf36:	464b      	mov	r3, r9
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	bfbc      	itt	lt
 801bf3c:	232d      	movlt	r3, #45	; 0x2d
 801bf3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801bf42:	487f      	ldr	r0, [pc, #508]	; (801c140 <_printf_float+0x2e8>)
 801bf44:	4b7f      	ldr	r3, [pc, #508]	; (801c144 <_printf_float+0x2ec>)
 801bf46:	e7d1      	b.n	801beec <_printf_float+0x94>
 801bf48:	6863      	ldr	r3, [r4, #4]
 801bf4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801bf4e:	9206      	str	r2, [sp, #24]
 801bf50:	1c5a      	adds	r2, r3, #1
 801bf52:	d13f      	bne.n	801bfd4 <_printf_float+0x17c>
 801bf54:	2306      	movs	r3, #6
 801bf56:	6063      	str	r3, [r4, #4]
 801bf58:	9b05      	ldr	r3, [sp, #20]
 801bf5a:	6861      	ldr	r1, [r4, #4]
 801bf5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801bf60:	2300      	movs	r3, #0
 801bf62:	9303      	str	r3, [sp, #12]
 801bf64:	ab0a      	add	r3, sp, #40	; 0x28
 801bf66:	e9cd b301 	strd	fp, r3, [sp, #4]
 801bf6a:	ab09      	add	r3, sp, #36	; 0x24
 801bf6c:	ec49 8b10 	vmov	d0, r8, r9
 801bf70:	9300      	str	r3, [sp, #0]
 801bf72:	6022      	str	r2, [r4, #0]
 801bf74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801bf78:	4628      	mov	r0, r5
 801bf7a:	f7ff fecd 	bl	801bd18 <__cvt>
 801bf7e:	9b06      	ldr	r3, [sp, #24]
 801bf80:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bf82:	2b47      	cmp	r3, #71	; 0x47
 801bf84:	4680      	mov	r8, r0
 801bf86:	d108      	bne.n	801bf9a <_printf_float+0x142>
 801bf88:	1cc8      	adds	r0, r1, #3
 801bf8a:	db02      	blt.n	801bf92 <_printf_float+0x13a>
 801bf8c:	6863      	ldr	r3, [r4, #4]
 801bf8e:	4299      	cmp	r1, r3
 801bf90:	dd41      	ble.n	801c016 <_printf_float+0x1be>
 801bf92:	f1ab 0b02 	sub.w	fp, fp, #2
 801bf96:	fa5f fb8b 	uxtb.w	fp, fp
 801bf9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801bf9e:	d820      	bhi.n	801bfe2 <_printf_float+0x18a>
 801bfa0:	3901      	subs	r1, #1
 801bfa2:	465a      	mov	r2, fp
 801bfa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801bfa8:	9109      	str	r1, [sp, #36]	; 0x24
 801bfaa:	f7ff ff17 	bl	801bddc <__exponent>
 801bfae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bfb0:	1813      	adds	r3, r2, r0
 801bfb2:	2a01      	cmp	r2, #1
 801bfb4:	4681      	mov	r9, r0
 801bfb6:	6123      	str	r3, [r4, #16]
 801bfb8:	dc02      	bgt.n	801bfc0 <_printf_float+0x168>
 801bfba:	6822      	ldr	r2, [r4, #0]
 801bfbc:	07d2      	lsls	r2, r2, #31
 801bfbe:	d501      	bpl.n	801bfc4 <_printf_float+0x16c>
 801bfc0:	3301      	adds	r3, #1
 801bfc2:	6123      	str	r3, [r4, #16]
 801bfc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d09c      	beq.n	801bf06 <_printf_float+0xae>
 801bfcc:	232d      	movs	r3, #45	; 0x2d
 801bfce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bfd2:	e798      	b.n	801bf06 <_printf_float+0xae>
 801bfd4:	9a06      	ldr	r2, [sp, #24]
 801bfd6:	2a47      	cmp	r2, #71	; 0x47
 801bfd8:	d1be      	bne.n	801bf58 <_printf_float+0x100>
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d1bc      	bne.n	801bf58 <_printf_float+0x100>
 801bfde:	2301      	movs	r3, #1
 801bfe0:	e7b9      	b.n	801bf56 <_printf_float+0xfe>
 801bfe2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801bfe6:	d118      	bne.n	801c01a <_printf_float+0x1c2>
 801bfe8:	2900      	cmp	r1, #0
 801bfea:	6863      	ldr	r3, [r4, #4]
 801bfec:	dd0b      	ble.n	801c006 <_printf_float+0x1ae>
 801bfee:	6121      	str	r1, [r4, #16]
 801bff0:	b913      	cbnz	r3, 801bff8 <_printf_float+0x1a0>
 801bff2:	6822      	ldr	r2, [r4, #0]
 801bff4:	07d0      	lsls	r0, r2, #31
 801bff6:	d502      	bpl.n	801bffe <_printf_float+0x1a6>
 801bff8:	3301      	adds	r3, #1
 801bffa:	440b      	add	r3, r1
 801bffc:	6123      	str	r3, [r4, #16]
 801bffe:	65a1      	str	r1, [r4, #88]	; 0x58
 801c000:	f04f 0900 	mov.w	r9, #0
 801c004:	e7de      	b.n	801bfc4 <_printf_float+0x16c>
 801c006:	b913      	cbnz	r3, 801c00e <_printf_float+0x1b6>
 801c008:	6822      	ldr	r2, [r4, #0]
 801c00a:	07d2      	lsls	r2, r2, #31
 801c00c:	d501      	bpl.n	801c012 <_printf_float+0x1ba>
 801c00e:	3302      	adds	r3, #2
 801c010:	e7f4      	b.n	801bffc <_printf_float+0x1a4>
 801c012:	2301      	movs	r3, #1
 801c014:	e7f2      	b.n	801bffc <_printf_float+0x1a4>
 801c016:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801c01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c01c:	4299      	cmp	r1, r3
 801c01e:	db05      	blt.n	801c02c <_printf_float+0x1d4>
 801c020:	6823      	ldr	r3, [r4, #0]
 801c022:	6121      	str	r1, [r4, #16]
 801c024:	07d8      	lsls	r0, r3, #31
 801c026:	d5ea      	bpl.n	801bffe <_printf_float+0x1a6>
 801c028:	1c4b      	adds	r3, r1, #1
 801c02a:	e7e7      	b.n	801bffc <_printf_float+0x1a4>
 801c02c:	2900      	cmp	r1, #0
 801c02e:	bfd4      	ite	le
 801c030:	f1c1 0202 	rsble	r2, r1, #2
 801c034:	2201      	movgt	r2, #1
 801c036:	4413      	add	r3, r2
 801c038:	e7e0      	b.n	801bffc <_printf_float+0x1a4>
 801c03a:	6823      	ldr	r3, [r4, #0]
 801c03c:	055a      	lsls	r2, r3, #21
 801c03e:	d407      	bmi.n	801c050 <_printf_float+0x1f8>
 801c040:	6923      	ldr	r3, [r4, #16]
 801c042:	4642      	mov	r2, r8
 801c044:	4631      	mov	r1, r6
 801c046:	4628      	mov	r0, r5
 801c048:	47b8      	blx	r7
 801c04a:	3001      	adds	r0, #1
 801c04c:	d12c      	bne.n	801c0a8 <_printf_float+0x250>
 801c04e:	e764      	b.n	801bf1a <_printf_float+0xc2>
 801c050:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c054:	f240 80e0 	bls.w	801c218 <_printf_float+0x3c0>
 801c058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c05c:	2200      	movs	r2, #0
 801c05e:	2300      	movs	r3, #0
 801c060:	f7e4 fd52 	bl	8000b08 <__aeabi_dcmpeq>
 801c064:	2800      	cmp	r0, #0
 801c066:	d034      	beq.n	801c0d2 <_printf_float+0x27a>
 801c068:	4a37      	ldr	r2, [pc, #220]	; (801c148 <_printf_float+0x2f0>)
 801c06a:	2301      	movs	r3, #1
 801c06c:	4631      	mov	r1, r6
 801c06e:	4628      	mov	r0, r5
 801c070:	47b8      	blx	r7
 801c072:	3001      	adds	r0, #1
 801c074:	f43f af51 	beq.w	801bf1a <_printf_float+0xc2>
 801c078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c07c:	429a      	cmp	r2, r3
 801c07e:	db02      	blt.n	801c086 <_printf_float+0x22e>
 801c080:	6823      	ldr	r3, [r4, #0]
 801c082:	07d8      	lsls	r0, r3, #31
 801c084:	d510      	bpl.n	801c0a8 <_printf_float+0x250>
 801c086:	ee18 3a10 	vmov	r3, s16
 801c08a:	4652      	mov	r2, sl
 801c08c:	4631      	mov	r1, r6
 801c08e:	4628      	mov	r0, r5
 801c090:	47b8      	blx	r7
 801c092:	3001      	adds	r0, #1
 801c094:	f43f af41 	beq.w	801bf1a <_printf_float+0xc2>
 801c098:	f04f 0800 	mov.w	r8, #0
 801c09c:	f104 091a 	add.w	r9, r4, #26
 801c0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0a2:	3b01      	subs	r3, #1
 801c0a4:	4543      	cmp	r3, r8
 801c0a6:	dc09      	bgt.n	801c0bc <_printf_float+0x264>
 801c0a8:	6823      	ldr	r3, [r4, #0]
 801c0aa:	079b      	lsls	r3, r3, #30
 801c0ac:	f100 8105 	bmi.w	801c2ba <_printf_float+0x462>
 801c0b0:	68e0      	ldr	r0, [r4, #12]
 801c0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0b4:	4298      	cmp	r0, r3
 801c0b6:	bfb8      	it	lt
 801c0b8:	4618      	movlt	r0, r3
 801c0ba:	e730      	b.n	801bf1e <_printf_float+0xc6>
 801c0bc:	2301      	movs	r3, #1
 801c0be:	464a      	mov	r2, r9
 801c0c0:	4631      	mov	r1, r6
 801c0c2:	4628      	mov	r0, r5
 801c0c4:	47b8      	blx	r7
 801c0c6:	3001      	adds	r0, #1
 801c0c8:	f43f af27 	beq.w	801bf1a <_printf_float+0xc2>
 801c0cc:	f108 0801 	add.w	r8, r8, #1
 801c0d0:	e7e6      	b.n	801c0a0 <_printf_float+0x248>
 801c0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	dc39      	bgt.n	801c14c <_printf_float+0x2f4>
 801c0d8:	4a1b      	ldr	r2, [pc, #108]	; (801c148 <_printf_float+0x2f0>)
 801c0da:	2301      	movs	r3, #1
 801c0dc:	4631      	mov	r1, r6
 801c0de:	4628      	mov	r0, r5
 801c0e0:	47b8      	blx	r7
 801c0e2:	3001      	adds	r0, #1
 801c0e4:	f43f af19 	beq.w	801bf1a <_printf_float+0xc2>
 801c0e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c0ec:	4313      	orrs	r3, r2
 801c0ee:	d102      	bne.n	801c0f6 <_printf_float+0x29e>
 801c0f0:	6823      	ldr	r3, [r4, #0]
 801c0f2:	07d9      	lsls	r1, r3, #31
 801c0f4:	d5d8      	bpl.n	801c0a8 <_printf_float+0x250>
 801c0f6:	ee18 3a10 	vmov	r3, s16
 801c0fa:	4652      	mov	r2, sl
 801c0fc:	4631      	mov	r1, r6
 801c0fe:	4628      	mov	r0, r5
 801c100:	47b8      	blx	r7
 801c102:	3001      	adds	r0, #1
 801c104:	f43f af09 	beq.w	801bf1a <_printf_float+0xc2>
 801c108:	f04f 0900 	mov.w	r9, #0
 801c10c:	f104 0a1a 	add.w	sl, r4, #26
 801c110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c112:	425b      	negs	r3, r3
 801c114:	454b      	cmp	r3, r9
 801c116:	dc01      	bgt.n	801c11c <_printf_float+0x2c4>
 801c118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c11a:	e792      	b.n	801c042 <_printf_float+0x1ea>
 801c11c:	2301      	movs	r3, #1
 801c11e:	4652      	mov	r2, sl
 801c120:	4631      	mov	r1, r6
 801c122:	4628      	mov	r0, r5
 801c124:	47b8      	blx	r7
 801c126:	3001      	adds	r0, #1
 801c128:	f43f aef7 	beq.w	801bf1a <_printf_float+0xc2>
 801c12c:	f109 0901 	add.w	r9, r9, #1
 801c130:	e7ee      	b.n	801c110 <_printf_float+0x2b8>
 801c132:	bf00      	nop
 801c134:	7fefffff 	.word	0x7fefffff
 801c138:	08023468 	.word	0x08023468
 801c13c:	0802346c 	.word	0x0802346c
 801c140:	08023474 	.word	0x08023474
 801c144:	08023470 	.word	0x08023470
 801c148:	080237d9 	.word	0x080237d9
 801c14c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c14e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c150:	429a      	cmp	r2, r3
 801c152:	bfa8      	it	ge
 801c154:	461a      	movge	r2, r3
 801c156:	2a00      	cmp	r2, #0
 801c158:	4691      	mov	r9, r2
 801c15a:	dc37      	bgt.n	801c1cc <_printf_float+0x374>
 801c15c:	f04f 0b00 	mov.w	fp, #0
 801c160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c164:	f104 021a 	add.w	r2, r4, #26
 801c168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c16a:	9305      	str	r3, [sp, #20]
 801c16c:	eba3 0309 	sub.w	r3, r3, r9
 801c170:	455b      	cmp	r3, fp
 801c172:	dc33      	bgt.n	801c1dc <_printf_float+0x384>
 801c174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c178:	429a      	cmp	r2, r3
 801c17a:	db3b      	blt.n	801c1f4 <_printf_float+0x39c>
 801c17c:	6823      	ldr	r3, [r4, #0]
 801c17e:	07da      	lsls	r2, r3, #31
 801c180:	d438      	bmi.n	801c1f4 <_printf_float+0x39c>
 801c182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c184:	9b05      	ldr	r3, [sp, #20]
 801c186:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c188:	1ad3      	subs	r3, r2, r3
 801c18a:	eba2 0901 	sub.w	r9, r2, r1
 801c18e:	4599      	cmp	r9, r3
 801c190:	bfa8      	it	ge
 801c192:	4699      	movge	r9, r3
 801c194:	f1b9 0f00 	cmp.w	r9, #0
 801c198:	dc35      	bgt.n	801c206 <_printf_float+0x3ae>
 801c19a:	f04f 0800 	mov.w	r8, #0
 801c19e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c1a2:	f104 0a1a 	add.w	sl, r4, #26
 801c1a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c1aa:	1a9b      	subs	r3, r3, r2
 801c1ac:	eba3 0309 	sub.w	r3, r3, r9
 801c1b0:	4543      	cmp	r3, r8
 801c1b2:	f77f af79 	ble.w	801c0a8 <_printf_float+0x250>
 801c1b6:	2301      	movs	r3, #1
 801c1b8:	4652      	mov	r2, sl
 801c1ba:	4631      	mov	r1, r6
 801c1bc:	4628      	mov	r0, r5
 801c1be:	47b8      	blx	r7
 801c1c0:	3001      	adds	r0, #1
 801c1c2:	f43f aeaa 	beq.w	801bf1a <_printf_float+0xc2>
 801c1c6:	f108 0801 	add.w	r8, r8, #1
 801c1ca:	e7ec      	b.n	801c1a6 <_printf_float+0x34e>
 801c1cc:	4613      	mov	r3, r2
 801c1ce:	4631      	mov	r1, r6
 801c1d0:	4642      	mov	r2, r8
 801c1d2:	4628      	mov	r0, r5
 801c1d4:	47b8      	blx	r7
 801c1d6:	3001      	adds	r0, #1
 801c1d8:	d1c0      	bne.n	801c15c <_printf_float+0x304>
 801c1da:	e69e      	b.n	801bf1a <_printf_float+0xc2>
 801c1dc:	2301      	movs	r3, #1
 801c1de:	4631      	mov	r1, r6
 801c1e0:	4628      	mov	r0, r5
 801c1e2:	9205      	str	r2, [sp, #20]
 801c1e4:	47b8      	blx	r7
 801c1e6:	3001      	adds	r0, #1
 801c1e8:	f43f ae97 	beq.w	801bf1a <_printf_float+0xc2>
 801c1ec:	9a05      	ldr	r2, [sp, #20]
 801c1ee:	f10b 0b01 	add.w	fp, fp, #1
 801c1f2:	e7b9      	b.n	801c168 <_printf_float+0x310>
 801c1f4:	ee18 3a10 	vmov	r3, s16
 801c1f8:	4652      	mov	r2, sl
 801c1fa:	4631      	mov	r1, r6
 801c1fc:	4628      	mov	r0, r5
 801c1fe:	47b8      	blx	r7
 801c200:	3001      	adds	r0, #1
 801c202:	d1be      	bne.n	801c182 <_printf_float+0x32a>
 801c204:	e689      	b.n	801bf1a <_printf_float+0xc2>
 801c206:	9a05      	ldr	r2, [sp, #20]
 801c208:	464b      	mov	r3, r9
 801c20a:	4442      	add	r2, r8
 801c20c:	4631      	mov	r1, r6
 801c20e:	4628      	mov	r0, r5
 801c210:	47b8      	blx	r7
 801c212:	3001      	adds	r0, #1
 801c214:	d1c1      	bne.n	801c19a <_printf_float+0x342>
 801c216:	e680      	b.n	801bf1a <_printf_float+0xc2>
 801c218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c21a:	2a01      	cmp	r2, #1
 801c21c:	dc01      	bgt.n	801c222 <_printf_float+0x3ca>
 801c21e:	07db      	lsls	r3, r3, #31
 801c220:	d538      	bpl.n	801c294 <_printf_float+0x43c>
 801c222:	2301      	movs	r3, #1
 801c224:	4642      	mov	r2, r8
 801c226:	4631      	mov	r1, r6
 801c228:	4628      	mov	r0, r5
 801c22a:	47b8      	blx	r7
 801c22c:	3001      	adds	r0, #1
 801c22e:	f43f ae74 	beq.w	801bf1a <_printf_float+0xc2>
 801c232:	ee18 3a10 	vmov	r3, s16
 801c236:	4652      	mov	r2, sl
 801c238:	4631      	mov	r1, r6
 801c23a:	4628      	mov	r0, r5
 801c23c:	47b8      	blx	r7
 801c23e:	3001      	adds	r0, #1
 801c240:	f43f ae6b 	beq.w	801bf1a <_printf_float+0xc2>
 801c244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c248:	2200      	movs	r2, #0
 801c24a:	2300      	movs	r3, #0
 801c24c:	f7e4 fc5c 	bl	8000b08 <__aeabi_dcmpeq>
 801c250:	b9d8      	cbnz	r0, 801c28a <_printf_float+0x432>
 801c252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c254:	f108 0201 	add.w	r2, r8, #1
 801c258:	3b01      	subs	r3, #1
 801c25a:	4631      	mov	r1, r6
 801c25c:	4628      	mov	r0, r5
 801c25e:	47b8      	blx	r7
 801c260:	3001      	adds	r0, #1
 801c262:	d10e      	bne.n	801c282 <_printf_float+0x42a>
 801c264:	e659      	b.n	801bf1a <_printf_float+0xc2>
 801c266:	2301      	movs	r3, #1
 801c268:	4652      	mov	r2, sl
 801c26a:	4631      	mov	r1, r6
 801c26c:	4628      	mov	r0, r5
 801c26e:	47b8      	blx	r7
 801c270:	3001      	adds	r0, #1
 801c272:	f43f ae52 	beq.w	801bf1a <_printf_float+0xc2>
 801c276:	f108 0801 	add.w	r8, r8, #1
 801c27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c27c:	3b01      	subs	r3, #1
 801c27e:	4543      	cmp	r3, r8
 801c280:	dcf1      	bgt.n	801c266 <_printf_float+0x40e>
 801c282:	464b      	mov	r3, r9
 801c284:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c288:	e6dc      	b.n	801c044 <_printf_float+0x1ec>
 801c28a:	f04f 0800 	mov.w	r8, #0
 801c28e:	f104 0a1a 	add.w	sl, r4, #26
 801c292:	e7f2      	b.n	801c27a <_printf_float+0x422>
 801c294:	2301      	movs	r3, #1
 801c296:	4642      	mov	r2, r8
 801c298:	e7df      	b.n	801c25a <_printf_float+0x402>
 801c29a:	2301      	movs	r3, #1
 801c29c:	464a      	mov	r2, r9
 801c29e:	4631      	mov	r1, r6
 801c2a0:	4628      	mov	r0, r5
 801c2a2:	47b8      	blx	r7
 801c2a4:	3001      	adds	r0, #1
 801c2a6:	f43f ae38 	beq.w	801bf1a <_printf_float+0xc2>
 801c2aa:	f108 0801 	add.w	r8, r8, #1
 801c2ae:	68e3      	ldr	r3, [r4, #12]
 801c2b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c2b2:	1a5b      	subs	r3, r3, r1
 801c2b4:	4543      	cmp	r3, r8
 801c2b6:	dcf0      	bgt.n	801c29a <_printf_float+0x442>
 801c2b8:	e6fa      	b.n	801c0b0 <_printf_float+0x258>
 801c2ba:	f04f 0800 	mov.w	r8, #0
 801c2be:	f104 0919 	add.w	r9, r4, #25
 801c2c2:	e7f4      	b.n	801c2ae <_printf_float+0x456>

0801c2c4 <_printf_common>:
 801c2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c2c8:	4616      	mov	r6, r2
 801c2ca:	4699      	mov	r9, r3
 801c2cc:	688a      	ldr	r2, [r1, #8]
 801c2ce:	690b      	ldr	r3, [r1, #16]
 801c2d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c2d4:	4293      	cmp	r3, r2
 801c2d6:	bfb8      	it	lt
 801c2d8:	4613      	movlt	r3, r2
 801c2da:	6033      	str	r3, [r6, #0]
 801c2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c2e0:	4607      	mov	r7, r0
 801c2e2:	460c      	mov	r4, r1
 801c2e4:	b10a      	cbz	r2, 801c2ea <_printf_common+0x26>
 801c2e6:	3301      	adds	r3, #1
 801c2e8:	6033      	str	r3, [r6, #0]
 801c2ea:	6823      	ldr	r3, [r4, #0]
 801c2ec:	0699      	lsls	r1, r3, #26
 801c2ee:	bf42      	ittt	mi
 801c2f0:	6833      	ldrmi	r3, [r6, #0]
 801c2f2:	3302      	addmi	r3, #2
 801c2f4:	6033      	strmi	r3, [r6, #0]
 801c2f6:	6825      	ldr	r5, [r4, #0]
 801c2f8:	f015 0506 	ands.w	r5, r5, #6
 801c2fc:	d106      	bne.n	801c30c <_printf_common+0x48>
 801c2fe:	f104 0a19 	add.w	sl, r4, #25
 801c302:	68e3      	ldr	r3, [r4, #12]
 801c304:	6832      	ldr	r2, [r6, #0]
 801c306:	1a9b      	subs	r3, r3, r2
 801c308:	42ab      	cmp	r3, r5
 801c30a:	dc26      	bgt.n	801c35a <_printf_common+0x96>
 801c30c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c310:	1e13      	subs	r3, r2, #0
 801c312:	6822      	ldr	r2, [r4, #0]
 801c314:	bf18      	it	ne
 801c316:	2301      	movne	r3, #1
 801c318:	0692      	lsls	r2, r2, #26
 801c31a:	d42b      	bmi.n	801c374 <_printf_common+0xb0>
 801c31c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c320:	4649      	mov	r1, r9
 801c322:	4638      	mov	r0, r7
 801c324:	47c0      	blx	r8
 801c326:	3001      	adds	r0, #1
 801c328:	d01e      	beq.n	801c368 <_printf_common+0xa4>
 801c32a:	6823      	ldr	r3, [r4, #0]
 801c32c:	68e5      	ldr	r5, [r4, #12]
 801c32e:	6832      	ldr	r2, [r6, #0]
 801c330:	f003 0306 	and.w	r3, r3, #6
 801c334:	2b04      	cmp	r3, #4
 801c336:	bf08      	it	eq
 801c338:	1aad      	subeq	r5, r5, r2
 801c33a:	68a3      	ldr	r3, [r4, #8]
 801c33c:	6922      	ldr	r2, [r4, #16]
 801c33e:	bf0c      	ite	eq
 801c340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c344:	2500      	movne	r5, #0
 801c346:	4293      	cmp	r3, r2
 801c348:	bfc4      	itt	gt
 801c34a:	1a9b      	subgt	r3, r3, r2
 801c34c:	18ed      	addgt	r5, r5, r3
 801c34e:	2600      	movs	r6, #0
 801c350:	341a      	adds	r4, #26
 801c352:	42b5      	cmp	r5, r6
 801c354:	d11a      	bne.n	801c38c <_printf_common+0xc8>
 801c356:	2000      	movs	r0, #0
 801c358:	e008      	b.n	801c36c <_printf_common+0xa8>
 801c35a:	2301      	movs	r3, #1
 801c35c:	4652      	mov	r2, sl
 801c35e:	4649      	mov	r1, r9
 801c360:	4638      	mov	r0, r7
 801c362:	47c0      	blx	r8
 801c364:	3001      	adds	r0, #1
 801c366:	d103      	bne.n	801c370 <_printf_common+0xac>
 801c368:	f04f 30ff 	mov.w	r0, #4294967295
 801c36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c370:	3501      	adds	r5, #1
 801c372:	e7c6      	b.n	801c302 <_printf_common+0x3e>
 801c374:	18e1      	adds	r1, r4, r3
 801c376:	1c5a      	adds	r2, r3, #1
 801c378:	2030      	movs	r0, #48	; 0x30
 801c37a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c37e:	4422      	add	r2, r4
 801c380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c388:	3302      	adds	r3, #2
 801c38a:	e7c7      	b.n	801c31c <_printf_common+0x58>
 801c38c:	2301      	movs	r3, #1
 801c38e:	4622      	mov	r2, r4
 801c390:	4649      	mov	r1, r9
 801c392:	4638      	mov	r0, r7
 801c394:	47c0      	blx	r8
 801c396:	3001      	adds	r0, #1
 801c398:	d0e6      	beq.n	801c368 <_printf_common+0xa4>
 801c39a:	3601      	adds	r6, #1
 801c39c:	e7d9      	b.n	801c352 <_printf_common+0x8e>
	...

0801c3a0 <_printf_i>:
 801c3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c3a4:	460c      	mov	r4, r1
 801c3a6:	4691      	mov	r9, r2
 801c3a8:	7e27      	ldrb	r7, [r4, #24]
 801c3aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c3ac:	2f78      	cmp	r7, #120	; 0x78
 801c3ae:	4680      	mov	r8, r0
 801c3b0:	469a      	mov	sl, r3
 801c3b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c3b6:	d807      	bhi.n	801c3c8 <_printf_i+0x28>
 801c3b8:	2f62      	cmp	r7, #98	; 0x62
 801c3ba:	d80a      	bhi.n	801c3d2 <_printf_i+0x32>
 801c3bc:	2f00      	cmp	r7, #0
 801c3be:	f000 80d8 	beq.w	801c572 <_printf_i+0x1d2>
 801c3c2:	2f58      	cmp	r7, #88	; 0x58
 801c3c4:	f000 80a3 	beq.w	801c50e <_printf_i+0x16e>
 801c3c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c3cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c3d0:	e03a      	b.n	801c448 <_printf_i+0xa8>
 801c3d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c3d6:	2b15      	cmp	r3, #21
 801c3d8:	d8f6      	bhi.n	801c3c8 <_printf_i+0x28>
 801c3da:	a001      	add	r0, pc, #4	; (adr r0, 801c3e0 <_printf_i+0x40>)
 801c3dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c3e0:	0801c439 	.word	0x0801c439
 801c3e4:	0801c44d 	.word	0x0801c44d
 801c3e8:	0801c3c9 	.word	0x0801c3c9
 801c3ec:	0801c3c9 	.word	0x0801c3c9
 801c3f0:	0801c3c9 	.word	0x0801c3c9
 801c3f4:	0801c3c9 	.word	0x0801c3c9
 801c3f8:	0801c44d 	.word	0x0801c44d
 801c3fc:	0801c3c9 	.word	0x0801c3c9
 801c400:	0801c3c9 	.word	0x0801c3c9
 801c404:	0801c3c9 	.word	0x0801c3c9
 801c408:	0801c3c9 	.word	0x0801c3c9
 801c40c:	0801c559 	.word	0x0801c559
 801c410:	0801c47d 	.word	0x0801c47d
 801c414:	0801c53b 	.word	0x0801c53b
 801c418:	0801c3c9 	.word	0x0801c3c9
 801c41c:	0801c3c9 	.word	0x0801c3c9
 801c420:	0801c57b 	.word	0x0801c57b
 801c424:	0801c3c9 	.word	0x0801c3c9
 801c428:	0801c47d 	.word	0x0801c47d
 801c42c:	0801c3c9 	.word	0x0801c3c9
 801c430:	0801c3c9 	.word	0x0801c3c9
 801c434:	0801c543 	.word	0x0801c543
 801c438:	680b      	ldr	r3, [r1, #0]
 801c43a:	1d1a      	adds	r2, r3, #4
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	600a      	str	r2, [r1, #0]
 801c440:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c448:	2301      	movs	r3, #1
 801c44a:	e0a3      	b.n	801c594 <_printf_i+0x1f4>
 801c44c:	6825      	ldr	r5, [r4, #0]
 801c44e:	6808      	ldr	r0, [r1, #0]
 801c450:	062e      	lsls	r6, r5, #24
 801c452:	f100 0304 	add.w	r3, r0, #4
 801c456:	d50a      	bpl.n	801c46e <_printf_i+0xce>
 801c458:	6805      	ldr	r5, [r0, #0]
 801c45a:	600b      	str	r3, [r1, #0]
 801c45c:	2d00      	cmp	r5, #0
 801c45e:	da03      	bge.n	801c468 <_printf_i+0xc8>
 801c460:	232d      	movs	r3, #45	; 0x2d
 801c462:	426d      	negs	r5, r5
 801c464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c468:	485e      	ldr	r0, [pc, #376]	; (801c5e4 <_printf_i+0x244>)
 801c46a:	230a      	movs	r3, #10
 801c46c:	e019      	b.n	801c4a2 <_printf_i+0x102>
 801c46e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c472:	6805      	ldr	r5, [r0, #0]
 801c474:	600b      	str	r3, [r1, #0]
 801c476:	bf18      	it	ne
 801c478:	b22d      	sxthne	r5, r5
 801c47a:	e7ef      	b.n	801c45c <_printf_i+0xbc>
 801c47c:	680b      	ldr	r3, [r1, #0]
 801c47e:	6825      	ldr	r5, [r4, #0]
 801c480:	1d18      	adds	r0, r3, #4
 801c482:	6008      	str	r0, [r1, #0]
 801c484:	0628      	lsls	r0, r5, #24
 801c486:	d501      	bpl.n	801c48c <_printf_i+0xec>
 801c488:	681d      	ldr	r5, [r3, #0]
 801c48a:	e002      	b.n	801c492 <_printf_i+0xf2>
 801c48c:	0669      	lsls	r1, r5, #25
 801c48e:	d5fb      	bpl.n	801c488 <_printf_i+0xe8>
 801c490:	881d      	ldrh	r5, [r3, #0]
 801c492:	4854      	ldr	r0, [pc, #336]	; (801c5e4 <_printf_i+0x244>)
 801c494:	2f6f      	cmp	r7, #111	; 0x6f
 801c496:	bf0c      	ite	eq
 801c498:	2308      	moveq	r3, #8
 801c49a:	230a      	movne	r3, #10
 801c49c:	2100      	movs	r1, #0
 801c49e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c4a2:	6866      	ldr	r6, [r4, #4]
 801c4a4:	60a6      	str	r6, [r4, #8]
 801c4a6:	2e00      	cmp	r6, #0
 801c4a8:	bfa2      	ittt	ge
 801c4aa:	6821      	ldrge	r1, [r4, #0]
 801c4ac:	f021 0104 	bicge.w	r1, r1, #4
 801c4b0:	6021      	strge	r1, [r4, #0]
 801c4b2:	b90d      	cbnz	r5, 801c4b8 <_printf_i+0x118>
 801c4b4:	2e00      	cmp	r6, #0
 801c4b6:	d04d      	beq.n	801c554 <_printf_i+0x1b4>
 801c4b8:	4616      	mov	r6, r2
 801c4ba:	fbb5 f1f3 	udiv	r1, r5, r3
 801c4be:	fb03 5711 	mls	r7, r3, r1, r5
 801c4c2:	5dc7      	ldrb	r7, [r0, r7]
 801c4c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c4c8:	462f      	mov	r7, r5
 801c4ca:	42bb      	cmp	r3, r7
 801c4cc:	460d      	mov	r5, r1
 801c4ce:	d9f4      	bls.n	801c4ba <_printf_i+0x11a>
 801c4d0:	2b08      	cmp	r3, #8
 801c4d2:	d10b      	bne.n	801c4ec <_printf_i+0x14c>
 801c4d4:	6823      	ldr	r3, [r4, #0]
 801c4d6:	07df      	lsls	r7, r3, #31
 801c4d8:	d508      	bpl.n	801c4ec <_printf_i+0x14c>
 801c4da:	6923      	ldr	r3, [r4, #16]
 801c4dc:	6861      	ldr	r1, [r4, #4]
 801c4de:	4299      	cmp	r1, r3
 801c4e0:	bfde      	ittt	le
 801c4e2:	2330      	movle	r3, #48	; 0x30
 801c4e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c4e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c4ec:	1b92      	subs	r2, r2, r6
 801c4ee:	6122      	str	r2, [r4, #16]
 801c4f0:	f8cd a000 	str.w	sl, [sp]
 801c4f4:	464b      	mov	r3, r9
 801c4f6:	aa03      	add	r2, sp, #12
 801c4f8:	4621      	mov	r1, r4
 801c4fa:	4640      	mov	r0, r8
 801c4fc:	f7ff fee2 	bl	801c2c4 <_printf_common>
 801c500:	3001      	adds	r0, #1
 801c502:	d14c      	bne.n	801c59e <_printf_i+0x1fe>
 801c504:	f04f 30ff 	mov.w	r0, #4294967295
 801c508:	b004      	add	sp, #16
 801c50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c50e:	4835      	ldr	r0, [pc, #212]	; (801c5e4 <_printf_i+0x244>)
 801c510:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c514:	6823      	ldr	r3, [r4, #0]
 801c516:	680e      	ldr	r6, [r1, #0]
 801c518:	061f      	lsls	r7, r3, #24
 801c51a:	f856 5b04 	ldr.w	r5, [r6], #4
 801c51e:	600e      	str	r6, [r1, #0]
 801c520:	d514      	bpl.n	801c54c <_printf_i+0x1ac>
 801c522:	07d9      	lsls	r1, r3, #31
 801c524:	bf44      	itt	mi
 801c526:	f043 0320 	orrmi.w	r3, r3, #32
 801c52a:	6023      	strmi	r3, [r4, #0]
 801c52c:	b91d      	cbnz	r5, 801c536 <_printf_i+0x196>
 801c52e:	6823      	ldr	r3, [r4, #0]
 801c530:	f023 0320 	bic.w	r3, r3, #32
 801c534:	6023      	str	r3, [r4, #0]
 801c536:	2310      	movs	r3, #16
 801c538:	e7b0      	b.n	801c49c <_printf_i+0xfc>
 801c53a:	6823      	ldr	r3, [r4, #0]
 801c53c:	f043 0320 	orr.w	r3, r3, #32
 801c540:	6023      	str	r3, [r4, #0]
 801c542:	2378      	movs	r3, #120	; 0x78
 801c544:	4828      	ldr	r0, [pc, #160]	; (801c5e8 <_printf_i+0x248>)
 801c546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c54a:	e7e3      	b.n	801c514 <_printf_i+0x174>
 801c54c:	065e      	lsls	r6, r3, #25
 801c54e:	bf48      	it	mi
 801c550:	b2ad      	uxthmi	r5, r5
 801c552:	e7e6      	b.n	801c522 <_printf_i+0x182>
 801c554:	4616      	mov	r6, r2
 801c556:	e7bb      	b.n	801c4d0 <_printf_i+0x130>
 801c558:	680b      	ldr	r3, [r1, #0]
 801c55a:	6826      	ldr	r6, [r4, #0]
 801c55c:	6960      	ldr	r0, [r4, #20]
 801c55e:	1d1d      	adds	r5, r3, #4
 801c560:	600d      	str	r5, [r1, #0]
 801c562:	0635      	lsls	r5, r6, #24
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	d501      	bpl.n	801c56c <_printf_i+0x1cc>
 801c568:	6018      	str	r0, [r3, #0]
 801c56a:	e002      	b.n	801c572 <_printf_i+0x1d2>
 801c56c:	0671      	lsls	r1, r6, #25
 801c56e:	d5fb      	bpl.n	801c568 <_printf_i+0x1c8>
 801c570:	8018      	strh	r0, [r3, #0]
 801c572:	2300      	movs	r3, #0
 801c574:	6123      	str	r3, [r4, #16]
 801c576:	4616      	mov	r6, r2
 801c578:	e7ba      	b.n	801c4f0 <_printf_i+0x150>
 801c57a:	680b      	ldr	r3, [r1, #0]
 801c57c:	1d1a      	adds	r2, r3, #4
 801c57e:	600a      	str	r2, [r1, #0]
 801c580:	681e      	ldr	r6, [r3, #0]
 801c582:	6862      	ldr	r2, [r4, #4]
 801c584:	2100      	movs	r1, #0
 801c586:	4630      	mov	r0, r6
 801c588:	f7e3 fe4a 	bl	8000220 <memchr>
 801c58c:	b108      	cbz	r0, 801c592 <_printf_i+0x1f2>
 801c58e:	1b80      	subs	r0, r0, r6
 801c590:	6060      	str	r0, [r4, #4]
 801c592:	6863      	ldr	r3, [r4, #4]
 801c594:	6123      	str	r3, [r4, #16]
 801c596:	2300      	movs	r3, #0
 801c598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c59c:	e7a8      	b.n	801c4f0 <_printf_i+0x150>
 801c59e:	6923      	ldr	r3, [r4, #16]
 801c5a0:	4632      	mov	r2, r6
 801c5a2:	4649      	mov	r1, r9
 801c5a4:	4640      	mov	r0, r8
 801c5a6:	47d0      	blx	sl
 801c5a8:	3001      	adds	r0, #1
 801c5aa:	d0ab      	beq.n	801c504 <_printf_i+0x164>
 801c5ac:	6823      	ldr	r3, [r4, #0]
 801c5ae:	079b      	lsls	r3, r3, #30
 801c5b0:	d413      	bmi.n	801c5da <_printf_i+0x23a>
 801c5b2:	68e0      	ldr	r0, [r4, #12]
 801c5b4:	9b03      	ldr	r3, [sp, #12]
 801c5b6:	4298      	cmp	r0, r3
 801c5b8:	bfb8      	it	lt
 801c5ba:	4618      	movlt	r0, r3
 801c5bc:	e7a4      	b.n	801c508 <_printf_i+0x168>
 801c5be:	2301      	movs	r3, #1
 801c5c0:	4632      	mov	r2, r6
 801c5c2:	4649      	mov	r1, r9
 801c5c4:	4640      	mov	r0, r8
 801c5c6:	47d0      	blx	sl
 801c5c8:	3001      	adds	r0, #1
 801c5ca:	d09b      	beq.n	801c504 <_printf_i+0x164>
 801c5cc:	3501      	adds	r5, #1
 801c5ce:	68e3      	ldr	r3, [r4, #12]
 801c5d0:	9903      	ldr	r1, [sp, #12]
 801c5d2:	1a5b      	subs	r3, r3, r1
 801c5d4:	42ab      	cmp	r3, r5
 801c5d6:	dcf2      	bgt.n	801c5be <_printf_i+0x21e>
 801c5d8:	e7eb      	b.n	801c5b2 <_printf_i+0x212>
 801c5da:	2500      	movs	r5, #0
 801c5dc:	f104 0619 	add.w	r6, r4, #25
 801c5e0:	e7f5      	b.n	801c5ce <_printf_i+0x22e>
 801c5e2:	bf00      	nop
 801c5e4:	08023478 	.word	0x08023478
 801c5e8:	08023489 	.word	0x08023489

0801c5ec <_scanf_float>:
 801c5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5f0:	b087      	sub	sp, #28
 801c5f2:	4617      	mov	r7, r2
 801c5f4:	9303      	str	r3, [sp, #12]
 801c5f6:	688b      	ldr	r3, [r1, #8]
 801c5f8:	1e5a      	subs	r2, r3, #1
 801c5fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801c5fe:	bf83      	ittte	hi
 801c600:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801c604:	195b      	addhi	r3, r3, r5
 801c606:	9302      	strhi	r3, [sp, #8]
 801c608:	2300      	movls	r3, #0
 801c60a:	bf86      	itte	hi
 801c60c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801c610:	608b      	strhi	r3, [r1, #8]
 801c612:	9302      	strls	r3, [sp, #8]
 801c614:	680b      	ldr	r3, [r1, #0]
 801c616:	468b      	mov	fp, r1
 801c618:	2500      	movs	r5, #0
 801c61a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801c61e:	f84b 3b1c 	str.w	r3, [fp], #28
 801c622:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c626:	4680      	mov	r8, r0
 801c628:	460c      	mov	r4, r1
 801c62a:	465e      	mov	r6, fp
 801c62c:	46aa      	mov	sl, r5
 801c62e:	46a9      	mov	r9, r5
 801c630:	9501      	str	r5, [sp, #4]
 801c632:	68a2      	ldr	r2, [r4, #8]
 801c634:	b152      	cbz	r2, 801c64c <_scanf_float+0x60>
 801c636:	683b      	ldr	r3, [r7, #0]
 801c638:	781b      	ldrb	r3, [r3, #0]
 801c63a:	2b4e      	cmp	r3, #78	; 0x4e
 801c63c:	d864      	bhi.n	801c708 <_scanf_float+0x11c>
 801c63e:	2b40      	cmp	r3, #64	; 0x40
 801c640:	d83c      	bhi.n	801c6bc <_scanf_float+0xd0>
 801c642:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801c646:	b2c8      	uxtb	r0, r1
 801c648:	280e      	cmp	r0, #14
 801c64a:	d93a      	bls.n	801c6c2 <_scanf_float+0xd6>
 801c64c:	f1b9 0f00 	cmp.w	r9, #0
 801c650:	d003      	beq.n	801c65a <_scanf_float+0x6e>
 801c652:	6823      	ldr	r3, [r4, #0]
 801c654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c658:	6023      	str	r3, [r4, #0]
 801c65a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c65e:	f1ba 0f01 	cmp.w	sl, #1
 801c662:	f200 8113 	bhi.w	801c88c <_scanf_float+0x2a0>
 801c666:	455e      	cmp	r6, fp
 801c668:	f200 8105 	bhi.w	801c876 <_scanf_float+0x28a>
 801c66c:	2501      	movs	r5, #1
 801c66e:	4628      	mov	r0, r5
 801c670:	b007      	add	sp, #28
 801c672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c676:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801c67a:	2a0d      	cmp	r2, #13
 801c67c:	d8e6      	bhi.n	801c64c <_scanf_float+0x60>
 801c67e:	a101      	add	r1, pc, #4	; (adr r1, 801c684 <_scanf_float+0x98>)
 801c680:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c684:	0801c7c3 	.word	0x0801c7c3
 801c688:	0801c64d 	.word	0x0801c64d
 801c68c:	0801c64d 	.word	0x0801c64d
 801c690:	0801c64d 	.word	0x0801c64d
 801c694:	0801c823 	.word	0x0801c823
 801c698:	0801c7fb 	.word	0x0801c7fb
 801c69c:	0801c64d 	.word	0x0801c64d
 801c6a0:	0801c64d 	.word	0x0801c64d
 801c6a4:	0801c7d1 	.word	0x0801c7d1
 801c6a8:	0801c64d 	.word	0x0801c64d
 801c6ac:	0801c64d 	.word	0x0801c64d
 801c6b0:	0801c64d 	.word	0x0801c64d
 801c6b4:	0801c64d 	.word	0x0801c64d
 801c6b8:	0801c789 	.word	0x0801c789
 801c6bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801c6c0:	e7db      	b.n	801c67a <_scanf_float+0x8e>
 801c6c2:	290e      	cmp	r1, #14
 801c6c4:	d8c2      	bhi.n	801c64c <_scanf_float+0x60>
 801c6c6:	a001      	add	r0, pc, #4	; (adr r0, 801c6cc <_scanf_float+0xe0>)
 801c6c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c6cc:	0801c77b 	.word	0x0801c77b
 801c6d0:	0801c64d 	.word	0x0801c64d
 801c6d4:	0801c77b 	.word	0x0801c77b
 801c6d8:	0801c80f 	.word	0x0801c80f
 801c6dc:	0801c64d 	.word	0x0801c64d
 801c6e0:	0801c729 	.word	0x0801c729
 801c6e4:	0801c765 	.word	0x0801c765
 801c6e8:	0801c765 	.word	0x0801c765
 801c6ec:	0801c765 	.word	0x0801c765
 801c6f0:	0801c765 	.word	0x0801c765
 801c6f4:	0801c765 	.word	0x0801c765
 801c6f8:	0801c765 	.word	0x0801c765
 801c6fc:	0801c765 	.word	0x0801c765
 801c700:	0801c765 	.word	0x0801c765
 801c704:	0801c765 	.word	0x0801c765
 801c708:	2b6e      	cmp	r3, #110	; 0x6e
 801c70a:	d809      	bhi.n	801c720 <_scanf_float+0x134>
 801c70c:	2b60      	cmp	r3, #96	; 0x60
 801c70e:	d8b2      	bhi.n	801c676 <_scanf_float+0x8a>
 801c710:	2b54      	cmp	r3, #84	; 0x54
 801c712:	d077      	beq.n	801c804 <_scanf_float+0x218>
 801c714:	2b59      	cmp	r3, #89	; 0x59
 801c716:	d199      	bne.n	801c64c <_scanf_float+0x60>
 801c718:	2d07      	cmp	r5, #7
 801c71a:	d197      	bne.n	801c64c <_scanf_float+0x60>
 801c71c:	2508      	movs	r5, #8
 801c71e:	e029      	b.n	801c774 <_scanf_float+0x188>
 801c720:	2b74      	cmp	r3, #116	; 0x74
 801c722:	d06f      	beq.n	801c804 <_scanf_float+0x218>
 801c724:	2b79      	cmp	r3, #121	; 0x79
 801c726:	e7f6      	b.n	801c716 <_scanf_float+0x12a>
 801c728:	6821      	ldr	r1, [r4, #0]
 801c72a:	05c8      	lsls	r0, r1, #23
 801c72c:	d51a      	bpl.n	801c764 <_scanf_float+0x178>
 801c72e:	9b02      	ldr	r3, [sp, #8]
 801c730:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801c734:	6021      	str	r1, [r4, #0]
 801c736:	f109 0901 	add.w	r9, r9, #1
 801c73a:	b11b      	cbz	r3, 801c744 <_scanf_float+0x158>
 801c73c:	3b01      	subs	r3, #1
 801c73e:	3201      	adds	r2, #1
 801c740:	9302      	str	r3, [sp, #8]
 801c742:	60a2      	str	r2, [r4, #8]
 801c744:	68a3      	ldr	r3, [r4, #8]
 801c746:	3b01      	subs	r3, #1
 801c748:	60a3      	str	r3, [r4, #8]
 801c74a:	6923      	ldr	r3, [r4, #16]
 801c74c:	3301      	adds	r3, #1
 801c74e:	6123      	str	r3, [r4, #16]
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	3b01      	subs	r3, #1
 801c754:	2b00      	cmp	r3, #0
 801c756:	607b      	str	r3, [r7, #4]
 801c758:	f340 8084 	ble.w	801c864 <_scanf_float+0x278>
 801c75c:	683b      	ldr	r3, [r7, #0]
 801c75e:	3301      	adds	r3, #1
 801c760:	603b      	str	r3, [r7, #0]
 801c762:	e766      	b.n	801c632 <_scanf_float+0x46>
 801c764:	eb1a 0f05 	cmn.w	sl, r5
 801c768:	f47f af70 	bne.w	801c64c <_scanf_float+0x60>
 801c76c:	6822      	ldr	r2, [r4, #0]
 801c76e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801c772:	6022      	str	r2, [r4, #0]
 801c774:	f806 3b01 	strb.w	r3, [r6], #1
 801c778:	e7e4      	b.n	801c744 <_scanf_float+0x158>
 801c77a:	6822      	ldr	r2, [r4, #0]
 801c77c:	0610      	lsls	r0, r2, #24
 801c77e:	f57f af65 	bpl.w	801c64c <_scanf_float+0x60>
 801c782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c786:	e7f4      	b.n	801c772 <_scanf_float+0x186>
 801c788:	f1ba 0f00 	cmp.w	sl, #0
 801c78c:	d10e      	bne.n	801c7ac <_scanf_float+0x1c0>
 801c78e:	f1b9 0f00 	cmp.w	r9, #0
 801c792:	d10e      	bne.n	801c7b2 <_scanf_float+0x1c6>
 801c794:	6822      	ldr	r2, [r4, #0]
 801c796:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c79a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c79e:	d108      	bne.n	801c7b2 <_scanf_float+0x1c6>
 801c7a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c7a4:	6022      	str	r2, [r4, #0]
 801c7a6:	f04f 0a01 	mov.w	sl, #1
 801c7aa:	e7e3      	b.n	801c774 <_scanf_float+0x188>
 801c7ac:	f1ba 0f02 	cmp.w	sl, #2
 801c7b0:	d055      	beq.n	801c85e <_scanf_float+0x272>
 801c7b2:	2d01      	cmp	r5, #1
 801c7b4:	d002      	beq.n	801c7bc <_scanf_float+0x1d0>
 801c7b6:	2d04      	cmp	r5, #4
 801c7b8:	f47f af48 	bne.w	801c64c <_scanf_float+0x60>
 801c7bc:	3501      	adds	r5, #1
 801c7be:	b2ed      	uxtb	r5, r5
 801c7c0:	e7d8      	b.n	801c774 <_scanf_float+0x188>
 801c7c2:	f1ba 0f01 	cmp.w	sl, #1
 801c7c6:	f47f af41 	bne.w	801c64c <_scanf_float+0x60>
 801c7ca:	f04f 0a02 	mov.w	sl, #2
 801c7ce:	e7d1      	b.n	801c774 <_scanf_float+0x188>
 801c7d0:	b97d      	cbnz	r5, 801c7f2 <_scanf_float+0x206>
 801c7d2:	f1b9 0f00 	cmp.w	r9, #0
 801c7d6:	f47f af3c 	bne.w	801c652 <_scanf_float+0x66>
 801c7da:	6822      	ldr	r2, [r4, #0]
 801c7dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c7e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c7e4:	f47f af39 	bne.w	801c65a <_scanf_float+0x6e>
 801c7e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c7ec:	6022      	str	r2, [r4, #0]
 801c7ee:	2501      	movs	r5, #1
 801c7f0:	e7c0      	b.n	801c774 <_scanf_float+0x188>
 801c7f2:	2d03      	cmp	r5, #3
 801c7f4:	d0e2      	beq.n	801c7bc <_scanf_float+0x1d0>
 801c7f6:	2d05      	cmp	r5, #5
 801c7f8:	e7de      	b.n	801c7b8 <_scanf_float+0x1cc>
 801c7fa:	2d02      	cmp	r5, #2
 801c7fc:	f47f af26 	bne.w	801c64c <_scanf_float+0x60>
 801c800:	2503      	movs	r5, #3
 801c802:	e7b7      	b.n	801c774 <_scanf_float+0x188>
 801c804:	2d06      	cmp	r5, #6
 801c806:	f47f af21 	bne.w	801c64c <_scanf_float+0x60>
 801c80a:	2507      	movs	r5, #7
 801c80c:	e7b2      	b.n	801c774 <_scanf_float+0x188>
 801c80e:	6822      	ldr	r2, [r4, #0]
 801c810:	0591      	lsls	r1, r2, #22
 801c812:	f57f af1b 	bpl.w	801c64c <_scanf_float+0x60>
 801c816:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801c81a:	6022      	str	r2, [r4, #0]
 801c81c:	f8cd 9004 	str.w	r9, [sp, #4]
 801c820:	e7a8      	b.n	801c774 <_scanf_float+0x188>
 801c822:	6822      	ldr	r2, [r4, #0]
 801c824:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801c828:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c82c:	d006      	beq.n	801c83c <_scanf_float+0x250>
 801c82e:	0550      	lsls	r0, r2, #21
 801c830:	f57f af0c 	bpl.w	801c64c <_scanf_float+0x60>
 801c834:	f1b9 0f00 	cmp.w	r9, #0
 801c838:	f43f af0f 	beq.w	801c65a <_scanf_float+0x6e>
 801c83c:	0591      	lsls	r1, r2, #22
 801c83e:	bf58      	it	pl
 801c840:	9901      	ldrpl	r1, [sp, #4]
 801c842:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c846:	bf58      	it	pl
 801c848:	eba9 0101 	subpl.w	r1, r9, r1
 801c84c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801c850:	bf58      	it	pl
 801c852:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c856:	6022      	str	r2, [r4, #0]
 801c858:	f04f 0900 	mov.w	r9, #0
 801c85c:	e78a      	b.n	801c774 <_scanf_float+0x188>
 801c85e:	f04f 0a03 	mov.w	sl, #3
 801c862:	e787      	b.n	801c774 <_scanf_float+0x188>
 801c864:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c868:	4639      	mov	r1, r7
 801c86a:	4640      	mov	r0, r8
 801c86c:	4798      	blx	r3
 801c86e:	2800      	cmp	r0, #0
 801c870:	f43f aedf 	beq.w	801c632 <_scanf_float+0x46>
 801c874:	e6ea      	b.n	801c64c <_scanf_float+0x60>
 801c876:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c87a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c87e:	463a      	mov	r2, r7
 801c880:	4640      	mov	r0, r8
 801c882:	4798      	blx	r3
 801c884:	6923      	ldr	r3, [r4, #16]
 801c886:	3b01      	subs	r3, #1
 801c888:	6123      	str	r3, [r4, #16]
 801c88a:	e6ec      	b.n	801c666 <_scanf_float+0x7a>
 801c88c:	1e6b      	subs	r3, r5, #1
 801c88e:	2b06      	cmp	r3, #6
 801c890:	d825      	bhi.n	801c8de <_scanf_float+0x2f2>
 801c892:	2d02      	cmp	r5, #2
 801c894:	d836      	bhi.n	801c904 <_scanf_float+0x318>
 801c896:	455e      	cmp	r6, fp
 801c898:	f67f aee8 	bls.w	801c66c <_scanf_float+0x80>
 801c89c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c8a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c8a4:	463a      	mov	r2, r7
 801c8a6:	4640      	mov	r0, r8
 801c8a8:	4798      	blx	r3
 801c8aa:	6923      	ldr	r3, [r4, #16]
 801c8ac:	3b01      	subs	r3, #1
 801c8ae:	6123      	str	r3, [r4, #16]
 801c8b0:	e7f1      	b.n	801c896 <_scanf_float+0x2aa>
 801c8b2:	9802      	ldr	r0, [sp, #8]
 801c8b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c8b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801c8bc:	9002      	str	r0, [sp, #8]
 801c8be:	463a      	mov	r2, r7
 801c8c0:	4640      	mov	r0, r8
 801c8c2:	4798      	blx	r3
 801c8c4:	6923      	ldr	r3, [r4, #16]
 801c8c6:	3b01      	subs	r3, #1
 801c8c8:	6123      	str	r3, [r4, #16]
 801c8ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c8ce:	fa5f fa8a 	uxtb.w	sl, sl
 801c8d2:	f1ba 0f02 	cmp.w	sl, #2
 801c8d6:	d1ec      	bne.n	801c8b2 <_scanf_float+0x2c6>
 801c8d8:	3d03      	subs	r5, #3
 801c8da:	b2ed      	uxtb	r5, r5
 801c8dc:	1b76      	subs	r6, r6, r5
 801c8de:	6823      	ldr	r3, [r4, #0]
 801c8e0:	05da      	lsls	r2, r3, #23
 801c8e2:	d52f      	bpl.n	801c944 <_scanf_float+0x358>
 801c8e4:	055b      	lsls	r3, r3, #21
 801c8e6:	d510      	bpl.n	801c90a <_scanf_float+0x31e>
 801c8e8:	455e      	cmp	r6, fp
 801c8ea:	f67f aebf 	bls.w	801c66c <_scanf_float+0x80>
 801c8ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c8f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c8f6:	463a      	mov	r2, r7
 801c8f8:	4640      	mov	r0, r8
 801c8fa:	4798      	blx	r3
 801c8fc:	6923      	ldr	r3, [r4, #16]
 801c8fe:	3b01      	subs	r3, #1
 801c900:	6123      	str	r3, [r4, #16]
 801c902:	e7f1      	b.n	801c8e8 <_scanf_float+0x2fc>
 801c904:	46aa      	mov	sl, r5
 801c906:	9602      	str	r6, [sp, #8]
 801c908:	e7df      	b.n	801c8ca <_scanf_float+0x2de>
 801c90a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c90e:	6923      	ldr	r3, [r4, #16]
 801c910:	2965      	cmp	r1, #101	; 0x65
 801c912:	f103 33ff 	add.w	r3, r3, #4294967295
 801c916:	f106 35ff 	add.w	r5, r6, #4294967295
 801c91a:	6123      	str	r3, [r4, #16]
 801c91c:	d00c      	beq.n	801c938 <_scanf_float+0x34c>
 801c91e:	2945      	cmp	r1, #69	; 0x45
 801c920:	d00a      	beq.n	801c938 <_scanf_float+0x34c>
 801c922:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c926:	463a      	mov	r2, r7
 801c928:	4640      	mov	r0, r8
 801c92a:	4798      	blx	r3
 801c92c:	6923      	ldr	r3, [r4, #16]
 801c92e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801c932:	3b01      	subs	r3, #1
 801c934:	1eb5      	subs	r5, r6, #2
 801c936:	6123      	str	r3, [r4, #16]
 801c938:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c93c:	463a      	mov	r2, r7
 801c93e:	4640      	mov	r0, r8
 801c940:	4798      	blx	r3
 801c942:	462e      	mov	r6, r5
 801c944:	6825      	ldr	r5, [r4, #0]
 801c946:	f015 0510 	ands.w	r5, r5, #16
 801c94a:	d158      	bne.n	801c9fe <_scanf_float+0x412>
 801c94c:	7035      	strb	r5, [r6, #0]
 801c94e:	6823      	ldr	r3, [r4, #0]
 801c950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c958:	d11c      	bne.n	801c994 <_scanf_float+0x3a8>
 801c95a:	9b01      	ldr	r3, [sp, #4]
 801c95c:	454b      	cmp	r3, r9
 801c95e:	eba3 0209 	sub.w	r2, r3, r9
 801c962:	d124      	bne.n	801c9ae <_scanf_float+0x3c2>
 801c964:	2200      	movs	r2, #0
 801c966:	4659      	mov	r1, fp
 801c968:	4640      	mov	r0, r8
 801c96a:	f001 f873 	bl	801da54 <_strtod_r>
 801c96e:	9b03      	ldr	r3, [sp, #12]
 801c970:	6821      	ldr	r1, [r4, #0]
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	f011 0f02 	tst.w	r1, #2
 801c978:	ec57 6b10 	vmov	r6, r7, d0
 801c97c:	f103 0204 	add.w	r2, r3, #4
 801c980:	d020      	beq.n	801c9c4 <_scanf_float+0x3d8>
 801c982:	9903      	ldr	r1, [sp, #12]
 801c984:	600a      	str	r2, [r1, #0]
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	e9c3 6700 	strd	r6, r7, [r3]
 801c98c:	68e3      	ldr	r3, [r4, #12]
 801c98e:	3301      	adds	r3, #1
 801c990:	60e3      	str	r3, [r4, #12]
 801c992:	e66c      	b.n	801c66e <_scanf_float+0x82>
 801c994:	9b04      	ldr	r3, [sp, #16]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d0e4      	beq.n	801c964 <_scanf_float+0x378>
 801c99a:	9905      	ldr	r1, [sp, #20]
 801c99c:	230a      	movs	r3, #10
 801c99e:	462a      	mov	r2, r5
 801c9a0:	3101      	adds	r1, #1
 801c9a2:	4640      	mov	r0, r8
 801c9a4:	f001 f8e0 	bl	801db68 <_strtol_r>
 801c9a8:	9b04      	ldr	r3, [sp, #16]
 801c9aa:	9e05      	ldr	r6, [sp, #20]
 801c9ac:	1ac2      	subs	r2, r0, r3
 801c9ae:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801c9b2:	429e      	cmp	r6, r3
 801c9b4:	bf28      	it	cs
 801c9b6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801c9ba:	4912      	ldr	r1, [pc, #72]	; (801ca04 <_scanf_float+0x418>)
 801c9bc:	4630      	mov	r0, r6
 801c9be:	f000 f977 	bl	801ccb0 <siprintf>
 801c9c2:	e7cf      	b.n	801c964 <_scanf_float+0x378>
 801c9c4:	f011 0f04 	tst.w	r1, #4
 801c9c8:	9903      	ldr	r1, [sp, #12]
 801c9ca:	600a      	str	r2, [r1, #0]
 801c9cc:	d1db      	bne.n	801c986 <_scanf_float+0x39a>
 801c9ce:	f8d3 8000 	ldr.w	r8, [r3]
 801c9d2:	ee10 2a10 	vmov	r2, s0
 801c9d6:	ee10 0a10 	vmov	r0, s0
 801c9da:	463b      	mov	r3, r7
 801c9dc:	4639      	mov	r1, r7
 801c9de:	f7e4 f8c5 	bl	8000b6c <__aeabi_dcmpun>
 801c9e2:	b128      	cbz	r0, 801c9f0 <_scanf_float+0x404>
 801c9e4:	4808      	ldr	r0, [pc, #32]	; (801ca08 <_scanf_float+0x41c>)
 801c9e6:	f000 f919 	bl	801cc1c <nanf>
 801c9ea:	ed88 0a00 	vstr	s0, [r8]
 801c9ee:	e7cd      	b.n	801c98c <_scanf_float+0x3a0>
 801c9f0:	4630      	mov	r0, r6
 801c9f2:	4639      	mov	r1, r7
 801c9f4:	f7e4 f918 	bl	8000c28 <__aeabi_d2f>
 801c9f8:	f8c8 0000 	str.w	r0, [r8]
 801c9fc:	e7c6      	b.n	801c98c <_scanf_float+0x3a0>
 801c9fe:	2500      	movs	r5, #0
 801ca00:	e635      	b.n	801c66e <_scanf_float+0x82>
 801ca02:	bf00      	nop
 801ca04:	0802349a 	.word	0x0802349a
 801ca08:	08023567 	.word	0x08023567

0801ca0c <iprintf>:
 801ca0c:	b40f      	push	{r0, r1, r2, r3}
 801ca0e:	4b0a      	ldr	r3, [pc, #40]	; (801ca38 <iprintf+0x2c>)
 801ca10:	b513      	push	{r0, r1, r4, lr}
 801ca12:	681c      	ldr	r4, [r3, #0]
 801ca14:	b124      	cbz	r4, 801ca20 <iprintf+0x14>
 801ca16:	69a3      	ldr	r3, [r4, #24]
 801ca18:	b913      	cbnz	r3, 801ca20 <iprintf+0x14>
 801ca1a:	4620      	mov	r0, r4
 801ca1c:	f7fe fc30 	bl	801b280 <__sinit>
 801ca20:	ab05      	add	r3, sp, #20
 801ca22:	9a04      	ldr	r2, [sp, #16]
 801ca24:	68a1      	ldr	r1, [r4, #8]
 801ca26:	9301      	str	r3, [sp, #4]
 801ca28:	4620      	mov	r0, r4
 801ca2a:	f004 f947 	bl	8020cbc <_vfiprintf_r>
 801ca2e:	b002      	add	sp, #8
 801ca30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca34:	b004      	add	sp, #16
 801ca36:	4770      	bx	lr
 801ca38:	20000200 	.word	0x20000200

0801ca3c <_puts_r>:
 801ca3c:	b570      	push	{r4, r5, r6, lr}
 801ca3e:	460e      	mov	r6, r1
 801ca40:	4605      	mov	r5, r0
 801ca42:	b118      	cbz	r0, 801ca4c <_puts_r+0x10>
 801ca44:	6983      	ldr	r3, [r0, #24]
 801ca46:	b90b      	cbnz	r3, 801ca4c <_puts_r+0x10>
 801ca48:	f7fe fc1a 	bl	801b280 <__sinit>
 801ca4c:	69ab      	ldr	r3, [r5, #24]
 801ca4e:	68ac      	ldr	r4, [r5, #8]
 801ca50:	b913      	cbnz	r3, 801ca58 <_puts_r+0x1c>
 801ca52:	4628      	mov	r0, r5
 801ca54:	f7fe fc14 	bl	801b280 <__sinit>
 801ca58:	4b2c      	ldr	r3, [pc, #176]	; (801cb0c <_puts_r+0xd0>)
 801ca5a:	429c      	cmp	r4, r3
 801ca5c:	d120      	bne.n	801caa0 <_puts_r+0x64>
 801ca5e:	686c      	ldr	r4, [r5, #4]
 801ca60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ca62:	07db      	lsls	r3, r3, #31
 801ca64:	d405      	bmi.n	801ca72 <_puts_r+0x36>
 801ca66:	89a3      	ldrh	r3, [r4, #12]
 801ca68:	0598      	lsls	r0, r3, #22
 801ca6a:	d402      	bmi.n	801ca72 <_puts_r+0x36>
 801ca6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca6e:	f7fe fde7 	bl	801b640 <__retarget_lock_acquire_recursive>
 801ca72:	89a3      	ldrh	r3, [r4, #12]
 801ca74:	0719      	lsls	r1, r3, #28
 801ca76:	d51d      	bpl.n	801cab4 <_puts_r+0x78>
 801ca78:	6923      	ldr	r3, [r4, #16]
 801ca7a:	b1db      	cbz	r3, 801cab4 <_puts_r+0x78>
 801ca7c:	3e01      	subs	r6, #1
 801ca7e:	68a3      	ldr	r3, [r4, #8]
 801ca80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ca84:	3b01      	subs	r3, #1
 801ca86:	60a3      	str	r3, [r4, #8]
 801ca88:	bb39      	cbnz	r1, 801cada <_puts_r+0x9e>
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	da38      	bge.n	801cb00 <_puts_r+0xc4>
 801ca8e:	4622      	mov	r2, r4
 801ca90:	210a      	movs	r1, #10
 801ca92:	4628      	mov	r0, r5
 801ca94:	f001 fb6c 	bl	801e170 <__swbuf_r>
 801ca98:	3001      	adds	r0, #1
 801ca9a:	d011      	beq.n	801cac0 <_puts_r+0x84>
 801ca9c:	250a      	movs	r5, #10
 801ca9e:	e011      	b.n	801cac4 <_puts_r+0x88>
 801caa0:	4b1b      	ldr	r3, [pc, #108]	; (801cb10 <_puts_r+0xd4>)
 801caa2:	429c      	cmp	r4, r3
 801caa4:	d101      	bne.n	801caaa <_puts_r+0x6e>
 801caa6:	68ac      	ldr	r4, [r5, #8]
 801caa8:	e7da      	b.n	801ca60 <_puts_r+0x24>
 801caaa:	4b1a      	ldr	r3, [pc, #104]	; (801cb14 <_puts_r+0xd8>)
 801caac:	429c      	cmp	r4, r3
 801caae:	bf08      	it	eq
 801cab0:	68ec      	ldreq	r4, [r5, #12]
 801cab2:	e7d5      	b.n	801ca60 <_puts_r+0x24>
 801cab4:	4621      	mov	r1, r4
 801cab6:	4628      	mov	r0, r5
 801cab8:	f001 fbbe 	bl	801e238 <__swsetup_r>
 801cabc:	2800      	cmp	r0, #0
 801cabe:	d0dd      	beq.n	801ca7c <_puts_r+0x40>
 801cac0:	f04f 35ff 	mov.w	r5, #4294967295
 801cac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cac6:	07da      	lsls	r2, r3, #31
 801cac8:	d405      	bmi.n	801cad6 <_puts_r+0x9a>
 801caca:	89a3      	ldrh	r3, [r4, #12]
 801cacc:	059b      	lsls	r3, r3, #22
 801cace:	d402      	bmi.n	801cad6 <_puts_r+0x9a>
 801cad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cad2:	f7fe fdb7 	bl	801b644 <__retarget_lock_release_recursive>
 801cad6:	4628      	mov	r0, r5
 801cad8:	bd70      	pop	{r4, r5, r6, pc}
 801cada:	2b00      	cmp	r3, #0
 801cadc:	da04      	bge.n	801cae8 <_puts_r+0xac>
 801cade:	69a2      	ldr	r2, [r4, #24]
 801cae0:	429a      	cmp	r2, r3
 801cae2:	dc06      	bgt.n	801caf2 <_puts_r+0xb6>
 801cae4:	290a      	cmp	r1, #10
 801cae6:	d004      	beq.n	801caf2 <_puts_r+0xb6>
 801cae8:	6823      	ldr	r3, [r4, #0]
 801caea:	1c5a      	adds	r2, r3, #1
 801caec:	6022      	str	r2, [r4, #0]
 801caee:	7019      	strb	r1, [r3, #0]
 801caf0:	e7c5      	b.n	801ca7e <_puts_r+0x42>
 801caf2:	4622      	mov	r2, r4
 801caf4:	4628      	mov	r0, r5
 801caf6:	f001 fb3b 	bl	801e170 <__swbuf_r>
 801cafa:	3001      	adds	r0, #1
 801cafc:	d1bf      	bne.n	801ca7e <_puts_r+0x42>
 801cafe:	e7df      	b.n	801cac0 <_puts_r+0x84>
 801cb00:	6823      	ldr	r3, [r4, #0]
 801cb02:	250a      	movs	r5, #10
 801cb04:	1c5a      	adds	r2, r3, #1
 801cb06:	6022      	str	r2, [r4, #0]
 801cb08:	701d      	strb	r5, [r3, #0]
 801cb0a:	e7db      	b.n	801cac4 <_puts_r+0x88>
 801cb0c:	080232ec 	.word	0x080232ec
 801cb10:	0802330c 	.word	0x0802330c
 801cb14:	080232cc 	.word	0x080232cc

0801cb18 <puts>:
 801cb18:	4b02      	ldr	r3, [pc, #8]	; (801cb24 <puts+0xc>)
 801cb1a:	4601      	mov	r1, r0
 801cb1c:	6818      	ldr	r0, [r3, #0]
 801cb1e:	f7ff bf8d 	b.w	801ca3c <_puts_r>
 801cb22:	bf00      	nop
 801cb24:	20000200 	.word	0x20000200

0801cb28 <cleanup_glue>:
 801cb28:	b538      	push	{r3, r4, r5, lr}
 801cb2a:	460c      	mov	r4, r1
 801cb2c:	6809      	ldr	r1, [r1, #0]
 801cb2e:	4605      	mov	r5, r0
 801cb30:	b109      	cbz	r1, 801cb36 <cleanup_glue+0xe>
 801cb32:	f7ff fff9 	bl	801cb28 <cleanup_glue>
 801cb36:	4621      	mov	r1, r4
 801cb38:	4628      	mov	r0, r5
 801cb3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb3e:	f7ff b841 	b.w	801bbc4 <_free_r>
	...

0801cb44 <_reclaim_reent>:
 801cb44:	4b2c      	ldr	r3, [pc, #176]	; (801cbf8 <_reclaim_reent+0xb4>)
 801cb46:	681b      	ldr	r3, [r3, #0]
 801cb48:	4283      	cmp	r3, r0
 801cb4a:	b570      	push	{r4, r5, r6, lr}
 801cb4c:	4604      	mov	r4, r0
 801cb4e:	d051      	beq.n	801cbf4 <_reclaim_reent+0xb0>
 801cb50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801cb52:	b143      	cbz	r3, 801cb66 <_reclaim_reent+0x22>
 801cb54:	68db      	ldr	r3, [r3, #12]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d14a      	bne.n	801cbf0 <_reclaim_reent+0xac>
 801cb5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cb5c:	6819      	ldr	r1, [r3, #0]
 801cb5e:	b111      	cbz	r1, 801cb66 <_reclaim_reent+0x22>
 801cb60:	4620      	mov	r0, r4
 801cb62:	f7ff f82f 	bl	801bbc4 <_free_r>
 801cb66:	6961      	ldr	r1, [r4, #20]
 801cb68:	b111      	cbz	r1, 801cb70 <_reclaim_reent+0x2c>
 801cb6a:	4620      	mov	r0, r4
 801cb6c:	f7ff f82a 	bl	801bbc4 <_free_r>
 801cb70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801cb72:	b111      	cbz	r1, 801cb7a <_reclaim_reent+0x36>
 801cb74:	4620      	mov	r0, r4
 801cb76:	f7ff f825 	bl	801bbc4 <_free_r>
 801cb7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cb7c:	b111      	cbz	r1, 801cb84 <_reclaim_reent+0x40>
 801cb7e:	4620      	mov	r0, r4
 801cb80:	f7ff f820 	bl	801bbc4 <_free_r>
 801cb84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801cb86:	b111      	cbz	r1, 801cb8e <_reclaim_reent+0x4a>
 801cb88:	4620      	mov	r0, r4
 801cb8a:	f7ff f81b 	bl	801bbc4 <_free_r>
 801cb8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cb90:	b111      	cbz	r1, 801cb98 <_reclaim_reent+0x54>
 801cb92:	4620      	mov	r0, r4
 801cb94:	f7ff f816 	bl	801bbc4 <_free_r>
 801cb98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801cb9a:	b111      	cbz	r1, 801cba2 <_reclaim_reent+0x5e>
 801cb9c:	4620      	mov	r0, r4
 801cb9e:	f7ff f811 	bl	801bbc4 <_free_r>
 801cba2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801cba4:	b111      	cbz	r1, 801cbac <_reclaim_reent+0x68>
 801cba6:	4620      	mov	r0, r4
 801cba8:	f7ff f80c 	bl	801bbc4 <_free_r>
 801cbac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cbae:	b111      	cbz	r1, 801cbb6 <_reclaim_reent+0x72>
 801cbb0:	4620      	mov	r0, r4
 801cbb2:	f7ff f807 	bl	801bbc4 <_free_r>
 801cbb6:	69a3      	ldr	r3, [r4, #24]
 801cbb8:	b1e3      	cbz	r3, 801cbf4 <_reclaim_reent+0xb0>
 801cbba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cbbc:	4620      	mov	r0, r4
 801cbbe:	4798      	blx	r3
 801cbc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801cbc2:	b1b9      	cbz	r1, 801cbf4 <_reclaim_reent+0xb0>
 801cbc4:	4620      	mov	r0, r4
 801cbc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cbca:	f7ff bfad 	b.w	801cb28 <cleanup_glue>
 801cbce:	5949      	ldr	r1, [r1, r5]
 801cbd0:	b941      	cbnz	r1, 801cbe4 <_reclaim_reent+0xa0>
 801cbd2:	3504      	adds	r5, #4
 801cbd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cbd6:	2d80      	cmp	r5, #128	; 0x80
 801cbd8:	68d9      	ldr	r1, [r3, #12]
 801cbda:	d1f8      	bne.n	801cbce <_reclaim_reent+0x8a>
 801cbdc:	4620      	mov	r0, r4
 801cbde:	f7fe fff1 	bl	801bbc4 <_free_r>
 801cbe2:	e7ba      	b.n	801cb5a <_reclaim_reent+0x16>
 801cbe4:	680e      	ldr	r6, [r1, #0]
 801cbe6:	4620      	mov	r0, r4
 801cbe8:	f7fe ffec 	bl	801bbc4 <_free_r>
 801cbec:	4631      	mov	r1, r6
 801cbee:	e7ef      	b.n	801cbd0 <_reclaim_reent+0x8c>
 801cbf0:	2500      	movs	r5, #0
 801cbf2:	e7ef      	b.n	801cbd4 <_reclaim_reent+0x90>
 801cbf4:	bd70      	pop	{r4, r5, r6, pc}
 801cbf6:	bf00      	nop
 801cbf8:	20000200 	.word	0x20000200

0801cbfc <_sbrk_r>:
 801cbfc:	b538      	push	{r3, r4, r5, lr}
 801cbfe:	4d06      	ldr	r5, [pc, #24]	; (801cc18 <_sbrk_r+0x1c>)
 801cc00:	2300      	movs	r3, #0
 801cc02:	4604      	mov	r4, r0
 801cc04:	4608      	mov	r0, r1
 801cc06:	602b      	str	r3, [r5, #0]
 801cc08:	f7e6 fd26 	bl	8003658 <_sbrk>
 801cc0c:	1c43      	adds	r3, r0, #1
 801cc0e:	d102      	bne.n	801cc16 <_sbrk_r+0x1a>
 801cc10:	682b      	ldr	r3, [r5, #0]
 801cc12:	b103      	cbz	r3, 801cc16 <_sbrk_r+0x1a>
 801cc14:	6023      	str	r3, [r4, #0]
 801cc16:	bd38      	pop	{r3, r4, r5, pc}
 801cc18:	200090d8 	.word	0x200090d8

0801cc1c <nanf>:
 801cc1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801cc24 <nanf+0x8>
 801cc20:	4770      	bx	lr
 801cc22:	bf00      	nop
 801cc24:	7fc00000 	.word	0x7fc00000

0801cc28 <_raise_r>:
 801cc28:	291f      	cmp	r1, #31
 801cc2a:	b538      	push	{r3, r4, r5, lr}
 801cc2c:	4604      	mov	r4, r0
 801cc2e:	460d      	mov	r5, r1
 801cc30:	d904      	bls.n	801cc3c <_raise_r+0x14>
 801cc32:	2316      	movs	r3, #22
 801cc34:	6003      	str	r3, [r0, #0]
 801cc36:	f04f 30ff 	mov.w	r0, #4294967295
 801cc3a:	bd38      	pop	{r3, r4, r5, pc}
 801cc3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cc3e:	b112      	cbz	r2, 801cc46 <_raise_r+0x1e>
 801cc40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cc44:	b94b      	cbnz	r3, 801cc5a <_raise_r+0x32>
 801cc46:	4620      	mov	r0, r4
 801cc48:	f000 f830 	bl	801ccac <_getpid_r>
 801cc4c:	462a      	mov	r2, r5
 801cc4e:	4601      	mov	r1, r0
 801cc50:	4620      	mov	r0, r4
 801cc52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cc56:	f000 b817 	b.w	801cc88 <_kill_r>
 801cc5a:	2b01      	cmp	r3, #1
 801cc5c:	d00a      	beq.n	801cc74 <_raise_r+0x4c>
 801cc5e:	1c59      	adds	r1, r3, #1
 801cc60:	d103      	bne.n	801cc6a <_raise_r+0x42>
 801cc62:	2316      	movs	r3, #22
 801cc64:	6003      	str	r3, [r0, #0]
 801cc66:	2001      	movs	r0, #1
 801cc68:	e7e7      	b.n	801cc3a <_raise_r+0x12>
 801cc6a:	2400      	movs	r4, #0
 801cc6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cc70:	4628      	mov	r0, r5
 801cc72:	4798      	blx	r3
 801cc74:	2000      	movs	r0, #0
 801cc76:	e7e0      	b.n	801cc3a <_raise_r+0x12>

0801cc78 <raise>:
 801cc78:	4b02      	ldr	r3, [pc, #8]	; (801cc84 <raise+0xc>)
 801cc7a:	4601      	mov	r1, r0
 801cc7c:	6818      	ldr	r0, [r3, #0]
 801cc7e:	f7ff bfd3 	b.w	801cc28 <_raise_r>
 801cc82:	bf00      	nop
 801cc84:	20000200 	.word	0x20000200

0801cc88 <_kill_r>:
 801cc88:	b538      	push	{r3, r4, r5, lr}
 801cc8a:	4d07      	ldr	r5, [pc, #28]	; (801cca8 <_kill_r+0x20>)
 801cc8c:	2300      	movs	r3, #0
 801cc8e:	4604      	mov	r4, r0
 801cc90:	4608      	mov	r0, r1
 801cc92:	4611      	mov	r1, r2
 801cc94:	602b      	str	r3, [r5, #0]
 801cc96:	f7e6 fc57 	bl	8003548 <_kill>
 801cc9a:	1c43      	adds	r3, r0, #1
 801cc9c:	d102      	bne.n	801cca4 <_kill_r+0x1c>
 801cc9e:	682b      	ldr	r3, [r5, #0]
 801cca0:	b103      	cbz	r3, 801cca4 <_kill_r+0x1c>
 801cca2:	6023      	str	r3, [r4, #0]
 801cca4:	bd38      	pop	{r3, r4, r5, pc}
 801cca6:	bf00      	nop
 801cca8:	200090d8 	.word	0x200090d8

0801ccac <_getpid_r>:
 801ccac:	f7e6 bc44 	b.w	8003538 <_getpid>

0801ccb0 <siprintf>:
 801ccb0:	b40e      	push	{r1, r2, r3}
 801ccb2:	b500      	push	{lr}
 801ccb4:	b09c      	sub	sp, #112	; 0x70
 801ccb6:	ab1d      	add	r3, sp, #116	; 0x74
 801ccb8:	9002      	str	r0, [sp, #8]
 801ccba:	9006      	str	r0, [sp, #24]
 801ccbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ccc0:	4809      	ldr	r0, [pc, #36]	; (801cce8 <siprintf+0x38>)
 801ccc2:	9107      	str	r1, [sp, #28]
 801ccc4:	9104      	str	r1, [sp, #16]
 801ccc6:	4909      	ldr	r1, [pc, #36]	; (801ccec <siprintf+0x3c>)
 801ccc8:	f853 2b04 	ldr.w	r2, [r3], #4
 801cccc:	9105      	str	r1, [sp, #20]
 801ccce:	6800      	ldr	r0, [r0, #0]
 801ccd0:	9301      	str	r3, [sp, #4]
 801ccd2:	a902      	add	r1, sp, #8
 801ccd4:	f003 fcf6 	bl	80206c4 <_svfiprintf_r>
 801ccd8:	9b02      	ldr	r3, [sp, #8]
 801ccda:	2200      	movs	r2, #0
 801ccdc:	701a      	strb	r2, [r3, #0]
 801ccde:	b01c      	add	sp, #112	; 0x70
 801cce0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cce4:	b003      	add	sp, #12
 801cce6:	4770      	bx	lr
 801cce8:	20000200 	.word	0x20000200
 801ccec:	ffff0208 	.word	0xffff0208

0801ccf0 <siscanf>:
 801ccf0:	b40e      	push	{r1, r2, r3}
 801ccf2:	b510      	push	{r4, lr}
 801ccf4:	b09f      	sub	sp, #124	; 0x7c
 801ccf6:	ac21      	add	r4, sp, #132	; 0x84
 801ccf8:	f44f 7101 	mov.w	r1, #516	; 0x204
 801ccfc:	f854 2b04 	ldr.w	r2, [r4], #4
 801cd00:	9201      	str	r2, [sp, #4]
 801cd02:	f8ad 101c 	strh.w	r1, [sp, #28]
 801cd06:	9004      	str	r0, [sp, #16]
 801cd08:	9008      	str	r0, [sp, #32]
 801cd0a:	f7e3 fa7b 	bl	8000204 <strlen>
 801cd0e:	4b0c      	ldr	r3, [pc, #48]	; (801cd40 <siscanf+0x50>)
 801cd10:	9005      	str	r0, [sp, #20]
 801cd12:	9009      	str	r0, [sp, #36]	; 0x24
 801cd14:	930d      	str	r3, [sp, #52]	; 0x34
 801cd16:	480b      	ldr	r0, [pc, #44]	; (801cd44 <siscanf+0x54>)
 801cd18:	9a01      	ldr	r2, [sp, #4]
 801cd1a:	6800      	ldr	r0, [r0, #0]
 801cd1c:	9403      	str	r4, [sp, #12]
 801cd1e:	2300      	movs	r3, #0
 801cd20:	9311      	str	r3, [sp, #68]	; 0x44
 801cd22:	9316      	str	r3, [sp, #88]	; 0x58
 801cd24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cd28:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cd2c:	a904      	add	r1, sp, #16
 801cd2e:	4623      	mov	r3, r4
 801cd30:	f003 fe22 	bl	8020978 <__ssvfiscanf_r>
 801cd34:	b01f      	add	sp, #124	; 0x7c
 801cd36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd3a:	b003      	add	sp, #12
 801cd3c:	4770      	bx	lr
 801cd3e:	bf00      	nop
 801cd40:	0801cd6b 	.word	0x0801cd6b
 801cd44:	20000200 	.word	0x20000200

0801cd48 <__sread>:
 801cd48:	b510      	push	{r4, lr}
 801cd4a:	460c      	mov	r4, r1
 801cd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd50:	f004 fa30 	bl	80211b4 <_read_r>
 801cd54:	2800      	cmp	r0, #0
 801cd56:	bfab      	itete	ge
 801cd58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cd5a:	89a3      	ldrhlt	r3, [r4, #12]
 801cd5c:	181b      	addge	r3, r3, r0
 801cd5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cd62:	bfac      	ite	ge
 801cd64:	6563      	strge	r3, [r4, #84]	; 0x54
 801cd66:	81a3      	strhlt	r3, [r4, #12]
 801cd68:	bd10      	pop	{r4, pc}

0801cd6a <__seofread>:
 801cd6a:	2000      	movs	r0, #0
 801cd6c:	4770      	bx	lr

0801cd6e <__swrite>:
 801cd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd72:	461f      	mov	r7, r3
 801cd74:	898b      	ldrh	r3, [r1, #12]
 801cd76:	05db      	lsls	r3, r3, #23
 801cd78:	4605      	mov	r5, r0
 801cd7a:	460c      	mov	r4, r1
 801cd7c:	4616      	mov	r6, r2
 801cd7e:	d505      	bpl.n	801cd8c <__swrite+0x1e>
 801cd80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd84:	2302      	movs	r3, #2
 801cd86:	2200      	movs	r2, #0
 801cd88:	f002 febc 	bl	801fb04 <_lseek_r>
 801cd8c:	89a3      	ldrh	r3, [r4, #12]
 801cd8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cd92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cd96:	81a3      	strh	r3, [r4, #12]
 801cd98:	4632      	mov	r2, r6
 801cd9a:	463b      	mov	r3, r7
 801cd9c:	4628      	mov	r0, r5
 801cd9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cda2:	f001 ba37 	b.w	801e214 <_write_r>

0801cda6 <__sseek>:
 801cda6:	b510      	push	{r4, lr}
 801cda8:	460c      	mov	r4, r1
 801cdaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cdae:	f002 fea9 	bl	801fb04 <_lseek_r>
 801cdb2:	1c43      	adds	r3, r0, #1
 801cdb4:	89a3      	ldrh	r3, [r4, #12]
 801cdb6:	bf15      	itete	ne
 801cdb8:	6560      	strne	r0, [r4, #84]	; 0x54
 801cdba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cdbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cdc2:	81a3      	strheq	r3, [r4, #12]
 801cdc4:	bf18      	it	ne
 801cdc6:	81a3      	strhne	r3, [r4, #12]
 801cdc8:	bd10      	pop	{r4, pc}

0801cdca <__sclose>:
 801cdca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cdce:	f001 babf 	b.w	801e350 <_close_r>

0801cdd2 <strcpy>:
 801cdd2:	4603      	mov	r3, r0
 801cdd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cdd8:	f803 2b01 	strb.w	r2, [r3], #1
 801cddc:	2a00      	cmp	r2, #0
 801cdde:	d1f9      	bne.n	801cdd4 <strcpy+0x2>
 801cde0:	4770      	bx	lr

0801cde2 <strncmp>:
 801cde2:	b510      	push	{r4, lr}
 801cde4:	b16a      	cbz	r2, 801ce02 <strncmp+0x20>
 801cde6:	3901      	subs	r1, #1
 801cde8:	1884      	adds	r4, r0, r2
 801cdea:	f810 3b01 	ldrb.w	r3, [r0], #1
 801cdee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801cdf2:	4293      	cmp	r3, r2
 801cdf4:	d103      	bne.n	801cdfe <strncmp+0x1c>
 801cdf6:	42a0      	cmp	r0, r4
 801cdf8:	d001      	beq.n	801cdfe <strncmp+0x1c>
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d1f5      	bne.n	801cdea <strncmp+0x8>
 801cdfe:	1a98      	subs	r0, r3, r2
 801ce00:	bd10      	pop	{r4, pc}
 801ce02:	4610      	mov	r0, r2
 801ce04:	e7fc      	b.n	801ce00 <strncmp+0x1e>

0801ce06 <sulp>:
 801ce06:	b570      	push	{r4, r5, r6, lr}
 801ce08:	4604      	mov	r4, r0
 801ce0a:	460d      	mov	r5, r1
 801ce0c:	ec45 4b10 	vmov	d0, r4, r5
 801ce10:	4616      	mov	r6, r2
 801ce12:	f003 fa77 	bl	8020304 <__ulp>
 801ce16:	ec51 0b10 	vmov	r0, r1, d0
 801ce1a:	b17e      	cbz	r6, 801ce3c <sulp+0x36>
 801ce1c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ce20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	dd09      	ble.n	801ce3c <sulp+0x36>
 801ce28:	051b      	lsls	r3, r3, #20
 801ce2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801ce2e:	2400      	movs	r4, #0
 801ce30:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801ce34:	4622      	mov	r2, r4
 801ce36:	462b      	mov	r3, r5
 801ce38:	f7e3 fbfe 	bl	8000638 <__aeabi_dmul>
 801ce3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ce40 <_strtod_l>:
 801ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce44:	b0a3      	sub	sp, #140	; 0x8c
 801ce46:	461f      	mov	r7, r3
 801ce48:	2300      	movs	r3, #0
 801ce4a:	931e      	str	r3, [sp, #120]	; 0x78
 801ce4c:	4ba4      	ldr	r3, [pc, #656]	; (801d0e0 <_strtod_l+0x2a0>)
 801ce4e:	9219      	str	r2, [sp, #100]	; 0x64
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	9307      	str	r3, [sp, #28]
 801ce54:	4604      	mov	r4, r0
 801ce56:	4618      	mov	r0, r3
 801ce58:	4688      	mov	r8, r1
 801ce5a:	f7e3 f9d3 	bl	8000204 <strlen>
 801ce5e:	f04f 0a00 	mov.w	sl, #0
 801ce62:	4605      	mov	r5, r0
 801ce64:	f04f 0b00 	mov.w	fp, #0
 801ce68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ce6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ce6e:	781a      	ldrb	r2, [r3, #0]
 801ce70:	2a2b      	cmp	r2, #43	; 0x2b
 801ce72:	d04c      	beq.n	801cf0e <_strtod_l+0xce>
 801ce74:	d839      	bhi.n	801ceea <_strtod_l+0xaa>
 801ce76:	2a0d      	cmp	r2, #13
 801ce78:	d832      	bhi.n	801cee0 <_strtod_l+0xa0>
 801ce7a:	2a08      	cmp	r2, #8
 801ce7c:	d832      	bhi.n	801cee4 <_strtod_l+0xa4>
 801ce7e:	2a00      	cmp	r2, #0
 801ce80:	d03c      	beq.n	801cefc <_strtod_l+0xbc>
 801ce82:	2300      	movs	r3, #0
 801ce84:	930e      	str	r3, [sp, #56]	; 0x38
 801ce86:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ce88:	7833      	ldrb	r3, [r6, #0]
 801ce8a:	2b30      	cmp	r3, #48	; 0x30
 801ce8c:	f040 80b4 	bne.w	801cff8 <_strtod_l+0x1b8>
 801ce90:	7873      	ldrb	r3, [r6, #1]
 801ce92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ce96:	2b58      	cmp	r3, #88	; 0x58
 801ce98:	d16c      	bne.n	801cf74 <_strtod_l+0x134>
 801ce9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce9c:	9301      	str	r3, [sp, #4]
 801ce9e:	ab1e      	add	r3, sp, #120	; 0x78
 801cea0:	9702      	str	r7, [sp, #8]
 801cea2:	9300      	str	r3, [sp, #0]
 801cea4:	4a8f      	ldr	r2, [pc, #572]	; (801d0e4 <_strtod_l+0x2a4>)
 801cea6:	ab1f      	add	r3, sp, #124	; 0x7c
 801cea8:	a91d      	add	r1, sp, #116	; 0x74
 801ceaa:	4620      	mov	r0, r4
 801ceac:	f002 fa28 	bl	801f300 <__gethex>
 801ceb0:	f010 0707 	ands.w	r7, r0, #7
 801ceb4:	4605      	mov	r5, r0
 801ceb6:	d005      	beq.n	801cec4 <_strtod_l+0x84>
 801ceb8:	2f06      	cmp	r7, #6
 801ceba:	d12a      	bne.n	801cf12 <_strtod_l+0xd2>
 801cebc:	3601      	adds	r6, #1
 801cebe:	2300      	movs	r3, #0
 801cec0:	961d      	str	r6, [sp, #116]	; 0x74
 801cec2:	930e      	str	r3, [sp, #56]	; 0x38
 801cec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	f040 8596 	bne.w	801d9f8 <_strtod_l+0xbb8>
 801cecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cece:	b1db      	cbz	r3, 801cf08 <_strtod_l+0xc8>
 801ced0:	4652      	mov	r2, sl
 801ced2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ced6:	ec43 2b10 	vmov	d0, r2, r3
 801ceda:	b023      	add	sp, #140	; 0x8c
 801cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cee0:	2a20      	cmp	r2, #32
 801cee2:	d1ce      	bne.n	801ce82 <_strtod_l+0x42>
 801cee4:	3301      	adds	r3, #1
 801cee6:	931d      	str	r3, [sp, #116]	; 0x74
 801cee8:	e7c0      	b.n	801ce6c <_strtod_l+0x2c>
 801ceea:	2a2d      	cmp	r2, #45	; 0x2d
 801ceec:	d1c9      	bne.n	801ce82 <_strtod_l+0x42>
 801ceee:	2201      	movs	r2, #1
 801cef0:	920e      	str	r2, [sp, #56]	; 0x38
 801cef2:	1c5a      	adds	r2, r3, #1
 801cef4:	921d      	str	r2, [sp, #116]	; 0x74
 801cef6:	785b      	ldrb	r3, [r3, #1]
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d1c4      	bne.n	801ce86 <_strtod_l+0x46>
 801cefc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cefe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	f040 8576 	bne.w	801d9f4 <_strtod_l+0xbb4>
 801cf08:	4652      	mov	r2, sl
 801cf0a:	465b      	mov	r3, fp
 801cf0c:	e7e3      	b.n	801ced6 <_strtod_l+0x96>
 801cf0e:	2200      	movs	r2, #0
 801cf10:	e7ee      	b.n	801cef0 <_strtod_l+0xb0>
 801cf12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801cf14:	b13a      	cbz	r2, 801cf26 <_strtod_l+0xe6>
 801cf16:	2135      	movs	r1, #53	; 0x35
 801cf18:	a820      	add	r0, sp, #128	; 0x80
 801cf1a:	f003 fafe 	bl	802051a <__copybits>
 801cf1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801cf20:	4620      	mov	r0, r4
 801cf22:	f002 fec3 	bl	801fcac <_Bfree>
 801cf26:	3f01      	subs	r7, #1
 801cf28:	2f05      	cmp	r7, #5
 801cf2a:	d807      	bhi.n	801cf3c <_strtod_l+0xfc>
 801cf2c:	e8df f007 	tbb	[pc, r7]
 801cf30:	1d180b0e 	.word	0x1d180b0e
 801cf34:	030e      	.short	0x030e
 801cf36:	f04f 0b00 	mov.w	fp, #0
 801cf3a:	46da      	mov	sl, fp
 801cf3c:	0728      	lsls	r0, r5, #28
 801cf3e:	d5c1      	bpl.n	801cec4 <_strtod_l+0x84>
 801cf40:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801cf44:	e7be      	b.n	801cec4 <_strtod_l+0x84>
 801cf46:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801cf4a:	e7f7      	b.n	801cf3c <_strtod_l+0xfc>
 801cf4c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801cf50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801cf52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801cf56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cf5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801cf5e:	e7ed      	b.n	801cf3c <_strtod_l+0xfc>
 801cf60:	f8df b184 	ldr.w	fp, [pc, #388]	; 801d0e8 <_strtod_l+0x2a8>
 801cf64:	f04f 0a00 	mov.w	sl, #0
 801cf68:	e7e8      	b.n	801cf3c <_strtod_l+0xfc>
 801cf6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801cf6e:	f04f 3aff 	mov.w	sl, #4294967295
 801cf72:	e7e3      	b.n	801cf3c <_strtod_l+0xfc>
 801cf74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf76:	1c5a      	adds	r2, r3, #1
 801cf78:	921d      	str	r2, [sp, #116]	; 0x74
 801cf7a:	785b      	ldrb	r3, [r3, #1]
 801cf7c:	2b30      	cmp	r3, #48	; 0x30
 801cf7e:	d0f9      	beq.n	801cf74 <_strtod_l+0x134>
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d09f      	beq.n	801cec4 <_strtod_l+0x84>
 801cf84:	2301      	movs	r3, #1
 801cf86:	f04f 0900 	mov.w	r9, #0
 801cf8a:	9304      	str	r3, [sp, #16]
 801cf8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf8e:	930a      	str	r3, [sp, #40]	; 0x28
 801cf90:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801cf94:	464f      	mov	r7, r9
 801cf96:	220a      	movs	r2, #10
 801cf98:	981d      	ldr	r0, [sp, #116]	; 0x74
 801cf9a:	7806      	ldrb	r6, [r0, #0]
 801cf9c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801cfa0:	b2d9      	uxtb	r1, r3
 801cfa2:	2909      	cmp	r1, #9
 801cfa4:	d92a      	bls.n	801cffc <_strtod_l+0x1bc>
 801cfa6:	9907      	ldr	r1, [sp, #28]
 801cfa8:	462a      	mov	r2, r5
 801cfaa:	f7ff ff1a 	bl	801cde2 <strncmp>
 801cfae:	b398      	cbz	r0, 801d018 <_strtod_l+0x1d8>
 801cfb0:	2000      	movs	r0, #0
 801cfb2:	4633      	mov	r3, r6
 801cfb4:	463d      	mov	r5, r7
 801cfb6:	9007      	str	r0, [sp, #28]
 801cfb8:	4602      	mov	r2, r0
 801cfba:	2b65      	cmp	r3, #101	; 0x65
 801cfbc:	d001      	beq.n	801cfc2 <_strtod_l+0x182>
 801cfbe:	2b45      	cmp	r3, #69	; 0x45
 801cfc0:	d118      	bne.n	801cff4 <_strtod_l+0x1b4>
 801cfc2:	b91d      	cbnz	r5, 801cfcc <_strtod_l+0x18c>
 801cfc4:	9b04      	ldr	r3, [sp, #16]
 801cfc6:	4303      	orrs	r3, r0
 801cfc8:	d098      	beq.n	801cefc <_strtod_l+0xbc>
 801cfca:	2500      	movs	r5, #0
 801cfcc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801cfd0:	f108 0301 	add.w	r3, r8, #1
 801cfd4:	931d      	str	r3, [sp, #116]	; 0x74
 801cfd6:	f898 3001 	ldrb.w	r3, [r8, #1]
 801cfda:	2b2b      	cmp	r3, #43	; 0x2b
 801cfdc:	d075      	beq.n	801d0ca <_strtod_l+0x28a>
 801cfde:	2b2d      	cmp	r3, #45	; 0x2d
 801cfe0:	d07b      	beq.n	801d0da <_strtod_l+0x29a>
 801cfe2:	f04f 0c00 	mov.w	ip, #0
 801cfe6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801cfea:	2909      	cmp	r1, #9
 801cfec:	f240 8082 	bls.w	801d0f4 <_strtod_l+0x2b4>
 801cff0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801cff4:	2600      	movs	r6, #0
 801cff6:	e09d      	b.n	801d134 <_strtod_l+0x2f4>
 801cff8:	2300      	movs	r3, #0
 801cffa:	e7c4      	b.n	801cf86 <_strtod_l+0x146>
 801cffc:	2f08      	cmp	r7, #8
 801cffe:	bfd8      	it	le
 801d000:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801d002:	f100 0001 	add.w	r0, r0, #1
 801d006:	bfda      	itte	le
 801d008:	fb02 3301 	mlale	r3, r2, r1, r3
 801d00c:	9309      	strle	r3, [sp, #36]	; 0x24
 801d00e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801d012:	3701      	adds	r7, #1
 801d014:	901d      	str	r0, [sp, #116]	; 0x74
 801d016:	e7bf      	b.n	801cf98 <_strtod_l+0x158>
 801d018:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d01a:	195a      	adds	r2, r3, r5
 801d01c:	921d      	str	r2, [sp, #116]	; 0x74
 801d01e:	5d5b      	ldrb	r3, [r3, r5]
 801d020:	2f00      	cmp	r7, #0
 801d022:	d037      	beq.n	801d094 <_strtod_l+0x254>
 801d024:	9007      	str	r0, [sp, #28]
 801d026:	463d      	mov	r5, r7
 801d028:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801d02c:	2a09      	cmp	r2, #9
 801d02e:	d912      	bls.n	801d056 <_strtod_l+0x216>
 801d030:	2201      	movs	r2, #1
 801d032:	e7c2      	b.n	801cfba <_strtod_l+0x17a>
 801d034:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d036:	1c5a      	adds	r2, r3, #1
 801d038:	921d      	str	r2, [sp, #116]	; 0x74
 801d03a:	785b      	ldrb	r3, [r3, #1]
 801d03c:	3001      	adds	r0, #1
 801d03e:	2b30      	cmp	r3, #48	; 0x30
 801d040:	d0f8      	beq.n	801d034 <_strtod_l+0x1f4>
 801d042:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801d046:	2a08      	cmp	r2, #8
 801d048:	f200 84db 	bhi.w	801da02 <_strtod_l+0xbc2>
 801d04c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801d04e:	9007      	str	r0, [sp, #28]
 801d050:	2000      	movs	r0, #0
 801d052:	920a      	str	r2, [sp, #40]	; 0x28
 801d054:	4605      	mov	r5, r0
 801d056:	3b30      	subs	r3, #48	; 0x30
 801d058:	f100 0201 	add.w	r2, r0, #1
 801d05c:	d014      	beq.n	801d088 <_strtod_l+0x248>
 801d05e:	9907      	ldr	r1, [sp, #28]
 801d060:	4411      	add	r1, r2
 801d062:	9107      	str	r1, [sp, #28]
 801d064:	462a      	mov	r2, r5
 801d066:	eb00 0e05 	add.w	lr, r0, r5
 801d06a:	210a      	movs	r1, #10
 801d06c:	4572      	cmp	r2, lr
 801d06e:	d113      	bne.n	801d098 <_strtod_l+0x258>
 801d070:	182a      	adds	r2, r5, r0
 801d072:	2a08      	cmp	r2, #8
 801d074:	f105 0501 	add.w	r5, r5, #1
 801d078:	4405      	add	r5, r0
 801d07a:	dc1c      	bgt.n	801d0b6 <_strtod_l+0x276>
 801d07c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d07e:	220a      	movs	r2, #10
 801d080:	fb02 3301 	mla	r3, r2, r1, r3
 801d084:	9309      	str	r3, [sp, #36]	; 0x24
 801d086:	2200      	movs	r2, #0
 801d088:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d08a:	1c59      	adds	r1, r3, #1
 801d08c:	911d      	str	r1, [sp, #116]	; 0x74
 801d08e:	785b      	ldrb	r3, [r3, #1]
 801d090:	4610      	mov	r0, r2
 801d092:	e7c9      	b.n	801d028 <_strtod_l+0x1e8>
 801d094:	4638      	mov	r0, r7
 801d096:	e7d2      	b.n	801d03e <_strtod_l+0x1fe>
 801d098:	2a08      	cmp	r2, #8
 801d09a:	dc04      	bgt.n	801d0a6 <_strtod_l+0x266>
 801d09c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801d09e:	434e      	muls	r6, r1
 801d0a0:	9609      	str	r6, [sp, #36]	; 0x24
 801d0a2:	3201      	adds	r2, #1
 801d0a4:	e7e2      	b.n	801d06c <_strtod_l+0x22c>
 801d0a6:	f102 0c01 	add.w	ip, r2, #1
 801d0aa:	f1bc 0f10 	cmp.w	ip, #16
 801d0ae:	bfd8      	it	le
 801d0b0:	fb01 f909 	mulle.w	r9, r1, r9
 801d0b4:	e7f5      	b.n	801d0a2 <_strtod_l+0x262>
 801d0b6:	2d10      	cmp	r5, #16
 801d0b8:	bfdc      	itt	le
 801d0ba:	220a      	movle	r2, #10
 801d0bc:	fb02 3909 	mlale	r9, r2, r9, r3
 801d0c0:	e7e1      	b.n	801d086 <_strtod_l+0x246>
 801d0c2:	2300      	movs	r3, #0
 801d0c4:	9307      	str	r3, [sp, #28]
 801d0c6:	2201      	movs	r2, #1
 801d0c8:	e77c      	b.n	801cfc4 <_strtod_l+0x184>
 801d0ca:	f04f 0c00 	mov.w	ip, #0
 801d0ce:	f108 0302 	add.w	r3, r8, #2
 801d0d2:	931d      	str	r3, [sp, #116]	; 0x74
 801d0d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 801d0d8:	e785      	b.n	801cfe6 <_strtod_l+0x1a6>
 801d0da:	f04f 0c01 	mov.w	ip, #1
 801d0de:	e7f6      	b.n	801d0ce <_strtod_l+0x28e>
 801d0e0:	08023650 	.word	0x08023650
 801d0e4:	080234a0 	.word	0x080234a0
 801d0e8:	7ff00000 	.word	0x7ff00000
 801d0ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d0ee:	1c59      	adds	r1, r3, #1
 801d0f0:	911d      	str	r1, [sp, #116]	; 0x74
 801d0f2:	785b      	ldrb	r3, [r3, #1]
 801d0f4:	2b30      	cmp	r3, #48	; 0x30
 801d0f6:	d0f9      	beq.n	801d0ec <_strtod_l+0x2ac>
 801d0f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801d0fc:	2908      	cmp	r1, #8
 801d0fe:	f63f af79 	bhi.w	801cff4 <_strtod_l+0x1b4>
 801d102:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801d106:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d108:	9308      	str	r3, [sp, #32]
 801d10a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d10c:	1c59      	adds	r1, r3, #1
 801d10e:	911d      	str	r1, [sp, #116]	; 0x74
 801d110:	785b      	ldrb	r3, [r3, #1]
 801d112:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801d116:	2e09      	cmp	r6, #9
 801d118:	d937      	bls.n	801d18a <_strtod_l+0x34a>
 801d11a:	9e08      	ldr	r6, [sp, #32]
 801d11c:	1b89      	subs	r1, r1, r6
 801d11e:	2908      	cmp	r1, #8
 801d120:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801d124:	dc02      	bgt.n	801d12c <_strtod_l+0x2ec>
 801d126:	4576      	cmp	r6, lr
 801d128:	bfa8      	it	ge
 801d12a:	4676      	movge	r6, lr
 801d12c:	f1bc 0f00 	cmp.w	ip, #0
 801d130:	d000      	beq.n	801d134 <_strtod_l+0x2f4>
 801d132:	4276      	negs	r6, r6
 801d134:	2d00      	cmp	r5, #0
 801d136:	d14f      	bne.n	801d1d8 <_strtod_l+0x398>
 801d138:	9904      	ldr	r1, [sp, #16]
 801d13a:	4301      	orrs	r1, r0
 801d13c:	f47f aec2 	bne.w	801cec4 <_strtod_l+0x84>
 801d140:	2a00      	cmp	r2, #0
 801d142:	f47f aedb 	bne.w	801cefc <_strtod_l+0xbc>
 801d146:	2b69      	cmp	r3, #105	; 0x69
 801d148:	d027      	beq.n	801d19a <_strtod_l+0x35a>
 801d14a:	dc24      	bgt.n	801d196 <_strtod_l+0x356>
 801d14c:	2b49      	cmp	r3, #73	; 0x49
 801d14e:	d024      	beq.n	801d19a <_strtod_l+0x35a>
 801d150:	2b4e      	cmp	r3, #78	; 0x4e
 801d152:	f47f aed3 	bne.w	801cefc <_strtod_l+0xbc>
 801d156:	499e      	ldr	r1, [pc, #632]	; (801d3d0 <_strtod_l+0x590>)
 801d158:	a81d      	add	r0, sp, #116	; 0x74
 801d15a:	f002 fb29 	bl	801f7b0 <__match>
 801d15e:	2800      	cmp	r0, #0
 801d160:	f43f aecc 	beq.w	801cefc <_strtod_l+0xbc>
 801d164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d166:	781b      	ldrb	r3, [r3, #0]
 801d168:	2b28      	cmp	r3, #40	; 0x28
 801d16a:	d12d      	bne.n	801d1c8 <_strtod_l+0x388>
 801d16c:	4999      	ldr	r1, [pc, #612]	; (801d3d4 <_strtod_l+0x594>)
 801d16e:	aa20      	add	r2, sp, #128	; 0x80
 801d170:	a81d      	add	r0, sp, #116	; 0x74
 801d172:	f002 fb31 	bl	801f7d8 <__hexnan>
 801d176:	2805      	cmp	r0, #5
 801d178:	d126      	bne.n	801d1c8 <_strtod_l+0x388>
 801d17a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d17c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801d180:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801d184:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801d188:	e69c      	b.n	801cec4 <_strtod_l+0x84>
 801d18a:	210a      	movs	r1, #10
 801d18c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801d190:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801d194:	e7b9      	b.n	801d10a <_strtod_l+0x2ca>
 801d196:	2b6e      	cmp	r3, #110	; 0x6e
 801d198:	e7db      	b.n	801d152 <_strtod_l+0x312>
 801d19a:	498f      	ldr	r1, [pc, #572]	; (801d3d8 <_strtod_l+0x598>)
 801d19c:	a81d      	add	r0, sp, #116	; 0x74
 801d19e:	f002 fb07 	bl	801f7b0 <__match>
 801d1a2:	2800      	cmp	r0, #0
 801d1a4:	f43f aeaa 	beq.w	801cefc <_strtod_l+0xbc>
 801d1a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d1aa:	498c      	ldr	r1, [pc, #560]	; (801d3dc <_strtod_l+0x59c>)
 801d1ac:	3b01      	subs	r3, #1
 801d1ae:	a81d      	add	r0, sp, #116	; 0x74
 801d1b0:	931d      	str	r3, [sp, #116]	; 0x74
 801d1b2:	f002 fafd 	bl	801f7b0 <__match>
 801d1b6:	b910      	cbnz	r0, 801d1be <_strtod_l+0x37e>
 801d1b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d1ba:	3301      	adds	r3, #1
 801d1bc:	931d      	str	r3, [sp, #116]	; 0x74
 801d1be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801d3ec <_strtod_l+0x5ac>
 801d1c2:	f04f 0a00 	mov.w	sl, #0
 801d1c6:	e67d      	b.n	801cec4 <_strtod_l+0x84>
 801d1c8:	4885      	ldr	r0, [pc, #532]	; (801d3e0 <_strtod_l+0x5a0>)
 801d1ca:	f7fd fed9 	bl	801af80 <nan>
 801d1ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 801d1d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801d1d6:	e675      	b.n	801cec4 <_strtod_l+0x84>
 801d1d8:	9b07      	ldr	r3, [sp, #28]
 801d1da:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d1dc:	1af3      	subs	r3, r6, r3
 801d1de:	2f00      	cmp	r7, #0
 801d1e0:	bf08      	it	eq
 801d1e2:	462f      	moveq	r7, r5
 801d1e4:	2d10      	cmp	r5, #16
 801d1e6:	9308      	str	r3, [sp, #32]
 801d1e8:	46a8      	mov	r8, r5
 801d1ea:	bfa8      	it	ge
 801d1ec:	f04f 0810 	movge.w	r8, #16
 801d1f0:	f7e3 f9a8 	bl	8000544 <__aeabi_ui2d>
 801d1f4:	2d09      	cmp	r5, #9
 801d1f6:	4682      	mov	sl, r0
 801d1f8:	468b      	mov	fp, r1
 801d1fa:	dd13      	ble.n	801d224 <_strtod_l+0x3e4>
 801d1fc:	4b79      	ldr	r3, [pc, #484]	; (801d3e4 <_strtod_l+0x5a4>)
 801d1fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801d202:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801d206:	f7e3 fa17 	bl	8000638 <__aeabi_dmul>
 801d20a:	4682      	mov	sl, r0
 801d20c:	4648      	mov	r0, r9
 801d20e:	468b      	mov	fp, r1
 801d210:	f7e3 f998 	bl	8000544 <__aeabi_ui2d>
 801d214:	4602      	mov	r2, r0
 801d216:	460b      	mov	r3, r1
 801d218:	4650      	mov	r0, sl
 801d21a:	4659      	mov	r1, fp
 801d21c:	f7e3 f856 	bl	80002cc <__adddf3>
 801d220:	4682      	mov	sl, r0
 801d222:	468b      	mov	fp, r1
 801d224:	2d0f      	cmp	r5, #15
 801d226:	dc38      	bgt.n	801d29a <_strtod_l+0x45a>
 801d228:	9b08      	ldr	r3, [sp, #32]
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	f43f ae4a 	beq.w	801cec4 <_strtod_l+0x84>
 801d230:	dd24      	ble.n	801d27c <_strtod_l+0x43c>
 801d232:	2b16      	cmp	r3, #22
 801d234:	dc0b      	bgt.n	801d24e <_strtod_l+0x40e>
 801d236:	4d6b      	ldr	r5, [pc, #428]	; (801d3e4 <_strtod_l+0x5a4>)
 801d238:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801d23c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801d240:	4652      	mov	r2, sl
 801d242:	465b      	mov	r3, fp
 801d244:	f7e3 f9f8 	bl	8000638 <__aeabi_dmul>
 801d248:	4682      	mov	sl, r0
 801d24a:	468b      	mov	fp, r1
 801d24c:	e63a      	b.n	801cec4 <_strtod_l+0x84>
 801d24e:	9a08      	ldr	r2, [sp, #32]
 801d250:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801d254:	4293      	cmp	r3, r2
 801d256:	db20      	blt.n	801d29a <_strtod_l+0x45a>
 801d258:	4c62      	ldr	r4, [pc, #392]	; (801d3e4 <_strtod_l+0x5a4>)
 801d25a:	f1c5 050f 	rsb	r5, r5, #15
 801d25e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801d262:	4652      	mov	r2, sl
 801d264:	465b      	mov	r3, fp
 801d266:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d26a:	f7e3 f9e5 	bl	8000638 <__aeabi_dmul>
 801d26e:	9b08      	ldr	r3, [sp, #32]
 801d270:	1b5d      	subs	r5, r3, r5
 801d272:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801d276:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d27a:	e7e3      	b.n	801d244 <_strtod_l+0x404>
 801d27c:	9b08      	ldr	r3, [sp, #32]
 801d27e:	3316      	adds	r3, #22
 801d280:	db0b      	blt.n	801d29a <_strtod_l+0x45a>
 801d282:	9b07      	ldr	r3, [sp, #28]
 801d284:	4a57      	ldr	r2, [pc, #348]	; (801d3e4 <_strtod_l+0x5a4>)
 801d286:	1b9e      	subs	r6, r3, r6
 801d288:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801d28c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d290:	4650      	mov	r0, sl
 801d292:	4659      	mov	r1, fp
 801d294:	f7e3 fafa 	bl	800088c <__aeabi_ddiv>
 801d298:	e7d6      	b.n	801d248 <_strtod_l+0x408>
 801d29a:	9b08      	ldr	r3, [sp, #32]
 801d29c:	eba5 0808 	sub.w	r8, r5, r8
 801d2a0:	4498      	add	r8, r3
 801d2a2:	f1b8 0f00 	cmp.w	r8, #0
 801d2a6:	dd71      	ble.n	801d38c <_strtod_l+0x54c>
 801d2a8:	f018 030f 	ands.w	r3, r8, #15
 801d2ac:	d00a      	beq.n	801d2c4 <_strtod_l+0x484>
 801d2ae:	494d      	ldr	r1, [pc, #308]	; (801d3e4 <_strtod_l+0x5a4>)
 801d2b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d2b4:	4652      	mov	r2, sl
 801d2b6:	465b      	mov	r3, fp
 801d2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d2bc:	f7e3 f9bc 	bl	8000638 <__aeabi_dmul>
 801d2c0:	4682      	mov	sl, r0
 801d2c2:	468b      	mov	fp, r1
 801d2c4:	f038 080f 	bics.w	r8, r8, #15
 801d2c8:	d04d      	beq.n	801d366 <_strtod_l+0x526>
 801d2ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801d2ce:	dd22      	ble.n	801d316 <_strtod_l+0x4d6>
 801d2d0:	2500      	movs	r5, #0
 801d2d2:	462e      	mov	r6, r5
 801d2d4:	9509      	str	r5, [sp, #36]	; 0x24
 801d2d6:	9507      	str	r5, [sp, #28]
 801d2d8:	2322      	movs	r3, #34	; 0x22
 801d2da:	f8df b110 	ldr.w	fp, [pc, #272]	; 801d3ec <_strtod_l+0x5ac>
 801d2de:	6023      	str	r3, [r4, #0]
 801d2e0:	f04f 0a00 	mov.w	sl, #0
 801d2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	f43f adec 	beq.w	801cec4 <_strtod_l+0x84>
 801d2ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d2ee:	4620      	mov	r0, r4
 801d2f0:	f002 fcdc 	bl	801fcac <_Bfree>
 801d2f4:	9907      	ldr	r1, [sp, #28]
 801d2f6:	4620      	mov	r0, r4
 801d2f8:	f002 fcd8 	bl	801fcac <_Bfree>
 801d2fc:	4631      	mov	r1, r6
 801d2fe:	4620      	mov	r0, r4
 801d300:	f002 fcd4 	bl	801fcac <_Bfree>
 801d304:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d306:	4620      	mov	r0, r4
 801d308:	f002 fcd0 	bl	801fcac <_Bfree>
 801d30c:	4629      	mov	r1, r5
 801d30e:	4620      	mov	r0, r4
 801d310:	f002 fccc 	bl	801fcac <_Bfree>
 801d314:	e5d6      	b.n	801cec4 <_strtod_l+0x84>
 801d316:	2300      	movs	r3, #0
 801d318:	ea4f 1828 	mov.w	r8, r8, asr #4
 801d31c:	4650      	mov	r0, sl
 801d31e:	4659      	mov	r1, fp
 801d320:	4699      	mov	r9, r3
 801d322:	f1b8 0f01 	cmp.w	r8, #1
 801d326:	dc21      	bgt.n	801d36c <_strtod_l+0x52c>
 801d328:	b10b      	cbz	r3, 801d32e <_strtod_l+0x4ee>
 801d32a:	4682      	mov	sl, r0
 801d32c:	468b      	mov	fp, r1
 801d32e:	4b2e      	ldr	r3, [pc, #184]	; (801d3e8 <_strtod_l+0x5a8>)
 801d330:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801d334:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801d338:	4652      	mov	r2, sl
 801d33a:	465b      	mov	r3, fp
 801d33c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801d340:	f7e3 f97a 	bl	8000638 <__aeabi_dmul>
 801d344:	4b29      	ldr	r3, [pc, #164]	; (801d3ec <_strtod_l+0x5ac>)
 801d346:	460a      	mov	r2, r1
 801d348:	400b      	ands	r3, r1
 801d34a:	4929      	ldr	r1, [pc, #164]	; (801d3f0 <_strtod_l+0x5b0>)
 801d34c:	428b      	cmp	r3, r1
 801d34e:	4682      	mov	sl, r0
 801d350:	d8be      	bhi.n	801d2d0 <_strtod_l+0x490>
 801d352:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801d356:	428b      	cmp	r3, r1
 801d358:	bf86      	itte	hi
 801d35a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801d3f4 <_strtod_l+0x5b4>
 801d35e:	f04f 3aff 	movhi.w	sl, #4294967295
 801d362:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801d366:	2300      	movs	r3, #0
 801d368:	9304      	str	r3, [sp, #16]
 801d36a:	e081      	b.n	801d470 <_strtod_l+0x630>
 801d36c:	f018 0f01 	tst.w	r8, #1
 801d370:	d007      	beq.n	801d382 <_strtod_l+0x542>
 801d372:	4b1d      	ldr	r3, [pc, #116]	; (801d3e8 <_strtod_l+0x5a8>)
 801d374:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801d378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d37c:	f7e3 f95c 	bl	8000638 <__aeabi_dmul>
 801d380:	2301      	movs	r3, #1
 801d382:	f109 0901 	add.w	r9, r9, #1
 801d386:	ea4f 0868 	mov.w	r8, r8, asr #1
 801d38a:	e7ca      	b.n	801d322 <_strtod_l+0x4e2>
 801d38c:	d0eb      	beq.n	801d366 <_strtod_l+0x526>
 801d38e:	f1c8 0800 	rsb	r8, r8, #0
 801d392:	f018 020f 	ands.w	r2, r8, #15
 801d396:	d00a      	beq.n	801d3ae <_strtod_l+0x56e>
 801d398:	4b12      	ldr	r3, [pc, #72]	; (801d3e4 <_strtod_l+0x5a4>)
 801d39a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d39e:	4650      	mov	r0, sl
 801d3a0:	4659      	mov	r1, fp
 801d3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3a6:	f7e3 fa71 	bl	800088c <__aeabi_ddiv>
 801d3aa:	4682      	mov	sl, r0
 801d3ac:	468b      	mov	fp, r1
 801d3ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 801d3b2:	d0d8      	beq.n	801d366 <_strtod_l+0x526>
 801d3b4:	f1b8 0f1f 	cmp.w	r8, #31
 801d3b8:	dd1e      	ble.n	801d3f8 <_strtod_l+0x5b8>
 801d3ba:	2500      	movs	r5, #0
 801d3bc:	462e      	mov	r6, r5
 801d3be:	9509      	str	r5, [sp, #36]	; 0x24
 801d3c0:	9507      	str	r5, [sp, #28]
 801d3c2:	2322      	movs	r3, #34	; 0x22
 801d3c4:	f04f 0a00 	mov.w	sl, #0
 801d3c8:	f04f 0b00 	mov.w	fp, #0
 801d3cc:	6023      	str	r3, [r4, #0]
 801d3ce:	e789      	b.n	801d2e4 <_strtod_l+0x4a4>
 801d3d0:	08023475 	.word	0x08023475
 801d3d4:	080234b4 	.word	0x080234b4
 801d3d8:	0802346d 	.word	0x0802346d
 801d3dc:	0802356b 	.word	0x0802356b
 801d3e0:	08023567 	.word	0x08023567
 801d3e4:	080236f0 	.word	0x080236f0
 801d3e8:	080236c8 	.word	0x080236c8
 801d3ec:	7ff00000 	.word	0x7ff00000
 801d3f0:	7ca00000 	.word	0x7ca00000
 801d3f4:	7fefffff 	.word	0x7fefffff
 801d3f8:	f018 0310 	ands.w	r3, r8, #16
 801d3fc:	bf18      	it	ne
 801d3fe:	236a      	movne	r3, #106	; 0x6a
 801d400:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801d7b8 <_strtod_l+0x978>
 801d404:	9304      	str	r3, [sp, #16]
 801d406:	4650      	mov	r0, sl
 801d408:	4659      	mov	r1, fp
 801d40a:	2300      	movs	r3, #0
 801d40c:	f018 0f01 	tst.w	r8, #1
 801d410:	d004      	beq.n	801d41c <_strtod_l+0x5dc>
 801d412:	e9d9 2300 	ldrd	r2, r3, [r9]
 801d416:	f7e3 f90f 	bl	8000638 <__aeabi_dmul>
 801d41a:	2301      	movs	r3, #1
 801d41c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801d420:	f109 0908 	add.w	r9, r9, #8
 801d424:	d1f2      	bne.n	801d40c <_strtod_l+0x5cc>
 801d426:	b10b      	cbz	r3, 801d42c <_strtod_l+0x5ec>
 801d428:	4682      	mov	sl, r0
 801d42a:	468b      	mov	fp, r1
 801d42c:	9b04      	ldr	r3, [sp, #16]
 801d42e:	b1bb      	cbz	r3, 801d460 <_strtod_l+0x620>
 801d430:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801d434:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d438:	2b00      	cmp	r3, #0
 801d43a:	4659      	mov	r1, fp
 801d43c:	dd10      	ble.n	801d460 <_strtod_l+0x620>
 801d43e:	2b1f      	cmp	r3, #31
 801d440:	f340 8128 	ble.w	801d694 <_strtod_l+0x854>
 801d444:	2b34      	cmp	r3, #52	; 0x34
 801d446:	bfde      	ittt	le
 801d448:	3b20      	suble	r3, #32
 801d44a:	f04f 32ff 	movle.w	r2, #4294967295
 801d44e:	fa02 f303 	lslle.w	r3, r2, r3
 801d452:	f04f 0a00 	mov.w	sl, #0
 801d456:	bfcc      	ite	gt
 801d458:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801d45c:	ea03 0b01 	andle.w	fp, r3, r1
 801d460:	2200      	movs	r2, #0
 801d462:	2300      	movs	r3, #0
 801d464:	4650      	mov	r0, sl
 801d466:	4659      	mov	r1, fp
 801d468:	f7e3 fb4e 	bl	8000b08 <__aeabi_dcmpeq>
 801d46c:	2800      	cmp	r0, #0
 801d46e:	d1a4      	bne.n	801d3ba <_strtod_l+0x57a>
 801d470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d472:	9300      	str	r3, [sp, #0]
 801d474:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d476:	462b      	mov	r3, r5
 801d478:	463a      	mov	r2, r7
 801d47a:	4620      	mov	r0, r4
 801d47c:	f002 fc82 	bl	801fd84 <__s2b>
 801d480:	9009      	str	r0, [sp, #36]	; 0x24
 801d482:	2800      	cmp	r0, #0
 801d484:	f43f af24 	beq.w	801d2d0 <_strtod_l+0x490>
 801d488:	9b07      	ldr	r3, [sp, #28]
 801d48a:	1b9e      	subs	r6, r3, r6
 801d48c:	9b08      	ldr	r3, [sp, #32]
 801d48e:	2b00      	cmp	r3, #0
 801d490:	bfb4      	ite	lt
 801d492:	4633      	movlt	r3, r6
 801d494:	2300      	movge	r3, #0
 801d496:	9310      	str	r3, [sp, #64]	; 0x40
 801d498:	9b08      	ldr	r3, [sp, #32]
 801d49a:	2500      	movs	r5, #0
 801d49c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4a0:	9318      	str	r3, [sp, #96]	; 0x60
 801d4a2:	462e      	mov	r6, r5
 801d4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4a6:	4620      	mov	r0, r4
 801d4a8:	6859      	ldr	r1, [r3, #4]
 801d4aa:	f002 fbbf 	bl	801fc2c <_Balloc>
 801d4ae:	9007      	str	r0, [sp, #28]
 801d4b0:	2800      	cmp	r0, #0
 801d4b2:	f43f af11 	beq.w	801d2d8 <_strtod_l+0x498>
 801d4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4b8:	691a      	ldr	r2, [r3, #16]
 801d4ba:	3202      	adds	r2, #2
 801d4bc:	f103 010c 	add.w	r1, r3, #12
 801d4c0:	0092      	lsls	r2, r2, #2
 801d4c2:	300c      	adds	r0, #12
 801d4c4:	f7fe f8d0 	bl	801b668 <memcpy>
 801d4c8:	ec4b ab10 	vmov	d0, sl, fp
 801d4cc:	aa20      	add	r2, sp, #128	; 0x80
 801d4ce:	a91f      	add	r1, sp, #124	; 0x7c
 801d4d0:	4620      	mov	r0, r4
 801d4d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801d4d6:	f002 ff91 	bl	80203fc <__d2b>
 801d4da:	901e      	str	r0, [sp, #120]	; 0x78
 801d4dc:	2800      	cmp	r0, #0
 801d4de:	f43f aefb 	beq.w	801d2d8 <_strtod_l+0x498>
 801d4e2:	2101      	movs	r1, #1
 801d4e4:	4620      	mov	r0, r4
 801d4e6:	f002 fce7 	bl	801feb8 <__i2b>
 801d4ea:	4606      	mov	r6, r0
 801d4ec:	2800      	cmp	r0, #0
 801d4ee:	f43f aef3 	beq.w	801d2d8 <_strtod_l+0x498>
 801d4f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d4f4:	9904      	ldr	r1, [sp, #16]
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	bfab      	itete	ge
 801d4fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801d4fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801d4fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801d500:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801d504:	bfac      	ite	ge
 801d506:	eb03 0902 	addge.w	r9, r3, r2
 801d50a:	1ad7      	sublt	r7, r2, r3
 801d50c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d50e:	eba3 0801 	sub.w	r8, r3, r1
 801d512:	4490      	add	r8, r2
 801d514:	4ba3      	ldr	r3, [pc, #652]	; (801d7a4 <_strtod_l+0x964>)
 801d516:	f108 38ff 	add.w	r8, r8, #4294967295
 801d51a:	4598      	cmp	r8, r3
 801d51c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d520:	f280 80cc 	bge.w	801d6bc <_strtod_l+0x87c>
 801d524:	eba3 0308 	sub.w	r3, r3, r8
 801d528:	2b1f      	cmp	r3, #31
 801d52a:	eba2 0203 	sub.w	r2, r2, r3
 801d52e:	f04f 0101 	mov.w	r1, #1
 801d532:	f300 80b6 	bgt.w	801d6a2 <_strtod_l+0x862>
 801d536:	fa01 f303 	lsl.w	r3, r1, r3
 801d53a:	9311      	str	r3, [sp, #68]	; 0x44
 801d53c:	2300      	movs	r3, #0
 801d53e:	930c      	str	r3, [sp, #48]	; 0x30
 801d540:	eb09 0802 	add.w	r8, r9, r2
 801d544:	9b04      	ldr	r3, [sp, #16]
 801d546:	45c1      	cmp	r9, r8
 801d548:	4417      	add	r7, r2
 801d54a:	441f      	add	r7, r3
 801d54c:	464b      	mov	r3, r9
 801d54e:	bfa8      	it	ge
 801d550:	4643      	movge	r3, r8
 801d552:	42bb      	cmp	r3, r7
 801d554:	bfa8      	it	ge
 801d556:	463b      	movge	r3, r7
 801d558:	2b00      	cmp	r3, #0
 801d55a:	bfc2      	ittt	gt
 801d55c:	eba8 0803 	subgt.w	r8, r8, r3
 801d560:	1aff      	subgt	r7, r7, r3
 801d562:	eba9 0903 	subgt.w	r9, r9, r3
 801d566:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d568:	2b00      	cmp	r3, #0
 801d56a:	dd17      	ble.n	801d59c <_strtod_l+0x75c>
 801d56c:	4631      	mov	r1, r6
 801d56e:	461a      	mov	r2, r3
 801d570:	4620      	mov	r0, r4
 801d572:	f002 fd5d 	bl	8020030 <__pow5mult>
 801d576:	4606      	mov	r6, r0
 801d578:	2800      	cmp	r0, #0
 801d57a:	f43f aead 	beq.w	801d2d8 <_strtod_l+0x498>
 801d57e:	4601      	mov	r1, r0
 801d580:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d582:	4620      	mov	r0, r4
 801d584:	f002 fcae 	bl	801fee4 <__multiply>
 801d588:	900f      	str	r0, [sp, #60]	; 0x3c
 801d58a:	2800      	cmp	r0, #0
 801d58c:	f43f aea4 	beq.w	801d2d8 <_strtod_l+0x498>
 801d590:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d592:	4620      	mov	r0, r4
 801d594:	f002 fb8a 	bl	801fcac <_Bfree>
 801d598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d59a:	931e      	str	r3, [sp, #120]	; 0x78
 801d59c:	f1b8 0f00 	cmp.w	r8, #0
 801d5a0:	f300 8091 	bgt.w	801d6c6 <_strtod_l+0x886>
 801d5a4:	9b08      	ldr	r3, [sp, #32]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	dd08      	ble.n	801d5bc <_strtod_l+0x77c>
 801d5aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d5ac:	9907      	ldr	r1, [sp, #28]
 801d5ae:	4620      	mov	r0, r4
 801d5b0:	f002 fd3e 	bl	8020030 <__pow5mult>
 801d5b4:	9007      	str	r0, [sp, #28]
 801d5b6:	2800      	cmp	r0, #0
 801d5b8:	f43f ae8e 	beq.w	801d2d8 <_strtod_l+0x498>
 801d5bc:	2f00      	cmp	r7, #0
 801d5be:	dd08      	ble.n	801d5d2 <_strtod_l+0x792>
 801d5c0:	9907      	ldr	r1, [sp, #28]
 801d5c2:	463a      	mov	r2, r7
 801d5c4:	4620      	mov	r0, r4
 801d5c6:	f002 fd8d 	bl	80200e4 <__lshift>
 801d5ca:	9007      	str	r0, [sp, #28]
 801d5cc:	2800      	cmp	r0, #0
 801d5ce:	f43f ae83 	beq.w	801d2d8 <_strtod_l+0x498>
 801d5d2:	f1b9 0f00 	cmp.w	r9, #0
 801d5d6:	dd08      	ble.n	801d5ea <_strtod_l+0x7aa>
 801d5d8:	4631      	mov	r1, r6
 801d5da:	464a      	mov	r2, r9
 801d5dc:	4620      	mov	r0, r4
 801d5de:	f002 fd81 	bl	80200e4 <__lshift>
 801d5e2:	4606      	mov	r6, r0
 801d5e4:	2800      	cmp	r0, #0
 801d5e6:	f43f ae77 	beq.w	801d2d8 <_strtod_l+0x498>
 801d5ea:	9a07      	ldr	r2, [sp, #28]
 801d5ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d5ee:	4620      	mov	r0, r4
 801d5f0:	f002 fe00 	bl	80201f4 <__mdiff>
 801d5f4:	4605      	mov	r5, r0
 801d5f6:	2800      	cmp	r0, #0
 801d5f8:	f43f ae6e 	beq.w	801d2d8 <_strtod_l+0x498>
 801d5fc:	68c3      	ldr	r3, [r0, #12]
 801d5fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801d600:	2300      	movs	r3, #0
 801d602:	60c3      	str	r3, [r0, #12]
 801d604:	4631      	mov	r1, r6
 801d606:	f002 fdd9 	bl	80201bc <__mcmp>
 801d60a:	2800      	cmp	r0, #0
 801d60c:	da65      	bge.n	801d6da <_strtod_l+0x89a>
 801d60e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d610:	ea53 030a 	orrs.w	r3, r3, sl
 801d614:	f040 8087 	bne.w	801d726 <_strtod_l+0x8e6>
 801d618:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	f040 8082 	bne.w	801d726 <_strtod_l+0x8e6>
 801d622:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d626:	0d1b      	lsrs	r3, r3, #20
 801d628:	051b      	lsls	r3, r3, #20
 801d62a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d62e:	d97a      	bls.n	801d726 <_strtod_l+0x8e6>
 801d630:	696b      	ldr	r3, [r5, #20]
 801d632:	b913      	cbnz	r3, 801d63a <_strtod_l+0x7fa>
 801d634:	692b      	ldr	r3, [r5, #16]
 801d636:	2b01      	cmp	r3, #1
 801d638:	dd75      	ble.n	801d726 <_strtod_l+0x8e6>
 801d63a:	4629      	mov	r1, r5
 801d63c:	2201      	movs	r2, #1
 801d63e:	4620      	mov	r0, r4
 801d640:	f002 fd50 	bl	80200e4 <__lshift>
 801d644:	4631      	mov	r1, r6
 801d646:	4605      	mov	r5, r0
 801d648:	f002 fdb8 	bl	80201bc <__mcmp>
 801d64c:	2800      	cmp	r0, #0
 801d64e:	dd6a      	ble.n	801d726 <_strtod_l+0x8e6>
 801d650:	9904      	ldr	r1, [sp, #16]
 801d652:	4a55      	ldr	r2, [pc, #340]	; (801d7a8 <_strtod_l+0x968>)
 801d654:	465b      	mov	r3, fp
 801d656:	2900      	cmp	r1, #0
 801d658:	f000 8085 	beq.w	801d766 <_strtod_l+0x926>
 801d65c:	ea02 010b 	and.w	r1, r2, fp
 801d660:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d664:	dc7f      	bgt.n	801d766 <_strtod_l+0x926>
 801d666:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801d66a:	f77f aeaa 	ble.w	801d3c2 <_strtod_l+0x582>
 801d66e:	4a4f      	ldr	r2, [pc, #316]	; (801d7ac <_strtod_l+0x96c>)
 801d670:	2300      	movs	r3, #0
 801d672:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801d676:	4650      	mov	r0, sl
 801d678:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801d67c:	4659      	mov	r1, fp
 801d67e:	f7e2 ffdb 	bl	8000638 <__aeabi_dmul>
 801d682:	460b      	mov	r3, r1
 801d684:	4303      	orrs	r3, r0
 801d686:	bf08      	it	eq
 801d688:	2322      	moveq	r3, #34	; 0x22
 801d68a:	4682      	mov	sl, r0
 801d68c:	468b      	mov	fp, r1
 801d68e:	bf08      	it	eq
 801d690:	6023      	streq	r3, [r4, #0]
 801d692:	e62b      	b.n	801d2ec <_strtod_l+0x4ac>
 801d694:	f04f 32ff 	mov.w	r2, #4294967295
 801d698:	fa02 f303 	lsl.w	r3, r2, r3
 801d69c:	ea03 0a0a 	and.w	sl, r3, sl
 801d6a0:	e6de      	b.n	801d460 <_strtod_l+0x620>
 801d6a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801d6a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801d6aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801d6ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801d6b2:	fa01 f308 	lsl.w	r3, r1, r8
 801d6b6:	930c      	str	r3, [sp, #48]	; 0x30
 801d6b8:	9111      	str	r1, [sp, #68]	; 0x44
 801d6ba:	e741      	b.n	801d540 <_strtod_l+0x700>
 801d6bc:	2300      	movs	r3, #0
 801d6be:	930c      	str	r3, [sp, #48]	; 0x30
 801d6c0:	2301      	movs	r3, #1
 801d6c2:	9311      	str	r3, [sp, #68]	; 0x44
 801d6c4:	e73c      	b.n	801d540 <_strtod_l+0x700>
 801d6c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d6c8:	4642      	mov	r2, r8
 801d6ca:	4620      	mov	r0, r4
 801d6cc:	f002 fd0a 	bl	80200e4 <__lshift>
 801d6d0:	901e      	str	r0, [sp, #120]	; 0x78
 801d6d2:	2800      	cmp	r0, #0
 801d6d4:	f47f af66 	bne.w	801d5a4 <_strtod_l+0x764>
 801d6d8:	e5fe      	b.n	801d2d8 <_strtod_l+0x498>
 801d6da:	465f      	mov	r7, fp
 801d6dc:	d16e      	bne.n	801d7bc <_strtod_l+0x97c>
 801d6de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d6e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d6e4:	b342      	cbz	r2, 801d738 <_strtod_l+0x8f8>
 801d6e6:	4a32      	ldr	r2, [pc, #200]	; (801d7b0 <_strtod_l+0x970>)
 801d6e8:	4293      	cmp	r3, r2
 801d6ea:	d128      	bne.n	801d73e <_strtod_l+0x8fe>
 801d6ec:	9b04      	ldr	r3, [sp, #16]
 801d6ee:	4650      	mov	r0, sl
 801d6f0:	b1eb      	cbz	r3, 801d72e <_strtod_l+0x8ee>
 801d6f2:	4a2d      	ldr	r2, [pc, #180]	; (801d7a8 <_strtod_l+0x968>)
 801d6f4:	403a      	ands	r2, r7
 801d6f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801d6fa:	f04f 31ff 	mov.w	r1, #4294967295
 801d6fe:	d819      	bhi.n	801d734 <_strtod_l+0x8f4>
 801d700:	0d12      	lsrs	r2, r2, #20
 801d702:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d706:	fa01 f303 	lsl.w	r3, r1, r3
 801d70a:	4298      	cmp	r0, r3
 801d70c:	d117      	bne.n	801d73e <_strtod_l+0x8fe>
 801d70e:	4b29      	ldr	r3, [pc, #164]	; (801d7b4 <_strtod_l+0x974>)
 801d710:	429f      	cmp	r7, r3
 801d712:	d102      	bne.n	801d71a <_strtod_l+0x8da>
 801d714:	3001      	adds	r0, #1
 801d716:	f43f addf 	beq.w	801d2d8 <_strtod_l+0x498>
 801d71a:	4b23      	ldr	r3, [pc, #140]	; (801d7a8 <_strtod_l+0x968>)
 801d71c:	403b      	ands	r3, r7
 801d71e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801d722:	f04f 0a00 	mov.w	sl, #0
 801d726:	9b04      	ldr	r3, [sp, #16]
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d1a0      	bne.n	801d66e <_strtod_l+0x82e>
 801d72c:	e5de      	b.n	801d2ec <_strtod_l+0x4ac>
 801d72e:	f04f 33ff 	mov.w	r3, #4294967295
 801d732:	e7ea      	b.n	801d70a <_strtod_l+0x8ca>
 801d734:	460b      	mov	r3, r1
 801d736:	e7e8      	b.n	801d70a <_strtod_l+0x8ca>
 801d738:	ea53 030a 	orrs.w	r3, r3, sl
 801d73c:	d088      	beq.n	801d650 <_strtod_l+0x810>
 801d73e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d740:	b1db      	cbz	r3, 801d77a <_strtod_l+0x93a>
 801d742:	423b      	tst	r3, r7
 801d744:	d0ef      	beq.n	801d726 <_strtod_l+0x8e6>
 801d746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d748:	9a04      	ldr	r2, [sp, #16]
 801d74a:	4650      	mov	r0, sl
 801d74c:	4659      	mov	r1, fp
 801d74e:	b1c3      	cbz	r3, 801d782 <_strtod_l+0x942>
 801d750:	f7ff fb59 	bl	801ce06 <sulp>
 801d754:	4602      	mov	r2, r0
 801d756:	460b      	mov	r3, r1
 801d758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d75c:	f7e2 fdb6 	bl	80002cc <__adddf3>
 801d760:	4682      	mov	sl, r0
 801d762:	468b      	mov	fp, r1
 801d764:	e7df      	b.n	801d726 <_strtod_l+0x8e6>
 801d766:	4013      	ands	r3, r2
 801d768:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d76c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801d770:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801d774:	f04f 3aff 	mov.w	sl, #4294967295
 801d778:	e7d5      	b.n	801d726 <_strtod_l+0x8e6>
 801d77a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d77c:	ea13 0f0a 	tst.w	r3, sl
 801d780:	e7e0      	b.n	801d744 <_strtod_l+0x904>
 801d782:	f7ff fb40 	bl	801ce06 <sulp>
 801d786:	4602      	mov	r2, r0
 801d788:	460b      	mov	r3, r1
 801d78a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d78e:	f7e2 fd9b 	bl	80002c8 <__aeabi_dsub>
 801d792:	2200      	movs	r2, #0
 801d794:	2300      	movs	r3, #0
 801d796:	4682      	mov	sl, r0
 801d798:	468b      	mov	fp, r1
 801d79a:	f7e3 f9b5 	bl	8000b08 <__aeabi_dcmpeq>
 801d79e:	2800      	cmp	r0, #0
 801d7a0:	d0c1      	beq.n	801d726 <_strtod_l+0x8e6>
 801d7a2:	e60e      	b.n	801d3c2 <_strtod_l+0x582>
 801d7a4:	fffffc02 	.word	0xfffffc02
 801d7a8:	7ff00000 	.word	0x7ff00000
 801d7ac:	39500000 	.word	0x39500000
 801d7b0:	000fffff 	.word	0x000fffff
 801d7b4:	7fefffff 	.word	0x7fefffff
 801d7b8:	080234c8 	.word	0x080234c8
 801d7bc:	4631      	mov	r1, r6
 801d7be:	4628      	mov	r0, r5
 801d7c0:	f002 fe78 	bl	80204b4 <__ratio>
 801d7c4:	ec59 8b10 	vmov	r8, r9, d0
 801d7c8:	ee10 0a10 	vmov	r0, s0
 801d7cc:	2200      	movs	r2, #0
 801d7ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d7d2:	4649      	mov	r1, r9
 801d7d4:	f7e3 f9ac 	bl	8000b30 <__aeabi_dcmple>
 801d7d8:	2800      	cmp	r0, #0
 801d7da:	d07c      	beq.n	801d8d6 <_strtod_l+0xa96>
 801d7dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d04c      	beq.n	801d87c <_strtod_l+0xa3c>
 801d7e2:	4b95      	ldr	r3, [pc, #596]	; (801da38 <_strtod_l+0xbf8>)
 801d7e4:	2200      	movs	r2, #0
 801d7e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801d7ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801da38 <_strtod_l+0xbf8>
 801d7ee:	f04f 0800 	mov.w	r8, #0
 801d7f2:	4b92      	ldr	r3, [pc, #584]	; (801da3c <_strtod_l+0xbfc>)
 801d7f4:	403b      	ands	r3, r7
 801d7f6:	9311      	str	r3, [sp, #68]	; 0x44
 801d7f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d7fa:	4b91      	ldr	r3, [pc, #580]	; (801da40 <_strtod_l+0xc00>)
 801d7fc:	429a      	cmp	r2, r3
 801d7fe:	f040 80b2 	bne.w	801d966 <_strtod_l+0xb26>
 801d802:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d80a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801d80e:	ec4b ab10 	vmov	d0, sl, fp
 801d812:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801d816:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d81a:	f002 fd73 	bl	8020304 <__ulp>
 801d81e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d822:	ec53 2b10 	vmov	r2, r3, d0
 801d826:	f7e2 ff07 	bl	8000638 <__aeabi_dmul>
 801d82a:	4652      	mov	r2, sl
 801d82c:	465b      	mov	r3, fp
 801d82e:	f7e2 fd4d 	bl	80002cc <__adddf3>
 801d832:	460b      	mov	r3, r1
 801d834:	4981      	ldr	r1, [pc, #516]	; (801da3c <_strtod_l+0xbfc>)
 801d836:	4a83      	ldr	r2, [pc, #524]	; (801da44 <_strtod_l+0xc04>)
 801d838:	4019      	ands	r1, r3
 801d83a:	4291      	cmp	r1, r2
 801d83c:	4682      	mov	sl, r0
 801d83e:	d95e      	bls.n	801d8fe <_strtod_l+0xabe>
 801d840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d842:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801d846:	4293      	cmp	r3, r2
 801d848:	d103      	bne.n	801d852 <_strtod_l+0xa12>
 801d84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d84c:	3301      	adds	r3, #1
 801d84e:	f43f ad43 	beq.w	801d2d8 <_strtod_l+0x498>
 801d852:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801da50 <_strtod_l+0xc10>
 801d856:	f04f 3aff 	mov.w	sl, #4294967295
 801d85a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d85c:	4620      	mov	r0, r4
 801d85e:	f002 fa25 	bl	801fcac <_Bfree>
 801d862:	9907      	ldr	r1, [sp, #28]
 801d864:	4620      	mov	r0, r4
 801d866:	f002 fa21 	bl	801fcac <_Bfree>
 801d86a:	4631      	mov	r1, r6
 801d86c:	4620      	mov	r0, r4
 801d86e:	f002 fa1d 	bl	801fcac <_Bfree>
 801d872:	4629      	mov	r1, r5
 801d874:	4620      	mov	r0, r4
 801d876:	f002 fa19 	bl	801fcac <_Bfree>
 801d87a:	e613      	b.n	801d4a4 <_strtod_l+0x664>
 801d87c:	f1ba 0f00 	cmp.w	sl, #0
 801d880:	d11b      	bne.n	801d8ba <_strtod_l+0xa7a>
 801d882:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d886:	b9f3      	cbnz	r3, 801d8c6 <_strtod_l+0xa86>
 801d888:	4b6b      	ldr	r3, [pc, #428]	; (801da38 <_strtod_l+0xbf8>)
 801d88a:	2200      	movs	r2, #0
 801d88c:	4640      	mov	r0, r8
 801d88e:	4649      	mov	r1, r9
 801d890:	f7e3 f944 	bl	8000b1c <__aeabi_dcmplt>
 801d894:	b9d0      	cbnz	r0, 801d8cc <_strtod_l+0xa8c>
 801d896:	4640      	mov	r0, r8
 801d898:	4649      	mov	r1, r9
 801d89a:	4b6b      	ldr	r3, [pc, #428]	; (801da48 <_strtod_l+0xc08>)
 801d89c:	2200      	movs	r2, #0
 801d89e:	f7e2 fecb 	bl	8000638 <__aeabi_dmul>
 801d8a2:	4680      	mov	r8, r0
 801d8a4:	4689      	mov	r9, r1
 801d8a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d8aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801d8ae:	931b      	str	r3, [sp, #108]	; 0x6c
 801d8b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801d8b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801d8b8:	e79b      	b.n	801d7f2 <_strtod_l+0x9b2>
 801d8ba:	f1ba 0f01 	cmp.w	sl, #1
 801d8be:	d102      	bne.n	801d8c6 <_strtod_l+0xa86>
 801d8c0:	2f00      	cmp	r7, #0
 801d8c2:	f43f ad7e 	beq.w	801d3c2 <_strtod_l+0x582>
 801d8c6:	4b61      	ldr	r3, [pc, #388]	; (801da4c <_strtod_l+0xc0c>)
 801d8c8:	2200      	movs	r2, #0
 801d8ca:	e78c      	b.n	801d7e6 <_strtod_l+0x9a6>
 801d8cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801da48 <_strtod_l+0xc08>
 801d8d0:	f04f 0800 	mov.w	r8, #0
 801d8d4:	e7e7      	b.n	801d8a6 <_strtod_l+0xa66>
 801d8d6:	4b5c      	ldr	r3, [pc, #368]	; (801da48 <_strtod_l+0xc08>)
 801d8d8:	4640      	mov	r0, r8
 801d8da:	4649      	mov	r1, r9
 801d8dc:	2200      	movs	r2, #0
 801d8de:	f7e2 feab 	bl	8000638 <__aeabi_dmul>
 801d8e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d8e4:	4680      	mov	r8, r0
 801d8e6:	4689      	mov	r9, r1
 801d8e8:	b933      	cbnz	r3, 801d8f8 <_strtod_l+0xab8>
 801d8ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d8ee:	9012      	str	r0, [sp, #72]	; 0x48
 801d8f0:	9313      	str	r3, [sp, #76]	; 0x4c
 801d8f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801d8f6:	e7dd      	b.n	801d8b4 <_strtod_l+0xa74>
 801d8f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801d8fc:	e7f9      	b.n	801d8f2 <_strtod_l+0xab2>
 801d8fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801d902:	9b04      	ldr	r3, [sp, #16]
 801d904:	2b00      	cmp	r3, #0
 801d906:	d1a8      	bne.n	801d85a <_strtod_l+0xa1a>
 801d908:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d90c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d90e:	0d1b      	lsrs	r3, r3, #20
 801d910:	051b      	lsls	r3, r3, #20
 801d912:	429a      	cmp	r2, r3
 801d914:	d1a1      	bne.n	801d85a <_strtod_l+0xa1a>
 801d916:	4640      	mov	r0, r8
 801d918:	4649      	mov	r1, r9
 801d91a:	f7e3 fa3d 	bl	8000d98 <__aeabi_d2lz>
 801d91e:	f7e2 fe5d 	bl	80005dc <__aeabi_l2d>
 801d922:	4602      	mov	r2, r0
 801d924:	460b      	mov	r3, r1
 801d926:	4640      	mov	r0, r8
 801d928:	4649      	mov	r1, r9
 801d92a:	f7e2 fccd 	bl	80002c8 <__aeabi_dsub>
 801d92e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d930:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d934:	ea43 030a 	orr.w	r3, r3, sl
 801d938:	4313      	orrs	r3, r2
 801d93a:	4680      	mov	r8, r0
 801d93c:	4689      	mov	r9, r1
 801d93e:	d053      	beq.n	801d9e8 <_strtod_l+0xba8>
 801d940:	a335      	add	r3, pc, #212	; (adr r3, 801da18 <_strtod_l+0xbd8>)
 801d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d946:	f7e3 f8e9 	bl	8000b1c <__aeabi_dcmplt>
 801d94a:	2800      	cmp	r0, #0
 801d94c:	f47f acce 	bne.w	801d2ec <_strtod_l+0x4ac>
 801d950:	a333      	add	r3, pc, #204	; (adr r3, 801da20 <_strtod_l+0xbe0>)
 801d952:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d956:	4640      	mov	r0, r8
 801d958:	4649      	mov	r1, r9
 801d95a:	f7e3 f8fd 	bl	8000b58 <__aeabi_dcmpgt>
 801d95e:	2800      	cmp	r0, #0
 801d960:	f43f af7b 	beq.w	801d85a <_strtod_l+0xa1a>
 801d964:	e4c2      	b.n	801d2ec <_strtod_l+0x4ac>
 801d966:	9b04      	ldr	r3, [sp, #16]
 801d968:	b333      	cbz	r3, 801d9b8 <_strtod_l+0xb78>
 801d96a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d96c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d970:	d822      	bhi.n	801d9b8 <_strtod_l+0xb78>
 801d972:	a32d      	add	r3, pc, #180	; (adr r3, 801da28 <_strtod_l+0xbe8>)
 801d974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d978:	4640      	mov	r0, r8
 801d97a:	4649      	mov	r1, r9
 801d97c:	f7e3 f8d8 	bl	8000b30 <__aeabi_dcmple>
 801d980:	b1a0      	cbz	r0, 801d9ac <_strtod_l+0xb6c>
 801d982:	4649      	mov	r1, r9
 801d984:	4640      	mov	r0, r8
 801d986:	f7e3 f92f 	bl	8000be8 <__aeabi_d2uiz>
 801d98a:	2801      	cmp	r0, #1
 801d98c:	bf38      	it	cc
 801d98e:	2001      	movcc	r0, #1
 801d990:	f7e2 fdd8 	bl	8000544 <__aeabi_ui2d>
 801d994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d996:	4680      	mov	r8, r0
 801d998:	4689      	mov	r9, r1
 801d99a:	bb13      	cbnz	r3, 801d9e2 <_strtod_l+0xba2>
 801d99c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d9a0:	9014      	str	r0, [sp, #80]	; 0x50
 801d9a2:	9315      	str	r3, [sp, #84]	; 0x54
 801d9a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801d9a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801d9ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d9ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d9b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801d9b4:	1a9b      	subs	r3, r3, r2
 801d9b6:	930d      	str	r3, [sp, #52]	; 0x34
 801d9b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d9bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801d9c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d9c4:	f002 fc9e 	bl	8020304 <__ulp>
 801d9c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d9cc:	ec53 2b10 	vmov	r2, r3, d0
 801d9d0:	f7e2 fe32 	bl	8000638 <__aeabi_dmul>
 801d9d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d9d8:	f7e2 fc78 	bl	80002cc <__adddf3>
 801d9dc:	4682      	mov	sl, r0
 801d9de:	468b      	mov	fp, r1
 801d9e0:	e78f      	b.n	801d902 <_strtod_l+0xac2>
 801d9e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801d9e6:	e7dd      	b.n	801d9a4 <_strtod_l+0xb64>
 801d9e8:	a311      	add	r3, pc, #68	; (adr r3, 801da30 <_strtod_l+0xbf0>)
 801d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ee:	f7e3 f895 	bl	8000b1c <__aeabi_dcmplt>
 801d9f2:	e7b4      	b.n	801d95e <_strtod_l+0xb1e>
 801d9f4:	2300      	movs	r3, #0
 801d9f6:	930e      	str	r3, [sp, #56]	; 0x38
 801d9f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d9fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d9fc:	6013      	str	r3, [r2, #0]
 801d9fe:	f7ff ba65 	b.w	801cecc <_strtod_l+0x8c>
 801da02:	2b65      	cmp	r3, #101	; 0x65
 801da04:	f43f ab5d 	beq.w	801d0c2 <_strtod_l+0x282>
 801da08:	2b45      	cmp	r3, #69	; 0x45
 801da0a:	f43f ab5a 	beq.w	801d0c2 <_strtod_l+0x282>
 801da0e:	2201      	movs	r2, #1
 801da10:	f7ff bb92 	b.w	801d138 <_strtod_l+0x2f8>
 801da14:	f3af 8000 	nop.w
 801da18:	94a03595 	.word	0x94a03595
 801da1c:	3fdfffff 	.word	0x3fdfffff
 801da20:	35afe535 	.word	0x35afe535
 801da24:	3fe00000 	.word	0x3fe00000
 801da28:	ffc00000 	.word	0xffc00000
 801da2c:	41dfffff 	.word	0x41dfffff
 801da30:	94a03595 	.word	0x94a03595
 801da34:	3fcfffff 	.word	0x3fcfffff
 801da38:	3ff00000 	.word	0x3ff00000
 801da3c:	7ff00000 	.word	0x7ff00000
 801da40:	7fe00000 	.word	0x7fe00000
 801da44:	7c9fffff 	.word	0x7c9fffff
 801da48:	3fe00000 	.word	0x3fe00000
 801da4c:	bff00000 	.word	0xbff00000
 801da50:	7fefffff 	.word	0x7fefffff

0801da54 <_strtod_r>:
 801da54:	4b01      	ldr	r3, [pc, #4]	; (801da5c <_strtod_r+0x8>)
 801da56:	f7ff b9f3 	b.w	801ce40 <_strtod_l>
 801da5a:	bf00      	nop
 801da5c:	200002cc 	.word	0x200002cc

0801da60 <_strtol_l.isra.0>:
 801da60:	2b01      	cmp	r3, #1
 801da62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da66:	d001      	beq.n	801da6c <_strtol_l.isra.0+0xc>
 801da68:	2b24      	cmp	r3, #36	; 0x24
 801da6a:	d906      	bls.n	801da7a <_strtol_l.isra.0+0x1a>
 801da6c:	f7fd fbaa 	bl	801b1c4 <__errno>
 801da70:	2316      	movs	r3, #22
 801da72:	6003      	str	r3, [r0, #0]
 801da74:	2000      	movs	r0, #0
 801da76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da7a:	4f3a      	ldr	r7, [pc, #232]	; (801db64 <_strtol_l.isra.0+0x104>)
 801da7c:	468e      	mov	lr, r1
 801da7e:	4676      	mov	r6, lr
 801da80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801da84:	5de5      	ldrb	r5, [r4, r7]
 801da86:	f015 0508 	ands.w	r5, r5, #8
 801da8a:	d1f8      	bne.n	801da7e <_strtol_l.isra.0+0x1e>
 801da8c:	2c2d      	cmp	r4, #45	; 0x2d
 801da8e:	d134      	bne.n	801dafa <_strtol_l.isra.0+0x9a>
 801da90:	f89e 4000 	ldrb.w	r4, [lr]
 801da94:	f04f 0801 	mov.w	r8, #1
 801da98:	f106 0e02 	add.w	lr, r6, #2
 801da9c:	2b00      	cmp	r3, #0
 801da9e:	d05c      	beq.n	801db5a <_strtol_l.isra.0+0xfa>
 801daa0:	2b10      	cmp	r3, #16
 801daa2:	d10c      	bne.n	801dabe <_strtol_l.isra.0+0x5e>
 801daa4:	2c30      	cmp	r4, #48	; 0x30
 801daa6:	d10a      	bne.n	801dabe <_strtol_l.isra.0+0x5e>
 801daa8:	f89e 4000 	ldrb.w	r4, [lr]
 801daac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801dab0:	2c58      	cmp	r4, #88	; 0x58
 801dab2:	d14d      	bne.n	801db50 <_strtol_l.isra.0+0xf0>
 801dab4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801dab8:	2310      	movs	r3, #16
 801daba:	f10e 0e02 	add.w	lr, lr, #2
 801dabe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801dac2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dac6:	2600      	movs	r6, #0
 801dac8:	fbbc f9f3 	udiv	r9, ip, r3
 801dacc:	4635      	mov	r5, r6
 801dace:	fb03 ca19 	mls	sl, r3, r9, ip
 801dad2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801dad6:	2f09      	cmp	r7, #9
 801dad8:	d818      	bhi.n	801db0c <_strtol_l.isra.0+0xac>
 801dada:	463c      	mov	r4, r7
 801dadc:	42a3      	cmp	r3, r4
 801dade:	dd24      	ble.n	801db2a <_strtol_l.isra.0+0xca>
 801dae0:	2e00      	cmp	r6, #0
 801dae2:	db1f      	blt.n	801db24 <_strtol_l.isra.0+0xc4>
 801dae4:	45a9      	cmp	r9, r5
 801dae6:	d31d      	bcc.n	801db24 <_strtol_l.isra.0+0xc4>
 801dae8:	d101      	bne.n	801daee <_strtol_l.isra.0+0x8e>
 801daea:	45a2      	cmp	sl, r4
 801daec:	db1a      	blt.n	801db24 <_strtol_l.isra.0+0xc4>
 801daee:	fb05 4503 	mla	r5, r5, r3, r4
 801daf2:	2601      	movs	r6, #1
 801daf4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801daf8:	e7eb      	b.n	801dad2 <_strtol_l.isra.0+0x72>
 801dafa:	2c2b      	cmp	r4, #43	; 0x2b
 801dafc:	bf08      	it	eq
 801dafe:	f89e 4000 	ldrbeq.w	r4, [lr]
 801db02:	46a8      	mov	r8, r5
 801db04:	bf08      	it	eq
 801db06:	f106 0e02 	addeq.w	lr, r6, #2
 801db0a:	e7c7      	b.n	801da9c <_strtol_l.isra.0+0x3c>
 801db0c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801db10:	2f19      	cmp	r7, #25
 801db12:	d801      	bhi.n	801db18 <_strtol_l.isra.0+0xb8>
 801db14:	3c37      	subs	r4, #55	; 0x37
 801db16:	e7e1      	b.n	801dadc <_strtol_l.isra.0+0x7c>
 801db18:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801db1c:	2f19      	cmp	r7, #25
 801db1e:	d804      	bhi.n	801db2a <_strtol_l.isra.0+0xca>
 801db20:	3c57      	subs	r4, #87	; 0x57
 801db22:	e7db      	b.n	801dadc <_strtol_l.isra.0+0x7c>
 801db24:	f04f 36ff 	mov.w	r6, #4294967295
 801db28:	e7e4      	b.n	801daf4 <_strtol_l.isra.0+0x94>
 801db2a:	2e00      	cmp	r6, #0
 801db2c:	da05      	bge.n	801db3a <_strtol_l.isra.0+0xda>
 801db2e:	2322      	movs	r3, #34	; 0x22
 801db30:	6003      	str	r3, [r0, #0]
 801db32:	4665      	mov	r5, ip
 801db34:	b942      	cbnz	r2, 801db48 <_strtol_l.isra.0+0xe8>
 801db36:	4628      	mov	r0, r5
 801db38:	e79d      	b.n	801da76 <_strtol_l.isra.0+0x16>
 801db3a:	f1b8 0f00 	cmp.w	r8, #0
 801db3e:	d000      	beq.n	801db42 <_strtol_l.isra.0+0xe2>
 801db40:	426d      	negs	r5, r5
 801db42:	2a00      	cmp	r2, #0
 801db44:	d0f7      	beq.n	801db36 <_strtol_l.isra.0+0xd6>
 801db46:	b10e      	cbz	r6, 801db4c <_strtol_l.isra.0+0xec>
 801db48:	f10e 31ff 	add.w	r1, lr, #4294967295
 801db4c:	6011      	str	r1, [r2, #0]
 801db4e:	e7f2      	b.n	801db36 <_strtol_l.isra.0+0xd6>
 801db50:	2430      	movs	r4, #48	; 0x30
 801db52:	2b00      	cmp	r3, #0
 801db54:	d1b3      	bne.n	801dabe <_strtol_l.isra.0+0x5e>
 801db56:	2308      	movs	r3, #8
 801db58:	e7b1      	b.n	801dabe <_strtol_l.isra.0+0x5e>
 801db5a:	2c30      	cmp	r4, #48	; 0x30
 801db5c:	d0a4      	beq.n	801daa8 <_strtol_l.isra.0+0x48>
 801db5e:	230a      	movs	r3, #10
 801db60:	e7ad      	b.n	801dabe <_strtol_l.isra.0+0x5e>
 801db62:	bf00      	nop
 801db64:	080231c9 	.word	0x080231c9

0801db68 <_strtol_r>:
 801db68:	f7ff bf7a 	b.w	801da60 <_strtol_l.isra.0>

0801db6c <strtol>:
 801db6c:	4613      	mov	r3, r2
 801db6e:	460a      	mov	r2, r1
 801db70:	4601      	mov	r1, r0
 801db72:	4802      	ldr	r0, [pc, #8]	; (801db7c <strtol+0x10>)
 801db74:	6800      	ldr	r0, [r0, #0]
 801db76:	f7ff bf73 	b.w	801da60 <_strtol_l.isra.0>
 801db7a:	bf00      	nop
 801db7c:	20000200 	.word	0x20000200

0801db80 <_strtoul_l.isra.0>:
 801db80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801db84:	4e3b      	ldr	r6, [pc, #236]	; (801dc74 <_strtoul_l.isra.0+0xf4>)
 801db86:	4686      	mov	lr, r0
 801db88:	468c      	mov	ip, r1
 801db8a:	4660      	mov	r0, ip
 801db8c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801db90:	5da5      	ldrb	r5, [r4, r6]
 801db92:	f015 0508 	ands.w	r5, r5, #8
 801db96:	d1f8      	bne.n	801db8a <_strtoul_l.isra.0+0xa>
 801db98:	2c2d      	cmp	r4, #45	; 0x2d
 801db9a:	d134      	bne.n	801dc06 <_strtoul_l.isra.0+0x86>
 801db9c:	f89c 4000 	ldrb.w	r4, [ip]
 801dba0:	f04f 0801 	mov.w	r8, #1
 801dba4:	f100 0c02 	add.w	ip, r0, #2
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	d05e      	beq.n	801dc6a <_strtoul_l.isra.0+0xea>
 801dbac:	2b10      	cmp	r3, #16
 801dbae:	d10c      	bne.n	801dbca <_strtoul_l.isra.0+0x4a>
 801dbb0:	2c30      	cmp	r4, #48	; 0x30
 801dbb2:	d10a      	bne.n	801dbca <_strtoul_l.isra.0+0x4a>
 801dbb4:	f89c 0000 	ldrb.w	r0, [ip]
 801dbb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801dbbc:	2858      	cmp	r0, #88	; 0x58
 801dbbe:	d14f      	bne.n	801dc60 <_strtoul_l.isra.0+0xe0>
 801dbc0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801dbc4:	2310      	movs	r3, #16
 801dbc6:	f10c 0c02 	add.w	ip, ip, #2
 801dbca:	f04f 37ff 	mov.w	r7, #4294967295
 801dbce:	2500      	movs	r5, #0
 801dbd0:	fbb7 f7f3 	udiv	r7, r7, r3
 801dbd4:	fb03 f907 	mul.w	r9, r3, r7
 801dbd8:	ea6f 0909 	mvn.w	r9, r9
 801dbdc:	4628      	mov	r0, r5
 801dbde:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801dbe2:	2e09      	cmp	r6, #9
 801dbe4:	d818      	bhi.n	801dc18 <_strtoul_l.isra.0+0x98>
 801dbe6:	4634      	mov	r4, r6
 801dbe8:	42a3      	cmp	r3, r4
 801dbea:	dd24      	ble.n	801dc36 <_strtoul_l.isra.0+0xb6>
 801dbec:	2d00      	cmp	r5, #0
 801dbee:	db1f      	blt.n	801dc30 <_strtoul_l.isra.0+0xb0>
 801dbf0:	4287      	cmp	r7, r0
 801dbf2:	d31d      	bcc.n	801dc30 <_strtoul_l.isra.0+0xb0>
 801dbf4:	d101      	bne.n	801dbfa <_strtoul_l.isra.0+0x7a>
 801dbf6:	45a1      	cmp	r9, r4
 801dbf8:	db1a      	blt.n	801dc30 <_strtoul_l.isra.0+0xb0>
 801dbfa:	fb00 4003 	mla	r0, r0, r3, r4
 801dbfe:	2501      	movs	r5, #1
 801dc00:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801dc04:	e7eb      	b.n	801dbde <_strtoul_l.isra.0+0x5e>
 801dc06:	2c2b      	cmp	r4, #43	; 0x2b
 801dc08:	bf08      	it	eq
 801dc0a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801dc0e:	46a8      	mov	r8, r5
 801dc10:	bf08      	it	eq
 801dc12:	f100 0c02 	addeq.w	ip, r0, #2
 801dc16:	e7c7      	b.n	801dba8 <_strtoul_l.isra.0+0x28>
 801dc18:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801dc1c:	2e19      	cmp	r6, #25
 801dc1e:	d801      	bhi.n	801dc24 <_strtoul_l.isra.0+0xa4>
 801dc20:	3c37      	subs	r4, #55	; 0x37
 801dc22:	e7e1      	b.n	801dbe8 <_strtoul_l.isra.0+0x68>
 801dc24:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801dc28:	2e19      	cmp	r6, #25
 801dc2a:	d804      	bhi.n	801dc36 <_strtoul_l.isra.0+0xb6>
 801dc2c:	3c57      	subs	r4, #87	; 0x57
 801dc2e:	e7db      	b.n	801dbe8 <_strtoul_l.isra.0+0x68>
 801dc30:	f04f 35ff 	mov.w	r5, #4294967295
 801dc34:	e7e4      	b.n	801dc00 <_strtoul_l.isra.0+0x80>
 801dc36:	2d00      	cmp	r5, #0
 801dc38:	da07      	bge.n	801dc4a <_strtoul_l.isra.0+0xca>
 801dc3a:	2322      	movs	r3, #34	; 0x22
 801dc3c:	f8ce 3000 	str.w	r3, [lr]
 801dc40:	f04f 30ff 	mov.w	r0, #4294967295
 801dc44:	b942      	cbnz	r2, 801dc58 <_strtoul_l.isra.0+0xd8>
 801dc46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc4a:	f1b8 0f00 	cmp.w	r8, #0
 801dc4e:	d000      	beq.n	801dc52 <_strtoul_l.isra.0+0xd2>
 801dc50:	4240      	negs	r0, r0
 801dc52:	2a00      	cmp	r2, #0
 801dc54:	d0f7      	beq.n	801dc46 <_strtoul_l.isra.0+0xc6>
 801dc56:	b10d      	cbz	r5, 801dc5c <_strtoul_l.isra.0+0xdc>
 801dc58:	f10c 31ff 	add.w	r1, ip, #4294967295
 801dc5c:	6011      	str	r1, [r2, #0]
 801dc5e:	e7f2      	b.n	801dc46 <_strtoul_l.isra.0+0xc6>
 801dc60:	2430      	movs	r4, #48	; 0x30
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	d1b1      	bne.n	801dbca <_strtoul_l.isra.0+0x4a>
 801dc66:	2308      	movs	r3, #8
 801dc68:	e7af      	b.n	801dbca <_strtoul_l.isra.0+0x4a>
 801dc6a:	2c30      	cmp	r4, #48	; 0x30
 801dc6c:	d0a2      	beq.n	801dbb4 <_strtoul_l.isra.0+0x34>
 801dc6e:	230a      	movs	r3, #10
 801dc70:	e7ab      	b.n	801dbca <_strtoul_l.isra.0+0x4a>
 801dc72:	bf00      	nop
 801dc74:	080231c9 	.word	0x080231c9

0801dc78 <_strtoul_r>:
 801dc78:	f7ff bf82 	b.w	801db80 <_strtoul_l.isra.0>

0801dc7c <strtoul>:
 801dc7c:	4613      	mov	r3, r2
 801dc7e:	460a      	mov	r2, r1
 801dc80:	4601      	mov	r1, r0
 801dc82:	4802      	ldr	r0, [pc, #8]	; (801dc8c <strtoul+0x10>)
 801dc84:	6800      	ldr	r0, [r0, #0]
 801dc86:	f7ff bf7b 	b.w	801db80 <_strtoul_l.isra.0>
 801dc8a:	bf00      	nop
 801dc8c:	20000200 	.word	0x20000200

0801dc90 <__tzcalc_limits>:
 801dc90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc94:	4680      	mov	r8, r0
 801dc96:	f001 fe7d 	bl	801f994 <__gettzinfo>
 801dc9a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801dc9e:	4598      	cmp	r8, r3
 801dca0:	f340 8098 	ble.w	801ddd4 <__tzcalc_limits+0x144>
 801dca4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801dca8:	4443      	add	r3, r8
 801dcaa:	109b      	asrs	r3, r3, #2
 801dcac:	f240 126d 	movw	r2, #365	; 0x16d
 801dcb0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801dcb4:	fb02 3505 	mla	r5, r2, r5, r3
 801dcb8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801dcbc:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801dcc0:	fb93 f3f2 	sdiv	r3, r3, r2
 801dcc4:	441d      	add	r5, r3
 801dcc6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801dcca:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801dcce:	fb98 f7f3 	sdiv	r7, r8, r3
 801dcd2:	fb03 8717 	mls	r7, r3, r7, r8
 801dcd6:	4442      	add	r2, r8
 801dcd8:	fab7 fc87 	clz	ip, r7
 801dcdc:	fbb2 f2f3 	udiv	r2, r2, r3
 801dce0:	f008 0303 	and.w	r3, r8, #3
 801dce4:	4415      	add	r5, r2
 801dce6:	2264      	movs	r2, #100	; 0x64
 801dce8:	f8c0 8004 	str.w	r8, [r0, #4]
 801dcec:	fb98 f6f2 	sdiv	r6, r8, r2
 801dcf0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801dcf4:	fb02 8616 	mls	r6, r2, r6, r8
 801dcf8:	4604      	mov	r4, r0
 801dcfa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801dcfe:	9300      	str	r3, [sp, #0]
 801dd00:	f04f 0e07 	mov.w	lr, #7
 801dd04:	7a22      	ldrb	r2, [r4, #8]
 801dd06:	6963      	ldr	r3, [r4, #20]
 801dd08:	2a4a      	cmp	r2, #74	; 0x4a
 801dd0a:	d128      	bne.n	801dd5e <__tzcalc_limits+0xce>
 801dd0c:	9900      	ldr	r1, [sp, #0]
 801dd0e:	18ea      	adds	r2, r5, r3
 801dd10:	b901      	cbnz	r1, 801dd14 <__tzcalc_limits+0x84>
 801dd12:	b906      	cbnz	r6, 801dd16 <__tzcalc_limits+0x86>
 801dd14:	bb0f      	cbnz	r7, 801dd5a <__tzcalc_limits+0xca>
 801dd16:	2b3b      	cmp	r3, #59	; 0x3b
 801dd18:	bfd4      	ite	le
 801dd1a:	2300      	movle	r3, #0
 801dd1c:	2301      	movgt	r3, #1
 801dd1e:	4413      	add	r3, r2
 801dd20:	1e5a      	subs	r2, r3, #1
 801dd22:	69a3      	ldr	r3, [r4, #24]
 801dd24:	492c      	ldr	r1, [pc, #176]	; (801ddd8 <__tzcalc_limits+0x148>)
 801dd26:	fb01 3202 	mla	r2, r1, r2, r3
 801dd2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801dd2c:	4413      	add	r3, r2
 801dd2e:	461a      	mov	r2, r3
 801dd30:	17db      	asrs	r3, r3, #31
 801dd32:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801dd36:	3428      	adds	r4, #40	; 0x28
 801dd38:	45a3      	cmp	fp, r4
 801dd3a:	d1e3      	bne.n	801dd04 <__tzcalc_limits+0x74>
 801dd3c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801dd40:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801dd44:	4294      	cmp	r4, r2
 801dd46:	eb75 0303 	sbcs.w	r3, r5, r3
 801dd4a:	bfb4      	ite	lt
 801dd4c:	2301      	movlt	r3, #1
 801dd4e:	2300      	movge	r3, #0
 801dd50:	6003      	str	r3, [r0, #0]
 801dd52:	2001      	movs	r0, #1
 801dd54:	b003      	add	sp, #12
 801dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd5a:	2300      	movs	r3, #0
 801dd5c:	e7df      	b.n	801dd1e <__tzcalc_limits+0x8e>
 801dd5e:	2a44      	cmp	r2, #68	; 0x44
 801dd60:	d101      	bne.n	801dd66 <__tzcalc_limits+0xd6>
 801dd62:	18ea      	adds	r2, r5, r3
 801dd64:	e7dd      	b.n	801dd22 <__tzcalc_limits+0x92>
 801dd66:	9a00      	ldr	r2, [sp, #0]
 801dd68:	bb72      	cbnz	r2, 801ddc8 <__tzcalc_limits+0x138>
 801dd6a:	2e00      	cmp	r6, #0
 801dd6c:	bf0c      	ite	eq
 801dd6e:	46e0      	moveq	r8, ip
 801dd70:	f04f 0801 	movne.w	r8, #1
 801dd74:	4919      	ldr	r1, [pc, #100]	; (801dddc <__tzcalc_limits+0x14c>)
 801dd76:	68e2      	ldr	r2, [r4, #12]
 801dd78:	9201      	str	r2, [sp, #4]
 801dd7a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801dd7e:	fb0a 1808 	mla	r8, sl, r8, r1
 801dd82:	462a      	mov	r2, r5
 801dd84:	f04f 0900 	mov.w	r9, #0
 801dd88:	f1a8 0804 	sub.w	r8, r8, #4
 801dd8c:	9901      	ldr	r1, [sp, #4]
 801dd8e:	f109 0901 	add.w	r9, r9, #1
 801dd92:	4549      	cmp	r1, r9
 801dd94:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801dd98:	dc18      	bgt.n	801ddcc <__tzcalc_limits+0x13c>
 801dd9a:	f102 0804 	add.w	r8, r2, #4
 801dd9e:	fb98 f9fe 	sdiv	r9, r8, lr
 801dda2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801dda6:	eba8 0909 	sub.w	r9, r8, r9
 801ddaa:	ebb3 0909 	subs.w	r9, r3, r9
 801ddae:	6923      	ldr	r3, [r4, #16]
 801ddb0:	f103 33ff 	add.w	r3, r3, #4294967295
 801ddb4:	bf48      	it	mi
 801ddb6:	f109 0907 	addmi.w	r9, r9, #7
 801ddba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801ddbe:	444b      	add	r3, r9
 801ddc0:	4553      	cmp	r3, sl
 801ddc2:	da05      	bge.n	801ddd0 <__tzcalc_limits+0x140>
 801ddc4:	441a      	add	r2, r3
 801ddc6:	e7ac      	b.n	801dd22 <__tzcalc_limits+0x92>
 801ddc8:	46e0      	mov	r8, ip
 801ddca:	e7d3      	b.n	801dd74 <__tzcalc_limits+0xe4>
 801ddcc:	4452      	add	r2, sl
 801ddce:	e7dd      	b.n	801dd8c <__tzcalc_limits+0xfc>
 801ddd0:	3b07      	subs	r3, #7
 801ddd2:	e7f5      	b.n	801ddc0 <__tzcalc_limits+0x130>
 801ddd4:	2000      	movs	r0, #0
 801ddd6:	e7bd      	b.n	801dd54 <__tzcalc_limits+0xc4>
 801ddd8:	00015180 	.word	0x00015180
 801dddc:	08023408 	.word	0x08023408

0801dde0 <__tz_lock>:
 801dde0:	4801      	ldr	r0, [pc, #4]	; (801dde8 <__tz_lock+0x8>)
 801dde2:	f7fd bc2c 	b.w	801b63e <__retarget_lock_acquire>
 801dde6:	bf00      	nop
 801dde8:	200090d3 	.word	0x200090d3

0801ddec <__tz_unlock>:
 801ddec:	4801      	ldr	r0, [pc, #4]	; (801ddf4 <__tz_unlock+0x8>)
 801ddee:	f7fd bc28 	b.w	801b642 <__retarget_lock_release>
 801ddf2:	bf00      	nop
 801ddf4:	200090d3 	.word	0x200090d3

0801ddf8 <_tzset_unlocked>:
 801ddf8:	4b01      	ldr	r3, [pc, #4]	; (801de00 <_tzset_unlocked+0x8>)
 801ddfa:	6818      	ldr	r0, [r3, #0]
 801ddfc:	f000 b802 	b.w	801de04 <_tzset_unlocked_r>
 801de00:	20000200 	.word	0x20000200

0801de04 <_tzset_unlocked_r>:
 801de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de08:	b08d      	sub	sp, #52	; 0x34
 801de0a:	4607      	mov	r7, r0
 801de0c:	f001 fdc2 	bl	801f994 <__gettzinfo>
 801de10:	49ae      	ldr	r1, [pc, #696]	; (801e0cc <_tzset_unlocked_r+0x2c8>)
 801de12:	4eaf      	ldr	r6, [pc, #700]	; (801e0d0 <_tzset_unlocked_r+0x2cc>)
 801de14:	4605      	mov	r5, r0
 801de16:	4638      	mov	r0, r7
 801de18:	f001 fdb4 	bl	801f984 <_getenv_r>
 801de1c:	4604      	mov	r4, r0
 801de1e:	b970      	cbnz	r0, 801de3e <_tzset_unlocked_r+0x3a>
 801de20:	4bac      	ldr	r3, [pc, #688]	; (801e0d4 <_tzset_unlocked_r+0x2d0>)
 801de22:	4aad      	ldr	r2, [pc, #692]	; (801e0d8 <_tzset_unlocked_r+0x2d4>)
 801de24:	6018      	str	r0, [r3, #0]
 801de26:	4bad      	ldr	r3, [pc, #692]	; (801e0dc <_tzset_unlocked_r+0x2d8>)
 801de28:	6018      	str	r0, [r3, #0]
 801de2a:	4bad      	ldr	r3, [pc, #692]	; (801e0e0 <_tzset_unlocked_r+0x2dc>)
 801de2c:	6830      	ldr	r0, [r6, #0]
 801de2e:	e9c3 2200 	strd	r2, r2, [r3]
 801de32:	f7fd fc11 	bl	801b658 <free>
 801de36:	6034      	str	r4, [r6, #0]
 801de38:	b00d      	add	sp, #52	; 0x34
 801de3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de3e:	6831      	ldr	r1, [r6, #0]
 801de40:	2900      	cmp	r1, #0
 801de42:	d15f      	bne.n	801df04 <_tzset_unlocked_r+0x100>
 801de44:	6830      	ldr	r0, [r6, #0]
 801de46:	f7fd fc07 	bl	801b658 <free>
 801de4a:	4620      	mov	r0, r4
 801de4c:	f7e2 f9da 	bl	8000204 <strlen>
 801de50:	1c41      	adds	r1, r0, #1
 801de52:	4638      	mov	r0, r7
 801de54:	f7fd ff06 	bl	801bc64 <_malloc_r>
 801de58:	6030      	str	r0, [r6, #0]
 801de5a:	2800      	cmp	r0, #0
 801de5c:	d157      	bne.n	801df0e <_tzset_unlocked_r+0x10a>
 801de5e:	7823      	ldrb	r3, [r4, #0]
 801de60:	4aa0      	ldr	r2, [pc, #640]	; (801e0e4 <_tzset_unlocked_r+0x2e0>)
 801de62:	49a1      	ldr	r1, [pc, #644]	; (801e0e8 <_tzset_unlocked_r+0x2e4>)
 801de64:	2b3a      	cmp	r3, #58	; 0x3a
 801de66:	bf08      	it	eq
 801de68:	3401      	addeq	r4, #1
 801de6a:	ae0a      	add	r6, sp, #40	; 0x28
 801de6c:	4633      	mov	r3, r6
 801de6e:	4620      	mov	r0, r4
 801de70:	f7fe ff3e 	bl	801ccf0 <siscanf>
 801de74:	2800      	cmp	r0, #0
 801de76:	dddf      	ble.n	801de38 <_tzset_unlocked_r+0x34>
 801de78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de7a:	18e7      	adds	r7, r4, r3
 801de7c:	5ce3      	ldrb	r3, [r4, r3]
 801de7e:	2b2d      	cmp	r3, #45	; 0x2d
 801de80:	d149      	bne.n	801df16 <_tzset_unlocked_r+0x112>
 801de82:	3701      	adds	r7, #1
 801de84:	f04f 34ff 	mov.w	r4, #4294967295
 801de88:	f10d 0a20 	add.w	sl, sp, #32
 801de8c:	f10d 0b1e 	add.w	fp, sp, #30
 801de90:	f04f 0800 	mov.w	r8, #0
 801de94:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801de98:	4994      	ldr	r1, [pc, #592]	; (801e0ec <_tzset_unlocked_r+0x2e8>)
 801de9a:	9603      	str	r6, [sp, #12]
 801de9c:	f8cd b000 	str.w	fp, [sp]
 801dea0:	4633      	mov	r3, r6
 801dea2:	aa07      	add	r2, sp, #28
 801dea4:	4638      	mov	r0, r7
 801dea6:	f8ad 801e 	strh.w	r8, [sp, #30]
 801deaa:	f8ad 8020 	strh.w	r8, [sp, #32]
 801deae:	f7fe ff1f 	bl	801ccf0 <siscanf>
 801deb2:	4540      	cmp	r0, r8
 801deb4:	ddc0      	ble.n	801de38 <_tzset_unlocked_r+0x34>
 801deb6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801deba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801debe:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801e0f8 <_tzset_unlocked_r+0x2f4>
 801dec2:	213c      	movs	r1, #60	; 0x3c
 801dec4:	fb01 2203 	mla	r2, r1, r3, r2
 801dec8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801decc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ded0:	fb01 2303 	mla	r3, r1, r3, r2
 801ded4:	435c      	muls	r4, r3
 801ded6:	62ac      	str	r4, [r5, #40]	; 0x28
 801ded8:	4c81      	ldr	r4, [pc, #516]	; (801e0e0 <_tzset_unlocked_r+0x2dc>)
 801deda:	4b82      	ldr	r3, [pc, #520]	; (801e0e4 <_tzset_unlocked_r+0x2e0>)
 801dedc:	6023      	str	r3, [r4, #0]
 801dede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dee0:	4981      	ldr	r1, [pc, #516]	; (801e0e8 <_tzset_unlocked_r+0x2e4>)
 801dee2:	441f      	add	r7, r3
 801dee4:	464a      	mov	r2, r9
 801dee6:	4633      	mov	r3, r6
 801dee8:	4638      	mov	r0, r7
 801deea:	f7fe ff01 	bl	801ccf0 <siscanf>
 801deee:	4540      	cmp	r0, r8
 801def0:	dc16      	bgt.n	801df20 <_tzset_unlocked_r+0x11c>
 801def2:	6823      	ldr	r3, [r4, #0]
 801def4:	6063      	str	r3, [r4, #4]
 801def6:	4b77      	ldr	r3, [pc, #476]	; (801e0d4 <_tzset_unlocked_r+0x2d0>)
 801def8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801defa:	601a      	str	r2, [r3, #0]
 801defc:	4b77      	ldr	r3, [pc, #476]	; (801e0dc <_tzset_unlocked_r+0x2d8>)
 801defe:	f8c3 8000 	str.w	r8, [r3]
 801df02:	e799      	b.n	801de38 <_tzset_unlocked_r+0x34>
 801df04:	f7e2 f974 	bl	80001f0 <strcmp>
 801df08:	2800      	cmp	r0, #0
 801df0a:	d19b      	bne.n	801de44 <_tzset_unlocked_r+0x40>
 801df0c:	e794      	b.n	801de38 <_tzset_unlocked_r+0x34>
 801df0e:	4621      	mov	r1, r4
 801df10:	f7fe ff5f 	bl	801cdd2 <strcpy>
 801df14:	e7a3      	b.n	801de5e <_tzset_unlocked_r+0x5a>
 801df16:	2b2b      	cmp	r3, #43	; 0x2b
 801df18:	bf08      	it	eq
 801df1a:	3701      	addeq	r7, #1
 801df1c:	2401      	movs	r4, #1
 801df1e:	e7b3      	b.n	801de88 <_tzset_unlocked_r+0x84>
 801df20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df22:	f8c4 9004 	str.w	r9, [r4, #4]
 801df26:	18fc      	adds	r4, r7, r3
 801df28:	5cfb      	ldrb	r3, [r7, r3]
 801df2a:	2b2d      	cmp	r3, #45	; 0x2d
 801df2c:	f040 808b 	bne.w	801e046 <_tzset_unlocked_r+0x242>
 801df30:	3401      	adds	r4, #1
 801df32:	f04f 37ff 	mov.w	r7, #4294967295
 801df36:	2300      	movs	r3, #0
 801df38:	f8ad 301c 	strh.w	r3, [sp, #28]
 801df3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801df40:	f8ad 3020 	strh.w	r3, [sp, #32]
 801df44:	930a      	str	r3, [sp, #40]	; 0x28
 801df46:	e9cd a602 	strd	sl, r6, [sp, #8]
 801df4a:	e9cd b600 	strd	fp, r6, [sp]
 801df4e:	4967      	ldr	r1, [pc, #412]	; (801e0ec <_tzset_unlocked_r+0x2e8>)
 801df50:	4633      	mov	r3, r6
 801df52:	aa07      	add	r2, sp, #28
 801df54:	4620      	mov	r0, r4
 801df56:	f7fe fecb 	bl	801ccf0 <siscanf>
 801df5a:	2800      	cmp	r0, #0
 801df5c:	dc78      	bgt.n	801e050 <_tzset_unlocked_r+0x24c>
 801df5e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801df60:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801df64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df66:	652f      	str	r7, [r5, #80]	; 0x50
 801df68:	441c      	add	r4, r3
 801df6a:	462f      	mov	r7, r5
 801df6c:	f04f 0900 	mov.w	r9, #0
 801df70:	7823      	ldrb	r3, [r4, #0]
 801df72:	2b2c      	cmp	r3, #44	; 0x2c
 801df74:	bf08      	it	eq
 801df76:	3401      	addeq	r4, #1
 801df78:	f894 8000 	ldrb.w	r8, [r4]
 801df7c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801df80:	d178      	bne.n	801e074 <_tzset_unlocked_r+0x270>
 801df82:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801df86:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801df8a:	ab09      	add	r3, sp, #36	; 0x24
 801df8c:	9300      	str	r3, [sp, #0]
 801df8e:	4958      	ldr	r1, [pc, #352]	; (801e0f0 <_tzset_unlocked_r+0x2ec>)
 801df90:	9603      	str	r6, [sp, #12]
 801df92:	4633      	mov	r3, r6
 801df94:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801df98:	4620      	mov	r0, r4
 801df9a:	f7fe fea9 	bl	801ccf0 <siscanf>
 801df9e:	2803      	cmp	r0, #3
 801dfa0:	f47f af4a 	bne.w	801de38 <_tzset_unlocked_r+0x34>
 801dfa4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801dfa8:	1e4b      	subs	r3, r1, #1
 801dfaa:	2b0b      	cmp	r3, #11
 801dfac:	f63f af44 	bhi.w	801de38 <_tzset_unlocked_r+0x34>
 801dfb0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801dfb4:	1e53      	subs	r3, r2, #1
 801dfb6:	2b04      	cmp	r3, #4
 801dfb8:	f63f af3e 	bhi.w	801de38 <_tzset_unlocked_r+0x34>
 801dfbc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801dfc0:	2b06      	cmp	r3, #6
 801dfc2:	f63f af39 	bhi.w	801de38 <_tzset_unlocked_r+0x34>
 801dfc6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801dfca:	f887 8008 	strb.w	r8, [r7, #8]
 801dfce:	617b      	str	r3, [r7, #20]
 801dfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfd2:	eb04 0803 	add.w	r8, r4, r3
 801dfd6:	2302      	movs	r3, #2
 801dfd8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dfdc:	2300      	movs	r3, #0
 801dfde:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dfe2:	f8ad 3020 	strh.w	r3, [sp, #32]
 801dfe6:	930a      	str	r3, [sp, #40]	; 0x28
 801dfe8:	f898 3000 	ldrb.w	r3, [r8]
 801dfec:	2b2f      	cmp	r3, #47	; 0x2f
 801dfee:	d109      	bne.n	801e004 <_tzset_unlocked_r+0x200>
 801dff0:	e9cd a602 	strd	sl, r6, [sp, #8]
 801dff4:	e9cd b600 	strd	fp, r6, [sp]
 801dff8:	493e      	ldr	r1, [pc, #248]	; (801e0f4 <_tzset_unlocked_r+0x2f0>)
 801dffa:	4633      	mov	r3, r6
 801dffc:	aa07      	add	r2, sp, #28
 801dffe:	4640      	mov	r0, r8
 801e000:	f7fe fe76 	bl	801ccf0 <siscanf>
 801e004:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e008:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e00c:	213c      	movs	r1, #60	; 0x3c
 801e00e:	fb01 2203 	mla	r2, r1, r3, r2
 801e012:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e016:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e01a:	fb01 2303 	mla	r3, r1, r3, r2
 801e01e:	61bb      	str	r3, [r7, #24]
 801e020:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e022:	3728      	adds	r7, #40	; 0x28
 801e024:	4444      	add	r4, r8
 801e026:	f1b9 0f00 	cmp.w	r9, #0
 801e02a:	d020      	beq.n	801e06e <_tzset_unlocked_r+0x26a>
 801e02c:	6868      	ldr	r0, [r5, #4]
 801e02e:	f7ff fe2f 	bl	801dc90 <__tzcalc_limits>
 801e032:	4b28      	ldr	r3, [pc, #160]	; (801e0d4 <_tzset_unlocked_r+0x2d0>)
 801e034:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801e036:	601a      	str	r2, [r3, #0]
 801e038:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801e03a:	1a9b      	subs	r3, r3, r2
 801e03c:	4a27      	ldr	r2, [pc, #156]	; (801e0dc <_tzset_unlocked_r+0x2d8>)
 801e03e:	bf18      	it	ne
 801e040:	2301      	movne	r3, #1
 801e042:	6013      	str	r3, [r2, #0]
 801e044:	e6f8      	b.n	801de38 <_tzset_unlocked_r+0x34>
 801e046:	2b2b      	cmp	r3, #43	; 0x2b
 801e048:	bf08      	it	eq
 801e04a:	3401      	addeq	r4, #1
 801e04c:	2701      	movs	r7, #1
 801e04e:	e772      	b.n	801df36 <_tzset_unlocked_r+0x132>
 801e050:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e054:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e058:	213c      	movs	r1, #60	; 0x3c
 801e05a:	fb01 2203 	mla	r2, r1, r3, r2
 801e05e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e062:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e066:	fb01 2303 	mla	r3, r1, r3, r2
 801e06a:	435f      	muls	r7, r3
 801e06c:	e77a      	b.n	801df64 <_tzset_unlocked_r+0x160>
 801e06e:	f04f 0901 	mov.w	r9, #1
 801e072:	e77d      	b.n	801df70 <_tzset_unlocked_r+0x16c>
 801e074:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801e078:	bf06      	itte	eq
 801e07a:	3401      	addeq	r4, #1
 801e07c:	4643      	moveq	r3, r8
 801e07e:	2344      	movne	r3, #68	; 0x44
 801e080:	220a      	movs	r2, #10
 801e082:	a90b      	add	r1, sp, #44	; 0x2c
 801e084:	4620      	mov	r0, r4
 801e086:	9305      	str	r3, [sp, #20]
 801e088:	f7ff fdf8 	bl	801dc7c <strtoul>
 801e08c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801e090:	9b05      	ldr	r3, [sp, #20]
 801e092:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801e096:	45a0      	cmp	r8, r4
 801e098:	d114      	bne.n	801e0c4 <_tzset_unlocked_r+0x2c0>
 801e09a:	234d      	movs	r3, #77	; 0x4d
 801e09c:	f1b9 0f00 	cmp.w	r9, #0
 801e0a0:	d107      	bne.n	801e0b2 <_tzset_unlocked_r+0x2ae>
 801e0a2:	722b      	strb	r3, [r5, #8]
 801e0a4:	2103      	movs	r1, #3
 801e0a6:	2302      	movs	r3, #2
 801e0a8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801e0ac:	f8c5 9014 	str.w	r9, [r5, #20]
 801e0b0:	e791      	b.n	801dfd6 <_tzset_unlocked_r+0x1d2>
 801e0b2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801e0b6:	220b      	movs	r2, #11
 801e0b8:	2301      	movs	r3, #1
 801e0ba:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801e0be:	2300      	movs	r3, #0
 801e0c0:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e0c2:	e788      	b.n	801dfd6 <_tzset_unlocked_r+0x1d2>
 801e0c4:	b280      	uxth	r0, r0
 801e0c6:	723b      	strb	r3, [r7, #8]
 801e0c8:	6178      	str	r0, [r7, #20]
 801e0ca:	e784      	b.n	801dfd6 <_tzset_unlocked_r+0x1d2>
 801e0cc:	080234f0 	.word	0x080234f0
 801e0d0:	20005ed4 	.word	0x20005ed4
 801e0d4:	20005edc 	.word	0x20005edc
 801e0d8:	080234f3 	.word	0x080234f3
 801e0dc:	20005ed8 	.word	0x20005ed8
 801e0e0:	20000264 	.word	0x20000264
 801e0e4:	20005ec7 	.word	0x20005ec7
 801e0e8:	080234f7 	.word	0x080234f7
 801e0ec:	0802351a 	.word	0x0802351a
 801e0f0:	08023506 	.word	0x08023506
 801e0f4:	08023519 	.word	0x08023519
 801e0f8:	20005ebc 	.word	0x20005ebc

0801e0fc <_vsniprintf_r>:
 801e0fc:	b530      	push	{r4, r5, lr}
 801e0fe:	1e14      	subs	r4, r2, #0
 801e100:	4605      	mov	r5, r0
 801e102:	b09b      	sub	sp, #108	; 0x6c
 801e104:	4618      	mov	r0, r3
 801e106:	da05      	bge.n	801e114 <_vsniprintf_r+0x18>
 801e108:	238b      	movs	r3, #139	; 0x8b
 801e10a:	602b      	str	r3, [r5, #0]
 801e10c:	f04f 30ff 	mov.w	r0, #4294967295
 801e110:	b01b      	add	sp, #108	; 0x6c
 801e112:	bd30      	pop	{r4, r5, pc}
 801e114:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e118:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e11c:	bf14      	ite	ne
 801e11e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801e122:	4623      	moveq	r3, r4
 801e124:	9302      	str	r3, [sp, #8]
 801e126:	9305      	str	r3, [sp, #20]
 801e128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e12c:	9100      	str	r1, [sp, #0]
 801e12e:	9104      	str	r1, [sp, #16]
 801e130:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e134:	4602      	mov	r2, r0
 801e136:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e138:	4669      	mov	r1, sp
 801e13a:	4628      	mov	r0, r5
 801e13c:	f002 fac2 	bl	80206c4 <_svfiprintf_r>
 801e140:	1c43      	adds	r3, r0, #1
 801e142:	bfbc      	itt	lt
 801e144:	238b      	movlt	r3, #139	; 0x8b
 801e146:	602b      	strlt	r3, [r5, #0]
 801e148:	2c00      	cmp	r4, #0
 801e14a:	d0e1      	beq.n	801e110 <_vsniprintf_r+0x14>
 801e14c:	9b00      	ldr	r3, [sp, #0]
 801e14e:	2200      	movs	r2, #0
 801e150:	701a      	strb	r2, [r3, #0]
 801e152:	e7dd      	b.n	801e110 <_vsniprintf_r+0x14>

0801e154 <vsniprintf>:
 801e154:	b507      	push	{r0, r1, r2, lr}
 801e156:	9300      	str	r3, [sp, #0]
 801e158:	4613      	mov	r3, r2
 801e15a:	460a      	mov	r2, r1
 801e15c:	4601      	mov	r1, r0
 801e15e:	4803      	ldr	r0, [pc, #12]	; (801e16c <vsniprintf+0x18>)
 801e160:	6800      	ldr	r0, [r0, #0]
 801e162:	f7ff ffcb 	bl	801e0fc <_vsniprintf_r>
 801e166:	b003      	add	sp, #12
 801e168:	f85d fb04 	ldr.w	pc, [sp], #4
 801e16c:	20000200 	.word	0x20000200

0801e170 <__swbuf_r>:
 801e170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e172:	460e      	mov	r6, r1
 801e174:	4614      	mov	r4, r2
 801e176:	4605      	mov	r5, r0
 801e178:	b118      	cbz	r0, 801e182 <__swbuf_r+0x12>
 801e17a:	6983      	ldr	r3, [r0, #24]
 801e17c:	b90b      	cbnz	r3, 801e182 <__swbuf_r+0x12>
 801e17e:	f7fd f87f 	bl	801b280 <__sinit>
 801e182:	4b21      	ldr	r3, [pc, #132]	; (801e208 <__swbuf_r+0x98>)
 801e184:	429c      	cmp	r4, r3
 801e186:	d12b      	bne.n	801e1e0 <__swbuf_r+0x70>
 801e188:	686c      	ldr	r4, [r5, #4]
 801e18a:	69a3      	ldr	r3, [r4, #24]
 801e18c:	60a3      	str	r3, [r4, #8]
 801e18e:	89a3      	ldrh	r3, [r4, #12]
 801e190:	071a      	lsls	r2, r3, #28
 801e192:	d52f      	bpl.n	801e1f4 <__swbuf_r+0x84>
 801e194:	6923      	ldr	r3, [r4, #16]
 801e196:	b36b      	cbz	r3, 801e1f4 <__swbuf_r+0x84>
 801e198:	6923      	ldr	r3, [r4, #16]
 801e19a:	6820      	ldr	r0, [r4, #0]
 801e19c:	1ac0      	subs	r0, r0, r3
 801e19e:	6963      	ldr	r3, [r4, #20]
 801e1a0:	b2f6      	uxtb	r6, r6
 801e1a2:	4283      	cmp	r3, r0
 801e1a4:	4637      	mov	r7, r6
 801e1a6:	dc04      	bgt.n	801e1b2 <__swbuf_r+0x42>
 801e1a8:	4621      	mov	r1, r4
 801e1aa:	4628      	mov	r0, r5
 801e1ac:	f000 fff2 	bl	801f194 <_fflush_r>
 801e1b0:	bb30      	cbnz	r0, 801e200 <__swbuf_r+0x90>
 801e1b2:	68a3      	ldr	r3, [r4, #8]
 801e1b4:	3b01      	subs	r3, #1
 801e1b6:	60a3      	str	r3, [r4, #8]
 801e1b8:	6823      	ldr	r3, [r4, #0]
 801e1ba:	1c5a      	adds	r2, r3, #1
 801e1bc:	6022      	str	r2, [r4, #0]
 801e1be:	701e      	strb	r6, [r3, #0]
 801e1c0:	6963      	ldr	r3, [r4, #20]
 801e1c2:	3001      	adds	r0, #1
 801e1c4:	4283      	cmp	r3, r0
 801e1c6:	d004      	beq.n	801e1d2 <__swbuf_r+0x62>
 801e1c8:	89a3      	ldrh	r3, [r4, #12]
 801e1ca:	07db      	lsls	r3, r3, #31
 801e1cc:	d506      	bpl.n	801e1dc <__swbuf_r+0x6c>
 801e1ce:	2e0a      	cmp	r6, #10
 801e1d0:	d104      	bne.n	801e1dc <__swbuf_r+0x6c>
 801e1d2:	4621      	mov	r1, r4
 801e1d4:	4628      	mov	r0, r5
 801e1d6:	f000 ffdd 	bl	801f194 <_fflush_r>
 801e1da:	b988      	cbnz	r0, 801e200 <__swbuf_r+0x90>
 801e1dc:	4638      	mov	r0, r7
 801e1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e1e0:	4b0a      	ldr	r3, [pc, #40]	; (801e20c <__swbuf_r+0x9c>)
 801e1e2:	429c      	cmp	r4, r3
 801e1e4:	d101      	bne.n	801e1ea <__swbuf_r+0x7a>
 801e1e6:	68ac      	ldr	r4, [r5, #8]
 801e1e8:	e7cf      	b.n	801e18a <__swbuf_r+0x1a>
 801e1ea:	4b09      	ldr	r3, [pc, #36]	; (801e210 <__swbuf_r+0xa0>)
 801e1ec:	429c      	cmp	r4, r3
 801e1ee:	bf08      	it	eq
 801e1f0:	68ec      	ldreq	r4, [r5, #12]
 801e1f2:	e7ca      	b.n	801e18a <__swbuf_r+0x1a>
 801e1f4:	4621      	mov	r1, r4
 801e1f6:	4628      	mov	r0, r5
 801e1f8:	f000 f81e 	bl	801e238 <__swsetup_r>
 801e1fc:	2800      	cmp	r0, #0
 801e1fe:	d0cb      	beq.n	801e198 <__swbuf_r+0x28>
 801e200:	f04f 37ff 	mov.w	r7, #4294967295
 801e204:	e7ea      	b.n	801e1dc <__swbuf_r+0x6c>
 801e206:	bf00      	nop
 801e208:	080232ec 	.word	0x080232ec
 801e20c:	0802330c 	.word	0x0802330c
 801e210:	080232cc 	.word	0x080232cc

0801e214 <_write_r>:
 801e214:	b538      	push	{r3, r4, r5, lr}
 801e216:	4d07      	ldr	r5, [pc, #28]	; (801e234 <_write_r+0x20>)
 801e218:	4604      	mov	r4, r0
 801e21a:	4608      	mov	r0, r1
 801e21c:	4611      	mov	r1, r2
 801e21e:	2200      	movs	r2, #0
 801e220:	602a      	str	r2, [r5, #0]
 801e222:	461a      	mov	r2, r3
 801e224:	f7e5 f9c7 	bl	80035b6 <_write>
 801e228:	1c43      	adds	r3, r0, #1
 801e22a:	d102      	bne.n	801e232 <_write_r+0x1e>
 801e22c:	682b      	ldr	r3, [r5, #0]
 801e22e:	b103      	cbz	r3, 801e232 <_write_r+0x1e>
 801e230:	6023      	str	r3, [r4, #0]
 801e232:	bd38      	pop	{r3, r4, r5, pc}
 801e234:	200090d8 	.word	0x200090d8

0801e238 <__swsetup_r>:
 801e238:	4b32      	ldr	r3, [pc, #200]	; (801e304 <__swsetup_r+0xcc>)
 801e23a:	b570      	push	{r4, r5, r6, lr}
 801e23c:	681d      	ldr	r5, [r3, #0]
 801e23e:	4606      	mov	r6, r0
 801e240:	460c      	mov	r4, r1
 801e242:	b125      	cbz	r5, 801e24e <__swsetup_r+0x16>
 801e244:	69ab      	ldr	r3, [r5, #24]
 801e246:	b913      	cbnz	r3, 801e24e <__swsetup_r+0x16>
 801e248:	4628      	mov	r0, r5
 801e24a:	f7fd f819 	bl	801b280 <__sinit>
 801e24e:	4b2e      	ldr	r3, [pc, #184]	; (801e308 <__swsetup_r+0xd0>)
 801e250:	429c      	cmp	r4, r3
 801e252:	d10f      	bne.n	801e274 <__swsetup_r+0x3c>
 801e254:	686c      	ldr	r4, [r5, #4]
 801e256:	89a3      	ldrh	r3, [r4, #12]
 801e258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e25c:	0719      	lsls	r1, r3, #28
 801e25e:	d42c      	bmi.n	801e2ba <__swsetup_r+0x82>
 801e260:	06dd      	lsls	r5, r3, #27
 801e262:	d411      	bmi.n	801e288 <__swsetup_r+0x50>
 801e264:	2309      	movs	r3, #9
 801e266:	6033      	str	r3, [r6, #0]
 801e268:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e26c:	81a3      	strh	r3, [r4, #12]
 801e26e:	f04f 30ff 	mov.w	r0, #4294967295
 801e272:	e03e      	b.n	801e2f2 <__swsetup_r+0xba>
 801e274:	4b25      	ldr	r3, [pc, #148]	; (801e30c <__swsetup_r+0xd4>)
 801e276:	429c      	cmp	r4, r3
 801e278:	d101      	bne.n	801e27e <__swsetup_r+0x46>
 801e27a:	68ac      	ldr	r4, [r5, #8]
 801e27c:	e7eb      	b.n	801e256 <__swsetup_r+0x1e>
 801e27e:	4b24      	ldr	r3, [pc, #144]	; (801e310 <__swsetup_r+0xd8>)
 801e280:	429c      	cmp	r4, r3
 801e282:	bf08      	it	eq
 801e284:	68ec      	ldreq	r4, [r5, #12]
 801e286:	e7e6      	b.n	801e256 <__swsetup_r+0x1e>
 801e288:	0758      	lsls	r0, r3, #29
 801e28a:	d512      	bpl.n	801e2b2 <__swsetup_r+0x7a>
 801e28c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e28e:	b141      	cbz	r1, 801e2a2 <__swsetup_r+0x6a>
 801e290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e294:	4299      	cmp	r1, r3
 801e296:	d002      	beq.n	801e29e <__swsetup_r+0x66>
 801e298:	4630      	mov	r0, r6
 801e29a:	f7fd fc93 	bl	801bbc4 <_free_r>
 801e29e:	2300      	movs	r3, #0
 801e2a0:	6363      	str	r3, [r4, #52]	; 0x34
 801e2a2:	89a3      	ldrh	r3, [r4, #12]
 801e2a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e2a8:	81a3      	strh	r3, [r4, #12]
 801e2aa:	2300      	movs	r3, #0
 801e2ac:	6063      	str	r3, [r4, #4]
 801e2ae:	6923      	ldr	r3, [r4, #16]
 801e2b0:	6023      	str	r3, [r4, #0]
 801e2b2:	89a3      	ldrh	r3, [r4, #12]
 801e2b4:	f043 0308 	orr.w	r3, r3, #8
 801e2b8:	81a3      	strh	r3, [r4, #12]
 801e2ba:	6923      	ldr	r3, [r4, #16]
 801e2bc:	b94b      	cbnz	r3, 801e2d2 <__swsetup_r+0x9a>
 801e2be:	89a3      	ldrh	r3, [r4, #12]
 801e2c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e2c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e2c8:	d003      	beq.n	801e2d2 <__swsetup_r+0x9a>
 801e2ca:	4621      	mov	r1, r4
 801e2cc:	4630      	mov	r0, r6
 801e2ce:	f001 fc4f 	bl	801fb70 <__smakebuf_r>
 801e2d2:	89a0      	ldrh	r0, [r4, #12]
 801e2d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e2d8:	f010 0301 	ands.w	r3, r0, #1
 801e2dc:	d00a      	beq.n	801e2f4 <__swsetup_r+0xbc>
 801e2de:	2300      	movs	r3, #0
 801e2e0:	60a3      	str	r3, [r4, #8]
 801e2e2:	6963      	ldr	r3, [r4, #20]
 801e2e4:	425b      	negs	r3, r3
 801e2e6:	61a3      	str	r3, [r4, #24]
 801e2e8:	6923      	ldr	r3, [r4, #16]
 801e2ea:	b943      	cbnz	r3, 801e2fe <__swsetup_r+0xc6>
 801e2ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e2f0:	d1ba      	bne.n	801e268 <__swsetup_r+0x30>
 801e2f2:	bd70      	pop	{r4, r5, r6, pc}
 801e2f4:	0781      	lsls	r1, r0, #30
 801e2f6:	bf58      	it	pl
 801e2f8:	6963      	ldrpl	r3, [r4, #20]
 801e2fa:	60a3      	str	r3, [r4, #8]
 801e2fc:	e7f4      	b.n	801e2e8 <__swsetup_r+0xb0>
 801e2fe:	2000      	movs	r0, #0
 801e300:	e7f7      	b.n	801e2f2 <__swsetup_r+0xba>
 801e302:	bf00      	nop
 801e304:	20000200 	.word	0x20000200
 801e308:	080232ec 	.word	0x080232ec
 801e30c:	0802330c 	.word	0x0802330c
 801e310:	080232cc 	.word	0x080232cc

0801e314 <__assert_func>:
 801e314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e316:	4614      	mov	r4, r2
 801e318:	461a      	mov	r2, r3
 801e31a:	4b09      	ldr	r3, [pc, #36]	; (801e340 <__assert_func+0x2c>)
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	4605      	mov	r5, r0
 801e320:	68d8      	ldr	r0, [r3, #12]
 801e322:	b14c      	cbz	r4, 801e338 <__assert_func+0x24>
 801e324:	4b07      	ldr	r3, [pc, #28]	; (801e344 <__assert_func+0x30>)
 801e326:	9100      	str	r1, [sp, #0]
 801e328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e32c:	4906      	ldr	r1, [pc, #24]	; (801e348 <__assert_func+0x34>)
 801e32e:	462b      	mov	r3, r5
 801e330:	f000 ff6c 	bl	801f20c <fiprintf>
 801e334:	f7fc ff3e 	bl	801b1b4 <abort>
 801e338:	4b04      	ldr	r3, [pc, #16]	; (801e34c <__assert_func+0x38>)
 801e33a:	461c      	mov	r4, r3
 801e33c:	e7f3      	b.n	801e326 <__assert_func+0x12>
 801e33e:	bf00      	nop
 801e340:	20000200 	.word	0x20000200
 801e344:	0802352c 	.word	0x0802352c
 801e348:	08023539 	.word	0x08023539
 801e34c:	08023567 	.word	0x08023567

0801e350 <_close_r>:
 801e350:	b538      	push	{r3, r4, r5, lr}
 801e352:	4d06      	ldr	r5, [pc, #24]	; (801e36c <_close_r+0x1c>)
 801e354:	2300      	movs	r3, #0
 801e356:	4604      	mov	r4, r0
 801e358:	4608      	mov	r0, r1
 801e35a:	602b      	str	r3, [r5, #0]
 801e35c:	f7e5 f947 	bl	80035ee <_close>
 801e360:	1c43      	adds	r3, r0, #1
 801e362:	d102      	bne.n	801e36a <_close_r+0x1a>
 801e364:	682b      	ldr	r3, [r5, #0]
 801e366:	b103      	cbz	r3, 801e36a <_close_r+0x1a>
 801e368:	6023      	str	r3, [r4, #0]
 801e36a:	bd38      	pop	{r3, r4, r5, pc}
 801e36c:	200090d8 	.word	0x200090d8

0801e370 <div>:
 801e370:	2900      	cmp	r1, #0
 801e372:	b510      	push	{r4, lr}
 801e374:	fb91 f4f2 	sdiv	r4, r1, r2
 801e378:	fb02 1314 	mls	r3, r2, r4, r1
 801e37c:	db06      	blt.n	801e38c <div+0x1c>
 801e37e:	2b00      	cmp	r3, #0
 801e380:	da01      	bge.n	801e386 <div+0x16>
 801e382:	3401      	adds	r4, #1
 801e384:	1a9b      	subs	r3, r3, r2
 801e386:	e9c0 4300 	strd	r4, r3, [r0]
 801e38a:	bd10      	pop	{r4, pc}
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	bfc4      	itt	gt
 801e390:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801e394:	189b      	addgt	r3, r3, r2
 801e396:	e7f6      	b.n	801e386 <div+0x16>

0801e398 <quorem>:
 801e398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e39c:	6903      	ldr	r3, [r0, #16]
 801e39e:	690c      	ldr	r4, [r1, #16]
 801e3a0:	42a3      	cmp	r3, r4
 801e3a2:	4607      	mov	r7, r0
 801e3a4:	f2c0 8081 	blt.w	801e4aa <quorem+0x112>
 801e3a8:	3c01      	subs	r4, #1
 801e3aa:	f101 0814 	add.w	r8, r1, #20
 801e3ae:	f100 0514 	add.w	r5, r0, #20
 801e3b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e3b6:	9301      	str	r3, [sp, #4]
 801e3b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e3bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e3c0:	3301      	adds	r3, #1
 801e3c2:	429a      	cmp	r2, r3
 801e3c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e3c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e3cc:	fbb2 f6f3 	udiv	r6, r2, r3
 801e3d0:	d331      	bcc.n	801e436 <quorem+0x9e>
 801e3d2:	f04f 0e00 	mov.w	lr, #0
 801e3d6:	4640      	mov	r0, r8
 801e3d8:	46ac      	mov	ip, r5
 801e3da:	46f2      	mov	sl, lr
 801e3dc:	f850 2b04 	ldr.w	r2, [r0], #4
 801e3e0:	b293      	uxth	r3, r2
 801e3e2:	fb06 e303 	mla	r3, r6, r3, lr
 801e3e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801e3ea:	b29b      	uxth	r3, r3
 801e3ec:	ebaa 0303 	sub.w	r3, sl, r3
 801e3f0:	0c12      	lsrs	r2, r2, #16
 801e3f2:	f8dc a000 	ldr.w	sl, [ip]
 801e3f6:	fb06 e202 	mla	r2, r6, r2, lr
 801e3fa:	fa13 f38a 	uxtah	r3, r3, sl
 801e3fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e402:	fa1f fa82 	uxth.w	sl, r2
 801e406:	f8dc 2000 	ldr.w	r2, [ip]
 801e40a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801e40e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e412:	b29b      	uxth	r3, r3
 801e414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e418:	4581      	cmp	r9, r0
 801e41a:	f84c 3b04 	str.w	r3, [ip], #4
 801e41e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e422:	d2db      	bcs.n	801e3dc <quorem+0x44>
 801e424:	f855 300b 	ldr.w	r3, [r5, fp]
 801e428:	b92b      	cbnz	r3, 801e436 <quorem+0x9e>
 801e42a:	9b01      	ldr	r3, [sp, #4]
 801e42c:	3b04      	subs	r3, #4
 801e42e:	429d      	cmp	r5, r3
 801e430:	461a      	mov	r2, r3
 801e432:	d32e      	bcc.n	801e492 <quorem+0xfa>
 801e434:	613c      	str	r4, [r7, #16]
 801e436:	4638      	mov	r0, r7
 801e438:	f001 fec0 	bl	80201bc <__mcmp>
 801e43c:	2800      	cmp	r0, #0
 801e43e:	db24      	blt.n	801e48a <quorem+0xf2>
 801e440:	3601      	adds	r6, #1
 801e442:	4628      	mov	r0, r5
 801e444:	f04f 0c00 	mov.w	ip, #0
 801e448:	f858 2b04 	ldr.w	r2, [r8], #4
 801e44c:	f8d0 e000 	ldr.w	lr, [r0]
 801e450:	b293      	uxth	r3, r2
 801e452:	ebac 0303 	sub.w	r3, ip, r3
 801e456:	0c12      	lsrs	r2, r2, #16
 801e458:	fa13 f38e 	uxtah	r3, r3, lr
 801e45c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e464:	b29b      	uxth	r3, r3
 801e466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e46a:	45c1      	cmp	r9, r8
 801e46c:	f840 3b04 	str.w	r3, [r0], #4
 801e470:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e474:	d2e8      	bcs.n	801e448 <quorem+0xb0>
 801e476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e47a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e47e:	b922      	cbnz	r2, 801e48a <quorem+0xf2>
 801e480:	3b04      	subs	r3, #4
 801e482:	429d      	cmp	r5, r3
 801e484:	461a      	mov	r2, r3
 801e486:	d30a      	bcc.n	801e49e <quorem+0x106>
 801e488:	613c      	str	r4, [r7, #16]
 801e48a:	4630      	mov	r0, r6
 801e48c:	b003      	add	sp, #12
 801e48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e492:	6812      	ldr	r2, [r2, #0]
 801e494:	3b04      	subs	r3, #4
 801e496:	2a00      	cmp	r2, #0
 801e498:	d1cc      	bne.n	801e434 <quorem+0x9c>
 801e49a:	3c01      	subs	r4, #1
 801e49c:	e7c7      	b.n	801e42e <quorem+0x96>
 801e49e:	6812      	ldr	r2, [r2, #0]
 801e4a0:	3b04      	subs	r3, #4
 801e4a2:	2a00      	cmp	r2, #0
 801e4a4:	d1f0      	bne.n	801e488 <quorem+0xf0>
 801e4a6:	3c01      	subs	r4, #1
 801e4a8:	e7eb      	b.n	801e482 <quorem+0xea>
 801e4aa:	2000      	movs	r0, #0
 801e4ac:	e7ee      	b.n	801e48c <quorem+0xf4>
	...

0801e4b0 <_dtoa_r>:
 801e4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4b4:	ed2d 8b02 	vpush	{d8}
 801e4b8:	ec57 6b10 	vmov	r6, r7, d0
 801e4bc:	b095      	sub	sp, #84	; 0x54
 801e4be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801e4c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801e4c4:	9105      	str	r1, [sp, #20]
 801e4c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801e4ca:	4604      	mov	r4, r0
 801e4cc:	9209      	str	r2, [sp, #36]	; 0x24
 801e4ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801e4d0:	b975      	cbnz	r5, 801e4f0 <_dtoa_r+0x40>
 801e4d2:	2010      	movs	r0, #16
 801e4d4:	f7fd f8b8 	bl	801b648 <malloc>
 801e4d8:	4602      	mov	r2, r0
 801e4da:	6260      	str	r0, [r4, #36]	; 0x24
 801e4dc:	b920      	cbnz	r0, 801e4e8 <_dtoa_r+0x38>
 801e4de:	4bb2      	ldr	r3, [pc, #712]	; (801e7a8 <_dtoa_r+0x2f8>)
 801e4e0:	21ea      	movs	r1, #234	; 0xea
 801e4e2:	48b2      	ldr	r0, [pc, #712]	; (801e7ac <_dtoa_r+0x2fc>)
 801e4e4:	f7ff ff16 	bl	801e314 <__assert_func>
 801e4e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e4ec:	6005      	str	r5, [r0, #0]
 801e4ee:	60c5      	str	r5, [r0, #12]
 801e4f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e4f2:	6819      	ldr	r1, [r3, #0]
 801e4f4:	b151      	cbz	r1, 801e50c <_dtoa_r+0x5c>
 801e4f6:	685a      	ldr	r2, [r3, #4]
 801e4f8:	604a      	str	r2, [r1, #4]
 801e4fa:	2301      	movs	r3, #1
 801e4fc:	4093      	lsls	r3, r2
 801e4fe:	608b      	str	r3, [r1, #8]
 801e500:	4620      	mov	r0, r4
 801e502:	f001 fbd3 	bl	801fcac <_Bfree>
 801e506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e508:	2200      	movs	r2, #0
 801e50a:	601a      	str	r2, [r3, #0]
 801e50c:	1e3b      	subs	r3, r7, #0
 801e50e:	bfb9      	ittee	lt
 801e510:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e514:	9303      	strlt	r3, [sp, #12]
 801e516:	2300      	movge	r3, #0
 801e518:	f8c8 3000 	strge.w	r3, [r8]
 801e51c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801e520:	4ba3      	ldr	r3, [pc, #652]	; (801e7b0 <_dtoa_r+0x300>)
 801e522:	bfbc      	itt	lt
 801e524:	2201      	movlt	r2, #1
 801e526:	f8c8 2000 	strlt.w	r2, [r8]
 801e52a:	ea33 0309 	bics.w	r3, r3, r9
 801e52e:	d11b      	bne.n	801e568 <_dtoa_r+0xb8>
 801e530:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e532:	f242 730f 	movw	r3, #9999	; 0x270f
 801e536:	6013      	str	r3, [r2, #0]
 801e538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e53c:	4333      	orrs	r3, r6
 801e53e:	f000 857a 	beq.w	801f036 <_dtoa_r+0xb86>
 801e542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e544:	b963      	cbnz	r3, 801e560 <_dtoa_r+0xb0>
 801e546:	4b9b      	ldr	r3, [pc, #620]	; (801e7b4 <_dtoa_r+0x304>)
 801e548:	e024      	b.n	801e594 <_dtoa_r+0xe4>
 801e54a:	4b9b      	ldr	r3, [pc, #620]	; (801e7b8 <_dtoa_r+0x308>)
 801e54c:	9300      	str	r3, [sp, #0]
 801e54e:	3308      	adds	r3, #8
 801e550:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e552:	6013      	str	r3, [r2, #0]
 801e554:	9800      	ldr	r0, [sp, #0]
 801e556:	b015      	add	sp, #84	; 0x54
 801e558:	ecbd 8b02 	vpop	{d8}
 801e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e560:	4b94      	ldr	r3, [pc, #592]	; (801e7b4 <_dtoa_r+0x304>)
 801e562:	9300      	str	r3, [sp, #0]
 801e564:	3303      	adds	r3, #3
 801e566:	e7f3      	b.n	801e550 <_dtoa_r+0xa0>
 801e568:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e56c:	2200      	movs	r2, #0
 801e56e:	ec51 0b17 	vmov	r0, r1, d7
 801e572:	2300      	movs	r3, #0
 801e574:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801e578:	f7e2 fac6 	bl	8000b08 <__aeabi_dcmpeq>
 801e57c:	4680      	mov	r8, r0
 801e57e:	b158      	cbz	r0, 801e598 <_dtoa_r+0xe8>
 801e580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e582:	2301      	movs	r3, #1
 801e584:	6013      	str	r3, [r2, #0]
 801e586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e588:	2b00      	cmp	r3, #0
 801e58a:	f000 8551 	beq.w	801f030 <_dtoa_r+0xb80>
 801e58e:	488b      	ldr	r0, [pc, #556]	; (801e7bc <_dtoa_r+0x30c>)
 801e590:	6018      	str	r0, [r3, #0]
 801e592:	1e43      	subs	r3, r0, #1
 801e594:	9300      	str	r3, [sp, #0]
 801e596:	e7dd      	b.n	801e554 <_dtoa_r+0xa4>
 801e598:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801e59c:	aa12      	add	r2, sp, #72	; 0x48
 801e59e:	a913      	add	r1, sp, #76	; 0x4c
 801e5a0:	4620      	mov	r0, r4
 801e5a2:	f001 ff2b 	bl	80203fc <__d2b>
 801e5a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e5aa:	4683      	mov	fp, r0
 801e5ac:	2d00      	cmp	r5, #0
 801e5ae:	d07c      	beq.n	801e6aa <_dtoa_r+0x1fa>
 801e5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801e5b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e5ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801e5be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801e5c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801e5c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801e5ca:	4b7d      	ldr	r3, [pc, #500]	; (801e7c0 <_dtoa_r+0x310>)
 801e5cc:	2200      	movs	r2, #0
 801e5ce:	4630      	mov	r0, r6
 801e5d0:	4639      	mov	r1, r7
 801e5d2:	f7e1 fe79 	bl	80002c8 <__aeabi_dsub>
 801e5d6:	a36e      	add	r3, pc, #440	; (adr r3, 801e790 <_dtoa_r+0x2e0>)
 801e5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5dc:	f7e2 f82c 	bl	8000638 <__aeabi_dmul>
 801e5e0:	a36d      	add	r3, pc, #436	; (adr r3, 801e798 <_dtoa_r+0x2e8>)
 801e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5e6:	f7e1 fe71 	bl	80002cc <__adddf3>
 801e5ea:	4606      	mov	r6, r0
 801e5ec:	4628      	mov	r0, r5
 801e5ee:	460f      	mov	r7, r1
 801e5f0:	f7e1 ffb8 	bl	8000564 <__aeabi_i2d>
 801e5f4:	a36a      	add	r3, pc, #424	; (adr r3, 801e7a0 <_dtoa_r+0x2f0>)
 801e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5fa:	f7e2 f81d 	bl	8000638 <__aeabi_dmul>
 801e5fe:	4602      	mov	r2, r0
 801e600:	460b      	mov	r3, r1
 801e602:	4630      	mov	r0, r6
 801e604:	4639      	mov	r1, r7
 801e606:	f7e1 fe61 	bl	80002cc <__adddf3>
 801e60a:	4606      	mov	r6, r0
 801e60c:	460f      	mov	r7, r1
 801e60e:	f7e2 fac3 	bl	8000b98 <__aeabi_d2iz>
 801e612:	2200      	movs	r2, #0
 801e614:	4682      	mov	sl, r0
 801e616:	2300      	movs	r3, #0
 801e618:	4630      	mov	r0, r6
 801e61a:	4639      	mov	r1, r7
 801e61c:	f7e2 fa7e 	bl	8000b1c <__aeabi_dcmplt>
 801e620:	b148      	cbz	r0, 801e636 <_dtoa_r+0x186>
 801e622:	4650      	mov	r0, sl
 801e624:	f7e1 ff9e 	bl	8000564 <__aeabi_i2d>
 801e628:	4632      	mov	r2, r6
 801e62a:	463b      	mov	r3, r7
 801e62c:	f7e2 fa6c 	bl	8000b08 <__aeabi_dcmpeq>
 801e630:	b908      	cbnz	r0, 801e636 <_dtoa_r+0x186>
 801e632:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e636:	f1ba 0f16 	cmp.w	sl, #22
 801e63a:	d854      	bhi.n	801e6e6 <_dtoa_r+0x236>
 801e63c:	4b61      	ldr	r3, [pc, #388]	; (801e7c4 <_dtoa_r+0x314>)
 801e63e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e64a:	f7e2 fa67 	bl	8000b1c <__aeabi_dcmplt>
 801e64e:	2800      	cmp	r0, #0
 801e650:	d04b      	beq.n	801e6ea <_dtoa_r+0x23a>
 801e652:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e656:	2300      	movs	r3, #0
 801e658:	930e      	str	r3, [sp, #56]	; 0x38
 801e65a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e65c:	1b5d      	subs	r5, r3, r5
 801e65e:	1e6b      	subs	r3, r5, #1
 801e660:	9304      	str	r3, [sp, #16]
 801e662:	bf43      	ittte	mi
 801e664:	2300      	movmi	r3, #0
 801e666:	f1c5 0801 	rsbmi	r8, r5, #1
 801e66a:	9304      	strmi	r3, [sp, #16]
 801e66c:	f04f 0800 	movpl.w	r8, #0
 801e670:	f1ba 0f00 	cmp.w	sl, #0
 801e674:	db3b      	blt.n	801e6ee <_dtoa_r+0x23e>
 801e676:	9b04      	ldr	r3, [sp, #16]
 801e678:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e67c:	4453      	add	r3, sl
 801e67e:	9304      	str	r3, [sp, #16]
 801e680:	2300      	movs	r3, #0
 801e682:	9306      	str	r3, [sp, #24]
 801e684:	9b05      	ldr	r3, [sp, #20]
 801e686:	2b09      	cmp	r3, #9
 801e688:	d869      	bhi.n	801e75e <_dtoa_r+0x2ae>
 801e68a:	2b05      	cmp	r3, #5
 801e68c:	bfc4      	itt	gt
 801e68e:	3b04      	subgt	r3, #4
 801e690:	9305      	strgt	r3, [sp, #20]
 801e692:	9b05      	ldr	r3, [sp, #20]
 801e694:	f1a3 0302 	sub.w	r3, r3, #2
 801e698:	bfcc      	ite	gt
 801e69a:	2500      	movgt	r5, #0
 801e69c:	2501      	movle	r5, #1
 801e69e:	2b03      	cmp	r3, #3
 801e6a0:	d869      	bhi.n	801e776 <_dtoa_r+0x2c6>
 801e6a2:	e8df f003 	tbb	[pc, r3]
 801e6a6:	4e2c      	.short	0x4e2c
 801e6a8:	5a4c      	.short	0x5a4c
 801e6aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801e6ae:	441d      	add	r5, r3
 801e6b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801e6b4:	2b20      	cmp	r3, #32
 801e6b6:	bfc1      	itttt	gt
 801e6b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801e6bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801e6c0:	fa09 f303 	lslgt.w	r3, r9, r3
 801e6c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 801e6c8:	bfda      	itte	le
 801e6ca:	f1c3 0320 	rsble	r3, r3, #32
 801e6ce:	fa06 f003 	lslle.w	r0, r6, r3
 801e6d2:	4318      	orrgt	r0, r3
 801e6d4:	f7e1 ff36 	bl	8000544 <__aeabi_ui2d>
 801e6d8:	2301      	movs	r3, #1
 801e6da:	4606      	mov	r6, r0
 801e6dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801e6e0:	3d01      	subs	r5, #1
 801e6e2:	9310      	str	r3, [sp, #64]	; 0x40
 801e6e4:	e771      	b.n	801e5ca <_dtoa_r+0x11a>
 801e6e6:	2301      	movs	r3, #1
 801e6e8:	e7b6      	b.n	801e658 <_dtoa_r+0x1a8>
 801e6ea:	900e      	str	r0, [sp, #56]	; 0x38
 801e6ec:	e7b5      	b.n	801e65a <_dtoa_r+0x1aa>
 801e6ee:	f1ca 0300 	rsb	r3, sl, #0
 801e6f2:	9306      	str	r3, [sp, #24]
 801e6f4:	2300      	movs	r3, #0
 801e6f6:	eba8 080a 	sub.w	r8, r8, sl
 801e6fa:	930d      	str	r3, [sp, #52]	; 0x34
 801e6fc:	e7c2      	b.n	801e684 <_dtoa_r+0x1d4>
 801e6fe:	2300      	movs	r3, #0
 801e700:	9308      	str	r3, [sp, #32]
 801e702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e704:	2b00      	cmp	r3, #0
 801e706:	dc39      	bgt.n	801e77c <_dtoa_r+0x2cc>
 801e708:	f04f 0901 	mov.w	r9, #1
 801e70c:	f8cd 9004 	str.w	r9, [sp, #4]
 801e710:	464b      	mov	r3, r9
 801e712:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e716:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e718:	2200      	movs	r2, #0
 801e71a:	6042      	str	r2, [r0, #4]
 801e71c:	2204      	movs	r2, #4
 801e71e:	f102 0614 	add.w	r6, r2, #20
 801e722:	429e      	cmp	r6, r3
 801e724:	6841      	ldr	r1, [r0, #4]
 801e726:	d92f      	bls.n	801e788 <_dtoa_r+0x2d8>
 801e728:	4620      	mov	r0, r4
 801e72a:	f001 fa7f 	bl	801fc2c <_Balloc>
 801e72e:	9000      	str	r0, [sp, #0]
 801e730:	2800      	cmp	r0, #0
 801e732:	d14b      	bne.n	801e7cc <_dtoa_r+0x31c>
 801e734:	4b24      	ldr	r3, [pc, #144]	; (801e7c8 <_dtoa_r+0x318>)
 801e736:	4602      	mov	r2, r0
 801e738:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e73c:	e6d1      	b.n	801e4e2 <_dtoa_r+0x32>
 801e73e:	2301      	movs	r3, #1
 801e740:	e7de      	b.n	801e700 <_dtoa_r+0x250>
 801e742:	2300      	movs	r3, #0
 801e744:	9308      	str	r3, [sp, #32]
 801e746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e748:	eb0a 0903 	add.w	r9, sl, r3
 801e74c:	f109 0301 	add.w	r3, r9, #1
 801e750:	2b01      	cmp	r3, #1
 801e752:	9301      	str	r3, [sp, #4]
 801e754:	bfb8      	it	lt
 801e756:	2301      	movlt	r3, #1
 801e758:	e7dd      	b.n	801e716 <_dtoa_r+0x266>
 801e75a:	2301      	movs	r3, #1
 801e75c:	e7f2      	b.n	801e744 <_dtoa_r+0x294>
 801e75e:	2501      	movs	r5, #1
 801e760:	2300      	movs	r3, #0
 801e762:	9305      	str	r3, [sp, #20]
 801e764:	9508      	str	r5, [sp, #32]
 801e766:	f04f 39ff 	mov.w	r9, #4294967295
 801e76a:	2200      	movs	r2, #0
 801e76c:	f8cd 9004 	str.w	r9, [sp, #4]
 801e770:	2312      	movs	r3, #18
 801e772:	9209      	str	r2, [sp, #36]	; 0x24
 801e774:	e7cf      	b.n	801e716 <_dtoa_r+0x266>
 801e776:	2301      	movs	r3, #1
 801e778:	9308      	str	r3, [sp, #32]
 801e77a:	e7f4      	b.n	801e766 <_dtoa_r+0x2b6>
 801e77c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e780:	f8cd 9004 	str.w	r9, [sp, #4]
 801e784:	464b      	mov	r3, r9
 801e786:	e7c6      	b.n	801e716 <_dtoa_r+0x266>
 801e788:	3101      	adds	r1, #1
 801e78a:	6041      	str	r1, [r0, #4]
 801e78c:	0052      	lsls	r2, r2, #1
 801e78e:	e7c6      	b.n	801e71e <_dtoa_r+0x26e>
 801e790:	636f4361 	.word	0x636f4361
 801e794:	3fd287a7 	.word	0x3fd287a7
 801e798:	8b60c8b3 	.word	0x8b60c8b3
 801e79c:	3fc68a28 	.word	0x3fc68a28
 801e7a0:	509f79fb 	.word	0x509f79fb
 801e7a4:	3fd34413 	.word	0x3fd34413
 801e7a8:	08023330 	.word	0x08023330
 801e7ac:	08023575 	.word	0x08023575
 801e7b0:	7ff00000 	.word	0x7ff00000
 801e7b4:	08023571 	.word	0x08023571
 801e7b8:	08023568 	.word	0x08023568
 801e7bc:	080237da 	.word	0x080237da
 801e7c0:	3ff80000 	.word	0x3ff80000
 801e7c4:	080236f0 	.word	0x080236f0
 801e7c8:	080235d4 	.word	0x080235d4
 801e7cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e7ce:	9a00      	ldr	r2, [sp, #0]
 801e7d0:	601a      	str	r2, [r3, #0]
 801e7d2:	9b01      	ldr	r3, [sp, #4]
 801e7d4:	2b0e      	cmp	r3, #14
 801e7d6:	f200 80ad 	bhi.w	801e934 <_dtoa_r+0x484>
 801e7da:	2d00      	cmp	r5, #0
 801e7dc:	f000 80aa 	beq.w	801e934 <_dtoa_r+0x484>
 801e7e0:	f1ba 0f00 	cmp.w	sl, #0
 801e7e4:	dd36      	ble.n	801e854 <_dtoa_r+0x3a4>
 801e7e6:	4ac3      	ldr	r2, [pc, #780]	; (801eaf4 <_dtoa_r+0x644>)
 801e7e8:	f00a 030f 	and.w	r3, sl, #15
 801e7ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e7f0:	ed93 7b00 	vldr	d7, [r3]
 801e7f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801e7f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 801e7fc:	eeb0 8a47 	vmov.f32	s16, s14
 801e800:	eef0 8a67 	vmov.f32	s17, s15
 801e804:	d016      	beq.n	801e834 <_dtoa_r+0x384>
 801e806:	4bbc      	ldr	r3, [pc, #752]	; (801eaf8 <_dtoa_r+0x648>)
 801e808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e80c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e810:	f7e2 f83c 	bl	800088c <__aeabi_ddiv>
 801e814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e818:	f007 070f 	and.w	r7, r7, #15
 801e81c:	2503      	movs	r5, #3
 801e81e:	4eb6      	ldr	r6, [pc, #728]	; (801eaf8 <_dtoa_r+0x648>)
 801e820:	b957      	cbnz	r7, 801e838 <_dtoa_r+0x388>
 801e822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e826:	ec53 2b18 	vmov	r2, r3, d8
 801e82a:	f7e2 f82f 	bl	800088c <__aeabi_ddiv>
 801e82e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e832:	e029      	b.n	801e888 <_dtoa_r+0x3d8>
 801e834:	2502      	movs	r5, #2
 801e836:	e7f2      	b.n	801e81e <_dtoa_r+0x36e>
 801e838:	07f9      	lsls	r1, r7, #31
 801e83a:	d508      	bpl.n	801e84e <_dtoa_r+0x39e>
 801e83c:	ec51 0b18 	vmov	r0, r1, d8
 801e840:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e844:	f7e1 fef8 	bl	8000638 <__aeabi_dmul>
 801e848:	ec41 0b18 	vmov	d8, r0, r1
 801e84c:	3501      	adds	r5, #1
 801e84e:	107f      	asrs	r7, r7, #1
 801e850:	3608      	adds	r6, #8
 801e852:	e7e5      	b.n	801e820 <_dtoa_r+0x370>
 801e854:	f000 80a6 	beq.w	801e9a4 <_dtoa_r+0x4f4>
 801e858:	f1ca 0600 	rsb	r6, sl, #0
 801e85c:	4ba5      	ldr	r3, [pc, #660]	; (801eaf4 <_dtoa_r+0x644>)
 801e85e:	4fa6      	ldr	r7, [pc, #664]	; (801eaf8 <_dtoa_r+0x648>)
 801e860:	f006 020f 	and.w	r2, r6, #15
 801e864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e86c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e870:	f7e1 fee2 	bl	8000638 <__aeabi_dmul>
 801e874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e878:	1136      	asrs	r6, r6, #4
 801e87a:	2300      	movs	r3, #0
 801e87c:	2502      	movs	r5, #2
 801e87e:	2e00      	cmp	r6, #0
 801e880:	f040 8085 	bne.w	801e98e <_dtoa_r+0x4de>
 801e884:	2b00      	cmp	r3, #0
 801e886:	d1d2      	bne.n	801e82e <_dtoa_r+0x37e>
 801e888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	f000 808c 	beq.w	801e9a8 <_dtoa_r+0x4f8>
 801e890:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e894:	4b99      	ldr	r3, [pc, #612]	; (801eafc <_dtoa_r+0x64c>)
 801e896:	2200      	movs	r2, #0
 801e898:	4630      	mov	r0, r6
 801e89a:	4639      	mov	r1, r7
 801e89c:	f7e2 f93e 	bl	8000b1c <__aeabi_dcmplt>
 801e8a0:	2800      	cmp	r0, #0
 801e8a2:	f000 8081 	beq.w	801e9a8 <_dtoa_r+0x4f8>
 801e8a6:	9b01      	ldr	r3, [sp, #4]
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d07d      	beq.n	801e9a8 <_dtoa_r+0x4f8>
 801e8ac:	f1b9 0f00 	cmp.w	r9, #0
 801e8b0:	dd3c      	ble.n	801e92c <_dtoa_r+0x47c>
 801e8b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 801e8b6:	9307      	str	r3, [sp, #28]
 801e8b8:	2200      	movs	r2, #0
 801e8ba:	4b91      	ldr	r3, [pc, #580]	; (801eb00 <_dtoa_r+0x650>)
 801e8bc:	4630      	mov	r0, r6
 801e8be:	4639      	mov	r1, r7
 801e8c0:	f7e1 feba 	bl	8000638 <__aeabi_dmul>
 801e8c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8c8:	3501      	adds	r5, #1
 801e8ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801e8ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e8d2:	4628      	mov	r0, r5
 801e8d4:	f7e1 fe46 	bl	8000564 <__aeabi_i2d>
 801e8d8:	4632      	mov	r2, r6
 801e8da:	463b      	mov	r3, r7
 801e8dc:	f7e1 feac 	bl	8000638 <__aeabi_dmul>
 801e8e0:	4b88      	ldr	r3, [pc, #544]	; (801eb04 <_dtoa_r+0x654>)
 801e8e2:	2200      	movs	r2, #0
 801e8e4:	f7e1 fcf2 	bl	80002cc <__adddf3>
 801e8e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801e8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8f0:	9303      	str	r3, [sp, #12]
 801e8f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	d15c      	bne.n	801e9b2 <_dtoa_r+0x502>
 801e8f8:	4b83      	ldr	r3, [pc, #524]	; (801eb08 <_dtoa_r+0x658>)
 801e8fa:	2200      	movs	r2, #0
 801e8fc:	4630      	mov	r0, r6
 801e8fe:	4639      	mov	r1, r7
 801e900:	f7e1 fce2 	bl	80002c8 <__aeabi_dsub>
 801e904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e908:	4606      	mov	r6, r0
 801e90a:	460f      	mov	r7, r1
 801e90c:	f7e2 f924 	bl	8000b58 <__aeabi_dcmpgt>
 801e910:	2800      	cmp	r0, #0
 801e912:	f040 8296 	bne.w	801ee42 <_dtoa_r+0x992>
 801e916:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801e91a:	4630      	mov	r0, r6
 801e91c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e920:	4639      	mov	r1, r7
 801e922:	f7e2 f8fb 	bl	8000b1c <__aeabi_dcmplt>
 801e926:	2800      	cmp	r0, #0
 801e928:	f040 8288 	bne.w	801ee3c <_dtoa_r+0x98c>
 801e92c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e930:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e936:	2b00      	cmp	r3, #0
 801e938:	f2c0 8158 	blt.w	801ebec <_dtoa_r+0x73c>
 801e93c:	f1ba 0f0e 	cmp.w	sl, #14
 801e940:	f300 8154 	bgt.w	801ebec <_dtoa_r+0x73c>
 801e944:	4b6b      	ldr	r3, [pc, #428]	; (801eaf4 <_dtoa_r+0x644>)
 801e946:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e94a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e950:	2b00      	cmp	r3, #0
 801e952:	f280 80e3 	bge.w	801eb1c <_dtoa_r+0x66c>
 801e956:	9b01      	ldr	r3, [sp, #4]
 801e958:	2b00      	cmp	r3, #0
 801e95a:	f300 80df 	bgt.w	801eb1c <_dtoa_r+0x66c>
 801e95e:	f040 826d 	bne.w	801ee3c <_dtoa_r+0x98c>
 801e962:	4b69      	ldr	r3, [pc, #420]	; (801eb08 <_dtoa_r+0x658>)
 801e964:	2200      	movs	r2, #0
 801e966:	4640      	mov	r0, r8
 801e968:	4649      	mov	r1, r9
 801e96a:	f7e1 fe65 	bl	8000638 <__aeabi_dmul>
 801e96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e972:	f7e2 f8e7 	bl	8000b44 <__aeabi_dcmpge>
 801e976:	9e01      	ldr	r6, [sp, #4]
 801e978:	4637      	mov	r7, r6
 801e97a:	2800      	cmp	r0, #0
 801e97c:	f040 8243 	bne.w	801ee06 <_dtoa_r+0x956>
 801e980:	9d00      	ldr	r5, [sp, #0]
 801e982:	2331      	movs	r3, #49	; 0x31
 801e984:	f805 3b01 	strb.w	r3, [r5], #1
 801e988:	f10a 0a01 	add.w	sl, sl, #1
 801e98c:	e23f      	b.n	801ee0e <_dtoa_r+0x95e>
 801e98e:	07f2      	lsls	r2, r6, #31
 801e990:	d505      	bpl.n	801e99e <_dtoa_r+0x4ee>
 801e992:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e996:	f7e1 fe4f 	bl	8000638 <__aeabi_dmul>
 801e99a:	3501      	adds	r5, #1
 801e99c:	2301      	movs	r3, #1
 801e99e:	1076      	asrs	r6, r6, #1
 801e9a0:	3708      	adds	r7, #8
 801e9a2:	e76c      	b.n	801e87e <_dtoa_r+0x3ce>
 801e9a4:	2502      	movs	r5, #2
 801e9a6:	e76f      	b.n	801e888 <_dtoa_r+0x3d8>
 801e9a8:	9b01      	ldr	r3, [sp, #4]
 801e9aa:	f8cd a01c 	str.w	sl, [sp, #28]
 801e9ae:	930c      	str	r3, [sp, #48]	; 0x30
 801e9b0:	e78d      	b.n	801e8ce <_dtoa_r+0x41e>
 801e9b2:	9900      	ldr	r1, [sp, #0]
 801e9b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e9b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e9b8:	4b4e      	ldr	r3, [pc, #312]	; (801eaf4 <_dtoa_r+0x644>)
 801e9ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e9be:	4401      	add	r1, r0
 801e9c0:	9102      	str	r1, [sp, #8]
 801e9c2:	9908      	ldr	r1, [sp, #32]
 801e9c4:	eeb0 8a47 	vmov.f32	s16, s14
 801e9c8:	eef0 8a67 	vmov.f32	s17, s15
 801e9cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e9d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e9d4:	2900      	cmp	r1, #0
 801e9d6:	d045      	beq.n	801ea64 <_dtoa_r+0x5b4>
 801e9d8:	494c      	ldr	r1, [pc, #304]	; (801eb0c <_dtoa_r+0x65c>)
 801e9da:	2000      	movs	r0, #0
 801e9dc:	f7e1 ff56 	bl	800088c <__aeabi_ddiv>
 801e9e0:	ec53 2b18 	vmov	r2, r3, d8
 801e9e4:	f7e1 fc70 	bl	80002c8 <__aeabi_dsub>
 801e9e8:	9d00      	ldr	r5, [sp, #0]
 801e9ea:	ec41 0b18 	vmov	d8, r0, r1
 801e9ee:	4639      	mov	r1, r7
 801e9f0:	4630      	mov	r0, r6
 801e9f2:	f7e2 f8d1 	bl	8000b98 <__aeabi_d2iz>
 801e9f6:	900c      	str	r0, [sp, #48]	; 0x30
 801e9f8:	f7e1 fdb4 	bl	8000564 <__aeabi_i2d>
 801e9fc:	4602      	mov	r2, r0
 801e9fe:	460b      	mov	r3, r1
 801ea00:	4630      	mov	r0, r6
 801ea02:	4639      	mov	r1, r7
 801ea04:	f7e1 fc60 	bl	80002c8 <__aeabi_dsub>
 801ea08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea0a:	3330      	adds	r3, #48	; 0x30
 801ea0c:	f805 3b01 	strb.w	r3, [r5], #1
 801ea10:	ec53 2b18 	vmov	r2, r3, d8
 801ea14:	4606      	mov	r6, r0
 801ea16:	460f      	mov	r7, r1
 801ea18:	f7e2 f880 	bl	8000b1c <__aeabi_dcmplt>
 801ea1c:	2800      	cmp	r0, #0
 801ea1e:	d165      	bne.n	801eaec <_dtoa_r+0x63c>
 801ea20:	4632      	mov	r2, r6
 801ea22:	463b      	mov	r3, r7
 801ea24:	4935      	ldr	r1, [pc, #212]	; (801eafc <_dtoa_r+0x64c>)
 801ea26:	2000      	movs	r0, #0
 801ea28:	f7e1 fc4e 	bl	80002c8 <__aeabi_dsub>
 801ea2c:	ec53 2b18 	vmov	r2, r3, d8
 801ea30:	f7e2 f874 	bl	8000b1c <__aeabi_dcmplt>
 801ea34:	2800      	cmp	r0, #0
 801ea36:	f040 80b9 	bne.w	801ebac <_dtoa_r+0x6fc>
 801ea3a:	9b02      	ldr	r3, [sp, #8]
 801ea3c:	429d      	cmp	r5, r3
 801ea3e:	f43f af75 	beq.w	801e92c <_dtoa_r+0x47c>
 801ea42:	4b2f      	ldr	r3, [pc, #188]	; (801eb00 <_dtoa_r+0x650>)
 801ea44:	ec51 0b18 	vmov	r0, r1, d8
 801ea48:	2200      	movs	r2, #0
 801ea4a:	f7e1 fdf5 	bl	8000638 <__aeabi_dmul>
 801ea4e:	4b2c      	ldr	r3, [pc, #176]	; (801eb00 <_dtoa_r+0x650>)
 801ea50:	ec41 0b18 	vmov	d8, r0, r1
 801ea54:	2200      	movs	r2, #0
 801ea56:	4630      	mov	r0, r6
 801ea58:	4639      	mov	r1, r7
 801ea5a:	f7e1 fded 	bl	8000638 <__aeabi_dmul>
 801ea5e:	4606      	mov	r6, r0
 801ea60:	460f      	mov	r7, r1
 801ea62:	e7c4      	b.n	801e9ee <_dtoa_r+0x53e>
 801ea64:	ec51 0b17 	vmov	r0, r1, d7
 801ea68:	f7e1 fde6 	bl	8000638 <__aeabi_dmul>
 801ea6c:	9b02      	ldr	r3, [sp, #8]
 801ea6e:	9d00      	ldr	r5, [sp, #0]
 801ea70:	930c      	str	r3, [sp, #48]	; 0x30
 801ea72:	ec41 0b18 	vmov	d8, r0, r1
 801ea76:	4639      	mov	r1, r7
 801ea78:	4630      	mov	r0, r6
 801ea7a:	f7e2 f88d 	bl	8000b98 <__aeabi_d2iz>
 801ea7e:	9011      	str	r0, [sp, #68]	; 0x44
 801ea80:	f7e1 fd70 	bl	8000564 <__aeabi_i2d>
 801ea84:	4602      	mov	r2, r0
 801ea86:	460b      	mov	r3, r1
 801ea88:	4630      	mov	r0, r6
 801ea8a:	4639      	mov	r1, r7
 801ea8c:	f7e1 fc1c 	bl	80002c8 <__aeabi_dsub>
 801ea90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ea92:	3330      	adds	r3, #48	; 0x30
 801ea94:	f805 3b01 	strb.w	r3, [r5], #1
 801ea98:	9b02      	ldr	r3, [sp, #8]
 801ea9a:	429d      	cmp	r5, r3
 801ea9c:	4606      	mov	r6, r0
 801ea9e:	460f      	mov	r7, r1
 801eaa0:	f04f 0200 	mov.w	r2, #0
 801eaa4:	d134      	bne.n	801eb10 <_dtoa_r+0x660>
 801eaa6:	4b19      	ldr	r3, [pc, #100]	; (801eb0c <_dtoa_r+0x65c>)
 801eaa8:	ec51 0b18 	vmov	r0, r1, d8
 801eaac:	f7e1 fc0e 	bl	80002cc <__adddf3>
 801eab0:	4602      	mov	r2, r0
 801eab2:	460b      	mov	r3, r1
 801eab4:	4630      	mov	r0, r6
 801eab6:	4639      	mov	r1, r7
 801eab8:	f7e2 f84e 	bl	8000b58 <__aeabi_dcmpgt>
 801eabc:	2800      	cmp	r0, #0
 801eabe:	d175      	bne.n	801ebac <_dtoa_r+0x6fc>
 801eac0:	ec53 2b18 	vmov	r2, r3, d8
 801eac4:	4911      	ldr	r1, [pc, #68]	; (801eb0c <_dtoa_r+0x65c>)
 801eac6:	2000      	movs	r0, #0
 801eac8:	f7e1 fbfe 	bl	80002c8 <__aeabi_dsub>
 801eacc:	4602      	mov	r2, r0
 801eace:	460b      	mov	r3, r1
 801ead0:	4630      	mov	r0, r6
 801ead2:	4639      	mov	r1, r7
 801ead4:	f7e2 f822 	bl	8000b1c <__aeabi_dcmplt>
 801ead8:	2800      	cmp	r0, #0
 801eada:	f43f af27 	beq.w	801e92c <_dtoa_r+0x47c>
 801eade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801eae0:	1e6b      	subs	r3, r5, #1
 801eae2:	930c      	str	r3, [sp, #48]	; 0x30
 801eae4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801eae8:	2b30      	cmp	r3, #48	; 0x30
 801eaea:	d0f8      	beq.n	801eade <_dtoa_r+0x62e>
 801eaec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801eaf0:	e04a      	b.n	801eb88 <_dtoa_r+0x6d8>
 801eaf2:	bf00      	nop
 801eaf4:	080236f0 	.word	0x080236f0
 801eaf8:	080236c8 	.word	0x080236c8
 801eafc:	3ff00000 	.word	0x3ff00000
 801eb00:	40240000 	.word	0x40240000
 801eb04:	401c0000 	.word	0x401c0000
 801eb08:	40140000 	.word	0x40140000
 801eb0c:	3fe00000 	.word	0x3fe00000
 801eb10:	4baf      	ldr	r3, [pc, #700]	; (801edd0 <_dtoa_r+0x920>)
 801eb12:	f7e1 fd91 	bl	8000638 <__aeabi_dmul>
 801eb16:	4606      	mov	r6, r0
 801eb18:	460f      	mov	r7, r1
 801eb1a:	e7ac      	b.n	801ea76 <_dtoa_r+0x5c6>
 801eb1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801eb20:	9d00      	ldr	r5, [sp, #0]
 801eb22:	4642      	mov	r2, r8
 801eb24:	464b      	mov	r3, r9
 801eb26:	4630      	mov	r0, r6
 801eb28:	4639      	mov	r1, r7
 801eb2a:	f7e1 feaf 	bl	800088c <__aeabi_ddiv>
 801eb2e:	f7e2 f833 	bl	8000b98 <__aeabi_d2iz>
 801eb32:	9002      	str	r0, [sp, #8]
 801eb34:	f7e1 fd16 	bl	8000564 <__aeabi_i2d>
 801eb38:	4642      	mov	r2, r8
 801eb3a:	464b      	mov	r3, r9
 801eb3c:	f7e1 fd7c 	bl	8000638 <__aeabi_dmul>
 801eb40:	4602      	mov	r2, r0
 801eb42:	460b      	mov	r3, r1
 801eb44:	4630      	mov	r0, r6
 801eb46:	4639      	mov	r1, r7
 801eb48:	f7e1 fbbe 	bl	80002c8 <__aeabi_dsub>
 801eb4c:	9e02      	ldr	r6, [sp, #8]
 801eb4e:	9f01      	ldr	r7, [sp, #4]
 801eb50:	3630      	adds	r6, #48	; 0x30
 801eb52:	f805 6b01 	strb.w	r6, [r5], #1
 801eb56:	9e00      	ldr	r6, [sp, #0]
 801eb58:	1bae      	subs	r6, r5, r6
 801eb5a:	42b7      	cmp	r7, r6
 801eb5c:	4602      	mov	r2, r0
 801eb5e:	460b      	mov	r3, r1
 801eb60:	d137      	bne.n	801ebd2 <_dtoa_r+0x722>
 801eb62:	f7e1 fbb3 	bl	80002cc <__adddf3>
 801eb66:	4642      	mov	r2, r8
 801eb68:	464b      	mov	r3, r9
 801eb6a:	4606      	mov	r6, r0
 801eb6c:	460f      	mov	r7, r1
 801eb6e:	f7e1 fff3 	bl	8000b58 <__aeabi_dcmpgt>
 801eb72:	b9c8      	cbnz	r0, 801eba8 <_dtoa_r+0x6f8>
 801eb74:	4642      	mov	r2, r8
 801eb76:	464b      	mov	r3, r9
 801eb78:	4630      	mov	r0, r6
 801eb7a:	4639      	mov	r1, r7
 801eb7c:	f7e1 ffc4 	bl	8000b08 <__aeabi_dcmpeq>
 801eb80:	b110      	cbz	r0, 801eb88 <_dtoa_r+0x6d8>
 801eb82:	9b02      	ldr	r3, [sp, #8]
 801eb84:	07d9      	lsls	r1, r3, #31
 801eb86:	d40f      	bmi.n	801eba8 <_dtoa_r+0x6f8>
 801eb88:	4620      	mov	r0, r4
 801eb8a:	4659      	mov	r1, fp
 801eb8c:	f001 f88e 	bl	801fcac <_Bfree>
 801eb90:	2300      	movs	r3, #0
 801eb92:	702b      	strb	r3, [r5, #0]
 801eb94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eb96:	f10a 0001 	add.w	r0, sl, #1
 801eb9a:	6018      	str	r0, [r3, #0]
 801eb9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	f43f acd8 	beq.w	801e554 <_dtoa_r+0xa4>
 801eba4:	601d      	str	r5, [r3, #0]
 801eba6:	e4d5      	b.n	801e554 <_dtoa_r+0xa4>
 801eba8:	f8cd a01c 	str.w	sl, [sp, #28]
 801ebac:	462b      	mov	r3, r5
 801ebae:	461d      	mov	r5, r3
 801ebb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ebb4:	2a39      	cmp	r2, #57	; 0x39
 801ebb6:	d108      	bne.n	801ebca <_dtoa_r+0x71a>
 801ebb8:	9a00      	ldr	r2, [sp, #0]
 801ebba:	429a      	cmp	r2, r3
 801ebbc:	d1f7      	bne.n	801ebae <_dtoa_r+0x6fe>
 801ebbe:	9a07      	ldr	r2, [sp, #28]
 801ebc0:	9900      	ldr	r1, [sp, #0]
 801ebc2:	3201      	adds	r2, #1
 801ebc4:	9207      	str	r2, [sp, #28]
 801ebc6:	2230      	movs	r2, #48	; 0x30
 801ebc8:	700a      	strb	r2, [r1, #0]
 801ebca:	781a      	ldrb	r2, [r3, #0]
 801ebcc:	3201      	adds	r2, #1
 801ebce:	701a      	strb	r2, [r3, #0]
 801ebd0:	e78c      	b.n	801eaec <_dtoa_r+0x63c>
 801ebd2:	4b7f      	ldr	r3, [pc, #508]	; (801edd0 <_dtoa_r+0x920>)
 801ebd4:	2200      	movs	r2, #0
 801ebd6:	f7e1 fd2f 	bl	8000638 <__aeabi_dmul>
 801ebda:	2200      	movs	r2, #0
 801ebdc:	2300      	movs	r3, #0
 801ebde:	4606      	mov	r6, r0
 801ebe0:	460f      	mov	r7, r1
 801ebe2:	f7e1 ff91 	bl	8000b08 <__aeabi_dcmpeq>
 801ebe6:	2800      	cmp	r0, #0
 801ebe8:	d09b      	beq.n	801eb22 <_dtoa_r+0x672>
 801ebea:	e7cd      	b.n	801eb88 <_dtoa_r+0x6d8>
 801ebec:	9a08      	ldr	r2, [sp, #32]
 801ebee:	2a00      	cmp	r2, #0
 801ebf0:	f000 80c4 	beq.w	801ed7c <_dtoa_r+0x8cc>
 801ebf4:	9a05      	ldr	r2, [sp, #20]
 801ebf6:	2a01      	cmp	r2, #1
 801ebf8:	f300 80a8 	bgt.w	801ed4c <_dtoa_r+0x89c>
 801ebfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ebfe:	2a00      	cmp	r2, #0
 801ec00:	f000 80a0 	beq.w	801ed44 <_dtoa_r+0x894>
 801ec04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ec08:	9e06      	ldr	r6, [sp, #24]
 801ec0a:	4645      	mov	r5, r8
 801ec0c:	9a04      	ldr	r2, [sp, #16]
 801ec0e:	2101      	movs	r1, #1
 801ec10:	441a      	add	r2, r3
 801ec12:	4620      	mov	r0, r4
 801ec14:	4498      	add	r8, r3
 801ec16:	9204      	str	r2, [sp, #16]
 801ec18:	f001 f94e 	bl	801feb8 <__i2b>
 801ec1c:	4607      	mov	r7, r0
 801ec1e:	2d00      	cmp	r5, #0
 801ec20:	dd0b      	ble.n	801ec3a <_dtoa_r+0x78a>
 801ec22:	9b04      	ldr	r3, [sp, #16]
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	dd08      	ble.n	801ec3a <_dtoa_r+0x78a>
 801ec28:	42ab      	cmp	r3, r5
 801ec2a:	9a04      	ldr	r2, [sp, #16]
 801ec2c:	bfa8      	it	ge
 801ec2e:	462b      	movge	r3, r5
 801ec30:	eba8 0803 	sub.w	r8, r8, r3
 801ec34:	1aed      	subs	r5, r5, r3
 801ec36:	1ad3      	subs	r3, r2, r3
 801ec38:	9304      	str	r3, [sp, #16]
 801ec3a:	9b06      	ldr	r3, [sp, #24]
 801ec3c:	b1fb      	cbz	r3, 801ec7e <_dtoa_r+0x7ce>
 801ec3e:	9b08      	ldr	r3, [sp, #32]
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	f000 809f 	beq.w	801ed84 <_dtoa_r+0x8d4>
 801ec46:	2e00      	cmp	r6, #0
 801ec48:	dd11      	ble.n	801ec6e <_dtoa_r+0x7be>
 801ec4a:	4639      	mov	r1, r7
 801ec4c:	4632      	mov	r2, r6
 801ec4e:	4620      	mov	r0, r4
 801ec50:	f001 f9ee 	bl	8020030 <__pow5mult>
 801ec54:	465a      	mov	r2, fp
 801ec56:	4601      	mov	r1, r0
 801ec58:	4607      	mov	r7, r0
 801ec5a:	4620      	mov	r0, r4
 801ec5c:	f001 f942 	bl	801fee4 <__multiply>
 801ec60:	4659      	mov	r1, fp
 801ec62:	9007      	str	r0, [sp, #28]
 801ec64:	4620      	mov	r0, r4
 801ec66:	f001 f821 	bl	801fcac <_Bfree>
 801ec6a:	9b07      	ldr	r3, [sp, #28]
 801ec6c:	469b      	mov	fp, r3
 801ec6e:	9b06      	ldr	r3, [sp, #24]
 801ec70:	1b9a      	subs	r2, r3, r6
 801ec72:	d004      	beq.n	801ec7e <_dtoa_r+0x7ce>
 801ec74:	4659      	mov	r1, fp
 801ec76:	4620      	mov	r0, r4
 801ec78:	f001 f9da 	bl	8020030 <__pow5mult>
 801ec7c:	4683      	mov	fp, r0
 801ec7e:	2101      	movs	r1, #1
 801ec80:	4620      	mov	r0, r4
 801ec82:	f001 f919 	bl	801feb8 <__i2b>
 801ec86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	4606      	mov	r6, r0
 801ec8c:	dd7c      	ble.n	801ed88 <_dtoa_r+0x8d8>
 801ec8e:	461a      	mov	r2, r3
 801ec90:	4601      	mov	r1, r0
 801ec92:	4620      	mov	r0, r4
 801ec94:	f001 f9cc 	bl	8020030 <__pow5mult>
 801ec98:	9b05      	ldr	r3, [sp, #20]
 801ec9a:	2b01      	cmp	r3, #1
 801ec9c:	4606      	mov	r6, r0
 801ec9e:	dd76      	ble.n	801ed8e <_dtoa_r+0x8de>
 801eca0:	2300      	movs	r3, #0
 801eca2:	9306      	str	r3, [sp, #24]
 801eca4:	6933      	ldr	r3, [r6, #16]
 801eca6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ecaa:	6918      	ldr	r0, [r3, #16]
 801ecac:	f001 f8b4 	bl	801fe18 <__hi0bits>
 801ecb0:	f1c0 0020 	rsb	r0, r0, #32
 801ecb4:	9b04      	ldr	r3, [sp, #16]
 801ecb6:	4418      	add	r0, r3
 801ecb8:	f010 001f 	ands.w	r0, r0, #31
 801ecbc:	f000 8086 	beq.w	801edcc <_dtoa_r+0x91c>
 801ecc0:	f1c0 0320 	rsb	r3, r0, #32
 801ecc4:	2b04      	cmp	r3, #4
 801ecc6:	dd7f      	ble.n	801edc8 <_dtoa_r+0x918>
 801ecc8:	f1c0 001c 	rsb	r0, r0, #28
 801eccc:	9b04      	ldr	r3, [sp, #16]
 801ecce:	4403      	add	r3, r0
 801ecd0:	4480      	add	r8, r0
 801ecd2:	4405      	add	r5, r0
 801ecd4:	9304      	str	r3, [sp, #16]
 801ecd6:	f1b8 0f00 	cmp.w	r8, #0
 801ecda:	dd05      	ble.n	801ece8 <_dtoa_r+0x838>
 801ecdc:	4659      	mov	r1, fp
 801ecde:	4642      	mov	r2, r8
 801ece0:	4620      	mov	r0, r4
 801ece2:	f001 f9ff 	bl	80200e4 <__lshift>
 801ece6:	4683      	mov	fp, r0
 801ece8:	9b04      	ldr	r3, [sp, #16]
 801ecea:	2b00      	cmp	r3, #0
 801ecec:	dd05      	ble.n	801ecfa <_dtoa_r+0x84a>
 801ecee:	4631      	mov	r1, r6
 801ecf0:	461a      	mov	r2, r3
 801ecf2:	4620      	mov	r0, r4
 801ecf4:	f001 f9f6 	bl	80200e4 <__lshift>
 801ecf8:	4606      	mov	r6, r0
 801ecfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d069      	beq.n	801edd4 <_dtoa_r+0x924>
 801ed00:	4631      	mov	r1, r6
 801ed02:	4658      	mov	r0, fp
 801ed04:	f001 fa5a 	bl	80201bc <__mcmp>
 801ed08:	2800      	cmp	r0, #0
 801ed0a:	da63      	bge.n	801edd4 <_dtoa_r+0x924>
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	4659      	mov	r1, fp
 801ed10:	220a      	movs	r2, #10
 801ed12:	4620      	mov	r0, r4
 801ed14:	f000 ffec 	bl	801fcf0 <__multadd>
 801ed18:	9b08      	ldr	r3, [sp, #32]
 801ed1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ed1e:	4683      	mov	fp, r0
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	f000 818f 	beq.w	801f044 <_dtoa_r+0xb94>
 801ed26:	4639      	mov	r1, r7
 801ed28:	2300      	movs	r3, #0
 801ed2a:	220a      	movs	r2, #10
 801ed2c:	4620      	mov	r0, r4
 801ed2e:	f000 ffdf 	bl	801fcf0 <__multadd>
 801ed32:	f1b9 0f00 	cmp.w	r9, #0
 801ed36:	4607      	mov	r7, r0
 801ed38:	f300 808e 	bgt.w	801ee58 <_dtoa_r+0x9a8>
 801ed3c:	9b05      	ldr	r3, [sp, #20]
 801ed3e:	2b02      	cmp	r3, #2
 801ed40:	dc50      	bgt.n	801ede4 <_dtoa_r+0x934>
 801ed42:	e089      	b.n	801ee58 <_dtoa_r+0x9a8>
 801ed44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ed46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ed4a:	e75d      	b.n	801ec08 <_dtoa_r+0x758>
 801ed4c:	9b01      	ldr	r3, [sp, #4]
 801ed4e:	1e5e      	subs	r6, r3, #1
 801ed50:	9b06      	ldr	r3, [sp, #24]
 801ed52:	42b3      	cmp	r3, r6
 801ed54:	bfbf      	itttt	lt
 801ed56:	9b06      	ldrlt	r3, [sp, #24]
 801ed58:	9606      	strlt	r6, [sp, #24]
 801ed5a:	1af2      	sublt	r2, r6, r3
 801ed5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801ed5e:	bfb6      	itet	lt
 801ed60:	189b      	addlt	r3, r3, r2
 801ed62:	1b9e      	subge	r6, r3, r6
 801ed64:	930d      	strlt	r3, [sp, #52]	; 0x34
 801ed66:	9b01      	ldr	r3, [sp, #4]
 801ed68:	bfb8      	it	lt
 801ed6a:	2600      	movlt	r6, #0
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	bfb5      	itete	lt
 801ed70:	eba8 0503 	sublt.w	r5, r8, r3
 801ed74:	9b01      	ldrge	r3, [sp, #4]
 801ed76:	2300      	movlt	r3, #0
 801ed78:	4645      	movge	r5, r8
 801ed7a:	e747      	b.n	801ec0c <_dtoa_r+0x75c>
 801ed7c:	9e06      	ldr	r6, [sp, #24]
 801ed7e:	9f08      	ldr	r7, [sp, #32]
 801ed80:	4645      	mov	r5, r8
 801ed82:	e74c      	b.n	801ec1e <_dtoa_r+0x76e>
 801ed84:	9a06      	ldr	r2, [sp, #24]
 801ed86:	e775      	b.n	801ec74 <_dtoa_r+0x7c4>
 801ed88:	9b05      	ldr	r3, [sp, #20]
 801ed8a:	2b01      	cmp	r3, #1
 801ed8c:	dc18      	bgt.n	801edc0 <_dtoa_r+0x910>
 801ed8e:	9b02      	ldr	r3, [sp, #8]
 801ed90:	b9b3      	cbnz	r3, 801edc0 <_dtoa_r+0x910>
 801ed92:	9b03      	ldr	r3, [sp, #12]
 801ed94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ed98:	b9a3      	cbnz	r3, 801edc4 <_dtoa_r+0x914>
 801ed9a:	9b03      	ldr	r3, [sp, #12]
 801ed9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801eda0:	0d1b      	lsrs	r3, r3, #20
 801eda2:	051b      	lsls	r3, r3, #20
 801eda4:	b12b      	cbz	r3, 801edb2 <_dtoa_r+0x902>
 801eda6:	9b04      	ldr	r3, [sp, #16]
 801eda8:	3301      	adds	r3, #1
 801edaa:	9304      	str	r3, [sp, #16]
 801edac:	f108 0801 	add.w	r8, r8, #1
 801edb0:	2301      	movs	r3, #1
 801edb2:	9306      	str	r3, [sp, #24]
 801edb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	f47f af74 	bne.w	801eca4 <_dtoa_r+0x7f4>
 801edbc:	2001      	movs	r0, #1
 801edbe:	e779      	b.n	801ecb4 <_dtoa_r+0x804>
 801edc0:	2300      	movs	r3, #0
 801edc2:	e7f6      	b.n	801edb2 <_dtoa_r+0x902>
 801edc4:	9b02      	ldr	r3, [sp, #8]
 801edc6:	e7f4      	b.n	801edb2 <_dtoa_r+0x902>
 801edc8:	d085      	beq.n	801ecd6 <_dtoa_r+0x826>
 801edca:	4618      	mov	r0, r3
 801edcc:	301c      	adds	r0, #28
 801edce:	e77d      	b.n	801eccc <_dtoa_r+0x81c>
 801edd0:	40240000 	.word	0x40240000
 801edd4:	9b01      	ldr	r3, [sp, #4]
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	dc38      	bgt.n	801ee4c <_dtoa_r+0x99c>
 801edda:	9b05      	ldr	r3, [sp, #20]
 801eddc:	2b02      	cmp	r3, #2
 801edde:	dd35      	ble.n	801ee4c <_dtoa_r+0x99c>
 801ede0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ede4:	f1b9 0f00 	cmp.w	r9, #0
 801ede8:	d10d      	bne.n	801ee06 <_dtoa_r+0x956>
 801edea:	4631      	mov	r1, r6
 801edec:	464b      	mov	r3, r9
 801edee:	2205      	movs	r2, #5
 801edf0:	4620      	mov	r0, r4
 801edf2:	f000 ff7d 	bl	801fcf0 <__multadd>
 801edf6:	4601      	mov	r1, r0
 801edf8:	4606      	mov	r6, r0
 801edfa:	4658      	mov	r0, fp
 801edfc:	f001 f9de 	bl	80201bc <__mcmp>
 801ee00:	2800      	cmp	r0, #0
 801ee02:	f73f adbd 	bgt.w	801e980 <_dtoa_r+0x4d0>
 801ee06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee08:	9d00      	ldr	r5, [sp, #0]
 801ee0a:	ea6f 0a03 	mvn.w	sl, r3
 801ee0e:	f04f 0800 	mov.w	r8, #0
 801ee12:	4631      	mov	r1, r6
 801ee14:	4620      	mov	r0, r4
 801ee16:	f000 ff49 	bl	801fcac <_Bfree>
 801ee1a:	2f00      	cmp	r7, #0
 801ee1c:	f43f aeb4 	beq.w	801eb88 <_dtoa_r+0x6d8>
 801ee20:	f1b8 0f00 	cmp.w	r8, #0
 801ee24:	d005      	beq.n	801ee32 <_dtoa_r+0x982>
 801ee26:	45b8      	cmp	r8, r7
 801ee28:	d003      	beq.n	801ee32 <_dtoa_r+0x982>
 801ee2a:	4641      	mov	r1, r8
 801ee2c:	4620      	mov	r0, r4
 801ee2e:	f000 ff3d 	bl	801fcac <_Bfree>
 801ee32:	4639      	mov	r1, r7
 801ee34:	4620      	mov	r0, r4
 801ee36:	f000 ff39 	bl	801fcac <_Bfree>
 801ee3a:	e6a5      	b.n	801eb88 <_dtoa_r+0x6d8>
 801ee3c:	2600      	movs	r6, #0
 801ee3e:	4637      	mov	r7, r6
 801ee40:	e7e1      	b.n	801ee06 <_dtoa_r+0x956>
 801ee42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ee44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ee48:	4637      	mov	r7, r6
 801ee4a:	e599      	b.n	801e980 <_dtoa_r+0x4d0>
 801ee4c:	9b08      	ldr	r3, [sp, #32]
 801ee4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ee52:	2b00      	cmp	r3, #0
 801ee54:	f000 80fd 	beq.w	801f052 <_dtoa_r+0xba2>
 801ee58:	2d00      	cmp	r5, #0
 801ee5a:	dd05      	ble.n	801ee68 <_dtoa_r+0x9b8>
 801ee5c:	4639      	mov	r1, r7
 801ee5e:	462a      	mov	r2, r5
 801ee60:	4620      	mov	r0, r4
 801ee62:	f001 f93f 	bl	80200e4 <__lshift>
 801ee66:	4607      	mov	r7, r0
 801ee68:	9b06      	ldr	r3, [sp, #24]
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d05c      	beq.n	801ef28 <_dtoa_r+0xa78>
 801ee6e:	6879      	ldr	r1, [r7, #4]
 801ee70:	4620      	mov	r0, r4
 801ee72:	f000 fedb 	bl	801fc2c <_Balloc>
 801ee76:	4605      	mov	r5, r0
 801ee78:	b928      	cbnz	r0, 801ee86 <_dtoa_r+0x9d6>
 801ee7a:	4b80      	ldr	r3, [pc, #512]	; (801f07c <_dtoa_r+0xbcc>)
 801ee7c:	4602      	mov	r2, r0
 801ee7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ee82:	f7ff bb2e 	b.w	801e4e2 <_dtoa_r+0x32>
 801ee86:	693a      	ldr	r2, [r7, #16]
 801ee88:	3202      	adds	r2, #2
 801ee8a:	0092      	lsls	r2, r2, #2
 801ee8c:	f107 010c 	add.w	r1, r7, #12
 801ee90:	300c      	adds	r0, #12
 801ee92:	f7fc fbe9 	bl	801b668 <memcpy>
 801ee96:	2201      	movs	r2, #1
 801ee98:	4629      	mov	r1, r5
 801ee9a:	4620      	mov	r0, r4
 801ee9c:	f001 f922 	bl	80200e4 <__lshift>
 801eea0:	9b00      	ldr	r3, [sp, #0]
 801eea2:	3301      	adds	r3, #1
 801eea4:	9301      	str	r3, [sp, #4]
 801eea6:	9b00      	ldr	r3, [sp, #0]
 801eea8:	444b      	add	r3, r9
 801eeaa:	9307      	str	r3, [sp, #28]
 801eeac:	9b02      	ldr	r3, [sp, #8]
 801eeae:	f003 0301 	and.w	r3, r3, #1
 801eeb2:	46b8      	mov	r8, r7
 801eeb4:	9306      	str	r3, [sp, #24]
 801eeb6:	4607      	mov	r7, r0
 801eeb8:	9b01      	ldr	r3, [sp, #4]
 801eeba:	4631      	mov	r1, r6
 801eebc:	3b01      	subs	r3, #1
 801eebe:	4658      	mov	r0, fp
 801eec0:	9302      	str	r3, [sp, #8]
 801eec2:	f7ff fa69 	bl	801e398 <quorem>
 801eec6:	4603      	mov	r3, r0
 801eec8:	3330      	adds	r3, #48	; 0x30
 801eeca:	9004      	str	r0, [sp, #16]
 801eecc:	4641      	mov	r1, r8
 801eece:	4658      	mov	r0, fp
 801eed0:	9308      	str	r3, [sp, #32]
 801eed2:	f001 f973 	bl	80201bc <__mcmp>
 801eed6:	463a      	mov	r2, r7
 801eed8:	4681      	mov	r9, r0
 801eeda:	4631      	mov	r1, r6
 801eedc:	4620      	mov	r0, r4
 801eede:	f001 f989 	bl	80201f4 <__mdiff>
 801eee2:	68c2      	ldr	r2, [r0, #12]
 801eee4:	9b08      	ldr	r3, [sp, #32]
 801eee6:	4605      	mov	r5, r0
 801eee8:	bb02      	cbnz	r2, 801ef2c <_dtoa_r+0xa7c>
 801eeea:	4601      	mov	r1, r0
 801eeec:	4658      	mov	r0, fp
 801eeee:	f001 f965 	bl	80201bc <__mcmp>
 801eef2:	9b08      	ldr	r3, [sp, #32]
 801eef4:	4602      	mov	r2, r0
 801eef6:	4629      	mov	r1, r5
 801eef8:	4620      	mov	r0, r4
 801eefa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801eefe:	f000 fed5 	bl	801fcac <_Bfree>
 801ef02:	9b05      	ldr	r3, [sp, #20]
 801ef04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef06:	9d01      	ldr	r5, [sp, #4]
 801ef08:	ea43 0102 	orr.w	r1, r3, r2
 801ef0c:	9b06      	ldr	r3, [sp, #24]
 801ef0e:	430b      	orrs	r3, r1
 801ef10:	9b08      	ldr	r3, [sp, #32]
 801ef12:	d10d      	bne.n	801ef30 <_dtoa_r+0xa80>
 801ef14:	2b39      	cmp	r3, #57	; 0x39
 801ef16:	d029      	beq.n	801ef6c <_dtoa_r+0xabc>
 801ef18:	f1b9 0f00 	cmp.w	r9, #0
 801ef1c:	dd01      	ble.n	801ef22 <_dtoa_r+0xa72>
 801ef1e:	9b04      	ldr	r3, [sp, #16]
 801ef20:	3331      	adds	r3, #49	; 0x31
 801ef22:	9a02      	ldr	r2, [sp, #8]
 801ef24:	7013      	strb	r3, [r2, #0]
 801ef26:	e774      	b.n	801ee12 <_dtoa_r+0x962>
 801ef28:	4638      	mov	r0, r7
 801ef2a:	e7b9      	b.n	801eea0 <_dtoa_r+0x9f0>
 801ef2c:	2201      	movs	r2, #1
 801ef2e:	e7e2      	b.n	801eef6 <_dtoa_r+0xa46>
 801ef30:	f1b9 0f00 	cmp.w	r9, #0
 801ef34:	db06      	blt.n	801ef44 <_dtoa_r+0xa94>
 801ef36:	9905      	ldr	r1, [sp, #20]
 801ef38:	ea41 0909 	orr.w	r9, r1, r9
 801ef3c:	9906      	ldr	r1, [sp, #24]
 801ef3e:	ea59 0101 	orrs.w	r1, r9, r1
 801ef42:	d120      	bne.n	801ef86 <_dtoa_r+0xad6>
 801ef44:	2a00      	cmp	r2, #0
 801ef46:	ddec      	ble.n	801ef22 <_dtoa_r+0xa72>
 801ef48:	4659      	mov	r1, fp
 801ef4a:	2201      	movs	r2, #1
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	9301      	str	r3, [sp, #4]
 801ef50:	f001 f8c8 	bl	80200e4 <__lshift>
 801ef54:	4631      	mov	r1, r6
 801ef56:	4683      	mov	fp, r0
 801ef58:	f001 f930 	bl	80201bc <__mcmp>
 801ef5c:	2800      	cmp	r0, #0
 801ef5e:	9b01      	ldr	r3, [sp, #4]
 801ef60:	dc02      	bgt.n	801ef68 <_dtoa_r+0xab8>
 801ef62:	d1de      	bne.n	801ef22 <_dtoa_r+0xa72>
 801ef64:	07da      	lsls	r2, r3, #31
 801ef66:	d5dc      	bpl.n	801ef22 <_dtoa_r+0xa72>
 801ef68:	2b39      	cmp	r3, #57	; 0x39
 801ef6a:	d1d8      	bne.n	801ef1e <_dtoa_r+0xa6e>
 801ef6c:	9a02      	ldr	r2, [sp, #8]
 801ef6e:	2339      	movs	r3, #57	; 0x39
 801ef70:	7013      	strb	r3, [r2, #0]
 801ef72:	462b      	mov	r3, r5
 801ef74:	461d      	mov	r5, r3
 801ef76:	3b01      	subs	r3, #1
 801ef78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ef7c:	2a39      	cmp	r2, #57	; 0x39
 801ef7e:	d050      	beq.n	801f022 <_dtoa_r+0xb72>
 801ef80:	3201      	adds	r2, #1
 801ef82:	701a      	strb	r2, [r3, #0]
 801ef84:	e745      	b.n	801ee12 <_dtoa_r+0x962>
 801ef86:	2a00      	cmp	r2, #0
 801ef88:	dd03      	ble.n	801ef92 <_dtoa_r+0xae2>
 801ef8a:	2b39      	cmp	r3, #57	; 0x39
 801ef8c:	d0ee      	beq.n	801ef6c <_dtoa_r+0xabc>
 801ef8e:	3301      	adds	r3, #1
 801ef90:	e7c7      	b.n	801ef22 <_dtoa_r+0xa72>
 801ef92:	9a01      	ldr	r2, [sp, #4]
 801ef94:	9907      	ldr	r1, [sp, #28]
 801ef96:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ef9a:	428a      	cmp	r2, r1
 801ef9c:	d02a      	beq.n	801eff4 <_dtoa_r+0xb44>
 801ef9e:	4659      	mov	r1, fp
 801efa0:	2300      	movs	r3, #0
 801efa2:	220a      	movs	r2, #10
 801efa4:	4620      	mov	r0, r4
 801efa6:	f000 fea3 	bl	801fcf0 <__multadd>
 801efaa:	45b8      	cmp	r8, r7
 801efac:	4683      	mov	fp, r0
 801efae:	f04f 0300 	mov.w	r3, #0
 801efb2:	f04f 020a 	mov.w	r2, #10
 801efb6:	4641      	mov	r1, r8
 801efb8:	4620      	mov	r0, r4
 801efba:	d107      	bne.n	801efcc <_dtoa_r+0xb1c>
 801efbc:	f000 fe98 	bl	801fcf0 <__multadd>
 801efc0:	4680      	mov	r8, r0
 801efc2:	4607      	mov	r7, r0
 801efc4:	9b01      	ldr	r3, [sp, #4]
 801efc6:	3301      	adds	r3, #1
 801efc8:	9301      	str	r3, [sp, #4]
 801efca:	e775      	b.n	801eeb8 <_dtoa_r+0xa08>
 801efcc:	f000 fe90 	bl	801fcf0 <__multadd>
 801efd0:	4639      	mov	r1, r7
 801efd2:	4680      	mov	r8, r0
 801efd4:	2300      	movs	r3, #0
 801efd6:	220a      	movs	r2, #10
 801efd8:	4620      	mov	r0, r4
 801efda:	f000 fe89 	bl	801fcf0 <__multadd>
 801efde:	4607      	mov	r7, r0
 801efe0:	e7f0      	b.n	801efc4 <_dtoa_r+0xb14>
 801efe2:	f1b9 0f00 	cmp.w	r9, #0
 801efe6:	9a00      	ldr	r2, [sp, #0]
 801efe8:	bfcc      	ite	gt
 801efea:	464d      	movgt	r5, r9
 801efec:	2501      	movle	r5, #1
 801efee:	4415      	add	r5, r2
 801eff0:	f04f 0800 	mov.w	r8, #0
 801eff4:	4659      	mov	r1, fp
 801eff6:	2201      	movs	r2, #1
 801eff8:	4620      	mov	r0, r4
 801effa:	9301      	str	r3, [sp, #4]
 801effc:	f001 f872 	bl	80200e4 <__lshift>
 801f000:	4631      	mov	r1, r6
 801f002:	4683      	mov	fp, r0
 801f004:	f001 f8da 	bl	80201bc <__mcmp>
 801f008:	2800      	cmp	r0, #0
 801f00a:	dcb2      	bgt.n	801ef72 <_dtoa_r+0xac2>
 801f00c:	d102      	bne.n	801f014 <_dtoa_r+0xb64>
 801f00e:	9b01      	ldr	r3, [sp, #4]
 801f010:	07db      	lsls	r3, r3, #31
 801f012:	d4ae      	bmi.n	801ef72 <_dtoa_r+0xac2>
 801f014:	462b      	mov	r3, r5
 801f016:	461d      	mov	r5, r3
 801f018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f01c:	2a30      	cmp	r2, #48	; 0x30
 801f01e:	d0fa      	beq.n	801f016 <_dtoa_r+0xb66>
 801f020:	e6f7      	b.n	801ee12 <_dtoa_r+0x962>
 801f022:	9a00      	ldr	r2, [sp, #0]
 801f024:	429a      	cmp	r2, r3
 801f026:	d1a5      	bne.n	801ef74 <_dtoa_r+0xac4>
 801f028:	f10a 0a01 	add.w	sl, sl, #1
 801f02c:	2331      	movs	r3, #49	; 0x31
 801f02e:	e779      	b.n	801ef24 <_dtoa_r+0xa74>
 801f030:	4b13      	ldr	r3, [pc, #76]	; (801f080 <_dtoa_r+0xbd0>)
 801f032:	f7ff baaf 	b.w	801e594 <_dtoa_r+0xe4>
 801f036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f038:	2b00      	cmp	r3, #0
 801f03a:	f47f aa86 	bne.w	801e54a <_dtoa_r+0x9a>
 801f03e:	4b11      	ldr	r3, [pc, #68]	; (801f084 <_dtoa_r+0xbd4>)
 801f040:	f7ff baa8 	b.w	801e594 <_dtoa_r+0xe4>
 801f044:	f1b9 0f00 	cmp.w	r9, #0
 801f048:	dc03      	bgt.n	801f052 <_dtoa_r+0xba2>
 801f04a:	9b05      	ldr	r3, [sp, #20]
 801f04c:	2b02      	cmp	r3, #2
 801f04e:	f73f aec9 	bgt.w	801ede4 <_dtoa_r+0x934>
 801f052:	9d00      	ldr	r5, [sp, #0]
 801f054:	4631      	mov	r1, r6
 801f056:	4658      	mov	r0, fp
 801f058:	f7ff f99e 	bl	801e398 <quorem>
 801f05c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f060:	f805 3b01 	strb.w	r3, [r5], #1
 801f064:	9a00      	ldr	r2, [sp, #0]
 801f066:	1aaa      	subs	r2, r5, r2
 801f068:	4591      	cmp	r9, r2
 801f06a:	ddba      	ble.n	801efe2 <_dtoa_r+0xb32>
 801f06c:	4659      	mov	r1, fp
 801f06e:	2300      	movs	r3, #0
 801f070:	220a      	movs	r2, #10
 801f072:	4620      	mov	r0, r4
 801f074:	f000 fe3c 	bl	801fcf0 <__multadd>
 801f078:	4683      	mov	fp, r0
 801f07a:	e7eb      	b.n	801f054 <_dtoa_r+0xba4>
 801f07c:	080235d4 	.word	0x080235d4
 801f080:	080237d9 	.word	0x080237d9
 801f084:	08023568 	.word	0x08023568

0801f088 <__sflush_r>:
 801f088:	898a      	ldrh	r2, [r1, #12]
 801f08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f08e:	4605      	mov	r5, r0
 801f090:	0710      	lsls	r0, r2, #28
 801f092:	460c      	mov	r4, r1
 801f094:	d458      	bmi.n	801f148 <__sflush_r+0xc0>
 801f096:	684b      	ldr	r3, [r1, #4]
 801f098:	2b00      	cmp	r3, #0
 801f09a:	dc05      	bgt.n	801f0a8 <__sflush_r+0x20>
 801f09c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	dc02      	bgt.n	801f0a8 <__sflush_r+0x20>
 801f0a2:	2000      	movs	r0, #0
 801f0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f0aa:	2e00      	cmp	r6, #0
 801f0ac:	d0f9      	beq.n	801f0a2 <__sflush_r+0x1a>
 801f0ae:	2300      	movs	r3, #0
 801f0b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f0b4:	682f      	ldr	r7, [r5, #0]
 801f0b6:	602b      	str	r3, [r5, #0]
 801f0b8:	d032      	beq.n	801f120 <__sflush_r+0x98>
 801f0ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f0bc:	89a3      	ldrh	r3, [r4, #12]
 801f0be:	075a      	lsls	r2, r3, #29
 801f0c0:	d505      	bpl.n	801f0ce <__sflush_r+0x46>
 801f0c2:	6863      	ldr	r3, [r4, #4]
 801f0c4:	1ac0      	subs	r0, r0, r3
 801f0c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f0c8:	b10b      	cbz	r3, 801f0ce <__sflush_r+0x46>
 801f0ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f0cc:	1ac0      	subs	r0, r0, r3
 801f0ce:	2300      	movs	r3, #0
 801f0d0:	4602      	mov	r2, r0
 801f0d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f0d4:	6a21      	ldr	r1, [r4, #32]
 801f0d6:	4628      	mov	r0, r5
 801f0d8:	47b0      	blx	r6
 801f0da:	1c43      	adds	r3, r0, #1
 801f0dc:	89a3      	ldrh	r3, [r4, #12]
 801f0de:	d106      	bne.n	801f0ee <__sflush_r+0x66>
 801f0e0:	6829      	ldr	r1, [r5, #0]
 801f0e2:	291d      	cmp	r1, #29
 801f0e4:	d82c      	bhi.n	801f140 <__sflush_r+0xb8>
 801f0e6:	4a2a      	ldr	r2, [pc, #168]	; (801f190 <__sflush_r+0x108>)
 801f0e8:	40ca      	lsrs	r2, r1
 801f0ea:	07d6      	lsls	r6, r2, #31
 801f0ec:	d528      	bpl.n	801f140 <__sflush_r+0xb8>
 801f0ee:	2200      	movs	r2, #0
 801f0f0:	6062      	str	r2, [r4, #4]
 801f0f2:	04d9      	lsls	r1, r3, #19
 801f0f4:	6922      	ldr	r2, [r4, #16]
 801f0f6:	6022      	str	r2, [r4, #0]
 801f0f8:	d504      	bpl.n	801f104 <__sflush_r+0x7c>
 801f0fa:	1c42      	adds	r2, r0, #1
 801f0fc:	d101      	bne.n	801f102 <__sflush_r+0x7a>
 801f0fe:	682b      	ldr	r3, [r5, #0]
 801f100:	b903      	cbnz	r3, 801f104 <__sflush_r+0x7c>
 801f102:	6560      	str	r0, [r4, #84]	; 0x54
 801f104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f106:	602f      	str	r7, [r5, #0]
 801f108:	2900      	cmp	r1, #0
 801f10a:	d0ca      	beq.n	801f0a2 <__sflush_r+0x1a>
 801f10c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f110:	4299      	cmp	r1, r3
 801f112:	d002      	beq.n	801f11a <__sflush_r+0x92>
 801f114:	4628      	mov	r0, r5
 801f116:	f7fc fd55 	bl	801bbc4 <_free_r>
 801f11a:	2000      	movs	r0, #0
 801f11c:	6360      	str	r0, [r4, #52]	; 0x34
 801f11e:	e7c1      	b.n	801f0a4 <__sflush_r+0x1c>
 801f120:	6a21      	ldr	r1, [r4, #32]
 801f122:	2301      	movs	r3, #1
 801f124:	4628      	mov	r0, r5
 801f126:	47b0      	blx	r6
 801f128:	1c41      	adds	r1, r0, #1
 801f12a:	d1c7      	bne.n	801f0bc <__sflush_r+0x34>
 801f12c:	682b      	ldr	r3, [r5, #0]
 801f12e:	2b00      	cmp	r3, #0
 801f130:	d0c4      	beq.n	801f0bc <__sflush_r+0x34>
 801f132:	2b1d      	cmp	r3, #29
 801f134:	d001      	beq.n	801f13a <__sflush_r+0xb2>
 801f136:	2b16      	cmp	r3, #22
 801f138:	d101      	bne.n	801f13e <__sflush_r+0xb6>
 801f13a:	602f      	str	r7, [r5, #0]
 801f13c:	e7b1      	b.n	801f0a2 <__sflush_r+0x1a>
 801f13e:	89a3      	ldrh	r3, [r4, #12]
 801f140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f144:	81a3      	strh	r3, [r4, #12]
 801f146:	e7ad      	b.n	801f0a4 <__sflush_r+0x1c>
 801f148:	690f      	ldr	r7, [r1, #16]
 801f14a:	2f00      	cmp	r7, #0
 801f14c:	d0a9      	beq.n	801f0a2 <__sflush_r+0x1a>
 801f14e:	0793      	lsls	r3, r2, #30
 801f150:	680e      	ldr	r6, [r1, #0]
 801f152:	bf08      	it	eq
 801f154:	694b      	ldreq	r3, [r1, #20]
 801f156:	600f      	str	r7, [r1, #0]
 801f158:	bf18      	it	ne
 801f15a:	2300      	movne	r3, #0
 801f15c:	eba6 0807 	sub.w	r8, r6, r7
 801f160:	608b      	str	r3, [r1, #8]
 801f162:	f1b8 0f00 	cmp.w	r8, #0
 801f166:	dd9c      	ble.n	801f0a2 <__sflush_r+0x1a>
 801f168:	6a21      	ldr	r1, [r4, #32]
 801f16a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f16c:	4643      	mov	r3, r8
 801f16e:	463a      	mov	r2, r7
 801f170:	4628      	mov	r0, r5
 801f172:	47b0      	blx	r6
 801f174:	2800      	cmp	r0, #0
 801f176:	dc06      	bgt.n	801f186 <__sflush_r+0xfe>
 801f178:	89a3      	ldrh	r3, [r4, #12]
 801f17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f17e:	81a3      	strh	r3, [r4, #12]
 801f180:	f04f 30ff 	mov.w	r0, #4294967295
 801f184:	e78e      	b.n	801f0a4 <__sflush_r+0x1c>
 801f186:	4407      	add	r7, r0
 801f188:	eba8 0800 	sub.w	r8, r8, r0
 801f18c:	e7e9      	b.n	801f162 <__sflush_r+0xda>
 801f18e:	bf00      	nop
 801f190:	20400001 	.word	0x20400001

0801f194 <_fflush_r>:
 801f194:	b538      	push	{r3, r4, r5, lr}
 801f196:	690b      	ldr	r3, [r1, #16]
 801f198:	4605      	mov	r5, r0
 801f19a:	460c      	mov	r4, r1
 801f19c:	b913      	cbnz	r3, 801f1a4 <_fflush_r+0x10>
 801f19e:	2500      	movs	r5, #0
 801f1a0:	4628      	mov	r0, r5
 801f1a2:	bd38      	pop	{r3, r4, r5, pc}
 801f1a4:	b118      	cbz	r0, 801f1ae <_fflush_r+0x1a>
 801f1a6:	6983      	ldr	r3, [r0, #24]
 801f1a8:	b90b      	cbnz	r3, 801f1ae <_fflush_r+0x1a>
 801f1aa:	f7fc f869 	bl	801b280 <__sinit>
 801f1ae:	4b14      	ldr	r3, [pc, #80]	; (801f200 <_fflush_r+0x6c>)
 801f1b0:	429c      	cmp	r4, r3
 801f1b2:	d11b      	bne.n	801f1ec <_fflush_r+0x58>
 801f1b4:	686c      	ldr	r4, [r5, #4]
 801f1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f1ba:	2b00      	cmp	r3, #0
 801f1bc:	d0ef      	beq.n	801f19e <_fflush_r+0xa>
 801f1be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f1c0:	07d0      	lsls	r0, r2, #31
 801f1c2:	d404      	bmi.n	801f1ce <_fflush_r+0x3a>
 801f1c4:	0599      	lsls	r1, r3, #22
 801f1c6:	d402      	bmi.n	801f1ce <_fflush_r+0x3a>
 801f1c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f1ca:	f7fc fa39 	bl	801b640 <__retarget_lock_acquire_recursive>
 801f1ce:	4628      	mov	r0, r5
 801f1d0:	4621      	mov	r1, r4
 801f1d2:	f7ff ff59 	bl	801f088 <__sflush_r>
 801f1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f1d8:	07da      	lsls	r2, r3, #31
 801f1da:	4605      	mov	r5, r0
 801f1dc:	d4e0      	bmi.n	801f1a0 <_fflush_r+0xc>
 801f1de:	89a3      	ldrh	r3, [r4, #12]
 801f1e0:	059b      	lsls	r3, r3, #22
 801f1e2:	d4dd      	bmi.n	801f1a0 <_fflush_r+0xc>
 801f1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f1e6:	f7fc fa2d 	bl	801b644 <__retarget_lock_release_recursive>
 801f1ea:	e7d9      	b.n	801f1a0 <_fflush_r+0xc>
 801f1ec:	4b05      	ldr	r3, [pc, #20]	; (801f204 <_fflush_r+0x70>)
 801f1ee:	429c      	cmp	r4, r3
 801f1f0:	d101      	bne.n	801f1f6 <_fflush_r+0x62>
 801f1f2:	68ac      	ldr	r4, [r5, #8]
 801f1f4:	e7df      	b.n	801f1b6 <_fflush_r+0x22>
 801f1f6:	4b04      	ldr	r3, [pc, #16]	; (801f208 <_fflush_r+0x74>)
 801f1f8:	429c      	cmp	r4, r3
 801f1fa:	bf08      	it	eq
 801f1fc:	68ec      	ldreq	r4, [r5, #12]
 801f1fe:	e7da      	b.n	801f1b6 <_fflush_r+0x22>
 801f200:	080232ec 	.word	0x080232ec
 801f204:	0802330c 	.word	0x0802330c
 801f208:	080232cc 	.word	0x080232cc

0801f20c <fiprintf>:
 801f20c:	b40e      	push	{r1, r2, r3}
 801f20e:	b503      	push	{r0, r1, lr}
 801f210:	4601      	mov	r1, r0
 801f212:	ab03      	add	r3, sp, #12
 801f214:	4805      	ldr	r0, [pc, #20]	; (801f22c <fiprintf+0x20>)
 801f216:	f853 2b04 	ldr.w	r2, [r3], #4
 801f21a:	6800      	ldr	r0, [r0, #0]
 801f21c:	9301      	str	r3, [sp, #4]
 801f21e:	f001 fd4d 	bl	8020cbc <_vfiprintf_r>
 801f222:	b002      	add	sp, #8
 801f224:	f85d eb04 	ldr.w	lr, [sp], #4
 801f228:	b003      	add	sp, #12
 801f22a:	4770      	bx	lr
 801f22c:	20000200 	.word	0x20000200

0801f230 <rshift>:
 801f230:	6903      	ldr	r3, [r0, #16]
 801f232:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f236:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f23a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f23e:	f100 0414 	add.w	r4, r0, #20
 801f242:	dd45      	ble.n	801f2d0 <rshift+0xa0>
 801f244:	f011 011f 	ands.w	r1, r1, #31
 801f248:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f24c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f250:	d10c      	bne.n	801f26c <rshift+0x3c>
 801f252:	f100 0710 	add.w	r7, r0, #16
 801f256:	4629      	mov	r1, r5
 801f258:	42b1      	cmp	r1, r6
 801f25a:	d334      	bcc.n	801f2c6 <rshift+0x96>
 801f25c:	1a9b      	subs	r3, r3, r2
 801f25e:	009b      	lsls	r3, r3, #2
 801f260:	1eea      	subs	r2, r5, #3
 801f262:	4296      	cmp	r6, r2
 801f264:	bf38      	it	cc
 801f266:	2300      	movcc	r3, #0
 801f268:	4423      	add	r3, r4
 801f26a:	e015      	b.n	801f298 <rshift+0x68>
 801f26c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f270:	f1c1 0820 	rsb	r8, r1, #32
 801f274:	40cf      	lsrs	r7, r1
 801f276:	f105 0e04 	add.w	lr, r5, #4
 801f27a:	46a1      	mov	r9, r4
 801f27c:	4576      	cmp	r6, lr
 801f27e:	46f4      	mov	ip, lr
 801f280:	d815      	bhi.n	801f2ae <rshift+0x7e>
 801f282:	1a9b      	subs	r3, r3, r2
 801f284:	009a      	lsls	r2, r3, #2
 801f286:	3a04      	subs	r2, #4
 801f288:	3501      	adds	r5, #1
 801f28a:	42ae      	cmp	r6, r5
 801f28c:	bf38      	it	cc
 801f28e:	2200      	movcc	r2, #0
 801f290:	18a3      	adds	r3, r4, r2
 801f292:	50a7      	str	r7, [r4, r2]
 801f294:	b107      	cbz	r7, 801f298 <rshift+0x68>
 801f296:	3304      	adds	r3, #4
 801f298:	1b1a      	subs	r2, r3, r4
 801f29a:	42a3      	cmp	r3, r4
 801f29c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f2a0:	bf08      	it	eq
 801f2a2:	2300      	moveq	r3, #0
 801f2a4:	6102      	str	r2, [r0, #16]
 801f2a6:	bf08      	it	eq
 801f2a8:	6143      	streq	r3, [r0, #20]
 801f2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f2ae:	f8dc c000 	ldr.w	ip, [ip]
 801f2b2:	fa0c fc08 	lsl.w	ip, ip, r8
 801f2b6:	ea4c 0707 	orr.w	r7, ip, r7
 801f2ba:	f849 7b04 	str.w	r7, [r9], #4
 801f2be:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f2c2:	40cf      	lsrs	r7, r1
 801f2c4:	e7da      	b.n	801f27c <rshift+0x4c>
 801f2c6:	f851 cb04 	ldr.w	ip, [r1], #4
 801f2ca:	f847 cf04 	str.w	ip, [r7, #4]!
 801f2ce:	e7c3      	b.n	801f258 <rshift+0x28>
 801f2d0:	4623      	mov	r3, r4
 801f2d2:	e7e1      	b.n	801f298 <rshift+0x68>

0801f2d4 <__hexdig_fun>:
 801f2d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f2d8:	2b09      	cmp	r3, #9
 801f2da:	d802      	bhi.n	801f2e2 <__hexdig_fun+0xe>
 801f2dc:	3820      	subs	r0, #32
 801f2de:	b2c0      	uxtb	r0, r0
 801f2e0:	4770      	bx	lr
 801f2e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f2e6:	2b05      	cmp	r3, #5
 801f2e8:	d801      	bhi.n	801f2ee <__hexdig_fun+0x1a>
 801f2ea:	3847      	subs	r0, #71	; 0x47
 801f2ec:	e7f7      	b.n	801f2de <__hexdig_fun+0xa>
 801f2ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f2f2:	2b05      	cmp	r3, #5
 801f2f4:	d801      	bhi.n	801f2fa <__hexdig_fun+0x26>
 801f2f6:	3827      	subs	r0, #39	; 0x27
 801f2f8:	e7f1      	b.n	801f2de <__hexdig_fun+0xa>
 801f2fa:	2000      	movs	r0, #0
 801f2fc:	4770      	bx	lr
	...

0801f300 <__gethex>:
 801f300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f304:	ed2d 8b02 	vpush	{d8}
 801f308:	b089      	sub	sp, #36	; 0x24
 801f30a:	ee08 0a10 	vmov	s16, r0
 801f30e:	9304      	str	r3, [sp, #16]
 801f310:	4bbc      	ldr	r3, [pc, #752]	; (801f604 <__gethex+0x304>)
 801f312:	681b      	ldr	r3, [r3, #0]
 801f314:	9301      	str	r3, [sp, #4]
 801f316:	4618      	mov	r0, r3
 801f318:	468b      	mov	fp, r1
 801f31a:	4690      	mov	r8, r2
 801f31c:	f7e0 ff72 	bl	8000204 <strlen>
 801f320:	9b01      	ldr	r3, [sp, #4]
 801f322:	f8db 2000 	ldr.w	r2, [fp]
 801f326:	4403      	add	r3, r0
 801f328:	4682      	mov	sl, r0
 801f32a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801f32e:	9305      	str	r3, [sp, #20]
 801f330:	1c93      	adds	r3, r2, #2
 801f332:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f336:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f33a:	32fe      	adds	r2, #254	; 0xfe
 801f33c:	18d1      	adds	r1, r2, r3
 801f33e:	461f      	mov	r7, r3
 801f340:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f344:	9100      	str	r1, [sp, #0]
 801f346:	2830      	cmp	r0, #48	; 0x30
 801f348:	d0f8      	beq.n	801f33c <__gethex+0x3c>
 801f34a:	f7ff ffc3 	bl	801f2d4 <__hexdig_fun>
 801f34e:	4604      	mov	r4, r0
 801f350:	2800      	cmp	r0, #0
 801f352:	d13a      	bne.n	801f3ca <__gethex+0xca>
 801f354:	9901      	ldr	r1, [sp, #4]
 801f356:	4652      	mov	r2, sl
 801f358:	4638      	mov	r0, r7
 801f35a:	f7fd fd42 	bl	801cde2 <strncmp>
 801f35e:	4605      	mov	r5, r0
 801f360:	2800      	cmp	r0, #0
 801f362:	d168      	bne.n	801f436 <__gethex+0x136>
 801f364:	f817 000a 	ldrb.w	r0, [r7, sl]
 801f368:	eb07 060a 	add.w	r6, r7, sl
 801f36c:	f7ff ffb2 	bl	801f2d4 <__hexdig_fun>
 801f370:	2800      	cmp	r0, #0
 801f372:	d062      	beq.n	801f43a <__gethex+0x13a>
 801f374:	4633      	mov	r3, r6
 801f376:	7818      	ldrb	r0, [r3, #0]
 801f378:	2830      	cmp	r0, #48	; 0x30
 801f37a:	461f      	mov	r7, r3
 801f37c:	f103 0301 	add.w	r3, r3, #1
 801f380:	d0f9      	beq.n	801f376 <__gethex+0x76>
 801f382:	f7ff ffa7 	bl	801f2d4 <__hexdig_fun>
 801f386:	2301      	movs	r3, #1
 801f388:	fab0 f480 	clz	r4, r0
 801f38c:	0964      	lsrs	r4, r4, #5
 801f38e:	4635      	mov	r5, r6
 801f390:	9300      	str	r3, [sp, #0]
 801f392:	463a      	mov	r2, r7
 801f394:	4616      	mov	r6, r2
 801f396:	3201      	adds	r2, #1
 801f398:	7830      	ldrb	r0, [r6, #0]
 801f39a:	f7ff ff9b 	bl	801f2d4 <__hexdig_fun>
 801f39e:	2800      	cmp	r0, #0
 801f3a0:	d1f8      	bne.n	801f394 <__gethex+0x94>
 801f3a2:	9901      	ldr	r1, [sp, #4]
 801f3a4:	4652      	mov	r2, sl
 801f3a6:	4630      	mov	r0, r6
 801f3a8:	f7fd fd1b 	bl	801cde2 <strncmp>
 801f3ac:	b980      	cbnz	r0, 801f3d0 <__gethex+0xd0>
 801f3ae:	b94d      	cbnz	r5, 801f3c4 <__gethex+0xc4>
 801f3b0:	eb06 050a 	add.w	r5, r6, sl
 801f3b4:	462a      	mov	r2, r5
 801f3b6:	4616      	mov	r6, r2
 801f3b8:	3201      	adds	r2, #1
 801f3ba:	7830      	ldrb	r0, [r6, #0]
 801f3bc:	f7ff ff8a 	bl	801f2d4 <__hexdig_fun>
 801f3c0:	2800      	cmp	r0, #0
 801f3c2:	d1f8      	bne.n	801f3b6 <__gethex+0xb6>
 801f3c4:	1bad      	subs	r5, r5, r6
 801f3c6:	00ad      	lsls	r5, r5, #2
 801f3c8:	e004      	b.n	801f3d4 <__gethex+0xd4>
 801f3ca:	2400      	movs	r4, #0
 801f3cc:	4625      	mov	r5, r4
 801f3ce:	e7e0      	b.n	801f392 <__gethex+0x92>
 801f3d0:	2d00      	cmp	r5, #0
 801f3d2:	d1f7      	bne.n	801f3c4 <__gethex+0xc4>
 801f3d4:	7833      	ldrb	r3, [r6, #0]
 801f3d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f3da:	2b50      	cmp	r3, #80	; 0x50
 801f3dc:	d13b      	bne.n	801f456 <__gethex+0x156>
 801f3de:	7873      	ldrb	r3, [r6, #1]
 801f3e0:	2b2b      	cmp	r3, #43	; 0x2b
 801f3e2:	d02c      	beq.n	801f43e <__gethex+0x13e>
 801f3e4:	2b2d      	cmp	r3, #45	; 0x2d
 801f3e6:	d02e      	beq.n	801f446 <__gethex+0x146>
 801f3e8:	1c71      	adds	r1, r6, #1
 801f3ea:	f04f 0900 	mov.w	r9, #0
 801f3ee:	7808      	ldrb	r0, [r1, #0]
 801f3f0:	f7ff ff70 	bl	801f2d4 <__hexdig_fun>
 801f3f4:	1e43      	subs	r3, r0, #1
 801f3f6:	b2db      	uxtb	r3, r3
 801f3f8:	2b18      	cmp	r3, #24
 801f3fa:	d82c      	bhi.n	801f456 <__gethex+0x156>
 801f3fc:	f1a0 0210 	sub.w	r2, r0, #16
 801f400:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f404:	f7ff ff66 	bl	801f2d4 <__hexdig_fun>
 801f408:	1e43      	subs	r3, r0, #1
 801f40a:	b2db      	uxtb	r3, r3
 801f40c:	2b18      	cmp	r3, #24
 801f40e:	d91d      	bls.n	801f44c <__gethex+0x14c>
 801f410:	f1b9 0f00 	cmp.w	r9, #0
 801f414:	d000      	beq.n	801f418 <__gethex+0x118>
 801f416:	4252      	negs	r2, r2
 801f418:	4415      	add	r5, r2
 801f41a:	f8cb 1000 	str.w	r1, [fp]
 801f41e:	b1e4      	cbz	r4, 801f45a <__gethex+0x15a>
 801f420:	9b00      	ldr	r3, [sp, #0]
 801f422:	2b00      	cmp	r3, #0
 801f424:	bf14      	ite	ne
 801f426:	2700      	movne	r7, #0
 801f428:	2706      	moveq	r7, #6
 801f42a:	4638      	mov	r0, r7
 801f42c:	b009      	add	sp, #36	; 0x24
 801f42e:	ecbd 8b02 	vpop	{d8}
 801f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f436:	463e      	mov	r6, r7
 801f438:	4625      	mov	r5, r4
 801f43a:	2401      	movs	r4, #1
 801f43c:	e7ca      	b.n	801f3d4 <__gethex+0xd4>
 801f43e:	f04f 0900 	mov.w	r9, #0
 801f442:	1cb1      	adds	r1, r6, #2
 801f444:	e7d3      	b.n	801f3ee <__gethex+0xee>
 801f446:	f04f 0901 	mov.w	r9, #1
 801f44a:	e7fa      	b.n	801f442 <__gethex+0x142>
 801f44c:	230a      	movs	r3, #10
 801f44e:	fb03 0202 	mla	r2, r3, r2, r0
 801f452:	3a10      	subs	r2, #16
 801f454:	e7d4      	b.n	801f400 <__gethex+0x100>
 801f456:	4631      	mov	r1, r6
 801f458:	e7df      	b.n	801f41a <__gethex+0x11a>
 801f45a:	1bf3      	subs	r3, r6, r7
 801f45c:	3b01      	subs	r3, #1
 801f45e:	4621      	mov	r1, r4
 801f460:	2b07      	cmp	r3, #7
 801f462:	dc0b      	bgt.n	801f47c <__gethex+0x17c>
 801f464:	ee18 0a10 	vmov	r0, s16
 801f468:	f000 fbe0 	bl	801fc2c <_Balloc>
 801f46c:	4604      	mov	r4, r0
 801f46e:	b940      	cbnz	r0, 801f482 <__gethex+0x182>
 801f470:	4b65      	ldr	r3, [pc, #404]	; (801f608 <__gethex+0x308>)
 801f472:	4602      	mov	r2, r0
 801f474:	21de      	movs	r1, #222	; 0xde
 801f476:	4865      	ldr	r0, [pc, #404]	; (801f60c <__gethex+0x30c>)
 801f478:	f7fe ff4c 	bl	801e314 <__assert_func>
 801f47c:	3101      	adds	r1, #1
 801f47e:	105b      	asrs	r3, r3, #1
 801f480:	e7ee      	b.n	801f460 <__gethex+0x160>
 801f482:	f100 0914 	add.w	r9, r0, #20
 801f486:	f04f 0b00 	mov.w	fp, #0
 801f48a:	f1ca 0301 	rsb	r3, sl, #1
 801f48e:	f8cd 9008 	str.w	r9, [sp, #8]
 801f492:	f8cd b000 	str.w	fp, [sp]
 801f496:	9306      	str	r3, [sp, #24]
 801f498:	42b7      	cmp	r7, r6
 801f49a:	d340      	bcc.n	801f51e <__gethex+0x21e>
 801f49c:	9802      	ldr	r0, [sp, #8]
 801f49e:	9b00      	ldr	r3, [sp, #0]
 801f4a0:	f840 3b04 	str.w	r3, [r0], #4
 801f4a4:	eba0 0009 	sub.w	r0, r0, r9
 801f4a8:	1080      	asrs	r0, r0, #2
 801f4aa:	0146      	lsls	r6, r0, #5
 801f4ac:	6120      	str	r0, [r4, #16]
 801f4ae:	4618      	mov	r0, r3
 801f4b0:	f000 fcb2 	bl	801fe18 <__hi0bits>
 801f4b4:	1a30      	subs	r0, r6, r0
 801f4b6:	f8d8 6000 	ldr.w	r6, [r8]
 801f4ba:	42b0      	cmp	r0, r6
 801f4bc:	dd63      	ble.n	801f586 <__gethex+0x286>
 801f4be:	1b87      	subs	r7, r0, r6
 801f4c0:	4639      	mov	r1, r7
 801f4c2:	4620      	mov	r0, r4
 801f4c4:	f001 f84c 	bl	8020560 <__any_on>
 801f4c8:	4682      	mov	sl, r0
 801f4ca:	b1a8      	cbz	r0, 801f4f8 <__gethex+0x1f8>
 801f4cc:	1e7b      	subs	r3, r7, #1
 801f4ce:	1159      	asrs	r1, r3, #5
 801f4d0:	f003 021f 	and.w	r2, r3, #31
 801f4d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801f4d8:	f04f 0a01 	mov.w	sl, #1
 801f4dc:	fa0a f202 	lsl.w	r2, sl, r2
 801f4e0:	420a      	tst	r2, r1
 801f4e2:	d009      	beq.n	801f4f8 <__gethex+0x1f8>
 801f4e4:	4553      	cmp	r3, sl
 801f4e6:	dd05      	ble.n	801f4f4 <__gethex+0x1f4>
 801f4e8:	1eb9      	subs	r1, r7, #2
 801f4ea:	4620      	mov	r0, r4
 801f4ec:	f001 f838 	bl	8020560 <__any_on>
 801f4f0:	2800      	cmp	r0, #0
 801f4f2:	d145      	bne.n	801f580 <__gethex+0x280>
 801f4f4:	f04f 0a02 	mov.w	sl, #2
 801f4f8:	4639      	mov	r1, r7
 801f4fa:	4620      	mov	r0, r4
 801f4fc:	f7ff fe98 	bl	801f230 <rshift>
 801f500:	443d      	add	r5, r7
 801f502:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f506:	42ab      	cmp	r3, r5
 801f508:	da4c      	bge.n	801f5a4 <__gethex+0x2a4>
 801f50a:	ee18 0a10 	vmov	r0, s16
 801f50e:	4621      	mov	r1, r4
 801f510:	f000 fbcc 	bl	801fcac <_Bfree>
 801f514:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f516:	2300      	movs	r3, #0
 801f518:	6013      	str	r3, [r2, #0]
 801f51a:	27a3      	movs	r7, #163	; 0xa3
 801f51c:	e785      	b.n	801f42a <__gethex+0x12a>
 801f51e:	1e73      	subs	r3, r6, #1
 801f520:	9a05      	ldr	r2, [sp, #20]
 801f522:	9303      	str	r3, [sp, #12]
 801f524:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f528:	4293      	cmp	r3, r2
 801f52a:	d019      	beq.n	801f560 <__gethex+0x260>
 801f52c:	f1bb 0f20 	cmp.w	fp, #32
 801f530:	d107      	bne.n	801f542 <__gethex+0x242>
 801f532:	9b02      	ldr	r3, [sp, #8]
 801f534:	9a00      	ldr	r2, [sp, #0]
 801f536:	f843 2b04 	str.w	r2, [r3], #4
 801f53a:	9302      	str	r3, [sp, #8]
 801f53c:	2300      	movs	r3, #0
 801f53e:	9300      	str	r3, [sp, #0]
 801f540:	469b      	mov	fp, r3
 801f542:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801f546:	f7ff fec5 	bl	801f2d4 <__hexdig_fun>
 801f54a:	9b00      	ldr	r3, [sp, #0]
 801f54c:	f000 000f 	and.w	r0, r0, #15
 801f550:	fa00 f00b 	lsl.w	r0, r0, fp
 801f554:	4303      	orrs	r3, r0
 801f556:	9300      	str	r3, [sp, #0]
 801f558:	f10b 0b04 	add.w	fp, fp, #4
 801f55c:	9b03      	ldr	r3, [sp, #12]
 801f55e:	e00d      	b.n	801f57c <__gethex+0x27c>
 801f560:	9b03      	ldr	r3, [sp, #12]
 801f562:	9a06      	ldr	r2, [sp, #24]
 801f564:	4413      	add	r3, r2
 801f566:	42bb      	cmp	r3, r7
 801f568:	d3e0      	bcc.n	801f52c <__gethex+0x22c>
 801f56a:	4618      	mov	r0, r3
 801f56c:	9901      	ldr	r1, [sp, #4]
 801f56e:	9307      	str	r3, [sp, #28]
 801f570:	4652      	mov	r2, sl
 801f572:	f7fd fc36 	bl	801cde2 <strncmp>
 801f576:	9b07      	ldr	r3, [sp, #28]
 801f578:	2800      	cmp	r0, #0
 801f57a:	d1d7      	bne.n	801f52c <__gethex+0x22c>
 801f57c:	461e      	mov	r6, r3
 801f57e:	e78b      	b.n	801f498 <__gethex+0x198>
 801f580:	f04f 0a03 	mov.w	sl, #3
 801f584:	e7b8      	b.n	801f4f8 <__gethex+0x1f8>
 801f586:	da0a      	bge.n	801f59e <__gethex+0x29e>
 801f588:	1a37      	subs	r7, r6, r0
 801f58a:	4621      	mov	r1, r4
 801f58c:	ee18 0a10 	vmov	r0, s16
 801f590:	463a      	mov	r2, r7
 801f592:	f000 fda7 	bl	80200e4 <__lshift>
 801f596:	1bed      	subs	r5, r5, r7
 801f598:	4604      	mov	r4, r0
 801f59a:	f100 0914 	add.w	r9, r0, #20
 801f59e:	f04f 0a00 	mov.w	sl, #0
 801f5a2:	e7ae      	b.n	801f502 <__gethex+0x202>
 801f5a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f5a8:	42a8      	cmp	r0, r5
 801f5aa:	dd72      	ble.n	801f692 <__gethex+0x392>
 801f5ac:	1b45      	subs	r5, r0, r5
 801f5ae:	42ae      	cmp	r6, r5
 801f5b0:	dc36      	bgt.n	801f620 <__gethex+0x320>
 801f5b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f5b6:	2b02      	cmp	r3, #2
 801f5b8:	d02a      	beq.n	801f610 <__gethex+0x310>
 801f5ba:	2b03      	cmp	r3, #3
 801f5bc:	d02c      	beq.n	801f618 <__gethex+0x318>
 801f5be:	2b01      	cmp	r3, #1
 801f5c0:	d115      	bne.n	801f5ee <__gethex+0x2ee>
 801f5c2:	42ae      	cmp	r6, r5
 801f5c4:	d113      	bne.n	801f5ee <__gethex+0x2ee>
 801f5c6:	2e01      	cmp	r6, #1
 801f5c8:	d10b      	bne.n	801f5e2 <__gethex+0x2e2>
 801f5ca:	9a04      	ldr	r2, [sp, #16]
 801f5cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f5d0:	6013      	str	r3, [r2, #0]
 801f5d2:	2301      	movs	r3, #1
 801f5d4:	6123      	str	r3, [r4, #16]
 801f5d6:	f8c9 3000 	str.w	r3, [r9]
 801f5da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f5dc:	2762      	movs	r7, #98	; 0x62
 801f5de:	601c      	str	r4, [r3, #0]
 801f5e0:	e723      	b.n	801f42a <__gethex+0x12a>
 801f5e2:	1e71      	subs	r1, r6, #1
 801f5e4:	4620      	mov	r0, r4
 801f5e6:	f000 ffbb 	bl	8020560 <__any_on>
 801f5ea:	2800      	cmp	r0, #0
 801f5ec:	d1ed      	bne.n	801f5ca <__gethex+0x2ca>
 801f5ee:	ee18 0a10 	vmov	r0, s16
 801f5f2:	4621      	mov	r1, r4
 801f5f4:	f000 fb5a 	bl	801fcac <_Bfree>
 801f5f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f5fa:	2300      	movs	r3, #0
 801f5fc:	6013      	str	r3, [r2, #0]
 801f5fe:	2750      	movs	r7, #80	; 0x50
 801f600:	e713      	b.n	801f42a <__gethex+0x12a>
 801f602:	bf00      	nop
 801f604:	08023650 	.word	0x08023650
 801f608:	080235d4 	.word	0x080235d4
 801f60c:	080235e5 	.word	0x080235e5
 801f610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f612:	2b00      	cmp	r3, #0
 801f614:	d1eb      	bne.n	801f5ee <__gethex+0x2ee>
 801f616:	e7d8      	b.n	801f5ca <__gethex+0x2ca>
 801f618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	d1d5      	bne.n	801f5ca <__gethex+0x2ca>
 801f61e:	e7e6      	b.n	801f5ee <__gethex+0x2ee>
 801f620:	1e6f      	subs	r7, r5, #1
 801f622:	f1ba 0f00 	cmp.w	sl, #0
 801f626:	d131      	bne.n	801f68c <__gethex+0x38c>
 801f628:	b127      	cbz	r7, 801f634 <__gethex+0x334>
 801f62a:	4639      	mov	r1, r7
 801f62c:	4620      	mov	r0, r4
 801f62e:	f000 ff97 	bl	8020560 <__any_on>
 801f632:	4682      	mov	sl, r0
 801f634:	117b      	asrs	r3, r7, #5
 801f636:	2101      	movs	r1, #1
 801f638:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f63c:	f007 071f 	and.w	r7, r7, #31
 801f640:	fa01 f707 	lsl.w	r7, r1, r7
 801f644:	421f      	tst	r7, r3
 801f646:	4629      	mov	r1, r5
 801f648:	4620      	mov	r0, r4
 801f64a:	bf18      	it	ne
 801f64c:	f04a 0a02 	orrne.w	sl, sl, #2
 801f650:	1b76      	subs	r6, r6, r5
 801f652:	f7ff fded 	bl	801f230 <rshift>
 801f656:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f65a:	2702      	movs	r7, #2
 801f65c:	f1ba 0f00 	cmp.w	sl, #0
 801f660:	d048      	beq.n	801f6f4 <__gethex+0x3f4>
 801f662:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f666:	2b02      	cmp	r3, #2
 801f668:	d015      	beq.n	801f696 <__gethex+0x396>
 801f66a:	2b03      	cmp	r3, #3
 801f66c:	d017      	beq.n	801f69e <__gethex+0x39e>
 801f66e:	2b01      	cmp	r3, #1
 801f670:	d109      	bne.n	801f686 <__gethex+0x386>
 801f672:	f01a 0f02 	tst.w	sl, #2
 801f676:	d006      	beq.n	801f686 <__gethex+0x386>
 801f678:	f8d9 0000 	ldr.w	r0, [r9]
 801f67c:	ea4a 0a00 	orr.w	sl, sl, r0
 801f680:	f01a 0f01 	tst.w	sl, #1
 801f684:	d10e      	bne.n	801f6a4 <__gethex+0x3a4>
 801f686:	f047 0710 	orr.w	r7, r7, #16
 801f68a:	e033      	b.n	801f6f4 <__gethex+0x3f4>
 801f68c:	f04f 0a01 	mov.w	sl, #1
 801f690:	e7d0      	b.n	801f634 <__gethex+0x334>
 801f692:	2701      	movs	r7, #1
 801f694:	e7e2      	b.n	801f65c <__gethex+0x35c>
 801f696:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f698:	f1c3 0301 	rsb	r3, r3, #1
 801f69c:	9315      	str	r3, [sp, #84]	; 0x54
 801f69e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d0f0      	beq.n	801f686 <__gethex+0x386>
 801f6a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f6a8:	f104 0314 	add.w	r3, r4, #20
 801f6ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801f6b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801f6b4:	f04f 0c00 	mov.w	ip, #0
 801f6b8:	4618      	mov	r0, r3
 801f6ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801f6be:	f1b2 3fff 	cmp.w	r2, #4294967295
 801f6c2:	d01c      	beq.n	801f6fe <__gethex+0x3fe>
 801f6c4:	3201      	adds	r2, #1
 801f6c6:	6002      	str	r2, [r0, #0]
 801f6c8:	2f02      	cmp	r7, #2
 801f6ca:	f104 0314 	add.w	r3, r4, #20
 801f6ce:	d13f      	bne.n	801f750 <__gethex+0x450>
 801f6d0:	f8d8 2000 	ldr.w	r2, [r8]
 801f6d4:	3a01      	subs	r2, #1
 801f6d6:	42b2      	cmp	r2, r6
 801f6d8:	d10a      	bne.n	801f6f0 <__gethex+0x3f0>
 801f6da:	1171      	asrs	r1, r6, #5
 801f6dc:	2201      	movs	r2, #1
 801f6de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f6e2:	f006 061f 	and.w	r6, r6, #31
 801f6e6:	fa02 f606 	lsl.w	r6, r2, r6
 801f6ea:	421e      	tst	r6, r3
 801f6ec:	bf18      	it	ne
 801f6ee:	4617      	movne	r7, r2
 801f6f0:	f047 0720 	orr.w	r7, r7, #32
 801f6f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f6f6:	601c      	str	r4, [r3, #0]
 801f6f8:	9b04      	ldr	r3, [sp, #16]
 801f6fa:	601d      	str	r5, [r3, #0]
 801f6fc:	e695      	b.n	801f42a <__gethex+0x12a>
 801f6fe:	4299      	cmp	r1, r3
 801f700:	f843 cc04 	str.w	ip, [r3, #-4]
 801f704:	d8d8      	bhi.n	801f6b8 <__gethex+0x3b8>
 801f706:	68a3      	ldr	r3, [r4, #8]
 801f708:	459b      	cmp	fp, r3
 801f70a:	db19      	blt.n	801f740 <__gethex+0x440>
 801f70c:	6861      	ldr	r1, [r4, #4]
 801f70e:	ee18 0a10 	vmov	r0, s16
 801f712:	3101      	adds	r1, #1
 801f714:	f000 fa8a 	bl	801fc2c <_Balloc>
 801f718:	4681      	mov	r9, r0
 801f71a:	b918      	cbnz	r0, 801f724 <__gethex+0x424>
 801f71c:	4b1a      	ldr	r3, [pc, #104]	; (801f788 <__gethex+0x488>)
 801f71e:	4602      	mov	r2, r0
 801f720:	2184      	movs	r1, #132	; 0x84
 801f722:	e6a8      	b.n	801f476 <__gethex+0x176>
 801f724:	6922      	ldr	r2, [r4, #16]
 801f726:	3202      	adds	r2, #2
 801f728:	f104 010c 	add.w	r1, r4, #12
 801f72c:	0092      	lsls	r2, r2, #2
 801f72e:	300c      	adds	r0, #12
 801f730:	f7fb ff9a 	bl	801b668 <memcpy>
 801f734:	4621      	mov	r1, r4
 801f736:	ee18 0a10 	vmov	r0, s16
 801f73a:	f000 fab7 	bl	801fcac <_Bfree>
 801f73e:	464c      	mov	r4, r9
 801f740:	6923      	ldr	r3, [r4, #16]
 801f742:	1c5a      	adds	r2, r3, #1
 801f744:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f748:	6122      	str	r2, [r4, #16]
 801f74a:	2201      	movs	r2, #1
 801f74c:	615a      	str	r2, [r3, #20]
 801f74e:	e7bb      	b.n	801f6c8 <__gethex+0x3c8>
 801f750:	6922      	ldr	r2, [r4, #16]
 801f752:	455a      	cmp	r2, fp
 801f754:	dd0b      	ble.n	801f76e <__gethex+0x46e>
 801f756:	2101      	movs	r1, #1
 801f758:	4620      	mov	r0, r4
 801f75a:	f7ff fd69 	bl	801f230 <rshift>
 801f75e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f762:	3501      	adds	r5, #1
 801f764:	42ab      	cmp	r3, r5
 801f766:	f6ff aed0 	blt.w	801f50a <__gethex+0x20a>
 801f76a:	2701      	movs	r7, #1
 801f76c:	e7c0      	b.n	801f6f0 <__gethex+0x3f0>
 801f76e:	f016 061f 	ands.w	r6, r6, #31
 801f772:	d0fa      	beq.n	801f76a <__gethex+0x46a>
 801f774:	449a      	add	sl, r3
 801f776:	f1c6 0620 	rsb	r6, r6, #32
 801f77a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801f77e:	f000 fb4b 	bl	801fe18 <__hi0bits>
 801f782:	42b0      	cmp	r0, r6
 801f784:	dbe7      	blt.n	801f756 <__gethex+0x456>
 801f786:	e7f0      	b.n	801f76a <__gethex+0x46a>
 801f788:	080235d4 	.word	0x080235d4

0801f78c <L_shift>:
 801f78c:	f1c2 0208 	rsb	r2, r2, #8
 801f790:	0092      	lsls	r2, r2, #2
 801f792:	b570      	push	{r4, r5, r6, lr}
 801f794:	f1c2 0620 	rsb	r6, r2, #32
 801f798:	6843      	ldr	r3, [r0, #4]
 801f79a:	6804      	ldr	r4, [r0, #0]
 801f79c:	fa03 f506 	lsl.w	r5, r3, r6
 801f7a0:	432c      	orrs	r4, r5
 801f7a2:	40d3      	lsrs	r3, r2
 801f7a4:	6004      	str	r4, [r0, #0]
 801f7a6:	f840 3f04 	str.w	r3, [r0, #4]!
 801f7aa:	4288      	cmp	r0, r1
 801f7ac:	d3f4      	bcc.n	801f798 <L_shift+0xc>
 801f7ae:	bd70      	pop	{r4, r5, r6, pc}

0801f7b0 <__match>:
 801f7b0:	b530      	push	{r4, r5, lr}
 801f7b2:	6803      	ldr	r3, [r0, #0]
 801f7b4:	3301      	adds	r3, #1
 801f7b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f7ba:	b914      	cbnz	r4, 801f7c2 <__match+0x12>
 801f7bc:	6003      	str	r3, [r0, #0]
 801f7be:	2001      	movs	r0, #1
 801f7c0:	bd30      	pop	{r4, r5, pc}
 801f7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f7c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f7ca:	2d19      	cmp	r5, #25
 801f7cc:	bf98      	it	ls
 801f7ce:	3220      	addls	r2, #32
 801f7d0:	42a2      	cmp	r2, r4
 801f7d2:	d0f0      	beq.n	801f7b6 <__match+0x6>
 801f7d4:	2000      	movs	r0, #0
 801f7d6:	e7f3      	b.n	801f7c0 <__match+0x10>

0801f7d8 <__hexnan>:
 801f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7dc:	680b      	ldr	r3, [r1, #0]
 801f7de:	6801      	ldr	r1, [r0, #0]
 801f7e0:	115e      	asrs	r6, r3, #5
 801f7e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f7e6:	f013 031f 	ands.w	r3, r3, #31
 801f7ea:	b087      	sub	sp, #28
 801f7ec:	bf18      	it	ne
 801f7ee:	3604      	addne	r6, #4
 801f7f0:	2500      	movs	r5, #0
 801f7f2:	1f37      	subs	r7, r6, #4
 801f7f4:	4682      	mov	sl, r0
 801f7f6:	4690      	mov	r8, r2
 801f7f8:	9301      	str	r3, [sp, #4]
 801f7fa:	f846 5c04 	str.w	r5, [r6, #-4]
 801f7fe:	46b9      	mov	r9, r7
 801f800:	463c      	mov	r4, r7
 801f802:	9502      	str	r5, [sp, #8]
 801f804:	46ab      	mov	fp, r5
 801f806:	784a      	ldrb	r2, [r1, #1]
 801f808:	1c4b      	adds	r3, r1, #1
 801f80a:	9303      	str	r3, [sp, #12]
 801f80c:	b342      	cbz	r2, 801f860 <__hexnan+0x88>
 801f80e:	4610      	mov	r0, r2
 801f810:	9105      	str	r1, [sp, #20]
 801f812:	9204      	str	r2, [sp, #16]
 801f814:	f7ff fd5e 	bl	801f2d4 <__hexdig_fun>
 801f818:	2800      	cmp	r0, #0
 801f81a:	d14f      	bne.n	801f8bc <__hexnan+0xe4>
 801f81c:	9a04      	ldr	r2, [sp, #16]
 801f81e:	9905      	ldr	r1, [sp, #20]
 801f820:	2a20      	cmp	r2, #32
 801f822:	d818      	bhi.n	801f856 <__hexnan+0x7e>
 801f824:	9b02      	ldr	r3, [sp, #8]
 801f826:	459b      	cmp	fp, r3
 801f828:	dd13      	ble.n	801f852 <__hexnan+0x7a>
 801f82a:	454c      	cmp	r4, r9
 801f82c:	d206      	bcs.n	801f83c <__hexnan+0x64>
 801f82e:	2d07      	cmp	r5, #7
 801f830:	dc04      	bgt.n	801f83c <__hexnan+0x64>
 801f832:	462a      	mov	r2, r5
 801f834:	4649      	mov	r1, r9
 801f836:	4620      	mov	r0, r4
 801f838:	f7ff ffa8 	bl	801f78c <L_shift>
 801f83c:	4544      	cmp	r4, r8
 801f83e:	d950      	bls.n	801f8e2 <__hexnan+0x10a>
 801f840:	2300      	movs	r3, #0
 801f842:	f1a4 0904 	sub.w	r9, r4, #4
 801f846:	f844 3c04 	str.w	r3, [r4, #-4]
 801f84a:	f8cd b008 	str.w	fp, [sp, #8]
 801f84e:	464c      	mov	r4, r9
 801f850:	461d      	mov	r5, r3
 801f852:	9903      	ldr	r1, [sp, #12]
 801f854:	e7d7      	b.n	801f806 <__hexnan+0x2e>
 801f856:	2a29      	cmp	r2, #41	; 0x29
 801f858:	d156      	bne.n	801f908 <__hexnan+0x130>
 801f85a:	3102      	adds	r1, #2
 801f85c:	f8ca 1000 	str.w	r1, [sl]
 801f860:	f1bb 0f00 	cmp.w	fp, #0
 801f864:	d050      	beq.n	801f908 <__hexnan+0x130>
 801f866:	454c      	cmp	r4, r9
 801f868:	d206      	bcs.n	801f878 <__hexnan+0xa0>
 801f86a:	2d07      	cmp	r5, #7
 801f86c:	dc04      	bgt.n	801f878 <__hexnan+0xa0>
 801f86e:	462a      	mov	r2, r5
 801f870:	4649      	mov	r1, r9
 801f872:	4620      	mov	r0, r4
 801f874:	f7ff ff8a 	bl	801f78c <L_shift>
 801f878:	4544      	cmp	r4, r8
 801f87a:	d934      	bls.n	801f8e6 <__hexnan+0x10e>
 801f87c:	f1a8 0204 	sub.w	r2, r8, #4
 801f880:	4623      	mov	r3, r4
 801f882:	f853 1b04 	ldr.w	r1, [r3], #4
 801f886:	f842 1f04 	str.w	r1, [r2, #4]!
 801f88a:	429f      	cmp	r7, r3
 801f88c:	d2f9      	bcs.n	801f882 <__hexnan+0xaa>
 801f88e:	1b3b      	subs	r3, r7, r4
 801f890:	f023 0303 	bic.w	r3, r3, #3
 801f894:	3304      	adds	r3, #4
 801f896:	3401      	adds	r4, #1
 801f898:	3e03      	subs	r6, #3
 801f89a:	42b4      	cmp	r4, r6
 801f89c:	bf88      	it	hi
 801f89e:	2304      	movhi	r3, #4
 801f8a0:	4443      	add	r3, r8
 801f8a2:	2200      	movs	r2, #0
 801f8a4:	f843 2b04 	str.w	r2, [r3], #4
 801f8a8:	429f      	cmp	r7, r3
 801f8aa:	d2fb      	bcs.n	801f8a4 <__hexnan+0xcc>
 801f8ac:	683b      	ldr	r3, [r7, #0]
 801f8ae:	b91b      	cbnz	r3, 801f8b8 <__hexnan+0xe0>
 801f8b0:	4547      	cmp	r7, r8
 801f8b2:	d127      	bne.n	801f904 <__hexnan+0x12c>
 801f8b4:	2301      	movs	r3, #1
 801f8b6:	603b      	str	r3, [r7, #0]
 801f8b8:	2005      	movs	r0, #5
 801f8ba:	e026      	b.n	801f90a <__hexnan+0x132>
 801f8bc:	3501      	adds	r5, #1
 801f8be:	2d08      	cmp	r5, #8
 801f8c0:	f10b 0b01 	add.w	fp, fp, #1
 801f8c4:	dd06      	ble.n	801f8d4 <__hexnan+0xfc>
 801f8c6:	4544      	cmp	r4, r8
 801f8c8:	d9c3      	bls.n	801f852 <__hexnan+0x7a>
 801f8ca:	2300      	movs	r3, #0
 801f8cc:	f844 3c04 	str.w	r3, [r4, #-4]
 801f8d0:	2501      	movs	r5, #1
 801f8d2:	3c04      	subs	r4, #4
 801f8d4:	6822      	ldr	r2, [r4, #0]
 801f8d6:	f000 000f 	and.w	r0, r0, #15
 801f8da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801f8de:	6022      	str	r2, [r4, #0]
 801f8e0:	e7b7      	b.n	801f852 <__hexnan+0x7a>
 801f8e2:	2508      	movs	r5, #8
 801f8e4:	e7b5      	b.n	801f852 <__hexnan+0x7a>
 801f8e6:	9b01      	ldr	r3, [sp, #4]
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	d0df      	beq.n	801f8ac <__hexnan+0xd4>
 801f8ec:	f04f 32ff 	mov.w	r2, #4294967295
 801f8f0:	f1c3 0320 	rsb	r3, r3, #32
 801f8f4:	fa22 f303 	lsr.w	r3, r2, r3
 801f8f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f8fc:	401a      	ands	r2, r3
 801f8fe:	f846 2c04 	str.w	r2, [r6, #-4]
 801f902:	e7d3      	b.n	801f8ac <__hexnan+0xd4>
 801f904:	3f04      	subs	r7, #4
 801f906:	e7d1      	b.n	801f8ac <__hexnan+0xd4>
 801f908:	2004      	movs	r0, #4
 801f90a:	b007      	add	sp, #28
 801f90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f910 <_findenv_r>:
 801f910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f914:	4607      	mov	r7, r0
 801f916:	4689      	mov	r9, r1
 801f918:	4616      	mov	r6, r2
 801f91a:	f001 fcdf 	bl	80212dc <__env_lock>
 801f91e:	4b18      	ldr	r3, [pc, #96]	; (801f980 <_findenv_r+0x70>)
 801f920:	681c      	ldr	r4, [r3, #0]
 801f922:	469a      	mov	sl, r3
 801f924:	b134      	cbz	r4, 801f934 <_findenv_r+0x24>
 801f926:	464b      	mov	r3, r9
 801f928:	4698      	mov	r8, r3
 801f92a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f92e:	b139      	cbz	r1, 801f940 <_findenv_r+0x30>
 801f930:	293d      	cmp	r1, #61	; 0x3d
 801f932:	d1f9      	bne.n	801f928 <_findenv_r+0x18>
 801f934:	4638      	mov	r0, r7
 801f936:	f001 fcd7 	bl	80212e8 <__env_unlock>
 801f93a:	2000      	movs	r0, #0
 801f93c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f940:	eba8 0809 	sub.w	r8, r8, r9
 801f944:	46a3      	mov	fp, r4
 801f946:	f854 0b04 	ldr.w	r0, [r4], #4
 801f94a:	2800      	cmp	r0, #0
 801f94c:	d0f2      	beq.n	801f934 <_findenv_r+0x24>
 801f94e:	4642      	mov	r2, r8
 801f950:	4649      	mov	r1, r9
 801f952:	f7fd fa46 	bl	801cde2 <strncmp>
 801f956:	2800      	cmp	r0, #0
 801f958:	d1f4      	bne.n	801f944 <_findenv_r+0x34>
 801f95a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f95e:	eb03 0508 	add.w	r5, r3, r8
 801f962:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f966:	2b3d      	cmp	r3, #61	; 0x3d
 801f968:	d1ec      	bne.n	801f944 <_findenv_r+0x34>
 801f96a:	f8da 3000 	ldr.w	r3, [sl]
 801f96e:	ebab 0303 	sub.w	r3, fp, r3
 801f972:	109b      	asrs	r3, r3, #2
 801f974:	4638      	mov	r0, r7
 801f976:	6033      	str	r3, [r6, #0]
 801f978:	f001 fcb6 	bl	80212e8 <__env_unlock>
 801f97c:	1c68      	adds	r0, r5, #1
 801f97e:	e7dd      	b.n	801f93c <_findenv_r+0x2c>
 801f980:	20000000 	.word	0x20000000

0801f984 <_getenv_r>:
 801f984:	b507      	push	{r0, r1, r2, lr}
 801f986:	aa01      	add	r2, sp, #4
 801f988:	f7ff ffc2 	bl	801f910 <_findenv_r>
 801f98c:	b003      	add	sp, #12
 801f98e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f994 <__gettzinfo>:
 801f994:	4800      	ldr	r0, [pc, #0]	; (801f998 <__gettzinfo+0x4>)
 801f996:	4770      	bx	lr
 801f998:	20000270 	.word	0x20000270

0801f99c <gmtime_r>:
 801f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9a0:	e9d0 6700 	ldrd	r6, r7, [r0]
 801f9a4:	460c      	mov	r4, r1
 801f9a6:	4a51      	ldr	r2, [pc, #324]	; (801faec <gmtime_r+0x150>)
 801f9a8:	2300      	movs	r3, #0
 801f9aa:	4630      	mov	r0, r6
 801f9ac:	4639      	mov	r1, r7
 801f9ae:	f7e1 f98b 	bl	8000cc8 <__aeabi_ldivmod>
 801f9b2:	4639      	mov	r1, r7
 801f9b4:	4605      	mov	r5, r0
 801f9b6:	4a4d      	ldr	r2, [pc, #308]	; (801faec <gmtime_r+0x150>)
 801f9b8:	4630      	mov	r0, r6
 801f9ba:	2300      	movs	r3, #0
 801f9bc:	f7e1 f984 	bl	8000cc8 <__aeabi_ldivmod>
 801f9c0:	2a00      	cmp	r2, #0
 801f9c2:	bfbc      	itt	lt
 801f9c4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801f9c8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801f9cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f9d0:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801f9d4:	fbb2 f3f1 	udiv	r3, r2, r1
 801f9d8:	fb01 2213 	mls	r2, r1, r3, r2
 801f9dc:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801f9e0:	bfac      	ite	ge
 801f9e2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801f9e6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801f9ea:	60a3      	str	r3, [r4, #8]
 801f9ec:	fbb2 f3f1 	udiv	r3, r2, r1
 801f9f0:	fb01 2213 	mls	r2, r1, r3, r2
 801f9f4:	6063      	str	r3, [r4, #4]
 801f9f6:	6022      	str	r2, [r4, #0]
 801f9f8:	1cc3      	adds	r3, r0, #3
 801f9fa:	2207      	movs	r2, #7
 801f9fc:	fb93 f2f2 	sdiv	r2, r3, r2
 801fa00:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801fa04:	1a9b      	subs	r3, r3, r2
 801fa06:	bf48      	it	mi
 801fa08:	3307      	addmi	r3, #7
 801fa0a:	2800      	cmp	r0, #0
 801fa0c:	61a3      	str	r3, [r4, #24]
 801fa0e:	bfb8      	it	lt
 801fa10:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801fa14:	4936      	ldr	r1, [pc, #216]	; (801faf0 <gmtime_r+0x154>)
 801fa16:	bfae      	itee	ge
 801fa18:	fb90 f1f1 	sdivge	r1, r0, r1
 801fa1c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801fa20:	fb93 f1f1 	sdivlt	r1, r3, r1
 801fa24:	4b33      	ldr	r3, [pc, #204]	; (801faf4 <gmtime_r+0x158>)
 801fa26:	fb03 0001 	mla	r0, r3, r1, r0
 801fa2a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801fa2e:	fbb0 f2f2 	udiv	r2, r0, r2
 801fa32:	4402      	add	r2, r0
 801fa34:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801fa38:	fbb0 f3fc 	udiv	r3, r0, ip
 801fa3c:	1ad2      	subs	r2, r2, r3
 801fa3e:	f240 176d 	movw	r7, #365	; 0x16d
 801fa42:	4b2d      	ldr	r3, [pc, #180]	; (801faf8 <gmtime_r+0x15c>)
 801fa44:	fbb0 f3f3 	udiv	r3, r0, r3
 801fa48:	2664      	movs	r6, #100	; 0x64
 801fa4a:	1ad3      	subs	r3, r2, r3
 801fa4c:	fbb3 f5f7 	udiv	r5, r3, r7
 801fa50:	fbb3 f3fc 	udiv	r3, r3, ip
 801fa54:	fbb5 f2f6 	udiv	r2, r5, r6
 801fa58:	1ad3      	subs	r3, r2, r3
 801fa5a:	4403      	add	r3, r0
 801fa5c:	fb07 3315 	mls	r3, r7, r5, r3
 801fa60:	2099      	movs	r0, #153	; 0x99
 801fa62:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801fa66:	f10c 0c02 	add.w	ip, ip, #2
 801fa6a:	f103 0e01 	add.w	lr, r3, #1
 801fa6e:	fbbc f7f0 	udiv	r7, ip, r0
 801fa72:	4378      	muls	r0, r7
 801fa74:	3002      	adds	r0, #2
 801fa76:	f04f 0805 	mov.w	r8, #5
 801fa7a:	fbb0 f0f8 	udiv	r0, r0, r8
 801fa7e:	ebae 0000 	sub.w	r0, lr, r0
 801fa82:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801fa86:	45f4      	cmp	ip, lr
 801fa88:	bf94      	ite	ls
 801fa8a:	f04f 0c02 	movls.w	ip, #2
 801fa8e:	f06f 0c09 	mvnhi.w	ip, #9
 801fa92:	4467      	add	r7, ip
 801fa94:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801fa98:	fb0c 5101 	mla	r1, ip, r1, r5
 801fa9c:	2f01      	cmp	r7, #1
 801fa9e:	bf98      	it	ls
 801faa0:	3101      	addls	r1, #1
 801faa2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801faa6:	d30c      	bcc.n	801fac2 <gmtime_r+0x126>
 801faa8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801faac:	61e3      	str	r3, [r4, #28]
 801faae:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801fab2:	2300      	movs	r3, #0
 801fab4:	60e0      	str	r0, [r4, #12]
 801fab6:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801faba:	6223      	str	r3, [r4, #32]
 801fabc:	4620      	mov	r0, r4
 801fabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fac2:	f015 0f03 	tst.w	r5, #3
 801fac6:	d102      	bne.n	801face <gmtime_r+0x132>
 801fac8:	fb06 5212 	mls	r2, r6, r2, r5
 801facc:	b95a      	cbnz	r2, 801fae6 <gmtime_r+0x14a>
 801face:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801fad2:	fbb5 f2f6 	udiv	r2, r5, r6
 801fad6:	fb06 5212 	mls	r2, r6, r2, r5
 801fada:	fab2 f282 	clz	r2, r2
 801fade:	0952      	lsrs	r2, r2, #5
 801fae0:	333b      	adds	r3, #59	; 0x3b
 801fae2:	4413      	add	r3, r2
 801fae4:	e7e2      	b.n	801faac <gmtime_r+0x110>
 801fae6:	2201      	movs	r2, #1
 801fae8:	e7fa      	b.n	801fae0 <gmtime_r+0x144>
 801faea:	bf00      	nop
 801faec:	00015180 	.word	0x00015180
 801faf0:	00023ab1 	.word	0x00023ab1
 801faf4:	fffdc54f 	.word	0xfffdc54f
 801faf8:	00023ab0 	.word	0x00023ab0

0801fafc <_localeconv_r>:
 801fafc:	4800      	ldr	r0, [pc, #0]	; (801fb00 <_localeconv_r+0x4>)
 801fafe:	4770      	bx	lr
 801fb00:	200003bc 	.word	0x200003bc

0801fb04 <_lseek_r>:
 801fb04:	b538      	push	{r3, r4, r5, lr}
 801fb06:	4d07      	ldr	r5, [pc, #28]	; (801fb24 <_lseek_r+0x20>)
 801fb08:	4604      	mov	r4, r0
 801fb0a:	4608      	mov	r0, r1
 801fb0c:	4611      	mov	r1, r2
 801fb0e:	2200      	movs	r2, #0
 801fb10:	602a      	str	r2, [r5, #0]
 801fb12:	461a      	mov	r2, r3
 801fb14:	f7e3 fd92 	bl	800363c <_lseek>
 801fb18:	1c43      	adds	r3, r0, #1
 801fb1a:	d102      	bne.n	801fb22 <_lseek_r+0x1e>
 801fb1c:	682b      	ldr	r3, [r5, #0]
 801fb1e:	b103      	cbz	r3, 801fb22 <_lseek_r+0x1e>
 801fb20:	6023      	str	r3, [r4, #0]
 801fb22:	bd38      	pop	{r3, r4, r5, pc}
 801fb24:	200090d8 	.word	0x200090d8

0801fb28 <__swhatbuf_r>:
 801fb28:	b570      	push	{r4, r5, r6, lr}
 801fb2a:	460e      	mov	r6, r1
 801fb2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb30:	2900      	cmp	r1, #0
 801fb32:	b096      	sub	sp, #88	; 0x58
 801fb34:	4614      	mov	r4, r2
 801fb36:	461d      	mov	r5, r3
 801fb38:	da07      	bge.n	801fb4a <__swhatbuf_r+0x22>
 801fb3a:	2300      	movs	r3, #0
 801fb3c:	602b      	str	r3, [r5, #0]
 801fb3e:	89b3      	ldrh	r3, [r6, #12]
 801fb40:	061a      	lsls	r2, r3, #24
 801fb42:	d410      	bmi.n	801fb66 <__swhatbuf_r+0x3e>
 801fb44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fb48:	e00e      	b.n	801fb68 <__swhatbuf_r+0x40>
 801fb4a:	466a      	mov	r2, sp
 801fb4c:	f001 fbd2 	bl	80212f4 <_fstat_r>
 801fb50:	2800      	cmp	r0, #0
 801fb52:	dbf2      	blt.n	801fb3a <__swhatbuf_r+0x12>
 801fb54:	9a01      	ldr	r2, [sp, #4]
 801fb56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fb5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fb5e:	425a      	negs	r2, r3
 801fb60:	415a      	adcs	r2, r3
 801fb62:	602a      	str	r2, [r5, #0]
 801fb64:	e7ee      	b.n	801fb44 <__swhatbuf_r+0x1c>
 801fb66:	2340      	movs	r3, #64	; 0x40
 801fb68:	2000      	movs	r0, #0
 801fb6a:	6023      	str	r3, [r4, #0]
 801fb6c:	b016      	add	sp, #88	; 0x58
 801fb6e:	bd70      	pop	{r4, r5, r6, pc}

0801fb70 <__smakebuf_r>:
 801fb70:	898b      	ldrh	r3, [r1, #12]
 801fb72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fb74:	079d      	lsls	r5, r3, #30
 801fb76:	4606      	mov	r6, r0
 801fb78:	460c      	mov	r4, r1
 801fb7a:	d507      	bpl.n	801fb8c <__smakebuf_r+0x1c>
 801fb7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fb80:	6023      	str	r3, [r4, #0]
 801fb82:	6123      	str	r3, [r4, #16]
 801fb84:	2301      	movs	r3, #1
 801fb86:	6163      	str	r3, [r4, #20]
 801fb88:	b002      	add	sp, #8
 801fb8a:	bd70      	pop	{r4, r5, r6, pc}
 801fb8c:	ab01      	add	r3, sp, #4
 801fb8e:	466a      	mov	r2, sp
 801fb90:	f7ff ffca 	bl	801fb28 <__swhatbuf_r>
 801fb94:	9900      	ldr	r1, [sp, #0]
 801fb96:	4605      	mov	r5, r0
 801fb98:	4630      	mov	r0, r6
 801fb9a:	f7fc f863 	bl	801bc64 <_malloc_r>
 801fb9e:	b948      	cbnz	r0, 801fbb4 <__smakebuf_r+0x44>
 801fba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fba4:	059a      	lsls	r2, r3, #22
 801fba6:	d4ef      	bmi.n	801fb88 <__smakebuf_r+0x18>
 801fba8:	f023 0303 	bic.w	r3, r3, #3
 801fbac:	f043 0302 	orr.w	r3, r3, #2
 801fbb0:	81a3      	strh	r3, [r4, #12]
 801fbb2:	e7e3      	b.n	801fb7c <__smakebuf_r+0xc>
 801fbb4:	4b0d      	ldr	r3, [pc, #52]	; (801fbec <__smakebuf_r+0x7c>)
 801fbb6:	62b3      	str	r3, [r6, #40]	; 0x28
 801fbb8:	89a3      	ldrh	r3, [r4, #12]
 801fbba:	6020      	str	r0, [r4, #0]
 801fbbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fbc0:	81a3      	strh	r3, [r4, #12]
 801fbc2:	9b00      	ldr	r3, [sp, #0]
 801fbc4:	6163      	str	r3, [r4, #20]
 801fbc6:	9b01      	ldr	r3, [sp, #4]
 801fbc8:	6120      	str	r0, [r4, #16]
 801fbca:	b15b      	cbz	r3, 801fbe4 <__smakebuf_r+0x74>
 801fbcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fbd0:	4630      	mov	r0, r6
 801fbd2:	f001 fba1 	bl	8021318 <_isatty_r>
 801fbd6:	b128      	cbz	r0, 801fbe4 <__smakebuf_r+0x74>
 801fbd8:	89a3      	ldrh	r3, [r4, #12]
 801fbda:	f023 0303 	bic.w	r3, r3, #3
 801fbde:	f043 0301 	orr.w	r3, r3, #1
 801fbe2:	81a3      	strh	r3, [r4, #12]
 801fbe4:	89a0      	ldrh	r0, [r4, #12]
 801fbe6:	4305      	orrs	r5, r0
 801fbe8:	81a5      	strh	r5, [r4, #12]
 801fbea:	e7cd      	b.n	801fb88 <__smakebuf_r+0x18>
 801fbec:	0801b219 	.word	0x0801b219

0801fbf0 <__ascii_mbtowc>:
 801fbf0:	b082      	sub	sp, #8
 801fbf2:	b901      	cbnz	r1, 801fbf6 <__ascii_mbtowc+0x6>
 801fbf4:	a901      	add	r1, sp, #4
 801fbf6:	b142      	cbz	r2, 801fc0a <__ascii_mbtowc+0x1a>
 801fbf8:	b14b      	cbz	r3, 801fc0e <__ascii_mbtowc+0x1e>
 801fbfa:	7813      	ldrb	r3, [r2, #0]
 801fbfc:	600b      	str	r3, [r1, #0]
 801fbfe:	7812      	ldrb	r2, [r2, #0]
 801fc00:	1e10      	subs	r0, r2, #0
 801fc02:	bf18      	it	ne
 801fc04:	2001      	movne	r0, #1
 801fc06:	b002      	add	sp, #8
 801fc08:	4770      	bx	lr
 801fc0a:	4610      	mov	r0, r2
 801fc0c:	e7fb      	b.n	801fc06 <__ascii_mbtowc+0x16>
 801fc0e:	f06f 0001 	mvn.w	r0, #1
 801fc12:	e7f8      	b.n	801fc06 <__ascii_mbtowc+0x16>

0801fc14 <__malloc_lock>:
 801fc14:	4801      	ldr	r0, [pc, #4]	; (801fc1c <__malloc_lock+0x8>)
 801fc16:	f7fb bd13 	b.w	801b640 <__retarget_lock_acquire_recursive>
 801fc1a:	bf00      	nop
 801fc1c:	200090d0 	.word	0x200090d0

0801fc20 <__malloc_unlock>:
 801fc20:	4801      	ldr	r0, [pc, #4]	; (801fc28 <__malloc_unlock+0x8>)
 801fc22:	f7fb bd0f 	b.w	801b644 <__retarget_lock_release_recursive>
 801fc26:	bf00      	nop
 801fc28:	200090d0 	.word	0x200090d0

0801fc2c <_Balloc>:
 801fc2c:	b570      	push	{r4, r5, r6, lr}
 801fc2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801fc30:	4604      	mov	r4, r0
 801fc32:	460d      	mov	r5, r1
 801fc34:	b976      	cbnz	r6, 801fc54 <_Balloc+0x28>
 801fc36:	2010      	movs	r0, #16
 801fc38:	f7fb fd06 	bl	801b648 <malloc>
 801fc3c:	4602      	mov	r2, r0
 801fc3e:	6260      	str	r0, [r4, #36]	; 0x24
 801fc40:	b920      	cbnz	r0, 801fc4c <_Balloc+0x20>
 801fc42:	4b18      	ldr	r3, [pc, #96]	; (801fca4 <_Balloc+0x78>)
 801fc44:	4818      	ldr	r0, [pc, #96]	; (801fca8 <_Balloc+0x7c>)
 801fc46:	2166      	movs	r1, #102	; 0x66
 801fc48:	f7fe fb64 	bl	801e314 <__assert_func>
 801fc4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fc50:	6006      	str	r6, [r0, #0]
 801fc52:	60c6      	str	r6, [r0, #12]
 801fc54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801fc56:	68f3      	ldr	r3, [r6, #12]
 801fc58:	b183      	cbz	r3, 801fc7c <_Balloc+0x50>
 801fc5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fc5c:	68db      	ldr	r3, [r3, #12]
 801fc5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fc62:	b9b8      	cbnz	r0, 801fc94 <_Balloc+0x68>
 801fc64:	2101      	movs	r1, #1
 801fc66:	fa01 f605 	lsl.w	r6, r1, r5
 801fc6a:	1d72      	adds	r2, r6, #5
 801fc6c:	0092      	lsls	r2, r2, #2
 801fc6e:	4620      	mov	r0, r4
 801fc70:	f000 fc97 	bl	80205a2 <_calloc_r>
 801fc74:	b160      	cbz	r0, 801fc90 <_Balloc+0x64>
 801fc76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fc7a:	e00e      	b.n	801fc9a <_Balloc+0x6e>
 801fc7c:	2221      	movs	r2, #33	; 0x21
 801fc7e:	2104      	movs	r1, #4
 801fc80:	4620      	mov	r0, r4
 801fc82:	f000 fc8e 	bl	80205a2 <_calloc_r>
 801fc86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fc88:	60f0      	str	r0, [r6, #12]
 801fc8a:	68db      	ldr	r3, [r3, #12]
 801fc8c:	2b00      	cmp	r3, #0
 801fc8e:	d1e4      	bne.n	801fc5a <_Balloc+0x2e>
 801fc90:	2000      	movs	r0, #0
 801fc92:	bd70      	pop	{r4, r5, r6, pc}
 801fc94:	6802      	ldr	r2, [r0, #0]
 801fc96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fc9a:	2300      	movs	r3, #0
 801fc9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fca0:	e7f7      	b.n	801fc92 <_Balloc+0x66>
 801fca2:	bf00      	nop
 801fca4:	08023330 	.word	0x08023330
 801fca8:	08023664 	.word	0x08023664

0801fcac <_Bfree>:
 801fcac:	b570      	push	{r4, r5, r6, lr}
 801fcae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801fcb0:	4605      	mov	r5, r0
 801fcb2:	460c      	mov	r4, r1
 801fcb4:	b976      	cbnz	r6, 801fcd4 <_Bfree+0x28>
 801fcb6:	2010      	movs	r0, #16
 801fcb8:	f7fb fcc6 	bl	801b648 <malloc>
 801fcbc:	4602      	mov	r2, r0
 801fcbe:	6268      	str	r0, [r5, #36]	; 0x24
 801fcc0:	b920      	cbnz	r0, 801fccc <_Bfree+0x20>
 801fcc2:	4b09      	ldr	r3, [pc, #36]	; (801fce8 <_Bfree+0x3c>)
 801fcc4:	4809      	ldr	r0, [pc, #36]	; (801fcec <_Bfree+0x40>)
 801fcc6:	218a      	movs	r1, #138	; 0x8a
 801fcc8:	f7fe fb24 	bl	801e314 <__assert_func>
 801fccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fcd0:	6006      	str	r6, [r0, #0]
 801fcd2:	60c6      	str	r6, [r0, #12]
 801fcd4:	b13c      	cbz	r4, 801fce6 <_Bfree+0x3a>
 801fcd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801fcd8:	6862      	ldr	r2, [r4, #4]
 801fcda:	68db      	ldr	r3, [r3, #12]
 801fcdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fce0:	6021      	str	r1, [r4, #0]
 801fce2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fce6:	bd70      	pop	{r4, r5, r6, pc}
 801fce8:	08023330 	.word	0x08023330
 801fcec:	08023664 	.word	0x08023664

0801fcf0 <__multadd>:
 801fcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fcf4:	690e      	ldr	r6, [r1, #16]
 801fcf6:	4607      	mov	r7, r0
 801fcf8:	4698      	mov	r8, r3
 801fcfa:	460c      	mov	r4, r1
 801fcfc:	f101 0014 	add.w	r0, r1, #20
 801fd00:	2300      	movs	r3, #0
 801fd02:	6805      	ldr	r5, [r0, #0]
 801fd04:	b2a9      	uxth	r1, r5
 801fd06:	fb02 8101 	mla	r1, r2, r1, r8
 801fd0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801fd0e:	0c2d      	lsrs	r5, r5, #16
 801fd10:	fb02 c505 	mla	r5, r2, r5, ip
 801fd14:	b289      	uxth	r1, r1
 801fd16:	3301      	adds	r3, #1
 801fd18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801fd1c:	429e      	cmp	r6, r3
 801fd1e:	f840 1b04 	str.w	r1, [r0], #4
 801fd22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801fd26:	dcec      	bgt.n	801fd02 <__multadd+0x12>
 801fd28:	f1b8 0f00 	cmp.w	r8, #0
 801fd2c:	d022      	beq.n	801fd74 <__multadd+0x84>
 801fd2e:	68a3      	ldr	r3, [r4, #8]
 801fd30:	42b3      	cmp	r3, r6
 801fd32:	dc19      	bgt.n	801fd68 <__multadd+0x78>
 801fd34:	6861      	ldr	r1, [r4, #4]
 801fd36:	4638      	mov	r0, r7
 801fd38:	3101      	adds	r1, #1
 801fd3a:	f7ff ff77 	bl	801fc2c <_Balloc>
 801fd3e:	4605      	mov	r5, r0
 801fd40:	b928      	cbnz	r0, 801fd4e <__multadd+0x5e>
 801fd42:	4602      	mov	r2, r0
 801fd44:	4b0d      	ldr	r3, [pc, #52]	; (801fd7c <__multadd+0x8c>)
 801fd46:	480e      	ldr	r0, [pc, #56]	; (801fd80 <__multadd+0x90>)
 801fd48:	21b5      	movs	r1, #181	; 0xb5
 801fd4a:	f7fe fae3 	bl	801e314 <__assert_func>
 801fd4e:	6922      	ldr	r2, [r4, #16]
 801fd50:	3202      	adds	r2, #2
 801fd52:	f104 010c 	add.w	r1, r4, #12
 801fd56:	0092      	lsls	r2, r2, #2
 801fd58:	300c      	adds	r0, #12
 801fd5a:	f7fb fc85 	bl	801b668 <memcpy>
 801fd5e:	4621      	mov	r1, r4
 801fd60:	4638      	mov	r0, r7
 801fd62:	f7ff ffa3 	bl	801fcac <_Bfree>
 801fd66:	462c      	mov	r4, r5
 801fd68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801fd6c:	3601      	adds	r6, #1
 801fd6e:	f8c3 8014 	str.w	r8, [r3, #20]
 801fd72:	6126      	str	r6, [r4, #16]
 801fd74:	4620      	mov	r0, r4
 801fd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd7a:	bf00      	nop
 801fd7c:	080235d4 	.word	0x080235d4
 801fd80:	08023664 	.word	0x08023664

0801fd84 <__s2b>:
 801fd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fd88:	460c      	mov	r4, r1
 801fd8a:	4615      	mov	r5, r2
 801fd8c:	461f      	mov	r7, r3
 801fd8e:	2209      	movs	r2, #9
 801fd90:	3308      	adds	r3, #8
 801fd92:	4606      	mov	r6, r0
 801fd94:	fb93 f3f2 	sdiv	r3, r3, r2
 801fd98:	2100      	movs	r1, #0
 801fd9a:	2201      	movs	r2, #1
 801fd9c:	429a      	cmp	r2, r3
 801fd9e:	db09      	blt.n	801fdb4 <__s2b+0x30>
 801fda0:	4630      	mov	r0, r6
 801fda2:	f7ff ff43 	bl	801fc2c <_Balloc>
 801fda6:	b940      	cbnz	r0, 801fdba <__s2b+0x36>
 801fda8:	4602      	mov	r2, r0
 801fdaa:	4b19      	ldr	r3, [pc, #100]	; (801fe10 <__s2b+0x8c>)
 801fdac:	4819      	ldr	r0, [pc, #100]	; (801fe14 <__s2b+0x90>)
 801fdae:	21ce      	movs	r1, #206	; 0xce
 801fdb0:	f7fe fab0 	bl	801e314 <__assert_func>
 801fdb4:	0052      	lsls	r2, r2, #1
 801fdb6:	3101      	adds	r1, #1
 801fdb8:	e7f0      	b.n	801fd9c <__s2b+0x18>
 801fdba:	9b08      	ldr	r3, [sp, #32]
 801fdbc:	6143      	str	r3, [r0, #20]
 801fdbe:	2d09      	cmp	r5, #9
 801fdc0:	f04f 0301 	mov.w	r3, #1
 801fdc4:	6103      	str	r3, [r0, #16]
 801fdc6:	dd16      	ble.n	801fdf6 <__s2b+0x72>
 801fdc8:	f104 0909 	add.w	r9, r4, #9
 801fdcc:	46c8      	mov	r8, r9
 801fdce:	442c      	add	r4, r5
 801fdd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801fdd4:	4601      	mov	r1, r0
 801fdd6:	3b30      	subs	r3, #48	; 0x30
 801fdd8:	220a      	movs	r2, #10
 801fdda:	4630      	mov	r0, r6
 801fddc:	f7ff ff88 	bl	801fcf0 <__multadd>
 801fde0:	45a0      	cmp	r8, r4
 801fde2:	d1f5      	bne.n	801fdd0 <__s2b+0x4c>
 801fde4:	f1a5 0408 	sub.w	r4, r5, #8
 801fde8:	444c      	add	r4, r9
 801fdea:	1b2d      	subs	r5, r5, r4
 801fdec:	1963      	adds	r3, r4, r5
 801fdee:	42bb      	cmp	r3, r7
 801fdf0:	db04      	blt.n	801fdfc <__s2b+0x78>
 801fdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fdf6:	340a      	adds	r4, #10
 801fdf8:	2509      	movs	r5, #9
 801fdfa:	e7f6      	b.n	801fdea <__s2b+0x66>
 801fdfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fe00:	4601      	mov	r1, r0
 801fe02:	3b30      	subs	r3, #48	; 0x30
 801fe04:	220a      	movs	r2, #10
 801fe06:	4630      	mov	r0, r6
 801fe08:	f7ff ff72 	bl	801fcf0 <__multadd>
 801fe0c:	e7ee      	b.n	801fdec <__s2b+0x68>
 801fe0e:	bf00      	nop
 801fe10:	080235d4 	.word	0x080235d4
 801fe14:	08023664 	.word	0x08023664

0801fe18 <__hi0bits>:
 801fe18:	0c03      	lsrs	r3, r0, #16
 801fe1a:	041b      	lsls	r3, r3, #16
 801fe1c:	b9d3      	cbnz	r3, 801fe54 <__hi0bits+0x3c>
 801fe1e:	0400      	lsls	r0, r0, #16
 801fe20:	2310      	movs	r3, #16
 801fe22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801fe26:	bf04      	itt	eq
 801fe28:	0200      	lsleq	r0, r0, #8
 801fe2a:	3308      	addeq	r3, #8
 801fe2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801fe30:	bf04      	itt	eq
 801fe32:	0100      	lsleq	r0, r0, #4
 801fe34:	3304      	addeq	r3, #4
 801fe36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801fe3a:	bf04      	itt	eq
 801fe3c:	0080      	lsleq	r0, r0, #2
 801fe3e:	3302      	addeq	r3, #2
 801fe40:	2800      	cmp	r0, #0
 801fe42:	db05      	blt.n	801fe50 <__hi0bits+0x38>
 801fe44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801fe48:	f103 0301 	add.w	r3, r3, #1
 801fe4c:	bf08      	it	eq
 801fe4e:	2320      	moveq	r3, #32
 801fe50:	4618      	mov	r0, r3
 801fe52:	4770      	bx	lr
 801fe54:	2300      	movs	r3, #0
 801fe56:	e7e4      	b.n	801fe22 <__hi0bits+0xa>

0801fe58 <__lo0bits>:
 801fe58:	6803      	ldr	r3, [r0, #0]
 801fe5a:	f013 0207 	ands.w	r2, r3, #7
 801fe5e:	4601      	mov	r1, r0
 801fe60:	d00b      	beq.n	801fe7a <__lo0bits+0x22>
 801fe62:	07da      	lsls	r2, r3, #31
 801fe64:	d424      	bmi.n	801feb0 <__lo0bits+0x58>
 801fe66:	0798      	lsls	r0, r3, #30
 801fe68:	bf49      	itett	mi
 801fe6a:	085b      	lsrmi	r3, r3, #1
 801fe6c:	089b      	lsrpl	r3, r3, #2
 801fe6e:	2001      	movmi	r0, #1
 801fe70:	600b      	strmi	r3, [r1, #0]
 801fe72:	bf5c      	itt	pl
 801fe74:	600b      	strpl	r3, [r1, #0]
 801fe76:	2002      	movpl	r0, #2
 801fe78:	4770      	bx	lr
 801fe7a:	b298      	uxth	r0, r3
 801fe7c:	b9b0      	cbnz	r0, 801feac <__lo0bits+0x54>
 801fe7e:	0c1b      	lsrs	r3, r3, #16
 801fe80:	2010      	movs	r0, #16
 801fe82:	f013 0fff 	tst.w	r3, #255	; 0xff
 801fe86:	bf04      	itt	eq
 801fe88:	0a1b      	lsreq	r3, r3, #8
 801fe8a:	3008      	addeq	r0, #8
 801fe8c:	071a      	lsls	r2, r3, #28
 801fe8e:	bf04      	itt	eq
 801fe90:	091b      	lsreq	r3, r3, #4
 801fe92:	3004      	addeq	r0, #4
 801fe94:	079a      	lsls	r2, r3, #30
 801fe96:	bf04      	itt	eq
 801fe98:	089b      	lsreq	r3, r3, #2
 801fe9a:	3002      	addeq	r0, #2
 801fe9c:	07da      	lsls	r2, r3, #31
 801fe9e:	d403      	bmi.n	801fea8 <__lo0bits+0x50>
 801fea0:	085b      	lsrs	r3, r3, #1
 801fea2:	f100 0001 	add.w	r0, r0, #1
 801fea6:	d005      	beq.n	801feb4 <__lo0bits+0x5c>
 801fea8:	600b      	str	r3, [r1, #0]
 801feaa:	4770      	bx	lr
 801feac:	4610      	mov	r0, r2
 801feae:	e7e8      	b.n	801fe82 <__lo0bits+0x2a>
 801feb0:	2000      	movs	r0, #0
 801feb2:	4770      	bx	lr
 801feb4:	2020      	movs	r0, #32
 801feb6:	4770      	bx	lr

0801feb8 <__i2b>:
 801feb8:	b510      	push	{r4, lr}
 801feba:	460c      	mov	r4, r1
 801febc:	2101      	movs	r1, #1
 801febe:	f7ff feb5 	bl	801fc2c <_Balloc>
 801fec2:	4602      	mov	r2, r0
 801fec4:	b928      	cbnz	r0, 801fed2 <__i2b+0x1a>
 801fec6:	4b05      	ldr	r3, [pc, #20]	; (801fedc <__i2b+0x24>)
 801fec8:	4805      	ldr	r0, [pc, #20]	; (801fee0 <__i2b+0x28>)
 801feca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801fece:	f7fe fa21 	bl	801e314 <__assert_func>
 801fed2:	2301      	movs	r3, #1
 801fed4:	6144      	str	r4, [r0, #20]
 801fed6:	6103      	str	r3, [r0, #16]
 801fed8:	bd10      	pop	{r4, pc}
 801feda:	bf00      	nop
 801fedc:	080235d4 	.word	0x080235d4
 801fee0:	08023664 	.word	0x08023664

0801fee4 <__multiply>:
 801fee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fee8:	4614      	mov	r4, r2
 801feea:	690a      	ldr	r2, [r1, #16]
 801feec:	6923      	ldr	r3, [r4, #16]
 801feee:	429a      	cmp	r2, r3
 801fef0:	bfb8      	it	lt
 801fef2:	460b      	movlt	r3, r1
 801fef4:	460d      	mov	r5, r1
 801fef6:	bfbc      	itt	lt
 801fef8:	4625      	movlt	r5, r4
 801fefa:	461c      	movlt	r4, r3
 801fefc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801ff00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801ff04:	68ab      	ldr	r3, [r5, #8]
 801ff06:	6869      	ldr	r1, [r5, #4]
 801ff08:	eb0a 0709 	add.w	r7, sl, r9
 801ff0c:	42bb      	cmp	r3, r7
 801ff0e:	b085      	sub	sp, #20
 801ff10:	bfb8      	it	lt
 801ff12:	3101      	addlt	r1, #1
 801ff14:	f7ff fe8a 	bl	801fc2c <_Balloc>
 801ff18:	b930      	cbnz	r0, 801ff28 <__multiply+0x44>
 801ff1a:	4602      	mov	r2, r0
 801ff1c:	4b42      	ldr	r3, [pc, #264]	; (8020028 <__multiply+0x144>)
 801ff1e:	4843      	ldr	r0, [pc, #268]	; (802002c <__multiply+0x148>)
 801ff20:	f240 115d 	movw	r1, #349	; 0x15d
 801ff24:	f7fe f9f6 	bl	801e314 <__assert_func>
 801ff28:	f100 0614 	add.w	r6, r0, #20
 801ff2c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801ff30:	4633      	mov	r3, r6
 801ff32:	2200      	movs	r2, #0
 801ff34:	4543      	cmp	r3, r8
 801ff36:	d31e      	bcc.n	801ff76 <__multiply+0x92>
 801ff38:	f105 0c14 	add.w	ip, r5, #20
 801ff3c:	f104 0314 	add.w	r3, r4, #20
 801ff40:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801ff44:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801ff48:	9202      	str	r2, [sp, #8]
 801ff4a:	ebac 0205 	sub.w	r2, ip, r5
 801ff4e:	3a15      	subs	r2, #21
 801ff50:	f022 0203 	bic.w	r2, r2, #3
 801ff54:	3204      	adds	r2, #4
 801ff56:	f105 0115 	add.w	r1, r5, #21
 801ff5a:	458c      	cmp	ip, r1
 801ff5c:	bf38      	it	cc
 801ff5e:	2204      	movcc	r2, #4
 801ff60:	9201      	str	r2, [sp, #4]
 801ff62:	9a02      	ldr	r2, [sp, #8]
 801ff64:	9303      	str	r3, [sp, #12]
 801ff66:	429a      	cmp	r2, r3
 801ff68:	d808      	bhi.n	801ff7c <__multiply+0x98>
 801ff6a:	2f00      	cmp	r7, #0
 801ff6c:	dc55      	bgt.n	802001a <__multiply+0x136>
 801ff6e:	6107      	str	r7, [r0, #16]
 801ff70:	b005      	add	sp, #20
 801ff72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff76:	f843 2b04 	str.w	r2, [r3], #4
 801ff7a:	e7db      	b.n	801ff34 <__multiply+0x50>
 801ff7c:	f8b3 a000 	ldrh.w	sl, [r3]
 801ff80:	f1ba 0f00 	cmp.w	sl, #0
 801ff84:	d020      	beq.n	801ffc8 <__multiply+0xe4>
 801ff86:	f105 0e14 	add.w	lr, r5, #20
 801ff8a:	46b1      	mov	r9, r6
 801ff8c:	2200      	movs	r2, #0
 801ff8e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801ff92:	f8d9 b000 	ldr.w	fp, [r9]
 801ff96:	b2a1      	uxth	r1, r4
 801ff98:	fa1f fb8b 	uxth.w	fp, fp
 801ff9c:	fb0a b101 	mla	r1, sl, r1, fp
 801ffa0:	4411      	add	r1, r2
 801ffa2:	f8d9 2000 	ldr.w	r2, [r9]
 801ffa6:	0c24      	lsrs	r4, r4, #16
 801ffa8:	0c12      	lsrs	r2, r2, #16
 801ffaa:	fb0a 2404 	mla	r4, sl, r4, r2
 801ffae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801ffb2:	b289      	uxth	r1, r1
 801ffb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801ffb8:	45f4      	cmp	ip, lr
 801ffba:	f849 1b04 	str.w	r1, [r9], #4
 801ffbe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801ffc2:	d8e4      	bhi.n	801ff8e <__multiply+0xaa>
 801ffc4:	9901      	ldr	r1, [sp, #4]
 801ffc6:	5072      	str	r2, [r6, r1]
 801ffc8:	9a03      	ldr	r2, [sp, #12]
 801ffca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ffce:	3304      	adds	r3, #4
 801ffd0:	f1b9 0f00 	cmp.w	r9, #0
 801ffd4:	d01f      	beq.n	8020016 <__multiply+0x132>
 801ffd6:	6834      	ldr	r4, [r6, #0]
 801ffd8:	f105 0114 	add.w	r1, r5, #20
 801ffdc:	46b6      	mov	lr, r6
 801ffde:	f04f 0a00 	mov.w	sl, #0
 801ffe2:	880a      	ldrh	r2, [r1, #0]
 801ffe4:	f8be b002 	ldrh.w	fp, [lr, #2]
 801ffe8:	fb09 b202 	mla	r2, r9, r2, fp
 801ffec:	4492      	add	sl, r2
 801ffee:	b2a4      	uxth	r4, r4
 801fff0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801fff4:	f84e 4b04 	str.w	r4, [lr], #4
 801fff8:	f851 4b04 	ldr.w	r4, [r1], #4
 801fffc:	f8be 2000 	ldrh.w	r2, [lr]
 8020000:	0c24      	lsrs	r4, r4, #16
 8020002:	fb09 2404 	mla	r4, r9, r4, r2
 8020006:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802000a:	458c      	cmp	ip, r1
 802000c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8020010:	d8e7      	bhi.n	801ffe2 <__multiply+0xfe>
 8020012:	9a01      	ldr	r2, [sp, #4]
 8020014:	50b4      	str	r4, [r6, r2]
 8020016:	3604      	adds	r6, #4
 8020018:	e7a3      	b.n	801ff62 <__multiply+0x7e>
 802001a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802001e:	2b00      	cmp	r3, #0
 8020020:	d1a5      	bne.n	801ff6e <__multiply+0x8a>
 8020022:	3f01      	subs	r7, #1
 8020024:	e7a1      	b.n	801ff6a <__multiply+0x86>
 8020026:	bf00      	nop
 8020028:	080235d4 	.word	0x080235d4
 802002c:	08023664 	.word	0x08023664

08020030 <__pow5mult>:
 8020030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020034:	4615      	mov	r5, r2
 8020036:	f012 0203 	ands.w	r2, r2, #3
 802003a:	4606      	mov	r6, r0
 802003c:	460f      	mov	r7, r1
 802003e:	d007      	beq.n	8020050 <__pow5mult+0x20>
 8020040:	4c25      	ldr	r4, [pc, #148]	; (80200d8 <__pow5mult+0xa8>)
 8020042:	3a01      	subs	r2, #1
 8020044:	2300      	movs	r3, #0
 8020046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802004a:	f7ff fe51 	bl	801fcf0 <__multadd>
 802004e:	4607      	mov	r7, r0
 8020050:	10ad      	asrs	r5, r5, #2
 8020052:	d03d      	beq.n	80200d0 <__pow5mult+0xa0>
 8020054:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8020056:	b97c      	cbnz	r4, 8020078 <__pow5mult+0x48>
 8020058:	2010      	movs	r0, #16
 802005a:	f7fb faf5 	bl	801b648 <malloc>
 802005e:	4602      	mov	r2, r0
 8020060:	6270      	str	r0, [r6, #36]	; 0x24
 8020062:	b928      	cbnz	r0, 8020070 <__pow5mult+0x40>
 8020064:	4b1d      	ldr	r3, [pc, #116]	; (80200dc <__pow5mult+0xac>)
 8020066:	481e      	ldr	r0, [pc, #120]	; (80200e0 <__pow5mult+0xb0>)
 8020068:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802006c:	f7fe f952 	bl	801e314 <__assert_func>
 8020070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020074:	6004      	str	r4, [r0, #0]
 8020076:	60c4      	str	r4, [r0, #12]
 8020078:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802007c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020080:	b94c      	cbnz	r4, 8020096 <__pow5mult+0x66>
 8020082:	f240 2171 	movw	r1, #625	; 0x271
 8020086:	4630      	mov	r0, r6
 8020088:	f7ff ff16 	bl	801feb8 <__i2b>
 802008c:	2300      	movs	r3, #0
 802008e:	f8c8 0008 	str.w	r0, [r8, #8]
 8020092:	4604      	mov	r4, r0
 8020094:	6003      	str	r3, [r0, #0]
 8020096:	f04f 0900 	mov.w	r9, #0
 802009a:	07eb      	lsls	r3, r5, #31
 802009c:	d50a      	bpl.n	80200b4 <__pow5mult+0x84>
 802009e:	4639      	mov	r1, r7
 80200a0:	4622      	mov	r2, r4
 80200a2:	4630      	mov	r0, r6
 80200a4:	f7ff ff1e 	bl	801fee4 <__multiply>
 80200a8:	4639      	mov	r1, r7
 80200aa:	4680      	mov	r8, r0
 80200ac:	4630      	mov	r0, r6
 80200ae:	f7ff fdfd 	bl	801fcac <_Bfree>
 80200b2:	4647      	mov	r7, r8
 80200b4:	106d      	asrs	r5, r5, #1
 80200b6:	d00b      	beq.n	80200d0 <__pow5mult+0xa0>
 80200b8:	6820      	ldr	r0, [r4, #0]
 80200ba:	b938      	cbnz	r0, 80200cc <__pow5mult+0x9c>
 80200bc:	4622      	mov	r2, r4
 80200be:	4621      	mov	r1, r4
 80200c0:	4630      	mov	r0, r6
 80200c2:	f7ff ff0f 	bl	801fee4 <__multiply>
 80200c6:	6020      	str	r0, [r4, #0]
 80200c8:	f8c0 9000 	str.w	r9, [r0]
 80200cc:	4604      	mov	r4, r0
 80200ce:	e7e4      	b.n	802009a <__pow5mult+0x6a>
 80200d0:	4638      	mov	r0, r7
 80200d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80200d6:	bf00      	nop
 80200d8:	080237b8 	.word	0x080237b8
 80200dc:	08023330 	.word	0x08023330
 80200e0:	08023664 	.word	0x08023664

080200e4 <__lshift>:
 80200e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80200e8:	460c      	mov	r4, r1
 80200ea:	6849      	ldr	r1, [r1, #4]
 80200ec:	6923      	ldr	r3, [r4, #16]
 80200ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80200f2:	68a3      	ldr	r3, [r4, #8]
 80200f4:	4607      	mov	r7, r0
 80200f6:	4691      	mov	r9, r2
 80200f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80200fc:	f108 0601 	add.w	r6, r8, #1
 8020100:	42b3      	cmp	r3, r6
 8020102:	db0b      	blt.n	802011c <__lshift+0x38>
 8020104:	4638      	mov	r0, r7
 8020106:	f7ff fd91 	bl	801fc2c <_Balloc>
 802010a:	4605      	mov	r5, r0
 802010c:	b948      	cbnz	r0, 8020122 <__lshift+0x3e>
 802010e:	4602      	mov	r2, r0
 8020110:	4b28      	ldr	r3, [pc, #160]	; (80201b4 <__lshift+0xd0>)
 8020112:	4829      	ldr	r0, [pc, #164]	; (80201b8 <__lshift+0xd4>)
 8020114:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020118:	f7fe f8fc 	bl	801e314 <__assert_func>
 802011c:	3101      	adds	r1, #1
 802011e:	005b      	lsls	r3, r3, #1
 8020120:	e7ee      	b.n	8020100 <__lshift+0x1c>
 8020122:	2300      	movs	r3, #0
 8020124:	f100 0114 	add.w	r1, r0, #20
 8020128:	f100 0210 	add.w	r2, r0, #16
 802012c:	4618      	mov	r0, r3
 802012e:	4553      	cmp	r3, sl
 8020130:	db33      	blt.n	802019a <__lshift+0xb6>
 8020132:	6920      	ldr	r0, [r4, #16]
 8020134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020138:	f104 0314 	add.w	r3, r4, #20
 802013c:	f019 091f 	ands.w	r9, r9, #31
 8020140:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020144:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020148:	d02b      	beq.n	80201a2 <__lshift+0xbe>
 802014a:	f1c9 0e20 	rsb	lr, r9, #32
 802014e:	468a      	mov	sl, r1
 8020150:	2200      	movs	r2, #0
 8020152:	6818      	ldr	r0, [r3, #0]
 8020154:	fa00 f009 	lsl.w	r0, r0, r9
 8020158:	4302      	orrs	r2, r0
 802015a:	f84a 2b04 	str.w	r2, [sl], #4
 802015e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020162:	459c      	cmp	ip, r3
 8020164:	fa22 f20e 	lsr.w	r2, r2, lr
 8020168:	d8f3      	bhi.n	8020152 <__lshift+0x6e>
 802016a:	ebac 0304 	sub.w	r3, ip, r4
 802016e:	3b15      	subs	r3, #21
 8020170:	f023 0303 	bic.w	r3, r3, #3
 8020174:	3304      	adds	r3, #4
 8020176:	f104 0015 	add.w	r0, r4, #21
 802017a:	4584      	cmp	ip, r0
 802017c:	bf38      	it	cc
 802017e:	2304      	movcc	r3, #4
 8020180:	50ca      	str	r2, [r1, r3]
 8020182:	b10a      	cbz	r2, 8020188 <__lshift+0xa4>
 8020184:	f108 0602 	add.w	r6, r8, #2
 8020188:	3e01      	subs	r6, #1
 802018a:	4638      	mov	r0, r7
 802018c:	612e      	str	r6, [r5, #16]
 802018e:	4621      	mov	r1, r4
 8020190:	f7ff fd8c 	bl	801fcac <_Bfree>
 8020194:	4628      	mov	r0, r5
 8020196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802019a:	f842 0f04 	str.w	r0, [r2, #4]!
 802019e:	3301      	adds	r3, #1
 80201a0:	e7c5      	b.n	802012e <__lshift+0x4a>
 80201a2:	3904      	subs	r1, #4
 80201a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80201a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80201ac:	459c      	cmp	ip, r3
 80201ae:	d8f9      	bhi.n	80201a4 <__lshift+0xc0>
 80201b0:	e7ea      	b.n	8020188 <__lshift+0xa4>
 80201b2:	bf00      	nop
 80201b4:	080235d4 	.word	0x080235d4
 80201b8:	08023664 	.word	0x08023664

080201bc <__mcmp>:
 80201bc:	b530      	push	{r4, r5, lr}
 80201be:	6902      	ldr	r2, [r0, #16]
 80201c0:	690c      	ldr	r4, [r1, #16]
 80201c2:	1b12      	subs	r2, r2, r4
 80201c4:	d10e      	bne.n	80201e4 <__mcmp+0x28>
 80201c6:	f100 0314 	add.w	r3, r0, #20
 80201ca:	3114      	adds	r1, #20
 80201cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80201d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80201d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80201d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80201dc:	42a5      	cmp	r5, r4
 80201de:	d003      	beq.n	80201e8 <__mcmp+0x2c>
 80201e0:	d305      	bcc.n	80201ee <__mcmp+0x32>
 80201e2:	2201      	movs	r2, #1
 80201e4:	4610      	mov	r0, r2
 80201e6:	bd30      	pop	{r4, r5, pc}
 80201e8:	4283      	cmp	r3, r0
 80201ea:	d3f3      	bcc.n	80201d4 <__mcmp+0x18>
 80201ec:	e7fa      	b.n	80201e4 <__mcmp+0x28>
 80201ee:	f04f 32ff 	mov.w	r2, #4294967295
 80201f2:	e7f7      	b.n	80201e4 <__mcmp+0x28>

080201f4 <__mdiff>:
 80201f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201f8:	460c      	mov	r4, r1
 80201fa:	4606      	mov	r6, r0
 80201fc:	4611      	mov	r1, r2
 80201fe:	4620      	mov	r0, r4
 8020200:	4617      	mov	r7, r2
 8020202:	f7ff ffdb 	bl	80201bc <__mcmp>
 8020206:	1e05      	subs	r5, r0, #0
 8020208:	d110      	bne.n	802022c <__mdiff+0x38>
 802020a:	4629      	mov	r1, r5
 802020c:	4630      	mov	r0, r6
 802020e:	f7ff fd0d 	bl	801fc2c <_Balloc>
 8020212:	b930      	cbnz	r0, 8020222 <__mdiff+0x2e>
 8020214:	4b39      	ldr	r3, [pc, #228]	; (80202fc <__mdiff+0x108>)
 8020216:	4602      	mov	r2, r0
 8020218:	f240 2132 	movw	r1, #562	; 0x232
 802021c:	4838      	ldr	r0, [pc, #224]	; (8020300 <__mdiff+0x10c>)
 802021e:	f7fe f879 	bl	801e314 <__assert_func>
 8020222:	2301      	movs	r3, #1
 8020224:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802022c:	bfa4      	itt	ge
 802022e:	463b      	movge	r3, r7
 8020230:	4627      	movge	r7, r4
 8020232:	4630      	mov	r0, r6
 8020234:	6879      	ldr	r1, [r7, #4]
 8020236:	bfa6      	itte	ge
 8020238:	461c      	movge	r4, r3
 802023a:	2500      	movge	r5, #0
 802023c:	2501      	movlt	r5, #1
 802023e:	f7ff fcf5 	bl	801fc2c <_Balloc>
 8020242:	b920      	cbnz	r0, 802024e <__mdiff+0x5a>
 8020244:	4b2d      	ldr	r3, [pc, #180]	; (80202fc <__mdiff+0x108>)
 8020246:	4602      	mov	r2, r0
 8020248:	f44f 7110 	mov.w	r1, #576	; 0x240
 802024c:	e7e6      	b.n	802021c <__mdiff+0x28>
 802024e:	693e      	ldr	r6, [r7, #16]
 8020250:	60c5      	str	r5, [r0, #12]
 8020252:	6925      	ldr	r5, [r4, #16]
 8020254:	f107 0114 	add.w	r1, r7, #20
 8020258:	f104 0914 	add.w	r9, r4, #20
 802025c:	f100 0e14 	add.w	lr, r0, #20
 8020260:	f107 0210 	add.w	r2, r7, #16
 8020264:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020268:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802026c:	46f2      	mov	sl, lr
 802026e:	2700      	movs	r7, #0
 8020270:	f859 3b04 	ldr.w	r3, [r9], #4
 8020274:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020278:	fa1f f883 	uxth.w	r8, r3
 802027c:	fa17 f78b 	uxtah	r7, r7, fp
 8020280:	0c1b      	lsrs	r3, r3, #16
 8020282:	eba7 0808 	sub.w	r8, r7, r8
 8020286:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802028a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802028e:	fa1f f888 	uxth.w	r8, r8
 8020292:	141f      	asrs	r7, r3, #16
 8020294:	454d      	cmp	r5, r9
 8020296:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802029a:	f84a 3b04 	str.w	r3, [sl], #4
 802029e:	d8e7      	bhi.n	8020270 <__mdiff+0x7c>
 80202a0:	1b2b      	subs	r3, r5, r4
 80202a2:	3b15      	subs	r3, #21
 80202a4:	f023 0303 	bic.w	r3, r3, #3
 80202a8:	3304      	adds	r3, #4
 80202aa:	3415      	adds	r4, #21
 80202ac:	42a5      	cmp	r5, r4
 80202ae:	bf38      	it	cc
 80202b0:	2304      	movcc	r3, #4
 80202b2:	4419      	add	r1, r3
 80202b4:	4473      	add	r3, lr
 80202b6:	469e      	mov	lr, r3
 80202b8:	460d      	mov	r5, r1
 80202ba:	4565      	cmp	r5, ip
 80202bc:	d30e      	bcc.n	80202dc <__mdiff+0xe8>
 80202be:	f10c 0203 	add.w	r2, ip, #3
 80202c2:	1a52      	subs	r2, r2, r1
 80202c4:	f022 0203 	bic.w	r2, r2, #3
 80202c8:	3903      	subs	r1, #3
 80202ca:	458c      	cmp	ip, r1
 80202cc:	bf38      	it	cc
 80202ce:	2200      	movcc	r2, #0
 80202d0:	441a      	add	r2, r3
 80202d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80202d6:	b17b      	cbz	r3, 80202f8 <__mdiff+0x104>
 80202d8:	6106      	str	r6, [r0, #16]
 80202da:	e7a5      	b.n	8020228 <__mdiff+0x34>
 80202dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80202e0:	fa17 f488 	uxtah	r4, r7, r8
 80202e4:	1422      	asrs	r2, r4, #16
 80202e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80202ea:	b2a4      	uxth	r4, r4
 80202ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80202f0:	f84e 4b04 	str.w	r4, [lr], #4
 80202f4:	1417      	asrs	r7, r2, #16
 80202f6:	e7e0      	b.n	80202ba <__mdiff+0xc6>
 80202f8:	3e01      	subs	r6, #1
 80202fa:	e7ea      	b.n	80202d2 <__mdiff+0xde>
 80202fc:	080235d4 	.word	0x080235d4
 8020300:	08023664 	.word	0x08023664

08020304 <__ulp>:
 8020304:	b082      	sub	sp, #8
 8020306:	ed8d 0b00 	vstr	d0, [sp]
 802030a:	9b01      	ldr	r3, [sp, #4]
 802030c:	4912      	ldr	r1, [pc, #72]	; (8020358 <__ulp+0x54>)
 802030e:	4019      	ands	r1, r3
 8020310:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8020314:	2900      	cmp	r1, #0
 8020316:	dd05      	ble.n	8020324 <__ulp+0x20>
 8020318:	2200      	movs	r2, #0
 802031a:	460b      	mov	r3, r1
 802031c:	ec43 2b10 	vmov	d0, r2, r3
 8020320:	b002      	add	sp, #8
 8020322:	4770      	bx	lr
 8020324:	4249      	negs	r1, r1
 8020326:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802032a:	ea4f 5021 	mov.w	r0, r1, asr #20
 802032e:	f04f 0200 	mov.w	r2, #0
 8020332:	f04f 0300 	mov.w	r3, #0
 8020336:	da04      	bge.n	8020342 <__ulp+0x3e>
 8020338:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802033c:	fa41 f300 	asr.w	r3, r1, r0
 8020340:	e7ec      	b.n	802031c <__ulp+0x18>
 8020342:	f1a0 0114 	sub.w	r1, r0, #20
 8020346:	291e      	cmp	r1, #30
 8020348:	bfda      	itte	le
 802034a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802034e:	fa20 f101 	lsrle.w	r1, r0, r1
 8020352:	2101      	movgt	r1, #1
 8020354:	460a      	mov	r2, r1
 8020356:	e7e1      	b.n	802031c <__ulp+0x18>
 8020358:	7ff00000 	.word	0x7ff00000

0802035c <__b2d>:
 802035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802035e:	6905      	ldr	r5, [r0, #16]
 8020360:	f100 0714 	add.w	r7, r0, #20
 8020364:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8020368:	1f2e      	subs	r6, r5, #4
 802036a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802036e:	4620      	mov	r0, r4
 8020370:	f7ff fd52 	bl	801fe18 <__hi0bits>
 8020374:	f1c0 0320 	rsb	r3, r0, #32
 8020378:	280a      	cmp	r0, #10
 802037a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80203f8 <__b2d+0x9c>
 802037e:	600b      	str	r3, [r1, #0]
 8020380:	dc14      	bgt.n	80203ac <__b2d+0x50>
 8020382:	f1c0 0e0b 	rsb	lr, r0, #11
 8020386:	fa24 f10e 	lsr.w	r1, r4, lr
 802038a:	42b7      	cmp	r7, r6
 802038c:	ea41 030c 	orr.w	r3, r1, ip
 8020390:	bf34      	ite	cc
 8020392:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020396:	2100      	movcs	r1, #0
 8020398:	3015      	adds	r0, #21
 802039a:	fa04 f000 	lsl.w	r0, r4, r0
 802039e:	fa21 f10e 	lsr.w	r1, r1, lr
 80203a2:	ea40 0201 	orr.w	r2, r0, r1
 80203a6:	ec43 2b10 	vmov	d0, r2, r3
 80203aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80203ac:	42b7      	cmp	r7, r6
 80203ae:	bf3a      	itte	cc
 80203b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80203b4:	f1a5 0608 	subcc.w	r6, r5, #8
 80203b8:	2100      	movcs	r1, #0
 80203ba:	380b      	subs	r0, #11
 80203bc:	d017      	beq.n	80203ee <__b2d+0x92>
 80203be:	f1c0 0c20 	rsb	ip, r0, #32
 80203c2:	fa04 f500 	lsl.w	r5, r4, r0
 80203c6:	42be      	cmp	r6, r7
 80203c8:	fa21 f40c 	lsr.w	r4, r1, ip
 80203cc:	ea45 0504 	orr.w	r5, r5, r4
 80203d0:	bf8c      	ite	hi
 80203d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80203d6:	2400      	movls	r4, #0
 80203d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80203dc:	fa01 f000 	lsl.w	r0, r1, r0
 80203e0:	fa24 f40c 	lsr.w	r4, r4, ip
 80203e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80203e8:	ea40 0204 	orr.w	r2, r0, r4
 80203ec:	e7db      	b.n	80203a6 <__b2d+0x4a>
 80203ee:	ea44 030c 	orr.w	r3, r4, ip
 80203f2:	460a      	mov	r2, r1
 80203f4:	e7d7      	b.n	80203a6 <__b2d+0x4a>
 80203f6:	bf00      	nop
 80203f8:	3ff00000 	.word	0x3ff00000

080203fc <__d2b>:
 80203fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020400:	4689      	mov	r9, r1
 8020402:	2101      	movs	r1, #1
 8020404:	ec57 6b10 	vmov	r6, r7, d0
 8020408:	4690      	mov	r8, r2
 802040a:	f7ff fc0f 	bl	801fc2c <_Balloc>
 802040e:	4604      	mov	r4, r0
 8020410:	b930      	cbnz	r0, 8020420 <__d2b+0x24>
 8020412:	4602      	mov	r2, r0
 8020414:	4b25      	ldr	r3, [pc, #148]	; (80204ac <__d2b+0xb0>)
 8020416:	4826      	ldr	r0, [pc, #152]	; (80204b0 <__d2b+0xb4>)
 8020418:	f240 310a 	movw	r1, #778	; 0x30a
 802041c:	f7fd ff7a 	bl	801e314 <__assert_func>
 8020420:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020424:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020428:	bb35      	cbnz	r5, 8020478 <__d2b+0x7c>
 802042a:	2e00      	cmp	r6, #0
 802042c:	9301      	str	r3, [sp, #4]
 802042e:	d028      	beq.n	8020482 <__d2b+0x86>
 8020430:	4668      	mov	r0, sp
 8020432:	9600      	str	r6, [sp, #0]
 8020434:	f7ff fd10 	bl	801fe58 <__lo0bits>
 8020438:	9900      	ldr	r1, [sp, #0]
 802043a:	b300      	cbz	r0, 802047e <__d2b+0x82>
 802043c:	9a01      	ldr	r2, [sp, #4]
 802043e:	f1c0 0320 	rsb	r3, r0, #32
 8020442:	fa02 f303 	lsl.w	r3, r2, r3
 8020446:	430b      	orrs	r3, r1
 8020448:	40c2      	lsrs	r2, r0
 802044a:	6163      	str	r3, [r4, #20]
 802044c:	9201      	str	r2, [sp, #4]
 802044e:	9b01      	ldr	r3, [sp, #4]
 8020450:	61a3      	str	r3, [r4, #24]
 8020452:	2b00      	cmp	r3, #0
 8020454:	bf14      	ite	ne
 8020456:	2202      	movne	r2, #2
 8020458:	2201      	moveq	r2, #1
 802045a:	6122      	str	r2, [r4, #16]
 802045c:	b1d5      	cbz	r5, 8020494 <__d2b+0x98>
 802045e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020462:	4405      	add	r5, r0
 8020464:	f8c9 5000 	str.w	r5, [r9]
 8020468:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802046c:	f8c8 0000 	str.w	r0, [r8]
 8020470:	4620      	mov	r0, r4
 8020472:	b003      	add	sp, #12
 8020474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802047c:	e7d5      	b.n	802042a <__d2b+0x2e>
 802047e:	6161      	str	r1, [r4, #20]
 8020480:	e7e5      	b.n	802044e <__d2b+0x52>
 8020482:	a801      	add	r0, sp, #4
 8020484:	f7ff fce8 	bl	801fe58 <__lo0bits>
 8020488:	9b01      	ldr	r3, [sp, #4]
 802048a:	6163      	str	r3, [r4, #20]
 802048c:	2201      	movs	r2, #1
 802048e:	6122      	str	r2, [r4, #16]
 8020490:	3020      	adds	r0, #32
 8020492:	e7e3      	b.n	802045c <__d2b+0x60>
 8020494:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020498:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802049c:	f8c9 0000 	str.w	r0, [r9]
 80204a0:	6918      	ldr	r0, [r3, #16]
 80204a2:	f7ff fcb9 	bl	801fe18 <__hi0bits>
 80204a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80204aa:	e7df      	b.n	802046c <__d2b+0x70>
 80204ac:	080235d4 	.word	0x080235d4
 80204b0:	08023664 	.word	0x08023664

080204b4 <__ratio>:
 80204b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204b8:	4688      	mov	r8, r1
 80204ba:	4669      	mov	r1, sp
 80204bc:	4681      	mov	r9, r0
 80204be:	f7ff ff4d 	bl	802035c <__b2d>
 80204c2:	a901      	add	r1, sp, #4
 80204c4:	4640      	mov	r0, r8
 80204c6:	ec55 4b10 	vmov	r4, r5, d0
 80204ca:	f7ff ff47 	bl	802035c <__b2d>
 80204ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80204d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80204d6:	eba3 0c02 	sub.w	ip, r3, r2
 80204da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80204de:	1a9b      	subs	r3, r3, r2
 80204e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80204e4:	ec51 0b10 	vmov	r0, r1, d0
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	bfd6      	itet	le
 80204ec:	460a      	movle	r2, r1
 80204ee:	462a      	movgt	r2, r5
 80204f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80204f4:	468b      	mov	fp, r1
 80204f6:	462f      	mov	r7, r5
 80204f8:	bfd4      	ite	le
 80204fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80204fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020502:	4620      	mov	r0, r4
 8020504:	ee10 2a10 	vmov	r2, s0
 8020508:	465b      	mov	r3, fp
 802050a:	4639      	mov	r1, r7
 802050c:	f7e0 f9be 	bl	800088c <__aeabi_ddiv>
 8020510:	ec41 0b10 	vmov	d0, r0, r1
 8020514:	b003      	add	sp, #12
 8020516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802051a <__copybits>:
 802051a:	3901      	subs	r1, #1
 802051c:	b570      	push	{r4, r5, r6, lr}
 802051e:	1149      	asrs	r1, r1, #5
 8020520:	6914      	ldr	r4, [r2, #16]
 8020522:	3101      	adds	r1, #1
 8020524:	f102 0314 	add.w	r3, r2, #20
 8020528:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802052c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020530:	1f05      	subs	r5, r0, #4
 8020532:	42a3      	cmp	r3, r4
 8020534:	d30c      	bcc.n	8020550 <__copybits+0x36>
 8020536:	1aa3      	subs	r3, r4, r2
 8020538:	3b11      	subs	r3, #17
 802053a:	f023 0303 	bic.w	r3, r3, #3
 802053e:	3211      	adds	r2, #17
 8020540:	42a2      	cmp	r2, r4
 8020542:	bf88      	it	hi
 8020544:	2300      	movhi	r3, #0
 8020546:	4418      	add	r0, r3
 8020548:	2300      	movs	r3, #0
 802054a:	4288      	cmp	r0, r1
 802054c:	d305      	bcc.n	802055a <__copybits+0x40>
 802054e:	bd70      	pop	{r4, r5, r6, pc}
 8020550:	f853 6b04 	ldr.w	r6, [r3], #4
 8020554:	f845 6f04 	str.w	r6, [r5, #4]!
 8020558:	e7eb      	b.n	8020532 <__copybits+0x18>
 802055a:	f840 3b04 	str.w	r3, [r0], #4
 802055e:	e7f4      	b.n	802054a <__copybits+0x30>

08020560 <__any_on>:
 8020560:	f100 0214 	add.w	r2, r0, #20
 8020564:	6900      	ldr	r0, [r0, #16]
 8020566:	114b      	asrs	r3, r1, #5
 8020568:	4298      	cmp	r0, r3
 802056a:	b510      	push	{r4, lr}
 802056c:	db11      	blt.n	8020592 <__any_on+0x32>
 802056e:	dd0a      	ble.n	8020586 <__any_on+0x26>
 8020570:	f011 011f 	ands.w	r1, r1, #31
 8020574:	d007      	beq.n	8020586 <__any_on+0x26>
 8020576:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802057a:	fa24 f001 	lsr.w	r0, r4, r1
 802057e:	fa00 f101 	lsl.w	r1, r0, r1
 8020582:	428c      	cmp	r4, r1
 8020584:	d10b      	bne.n	802059e <__any_on+0x3e>
 8020586:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802058a:	4293      	cmp	r3, r2
 802058c:	d803      	bhi.n	8020596 <__any_on+0x36>
 802058e:	2000      	movs	r0, #0
 8020590:	bd10      	pop	{r4, pc}
 8020592:	4603      	mov	r3, r0
 8020594:	e7f7      	b.n	8020586 <__any_on+0x26>
 8020596:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802059a:	2900      	cmp	r1, #0
 802059c:	d0f5      	beq.n	802058a <__any_on+0x2a>
 802059e:	2001      	movs	r0, #1
 80205a0:	e7f6      	b.n	8020590 <__any_on+0x30>

080205a2 <_calloc_r>:
 80205a2:	b513      	push	{r0, r1, r4, lr}
 80205a4:	434a      	muls	r2, r1
 80205a6:	4611      	mov	r1, r2
 80205a8:	9201      	str	r2, [sp, #4]
 80205aa:	f7fb fb5b 	bl	801bc64 <_malloc_r>
 80205ae:	4604      	mov	r4, r0
 80205b0:	b118      	cbz	r0, 80205ba <_calloc_r+0x18>
 80205b2:	9a01      	ldr	r2, [sp, #4]
 80205b4:	2100      	movs	r1, #0
 80205b6:	f7fb f87f 	bl	801b6b8 <memset>
 80205ba:	4620      	mov	r0, r4
 80205bc:	b002      	add	sp, #8
 80205be:	bd10      	pop	{r4, pc}

080205c0 <_realloc_r>:
 80205c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205c2:	4607      	mov	r7, r0
 80205c4:	4614      	mov	r4, r2
 80205c6:	460e      	mov	r6, r1
 80205c8:	b921      	cbnz	r1, 80205d4 <_realloc_r+0x14>
 80205ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80205ce:	4611      	mov	r1, r2
 80205d0:	f7fb bb48 	b.w	801bc64 <_malloc_r>
 80205d4:	b922      	cbnz	r2, 80205e0 <_realloc_r+0x20>
 80205d6:	f7fb faf5 	bl	801bbc4 <_free_r>
 80205da:	4625      	mov	r5, r4
 80205dc:	4628      	mov	r0, r5
 80205de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80205e0:	f000 feaa 	bl	8021338 <_malloc_usable_size_r>
 80205e4:	42a0      	cmp	r0, r4
 80205e6:	d20f      	bcs.n	8020608 <_realloc_r+0x48>
 80205e8:	4621      	mov	r1, r4
 80205ea:	4638      	mov	r0, r7
 80205ec:	f7fb fb3a 	bl	801bc64 <_malloc_r>
 80205f0:	4605      	mov	r5, r0
 80205f2:	2800      	cmp	r0, #0
 80205f4:	d0f2      	beq.n	80205dc <_realloc_r+0x1c>
 80205f6:	4631      	mov	r1, r6
 80205f8:	4622      	mov	r2, r4
 80205fa:	f7fb f835 	bl	801b668 <memcpy>
 80205fe:	4631      	mov	r1, r6
 8020600:	4638      	mov	r0, r7
 8020602:	f7fb fadf 	bl	801bbc4 <_free_r>
 8020606:	e7e9      	b.n	80205dc <_realloc_r+0x1c>
 8020608:	4635      	mov	r5, r6
 802060a:	e7e7      	b.n	80205dc <_realloc_r+0x1c>

0802060c <__ssputs_r>:
 802060c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020610:	688e      	ldr	r6, [r1, #8]
 8020612:	429e      	cmp	r6, r3
 8020614:	4682      	mov	sl, r0
 8020616:	460c      	mov	r4, r1
 8020618:	4690      	mov	r8, r2
 802061a:	461f      	mov	r7, r3
 802061c:	d838      	bhi.n	8020690 <__ssputs_r+0x84>
 802061e:	898a      	ldrh	r2, [r1, #12]
 8020620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020624:	d032      	beq.n	802068c <__ssputs_r+0x80>
 8020626:	6825      	ldr	r5, [r4, #0]
 8020628:	6909      	ldr	r1, [r1, #16]
 802062a:	eba5 0901 	sub.w	r9, r5, r1
 802062e:	6965      	ldr	r5, [r4, #20]
 8020630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020638:	3301      	adds	r3, #1
 802063a:	444b      	add	r3, r9
 802063c:	106d      	asrs	r5, r5, #1
 802063e:	429d      	cmp	r5, r3
 8020640:	bf38      	it	cc
 8020642:	461d      	movcc	r5, r3
 8020644:	0553      	lsls	r3, r2, #21
 8020646:	d531      	bpl.n	80206ac <__ssputs_r+0xa0>
 8020648:	4629      	mov	r1, r5
 802064a:	f7fb fb0b 	bl	801bc64 <_malloc_r>
 802064e:	4606      	mov	r6, r0
 8020650:	b950      	cbnz	r0, 8020668 <__ssputs_r+0x5c>
 8020652:	230c      	movs	r3, #12
 8020654:	f8ca 3000 	str.w	r3, [sl]
 8020658:	89a3      	ldrh	r3, [r4, #12]
 802065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802065e:	81a3      	strh	r3, [r4, #12]
 8020660:	f04f 30ff 	mov.w	r0, #4294967295
 8020664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020668:	6921      	ldr	r1, [r4, #16]
 802066a:	464a      	mov	r2, r9
 802066c:	f7fa fffc 	bl	801b668 <memcpy>
 8020670:	89a3      	ldrh	r3, [r4, #12]
 8020672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802067a:	81a3      	strh	r3, [r4, #12]
 802067c:	6126      	str	r6, [r4, #16]
 802067e:	6165      	str	r5, [r4, #20]
 8020680:	444e      	add	r6, r9
 8020682:	eba5 0509 	sub.w	r5, r5, r9
 8020686:	6026      	str	r6, [r4, #0]
 8020688:	60a5      	str	r5, [r4, #8]
 802068a:	463e      	mov	r6, r7
 802068c:	42be      	cmp	r6, r7
 802068e:	d900      	bls.n	8020692 <__ssputs_r+0x86>
 8020690:	463e      	mov	r6, r7
 8020692:	4632      	mov	r2, r6
 8020694:	6820      	ldr	r0, [r4, #0]
 8020696:	4641      	mov	r1, r8
 8020698:	f7fa fff4 	bl	801b684 <memmove>
 802069c:	68a3      	ldr	r3, [r4, #8]
 802069e:	6822      	ldr	r2, [r4, #0]
 80206a0:	1b9b      	subs	r3, r3, r6
 80206a2:	4432      	add	r2, r6
 80206a4:	60a3      	str	r3, [r4, #8]
 80206a6:	6022      	str	r2, [r4, #0]
 80206a8:	2000      	movs	r0, #0
 80206aa:	e7db      	b.n	8020664 <__ssputs_r+0x58>
 80206ac:	462a      	mov	r2, r5
 80206ae:	f7ff ff87 	bl	80205c0 <_realloc_r>
 80206b2:	4606      	mov	r6, r0
 80206b4:	2800      	cmp	r0, #0
 80206b6:	d1e1      	bne.n	802067c <__ssputs_r+0x70>
 80206b8:	6921      	ldr	r1, [r4, #16]
 80206ba:	4650      	mov	r0, sl
 80206bc:	f7fb fa82 	bl	801bbc4 <_free_r>
 80206c0:	e7c7      	b.n	8020652 <__ssputs_r+0x46>
	...

080206c4 <_svfiprintf_r>:
 80206c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206c8:	4698      	mov	r8, r3
 80206ca:	898b      	ldrh	r3, [r1, #12]
 80206cc:	061b      	lsls	r3, r3, #24
 80206ce:	b09d      	sub	sp, #116	; 0x74
 80206d0:	4607      	mov	r7, r0
 80206d2:	460d      	mov	r5, r1
 80206d4:	4614      	mov	r4, r2
 80206d6:	d50e      	bpl.n	80206f6 <_svfiprintf_r+0x32>
 80206d8:	690b      	ldr	r3, [r1, #16]
 80206da:	b963      	cbnz	r3, 80206f6 <_svfiprintf_r+0x32>
 80206dc:	2140      	movs	r1, #64	; 0x40
 80206de:	f7fb fac1 	bl	801bc64 <_malloc_r>
 80206e2:	6028      	str	r0, [r5, #0]
 80206e4:	6128      	str	r0, [r5, #16]
 80206e6:	b920      	cbnz	r0, 80206f2 <_svfiprintf_r+0x2e>
 80206e8:	230c      	movs	r3, #12
 80206ea:	603b      	str	r3, [r7, #0]
 80206ec:	f04f 30ff 	mov.w	r0, #4294967295
 80206f0:	e0d1      	b.n	8020896 <_svfiprintf_r+0x1d2>
 80206f2:	2340      	movs	r3, #64	; 0x40
 80206f4:	616b      	str	r3, [r5, #20]
 80206f6:	2300      	movs	r3, #0
 80206f8:	9309      	str	r3, [sp, #36]	; 0x24
 80206fa:	2320      	movs	r3, #32
 80206fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020700:	f8cd 800c 	str.w	r8, [sp, #12]
 8020704:	2330      	movs	r3, #48	; 0x30
 8020706:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80208b0 <_svfiprintf_r+0x1ec>
 802070a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802070e:	f04f 0901 	mov.w	r9, #1
 8020712:	4623      	mov	r3, r4
 8020714:	469a      	mov	sl, r3
 8020716:	f813 2b01 	ldrb.w	r2, [r3], #1
 802071a:	b10a      	cbz	r2, 8020720 <_svfiprintf_r+0x5c>
 802071c:	2a25      	cmp	r2, #37	; 0x25
 802071e:	d1f9      	bne.n	8020714 <_svfiprintf_r+0x50>
 8020720:	ebba 0b04 	subs.w	fp, sl, r4
 8020724:	d00b      	beq.n	802073e <_svfiprintf_r+0x7a>
 8020726:	465b      	mov	r3, fp
 8020728:	4622      	mov	r2, r4
 802072a:	4629      	mov	r1, r5
 802072c:	4638      	mov	r0, r7
 802072e:	f7ff ff6d 	bl	802060c <__ssputs_r>
 8020732:	3001      	adds	r0, #1
 8020734:	f000 80aa 	beq.w	802088c <_svfiprintf_r+0x1c8>
 8020738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802073a:	445a      	add	r2, fp
 802073c:	9209      	str	r2, [sp, #36]	; 0x24
 802073e:	f89a 3000 	ldrb.w	r3, [sl]
 8020742:	2b00      	cmp	r3, #0
 8020744:	f000 80a2 	beq.w	802088c <_svfiprintf_r+0x1c8>
 8020748:	2300      	movs	r3, #0
 802074a:	f04f 32ff 	mov.w	r2, #4294967295
 802074e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020752:	f10a 0a01 	add.w	sl, sl, #1
 8020756:	9304      	str	r3, [sp, #16]
 8020758:	9307      	str	r3, [sp, #28]
 802075a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802075e:	931a      	str	r3, [sp, #104]	; 0x68
 8020760:	4654      	mov	r4, sl
 8020762:	2205      	movs	r2, #5
 8020764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020768:	4851      	ldr	r0, [pc, #324]	; (80208b0 <_svfiprintf_r+0x1ec>)
 802076a:	f7df fd59 	bl	8000220 <memchr>
 802076e:	9a04      	ldr	r2, [sp, #16]
 8020770:	b9d8      	cbnz	r0, 80207aa <_svfiprintf_r+0xe6>
 8020772:	06d0      	lsls	r0, r2, #27
 8020774:	bf44      	itt	mi
 8020776:	2320      	movmi	r3, #32
 8020778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802077c:	0711      	lsls	r1, r2, #28
 802077e:	bf44      	itt	mi
 8020780:	232b      	movmi	r3, #43	; 0x2b
 8020782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020786:	f89a 3000 	ldrb.w	r3, [sl]
 802078a:	2b2a      	cmp	r3, #42	; 0x2a
 802078c:	d015      	beq.n	80207ba <_svfiprintf_r+0xf6>
 802078e:	9a07      	ldr	r2, [sp, #28]
 8020790:	4654      	mov	r4, sl
 8020792:	2000      	movs	r0, #0
 8020794:	f04f 0c0a 	mov.w	ip, #10
 8020798:	4621      	mov	r1, r4
 802079a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802079e:	3b30      	subs	r3, #48	; 0x30
 80207a0:	2b09      	cmp	r3, #9
 80207a2:	d94e      	bls.n	8020842 <_svfiprintf_r+0x17e>
 80207a4:	b1b0      	cbz	r0, 80207d4 <_svfiprintf_r+0x110>
 80207a6:	9207      	str	r2, [sp, #28]
 80207a8:	e014      	b.n	80207d4 <_svfiprintf_r+0x110>
 80207aa:	eba0 0308 	sub.w	r3, r0, r8
 80207ae:	fa09 f303 	lsl.w	r3, r9, r3
 80207b2:	4313      	orrs	r3, r2
 80207b4:	9304      	str	r3, [sp, #16]
 80207b6:	46a2      	mov	sl, r4
 80207b8:	e7d2      	b.n	8020760 <_svfiprintf_r+0x9c>
 80207ba:	9b03      	ldr	r3, [sp, #12]
 80207bc:	1d19      	adds	r1, r3, #4
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	9103      	str	r1, [sp, #12]
 80207c2:	2b00      	cmp	r3, #0
 80207c4:	bfbb      	ittet	lt
 80207c6:	425b      	neglt	r3, r3
 80207c8:	f042 0202 	orrlt.w	r2, r2, #2
 80207cc:	9307      	strge	r3, [sp, #28]
 80207ce:	9307      	strlt	r3, [sp, #28]
 80207d0:	bfb8      	it	lt
 80207d2:	9204      	strlt	r2, [sp, #16]
 80207d4:	7823      	ldrb	r3, [r4, #0]
 80207d6:	2b2e      	cmp	r3, #46	; 0x2e
 80207d8:	d10c      	bne.n	80207f4 <_svfiprintf_r+0x130>
 80207da:	7863      	ldrb	r3, [r4, #1]
 80207dc:	2b2a      	cmp	r3, #42	; 0x2a
 80207de:	d135      	bne.n	802084c <_svfiprintf_r+0x188>
 80207e0:	9b03      	ldr	r3, [sp, #12]
 80207e2:	1d1a      	adds	r2, r3, #4
 80207e4:	681b      	ldr	r3, [r3, #0]
 80207e6:	9203      	str	r2, [sp, #12]
 80207e8:	2b00      	cmp	r3, #0
 80207ea:	bfb8      	it	lt
 80207ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80207f0:	3402      	adds	r4, #2
 80207f2:	9305      	str	r3, [sp, #20]
 80207f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80208c0 <_svfiprintf_r+0x1fc>
 80207f8:	7821      	ldrb	r1, [r4, #0]
 80207fa:	2203      	movs	r2, #3
 80207fc:	4650      	mov	r0, sl
 80207fe:	f7df fd0f 	bl	8000220 <memchr>
 8020802:	b140      	cbz	r0, 8020816 <_svfiprintf_r+0x152>
 8020804:	2340      	movs	r3, #64	; 0x40
 8020806:	eba0 000a 	sub.w	r0, r0, sl
 802080a:	fa03 f000 	lsl.w	r0, r3, r0
 802080e:	9b04      	ldr	r3, [sp, #16]
 8020810:	4303      	orrs	r3, r0
 8020812:	3401      	adds	r4, #1
 8020814:	9304      	str	r3, [sp, #16]
 8020816:	f814 1b01 	ldrb.w	r1, [r4], #1
 802081a:	4826      	ldr	r0, [pc, #152]	; (80208b4 <_svfiprintf_r+0x1f0>)
 802081c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020820:	2206      	movs	r2, #6
 8020822:	f7df fcfd 	bl	8000220 <memchr>
 8020826:	2800      	cmp	r0, #0
 8020828:	d038      	beq.n	802089c <_svfiprintf_r+0x1d8>
 802082a:	4b23      	ldr	r3, [pc, #140]	; (80208b8 <_svfiprintf_r+0x1f4>)
 802082c:	bb1b      	cbnz	r3, 8020876 <_svfiprintf_r+0x1b2>
 802082e:	9b03      	ldr	r3, [sp, #12]
 8020830:	3307      	adds	r3, #7
 8020832:	f023 0307 	bic.w	r3, r3, #7
 8020836:	3308      	adds	r3, #8
 8020838:	9303      	str	r3, [sp, #12]
 802083a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802083c:	4433      	add	r3, r6
 802083e:	9309      	str	r3, [sp, #36]	; 0x24
 8020840:	e767      	b.n	8020712 <_svfiprintf_r+0x4e>
 8020842:	fb0c 3202 	mla	r2, ip, r2, r3
 8020846:	460c      	mov	r4, r1
 8020848:	2001      	movs	r0, #1
 802084a:	e7a5      	b.n	8020798 <_svfiprintf_r+0xd4>
 802084c:	2300      	movs	r3, #0
 802084e:	3401      	adds	r4, #1
 8020850:	9305      	str	r3, [sp, #20]
 8020852:	4619      	mov	r1, r3
 8020854:	f04f 0c0a 	mov.w	ip, #10
 8020858:	4620      	mov	r0, r4
 802085a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802085e:	3a30      	subs	r2, #48	; 0x30
 8020860:	2a09      	cmp	r2, #9
 8020862:	d903      	bls.n	802086c <_svfiprintf_r+0x1a8>
 8020864:	2b00      	cmp	r3, #0
 8020866:	d0c5      	beq.n	80207f4 <_svfiprintf_r+0x130>
 8020868:	9105      	str	r1, [sp, #20]
 802086a:	e7c3      	b.n	80207f4 <_svfiprintf_r+0x130>
 802086c:	fb0c 2101 	mla	r1, ip, r1, r2
 8020870:	4604      	mov	r4, r0
 8020872:	2301      	movs	r3, #1
 8020874:	e7f0      	b.n	8020858 <_svfiprintf_r+0x194>
 8020876:	ab03      	add	r3, sp, #12
 8020878:	9300      	str	r3, [sp, #0]
 802087a:	462a      	mov	r2, r5
 802087c:	4b0f      	ldr	r3, [pc, #60]	; (80208bc <_svfiprintf_r+0x1f8>)
 802087e:	a904      	add	r1, sp, #16
 8020880:	4638      	mov	r0, r7
 8020882:	f7fb fae9 	bl	801be58 <_printf_float>
 8020886:	1c42      	adds	r2, r0, #1
 8020888:	4606      	mov	r6, r0
 802088a:	d1d6      	bne.n	802083a <_svfiprintf_r+0x176>
 802088c:	89ab      	ldrh	r3, [r5, #12]
 802088e:	065b      	lsls	r3, r3, #25
 8020890:	f53f af2c 	bmi.w	80206ec <_svfiprintf_r+0x28>
 8020894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020896:	b01d      	add	sp, #116	; 0x74
 8020898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802089c:	ab03      	add	r3, sp, #12
 802089e:	9300      	str	r3, [sp, #0]
 80208a0:	462a      	mov	r2, r5
 80208a2:	4b06      	ldr	r3, [pc, #24]	; (80208bc <_svfiprintf_r+0x1f8>)
 80208a4:	a904      	add	r1, sp, #16
 80208a6:	4638      	mov	r0, r7
 80208a8:	f7fb fd7a 	bl	801c3a0 <_printf_i>
 80208ac:	e7eb      	b.n	8020886 <_svfiprintf_r+0x1c2>
 80208ae:	bf00      	nop
 80208b0:	080237c4 	.word	0x080237c4
 80208b4:	080237ce 	.word	0x080237ce
 80208b8:	0801be59 	.word	0x0801be59
 80208bc:	0802060d 	.word	0x0802060d
 80208c0:	080237ca 	.word	0x080237ca

080208c4 <_sungetc_r>:
 80208c4:	b538      	push	{r3, r4, r5, lr}
 80208c6:	1c4b      	adds	r3, r1, #1
 80208c8:	4614      	mov	r4, r2
 80208ca:	d103      	bne.n	80208d4 <_sungetc_r+0x10>
 80208cc:	f04f 35ff 	mov.w	r5, #4294967295
 80208d0:	4628      	mov	r0, r5
 80208d2:	bd38      	pop	{r3, r4, r5, pc}
 80208d4:	8993      	ldrh	r3, [r2, #12]
 80208d6:	f023 0320 	bic.w	r3, r3, #32
 80208da:	8193      	strh	r3, [r2, #12]
 80208dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80208de:	6852      	ldr	r2, [r2, #4]
 80208e0:	b2cd      	uxtb	r5, r1
 80208e2:	b18b      	cbz	r3, 8020908 <_sungetc_r+0x44>
 80208e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80208e6:	4293      	cmp	r3, r2
 80208e8:	dd08      	ble.n	80208fc <_sungetc_r+0x38>
 80208ea:	6823      	ldr	r3, [r4, #0]
 80208ec:	1e5a      	subs	r2, r3, #1
 80208ee:	6022      	str	r2, [r4, #0]
 80208f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80208f4:	6863      	ldr	r3, [r4, #4]
 80208f6:	3301      	adds	r3, #1
 80208f8:	6063      	str	r3, [r4, #4]
 80208fa:	e7e9      	b.n	80208d0 <_sungetc_r+0xc>
 80208fc:	4621      	mov	r1, r4
 80208fe:	f000 fca5 	bl	802124c <__submore>
 8020902:	2800      	cmp	r0, #0
 8020904:	d0f1      	beq.n	80208ea <_sungetc_r+0x26>
 8020906:	e7e1      	b.n	80208cc <_sungetc_r+0x8>
 8020908:	6921      	ldr	r1, [r4, #16]
 802090a:	6823      	ldr	r3, [r4, #0]
 802090c:	b151      	cbz	r1, 8020924 <_sungetc_r+0x60>
 802090e:	4299      	cmp	r1, r3
 8020910:	d208      	bcs.n	8020924 <_sungetc_r+0x60>
 8020912:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020916:	42a9      	cmp	r1, r5
 8020918:	d104      	bne.n	8020924 <_sungetc_r+0x60>
 802091a:	3b01      	subs	r3, #1
 802091c:	3201      	adds	r2, #1
 802091e:	6023      	str	r3, [r4, #0]
 8020920:	6062      	str	r2, [r4, #4]
 8020922:	e7d5      	b.n	80208d0 <_sungetc_r+0xc>
 8020924:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802092c:	6363      	str	r3, [r4, #52]	; 0x34
 802092e:	2303      	movs	r3, #3
 8020930:	63a3      	str	r3, [r4, #56]	; 0x38
 8020932:	4623      	mov	r3, r4
 8020934:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020938:	6023      	str	r3, [r4, #0]
 802093a:	2301      	movs	r3, #1
 802093c:	e7dc      	b.n	80208f8 <_sungetc_r+0x34>

0802093e <__ssrefill_r>:
 802093e:	b510      	push	{r4, lr}
 8020940:	460c      	mov	r4, r1
 8020942:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020944:	b169      	cbz	r1, 8020962 <__ssrefill_r+0x24>
 8020946:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802094a:	4299      	cmp	r1, r3
 802094c:	d001      	beq.n	8020952 <__ssrefill_r+0x14>
 802094e:	f7fb f939 	bl	801bbc4 <_free_r>
 8020952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020954:	6063      	str	r3, [r4, #4]
 8020956:	2000      	movs	r0, #0
 8020958:	6360      	str	r0, [r4, #52]	; 0x34
 802095a:	b113      	cbz	r3, 8020962 <__ssrefill_r+0x24>
 802095c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802095e:	6023      	str	r3, [r4, #0]
 8020960:	bd10      	pop	{r4, pc}
 8020962:	6923      	ldr	r3, [r4, #16]
 8020964:	6023      	str	r3, [r4, #0]
 8020966:	2300      	movs	r3, #0
 8020968:	6063      	str	r3, [r4, #4]
 802096a:	89a3      	ldrh	r3, [r4, #12]
 802096c:	f043 0320 	orr.w	r3, r3, #32
 8020970:	81a3      	strh	r3, [r4, #12]
 8020972:	f04f 30ff 	mov.w	r0, #4294967295
 8020976:	e7f3      	b.n	8020960 <__ssrefill_r+0x22>

08020978 <__ssvfiscanf_r>:
 8020978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802097c:	460c      	mov	r4, r1
 802097e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8020982:	2100      	movs	r1, #0
 8020984:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020988:	49b2      	ldr	r1, [pc, #712]	; (8020c54 <__ssvfiscanf_r+0x2dc>)
 802098a:	91a0      	str	r1, [sp, #640]	; 0x280
 802098c:	f10d 0804 	add.w	r8, sp, #4
 8020990:	49b1      	ldr	r1, [pc, #708]	; (8020c58 <__ssvfiscanf_r+0x2e0>)
 8020992:	4fb2      	ldr	r7, [pc, #712]	; (8020c5c <__ssvfiscanf_r+0x2e4>)
 8020994:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8020c60 <__ssvfiscanf_r+0x2e8>
 8020998:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802099c:	4606      	mov	r6, r0
 802099e:	91a1      	str	r1, [sp, #644]	; 0x284
 80209a0:	9300      	str	r3, [sp, #0]
 80209a2:	f892 a000 	ldrb.w	sl, [r2]
 80209a6:	f1ba 0f00 	cmp.w	sl, #0
 80209aa:	f000 8151 	beq.w	8020c50 <__ssvfiscanf_r+0x2d8>
 80209ae:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80209b2:	f013 0308 	ands.w	r3, r3, #8
 80209b6:	f102 0501 	add.w	r5, r2, #1
 80209ba:	d019      	beq.n	80209f0 <__ssvfiscanf_r+0x78>
 80209bc:	6863      	ldr	r3, [r4, #4]
 80209be:	2b00      	cmp	r3, #0
 80209c0:	dd0f      	ble.n	80209e2 <__ssvfiscanf_r+0x6a>
 80209c2:	6823      	ldr	r3, [r4, #0]
 80209c4:	781a      	ldrb	r2, [r3, #0]
 80209c6:	5cba      	ldrb	r2, [r7, r2]
 80209c8:	0712      	lsls	r2, r2, #28
 80209ca:	d401      	bmi.n	80209d0 <__ssvfiscanf_r+0x58>
 80209cc:	462a      	mov	r2, r5
 80209ce:	e7e8      	b.n	80209a2 <__ssvfiscanf_r+0x2a>
 80209d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80209d2:	3201      	adds	r2, #1
 80209d4:	9245      	str	r2, [sp, #276]	; 0x114
 80209d6:	6862      	ldr	r2, [r4, #4]
 80209d8:	3301      	adds	r3, #1
 80209da:	3a01      	subs	r2, #1
 80209dc:	6062      	str	r2, [r4, #4]
 80209de:	6023      	str	r3, [r4, #0]
 80209e0:	e7ec      	b.n	80209bc <__ssvfiscanf_r+0x44>
 80209e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80209e4:	4621      	mov	r1, r4
 80209e6:	4630      	mov	r0, r6
 80209e8:	4798      	blx	r3
 80209ea:	2800      	cmp	r0, #0
 80209ec:	d0e9      	beq.n	80209c2 <__ssvfiscanf_r+0x4a>
 80209ee:	e7ed      	b.n	80209cc <__ssvfiscanf_r+0x54>
 80209f0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80209f4:	f040 8083 	bne.w	8020afe <__ssvfiscanf_r+0x186>
 80209f8:	9341      	str	r3, [sp, #260]	; 0x104
 80209fa:	9343      	str	r3, [sp, #268]	; 0x10c
 80209fc:	7853      	ldrb	r3, [r2, #1]
 80209fe:	2b2a      	cmp	r3, #42	; 0x2a
 8020a00:	bf02      	ittt	eq
 8020a02:	2310      	moveq	r3, #16
 8020a04:	1c95      	addeq	r5, r2, #2
 8020a06:	9341      	streq	r3, [sp, #260]	; 0x104
 8020a08:	220a      	movs	r2, #10
 8020a0a:	46ab      	mov	fp, r5
 8020a0c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8020a10:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020a14:	2b09      	cmp	r3, #9
 8020a16:	d91d      	bls.n	8020a54 <__ssvfiscanf_r+0xdc>
 8020a18:	4891      	ldr	r0, [pc, #580]	; (8020c60 <__ssvfiscanf_r+0x2e8>)
 8020a1a:	2203      	movs	r2, #3
 8020a1c:	f7df fc00 	bl	8000220 <memchr>
 8020a20:	b140      	cbz	r0, 8020a34 <__ssvfiscanf_r+0xbc>
 8020a22:	2301      	movs	r3, #1
 8020a24:	eba0 0009 	sub.w	r0, r0, r9
 8020a28:	fa03 f000 	lsl.w	r0, r3, r0
 8020a2c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020a2e:	4318      	orrs	r0, r3
 8020a30:	9041      	str	r0, [sp, #260]	; 0x104
 8020a32:	465d      	mov	r5, fp
 8020a34:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020a38:	2b78      	cmp	r3, #120	; 0x78
 8020a3a:	d806      	bhi.n	8020a4a <__ssvfiscanf_r+0xd2>
 8020a3c:	2b57      	cmp	r3, #87	; 0x57
 8020a3e:	d810      	bhi.n	8020a62 <__ssvfiscanf_r+0xea>
 8020a40:	2b25      	cmp	r3, #37	; 0x25
 8020a42:	d05c      	beq.n	8020afe <__ssvfiscanf_r+0x186>
 8020a44:	d856      	bhi.n	8020af4 <__ssvfiscanf_r+0x17c>
 8020a46:	2b00      	cmp	r3, #0
 8020a48:	d074      	beq.n	8020b34 <__ssvfiscanf_r+0x1bc>
 8020a4a:	2303      	movs	r3, #3
 8020a4c:	9347      	str	r3, [sp, #284]	; 0x11c
 8020a4e:	230a      	movs	r3, #10
 8020a50:	9342      	str	r3, [sp, #264]	; 0x108
 8020a52:	e081      	b.n	8020b58 <__ssvfiscanf_r+0x1e0>
 8020a54:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020a56:	fb02 1303 	mla	r3, r2, r3, r1
 8020a5a:	3b30      	subs	r3, #48	; 0x30
 8020a5c:	9343      	str	r3, [sp, #268]	; 0x10c
 8020a5e:	465d      	mov	r5, fp
 8020a60:	e7d3      	b.n	8020a0a <__ssvfiscanf_r+0x92>
 8020a62:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020a66:	2a20      	cmp	r2, #32
 8020a68:	d8ef      	bhi.n	8020a4a <__ssvfiscanf_r+0xd2>
 8020a6a:	a101      	add	r1, pc, #4	; (adr r1, 8020a70 <__ssvfiscanf_r+0xf8>)
 8020a6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020a70:	08020b43 	.word	0x08020b43
 8020a74:	08020a4b 	.word	0x08020a4b
 8020a78:	08020a4b 	.word	0x08020a4b
 8020a7c:	08020ba1 	.word	0x08020ba1
 8020a80:	08020a4b 	.word	0x08020a4b
 8020a84:	08020a4b 	.word	0x08020a4b
 8020a88:	08020a4b 	.word	0x08020a4b
 8020a8c:	08020a4b 	.word	0x08020a4b
 8020a90:	08020a4b 	.word	0x08020a4b
 8020a94:	08020a4b 	.word	0x08020a4b
 8020a98:	08020a4b 	.word	0x08020a4b
 8020a9c:	08020bb7 	.word	0x08020bb7
 8020aa0:	08020b8d 	.word	0x08020b8d
 8020aa4:	08020afb 	.word	0x08020afb
 8020aa8:	08020afb 	.word	0x08020afb
 8020aac:	08020afb 	.word	0x08020afb
 8020ab0:	08020a4b 	.word	0x08020a4b
 8020ab4:	08020b91 	.word	0x08020b91
 8020ab8:	08020a4b 	.word	0x08020a4b
 8020abc:	08020a4b 	.word	0x08020a4b
 8020ac0:	08020a4b 	.word	0x08020a4b
 8020ac4:	08020a4b 	.word	0x08020a4b
 8020ac8:	08020bc7 	.word	0x08020bc7
 8020acc:	08020b99 	.word	0x08020b99
 8020ad0:	08020b3b 	.word	0x08020b3b
 8020ad4:	08020a4b 	.word	0x08020a4b
 8020ad8:	08020a4b 	.word	0x08020a4b
 8020adc:	08020bc3 	.word	0x08020bc3
 8020ae0:	08020a4b 	.word	0x08020a4b
 8020ae4:	08020b8d 	.word	0x08020b8d
 8020ae8:	08020a4b 	.word	0x08020a4b
 8020aec:	08020a4b 	.word	0x08020a4b
 8020af0:	08020b43 	.word	0x08020b43
 8020af4:	3b45      	subs	r3, #69	; 0x45
 8020af6:	2b02      	cmp	r3, #2
 8020af8:	d8a7      	bhi.n	8020a4a <__ssvfiscanf_r+0xd2>
 8020afa:	2305      	movs	r3, #5
 8020afc:	e02b      	b.n	8020b56 <__ssvfiscanf_r+0x1de>
 8020afe:	6863      	ldr	r3, [r4, #4]
 8020b00:	2b00      	cmp	r3, #0
 8020b02:	dd0d      	ble.n	8020b20 <__ssvfiscanf_r+0x1a8>
 8020b04:	6823      	ldr	r3, [r4, #0]
 8020b06:	781a      	ldrb	r2, [r3, #0]
 8020b08:	4552      	cmp	r2, sl
 8020b0a:	f040 80a1 	bne.w	8020c50 <__ssvfiscanf_r+0x2d8>
 8020b0e:	3301      	adds	r3, #1
 8020b10:	6862      	ldr	r2, [r4, #4]
 8020b12:	6023      	str	r3, [r4, #0]
 8020b14:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020b16:	3a01      	subs	r2, #1
 8020b18:	3301      	adds	r3, #1
 8020b1a:	6062      	str	r2, [r4, #4]
 8020b1c:	9345      	str	r3, [sp, #276]	; 0x114
 8020b1e:	e755      	b.n	80209cc <__ssvfiscanf_r+0x54>
 8020b20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020b22:	4621      	mov	r1, r4
 8020b24:	4630      	mov	r0, r6
 8020b26:	4798      	blx	r3
 8020b28:	2800      	cmp	r0, #0
 8020b2a:	d0eb      	beq.n	8020b04 <__ssvfiscanf_r+0x18c>
 8020b2c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020b2e:	2800      	cmp	r0, #0
 8020b30:	f040 8084 	bne.w	8020c3c <__ssvfiscanf_r+0x2c4>
 8020b34:	f04f 30ff 	mov.w	r0, #4294967295
 8020b38:	e086      	b.n	8020c48 <__ssvfiscanf_r+0x2d0>
 8020b3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020b3c:	f042 0220 	orr.w	r2, r2, #32
 8020b40:	9241      	str	r2, [sp, #260]	; 0x104
 8020b42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020b48:	9241      	str	r2, [sp, #260]	; 0x104
 8020b4a:	2210      	movs	r2, #16
 8020b4c:	2b6f      	cmp	r3, #111	; 0x6f
 8020b4e:	9242      	str	r2, [sp, #264]	; 0x108
 8020b50:	bf34      	ite	cc
 8020b52:	2303      	movcc	r3, #3
 8020b54:	2304      	movcs	r3, #4
 8020b56:	9347      	str	r3, [sp, #284]	; 0x11c
 8020b58:	6863      	ldr	r3, [r4, #4]
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	dd41      	ble.n	8020be2 <__ssvfiscanf_r+0x26a>
 8020b5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020b60:	0659      	lsls	r1, r3, #25
 8020b62:	d404      	bmi.n	8020b6e <__ssvfiscanf_r+0x1f6>
 8020b64:	6823      	ldr	r3, [r4, #0]
 8020b66:	781a      	ldrb	r2, [r3, #0]
 8020b68:	5cba      	ldrb	r2, [r7, r2]
 8020b6a:	0712      	lsls	r2, r2, #28
 8020b6c:	d440      	bmi.n	8020bf0 <__ssvfiscanf_r+0x278>
 8020b6e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020b70:	2b02      	cmp	r3, #2
 8020b72:	dc4f      	bgt.n	8020c14 <__ssvfiscanf_r+0x29c>
 8020b74:	466b      	mov	r3, sp
 8020b76:	4622      	mov	r2, r4
 8020b78:	a941      	add	r1, sp, #260	; 0x104
 8020b7a:	4630      	mov	r0, r6
 8020b7c:	f000 f9ce 	bl	8020f1c <_scanf_chars>
 8020b80:	2801      	cmp	r0, #1
 8020b82:	d065      	beq.n	8020c50 <__ssvfiscanf_r+0x2d8>
 8020b84:	2802      	cmp	r0, #2
 8020b86:	f47f af21 	bne.w	80209cc <__ssvfiscanf_r+0x54>
 8020b8a:	e7cf      	b.n	8020b2c <__ssvfiscanf_r+0x1b4>
 8020b8c:	220a      	movs	r2, #10
 8020b8e:	e7dd      	b.n	8020b4c <__ssvfiscanf_r+0x1d4>
 8020b90:	2300      	movs	r3, #0
 8020b92:	9342      	str	r3, [sp, #264]	; 0x108
 8020b94:	2303      	movs	r3, #3
 8020b96:	e7de      	b.n	8020b56 <__ssvfiscanf_r+0x1de>
 8020b98:	2308      	movs	r3, #8
 8020b9a:	9342      	str	r3, [sp, #264]	; 0x108
 8020b9c:	2304      	movs	r3, #4
 8020b9e:	e7da      	b.n	8020b56 <__ssvfiscanf_r+0x1de>
 8020ba0:	4629      	mov	r1, r5
 8020ba2:	4640      	mov	r0, r8
 8020ba4:	f000 fb18 	bl	80211d8 <__sccl>
 8020ba8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020bae:	9341      	str	r3, [sp, #260]	; 0x104
 8020bb0:	4605      	mov	r5, r0
 8020bb2:	2301      	movs	r3, #1
 8020bb4:	e7cf      	b.n	8020b56 <__ssvfiscanf_r+0x1de>
 8020bb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020bbc:	9341      	str	r3, [sp, #260]	; 0x104
 8020bbe:	2300      	movs	r3, #0
 8020bc0:	e7c9      	b.n	8020b56 <__ssvfiscanf_r+0x1de>
 8020bc2:	2302      	movs	r3, #2
 8020bc4:	e7c7      	b.n	8020b56 <__ssvfiscanf_r+0x1de>
 8020bc6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020bc8:	06c3      	lsls	r3, r0, #27
 8020bca:	f53f aeff 	bmi.w	80209cc <__ssvfiscanf_r+0x54>
 8020bce:	9b00      	ldr	r3, [sp, #0]
 8020bd0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020bd2:	1d19      	adds	r1, r3, #4
 8020bd4:	9100      	str	r1, [sp, #0]
 8020bd6:	681b      	ldr	r3, [r3, #0]
 8020bd8:	07c0      	lsls	r0, r0, #31
 8020bda:	bf4c      	ite	mi
 8020bdc:	801a      	strhmi	r2, [r3, #0]
 8020bde:	601a      	strpl	r2, [r3, #0]
 8020be0:	e6f4      	b.n	80209cc <__ssvfiscanf_r+0x54>
 8020be2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020be4:	4621      	mov	r1, r4
 8020be6:	4630      	mov	r0, r6
 8020be8:	4798      	blx	r3
 8020bea:	2800      	cmp	r0, #0
 8020bec:	d0b7      	beq.n	8020b5e <__ssvfiscanf_r+0x1e6>
 8020bee:	e79d      	b.n	8020b2c <__ssvfiscanf_r+0x1b4>
 8020bf0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020bf2:	3201      	adds	r2, #1
 8020bf4:	9245      	str	r2, [sp, #276]	; 0x114
 8020bf6:	6862      	ldr	r2, [r4, #4]
 8020bf8:	3a01      	subs	r2, #1
 8020bfa:	2a00      	cmp	r2, #0
 8020bfc:	6062      	str	r2, [r4, #4]
 8020bfe:	dd02      	ble.n	8020c06 <__ssvfiscanf_r+0x28e>
 8020c00:	3301      	adds	r3, #1
 8020c02:	6023      	str	r3, [r4, #0]
 8020c04:	e7ae      	b.n	8020b64 <__ssvfiscanf_r+0x1ec>
 8020c06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020c08:	4621      	mov	r1, r4
 8020c0a:	4630      	mov	r0, r6
 8020c0c:	4798      	blx	r3
 8020c0e:	2800      	cmp	r0, #0
 8020c10:	d0a8      	beq.n	8020b64 <__ssvfiscanf_r+0x1ec>
 8020c12:	e78b      	b.n	8020b2c <__ssvfiscanf_r+0x1b4>
 8020c14:	2b04      	cmp	r3, #4
 8020c16:	dc06      	bgt.n	8020c26 <__ssvfiscanf_r+0x2ae>
 8020c18:	466b      	mov	r3, sp
 8020c1a:	4622      	mov	r2, r4
 8020c1c:	a941      	add	r1, sp, #260	; 0x104
 8020c1e:	4630      	mov	r0, r6
 8020c20:	f000 f9d4 	bl	8020fcc <_scanf_i>
 8020c24:	e7ac      	b.n	8020b80 <__ssvfiscanf_r+0x208>
 8020c26:	4b0f      	ldr	r3, [pc, #60]	; (8020c64 <__ssvfiscanf_r+0x2ec>)
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	f43f aecf 	beq.w	80209cc <__ssvfiscanf_r+0x54>
 8020c2e:	466b      	mov	r3, sp
 8020c30:	4622      	mov	r2, r4
 8020c32:	a941      	add	r1, sp, #260	; 0x104
 8020c34:	4630      	mov	r0, r6
 8020c36:	f7fb fcd9 	bl	801c5ec <_scanf_float>
 8020c3a:	e7a1      	b.n	8020b80 <__ssvfiscanf_r+0x208>
 8020c3c:	89a3      	ldrh	r3, [r4, #12]
 8020c3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020c42:	bf18      	it	ne
 8020c44:	f04f 30ff 	movne.w	r0, #4294967295
 8020c48:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8020c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c50:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020c52:	e7f9      	b.n	8020c48 <__ssvfiscanf_r+0x2d0>
 8020c54:	080208c5 	.word	0x080208c5
 8020c58:	0802093f 	.word	0x0802093f
 8020c5c:	080231c9 	.word	0x080231c9
 8020c60:	080237ca 	.word	0x080237ca
 8020c64:	0801c5ed 	.word	0x0801c5ed

08020c68 <__sfputc_r>:
 8020c68:	6893      	ldr	r3, [r2, #8]
 8020c6a:	3b01      	subs	r3, #1
 8020c6c:	2b00      	cmp	r3, #0
 8020c6e:	b410      	push	{r4}
 8020c70:	6093      	str	r3, [r2, #8]
 8020c72:	da08      	bge.n	8020c86 <__sfputc_r+0x1e>
 8020c74:	6994      	ldr	r4, [r2, #24]
 8020c76:	42a3      	cmp	r3, r4
 8020c78:	db01      	blt.n	8020c7e <__sfputc_r+0x16>
 8020c7a:	290a      	cmp	r1, #10
 8020c7c:	d103      	bne.n	8020c86 <__sfputc_r+0x1e>
 8020c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020c82:	f7fd ba75 	b.w	801e170 <__swbuf_r>
 8020c86:	6813      	ldr	r3, [r2, #0]
 8020c88:	1c58      	adds	r0, r3, #1
 8020c8a:	6010      	str	r0, [r2, #0]
 8020c8c:	7019      	strb	r1, [r3, #0]
 8020c8e:	4608      	mov	r0, r1
 8020c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020c94:	4770      	bx	lr

08020c96 <__sfputs_r>:
 8020c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c98:	4606      	mov	r6, r0
 8020c9a:	460f      	mov	r7, r1
 8020c9c:	4614      	mov	r4, r2
 8020c9e:	18d5      	adds	r5, r2, r3
 8020ca0:	42ac      	cmp	r4, r5
 8020ca2:	d101      	bne.n	8020ca8 <__sfputs_r+0x12>
 8020ca4:	2000      	movs	r0, #0
 8020ca6:	e007      	b.n	8020cb8 <__sfputs_r+0x22>
 8020ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020cac:	463a      	mov	r2, r7
 8020cae:	4630      	mov	r0, r6
 8020cb0:	f7ff ffda 	bl	8020c68 <__sfputc_r>
 8020cb4:	1c43      	adds	r3, r0, #1
 8020cb6:	d1f3      	bne.n	8020ca0 <__sfputs_r+0xa>
 8020cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020cbc <_vfiprintf_r>:
 8020cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cc0:	460d      	mov	r5, r1
 8020cc2:	b09d      	sub	sp, #116	; 0x74
 8020cc4:	4614      	mov	r4, r2
 8020cc6:	4698      	mov	r8, r3
 8020cc8:	4606      	mov	r6, r0
 8020cca:	b118      	cbz	r0, 8020cd4 <_vfiprintf_r+0x18>
 8020ccc:	6983      	ldr	r3, [r0, #24]
 8020cce:	b90b      	cbnz	r3, 8020cd4 <_vfiprintf_r+0x18>
 8020cd0:	f7fa fad6 	bl	801b280 <__sinit>
 8020cd4:	4b89      	ldr	r3, [pc, #548]	; (8020efc <_vfiprintf_r+0x240>)
 8020cd6:	429d      	cmp	r5, r3
 8020cd8:	d11b      	bne.n	8020d12 <_vfiprintf_r+0x56>
 8020cda:	6875      	ldr	r5, [r6, #4]
 8020cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020cde:	07d9      	lsls	r1, r3, #31
 8020ce0:	d405      	bmi.n	8020cee <_vfiprintf_r+0x32>
 8020ce2:	89ab      	ldrh	r3, [r5, #12]
 8020ce4:	059a      	lsls	r2, r3, #22
 8020ce6:	d402      	bmi.n	8020cee <_vfiprintf_r+0x32>
 8020ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020cea:	f7fa fca9 	bl	801b640 <__retarget_lock_acquire_recursive>
 8020cee:	89ab      	ldrh	r3, [r5, #12]
 8020cf0:	071b      	lsls	r3, r3, #28
 8020cf2:	d501      	bpl.n	8020cf8 <_vfiprintf_r+0x3c>
 8020cf4:	692b      	ldr	r3, [r5, #16]
 8020cf6:	b9eb      	cbnz	r3, 8020d34 <_vfiprintf_r+0x78>
 8020cf8:	4629      	mov	r1, r5
 8020cfa:	4630      	mov	r0, r6
 8020cfc:	f7fd fa9c 	bl	801e238 <__swsetup_r>
 8020d00:	b1c0      	cbz	r0, 8020d34 <_vfiprintf_r+0x78>
 8020d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020d04:	07dc      	lsls	r4, r3, #31
 8020d06:	d50e      	bpl.n	8020d26 <_vfiprintf_r+0x6a>
 8020d08:	f04f 30ff 	mov.w	r0, #4294967295
 8020d0c:	b01d      	add	sp, #116	; 0x74
 8020d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d12:	4b7b      	ldr	r3, [pc, #492]	; (8020f00 <_vfiprintf_r+0x244>)
 8020d14:	429d      	cmp	r5, r3
 8020d16:	d101      	bne.n	8020d1c <_vfiprintf_r+0x60>
 8020d18:	68b5      	ldr	r5, [r6, #8]
 8020d1a:	e7df      	b.n	8020cdc <_vfiprintf_r+0x20>
 8020d1c:	4b79      	ldr	r3, [pc, #484]	; (8020f04 <_vfiprintf_r+0x248>)
 8020d1e:	429d      	cmp	r5, r3
 8020d20:	bf08      	it	eq
 8020d22:	68f5      	ldreq	r5, [r6, #12]
 8020d24:	e7da      	b.n	8020cdc <_vfiprintf_r+0x20>
 8020d26:	89ab      	ldrh	r3, [r5, #12]
 8020d28:	0598      	lsls	r0, r3, #22
 8020d2a:	d4ed      	bmi.n	8020d08 <_vfiprintf_r+0x4c>
 8020d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020d2e:	f7fa fc89 	bl	801b644 <__retarget_lock_release_recursive>
 8020d32:	e7e9      	b.n	8020d08 <_vfiprintf_r+0x4c>
 8020d34:	2300      	movs	r3, #0
 8020d36:	9309      	str	r3, [sp, #36]	; 0x24
 8020d38:	2320      	movs	r3, #32
 8020d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020d42:	2330      	movs	r3, #48	; 0x30
 8020d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020f08 <_vfiprintf_r+0x24c>
 8020d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020d4c:	f04f 0901 	mov.w	r9, #1
 8020d50:	4623      	mov	r3, r4
 8020d52:	469a      	mov	sl, r3
 8020d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020d58:	b10a      	cbz	r2, 8020d5e <_vfiprintf_r+0xa2>
 8020d5a:	2a25      	cmp	r2, #37	; 0x25
 8020d5c:	d1f9      	bne.n	8020d52 <_vfiprintf_r+0x96>
 8020d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8020d62:	d00b      	beq.n	8020d7c <_vfiprintf_r+0xc0>
 8020d64:	465b      	mov	r3, fp
 8020d66:	4622      	mov	r2, r4
 8020d68:	4629      	mov	r1, r5
 8020d6a:	4630      	mov	r0, r6
 8020d6c:	f7ff ff93 	bl	8020c96 <__sfputs_r>
 8020d70:	3001      	adds	r0, #1
 8020d72:	f000 80aa 	beq.w	8020eca <_vfiprintf_r+0x20e>
 8020d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d78:	445a      	add	r2, fp
 8020d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8020d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8020d80:	2b00      	cmp	r3, #0
 8020d82:	f000 80a2 	beq.w	8020eca <_vfiprintf_r+0x20e>
 8020d86:	2300      	movs	r3, #0
 8020d88:	f04f 32ff 	mov.w	r2, #4294967295
 8020d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020d90:	f10a 0a01 	add.w	sl, sl, #1
 8020d94:	9304      	str	r3, [sp, #16]
 8020d96:	9307      	str	r3, [sp, #28]
 8020d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8020d9e:	4654      	mov	r4, sl
 8020da0:	2205      	movs	r2, #5
 8020da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020da6:	4858      	ldr	r0, [pc, #352]	; (8020f08 <_vfiprintf_r+0x24c>)
 8020da8:	f7df fa3a 	bl	8000220 <memchr>
 8020dac:	9a04      	ldr	r2, [sp, #16]
 8020dae:	b9d8      	cbnz	r0, 8020de8 <_vfiprintf_r+0x12c>
 8020db0:	06d1      	lsls	r1, r2, #27
 8020db2:	bf44      	itt	mi
 8020db4:	2320      	movmi	r3, #32
 8020db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020dba:	0713      	lsls	r3, r2, #28
 8020dbc:	bf44      	itt	mi
 8020dbe:	232b      	movmi	r3, #43	; 0x2b
 8020dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8020dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8020dca:	d015      	beq.n	8020df8 <_vfiprintf_r+0x13c>
 8020dcc:	9a07      	ldr	r2, [sp, #28]
 8020dce:	4654      	mov	r4, sl
 8020dd0:	2000      	movs	r0, #0
 8020dd2:	f04f 0c0a 	mov.w	ip, #10
 8020dd6:	4621      	mov	r1, r4
 8020dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020ddc:	3b30      	subs	r3, #48	; 0x30
 8020dde:	2b09      	cmp	r3, #9
 8020de0:	d94e      	bls.n	8020e80 <_vfiprintf_r+0x1c4>
 8020de2:	b1b0      	cbz	r0, 8020e12 <_vfiprintf_r+0x156>
 8020de4:	9207      	str	r2, [sp, #28]
 8020de6:	e014      	b.n	8020e12 <_vfiprintf_r+0x156>
 8020de8:	eba0 0308 	sub.w	r3, r0, r8
 8020dec:	fa09 f303 	lsl.w	r3, r9, r3
 8020df0:	4313      	orrs	r3, r2
 8020df2:	9304      	str	r3, [sp, #16]
 8020df4:	46a2      	mov	sl, r4
 8020df6:	e7d2      	b.n	8020d9e <_vfiprintf_r+0xe2>
 8020df8:	9b03      	ldr	r3, [sp, #12]
 8020dfa:	1d19      	adds	r1, r3, #4
 8020dfc:	681b      	ldr	r3, [r3, #0]
 8020dfe:	9103      	str	r1, [sp, #12]
 8020e00:	2b00      	cmp	r3, #0
 8020e02:	bfbb      	ittet	lt
 8020e04:	425b      	neglt	r3, r3
 8020e06:	f042 0202 	orrlt.w	r2, r2, #2
 8020e0a:	9307      	strge	r3, [sp, #28]
 8020e0c:	9307      	strlt	r3, [sp, #28]
 8020e0e:	bfb8      	it	lt
 8020e10:	9204      	strlt	r2, [sp, #16]
 8020e12:	7823      	ldrb	r3, [r4, #0]
 8020e14:	2b2e      	cmp	r3, #46	; 0x2e
 8020e16:	d10c      	bne.n	8020e32 <_vfiprintf_r+0x176>
 8020e18:	7863      	ldrb	r3, [r4, #1]
 8020e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8020e1c:	d135      	bne.n	8020e8a <_vfiprintf_r+0x1ce>
 8020e1e:	9b03      	ldr	r3, [sp, #12]
 8020e20:	1d1a      	adds	r2, r3, #4
 8020e22:	681b      	ldr	r3, [r3, #0]
 8020e24:	9203      	str	r2, [sp, #12]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	bfb8      	it	lt
 8020e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8020e2e:	3402      	adds	r4, #2
 8020e30:	9305      	str	r3, [sp, #20]
 8020e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020f18 <_vfiprintf_r+0x25c>
 8020e36:	7821      	ldrb	r1, [r4, #0]
 8020e38:	2203      	movs	r2, #3
 8020e3a:	4650      	mov	r0, sl
 8020e3c:	f7df f9f0 	bl	8000220 <memchr>
 8020e40:	b140      	cbz	r0, 8020e54 <_vfiprintf_r+0x198>
 8020e42:	2340      	movs	r3, #64	; 0x40
 8020e44:	eba0 000a 	sub.w	r0, r0, sl
 8020e48:	fa03 f000 	lsl.w	r0, r3, r0
 8020e4c:	9b04      	ldr	r3, [sp, #16]
 8020e4e:	4303      	orrs	r3, r0
 8020e50:	3401      	adds	r4, #1
 8020e52:	9304      	str	r3, [sp, #16]
 8020e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e58:	482c      	ldr	r0, [pc, #176]	; (8020f0c <_vfiprintf_r+0x250>)
 8020e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020e5e:	2206      	movs	r2, #6
 8020e60:	f7df f9de 	bl	8000220 <memchr>
 8020e64:	2800      	cmp	r0, #0
 8020e66:	d03f      	beq.n	8020ee8 <_vfiprintf_r+0x22c>
 8020e68:	4b29      	ldr	r3, [pc, #164]	; (8020f10 <_vfiprintf_r+0x254>)
 8020e6a:	bb1b      	cbnz	r3, 8020eb4 <_vfiprintf_r+0x1f8>
 8020e6c:	9b03      	ldr	r3, [sp, #12]
 8020e6e:	3307      	adds	r3, #7
 8020e70:	f023 0307 	bic.w	r3, r3, #7
 8020e74:	3308      	adds	r3, #8
 8020e76:	9303      	str	r3, [sp, #12]
 8020e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e7a:	443b      	add	r3, r7
 8020e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8020e7e:	e767      	b.n	8020d50 <_vfiprintf_r+0x94>
 8020e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8020e84:	460c      	mov	r4, r1
 8020e86:	2001      	movs	r0, #1
 8020e88:	e7a5      	b.n	8020dd6 <_vfiprintf_r+0x11a>
 8020e8a:	2300      	movs	r3, #0
 8020e8c:	3401      	adds	r4, #1
 8020e8e:	9305      	str	r3, [sp, #20]
 8020e90:	4619      	mov	r1, r3
 8020e92:	f04f 0c0a 	mov.w	ip, #10
 8020e96:	4620      	mov	r0, r4
 8020e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020e9c:	3a30      	subs	r2, #48	; 0x30
 8020e9e:	2a09      	cmp	r2, #9
 8020ea0:	d903      	bls.n	8020eaa <_vfiprintf_r+0x1ee>
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	d0c5      	beq.n	8020e32 <_vfiprintf_r+0x176>
 8020ea6:	9105      	str	r1, [sp, #20]
 8020ea8:	e7c3      	b.n	8020e32 <_vfiprintf_r+0x176>
 8020eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8020eae:	4604      	mov	r4, r0
 8020eb0:	2301      	movs	r3, #1
 8020eb2:	e7f0      	b.n	8020e96 <_vfiprintf_r+0x1da>
 8020eb4:	ab03      	add	r3, sp, #12
 8020eb6:	9300      	str	r3, [sp, #0]
 8020eb8:	462a      	mov	r2, r5
 8020eba:	4b16      	ldr	r3, [pc, #88]	; (8020f14 <_vfiprintf_r+0x258>)
 8020ebc:	a904      	add	r1, sp, #16
 8020ebe:	4630      	mov	r0, r6
 8020ec0:	f7fa ffca 	bl	801be58 <_printf_float>
 8020ec4:	4607      	mov	r7, r0
 8020ec6:	1c78      	adds	r0, r7, #1
 8020ec8:	d1d6      	bne.n	8020e78 <_vfiprintf_r+0x1bc>
 8020eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020ecc:	07d9      	lsls	r1, r3, #31
 8020ece:	d405      	bmi.n	8020edc <_vfiprintf_r+0x220>
 8020ed0:	89ab      	ldrh	r3, [r5, #12]
 8020ed2:	059a      	lsls	r2, r3, #22
 8020ed4:	d402      	bmi.n	8020edc <_vfiprintf_r+0x220>
 8020ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020ed8:	f7fa fbb4 	bl	801b644 <__retarget_lock_release_recursive>
 8020edc:	89ab      	ldrh	r3, [r5, #12]
 8020ede:	065b      	lsls	r3, r3, #25
 8020ee0:	f53f af12 	bmi.w	8020d08 <_vfiprintf_r+0x4c>
 8020ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020ee6:	e711      	b.n	8020d0c <_vfiprintf_r+0x50>
 8020ee8:	ab03      	add	r3, sp, #12
 8020eea:	9300      	str	r3, [sp, #0]
 8020eec:	462a      	mov	r2, r5
 8020eee:	4b09      	ldr	r3, [pc, #36]	; (8020f14 <_vfiprintf_r+0x258>)
 8020ef0:	a904      	add	r1, sp, #16
 8020ef2:	4630      	mov	r0, r6
 8020ef4:	f7fb fa54 	bl	801c3a0 <_printf_i>
 8020ef8:	e7e4      	b.n	8020ec4 <_vfiprintf_r+0x208>
 8020efa:	bf00      	nop
 8020efc:	080232ec 	.word	0x080232ec
 8020f00:	0802330c 	.word	0x0802330c
 8020f04:	080232cc 	.word	0x080232cc
 8020f08:	080237c4 	.word	0x080237c4
 8020f0c:	080237ce 	.word	0x080237ce
 8020f10:	0801be59 	.word	0x0801be59
 8020f14:	08020c97 	.word	0x08020c97
 8020f18:	080237ca 	.word	0x080237ca

08020f1c <_scanf_chars>:
 8020f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020f20:	4615      	mov	r5, r2
 8020f22:	688a      	ldr	r2, [r1, #8]
 8020f24:	4680      	mov	r8, r0
 8020f26:	460c      	mov	r4, r1
 8020f28:	b932      	cbnz	r2, 8020f38 <_scanf_chars+0x1c>
 8020f2a:	698a      	ldr	r2, [r1, #24]
 8020f2c:	2a00      	cmp	r2, #0
 8020f2e:	bf0c      	ite	eq
 8020f30:	2201      	moveq	r2, #1
 8020f32:	f04f 32ff 	movne.w	r2, #4294967295
 8020f36:	608a      	str	r2, [r1, #8]
 8020f38:	6822      	ldr	r2, [r4, #0]
 8020f3a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020fc8 <_scanf_chars+0xac>
 8020f3e:	06d1      	lsls	r1, r2, #27
 8020f40:	bf5f      	itttt	pl
 8020f42:	681a      	ldrpl	r2, [r3, #0]
 8020f44:	1d11      	addpl	r1, r2, #4
 8020f46:	6019      	strpl	r1, [r3, #0]
 8020f48:	6816      	ldrpl	r6, [r2, #0]
 8020f4a:	2700      	movs	r7, #0
 8020f4c:	69a0      	ldr	r0, [r4, #24]
 8020f4e:	b188      	cbz	r0, 8020f74 <_scanf_chars+0x58>
 8020f50:	2801      	cmp	r0, #1
 8020f52:	d107      	bne.n	8020f64 <_scanf_chars+0x48>
 8020f54:	682b      	ldr	r3, [r5, #0]
 8020f56:	781a      	ldrb	r2, [r3, #0]
 8020f58:	6963      	ldr	r3, [r4, #20]
 8020f5a:	5c9b      	ldrb	r3, [r3, r2]
 8020f5c:	b953      	cbnz	r3, 8020f74 <_scanf_chars+0x58>
 8020f5e:	bb27      	cbnz	r7, 8020faa <_scanf_chars+0x8e>
 8020f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f64:	2802      	cmp	r0, #2
 8020f66:	d120      	bne.n	8020faa <_scanf_chars+0x8e>
 8020f68:	682b      	ldr	r3, [r5, #0]
 8020f6a:	781b      	ldrb	r3, [r3, #0]
 8020f6c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020f70:	071b      	lsls	r3, r3, #28
 8020f72:	d41a      	bmi.n	8020faa <_scanf_chars+0x8e>
 8020f74:	6823      	ldr	r3, [r4, #0]
 8020f76:	06da      	lsls	r2, r3, #27
 8020f78:	bf5e      	ittt	pl
 8020f7a:	682b      	ldrpl	r3, [r5, #0]
 8020f7c:	781b      	ldrbpl	r3, [r3, #0]
 8020f7e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020f82:	682a      	ldr	r2, [r5, #0]
 8020f84:	686b      	ldr	r3, [r5, #4]
 8020f86:	3201      	adds	r2, #1
 8020f88:	602a      	str	r2, [r5, #0]
 8020f8a:	68a2      	ldr	r2, [r4, #8]
 8020f8c:	3b01      	subs	r3, #1
 8020f8e:	3a01      	subs	r2, #1
 8020f90:	606b      	str	r3, [r5, #4]
 8020f92:	3701      	adds	r7, #1
 8020f94:	60a2      	str	r2, [r4, #8]
 8020f96:	b142      	cbz	r2, 8020faa <_scanf_chars+0x8e>
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	dcd7      	bgt.n	8020f4c <_scanf_chars+0x30>
 8020f9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020fa0:	4629      	mov	r1, r5
 8020fa2:	4640      	mov	r0, r8
 8020fa4:	4798      	blx	r3
 8020fa6:	2800      	cmp	r0, #0
 8020fa8:	d0d0      	beq.n	8020f4c <_scanf_chars+0x30>
 8020faa:	6823      	ldr	r3, [r4, #0]
 8020fac:	f013 0310 	ands.w	r3, r3, #16
 8020fb0:	d105      	bne.n	8020fbe <_scanf_chars+0xa2>
 8020fb2:	68e2      	ldr	r2, [r4, #12]
 8020fb4:	3201      	adds	r2, #1
 8020fb6:	60e2      	str	r2, [r4, #12]
 8020fb8:	69a2      	ldr	r2, [r4, #24]
 8020fba:	b102      	cbz	r2, 8020fbe <_scanf_chars+0xa2>
 8020fbc:	7033      	strb	r3, [r6, #0]
 8020fbe:	6923      	ldr	r3, [r4, #16]
 8020fc0:	441f      	add	r7, r3
 8020fc2:	6127      	str	r7, [r4, #16]
 8020fc4:	2000      	movs	r0, #0
 8020fc6:	e7cb      	b.n	8020f60 <_scanf_chars+0x44>
 8020fc8:	080231c9 	.word	0x080231c9

08020fcc <_scanf_i>:
 8020fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fd0:	4698      	mov	r8, r3
 8020fd2:	4b74      	ldr	r3, [pc, #464]	; (80211a4 <_scanf_i+0x1d8>)
 8020fd4:	460c      	mov	r4, r1
 8020fd6:	4682      	mov	sl, r0
 8020fd8:	4616      	mov	r6, r2
 8020fda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020fde:	b087      	sub	sp, #28
 8020fe0:	ab03      	add	r3, sp, #12
 8020fe2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020fe6:	4b70      	ldr	r3, [pc, #448]	; (80211a8 <_scanf_i+0x1dc>)
 8020fe8:	69a1      	ldr	r1, [r4, #24]
 8020fea:	4a70      	ldr	r2, [pc, #448]	; (80211ac <_scanf_i+0x1e0>)
 8020fec:	2903      	cmp	r1, #3
 8020fee:	bf18      	it	ne
 8020ff0:	461a      	movne	r2, r3
 8020ff2:	68a3      	ldr	r3, [r4, #8]
 8020ff4:	9201      	str	r2, [sp, #4]
 8020ff6:	1e5a      	subs	r2, r3, #1
 8020ff8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020ffc:	bf88      	it	hi
 8020ffe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8021002:	4627      	mov	r7, r4
 8021004:	bf82      	ittt	hi
 8021006:	eb03 0905 	addhi.w	r9, r3, r5
 802100a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802100e:	60a3      	strhi	r3, [r4, #8]
 8021010:	f857 3b1c 	ldr.w	r3, [r7], #28
 8021014:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8021018:	bf98      	it	ls
 802101a:	f04f 0900 	movls.w	r9, #0
 802101e:	6023      	str	r3, [r4, #0]
 8021020:	463d      	mov	r5, r7
 8021022:	f04f 0b00 	mov.w	fp, #0
 8021026:	6831      	ldr	r1, [r6, #0]
 8021028:	ab03      	add	r3, sp, #12
 802102a:	7809      	ldrb	r1, [r1, #0]
 802102c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8021030:	2202      	movs	r2, #2
 8021032:	f7df f8f5 	bl	8000220 <memchr>
 8021036:	b328      	cbz	r0, 8021084 <_scanf_i+0xb8>
 8021038:	f1bb 0f01 	cmp.w	fp, #1
 802103c:	d159      	bne.n	80210f2 <_scanf_i+0x126>
 802103e:	6862      	ldr	r2, [r4, #4]
 8021040:	b92a      	cbnz	r2, 802104e <_scanf_i+0x82>
 8021042:	6822      	ldr	r2, [r4, #0]
 8021044:	2308      	movs	r3, #8
 8021046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802104a:	6063      	str	r3, [r4, #4]
 802104c:	6022      	str	r2, [r4, #0]
 802104e:	6822      	ldr	r2, [r4, #0]
 8021050:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8021054:	6022      	str	r2, [r4, #0]
 8021056:	68a2      	ldr	r2, [r4, #8]
 8021058:	1e51      	subs	r1, r2, #1
 802105a:	60a1      	str	r1, [r4, #8]
 802105c:	b192      	cbz	r2, 8021084 <_scanf_i+0xb8>
 802105e:	6832      	ldr	r2, [r6, #0]
 8021060:	1c51      	adds	r1, r2, #1
 8021062:	6031      	str	r1, [r6, #0]
 8021064:	7812      	ldrb	r2, [r2, #0]
 8021066:	f805 2b01 	strb.w	r2, [r5], #1
 802106a:	6872      	ldr	r2, [r6, #4]
 802106c:	3a01      	subs	r2, #1
 802106e:	2a00      	cmp	r2, #0
 8021070:	6072      	str	r2, [r6, #4]
 8021072:	dc07      	bgt.n	8021084 <_scanf_i+0xb8>
 8021074:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8021078:	4631      	mov	r1, r6
 802107a:	4650      	mov	r0, sl
 802107c:	4790      	blx	r2
 802107e:	2800      	cmp	r0, #0
 8021080:	f040 8085 	bne.w	802118e <_scanf_i+0x1c2>
 8021084:	f10b 0b01 	add.w	fp, fp, #1
 8021088:	f1bb 0f03 	cmp.w	fp, #3
 802108c:	d1cb      	bne.n	8021026 <_scanf_i+0x5a>
 802108e:	6863      	ldr	r3, [r4, #4]
 8021090:	b90b      	cbnz	r3, 8021096 <_scanf_i+0xca>
 8021092:	230a      	movs	r3, #10
 8021094:	6063      	str	r3, [r4, #4]
 8021096:	6863      	ldr	r3, [r4, #4]
 8021098:	4945      	ldr	r1, [pc, #276]	; (80211b0 <_scanf_i+0x1e4>)
 802109a:	6960      	ldr	r0, [r4, #20]
 802109c:	1ac9      	subs	r1, r1, r3
 802109e:	f000 f89b 	bl	80211d8 <__sccl>
 80210a2:	f04f 0b00 	mov.w	fp, #0
 80210a6:	68a3      	ldr	r3, [r4, #8]
 80210a8:	6822      	ldr	r2, [r4, #0]
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	d03d      	beq.n	802112a <_scanf_i+0x15e>
 80210ae:	6831      	ldr	r1, [r6, #0]
 80210b0:	6960      	ldr	r0, [r4, #20]
 80210b2:	f891 c000 	ldrb.w	ip, [r1]
 80210b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80210ba:	2800      	cmp	r0, #0
 80210bc:	d035      	beq.n	802112a <_scanf_i+0x15e>
 80210be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80210c2:	d124      	bne.n	802110e <_scanf_i+0x142>
 80210c4:	0510      	lsls	r0, r2, #20
 80210c6:	d522      	bpl.n	802110e <_scanf_i+0x142>
 80210c8:	f10b 0b01 	add.w	fp, fp, #1
 80210cc:	f1b9 0f00 	cmp.w	r9, #0
 80210d0:	d003      	beq.n	80210da <_scanf_i+0x10e>
 80210d2:	3301      	adds	r3, #1
 80210d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80210d8:	60a3      	str	r3, [r4, #8]
 80210da:	6873      	ldr	r3, [r6, #4]
 80210dc:	3b01      	subs	r3, #1
 80210de:	2b00      	cmp	r3, #0
 80210e0:	6073      	str	r3, [r6, #4]
 80210e2:	dd1b      	ble.n	802111c <_scanf_i+0x150>
 80210e4:	6833      	ldr	r3, [r6, #0]
 80210e6:	3301      	adds	r3, #1
 80210e8:	6033      	str	r3, [r6, #0]
 80210ea:	68a3      	ldr	r3, [r4, #8]
 80210ec:	3b01      	subs	r3, #1
 80210ee:	60a3      	str	r3, [r4, #8]
 80210f0:	e7d9      	b.n	80210a6 <_scanf_i+0xda>
 80210f2:	f1bb 0f02 	cmp.w	fp, #2
 80210f6:	d1ae      	bne.n	8021056 <_scanf_i+0x8a>
 80210f8:	6822      	ldr	r2, [r4, #0]
 80210fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80210fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021102:	d1bf      	bne.n	8021084 <_scanf_i+0xb8>
 8021104:	2310      	movs	r3, #16
 8021106:	6063      	str	r3, [r4, #4]
 8021108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802110c:	e7a2      	b.n	8021054 <_scanf_i+0x88>
 802110e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8021112:	6022      	str	r2, [r4, #0]
 8021114:	780b      	ldrb	r3, [r1, #0]
 8021116:	f805 3b01 	strb.w	r3, [r5], #1
 802111a:	e7de      	b.n	80210da <_scanf_i+0x10e>
 802111c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021120:	4631      	mov	r1, r6
 8021122:	4650      	mov	r0, sl
 8021124:	4798      	blx	r3
 8021126:	2800      	cmp	r0, #0
 8021128:	d0df      	beq.n	80210ea <_scanf_i+0x11e>
 802112a:	6823      	ldr	r3, [r4, #0]
 802112c:	05d9      	lsls	r1, r3, #23
 802112e:	d50d      	bpl.n	802114c <_scanf_i+0x180>
 8021130:	42bd      	cmp	r5, r7
 8021132:	d909      	bls.n	8021148 <_scanf_i+0x17c>
 8021134:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8021138:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802113c:	4632      	mov	r2, r6
 802113e:	4650      	mov	r0, sl
 8021140:	4798      	blx	r3
 8021142:	f105 39ff 	add.w	r9, r5, #4294967295
 8021146:	464d      	mov	r5, r9
 8021148:	42bd      	cmp	r5, r7
 802114a:	d028      	beq.n	802119e <_scanf_i+0x1d2>
 802114c:	6822      	ldr	r2, [r4, #0]
 802114e:	f012 0210 	ands.w	r2, r2, #16
 8021152:	d113      	bne.n	802117c <_scanf_i+0x1b0>
 8021154:	702a      	strb	r2, [r5, #0]
 8021156:	6863      	ldr	r3, [r4, #4]
 8021158:	9e01      	ldr	r6, [sp, #4]
 802115a:	4639      	mov	r1, r7
 802115c:	4650      	mov	r0, sl
 802115e:	47b0      	blx	r6
 8021160:	f8d8 3000 	ldr.w	r3, [r8]
 8021164:	6821      	ldr	r1, [r4, #0]
 8021166:	1d1a      	adds	r2, r3, #4
 8021168:	f8c8 2000 	str.w	r2, [r8]
 802116c:	f011 0f20 	tst.w	r1, #32
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	d00f      	beq.n	8021194 <_scanf_i+0x1c8>
 8021174:	6018      	str	r0, [r3, #0]
 8021176:	68e3      	ldr	r3, [r4, #12]
 8021178:	3301      	adds	r3, #1
 802117a:	60e3      	str	r3, [r4, #12]
 802117c:	1bed      	subs	r5, r5, r7
 802117e:	44ab      	add	fp, r5
 8021180:	6925      	ldr	r5, [r4, #16]
 8021182:	445d      	add	r5, fp
 8021184:	6125      	str	r5, [r4, #16]
 8021186:	2000      	movs	r0, #0
 8021188:	b007      	add	sp, #28
 802118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802118e:	f04f 0b00 	mov.w	fp, #0
 8021192:	e7ca      	b.n	802112a <_scanf_i+0x15e>
 8021194:	07ca      	lsls	r2, r1, #31
 8021196:	bf4c      	ite	mi
 8021198:	8018      	strhmi	r0, [r3, #0]
 802119a:	6018      	strpl	r0, [r3, #0]
 802119c:	e7eb      	b.n	8021176 <_scanf_i+0x1aa>
 802119e:	2001      	movs	r0, #1
 80211a0:	e7f2      	b.n	8021188 <_scanf_i+0x1bc>
 80211a2:	bf00      	nop
 80211a4:	08022fb0 	.word	0x08022fb0
 80211a8:	0801dc79 	.word	0x0801dc79
 80211ac:	0801db69 	.word	0x0801db69
 80211b0:	080237ee 	.word	0x080237ee

080211b4 <_read_r>:
 80211b4:	b538      	push	{r3, r4, r5, lr}
 80211b6:	4d07      	ldr	r5, [pc, #28]	; (80211d4 <_read_r+0x20>)
 80211b8:	4604      	mov	r4, r0
 80211ba:	4608      	mov	r0, r1
 80211bc:	4611      	mov	r1, r2
 80211be:	2200      	movs	r2, #0
 80211c0:	602a      	str	r2, [r5, #0]
 80211c2:	461a      	mov	r2, r3
 80211c4:	f7e2 f9da 	bl	800357c <_read>
 80211c8:	1c43      	adds	r3, r0, #1
 80211ca:	d102      	bne.n	80211d2 <_read_r+0x1e>
 80211cc:	682b      	ldr	r3, [r5, #0]
 80211ce:	b103      	cbz	r3, 80211d2 <_read_r+0x1e>
 80211d0:	6023      	str	r3, [r4, #0]
 80211d2:	bd38      	pop	{r3, r4, r5, pc}
 80211d4:	200090d8 	.word	0x200090d8

080211d8 <__sccl>:
 80211d8:	b570      	push	{r4, r5, r6, lr}
 80211da:	780b      	ldrb	r3, [r1, #0]
 80211dc:	4604      	mov	r4, r0
 80211de:	2b5e      	cmp	r3, #94	; 0x5e
 80211e0:	bf0b      	itete	eq
 80211e2:	784b      	ldrbeq	r3, [r1, #1]
 80211e4:	1c48      	addne	r0, r1, #1
 80211e6:	1c88      	addeq	r0, r1, #2
 80211e8:	2200      	movne	r2, #0
 80211ea:	bf08      	it	eq
 80211ec:	2201      	moveq	r2, #1
 80211ee:	1e61      	subs	r1, r4, #1
 80211f0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80211f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80211f8:	42a9      	cmp	r1, r5
 80211fa:	d1fb      	bne.n	80211f4 <__sccl+0x1c>
 80211fc:	b90b      	cbnz	r3, 8021202 <__sccl+0x2a>
 80211fe:	3801      	subs	r0, #1
 8021200:	bd70      	pop	{r4, r5, r6, pc}
 8021202:	f082 0101 	eor.w	r1, r2, #1
 8021206:	54e1      	strb	r1, [r4, r3]
 8021208:	1c42      	adds	r2, r0, #1
 802120a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802120e:	2d2d      	cmp	r5, #45	; 0x2d
 8021210:	f102 36ff 	add.w	r6, r2, #4294967295
 8021214:	4610      	mov	r0, r2
 8021216:	d006      	beq.n	8021226 <__sccl+0x4e>
 8021218:	2d5d      	cmp	r5, #93	; 0x5d
 802121a:	d0f1      	beq.n	8021200 <__sccl+0x28>
 802121c:	b90d      	cbnz	r5, 8021222 <__sccl+0x4a>
 802121e:	4630      	mov	r0, r6
 8021220:	e7ee      	b.n	8021200 <__sccl+0x28>
 8021222:	462b      	mov	r3, r5
 8021224:	e7ef      	b.n	8021206 <__sccl+0x2e>
 8021226:	7816      	ldrb	r6, [r2, #0]
 8021228:	2e5d      	cmp	r6, #93	; 0x5d
 802122a:	d0fa      	beq.n	8021222 <__sccl+0x4a>
 802122c:	42b3      	cmp	r3, r6
 802122e:	dcf8      	bgt.n	8021222 <__sccl+0x4a>
 8021230:	4618      	mov	r0, r3
 8021232:	3001      	adds	r0, #1
 8021234:	4286      	cmp	r6, r0
 8021236:	5421      	strb	r1, [r4, r0]
 8021238:	dcfb      	bgt.n	8021232 <__sccl+0x5a>
 802123a:	43d8      	mvns	r0, r3
 802123c:	4430      	add	r0, r6
 802123e:	1c5d      	adds	r5, r3, #1
 8021240:	42b3      	cmp	r3, r6
 8021242:	bfa8      	it	ge
 8021244:	2000      	movge	r0, #0
 8021246:	182b      	adds	r3, r5, r0
 8021248:	3202      	adds	r2, #2
 802124a:	e7de      	b.n	802120a <__sccl+0x32>

0802124c <__submore>:
 802124c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021250:	460c      	mov	r4, r1
 8021252:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021258:	4299      	cmp	r1, r3
 802125a:	d11d      	bne.n	8021298 <__submore+0x4c>
 802125c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021260:	f7fa fd00 	bl	801bc64 <_malloc_r>
 8021264:	b918      	cbnz	r0, 802126e <__submore+0x22>
 8021266:	f04f 30ff 	mov.w	r0, #4294967295
 802126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021272:	63a3      	str	r3, [r4, #56]	; 0x38
 8021274:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021278:	6360      	str	r0, [r4, #52]	; 0x34
 802127a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802127e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8021282:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021286:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802128a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802128e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021292:	6020      	str	r0, [r4, #0]
 8021294:	2000      	movs	r0, #0
 8021296:	e7e8      	b.n	802126a <__submore+0x1e>
 8021298:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802129a:	0077      	lsls	r7, r6, #1
 802129c:	463a      	mov	r2, r7
 802129e:	f7ff f98f 	bl	80205c0 <_realloc_r>
 80212a2:	4605      	mov	r5, r0
 80212a4:	2800      	cmp	r0, #0
 80212a6:	d0de      	beq.n	8021266 <__submore+0x1a>
 80212a8:	eb00 0806 	add.w	r8, r0, r6
 80212ac:	4601      	mov	r1, r0
 80212ae:	4632      	mov	r2, r6
 80212b0:	4640      	mov	r0, r8
 80212b2:	f7fa f9d9 	bl	801b668 <memcpy>
 80212b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80212ba:	f8c4 8000 	str.w	r8, [r4]
 80212be:	e7e9      	b.n	8021294 <__submore+0x48>

080212c0 <__ascii_wctomb>:
 80212c0:	b149      	cbz	r1, 80212d6 <__ascii_wctomb+0x16>
 80212c2:	2aff      	cmp	r2, #255	; 0xff
 80212c4:	bf85      	ittet	hi
 80212c6:	238a      	movhi	r3, #138	; 0x8a
 80212c8:	6003      	strhi	r3, [r0, #0]
 80212ca:	700a      	strbls	r2, [r1, #0]
 80212cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80212d0:	bf98      	it	ls
 80212d2:	2001      	movls	r0, #1
 80212d4:	4770      	bx	lr
 80212d6:	4608      	mov	r0, r1
 80212d8:	4770      	bx	lr
	...

080212dc <__env_lock>:
 80212dc:	4801      	ldr	r0, [pc, #4]	; (80212e4 <__env_lock+0x8>)
 80212de:	f7fa b9af 	b.w	801b640 <__retarget_lock_acquire_recursive>
 80212e2:	bf00      	nop
 80212e4:	200090ce 	.word	0x200090ce

080212e8 <__env_unlock>:
 80212e8:	4801      	ldr	r0, [pc, #4]	; (80212f0 <__env_unlock+0x8>)
 80212ea:	f7fa b9ab 	b.w	801b644 <__retarget_lock_release_recursive>
 80212ee:	bf00      	nop
 80212f0:	200090ce 	.word	0x200090ce

080212f4 <_fstat_r>:
 80212f4:	b538      	push	{r3, r4, r5, lr}
 80212f6:	4d07      	ldr	r5, [pc, #28]	; (8021314 <_fstat_r+0x20>)
 80212f8:	2300      	movs	r3, #0
 80212fa:	4604      	mov	r4, r0
 80212fc:	4608      	mov	r0, r1
 80212fe:	4611      	mov	r1, r2
 8021300:	602b      	str	r3, [r5, #0]
 8021302:	f7e2 f980 	bl	8003606 <_fstat>
 8021306:	1c43      	adds	r3, r0, #1
 8021308:	d102      	bne.n	8021310 <_fstat_r+0x1c>
 802130a:	682b      	ldr	r3, [r5, #0]
 802130c:	b103      	cbz	r3, 8021310 <_fstat_r+0x1c>
 802130e:	6023      	str	r3, [r4, #0]
 8021310:	bd38      	pop	{r3, r4, r5, pc}
 8021312:	bf00      	nop
 8021314:	200090d8 	.word	0x200090d8

08021318 <_isatty_r>:
 8021318:	b538      	push	{r3, r4, r5, lr}
 802131a:	4d06      	ldr	r5, [pc, #24]	; (8021334 <_isatty_r+0x1c>)
 802131c:	2300      	movs	r3, #0
 802131e:	4604      	mov	r4, r0
 8021320:	4608      	mov	r0, r1
 8021322:	602b      	str	r3, [r5, #0]
 8021324:	f7e2 f97f 	bl	8003626 <_isatty>
 8021328:	1c43      	adds	r3, r0, #1
 802132a:	d102      	bne.n	8021332 <_isatty_r+0x1a>
 802132c:	682b      	ldr	r3, [r5, #0]
 802132e:	b103      	cbz	r3, 8021332 <_isatty_r+0x1a>
 8021330:	6023      	str	r3, [r4, #0]
 8021332:	bd38      	pop	{r3, r4, r5, pc}
 8021334:	200090d8 	.word	0x200090d8

08021338 <_malloc_usable_size_r>:
 8021338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802133c:	1f18      	subs	r0, r3, #4
 802133e:	2b00      	cmp	r3, #0
 8021340:	bfbc      	itt	lt
 8021342:	580b      	ldrlt	r3, [r1, r0]
 8021344:	18c0      	addlt	r0, r0, r3
 8021346:	4770      	bx	lr

08021348 <_init>:
 8021348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802134a:	bf00      	nop
 802134c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802134e:	bc08      	pop	{r3}
 8021350:	469e      	mov	lr, r3
 8021352:	4770      	bx	lr

08021354 <_fini>:
 8021354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021356:	bf00      	nop
 8021358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802135a:	bc08      	pop	{r3}
 802135c:	469e      	mov	lr, r3
 802135e:	4770      	bx	lr
