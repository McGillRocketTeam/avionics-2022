
FC_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ef4c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002368  0801f100  0801f100  0002f100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021468  08021468  000403d4  2**0
                  CONTENTS
  4 .ARM          00000008  08021468  08021468  00031468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021470  08021470  000403d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08021470  08021470  00031470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021478  08021478  00031478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d4  20000000  0802147c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403d4  2**0
                  CONTENTS
 10 .bss          00008a38  200003d4  200003d4  000403d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20008e0c  20008e0c  000403d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007132c  00000000  00000000  00040404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ab71  00000000  00000000  000b1730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003f28  00000000  00000000  000bc2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038304  00000000  00000000  000c01d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048e39  00000000  00000000  000f84d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116a5e  00000000  00000000  0014130d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00257d6b  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00003c08  00000000  00000000  00257dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00012810  00000000  00000000  0025b9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003d4 	.word	0x200003d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801f0e4 	.word	0x0801f0e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003d8 	.word	0x200003d8
 80001ec:	0801f0e4 	.word	0x0801f0e4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f007 f95c 	bl	80082f4 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f007 fa39 	bl	80084e8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f00c fd3e 	bl	800db1e <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f006 f89e 	bl	80071f0 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 fad6 	bl	800666c <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f00c fd27 	bl	800db1e <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f00c fd1b 	bl	800db1e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f00c fd13 	bl	800db1e <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f019 fff7 	bl	801b0f8 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f00c fcf9 	bl	800db1e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f00c fcf1 	bl	800db1e <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f00c fce8 	bl	800db1e <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f005 fa9a 	bl	800668e <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f006 f847 	bl	80071f0 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f005 fab6 	bl	80066da <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f005 f925 	bl	80063cc <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f004 ff01 	bl	8005f90 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f005 f81d 	bl	80061d4 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fecf 	bl	8005f44 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 ffeb 	bl	8006188 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f00c fcae 	bl	800db1e <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005e9c 	.word	0x20005e9c
 80011e0:	0801f100 	.word	0x0801f100
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	20000400 	.word	0x20000400
 80011f0:	0801f118 	.word	0x0801f118
 80011f4:	0801f130 	.word	0x0801f130
 80011f8:	0801f13c 	.word	0x0801f13c
 80011fc:	0801f150 	.word	0x0801f150
 8001200:	0801f158 	.word	0x0801f158
 8001204:	0801f170 	.word	0x0801f170
 8001208:	20000401 	.word	0x20000401
 800120c:	0801f178 	.word	0x0801f178

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f005 f8f6 	bl	8006418 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f018 fee0 	bl	8019ffc <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f005 f9a2 	bl	800658a <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fe2d 	bl	8005eac <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f004 fe20 	bl	8005eac <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f004 fe13 	bl	8005eac <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	200003f0 	.word	0x200003f0

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 f8e2 	bl	800647c <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f005 f8f0 	bl	80064ae <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fe19 	bl	8005f0c <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	200003fe 	.word	0x200003fe

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f005 f89f 	bl	800644a <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f018 fe70 	bl	8019ffc <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f005 f8e7 	bl	80064f4 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fdd5 	bl	8005edc <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f004 fdc8 	bl	8005edc <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f004 fdbb 	bl	8005edc <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	200003f8 	.word	0x200003f8

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f00c fbc0 	bl	800db1e <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f005 ff20 	bl	80071f0 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fcf4 	bl	8005daa <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f00c fba6 	bl	800db1e <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f00c fb9a 	bl	800db1e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f00c fb92 	bl	800db1e <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f019 fe76 	bl	801b0f8 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4620      	mov	r0, r4
 8001428:	f00c fb79 	bl	800db1e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f00c fb71 	bl	800db1e <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f00c fb68 	bl	800db1e <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f004 fcb9 	bl	8005dcc <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f005 fec7 	bl	80071f0 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f004 fcd5 	bl	8005e18 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fbbb 	bl	8005bf8 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f004 fbdb 	bl	8005c44 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f00c fb40 	bl	800db1e <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20005e9c 	.word	0x20005e9c
 80014bc:	0801f190 	.word	0x0801f190
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	2000040a 	.word	0x2000040a
 80014cc:	0801f118 	.word	0x0801f118
 80014d0:	0801f130 	.word	0x0801f130
 80014d4:	0801f13c 	.word	0x0801f13c
 80014d8:	0801f150 	.word	0x0801f150
 80014dc:	0801f158 	.word	0x0801f158
 80014e0:	0801f170 	.word	0x0801f170
 80014e4:	2000040b 	.word	0x2000040b
 80014e8:	0801f1a8 	.word	0x0801f1a8

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f004 fb16 	bl	8005b34 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fbf7 	bl	8005d12 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f004 fb33 	bl	8005b94 <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	20000404 	.word	0x20000404

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fbc0 	bl	8005ce0 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fbf7 	bl	8005d64 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fb21 	bl	8005bc4 <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	20000408 	.word	0x20000408

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f006 fe96 	bl	80082f4 <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f006 ff73 	bl	80084e8 <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b095      	sub	sp, #84	; 0x54
 800163c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f005 fd95 	bl	800716c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f96d 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fce5 	bl	8002014 <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 f9d5 	bl	80019f8 <MX_ADC1_Init>
  MX_I2C2_Init();
 800164e:	f000 fa25 	bl	8001a9c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001652:	f000 fa63 	bl	8001b1c <MX_I2C3_Init>
  MX_SPI2_Init();
 8001656:	f000 fb47 	bl	8001ce8 <MX_SPI2_Init>
  MX_SPI4_Init();
 800165a:	f000 fb7b 	bl	8001d54 <MX_SPI4_Init>
  MX_SPI5_Init();
 800165e:	f000 fbaf 	bl	8001dc0 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001662:	f000 fbe3 	bl	8001e2c <MX_TIM2_Init>
  MX_UART8_Init();
 8001666:	f000 fc57 	bl	8001f18 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166a:	f000 fc7f 	bl	8001f6c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800166e:	f000 fca7 	bl	8001fc0 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001672:	f000 faad 	bl	8001bd0 <MX_RTC_Init>
  //MX_IWDG_Init(); TODO remove
  MX_FATFS_Init();
 8001676:	f00e f937 	bl	800f8e8 <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2102      	movs	r1, #2
 800167e:	4880      	ldr	r0, [pc, #512]	; (8001880 <main+0x248>)
 8001680:	f006 fcc2 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2104      	movs	r1, #4
 8001688:	487d      	ldr	r0, [pc, #500]	; (8001880 <main+0x248>)
 800168a:	f006 fcbd 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2108      	movs	r1, #8
 8001692:	487b      	ldr	r0, [pc, #492]	; (8001880 <main+0x248>)
 8001694:	f006 fcb8 	bl	8008008 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800169e:	4879      	ldr	r0, [pc, #484]	; (8001884 <main+0x24c>)
 80016a0:	f006 fcb2 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016aa:	4876      	ldr	r0, [pc, #472]	; (8001884 <main+0x24c>)
 80016ac:	f006 fcac 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b6:	4873      	ldr	r0, [pc, #460]	; (8001884 <main+0x24c>)
 80016b8:	f006 fca6 	bl	8008008 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016bc:	2201      	movs	r2, #1
 80016be:	2102      	movs	r1, #2
 80016c0:	4870      	ldr	r0, [pc, #448]	; (8001884 <main+0x24c>)
 80016c2:	f006 fca1 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016cc:	486e      	ldr	r0, [pc, #440]	; (8001888 <main+0x250>)
 80016ce:	f006 fc9b 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d8:	486b      	ldr	r0, [pc, #428]	; (8001888 <main+0x250>)
 80016da:	f006 fc95 	bl	8008008 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016de:	2200      	movs	r2, #0
 80016e0:	2104      	movs	r1, #4
 80016e2:	486a      	ldr	r0, [pc, #424]	; (800188c <main+0x254>)
 80016e4:	f006 fc90 	bl	8008008 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	4867      	ldr	r0, [pc, #412]	; (800188c <main+0x254>)
 80016f0:	f006 fc8a 	bl	8008008 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fa:	4862      	ldr	r0, [pc, #392]	; (8001884 <main+0x24c>)
 80016fc:	f006 fc84 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001700:	2200      	movs	r2, #0
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	4862      	ldr	r0, [pc, #392]	; (8001890 <main+0x258>)
 8001706:	f006 fc7f 	bl	8008008 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	4860      	ldr	r0, [pc, #384]	; (8001890 <main+0x258>)
 8001710:	f006 fc7a 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2120      	movs	r1, #32
 8001718:	485d      	ldr	r0, [pc, #372]	; (8001890 <main+0x258>)
 800171a:	f006 fc75 	bl	8008008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2110      	movs	r1, #16
 8001722:	485b      	ldr	r0, [pc, #364]	; (8001890 <main+0x258>)
 8001724:	f006 fc70 	bl	8008008 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	2213      	movs	r2, #19
 800172e:	4959      	ldr	r1, [pc, #356]	; (8001894 <main+0x25c>)
 8001730:	4859      	ldr	r0, [pc, #356]	; (8001898 <main+0x260>)
 8001732:	f00c f9f4 	bl	800db1e <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(&hrtc, DEBUG_UART, SLEEP_TIME); //Put here so we can pass the uart value to the setup
 8001736:	4e58      	ldr	r6, [pc, #352]	; (8001898 <main+0x260>)
 8001738:	23a0      	movs	r3, #160	; 0xa0
 800173a:	930e      	str	r3, [sp, #56]	; 0x38
 800173c:	466d      	mov	r5, sp
 800173e:	f106 040c 	add.w	r4, r6, #12
 8001742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001752:	e885 0003 	stmia.w	r5, {r0, r1}
 8001756:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800175a:	4850      	ldr	r0, [pc, #320]	; (800189c <main+0x264>)
 800175c:	f005 f862 	bl	8006824 <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 8001760:	484d      	ldr	r0, [pc, #308]	; (8001898 <main+0x260>)
 8001762:	f002 f877 	bl	8003854 <MRT_externalFlashSetup>
	   * Watch dog
	   * -Remove the MX_IWDG_Init() that is auto-generated and add it just before the osKernelStart
	   * -Need to be put after RTOS setup
	   */
	#if IWDG_ACTIVE
	MX_IWDG_Init();
 8001766:	f000 fa19 	bl	8001b9c <MX_IWDG_Init>
	#endif

  //RTC
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 800176a:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <main+0x268>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4a4d      	ldr	r2, [pc, #308]	; (80018a4 <main+0x26c>)
 8001770:	7811      	ldrb	r1, [r2, #0]
 8001772:	4a4d      	ldr	r2, [pc, #308]	; (80018a8 <main+0x270>)
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f005 f9d2 	bl	8006b20 <MRT_setRTC>
  HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 800177c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001780:	f005 fd36 	bl	80071f0 <HAL_Delay>
  #if ALARM_A_ACTIVE
    if (wu_flag == 0){
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <main+0x274>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d105      	bne.n	8001798 <main+0x160>
    	MRT_setAlarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 800178c:	2200      	movs	r2, #0
 800178e:	211e      	movs	r1, #30
 8001790:	2004      	movs	r0, #4
 8001792:	f005 f97d 	bl	8006a90 <MRT_setAlarmA>
 8001796:	e004      	b.n	80017a2 <main+0x16a>
    }
    else{
    	MRT_setAlarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	200e      	movs	r0, #14
 800179e:	f005 f977 	bl	8006a90 <MRT_setAlarmA>

	  //**************************************************//
	  //MEMORY THREAD
#if MEMORY_THREAD
	  #if IWDG_ACTIVE
	    HAL_IWDG_Refresh(&hiwdg);
 80017a2:	4843      	ldr	r0, [pc, #268]	; (80018b0 <main+0x278>)
 80017a4:	f007 fd14 	bl	80091d0 <HAL_IWDG_Refresh>
	  #endif

		//SD card
		sd_init_dynamic_filename("FC", "", filename);
 80017a8:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <main+0x27c>)
 80017aa:	4943      	ldr	r1, [pc, #268]	; (80018b8 <main+0x280>)
 80017ac:	4843      	ldr	r0, [pc, #268]	; (80018bc <main+0x284>)
 80017ae:	f005 fab7 	bl	8006d20 <sd_init_dynamic_filename>
	 * -6 DOF IMU (LSM6DSR): 0x6A
	 * -LPS22HH: 0x5C
	 */

	  #if IWDG_ACTIVE
		HAL_IWDG_Refresh(&hiwdg);
 80017b2:	483f      	ldr	r0, [pc, #252]	; (80018b0 <main+0x278>)
 80017b4:	f007 fd0c 	bl	80091d0 <HAL_IWDG_Refresh>
	  #endif
	  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 80017b8:	4c41      	ldr	r4, [pc, #260]	; (80018c0 <main+0x288>)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4a36      	ldr	r2, [pc, #216]	; (8001898 <main+0x260>)
 80017be:	4941      	ldr	r1, [pc, #260]	; (80018c4 <main+0x28c>)
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fc5d 	bl	8001080 <MRT_LSM6DSR_Setup>
 80017c6:	463b      	mov	r3, r7
 80017c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  #if IWDG_ACTIVE
	    HAL_IWDG_Refresh(&hiwdg);
 80017d0:	4837      	ldr	r0, [pc, #220]	; (80018b0 <main+0x278>)
 80017d2:	f007 fcfd 	bl	80091d0 <HAL_IWDG_Refresh>
	  #endif
	  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 80017d6:	4c3c      	ldr	r4, [pc, #240]	; (80018c8 <main+0x290>)
 80017d8:	463b      	mov	r3, r7
 80017da:	4a2f      	ldr	r2, [pc, #188]	; (8001898 <main+0x260>)
 80017dc:	4939      	ldr	r1, [pc, #228]	; (80018c4 <main+0x28c>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fdcc 	bl	800137c <MRT_LPS22HH_Setup>
 80017e4:	463b      	mov	r3, r7
 80017e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  GPS_init(&GPS_UART, &DEBUG_UART);
 80017ee:	492a      	ldr	r1, [pc, #168]	; (8001898 <main+0x260>)
 80017f0:	4836      	ldr	r0, [pc, #216]	; (80018cc <main+0x294>)
 80017f2:	f001 fffb 	bl	80037ec <GPS_init>

	  //**************************************************//

	  //Poll propulsion until launch command sent

	  while((XTEND_ || SRADIO_) && ejection_state_flag == 0 && wu_flag == 0){
 80017f6:	bf00      	nop
		sprintf(sradio_tx_buffer,"LAUNCH COMMAND RECEIVED");
		TxProtocol(sradio_tx_buffer, strlen(sradio_tx_buffer));
	#endif

	  //Update ejection state (saved state in WatchDog thread)
	  if (ejection_state_flag < 1){
 80017f8:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <main+0x298>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <main+0x1d4>
		  ejection_state_flag = 1;
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <main+0x298>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
		  wd_ejection_flag = 1;
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <main+0x29c>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
	  }


//TODO I2C SENSORS SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	  HAL_IWDG_Refresh(&hiwdg);
 800180c:	4828      	ldr	r0, [pc, #160]	; (80018b0 <main+0x278>)
 800180e:	f007 fcdf 	bl	80091d0 <HAL_IWDG_Refresh>
	  buzz_startup_success();
 8001812:	f002 fbff 	bl	8004014 <buzz_startup_success>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001816:	f013 f905 	bl	8014a24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 800181a:	4a2f      	ldr	r2, [pc, #188]	; (80018d8 <main+0x2a0>)
 800181c:	2100      	movs	r1, #0
 800181e:	482f      	ldr	r0, [pc, #188]	; (80018dc <main+0x2a4>)
 8001820:	f013 f94a 	bl	8014ab8 <osThreadNew>
 8001824:	4603      	mov	r3, r0
 8001826:	4a2e      	ldr	r2, [pc, #184]	; (80018e0 <main+0x2a8>)
 8001828:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 800182a:	4a2e      	ldr	r2, [pc, #184]	; (80018e4 <main+0x2ac>)
 800182c:	2100      	movs	r1, #0
 800182e:	482e      	ldr	r0, [pc, #184]	; (80018e8 <main+0x2b0>)
 8001830:	f013 f942 	bl	8014ab8 <osThreadNew>
 8001834:	4603      	mov	r3, r0
 8001836:	4a2d      	ldr	r2, [pc, #180]	; (80018ec <main+0x2b4>)
 8001838:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 800183a:	4a2d      	ldr	r2, [pc, #180]	; (80018f0 <main+0x2b8>)
 800183c:	2100      	movs	r1, #0
 800183e:	482d      	ldr	r0, [pc, #180]	; (80018f4 <main+0x2bc>)
 8001840:	f013 f93a 	bl	8014ab8 <osThreadNew>
 8001844:	4603      	mov	r3, r0
 8001846:	4a2c      	ldr	r2, [pc, #176]	; (80018f8 <main+0x2c0>)
 8001848:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <main+0x2c4>)
 800184c:	2100      	movs	r1, #0
 800184e:	482c      	ldr	r0, [pc, #176]	; (8001900 <main+0x2c8>)
 8001850:	f013 f932 	bl	8014ab8 <osThreadNew>
 8001854:	4603      	mov	r3, r0
 8001856:	4a2b      	ldr	r2, [pc, #172]	; (8001904 <main+0x2cc>)
 8001858:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 800185a:	4a2b      	ldr	r2, [pc, #172]	; (8001908 <main+0x2d0>)
 800185c:	2100      	movs	r1, #0
 800185e:	482b      	ldr	r0, [pc, #172]	; (800190c <main+0x2d4>)
 8001860:	f013 f92a 	bl	8014ab8 <osThreadNew>
 8001864:	4603      	mov	r3, r0
 8001866:	4a2a      	ldr	r2, [pc, #168]	; (8001910 <main+0x2d8>)
 8001868:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 800186a:	4a2a      	ldr	r2, [pc, #168]	; (8001914 <main+0x2dc>)
 800186c:	2100      	movs	r1, #0
 800186e:	482a      	ldr	r0, [pc, #168]	; (8001918 <main+0x2e0>)
 8001870:	f013 f922 	bl	8014ab8 <osThreadNew>
 8001874:	4603      	mov	r3, r0
 8001876:	4a29      	ldr	r2, [pc, #164]	; (800191c <main+0x2e4>)
 8001878:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800187a:	f013 f8f7 	bl	8014a6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800187e:	e7fe      	b.n	800187e <main+0x246>
 8001880:	40020800 	.word	0x40020800
 8001884:	40021800 	.word	0x40021800
 8001888:	40021400 	.word	0x40021400
 800188c:	40021000 	.word	0x40021000
 8001890:	40020c00 	.word	0x40020c00
 8001894:	0801f204 	.word	0x0801f204
 8001898:	20005e58 	.word	0x20005e58
 800189c:	2000676c 	.word	0x2000676c
 80018a0:	20000442 	.word	0x20000442
 80018a4:	20000443 	.word	0x20000443
 80018a8:	20000444 	.word	0x20000444
 80018ac:	200006b9 	.word	0x200006b9
 80018b0:	20006238 	.word	0x20006238
 80018b4:	200062b8 	.word	0x200062b8
 80018b8:	0801f218 	.word	0x0801f218
 80018bc:	0801f21c 	.word	0x0801f21c
 80018c0:	200068b4 	.word	0x200068b4
 80018c4:	20005ea0 	.word	0x20005ea0
 80018c8:	200068a4 	.word	0x200068a4
 80018cc:	2000680c 	.word	0x2000680c
 80018d0:	20000441 	.word	0x20000441
 80018d4:	20000434 	.word	0x20000434
 80018d8:	08020da0 	.word	0x08020da0
 80018dc:	08002339 	.word	0x08002339
 80018e0:	200062b0 	.word	0x200062b0
 80018e4:	08020dc4 	.word	0x08020dc4
 80018e8:	080023fd 	.word	0x080023fd
 80018ec:	20006800 	.word	0x20006800
 80018f0:	08020de8 	.word	0x08020de8
 80018f4:	0800265d 	.word	0x0800265d
 80018f8:	20006808 	.word	0x20006808
 80018fc:	08020e0c 	.word	0x08020e0c
 8001900:	08002679 	.word	0x08002679
 8001904:	200068a0 	.word	0x200068a0
 8001908:	08020e30 	.word	0x08020e30
 800190c:	08002795 	.word	0x08002795
 8001910:	20006790 	.word	0x20006790
 8001914:	08020e54 	.word	0x08020e54
 8001918:	080027a5 	.word	0x080027a5
 800191c:	2000629c 	.word	0x2000629c

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	; 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	2230      	movs	r2, #48	; 0x30
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f018 fb64 	bl	8019ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <SystemClock_Config+0xd0>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <SystemClock_Config+0xd0>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <SystemClock_Config+0xd0>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <SystemClock_Config+0xd4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <SystemClock_Config+0xd4>)
 800196e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <SystemClock_Config+0xd4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001980:	2309      	movs	r3, #9
 8001982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800198a:	2301      	movs	r3, #1
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198e:	2302      	movs	r3, #2
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001998:	2308      	movs	r3, #8
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800199c:	2348      	movs	r3, #72	; 0x48
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019a4:	2303      	movs	r3, #3
 80019a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a8:	f107 0320 	add.w	r3, r7, #32
 80019ac:	4618      	mov	r0, r3
 80019ae:	f008 fde1 	bl	800a574 <HAL_RCC_OscConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019b8:	f001 f808 	bl	80029cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019bc:	230f      	movs	r3, #15
 80019be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f009 f843 	bl	800aa64 <HAL_RCC_ClockConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80019e4:	f000 fff2 	bl	80029cc <Error_Handler>
  }
}
 80019e8:	bf00      	nop
 80019ea:	3750      	adds	r7, #80	; 0x50
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000

080019f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019fe:	463b      	mov	r3, r7
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a0a:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a0c:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <MX_ADC1_Init+0x9c>)
 8001a0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a10:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a38:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <MX_ADC1_Init+0xa0>)
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a56:	480e      	ldr	r0, [pc, #56]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a58:	f005 fbee 	bl	8007238 <HAL_ADC_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a62:	f000 ffb3 	bl	80029cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a66:	2306      	movs	r3, #6
 8001a68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a78:	f005 fdc0 	bl	80075fc <HAL_ADC_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a82:	f000 ffa3 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200066b4 	.word	0x200066b4
 8001a94:	40012000 	.word	0x40012000
 8001a98:	0f000001 	.word	0x0f000001

08001a9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <MX_I2C2_Init+0x78>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <MX_I2C2_Init+0x7c>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001ada:	f006 fac7 	bl	800806c <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ae4:	f000 ff72 	bl	80029cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4809      	ldr	r0, [pc, #36]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001aec:	f007 fab3 	bl	8009056 <HAL_I2CEx_ConfigAnalogFilter>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001af6:	f000 ff69 	bl	80029cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001afa:	2100      	movs	r1, #0
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_I2C2_Init+0x74>)
 8001afe:	f007 fae6 	bl	80090ce <HAL_I2CEx_ConfigDigitalFilter>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b08:	f000 ff60 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20006244 	.word	0x20006244
 8001b14:	40005800 	.word	0x40005800
 8001b18:	000186a0 	.word	0x000186a0

08001b1c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b22:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <MX_I2C3_Init+0x78>)
 8001b24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <MX_I2C3_Init+0x7c>)
 8001b2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b3e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b5a:	f006 fa87 	bl	800806c <HAL_I2C_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b64:	f000 ff32 	bl	80029cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4809      	ldr	r0, [pc, #36]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b6c:	f007 fa73 	bl	8009056 <HAL_I2CEx_ConfigAnalogFilter>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001b76:	f000 ff29 	bl	80029cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_I2C3_Init+0x74>)
 8001b7e:	f007 faa6 	bl	80090ce <HAL_I2CEx_ConfigDigitalFilter>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001b88:	f000 ff20 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20005ea0 	.word	0x20005ea0
 8001b94:	40005c00 	.word	0x40005c00
 8001b98:	000186a0 	.word	0x000186a0

08001b9c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_IWDG_Init+0x2c>)
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <MX_IWDG_Init+0x30>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_IWDG_Init+0x2c>)
 8001ba8:	2204      	movs	r2, #4
 8001baa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_IWDG_Init+0x2c>)
 8001bae:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001bb2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_IWDG_Init+0x2c>)
 8001bb6:	f007 fac9 	bl	800914c <HAL_IWDG_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001bc0:	f000 ff04 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20006238 	.word	0x20006238
 8001bcc:	40003000 	.word	0x40003000

08001bd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b090      	sub	sp, #64	; 0x40
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2228      	movs	r2, #40	; 0x28
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f018 fa03 	bl	8019ffc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001bf8:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <MX_RTC_Init+0x114>)
 8001bfa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bfc:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001c04:	227f      	movs	r2, #127	; 0x7f
 8001c06:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c08:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001c0a:	22ff      	movs	r2, #255	; 0xff
 8001c0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c0e:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c14:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c20:	482f      	ldr	r0, [pc, #188]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001c22:	f009 fb09 	bl	800b238 <HAL_RTC_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001c2c:	f000 fece 	bl	80029cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4619      	mov	r1, r3
 8001c52:	4823      	ldr	r0, [pc, #140]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001c54:	f009 fb81 	bl	800b35a <HAL_RTC_SetTime>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001c5e:	f000 feb5 	bl	80029cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4619      	mov	r1, r3
 8001c82:	4817      	ldr	r0, [pc, #92]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001c84:	f009 fc84 	bl	800b590 <HAL_RTC_SetDate>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001c8e:	f000 fe9d 	bl	80029cc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_RTC_Init+0x110>)
 8001cca:	f009 fd57 	bl	800b77c <HAL_RTC_SetAlarm_IT>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001cd4:	f000 fe7a 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	3740      	adds	r7, #64	; 0x40
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000676c 	.word	0x2000676c
 8001ce4:	40002800 	.word	0x40002800

08001ce8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001cee:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <MX_SPI2_Init+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d34:	220a      	movs	r2, #10
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d38:	4804      	ldr	r0, [pc, #16]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d3a:	f00a f84f 	bl	800bddc <HAL_SPI_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d44:	f000 fe42 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20005ef4 	.word	0x20005ef4
 8001d50:	40003800 	.word	0x40003800

08001d54 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <MX_SPI4_Init+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d64:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d84:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001da0:	220a      	movs	r2, #10
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_SPI4_Init+0x64>)
 8001da6:	f00a f819 	bl	800bddc <HAL_SPI_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001db0:	f000 fe0c 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20006710 	.word	0x20006710
 8001dbc:	40013400 	.word	0x40013400

08001dc0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <MX_SPI5_Init+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001e0c:	220a      	movs	r2, #10
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <MX_SPI5_Init+0x64>)
 8001e12:	f009 ffe3 	bl	800bddc <HAL_SPI_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e1c:	f000 fdd6 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20005f50 	.word	0x20005f50
 8001e28:	40015000 	.word	0x40015000

08001e2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	; 0x38
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
 8001e58:	615a      	str	r2, [r3, #20]
 8001e5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001e66:	2259      	movs	r2, #89	; 0x59
 8001e68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8001e70:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001e72:	f240 128f 	movw	r2, #399	; 0x18f
 8001e76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e84:	4823      	ldr	r0, [pc, #140]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001e86:	f00a fd51 	bl	800c92c <HAL_TIM_Base_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e90:	f000 fd9c 	bl	80029cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	481c      	ldr	r0, [pc, #112]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001ea2:	f00b f95f 	bl	800d164 <HAL_TIM_ConfigClockSource>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001eac:	f000 fd8e 	bl	80029cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001eb0:	4818      	ldr	r0, [pc, #96]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001eb2:	f00a fdfb 	bl	800caac <HAL_TIM_PWM_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ebc:	f000 fd86 	bl	80029cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ec8:	f107 0320 	add.w	r3, r7, #32
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4811      	ldr	r0, [pc, #68]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001ed0:	f00b fd48 	bl	800d964 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001eda:	f000 fd77 	bl	80029cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ede:	2360      	movs	r3, #96	; 0x60
 8001ee0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001ee2:	2364      	movs	r3, #100	; 0x64
 8001ee4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4807      	ldr	r0, [pc, #28]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001ef6:	f00b f873 	bl	800cfe0 <HAL_TIM_PWM_ConfigChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f00:	f000 fd64 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <MX_TIM2_Init+0xe8>)
 8001f06:	f000 ff81 	bl	8002e0c <HAL_TIM_MspPostInit>

}
 8001f0a:	bf00      	nop
 8001f0c:	3738      	adds	r7, #56	; 0x38
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20006858 	.word	0x20006858

08001f18 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_UART8_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <MX_UART8_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <MX_UART8_Init+0x4c>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_UART8_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_UART8_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <MX_UART8_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_UART8_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <MX_UART8_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_UART8_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_UART8_Init+0x4c>)
 8001f50:	f00b fd98 	bl	800da84 <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001f5a:	f000 fd37 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20005e58 	.word	0x20005e58
 8001f68:	40007c00 	.word	0x40007c00

08001f6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <MX_USART3_UART_Init+0x50>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001fa4:	f00b fd6e 	bl	800da84 <HAL_UART_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fae:	f000 fd0d 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20005fa8 	.word	0x20005fa8
 8001fbc:	40004800 	.word	0x40004800

08001fc0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_USART6_UART_Init+0x50>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fd0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001ff8:	f00b fd44 	bl	800da84 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002002:	f000 fce3 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000680c 	.word	0x2000680c
 8002010:	40011400 	.word	0x40011400

08002014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08e      	sub	sp, #56	; 0x38
 8002018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
 800202e:	4bb5      	ldr	r3, [pc, #724]	; (8002304 <MX_GPIO_Init+0x2f0>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4ab4      	ldr	r2, [pc, #720]	; (8002304 <MX_GPIO_Init+0x2f0>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4bb2      	ldr	r3, [pc, #712]	; (8002304 <MX_GPIO_Init+0x2f0>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	623b      	str	r3, [r7, #32]
 8002044:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	4bae      	ldr	r3, [pc, #696]	; (8002304 <MX_GPIO_Init+0x2f0>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4aad      	ldr	r2, [pc, #692]	; (8002304 <MX_GPIO_Init+0x2f0>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4bab      	ldr	r3, [pc, #684]	; (8002304 <MX_GPIO_Init+0x2f0>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	4ba7      	ldr	r3, [pc, #668]	; (8002304 <MX_GPIO_Init+0x2f0>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4aa6      	ldr	r2, [pc, #664]	; (8002304 <MX_GPIO_Init+0x2f0>)
 800206c:	f043 0320 	orr.w	r3, r3, #32
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4ba4      	ldr	r3, [pc, #656]	; (8002304 <MX_GPIO_Init+0x2f0>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	4ba0      	ldr	r3, [pc, #640]	; (8002304 <MX_GPIO_Init+0x2f0>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a9f      	ldr	r2, [pc, #636]	; (8002304 <MX_GPIO_Init+0x2f0>)
 8002088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b9d      	ldr	r3, [pc, #628]	; (8002304 <MX_GPIO_Init+0x2f0>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b99      	ldr	r3, [pc, #612]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a98      	ldr	r2, [pc, #608]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b96      	ldr	r3, [pc, #600]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b92      	ldr	r3, [pc, #584]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a91      	ldr	r2, [pc, #580]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b8f      	ldr	r3, [pc, #572]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	4b8b      	ldr	r3, [pc, #556]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a8a      	ldr	r2, [pc, #552]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	4b84      	ldr	r3, [pc, #528]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a83      	ldr	r2, [pc, #524]	; (8002304 <MX_GPIO_Init+0x2f0>)
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b81      	ldr	r3, [pc, #516]	; (8002304 <MX_GPIO_Init+0x2f0>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	f248 4184 	movw	r1, #33924	; 0x8484
 8002110:	487d      	ldr	r0, [pc, #500]	; (8002308 <MX_GPIO_Init+0x2f4>)
 8002112:	f005 ff79 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800211c:	487b      	ldr	r0, [pc, #492]	; (800230c <MX_GPIO_Init+0x2f8>)
 800211e:	f005 ff73 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002128:	4879      	ldr	r0, [pc, #484]	; (8002310 <MX_GPIO_Init+0x2fc>)
 800212a:	f005 ff6d 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	2108      	movs	r1, #8
 8002132:	4878      	ldr	r0, [pc, #480]	; (8002314 <MX_GPIO_Init+0x300>)
 8002134:	f005 ff68 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002138:	2200      	movs	r2, #0
 800213a:	f645 2126 	movw	r1, #23078	; 0x5a26
 800213e:	4876      	ldr	r0, [pc, #472]	; (8002318 <MX_GPIO_Init+0x304>)
 8002140:	f005 ff62 	bl	8008008 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800214a:	4874      	ldr	r0, [pc, #464]	; (800231c <MX_GPIO_Init+0x308>)
 800214c:	f005 ff5c 	bl	8008008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002150:	2200      	movs	r2, #0
 8002152:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8002156:	4872      	ldr	r0, [pc, #456]	; (8002320 <MX_GPIO_Init+0x30c>)
 8002158:	f005 ff56 	bl	8008008 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 800215c:	f248 4384 	movw	r3, #33924	; 0x8484
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002162:	2301      	movs	r3, #1
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800216e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002172:	4619      	mov	r1, r3
 8002174:	4864      	ldr	r0, [pc, #400]	; (8002308 <MX_GPIO_Init+0x2f4>)
 8002176:	f005 fd83 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800217a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800218c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002190:	4619      	mov	r1, r3
 8002192:	485e      	ldr	r0, [pc, #376]	; (800230c <MX_GPIO_Init+0x2f8>)
 8002194:	f005 fd74 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002198:	2301      	movs	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800219c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	4619      	mov	r1, r3
 80021ac:	4858      	ldr	r0, [pc, #352]	; (8002310 <MX_GPIO_Init+0x2fc>)
 80021ae:	f005 fd67 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 80021b2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c8:	4619      	mov	r1, r3
 80021ca:	4851      	ldr	r0, [pc, #324]	; (8002310 <MX_GPIO_Init+0x2fc>)
 80021cc:	f005 fd58 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 80021d0:	2308      	movs	r3, #8
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80021e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e4:	4619      	mov	r1, r3
 80021e6:	484b      	ldr	r0, [pc, #300]	; (8002314 <MX_GPIO_Init+0x300>)
 80021e8:	f005 fd4a 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80021ec:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	4843      	ldr	r0, [pc, #268]	; (8002310 <MX_GPIO_Init+0x2fc>)
 8002202:	f005 fd3d 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8002206:	2302      	movs	r3, #2
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220a:	2300      	movs	r3, #0
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002216:	4619      	mov	r1, r3
 8002218:	4840      	ldr	r0, [pc, #256]	; (800231c <MX_GPIO_Init+0x308>)
 800221a:	f005 fd31 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 800221e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 800222c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002230:	4619      	mov	r1, r3
 8002232:	4836      	ldr	r0, [pc, #216]	; (800230c <MX_GPIO_Init+0x2f8>)
 8002234:	f005 fd24 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8002238:	f242 4319 	movw	r3, #9241	; 0x2419
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	4619      	mov	r1, r3
 800224c:	4832      	ldr	r0, [pc, #200]	; (8002318 <MX_GPIO_Init+0x304>)
 800224e:	f005 fd17 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002252:	f645 2326 	movw	r3, #23078	; 0x5a26
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002268:	4619      	mov	r1, r3
 800226a:	482b      	ldr	r0, [pc, #172]	; (8002318 <MX_GPIO_Init+0x304>)
 800226c:	f005 fd08 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002270:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002276:	2300      	movs	r3, #0
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	4619      	mov	r1, r3
 8002284:	4820      	ldr	r0, [pc, #128]	; (8002308 <MX_GPIO_Init+0x2f4>)
 8002286:	f005 fcfb 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SX_CS_Pin PB8 POWER_ON_EXT_LED_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 800228a:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002290:	2301      	movs	r3, #1
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a0:	4619      	mov	r1, r3
 80022a2:	481e      	ldr	r0, [pc, #120]	; (800231c <MX_GPIO_Init+0x308>)
 80022a4:	f005 fcec 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80022a8:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022be:	4619      	mov	r1, r3
 80022c0:	4817      	ldr	r0, [pc, #92]	; (8002320 <MX_GPIO_Init+0x30c>)
 80022c2:	f005 fcdd 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 80022c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d8:	4619      	mov	r1, r3
 80022da:	4811      	ldr	r0, [pc, #68]	; (8002320 <MX_GPIO_Init+0x30c>)
 80022dc:	f005 fcd0 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80022e0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4808      	ldr	r0, [pc, #32]	; (8002318 <MX_GPIO_Init+0x304>)
 80022f8:	f005 fcc2 	bl	8007c80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2105      	movs	r1, #5
 8002300:	2006      	movs	r0, #6
 8002302:	e00f      	b.n	8002324 <MX_GPIO_Init+0x310>
 8002304:	40023800 	.word	0x40023800
 8002308:	40021000 	.word	0x40021000
 800230c:	40021400 	.word	0x40021400
 8002310:	40020800 	.word	0x40020800
 8002314:	40020000 	.word	0x40020000
 8002318:	40021800 	.word	0x40021800
 800231c:	40020400 	.word	0x40020400
 8002320:	40020c00 	.word	0x40020c00
 8002324:	f005 fc74 	bl	8007c10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002328:	2006      	movs	r0, #6
 800232a:	f005 fc8d 	bl	8007c48 <HAL_NVIC_EnableIRQ>

}
 800232e:	bf00      	nop
 8002330:	3738      	adds	r7, #56	; 0x38
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop

08002338 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8002338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800233c:	b08a      	sub	sp, #40	; 0x28
 800233e:	af06      	add	r7, sp, #24
 8002340:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002342:	f016 f833 	bl	80183ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 8002346:	f012 fc49 	bl	8014bdc <osThreadGetId>
 800234a:	4603      	mov	r3, r0
 800234c:	4a22      	ldr	r2, [pc, #136]	; (80023d8 <StartMemory0+0xa0>)
 800234e:	6013      	str	r3, [r2, #0]

	#if !MEMORY_THREAD
    osThreadExit();
	#endif

	uint8_t counter = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]

	  /* Infinite loop */
	  for(;;)
	  {
		  //Write data to sd and flash
		  if(counter==1) sd_open_file(&filename);
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d102      	bne.n	8002360 <StartMemory0+0x28>
 800235a:	4820      	ldr	r0, [pc, #128]	; (80023dc <StartMemory0+0xa4>)
 800235c:	f004 fd5e 	bl	8006e1c <sd_open_file>
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 8002360:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <StartMemory0+0xa8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f8ff 	bl	8000568 <__aeabi_f2d>
 800236a:	4682      	mov	sl, r0
 800236c:	468b      	mov	fp, r1
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <StartMemory0+0xac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8f8 	bl	8000568 <__aeabi_f2d>
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <StartMemory0+0xb0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8f1 	bl	8000568 <__aeabi_f2d>
 8002386:	4680      	mov	r8, r0
 8002388:	4689      	mov	r9, r1
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <StartMemory0+0xb4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8ea 	bl	8000568 <__aeabi_f2d>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800239c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023a0:	e9cd 4500 	strd	r4, r5, [sp]
 80023a4:	4652      	mov	r2, sl
 80023a6:	465b      	mov	r3, fp
 80023a8:	4911      	ldr	r1, [pc, #68]	; (80023f0 <StartMemory0+0xb8>)
 80023aa:	4812      	ldr	r0, [pc, #72]	; (80023f4 <StartMemory0+0xbc>)
 80023ac:	f018 fea4 	bl	801b0f8 <siprintf>
		  sd_write(&fil, writeBuf);
 80023b0:	4910      	ldr	r1, [pc, #64]	; (80023f4 <StartMemory0+0xbc>)
 80023b2:	4811      	ldr	r0, [pc, #68]	; (80023f8 <StartMemory0+0xc0>)
 80023b4:	f004 fd4a 	bl	8006e4c <sd_write>
		  if (counter == 50) {
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b32      	cmp	r3, #50	; 0x32
 80023bc:	d104      	bne.n	80023c8 <StartMemory0+0x90>
			  f_close(&fil);
 80023be:	480e      	ldr	r0, [pc, #56]	; (80023f8 <StartMemory0+0xc0>)
 80023c0:	f011 fee0 	bl	8014184 <f_close>
			  counter = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
		  }
		  counter++;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	3301      	adds	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]

		  osDelay(1000/DATA_FREQ);
 80023ce:	2064      	movs	r0, #100	; 0x64
 80023d0:	f012 fc73 	bl	8014cba <osDelay>
	  {
 80023d4:	e7be      	b.n	8002354 <StartMemory0+0x1c>
 80023d6:	bf00      	nop
 80023d8:	20005ff4 	.word	0x20005ff4
 80023dc:	200062b8 	.word	0x200062b8
 80023e0:	200062a4 	.word	0x200062a4
 80023e4:	20006af8 	.word	0x20006af8
 80023e8:	200062ac 	.word	0x200062ac
 80023ec:	20006af4 	.word	0x20006af4
 80023f0:	0801f220 	.word	0x0801f220
 80023f4:	200062cc 	.word	0x200062cc
 80023f8:	200068c4 	.word	0x200068c4

080023fc <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadID[1]=osThreadGetId();
 8002404:	f012 fbea 	bl	8014bdc <osThreadGetId>
 8002408:	4603      	mov	r3, r0
 800240a:	4a86      	ldr	r2, [pc, #536]	; (8002624 <StartEjection1+0x228>)
 800240c:	6053      	str	r3, [r2, #4]

	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	if (ejection_state_flag >= 4)  osThreadExit(); //Ground reached
 800240e:	4b86      	ldr	r3, [pc, #536]	; (8002628 <StartEjection1+0x22c>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d901      	bls.n	800241a <StartEjection1+0x1e>
 8002416:	f012 fc4a 	bl	8014cae <osThreadExit>
	if (wu_flag) osThreadExit(); //WHEN WAKING UP
 800241a:	4b84      	ldr	r3, [pc, #528]	; (800262c <StartEjection1+0x230>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <StartEjection1+0x2a>
 8002422:	f012 fc44 	bl	8014cae <osThreadExit>

	osDelay(5000); //Let the LPS "warm up" to have a valid pressure_hPa
 8002426:	f241 3088 	movw	r0, #5000	; 0x1388
 800242a:	f012 fc46 	bl	8014cba <osDelay>

	  /* Infinite loop */
	  for(;;)
	  {
		  altitude_m = MRT_getAltitude(pressure_hPa);
 800242e:	4b80      	ldr	r3, [pc, #512]	; (8002630 <StartEjection1+0x234>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	eeb0 0a67 	vmov.f32	s0, s15
 8002438:	f001 fd42 	bl	8003ec0 <MRT_getAltitude>
 800243c:	eef0 7a40 	vmov.f32	s15, s0
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <StartEjection1+0x238>)
 8002442:	edc3 7a00 	vstr	s15, [r3]

		  if (MIN_APOGEE <= altitude_m || ejection_state_flag >= 2){
 8002446:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <StartEjection1+0x238>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002638 <StartEjection1+0x23c>
 8002450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	da04      	bge.n	8002464 <StartEjection1+0x68>
 800245a:	4b73      	ldr	r3, [pc, #460]	; (8002628 <StartEjection1+0x22c>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	f240 80db 	bls.w	800261a <StartEjection1+0x21e>

			  if (ejection_state_flag < 2){
 8002464:	4b70      	ldr	r3, [pc, #448]	; (8002628 <StartEjection1+0x22c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d839      	bhi.n	80024e0 <StartEjection1+0xe4>

				  //Update state (saved state in WatchDog thread)
				  ejection_state_flag = 2;
 800246c:	4b6e      	ldr	r3, [pc, #440]	; (8002628 <StartEjection1+0x22c>)
 800246e:	2202      	movs	r2, #2
 8002470:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 8002472:	4b72      	ldr	r3, [pc, #456]	; (800263c <StartEjection1+0x240>)
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]

				  HAL_UART_Transmit(&DEBUG_UART, "Eject Drogue\r\n", 15, HAL_MAX_DELAY);
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
 800247c:	220f      	movs	r2, #15
 800247e:	4970      	ldr	r1, [pc, #448]	; (8002640 <StartEjection1+0x244>)
 8002480:	4870      	ldr	r0, [pc, #448]	; (8002644 <StartEjection1+0x248>)
 8002482:	f00b fb4c 	bl	800db1e <HAL_UART_Transmit>

				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8002486:	e005      	b.n	8002494 <StartEjection1+0x98>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800248e:	486e      	ldr	r0, [pc, #440]	; (8002648 <StartEjection1+0x24c>)
 8002490:	f005 fdba 	bl	8008008 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8002494:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002498:	486b      	ldr	r0, [pc, #428]	; (8002648 <StartEjection1+0x24c>)
 800249a:	f005 fd9d 	bl	8007fd8 <HAL_GPIO_ReadPin>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f1      	beq.n	8002488 <StartEjection1+0x8c>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 80024a4:	e005      	b.n	80024b2 <StartEjection1+0xb6>
					  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 80024a6:	2201      	movs	r2, #1
 80024a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ac:	4866      	ldr	r0, [pc, #408]	; (8002648 <StartEjection1+0x24c>)
 80024ae:	f005 fdab 	bl	8008008 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 80024b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024b6:	4864      	ldr	r0, [pc, #400]	; (8002648 <StartEjection1+0x24c>)
 80024b8:	f005 fd8e 	bl	8007fd8 <HAL_GPIO_ReadPin>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f1      	beq.n	80024a6 <StartEjection1+0xaa>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80024c2:	e005      	b.n	80024d0 <StartEjection1+0xd4>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024ca:	485f      	ldr	r0, [pc, #380]	; (8002648 <StartEjection1+0x24c>)
 80024cc:	f005 fd9c 	bl	8008008 <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80024d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024d4:	485c      	ldr	r0, [pc, #368]	; (8002648 <StartEjection1+0x24c>)
 80024d6:	f005 fd7f 	bl	8007fd8 <HAL_GPIO_ReadPin>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f1      	bne.n	80024c4 <StartEjection1+0xc8>
				  }
			  }

			  for(;;){

				  altitude_m = MRT_getAltitude(pressure_hPa);
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <StartEjection1+0x234>)
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ea:	f001 fce9 	bl	8003ec0 <MRT_getAltitude>
 80024ee:	eef0 7a40 	vmov.f32	s15, s0
 80024f2:	4b50      	ldr	r3, [pc, #320]	; (8002634 <StartEjection1+0x238>)
 80024f4:	edc3 7a00 	vstr	s15, [r3]

				  //We reached main deployment altitude
				  if ((altitude_m>DEPLOY_ALT_MIN && altitude_m<DEPLOY_ALT_MAX) || ejection_state_flag >= 3){
 80024f8:	4b4e      	ldr	r3, [pc, #312]	; (8002634 <StartEjection1+0x238>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800264c <StartEjection1+0x250>
 8002502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	dd09      	ble.n	8002520 <StartEjection1+0x124>
 800250c:	4b49      	ldr	r3, [pc, #292]	; (8002634 <StartEjection1+0x238>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002650 <StartEjection1+0x254>
 8002516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251e:	d403      	bmi.n	8002528 <StartEjection1+0x12c>
 8002520:	4b41      	ldr	r3, [pc, #260]	; (8002628 <StartEjection1+0x22c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d974      	bls.n	8002612 <StartEjection1+0x216>


					  if (ejection_state_flag < 3){
 8002528:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <StartEjection1+0x22c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d839      	bhi.n	80025a4 <StartEjection1+0x1a8>

						  //Update state (saved state in WatchDog thread)
						  ejection_state_flag = 3;
 8002530:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <StartEjection1+0x22c>)
 8002532:	2203      	movs	r2, #3
 8002534:	701a      	strb	r2, [r3, #0]
						  wd_ejection_flag = 1;
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <StartEjection1+0x240>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]

						  HAL_UART_Transmit(&DEBUG_UART, "Eject Main\r\n", 13, HAL_MAX_DELAY);
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	220d      	movs	r2, #13
 8002542:	4944      	ldr	r1, [pc, #272]	; (8002654 <StartEjection1+0x258>)
 8002544:	483f      	ldr	r0, [pc, #252]	; (8002644 <StartEjection1+0x248>)
 8002546:	f00b faea 	bl	800db1e <HAL_UART_Transmit>

						  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800254a:	e005      	b.n	8002558 <StartEjection1+0x15c>
							  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800254c:	2201      	movs	r2, #1
 800254e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002552:	483d      	ldr	r0, [pc, #244]	; (8002648 <StartEjection1+0x24c>)
 8002554:	f005 fd58 	bl	8008008 <HAL_GPIO_WritePin>
						  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8002558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800255c:	483a      	ldr	r0, [pc, #232]	; (8002648 <StartEjection1+0x24c>)
 800255e:	f005 fd3b 	bl	8007fd8 <HAL_GPIO_ReadPin>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f1      	beq.n	800254c <StartEjection1+0x150>
						  }
						  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8002568:	e005      	b.n	8002576 <StartEjection1+0x17a>
							  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 800256a:	2201      	movs	r2, #1
 800256c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002570:	4835      	ldr	r0, [pc, #212]	; (8002648 <StartEjection1+0x24c>)
 8002572:	f005 fd49 	bl	8008008 <HAL_GPIO_WritePin>
						  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8002576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800257a:	4833      	ldr	r0, [pc, #204]	; (8002648 <StartEjection1+0x24c>)
 800257c:	f005 fd2c 	bl	8007fd8 <HAL_GPIO_ReadPin>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f1      	beq.n	800256a <StartEjection1+0x16e>
						  }
						  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8002586:	e005      	b.n	8002594 <StartEjection1+0x198>
							  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8002588:	2200      	movs	r2, #0
 800258a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800258e:	482e      	ldr	r0, [pc, #184]	; (8002648 <StartEjection1+0x24c>)
 8002590:	f005 fd3a 	bl	8008008 <HAL_GPIO_WritePin>
						  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8002594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002598:	482b      	ldr	r0, [pc, #172]	; (8002648 <StartEjection1+0x24c>)
 800259a:	f005 fd1d 	bl	8007fd8 <HAL_GPIO_ReadPin>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f1      	bne.n	8002588 <StartEjection1+0x18c>
						  }
					  }

					  uint8_t prev_altitude = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
					  uint8_t cur_altitude = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	737b      	strb	r3, [r7, #13]
					  uint8_t counter = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73bb      	strb	r3, [r7, #14]
					  while(counter < 5){
 80025b0:	e01d      	b.n	80025ee <StartEjection1+0x1f2>
						  cur_altitude = MRT_getAltitude(pressure_hPa);
 80025b2:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <StartEjection1+0x234>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	eeb0 0a67 	vmov.f32	s0, s15
 80025bc:	f001 fc80 	bl	8003ec0 <MRT_getAltitude>
 80025c0:	eef0 7a40 	vmov.f32	s15, s0
 80025c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c8:	edc7 7a00 	vstr	s15, [r7]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	737b      	strb	r3, [r7, #13]
						  if (cur_altitude - prev_altitude == 0){ //TODO might need a bigger range
 80025d0:	7b7a      	ldrb	r2, [r7, #13]
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d103      	bne.n	80025e0 <StartEjection1+0x1e4>
							  counter++;
 80025d8:	7bbb      	ldrb	r3, [r7, #14]
 80025da:	3301      	adds	r3, #1
 80025dc:	73bb      	strb	r3, [r7, #14]
 80025de:	e001      	b.n	80025e4 <StartEjection1+0x1e8>
						  }
						  else{
							  counter = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73bb      	strb	r3, [r7, #14]
						  }
						  prev_altitude = cur_altitude;
 80025e4:	7b7b      	ldrb	r3, [r7, #13]
 80025e6:	73fb      	strb	r3, [r7, #15]
						  osDelay(100);
 80025e8:	2064      	movs	r0, #100	; 0x64
 80025ea:	f012 fb66 	bl	8014cba <osDelay>
					  while(counter < 5){
 80025ee:	7bbb      	ldrb	r3, [r7, #14]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d9de      	bls.n	80025b2 <StartEjection1+0x1b6>
					  }

					  //Update state (saved state in WatchDog thread)
					  ejection_state_flag = 4;
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <StartEjection1+0x22c>)
 80025f6:	2204      	movs	r2, #4
 80025f8:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1;
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <StartEjection1+0x240>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]

					  HAL_UART_Transmit(&DEBUG_UART, "Ground Level Reached\r\n", 22, HAL_MAX_DELAY);
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
 8002604:	2216      	movs	r2, #22
 8002606:	4914      	ldr	r1, [pc, #80]	; (8002658 <StartEjection1+0x25c>)
 8002608:	480e      	ldr	r0, [pc, #56]	; (8002644 <StartEjection1+0x248>)
 800260a:	f00b fa88 	bl	800db1e <HAL_UART_Transmit>
					  osThreadExit();
 800260e:	f012 fb4e 	bl	8014cae <osThreadExit>

				  }

				  osDelay(100);
 8002612:	2064      	movs	r0, #100	; 0x64
 8002614:	f012 fb51 	bl	8014cba <osDelay>
				  altitude_m = MRT_getAltitude(pressure_hPa);
 8002618:	e762      	b.n	80024e0 <StartEjection1+0xe4>
			  }
		  }

	    osDelay(100);
 800261a:	2064      	movs	r0, #100	; 0x64
 800261c:	f012 fb4d 	bl	8014cba <osDelay>
		  altitude_m = MRT_getAltitude(pressure_hPa);
 8002620:	e705      	b.n	800242e <StartEjection1+0x32>
 8002622:	bf00      	nop
 8002624:	20005ff4 	.word	0x20005ff4
 8002628:	20000441 	.word	0x20000441
 800262c:	200006b9 	.word	0x200006b9
 8002630:	2000040c 	.word	0x2000040c
 8002634:	20000430 	.word	0x20000430
 8002638:	42f00000 	.word	0x42f00000
 800263c:	20000434 	.word	0x20000434
 8002640:	0801f238 	.word	0x0801f238
 8002644:	20005e58 	.word	0x20005e58
 8002648:	40021800 	.word	0x40021800
 800264c:	42700000 	.word	0x42700000
 8002650:	42820000 	.word	0x42820000
 8002654:	0801f248 	.word	0x0801f248
 8002658:	0801f258 	.word	0x0801f258

0800265c <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 8002664:	f012 faba 	bl	8014bdc <osThreadGetId>
 8002668:	4603      	mov	r3, r0
 800266a:	4a02      	ldr	r2, [pc, #8]	; (8002674 <StartTelemetry2+0x18>)
 800266c:	6093      	str	r3, [r2, #8]

	#if !TELEMETRY_THREAD
	osThreadExit();
 800266e:	f012 fb1e 	bl	8014cae <osThreadExit>
 8002672:	bf00      	nop
 8002674:	20005ff4 	.word	0x20005ff4

08002678 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 8002680:	f012 faac 	bl	8014bdc <osThreadGetId>
 8002684:	4603      	mov	r3, r0
 8002686:	4a31      	ldr	r2, [pc, #196]	; (800274c <StartSensors3+0xd4>)
 8002688:	60d3      	str	r3, [r2, #12]

	#if !SENSORS_THREAD
	osThreadExit();
	#endif

	uint8_t counter = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 800268e:	2201      	movs	r2, #1
 8002690:	2102      	movs	r1, #2
 8002692:	482f      	ldr	r0, [pc, #188]	; (8002750 <StartSensors3+0xd8>)
 8002694:	f005 fcb8 	bl	8008008 <HAL_GPIO_WritePin>

	  if (counter == SENSORS_POLL_FREQ_DIVIDER){
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b0a      	cmp	r3, #10
 800269c:	d12b      	bne.n	80026f6 <StartSensors3+0x7e>
		  counter=0;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]

		  //GPS
		  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 80026a2:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <StartSensors3+0xdc>)
 80026a4:	492c      	ldr	r1, [pc, #176]	; (8002758 <StartSensors3+0xe0>)
 80026a6:	482d      	ldr	r0, [pc, #180]	; (800275c <StartSensors3+0xe4>)
 80026a8:	f000 fe3e 	bl	8003328 <GPS_Poll>

	  	  //LSM6DSR
	  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80026ac:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <StartSensors3+0xe8>)
 80026ae:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <StartSensors3+0xec>)
 80026b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026b2:	f7fe fdad 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
	  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80026b6:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <StartSensors3+0xe8>)
 80026b8:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <StartSensors3+0xf0>)
 80026ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80026bc:	f7fe fe18 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
		  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <StartSensors3+0xe8>)
 80026c2:	4b2a      	ldr	r3, [pc, #168]	; (800276c <StartSensors3+0xf4>)
 80026c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80026c6:	f7fe fde9 	bl	800129c <MRT_LSM6DSR_getTemperature>

		  //LPS22HH
		  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 80026ca:	4a29      	ldr	r2, [pc, #164]	; (8002770 <StartSensors3+0xf8>)
 80026cc:	4b29      	ldr	r3, [pc, #164]	; (8002774 <StartSensors3+0xfc>)
 80026ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80026d0:	f7fe ff38 	bl	8001544 <MRT_LPS22HH_getTemperature>
		  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 80026d4:	4a26      	ldr	r2, [pc, #152]	; (8002770 <StartSensors3+0xf8>)
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <StartSensors3+0x100>)
 80026d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80026da:	f7fe ff07 	bl	80014ec <MRT_LPS22HH_getPressure>
		  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <StartSensors3+0x100>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eeb0 0a67 	vmov.f32	s0, s15
 80026e8:	f001 fbea 	bl	8003ec0 <MRT_getAltitude>
 80026ec:	eef0 7a40 	vmov.f32	s15, s0
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <StartSensors3+0x104>)
 80026f2:	edc3 7a00 	vstr	s15, [r3]
	  }
	  counter++;
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	3301      	adds	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]


	  if(apogee_flag == 0){
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <StartSensors3+0x108>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d111      	bne.n	8002728 <StartSensors3+0xb0>
		  //Poll propulsion sensors

		  //Thermocouple
		  Max31855_Read_Temp();
 8002704:	f004 fa54 	bl	8006bb0 <Max31855_Read_Temp>

		  //Pressure tank
		  transducer_pressure = MRT_prop_poll_pressure_transducer(&hadc1);
 8002708:	481e      	ldr	r0, [pc, #120]	; (8002784 <StartSensors3+0x10c>)
 800270a:	f001 fb95 	bl	8003e38 <MRT_prop_poll_pressure_transducer>
 800270e:	eef0 7a40 	vmov.f32	s15, s0
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <StartSensors3+0x110>)
 8002714:	edc3 7a00 	vstr	s15, [r3]

		  //Valve status
		  valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 8002718:	2102      	movs	r1, #2
 800271a:	481c      	ldr	r0, [pc, #112]	; (800278c <StartSensors3+0x114>)
 800271c:	f005 fc5c 	bl	8007fd8 <HAL_GPIO_ReadPin>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <StartSensors3+0x118>)
 8002726:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002728:	2200      	movs	r2, #0
 800272a:	2102      	movs	r1, #2
 800272c:	4808      	ldr	r0, [pc, #32]	; (8002750 <StartSensors3+0xd8>)
 800272e:	f005 fc6b 	bl	8008008 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <StartSensors3+0x108>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <StartSensors3+0xca>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 800273a:	200a      	movs	r0, #10
 800273c:	f012 fabd 	bl	8014cba <osDelay>
 8002740:	e7a5      	b.n	800268e <StartSensors3+0x16>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8002742:	2014      	movs	r0, #20
 8002744:	f012 fab9 	bl	8014cba <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002748:	e7a1      	b.n	800268e <StartSensors3+0x16>
 800274a:	bf00      	nop
 800274c:	20005ff4 	.word	0x20005ff4
 8002750:	40020800 	.word	0x40020800
 8002754:	200067f8 	.word	0x200067f8
 8002758:	200066fc 	.word	0x200066fc
 800275c:	20006768 	.word	0x20006768
 8002760:	200068b4 	.word	0x200068b4
 8002764:	20000414 	.word	0x20000414
 8002768:	20000420 	.word	0x20000420
 800276c:	2000042c 	.word	0x2000042c
 8002770:	200068a4 	.word	0x200068a4
 8002774:	20000410 	.word	0x20000410
 8002778:	2000040c 	.word	0x2000040c
 800277c:	20000430 	.word	0x20000430
 8002780:	20000440 	.word	0x20000440
 8002784:	200066b4 	.word	0x200066b4
 8002788:	2000678c 	.word	0x2000678c
 800278c:	40020400 	.word	0x40020400
 8002790:	20006804 	.word	0x20006804

08002794 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0c2      	sub	sp, #264	; 0x108
 8002798:	af00      	add	r7, sp, #0
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	#if !PRINTING_THREAD
	osThreadExit();
 800279e:	f012 fa86 	bl	8014cae <osThreadExit>
	...

080027a4 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 80027a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a6:	b0c9      	sub	sp, #292	; 0x124
 80027a8:	af04      	add	r7, sp, #16
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	6018      	str	r0, [r3, #0]
	osThreadState_t thread_state;

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 80027ae:	2201      	movs	r2, #1
 80027b0:	2104      	movs	r1, #4
 80027b2:	486b      	ldr	r0, [pc, #428]	; (8002960 <StartWatchDog+0x1bc>)
 80027b4:	f005 fc28 	bl	8008008 <HAL_GPIO_WritePin>

	#if IWDG_ACTIVE
	HAL_IWDG_Refresh(&hiwdg);
 80027b8:	486a      	ldr	r0, [pc, #424]	; (8002964 <StartWatchDog+0x1c0>)
 80027ba:	f006 fd09 	bl	80091d0 <HAL_IWDG_Refresh>
	#endif

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80027be:	2200      	movs	r2, #0
 80027c0:	4969      	ldr	r1, [pc, #420]	; (8002968 <StartWatchDog+0x1c4>)
 80027c2:	486a      	ldr	r0, [pc, #424]	; (800296c <StartWatchDog+0x1c8>)
 80027c4:	f008 fe86 	bl	800b4d4 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80027c8:	2200      	movs	r2, #0
 80027ca:	4969      	ldr	r1, [pc, #420]	; (8002970 <StartWatchDog+0x1cc>)
 80027cc:	4867      	ldr	r0, [pc, #412]	; (800296c <StartWatchDog+0x1c8>)
 80027ce:	f008 ff86 	bl	800b6de <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <StartWatchDog+0x1c4>)
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	4b67      	ldr	r3, [pc, #412]	; (8002974 <StartWatchDog+0x1d0>)
 80027d8:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <StartWatchDog+0x1c4>)
 80027dc:	785a      	ldrb	r2, [r3, #1]
 80027de:	4b66      	ldr	r3, [pc, #408]	; (8002978 <StartWatchDog+0x1d4>)
 80027e0:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 80027e2:	4b61      	ldr	r3, [pc, #388]	; (8002968 <StartWatchDog+0x1c4>)
 80027e4:	789a      	ldrb	r2, [r3, #2]
 80027e6:	4b65      	ldr	r3, [pc, #404]	; (800297c <StartWatchDog+0x1d8>)
 80027e8:	701a      	strb	r2, [r3, #0]

	 memset(buffer, 0, TX_BUF_DIM);
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f017 fc01 	bl	8019ffc <memset>
	 sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 80027fa:	4b5e      	ldr	r3, [pc, #376]	; (8002974 <StartWatchDog+0x1d0>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	461d      	mov	r5, r3
 8002800:	4b5d      	ldr	r3, [pc, #372]	; (8002978 <StartWatchDog+0x1d4>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461e      	mov	r6, r3
 8002806:	4b5d      	ldr	r3, [pc, #372]	; (800297c <StartWatchDog+0x1d8>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461c      	mov	r4, r3
 800280c:	4b5c      	ldr	r3, [pc, #368]	; (8002980 <StartWatchDog+0x1dc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fea9 	bl	8000568 <__aeabi_f2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	f107 0008 	add.w	r0, r7, #8
 800281e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002822:	9400      	str	r4, [sp, #0]
 8002824:	4633      	mov	r3, r6
 8002826:	462a      	mov	r2, r5
 8002828:	4956      	ldr	r1, [pc, #344]	; (8002984 <StartWatchDog+0x1e0>)
 800282a:	f018 fc65 	bl	801b0f8 <siprintf>
	 HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fcdc 	bl	80001f0 <strlen>
 8002838:	4603      	mov	r3, r0
 800283a:	b29a      	uxth	r2, r3
 800283c:	f107 0108 	add.w	r1, r7, #8
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	4850      	ldr	r0, [pc, #320]	; (8002988 <StartWatchDog+0x1e4>)
 8002846:	f00b f96a 	bl	800db1e <HAL_UART_Transmit>


	 if(wd_ejection_flag){
 800284a:	4b50      	ldr	r3, [pc, #320]	; (800298c <StartWatchDog+0x1e8>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01a      	beq.n	8002888 <StartWatchDog+0xe4>
		 wd_ejection_flag = 0;
 8002852:	4b4e      	ldr	r3, [pc, #312]	; (800298c <StartWatchDog+0x1e8>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
		 flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8002858:	4b4d      	ldr	r3, [pc, #308]	; (8002990 <StartWatchDog+0x1ec>)
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	4b4d      	ldr	r3, [pc, #308]	; (8002994 <StartWatchDog+0x1f0>)
 800285e:	711a      	strb	r2, [r3, #4]

		 if (ejection_state_flag == 2){
 8002860:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <StartWatchDog+0x1ec>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d106      	bne.n	8002876 <StartWatchDog+0xd2>
			 apogee_flag = 1;
 8002868:	4b4b      	ldr	r3, [pc, #300]	; (8002998 <StartWatchDog+0x1f4>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
			 flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 800286e:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <StartWatchDog+0x1f4>)
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	4b48      	ldr	r3, [pc, #288]	; (8002994 <StartWatchDog+0x1f0>)
 8002874:	70da      	strb	r2, [r3, #3]
		 }

		 W25qxx_EraseSector(1);
 8002876:	2001      	movs	r0, #1
 8002878:	f001 fe3e 	bl	80044f8 <W25qxx_EraseSector>
		 W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800287c:	2305      	movs	r3, #5
 800287e:	2200      	movs	r2, #0
 8002880:	2101      	movs	r1, #1
 8002882:	4844      	ldr	r0, [pc, #272]	; (8002994 <StartWatchDog+0x1f0>)
 8002884:	f001 ff82 	bl	800478c <W25qxx_WriteSector>
	   * Moved the other code where we write to external flash to this thread (when going to sleep)
	   *
	   * TAKE CARE OF SETUP HARDFAULT IN stm32f4xx_it.c
	   */
	  //Save the time
	  MRT_saveRTCTime();
 8002888:	f001 fac4 	bl	8003e14 <MRT_saveRTCTime>

	  //Check if it's sleep time
	  if (flagA==1){
 800288c:	4b43      	ldr	r3, [pc, #268]	; (800299c <StartWatchDog+0x1f8>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d111      	bne.n	80028b8 <StartWatchDog+0x114>
		//Update iwdg_flag
		iwdg_flag = 1;
 8002894:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <StartWatchDog+0x1fc>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <StartWatchDog+0x1fc>)
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <StartWatchDog+0x1f0>)
 80028a0:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f001 fe28 	bl	80044f8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80028a8:	2305      	movs	r3, #5
 80028aa:	2200      	movs	r2, #0
 80028ac:	2101      	movs	r1, #1
 80028ae:	4839      	ldr	r0, [pc, #228]	; (8002994 <StartWatchDog+0x1f0>)
 80028b0:	f001 ff6c 	bl	800478c <W25qxx_WriteSector>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 80028b4:	f7fe feaa 	bl	800160c <__NVIC_SystemReset>
	  }


	  //Check each thread state
	  #if THREAD_KEEPER
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80028be:	e040      	b.n	8002942 <StartWatchDog+0x19e>
		  thread_state = osThreadGetState(threadID[i]);
 80028c0:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <StartWatchDog+0x200>)
 80028c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f012 f992 	bl	8014bf4 <osThreadGetState>
 80028d0:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108

		  if (thread_state == osThreadInactive ||
 80028d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <StartWatchDog+0x148>
 80028dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d003      	beq.n	80028ec <StartWatchDog+0x148>
		      thread_state == osThreadBlocked  ||
 80028e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d11d      	bne.n	8002928 <StartWatchDog+0x184>
		      thread_state == osThreadTerminated){
			  if (i==1 && ejection_state_flag < 4){
 80028ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10c      	bne.n	800290e <StartWatchDog+0x16a>
 80028f4:	4b26      	ldr	r3, [pc, #152]	; (8002990 <StartWatchDog+0x1ec>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d808      	bhi.n	800290e <StartWatchDog+0x16a>
				 osThreadResume(threadID[i]);
 80028fc:	4a29      	ldr	r2, [pc, #164]	; (80029a4 <StartWatchDog+0x200>)
 80028fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	4618      	mov	r0, r3
 8002908:	f012 f9b0 	bl	8014c6c <osThreadResume>
			  if (i==1 && ejection_state_flag < 4){
 800290c:	e013      	b.n	8002936 <StartWatchDog+0x192>
			  }
			  else if (i!=1){
 800290e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002912:	2b01      	cmp	r3, #1
 8002914:	d00f      	beq.n	8002936 <StartWatchDog+0x192>
				 osThreadResume(threadID[i]);
 8002916:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <StartWatchDog+0x200>)
 8002918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002920:	4618      	mov	r0, r3
 8002922:	f012 f9a3 	bl	8014c6c <osThreadResume>
			  if (i==1 && ejection_state_flag < 4){
 8002926:	e006      	b.n	8002936 <StartWatchDog+0x192>
			  }
		  }

		  else if (thread_state == osThreadError){
 8002928:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d102      	bne.n	8002938 <StartWatchDog+0x194>
			  NVIC_SystemReset();
 8002932:	f7fe fe6b 	bl	800160c <__NVIC_SystemReset>
			  if (i==1 && ejection_state_flag < 4){
 8002936:	bf00      	nop
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800293c:	3301      	adds	r3, #1
 800293e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002946:	2b03      	cmp	r3, #3
 8002948:	ddba      	ble.n	80028c0 <StartWatchDog+0x11c>
		  }
		  */
	  }
	  #endif

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	2104      	movs	r1, #4
 800294e:	4804      	ldr	r0, [pc, #16]	; (8002960 <StartWatchDog+0x1bc>)
 8002950:	f005 fb5a 	bl	8008008 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002958:	f012 f9af 	bl	8014cba <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800295c:	e727      	b.n	80027ae <StartWatchDog+0xa>
 800295e:	bf00      	nop
 8002960:	40020800 	.word	0x40020800
 8002964:	20006238 	.word	0x20006238
 8002968:	20000678 	.word	0x20000678
 800296c:	2000676c 	.word	0x2000676c
 8002970:	2000068c 	.word	0x2000068c
 8002974:	20000442 	.word	0x20000442
 8002978:	20000443 	.word	0x20000443
 800297c:	20000444 	.word	0x20000444
 8002980:	20000430 	.word	0x20000430
 8002984:	0801f270 	.word	0x0801f270
 8002988:	20005e58 	.word	0x20005e58
 800298c:	20000434 	.word	0x20000434
 8002990:	20000441 	.word	0x20000441
 8002994:	20005fec 	.word	0x20005fec
 8002998:	20000440 	.word	0x20000440
 800299c:	200006b8 	.word	0x200006b8
 80029a0:	2000043f 	.word	0x2000043f
 80029a4:	20005ff4 	.word	0x20005ff4

080029a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029ba:	f004 fbf9 	bl	80071b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40001000 	.word	0x40001000

080029cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_MspInit+0x54>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_MspInit+0x54>)
 80029ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_MspInit+0x54>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_MspInit+0x54>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <HAL_MspInit+0x54>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_MspInit+0x54>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	210f      	movs	r1, #15
 8002a1e:	f06f 0001 	mvn.w	r0, #1
 8002a22:	f005 f8f5 	bl	8007c10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800

08002a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <HAL_ADC_MspInit+0x7c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d127      	bne.n	8002aa6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_ADC_MspInit+0x80>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <HAL_ADC_MspInit+0x80>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6453      	str	r3, [r2, #68]	; 0x44
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_ADC_MspInit+0x80>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_ADC_MspInit+0x80>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <HAL_ADC_MspInit+0x80>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_ADC_MspInit+0x80>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002a8e:	2340      	movs	r3, #64	; 0x40
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a92:	2303      	movs	r3, #3
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <HAL_ADC_MspInit+0x84>)
 8002aa2:	f005 f8ed 	bl	8007c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aa6:	bf00      	nop
 8002aa8:	3728      	adds	r7, #40	; 0x28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40012000 	.word	0x40012000
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40020000 	.word	0x40020000

08002abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	; 0x30
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a42      	ldr	r2, [pc, #264]	; (8002be4 <HAL_I2C_MspInit+0x128>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d12d      	bne.n	8002b3a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a40      	ldr	r2, [pc, #256]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002afa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b00:	2312      	movs	r3, #18
 8002b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b04:	2301      	movs	r3, #1
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b10:	f107 031c 	add.w	r3, r7, #28
 8002b14:	4619      	mov	r1, r3
 8002b16:	4835      	ldr	r0, [pc, #212]	; (8002bec <HAL_I2C_MspInit+0x130>)
 8002b18:	f005 f8b2 	bl	8007c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	4a30      	ldr	r2, [pc, #192]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002b26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2c:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b38:	e050      	b.n	8002bdc <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2c      	ldr	r2, [pc, #176]	; (8002bf0 <HAL_I2C_MspInit+0x134>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d14b      	bne.n	8002bdc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	6313      	str	r3, [r2, #48]	; 0x30
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b82:	2312      	movs	r3, #18
 8002b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b86:	2301      	movs	r3, #1
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b8e:	2304      	movs	r3, #4
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	4619      	mov	r1, r3
 8002b98:	4816      	ldr	r0, [pc, #88]	; (8002bf4 <HAL_I2C_MspInit+0x138>)
 8002b9a:	f005 f871 	bl	8007c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba4:	2312      	movs	r3, #18
 8002ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bac:	2303      	movs	r3, #3
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480f      	ldr	r0, [pc, #60]	; (8002bf8 <HAL_I2C_MspInit+0x13c>)
 8002bbc:	f005 f860 	bl	8007c80 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002bca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bce:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_I2C_MspInit+0x12c>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
}
 8002bdc:	bf00      	nop
 8002bde:	3730      	adds	r7, #48	; 0x30
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40005800 	.word	0x40005800
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40005c00 	.word	0x40005c00
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020000 	.word	0x40020000

08002bfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	; 0x38
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	2230      	movs	r2, #48	; 0x30
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f017 f9f5 	bl	8019ffc <memset>
  if(hrtc->Instance==RTC)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <HAL_RTC_MspInit+0x5c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d119      	bne.n	8002c50 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f008 f946 	bl	800aebc <HAL_RCCEx_PeriphCLKConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002c36:	f7ff fec9 	bl	80029cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_RTC_MspInit+0x60>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	2105      	movs	r1, #5
 8002c44:	2029      	movs	r0, #41	; 0x29
 8002c46:	f004 ffe3 	bl	8007c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002c4a:	2029      	movs	r0, #41	; 0x29
 8002c4c:	f004 fffc 	bl	8007c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c50:	bf00      	nop
 8002c52:	3738      	adds	r7, #56	; 0x38
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40002800 	.word	0x40002800
 8002c5c:	42470e3c 	.word	0x42470e3c

08002c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08e      	sub	sp, #56	; 0x38
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a4c      	ldr	r2, [pc, #304]	; (8002db0 <HAL_SPI_MspInit+0x150>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12d      	bne.n	8002cde <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a4a      	ldr	r2, [pc, #296]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a43      	ldr	r2, [pc, #268]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ccc:	2305      	movs	r3, #5
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4838      	ldr	r0, [pc, #224]	; (8002db8 <HAL_SPI_MspInit+0x158>)
 8002cd8:	f004 ffd2 	bl	8007c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002cdc:	e064      	b.n	8002da8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a36      	ldr	r2, [pc, #216]	; (8002dbc <HAL_SPI_MspInit+0x15c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d12d      	bne.n	8002d44 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	4a30      	ldr	r2, [pc, #192]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cf6:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf8:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002d0e:	f043 0310 	orr.w	r3, r3, #16
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002d20:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d26:	2302      	movs	r3, #2
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d32:	2305      	movs	r3, #5
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4820      	ldr	r0, [pc, #128]	; (8002dc0 <HAL_SPI_MspInit+0x160>)
 8002d3e:	f004 ff9f 	bl	8007c80 <HAL_GPIO_Init>
}
 8002d42:	e031      	b.n	8002da8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <HAL_SPI_MspInit+0x164>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d12c      	bne.n	8002da8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002d74:	f043 0320 	orr.w	r3, r3, #32
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_SPI_MspInit+0x154>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002d86:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d98:	2305      	movs	r3, #5
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	4619      	mov	r1, r3
 8002da2:	4809      	ldr	r0, [pc, #36]	; (8002dc8 <HAL_SPI_MspInit+0x168>)
 8002da4:	f004 ff6c 	bl	8007c80 <HAL_GPIO_Init>
}
 8002da8:	bf00      	nop
 8002daa:	3738      	adds	r7, #56	; 0x38
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40003800 	.word	0x40003800
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40020400 	.word	0x40020400
 8002dbc:	40013400 	.word	0x40013400
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40015000 	.word	0x40015000
 8002dc8:	40021400 	.word	0x40021400

08002dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d10d      	bne.n	8002dfa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_TIM_Base_MspInit+0x3c>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <HAL_TIM_Base_MspInit+0x3c>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_TIM_Base_MspInit+0x3c>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800

08002e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d11d      	bne.n	8002e6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_TIM_MspPostInit+0x68>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a0f      	ldr	r2, [pc, #60]	; (8002e74 <HAL_TIM_MspPostInit+0x68>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_TIM_MspPostInit+0x68>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	4619      	mov	r1, r3
 8002e64:	4804      	ldr	r0, [pc, #16]	; (8002e78 <HAL_TIM_MspPostInit+0x6c>)
 8002e66:	f004 ff0b 	bl	8007c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e6a:	bf00      	nop
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40020000 	.word	0x40020000

08002e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08e      	sub	sp, #56	; 0x38
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a4b      	ldr	r2, [pc, #300]	; (8002fc8 <HAL_UART_MspInit+0x14c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d12c      	bne.n	8002ef8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a49      	ldr	r2, [pc, #292]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a42      	ldr	r2, [pc, #264]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002ec4:	f043 0310 	orr.w	r3, r3, #16
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b40      	ldr	r3, [pc, #256]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4837      	ldr	r0, [pc, #220]	; (8002fd0 <HAL_UART_MspInit+0x154>)
 8002ef2:	f004 fec5 	bl	8007c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ef6:	e063      	b.n	8002fc0 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <HAL_UART_MspInit+0x158>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d12d      	bne.n	8002f5e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	4a30      	ldr	r2, [pc, #192]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f10:	6413      	str	r3, [r2, #64]	; 0x40
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	4b2a      	ldr	r3, [pc, #168]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002f3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f4c:	2307      	movs	r3, #7
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f54:	4619      	mov	r1, r3
 8002f56:	4820      	ldr	r0, [pc, #128]	; (8002fd8 <HAL_UART_MspInit+0x15c>)
 8002f58:	f004 fe92 	bl	8007c80 <HAL_GPIO_Init>
}
 8002f5c:	e030      	b.n	8002fc0 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <HAL_UART_MspInit+0x160>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d12b      	bne.n	8002fc0 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f72:	f043 0320 	orr.w	r3, r3, #32
 8002f76:	6453      	str	r3, [r2, #68]	; 0x44
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	6313      	str	r3, [r2, #48]	; 0x30
 8002f94:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <HAL_UART_MspInit+0x150>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002fa0:	23c0      	movs	r3, #192	; 0xc0
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fac:	2303      	movs	r3, #3
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4809      	ldr	r0, [pc, #36]	; (8002fe0 <HAL_UART_MspInit+0x164>)
 8002fbc:	f004 fe60 	bl	8007c80 <HAL_GPIO_Init>
}
 8002fc0:	bf00      	nop
 8002fc2:	3738      	adds	r7, #56	; 0x38
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40007c00 	.word	0x40007c00
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	40020c00 	.word	0x40020c00
 8002fdc:	40011400 	.word	0x40011400
 8002fe0:	40020800 	.word	0x40020800

08002fe4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08c      	sub	sp, #48	; 0x30
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	2036      	movs	r0, #54	; 0x36
 8002ffa:	f004 fe09 	bl	8007c10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ffe:	2036      	movs	r0, #54	; 0x36
 8003000:	f004 fe22 	bl	8007c48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <HAL_InitTick+0xa4>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <HAL_InitTick+0xa4>)
 800300e:	f043 0310 	orr.w	r3, r3, #16
 8003012:	6413      	str	r3, [r2, #64]	; 0x40
 8003014:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_InitTick+0xa4>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003020:	f107 0210 	add.w	r2, r7, #16
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f007 ff14 	bl	800ae58 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003030:	f007 feea 	bl	800ae08 <HAL_RCC_GetPCLK1Freq>
 8003034:	4603      	mov	r3, r0
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	4a13      	ldr	r2, [pc, #76]	; (800308c <HAL_InitTick+0xa8>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0c9b      	lsrs	r3, r3, #18
 8003044:	3b01      	subs	r3, #1
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_InitTick+0xac>)
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <HAL_InitTick+0xb0>)
 800304c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_InitTick+0xac>)
 8003050:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003054:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003056:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <HAL_InitTick+0xac>)
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_InitTick+0xac>)
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_InitTick+0xac>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003068:	4809      	ldr	r0, [pc, #36]	; (8003090 <HAL_InitTick+0xac>)
 800306a:	f009 fc5f 	bl	800c92c <HAL_TIM_Base_Init>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d104      	bne.n	800307e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003074:	4806      	ldr	r0, [pc, #24]	; (8003090 <HAL_InitTick+0xac>)
 8003076:	f009 fca9 	bl	800c9cc <HAL_TIM_Base_Start_IT>
 800307a:	4603      	mov	r3, r0
 800307c:	e000      	b.n	8003080 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	3730      	adds	r7, #48	; 0x30
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	431bde83 	.word	0x431bde83
 8003090:	20006afc 	.word	0x20006afc
 8003094:	40001000 	.word	0x40001000

08003098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	af00      	add	r7, sp, #0
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  //TODO
	  buzz_failure();
 80030aa:	f000 ffa9 	bl	8004000 <buzz_failure>
 80030ae:	e7fc      	b.n	80030aa <HardFault_Handler+0x4>

080030b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b4:	e7fe      	b.n	80030b4 <MemManage_Handler+0x4>

080030b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ba:	e7fe      	b.n	80030ba <BusFault_Handler+0x4>

080030bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c0:	e7fe      	b.n	80030c0 <UsageFault_Handler+0x4>

080030c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f004 ffb1 	bl	800803c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <RTC_Alarm_IRQHandler+0x10>)
 80030e6:	f008 fc81 	bl	800b9ec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2000676c 	.word	0x2000676c

080030f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <TIM6_DAC_IRQHandler+0x10>)
 80030fa:	f009 fe69 	bl	800cdd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20006afc 	.word	0x20006afc

08003108 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <OTG_FS_IRQHandler+0x10>)
 800310e:	f006 f9bf 	bl	8009490 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200089f4 	.word	0x200089f4

0800311c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
	return 1;
 8003120:	2301      	movs	r3, #1
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_kill>:

int _kill(int pid, int sig)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003136:	f016 fe0d 	bl	8019d54 <__errno>
 800313a:	4603      	mov	r3, r0
 800313c:	2216      	movs	r2, #22
 800313e:	601a      	str	r2, [r3, #0]
	return -1;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_exit>:

void _exit (int status)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003154:	f04f 31ff 	mov.w	r1, #4294967295
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ffe7 	bl	800312c <_kill>
	while (1) {}		/* Make sure we hang here */
 800315e:	e7fe      	b.n	800315e <_exit+0x12>

08003160 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e00a      	b.n	8003188 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003172:	f3af 8000 	nop.w
 8003176:	4601      	mov	r1, r0
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	60ba      	str	r2, [r7, #8]
 800317e:	b2ca      	uxtb	r2, r1
 8003180:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3301      	adds	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	dbf0      	blt.n	8003172 <_read+0x12>
	}

return len;
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	e009      	b.n	80031c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	60ba      	str	r2, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3301      	adds	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	dbf1      	blt.n	80031ac <_write+0x12>
	}
	return len;
 80031c8:	687b      	ldr	r3, [r7, #4]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_close>:

int _close(int file)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
	return -1;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031fa:	605a      	str	r2, [r3, #4]
	return 0;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <_isatty>:

int _isatty(int file)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
	return 1;
 8003212:	2301      	movs	r3, #1
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
	return 0;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003244:	4a14      	ldr	r2, [pc, #80]	; (8003298 <_sbrk+0x5c>)
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <_sbrk+0x60>)
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <_sbrk+0x64>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <_sbrk+0x64>)
 800325a:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <_sbrk+0x68>)
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <_sbrk+0x64>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d207      	bcs.n	800327c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800326c:	f016 fd72 	bl	8019d54 <__errno>
 8003270:	4603      	mov	r3, r0
 8003272:	220c      	movs	r2, #12
 8003274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	e009      	b.n	8003290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <_sbrk+0x64>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <_sbrk+0x64>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <_sbrk+0x64>)
 800328c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800328e:	68fb      	ldr	r3, [r7, #12]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20030000 	.word	0x20030000
 800329c:	00000400 	.word	0x00000400
 80032a0:	20000438 	.word	0x20000438
 80032a4:	20008e10 	.word	0x20008e10

080032a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <SystemInit+0x28>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <SystemInit+0x28>)
 80032b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SystemInit+0x28>)
 80032be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032c2:	609a      	str	r2, [r3, #8]
#endif
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800330c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032da:	e003      	b.n	80032e4 <LoopCopyDataInit>

080032dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032e2:	3104      	adds	r1, #4

080032e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032e4:	480b      	ldr	r0, [pc, #44]	; (8003314 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032ec:	d3f6      	bcc.n	80032dc <CopyDataInit>
  ldr  r2, =_sbss
 80032ee:	4a0b      	ldr	r2, [pc, #44]	; (800331c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032f0:	e002      	b.n	80032f8 <LoopFillZerobss>

080032f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032f4:	f842 3b04 	str.w	r3, [r2], #4

080032f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032fc:	d3f9      	bcc.n	80032f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032fe:	f7ff ffd3 	bl	80032a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003302:	f016 fe23 	bl	8019f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003306:	f7fe f997 	bl	8001638 <main>
  bx  lr    
 800330a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800330c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003310:	0802147c 	.word	0x0802147c
  ldr  r0, =_sdata
 8003314:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003318:	200003d4 	.word	0x200003d4
  ldr  r2, =_sbss
 800331c:	200003d4 	.word	0x200003d4
  ldr  r3, = _ebss
 8003320:	20008e0c 	.word	0x20008e0c

08003324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003324:	e7fe      	b.n	8003324 <ADC_IRQHandler>
	...

08003328 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	; 0x30
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8003334:	2364      	movs	r3, #100	; 0x64
 8003336:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8003340:	e073      	b.n	800342a <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <GPS_Poll+0x118>)
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	2364      	movs	r3, #100	; 0x64
 8003348:	2201      	movs	r2, #1
 800334a:	493e      	ldr	r1, [pc, #248]	; (8003444 <GPS_Poll+0x11c>)
 800334c:	f00a fc79 	bl	800dc42 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8003350:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <GPS_Poll+0x11c>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b0a      	cmp	r3, #10
 8003356:	d00f      	beq.n	8003378 <GPS_Poll+0x50>
 8003358:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <GPS_Poll+0x120>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b63      	cmp	r3, #99	; 0x63
 800335e:	d80b      	bhi.n	8003378 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003360:	4b39      	ldr	r3, [pc, #228]	; (8003448 <GPS_Poll+0x120>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	b2d1      	uxtb	r1, r2
 8003368:	4a37      	ldr	r2, [pc, #220]	; (8003448 <GPS_Poll+0x120>)
 800336a:	7011      	strb	r1, [r2, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4b35      	ldr	r3, [pc, #212]	; (8003444 <GPS_Poll+0x11c>)
 8003370:	7819      	ldrb	r1, [r3, #0]
 8003372:	4b36      	ldr	r3, [pc, #216]	; (800344c <GPS_Poll+0x124>)
 8003374:	5499      	strb	r1, [r3, r2]
 8003376:	e021      	b.n	80033bc <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8003378:	4834      	ldr	r0, [pc, #208]	; (800344c <GPS_Poll+0x124>)
 800337a:	f000 f86b 	bl	8003454 <GPS_validate>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8003384:	4831      	ldr	r0, [pc, #196]	; (800344c <GPS_Poll+0x124>)
 8003386:	f000 f8c7 	bl	8003518 <GPS_parse>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8003390:	4b2f      	ldr	r3, [pc, #188]	; (8003450 <GPS_Poll+0x128>)
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8003398:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <GPS_Poll+0x128>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <GPS_Poll+0x128>)
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	601a      	str	r2, [r3, #0]
					done = 1;
 80033a8:	2301      	movs	r3, #1
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <GPS_Poll+0x120>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80033b2:	2264      	movs	r2, #100	; 0x64
 80033b4:	2100      	movs	r1, #0
 80033b6:	4825      	ldr	r0, [pc, #148]	; (800344c <GPS_Poll+0x124>)
 80033b8:	f016 fe20 	bl	8019ffc <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80033bc:	2300      	movs	r3, #0
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <GPS_Poll+0x118>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <GPS_Poll+0x118>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	4b19      	ldr	r3, [pc, #100]	; (8003440 <GPS_Poll+0x118>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	4b16      	ldr	r3, [pc, #88]	; (8003440 <GPS_Poll+0x118>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 80033f0:	2300      	movs	r3, #0
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <GPS_Poll+0x118>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <GPS_Poll+0x118>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <GPS_Poll+0x118>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <GPS_Poll+0x118>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8003424:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003426:	3301      	adds	r3, #1
 8003428:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800342a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800342c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800342e:	429a      	cmp	r2, r3
 8003430:	d202      	bcs.n	8003438 <GPS_Poll+0x110>
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	d084      	beq.n	8003342 <GPS_Poll+0x1a>
	}
}
 8003438:	bf00      	nop
 800343a:	3730      	adds	r7, #48	; 0x30
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20005f4c 	.word	0x20005f4c
 8003444:	2000043c 	.word	0x2000043c
 8003448:	2000043d 	.word	0x2000043d
 800344c:	20006b9c 	.word	0x20006b9c
 8003450:	20006b44 	.word	0x20006b44

08003454 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b24      	cmp	r3, #36	; 0x24
 800346e:	d103      	bne.n	8003478 <GPS_validate+0x24>
        i++;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3301      	adds	r3, #1
 8003474:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8003476:	e00c      	b.n	8003492 <GPS_validate+0x3e>
        return 0;
 8003478:	2300      	movs	r3, #0
 800347a:	e047      	b.n	800350c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4053      	eors	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        i++;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3301      	adds	r3, #1
 8003490:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <GPS_validate+0x5c>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b2a      	cmp	r3, #42	; 0x2a
 80034a8:	d002      	beq.n	80034b0 <GPS_validate+0x5c>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b4a      	cmp	r3, #74	; 0x4a
 80034ae:	dde5      	ble.n	800347c <GPS_validate+0x28>
    }

    if(i >= 75){
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b4a      	cmp	r3, #74	; 0x4a
 80034b4:	dd01      	ble.n	80034ba <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80034b6:	2300      	movs	r3, #0
 80034b8:	e028      	b.n	800350c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b2a      	cmp	r3, #42	; 0x2a
 80034c4:	d119      	bne.n	80034fa <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	3301      	adds	r3, #1
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	3302      	adds	r3, #2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80034e2:	f107 0308 	add.w	r3, r7, #8
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	490a      	ldr	r1, [pc, #40]	; (8003514 <GPS_validate+0xc0>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f017 fe04 	bl	801b0f8 <siprintf>
    return((checkcalcstr[0] == check[0])
 80034f0:	7a3a      	ldrb	r2, [r7, #8]
 80034f2:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d108      	bne.n	800350a <GPS_validate+0xb6>
 80034f8:	e001      	b.n	80034fe <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80034fa:	2300      	movs	r3, #0
 80034fc:	e006      	b.n	800350c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80034fe:	7a7a      	ldrb	r2, [r7, #9]
 8003500:	7b7b      	ldrb	r3, [r7, #13]
 8003502:	429a      	cmp	r2, r3
 8003504:	d101      	bne.n	800350a <GPS_validate+0xb6>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <GPS_validate+0xb8>
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	0801f290 	.word	0x0801f290

08003518 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	; 0x28
 800351c:	af08      	add	r7, sp, #32
 800351e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8003520:	2206      	movs	r2, #6
 8003522:	496d      	ldr	r1, [pc, #436]	; (80036d8 <GPS_parse+0x1c0>)
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f017 fe80 	bl	801b22a <strncmp>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d139      	bne.n	80035a4 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003530:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <GPS_parse+0x1c4>)
 8003532:	9307      	str	r3, [sp, #28]
 8003534:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <GPS_parse+0x1c8>)
 8003536:	9306      	str	r3, [sp, #24]
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <GPS_parse+0x1cc>)
 800353a:	9305      	str	r3, [sp, #20]
 800353c:	4b6a      	ldr	r3, [pc, #424]	; (80036e8 <GPS_parse+0x1d0>)
 800353e:	9304      	str	r3, [sp, #16]
 8003540:	4b6a      	ldr	r3, [pc, #424]	; (80036ec <GPS_parse+0x1d4>)
 8003542:	9303      	str	r3, [sp, #12]
 8003544:	4b6a      	ldr	r3, [pc, #424]	; (80036f0 <GPS_parse+0x1d8>)
 8003546:	9302      	str	r3, [sp, #8]
 8003548:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <GPS_parse+0x1dc>)
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <GPS_parse+0x1e0>)
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	4b6a      	ldr	r3, [pc, #424]	; (80036fc <GPS_parse+0x1e4>)
 8003552:	4a6b      	ldr	r2, [pc, #428]	; (8003700 <GPS_parse+0x1e8>)
 8003554:	496b      	ldr	r1, [pc, #428]	; (8003704 <GPS_parse+0x1ec>)
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f017 fdee 	bl	801b138 <siscanf>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f340 80b5 	ble.w	80036ce <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003564:	4b68      	ldr	r3, [pc, #416]	; (8003708 <GPS_parse+0x1f0>)
 8003566:	edd3 7a04 	vldr	s15, [r3, #16]
 800356a:	4b67      	ldr	r3, [pc, #412]	; (8003708 <GPS_parse+0x1f0>)
 800356c:	7e1b      	ldrb	r3, [r3, #24]
 800356e:	4618      	mov	r0, r3
 8003570:	eeb0 0a67 	vmov.f32	s0, s15
 8003574:	f000 f8ec 	bl	8003750 <GPS_nmea_to_dec>
 8003578:	eef0 7a40 	vmov.f32	s15, s0
 800357c:	4b62      	ldr	r3, [pc, #392]	; (8003708 <GPS_parse+0x1f0>)
 800357e:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003582:	4b61      	ldr	r3, [pc, #388]	; (8003708 <GPS_parse+0x1f0>)
 8003584:	edd3 7a03 	vldr	s15, [r3, #12]
 8003588:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <GPS_parse+0x1f0>)
 800358a:	7e5b      	ldrb	r3, [r3, #25]
 800358c:	4618      	mov	r0, r3
 800358e:	eeb0 0a67 	vmov.f32	s0, s15
 8003592:	f000 f8dd 	bl	8003750 <GPS_nmea_to_dec>
 8003596:	eef0 7a40 	vmov.f32	s15, s0
 800359a:	4b5b      	ldr	r3, [pc, #364]	; (8003708 <GPS_parse+0x1f0>)
 800359c:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e095      	b.n	80036d0 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80035a4:	2206      	movs	r2, #6
 80035a6:	4959      	ldr	r1, [pc, #356]	; (800370c <GPS_parse+0x1f4>)
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f017 fe3e 	bl	801b22a <strncmp>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d134      	bne.n	800361e <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80035b4:	4b56      	ldr	r3, [pc, #344]	; (8003710 <GPS_parse+0x1f8>)
 80035b6:	9305      	str	r3, [sp, #20]
 80035b8:	4b56      	ldr	r3, [pc, #344]	; (8003714 <GPS_parse+0x1fc>)
 80035ba:	9304      	str	r3, [sp, #16]
 80035bc:	4b56      	ldr	r3, [pc, #344]	; (8003718 <GPS_parse+0x200>)
 80035be:	9303      	str	r3, [sp, #12]
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <GPS_parse+0x1d8>)
 80035c2:	9302      	str	r3, [sp, #8]
 80035c4:	4b4b      	ldr	r3, [pc, #300]	; (80036f4 <GPS_parse+0x1dc>)
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <GPS_parse+0x1e0>)
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <GPS_parse+0x1e4>)
 80035ce:	4a4c      	ldr	r2, [pc, #304]	; (8003700 <GPS_parse+0x1e8>)
 80035d0:	4952      	ldr	r1, [pc, #328]	; (800371c <GPS_parse+0x204>)
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f017 fdb0 	bl	801b138 <siscanf>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	dd77      	ble.n	80036ce <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <GPS_parse+0x1f0>)
 80035e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80035e4:	4b48      	ldr	r3, [pc, #288]	; (8003708 <GPS_parse+0x1f0>)
 80035e6:	7e1b      	ldrb	r3, [r3, #24]
 80035e8:	4618      	mov	r0, r3
 80035ea:	eeb0 0a67 	vmov.f32	s0, s15
 80035ee:	f000 f8af 	bl	8003750 <GPS_nmea_to_dec>
 80035f2:	eef0 7a40 	vmov.f32	s15, s0
 80035f6:	4b44      	ldr	r3, [pc, #272]	; (8003708 <GPS_parse+0x1f0>)
 80035f8:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80035fc:	4b42      	ldr	r3, [pc, #264]	; (8003708 <GPS_parse+0x1f0>)
 80035fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003602:	4b41      	ldr	r3, [pc, #260]	; (8003708 <GPS_parse+0x1f0>)
 8003604:	7e5b      	ldrb	r3, [r3, #25]
 8003606:	4618      	mov	r0, r3
 8003608:	eeb0 0a67 	vmov.f32	s0, s15
 800360c:	f000 f8a0 	bl	8003750 <GPS_nmea_to_dec>
 8003610:	eef0 7a40 	vmov.f32	s15, s0
 8003614:	4b3c      	ldr	r3, [pc, #240]	; (8003708 <GPS_parse+0x1f0>)
 8003616:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800361a:	2301      	movs	r3, #1
 800361c:	e058      	b.n	80036d0 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800361e:	2206      	movs	r2, #6
 8003620:	493f      	ldr	r1, [pc, #252]	; (8003720 <GPS_parse+0x208>)
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f017 fe01 	bl	801b22a <strncmp>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d130      	bne.n	8003690 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800362e:	4b3d      	ldr	r3, [pc, #244]	; (8003724 <GPS_parse+0x20c>)
 8003630:	9303      	str	r3, [sp, #12]
 8003632:	4b33      	ldr	r3, [pc, #204]	; (8003700 <GPS_parse+0x1e8>)
 8003634:	9302      	str	r3, [sp, #8]
 8003636:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <GPS_parse+0x1d8>)
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <GPS_parse+0x1dc>)
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	4b2e      	ldr	r3, [pc, #184]	; (80036f8 <GPS_parse+0x1e0>)
 8003640:	4a2e      	ldr	r2, [pc, #184]	; (80036fc <GPS_parse+0x1e4>)
 8003642:	4939      	ldr	r1, [pc, #228]	; (8003728 <GPS_parse+0x210>)
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f017 fd77 	bl	801b138 <siscanf>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	dd3e      	ble.n	80036ce <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003650:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <GPS_parse+0x1f0>)
 8003652:	edd3 7a04 	vldr	s15, [r3, #16]
 8003656:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <GPS_parse+0x1f0>)
 8003658:	7e1b      	ldrb	r3, [r3, #24]
 800365a:	4618      	mov	r0, r3
 800365c:	eeb0 0a67 	vmov.f32	s0, s15
 8003660:	f000 f876 	bl	8003750 <GPS_nmea_to_dec>
 8003664:	eef0 7a40 	vmov.f32	s15, s0
 8003668:	4b27      	ldr	r3, [pc, #156]	; (8003708 <GPS_parse+0x1f0>)
 800366a:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800366e:	4b26      	ldr	r3, [pc, #152]	; (8003708 <GPS_parse+0x1f0>)
 8003670:	edd3 7a03 	vldr	s15, [r3, #12]
 8003674:	4b24      	ldr	r3, [pc, #144]	; (8003708 <GPS_parse+0x1f0>)
 8003676:	7e5b      	ldrb	r3, [r3, #25]
 8003678:	4618      	mov	r0, r3
 800367a:	eeb0 0a67 	vmov.f32	s0, s15
 800367e:	f000 f867 	bl	8003750 <GPS_nmea_to_dec>
 8003682:	eef0 7a40 	vmov.f32	s15, s0
 8003686:	4b20      	ldr	r3, [pc, #128]	; (8003708 <GPS_parse+0x1f0>)
 8003688:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 800368c:	2301      	movs	r3, #1
 800368e:	e01f      	b.n	80036d0 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8003690:	2206      	movs	r2, #6
 8003692:	4926      	ldr	r1, [pc, #152]	; (800372c <GPS_parse+0x214>)
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f017 fdc8 	bl	801b22a <strncmp>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d116      	bne.n	80036ce <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80036a0:	4b23      	ldr	r3, [pc, #140]	; (8003730 <GPS_parse+0x218>)
 80036a2:	9305      	str	r3, [sp, #20]
 80036a4:	4b23      	ldr	r3, [pc, #140]	; (8003734 <GPS_parse+0x21c>)
 80036a6:	9304      	str	r3, [sp, #16]
 80036a8:	4b23      	ldr	r3, [pc, #140]	; (8003738 <GPS_parse+0x220>)
 80036aa:	9303      	str	r3, [sp, #12]
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <GPS_parse+0x200>)
 80036ae:	9302      	str	r3, [sp, #8]
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <GPS_parse+0x224>)
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <GPS_parse+0x228>)
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	4b22      	ldr	r3, [pc, #136]	; (8003744 <GPS_parse+0x22c>)
 80036ba:	4a23      	ldr	r2, [pc, #140]	; (8003748 <GPS_parse+0x230>)
 80036bc:	4923      	ldr	r1, [pc, #140]	; (800374c <GPS_parse+0x234>)
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f017 fd3a 	bl	801b138 <siscanf>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	dd01      	ble.n	80036ce <GPS_parse+0x1b6>
            return 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e000      	b.n	80036d0 <GPS_parse+0x1b8>
    }
    return 0;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	0801f298 	.word	0x0801f298
 80036dc:	20006b70 	.word	0x20006b70
 80036e0:	20006b6c 	.word	0x20006b6c
 80036e4:	20006b68 	.word	0x20006b68
 80036e8:	20006b64 	.word	0x20006b64
 80036ec:	20006b60 	.word	0x20006b60
 80036f0:	20006b5d 	.word	0x20006b5d
 80036f4:	20006b50 	.word	0x20006b50
 80036f8:	20006b5c 	.word	0x20006b5c
 80036fc:	20006b54 	.word	0x20006b54
 8003700:	20006b58 	.word	0x20006b58
 8003704:	0801f2a0 	.word	0x0801f2a0
 8003708:	20006b44 	.word	0x20006b44
 800370c:	0801f2c8 	.word	0x0801f2c8
 8003710:	20006b7c 	.word	0x20006b7c
 8003714:	20006b78 	.word	0x20006b78
 8003718:	20006b74 	.word	0x20006b74
 800371c:	0801f2d0 	.word	0x0801f2d0
 8003720:	0801f2f0 	.word	0x0801f2f0
 8003724:	20006b80 	.word	0x20006b80
 8003728:	0801f2f8 	.word	0x0801f2f8
 800372c:	0801f314 	.word	0x0801f314
 8003730:	20006b98 	.word	0x20006b98
 8003734:	20006b94 	.word	0x20006b94
 8003738:	20006b91 	.word	0x20006b91
 800373c:	20006b90 	.word	0x20006b90
 8003740:	20006b8c 	.word	0x20006b8c
 8003744:	20006b88 	.word	0x20006b88
 8003748:	20006b84 	.word	0x20006b84
 800374c:	0801f31c 	.word	0x0801f31c

08003750 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	ed87 0a01 	vstr	s0, [r7, #4]
 800375a:	4603      	mov	r3, r0
 800375c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800375e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003762:	eddf 6a20 	vldr	s13, [pc, #128]	; 80037e4 <GPS_nmea_to_dec+0x94>
 8003766:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800376a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800376e:	ee17 3a90 	vmov	r3, s15
 8003772:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2264      	movs	r2, #100	; 0x64
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	ee07 3a90 	vmov	s15, r3
 8003780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003784:	ed97 7a01 	vldr	s14, [r7, #4]
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003790:	ed97 7a03 	vldr	s14, [r7, #12]
 8003794:	eddf 6a14 	vldr	s13, [pc, #80]	; 80037e8 <GPS_nmea_to_dec+0x98>
 8003798:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800379c:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80037ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	2b53      	cmp	r3, #83	; 0x53
 80037ba:	d002      	beq.n	80037c2 <GPS_nmea_to_dec+0x72>
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	2b57      	cmp	r3, #87	; 0x57
 80037c0:	d105      	bne.n	80037ce <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80037c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037c6:	eef1 7a67 	vneg.f32	s15, s15
 80037ca:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	ee07 3a90 	vmov	s15, r3
}
 80037d4:	eeb0 0a67 	vmov.f32	s0, s15
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	42c80000 	.word	0x42c80000
 80037e8:	42700000 	.word	0x42700000

080037ec <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 80037f6:	4a09      	ldr	r2, [pc, #36]	; (800381c <GPS_init+0x30>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 80037fc:	4a08      	ldr	r2, [pc, #32]	; (8003820 <GPS_init+0x34>)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <GPS_init+0x34>)
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	2210      	movs	r2, #16
 800380c:	4905      	ldr	r1, [pc, #20]	; (8003824 <GPS_init+0x38>)
 800380e:	f00a f986 	bl	800db1e <HAL_UART_Transmit>
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20005f4c 	.word	0x20005f4c
 8003820:	20006c00 	.word	0x20006c00
 8003824:	0801f33c 	.word	0x0801f33c

08003828 <__NVIC_SystemReset>:
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800382c:	f3bf 8f4f 	dsb	sy
}
 8003830:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <__NVIC_SystemReset+0x24>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800383a:	4904      	ldr	r1, [pc, #16]	; (800384c <__NVIC_SystemReset+0x24>)
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <__NVIC_SystemReset+0x28>)
 800383e:	4313      	orrs	r3, r2
 8003840:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003842:	f3bf 8f4f 	dsb	sy
}
 8003846:	bf00      	nop
    __NOP();
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <__NVIC_SystemReset+0x20>
 800384c:	e000ed00 	.word	0xe000ed00
 8003850:	05fa0004 	.word	0x05fa0004

08003854 <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e007      	b.n	8003872 <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <MRT_externalFlashSetup+0x50>)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3301      	adds	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b04      	cmp	r3, #4
 8003876:	ddf4      	ble.n	8003862 <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 8003878:	f000 fcec 	bl	8004254 <W25qxx_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	f083 0301 	eor.w	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 8003888:	f7ff f8a0 	bl	80029cc <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 800388c:	f002 fff8 	bl	8006880 <MRT_WUProcedure>
	MRT_getFlags();
 8003890:	f000 f8a2 	bl	80039d8 <MRT_getFlags>
	MRT_resetInfo(uart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f98d 	bl	8003bb4 <MRT_resetInfo>
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20006c04 	.word	0x20006c04

080038a8 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 80038b8:	f000 f804 	bl	80038c4 <MRT_resetFromStart>
	}

}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(1);
 80038c8:	2001      	movs	r0, #1
 80038ca:	f000 fe15 	bl	80044f8 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80038ce:	2305      	movs	r3, #5
 80038d0:	2200      	movs	r2, #0
 80038d2:	2101      	movs	r1, #1
 80038d4:	4807      	ldr	r0, [pc, #28]	; (80038f4 <MRT_resetFromStart+0x30>)
 80038d6:	f000 ff59 	bl	800478c <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 80038da:	2002      	movs	r0, #2
 80038dc:	f000 fe0c 	bl	80044f8 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 80038e0:	2303      	movs	r3, #3
 80038e2:	2200      	movs	r2, #0
 80038e4:	2102      	movs	r1, #2
 80038e6:	4804      	ldr	r0, [pc, #16]	; (80038f8 <MRT_resetFromStart+0x34>)
 80038e8:	f000 ff50 	bl	800478c <W25qxx_WriteSector>

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 80038ec:	f001 fbea 	bl	80050c4 <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 80038f0:	f7ff ff9a 	bl	8003828 <__NVIC_SystemReset>
 80038f4:	20006c04 	.word	0x20006c04
 80038f8:	20000448 	.word	0x20000448

080038fc <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	e00c      	b.n	8003922 <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <MRT_updateExternalFlashBuffers+0x60>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003910:	7819      	ldrb	r1, [r3, #0]
 8003912:	4a13      	ldr	r2, [pc, #76]	; (8003960 <MRT_updateExternalFlashBuffers+0x64>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	460a      	mov	r2, r1
 800391a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3301      	adds	r3, #1
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b04      	cmp	r3, #4
 8003926:	ddef      	ble.n	8003908 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 8003928:	2300      	movs	r3, #0
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	e00c      	b.n	8003948 <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 800392e:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <MRT_updateExternalFlashBuffers+0x68>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003936:	7819      	ldrb	r1, [r3, #0]
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <MRT_updateExternalFlashBuffers+0x6c>)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4413      	add	r3, r2
 800393e:	460a      	mov	r2, r1
 8003940:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b02      	cmp	r3, #2
 800394c:	ddef      	ble.n	800392e <MRT_updateExternalFlashBuffers+0x32>
	}
}
 800394e:	bf00      	nop
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	20000004 	.word	0x20000004
 8003960:	20005fec 	.word	0x20005fec
 8003964:	20000018 	.word	0x20000018
 8003968:	20006700 	.word	0x20006700

0800396c <MRT_updateFlagsValues>:


void MRT_updateFlagsValues(void){
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	e00b      	b.n	8003990 <MRT_updateFlagsValues+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <MRT_updateFlagsValues+0x5c>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003980:	4912      	ldr	r1, [pc, #72]	; (80039cc <MRT_updateFlagsValues+0x60>)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	440a      	add	r2, r1
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3301      	adds	r3, #1
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b04      	cmp	r3, #4
 8003994:	ddf0      	ble.n	8003978 <MRT_updateFlagsValues+0xc>
	}
	for (int i = 0; i < 3; i++){
 8003996:	2300      	movs	r3, #0
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	e00b      	b.n	80039b4 <MRT_updateFlagsValues+0x48>
		*flash_time[i] = flash_time_buffer[i];
 800399c:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <MRT_updateFlagsValues+0x64>)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a4:	490b      	ldr	r1, [pc, #44]	; (80039d4 <MRT_updateFlagsValues+0x68>)
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	440a      	add	r2, r1
 80039aa:	7812      	ldrb	r2, [r2, #0]
 80039ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	ddf0      	ble.n	800399c <MRT_updateFlagsValues+0x30>
	}
}
 80039ba:	bf00      	nop
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	20000004 	.word	0x20000004
 80039cc:	20005fec 	.word	0x20005fec
 80039d0:	20000018 	.word	0x20000018
 80039d4:	20006700 	.word	0x20006700

080039d8 <MRT_getFlags>:


void MRT_getFlags(void){
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80039dc:	2305      	movs	r3, #5
 80039de:	2200      	movs	r2, #0
 80039e0:	2101      	movs	r1, #1
 80039e2:	486a      	ldr	r0, [pc, #424]	; (8003b8c <MRT_getFlags+0x1b4>)
 80039e4:	f001 f810 	bl	8004a08 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80039e8:	2303      	movs	r3, #3
 80039ea:	2200      	movs	r2, #0
 80039ec:	2102      	movs	r1, #2
 80039ee:	4868      	ldr	r0, [pc, #416]	; (8003b90 <MRT_getFlags+0x1b8>)
 80039f0:	f001 f80a 	bl	8004a08 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 80039f4:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <MRT_getFlags+0x1bc>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10e      	bne.n	8003a1a <MRT_getFlags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 80039fc:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <MRT_getFlags+0x1b4>)
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	3301      	adds	r3, #1
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003a06:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003a08:	2001      	movs	r0, #1
 8003a0a:	f000 fd75 	bl	80044f8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a0e:	2305      	movs	r3, #5
 8003a10:	2200      	movs	r2, #0
 8003a12:	2101      	movs	r1, #1
 8003a14:	485d      	ldr	r0, [pc, #372]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003a16:	f000 feb9 	bl	800478c <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	MRT_updateFlagsValues();
 8003a1a:	f7ff ffa7 	bl	800396c <MRT_updateFlagsValues>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003a1e:	4b5e      	ldr	r3, [pc, #376]	; (8003b98 <MRT_getFlags+0x1c0>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d013      	beq.n	8003a4e <MRT_getFlags+0x76>
 8003a26:	4b5c      	ldr	r3, [pc, #368]	; (8003b98 <MRT_getFlags+0x1c0>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d00f      	beq.n	8003a4e <MRT_getFlags+0x76>
		reset_flag = 0;
 8003a2e:	4b5a      	ldr	r3, [pc, #360]	; (8003b98 <MRT_getFlags+0x1c0>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003a34:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <MRT_getFlags+0x1c0>)
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	4b54      	ldr	r3, [pc, #336]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003a3a:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	f000 fd5b 	bl	80044f8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a42:	2305      	movs	r3, #5
 8003a44:	2200      	movs	r2, #0
 8003a46:	2101      	movs	r1, #1
 8003a48:	4850      	ldr	r0, [pc, #320]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003a4a:	f000 fe9f 	bl	800478c <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003a4e:	4b51      	ldr	r3, [pc, #324]	; (8003b94 <MRT_getFlags+0x1bc>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d017      	beq.n	8003a86 <MRT_getFlags+0xae>
 8003a56:	4b4f      	ldr	r3, [pc, #316]	; (8003b94 <MRT_getFlags+0x1bc>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d013      	beq.n	8003a86 <MRT_getFlags+0xae>
 8003a5e:	4b4d      	ldr	r3, [pc, #308]	; (8003b94 <MRT_getFlags+0x1bc>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d00f      	beq.n	8003a86 <MRT_getFlags+0xae>
		wu_flag = 0;
 8003a66:	4b4b      	ldr	r3, [pc, #300]	; (8003b94 <MRT_getFlags+0x1bc>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003a6c:	4b49      	ldr	r3, [pc, #292]	; (8003b94 <MRT_getFlags+0x1bc>)
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	4b46      	ldr	r3, [pc, #280]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003a72:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003a74:	2001      	movs	r0, #1
 8003a76:	f000 fd3f 	bl	80044f8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4842      	ldr	r0, [pc, #264]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003a82:	f000 fe83 	bl	800478c <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003a86:	4b45      	ldr	r3, [pc, #276]	; (8003b9c <MRT_getFlags+0x1c4>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d013      	beq.n	8003ab6 <MRT_getFlags+0xde>
 8003a8e:	4b43      	ldr	r3, [pc, #268]	; (8003b9c <MRT_getFlags+0x1c4>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d00f      	beq.n	8003ab6 <MRT_getFlags+0xde>
		iwdg_flag = 0;
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <MRT_getFlags+0x1c4>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003a9c:	4b3f      	ldr	r3, [pc, #252]	; (8003b9c <MRT_getFlags+0x1c4>)
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003aa2:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f000 fd27 	bl	80044f8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003aaa:	2305      	movs	r3, #5
 8003aac:	2200      	movs	r2, #0
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4836      	ldr	r0, [pc, #216]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003ab2:	f000 fe6b 	bl	800478c <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	; (8003ba0 <MRT_getFlags+0x1c8>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d013      	beq.n	8003ae6 <MRT_getFlags+0x10e>
 8003abe:	4b38      	ldr	r3, [pc, #224]	; (8003ba0 <MRT_getFlags+0x1c8>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d00f      	beq.n	8003ae6 <MRT_getFlags+0x10e>
		apogee_flag = 0;
 8003ac6:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <MRT_getFlags+0x1c8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <MRT_getFlags+0x1c8>)
 8003ace:	781a      	ldrb	r2, [r3, #0]
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003ad2:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f000 fd0f 	bl	80044f8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ada:	2305      	movs	r3, #5
 8003adc:	2200      	movs	r2, #0
 8003ade:	2101      	movs	r1, #1
 8003ae0:	482a      	ldr	r0, [pc, #168]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003ae2:	f000 fe53 	bl	800478c <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 8003ae6:	4b2f      	ldr	r3, [pc, #188]	; (8003ba4 <MRT_getFlags+0x1cc>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d90f      	bls.n	8003b0e <MRT_getFlags+0x136>
		ejection_state_flag = 0;
 8003aee:	4b2d      	ldr	r3, [pc, #180]	; (8003ba4 <MRT_getFlags+0x1cc>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8003af4:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <MRT_getFlags+0x1cc>)
 8003af6:	781a      	ldrb	r2, [r3, #0]
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003afa:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(1);
 8003afc:	2001      	movs	r0, #1
 8003afe:	f000 fcfb 	bl	80044f8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b02:	2305      	movs	r3, #5
 8003b04:	2200      	movs	r2, #0
 8003b06:	2101      	movs	r1, #1
 8003b08:	4820      	ldr	r0, [pc, #128]	; (8003b8c <MRT_getFlags+0x1b4>)
 8003b0a:	f000 fe3f 	bl	800478c <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003b0e:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <MRT_getFlags+0x1d0>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b17      	cmp	r3, #23
 8003b14:	d90f      	bls.n	8003b36 <MRT_getFlags+0x15e>
		prev_hours = 0;
 8003b16:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <MRT_getFlags+0x1d0>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003b1c:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <MRT_getFlags+0x1d0>)
 8003b1e:	781a      	ldrb	r2, [r3, #0]
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <MRT_getFlags+0x1b8>)
 8003b22:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8003b24:	2002      	movs	r0, #2
 8003b26:	f000 fce7 	bl	80044f8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2102      	movs	r1, #2
 8003b30:	4817      	ldr	r0, [pc, #92]	; (8003b90 <MRT_getFlags+0x1b8>)
 8003b32:	f000 fe2b 	bl	800478c <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <MRT_getFlags+0x1d4>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b3b      	cmp	r3, #59	; 0x3b
 8003b3c:	d90f      	bls.n	8003b5e <MRT_getFlags+0x186>
		prev_min = 0;
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <MRT_getFlags+0x1d4>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8003b44:	4b19      	ldr	r3, [pc, #100]	; (8003bac <MRT_getFlags+0x1d4>)
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <MRT_getFlags+0x1b8>)
 8003b4a:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003b4c:	2002      	movs	r0, #2
 8003b4e:	f000 fcd3 	bl	80044f8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003b52:	2303      	movs	r3, #3
 8003b54:	2200      	movs	r2, #0
 8003b56:	2102      	movs	r1, #2
 8003b58:	480d      	ldr	r0, [pc, #52]	; (8003b90 <MRT_getFlags+0x1b8>)
 8003b5a:	f000 fe17 	bl	800478c <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <MRT_getFlags+0x1d8>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b3b      	cmp	r3, #59	; 0x3b
 8003b64:	d90f      	bls.n	8003b86 <MRT_getFlags+0x1ae>
		prev_sec = 0;
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <MRT_getFlags+0x1d8>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003b6c:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <MRT_getFlags+0x1d8>)
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <MRT_getFlags+0x1b8>)
 8003b72:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8003b74:	2002      	movs	r0, #2
 8003b76:	f000 fcbf 	bl	80044f8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4803      	ldr	r0, [pc, #12]	; (8003b90 <MRT_getFlags+0x1b8>)
 8003b82:	f000 fe03 	bl	800478c <W25qxx_WriteSector>
	}
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20005fec 	.word	0x20005fec
 8003b90:	20006700 	.word	0x20006700
 8003b94:	200006b9 	.word	0x200006b9
 8003b98:	2000043e 	.word	0x2000043e
 8003b9c:	2000043f 	.word	0x2000043f
 8003ba0:	20000440 	.word	0x20000440
 8003ba4:	20000441 	.word	0x20000441
 8003ba8:	20000442 	.word	0x20000442
 8003bac:	20000443 	.word	0x20000443
 8003bb0:	20000444 	.word	0x20000444

08003bb4 <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb6:	b0a7      	sub	sp, #156	; 0x9c
 8003bb8:	af04      	add	r7, sp, #16
 8003bba:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8003bbc:	4b7e      	ldr	r3, [pc, #504]	; (8003db8 <MRT_resetInfo+0x204>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	461d      	mov	r5, r3
 8003bc2:	4b7e      	ldr	r3, [pc, #504]	; (8003dbc <MRT_resetInfo+0x208>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	461e      	mov	r6, r3
 8003bc8:	4b7d      	ldr	r3, [pc, #500]	; (8003dc0 <MRT_resetInfo+0x20c>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b7d      	ldr	r3, [pc, #500]	; (8003dc4 <MRT_resetInfo+0x210>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4b7c      	ldr	r3, [pc, #496]	; (8003dc8 <MRT_resetInfo+0x214>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	461c      	mov	r4, r3
 8003bda:	4b7c      	ldr	r3, [pc, #496]	; (8003dcc <MRT_resetInfo+0x218>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	f107 0020 	add.w	r0, r7, #32
 8003be2:	9303      	str	r3, [sp, #12]
 8003be4:	9402      	str	r4, [sp, #8]
 8003be6:	9101      	str	r1, [sp, #4]
 8003be8:	9200      	str	r2, [sp, #0]
 8003bea:	4633      	mov	r3, r6
 8003bec:	462a      	mov	r2, r5
 8003bee:	4978      	ldr	r1, [pc, #480]	; (8003dd0 <MRT_resetInfo+0x21c>)
 8003bf0:	f017 fa82 	bl	801b0f8 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003bf4:	f107 0320 	add.w	r3, r7, #32
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fc faf9 	bl	80001f0 <strlen>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	f107 0120 	add.w	r1, r7, #32
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f009 ff87 	bl	800db1e <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003c10:	4b6b      	ldr	r3, [pc, #428]	; (8003dc0 <MRT_resetInfo+0x20c>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d11e      	bne.n	8003c56 <MRT_resetInfo+0xa2>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	2213      	movs	r2, #19
 8003c1e:	496d      	ldr	r1, [pc, #436]	; (8003dd4 <MRT_resetInfo+0x220>)
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f009 ff7c 	bl	800db1e <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003c26:	4b66      	ldr	r3, [pc, #408]	; (8003dc0 <MRT_resetInfo+0x20c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003c2c:	4b64      	ldr	r3, [pc, #400]	; (8003dc0 <MRT_resetInfo+0x20c>)
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	4b69      	ldr	r3, [pc, #420]	; (8003dd8 <MRT_resetInfo+0x224>)
 8003c32:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003c34:	2001      	movs	r0, #1
 8003c36:	f000 fc5f 	bl	80044f8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003c3a:	2305      	movs	r3, #5
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4865      	ldr	r0, [pc, #404]	; (8003dd8 <MRT_resetInfo+0x224>)
 8003c42:	f000 fda3 	bl	800478c <W25qxx_WriteSector>

		  HAL_Delay(1000);
 8003c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c4a:	f003 fad1 	bl	80071f0 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8003c4e:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8003c52:	f002 fed3 	bl	80069fc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8003c56:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <MRT_resetInfo+0x208>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d03a      	beq.n	8003cd4 <MRT_resetInfo+0x120>
		  char buf[20];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8003c5e:	4b57      	ldr	r3, [pc, #348]	; (8003dbc <MRT_resetInfo+0x208>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	495c      	ldr	r1, [pc, #368]	; (8003ddc <MRT_resetInfo+0x228>)
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f017 fa44 	bl	801b0f8 <siprintf>
		  HAL_UART_Transmit(uart, buf, strlen(buf), HAL_MAX_DELAY);
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fc fabb 	bl	80001f0 <strlen>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	f107 010c 	add.w	r1, r7, #12
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f009 ff49 	bl	800db1e <HAL_UART_Transmit>

		  HAL_UART_Transmit(uart, "Resetting RTC time\r\n", 20, HAL_MAX_DELAY);
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	2214      	movs	r2, #20
 8003c92:	4953      	ldr	r1, [pc, #332]	; (8003de0 <MRT_resetInfo+0x22c>)
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f009 ff42 	bl	800db1e <HAL_UART_Transmit>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8003c9a:	2002      	movs	r0, #2
 8003c9c:	f000 fc2c 	bl	80044f8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	484f      	ldr	r0, [pc, #316]	; (8003de4 <MRT_resetInfo+0x230>)
 8003ca8:	f000 fd70 	bl	800478c <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cb2:	e00b      	b.n	8003ccc <MRT_resetInfo+0x118>
			  *flash_time[i] = 0x0;
 8003cb4:	4a4c      	ldr	r2, [pc, #304]	; (8003de8 <MRT_resetInfo+0x234>)
 8003cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8003cc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	ddef      	ble.n	8003cb4 <MRT_resetInfo+0x100>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003cd4:	4b38      	ldr	r3, [pc, #224]	; (8003db8 <MRT_resetInfo+0x204>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <MRT_resetInfo+0x156>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce0:	220e      	movs	r2, #14
 8003ce2:	4942      	ldr	r1, [pc, #264]	; (8003dec <MRT_resetInfo+0x238>)
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f009 ff1a 	bl	800db1e <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003cea:	4b33      	ldr	r3, [pc, #204]	; (8003db8 <MRT_resetInfo+0x204>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003cf0:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <MRT_resetInfo+0x204>)
 8003cf2:	781a      	ldrb	r2, [r3, #0]
 8003cf4:	4b38      	ldr	r3, [pc, #224]	; (8003dd8 <MRT_resetInfo+0x224>)
 8003cf6:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f000 fbfd 	bl	80044f8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003cfe:	2305      	movs	r3, #5
 8003d00:	2200      	movs	r2, #0
 8003d02:	2101      	movs	r1, #1
 8003d04:	4834      	ldr	r0, [pc, #208]	; (8003dd8 <MRT_resetInfo+0x224>)
 8003d06:	f000 fd41 	bl	800478c <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag==0){
 8003d0a:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <MRT_resetInfo+0x23c>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d107      	bne.n	8003d22 <MRT_resetInfo+0x16e>
		  HAL_UART_Transmit(uart, "Pre-apogee\r\n", 12, HAL_MAX_DELAY);
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	220c      	movs	r2, #12
 8003d18:	4936      	ldr	r1, [pc, #216]	; (8003df4 <MRT_resetInfo+0x240>)
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f009 feff 	bl	800db1e <HAL_UART_Transmit>
 8003d20:	e00a      	b.n	8003d38 <MRT_resetInfo+0x184>
	  }
	  else if(apogee_flag==1){
 8003d22:	4b33      	ldr	r3, [pc, #204]	; (8003df0 <MRT_resetInfo+0x23c>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d106      	bne.n	8003d38 <MRT_resetInfo+0x184>
		  HAL_UART_Transmit(uart, "Post-apogee\r\n", 13, HAL_MAX_DELAY);
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	220d      	movs	r2, #13
 8003d30:	4931      	ldr	r1, [pc, #196]	; (8003df8 <MRT_resetInfo+0x244>)
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f009 fef3 	bl	800db1e <HAL_UART_Transmit>
	  }


	  //Check ejection state
	  if (ejection_state_flag==0){
 8003d38:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <MRT_resetInfo+0x248>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d107      	bne.n	8003d50 <MRT_resetInfo+0x19c>
		  HAL_UART_Transmit(uart, "Ejection State: Pad\r\n", 21, HAL_MAX_DELAY);
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	2215      	movs	r2, #21
 8003d46:	492e      	ldr	r1, [pc, #184]	; (8003e00 <MRT_resetInfo+0x24c>)
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f009 fee8 	bl	800db1e <HAL_UART_Transmit>
		  HAL_UART_Transmit(uart, "Ejection State: Main descent\r\n", 30, HAL_MAX_DELAY);
	  }
	  else if(ejection_state_flag==4){
		  HAL_UART_Transmit(uart, "Ejection State: Landed\r\n", 24, HAL_MAX_DELAY);
	  }
}
 8003d4e:	e02e      	b.n	8003dae <MRT_resetInfo+0x1fa>
	  else if(ejection_state_flag==1){
 8003d50:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <MRT_resetInfo+0x248>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d107      	bne.n	8003d68 <MRT_resetInfo+0x1b4>
		  HAL_UART_Transmit(uart, "Ejection State: Boost\r\n", 23, HAL_MAX_DELAY);
 8003d58:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5c:	2217      	movs	r2, #23
 8003d5e:	4929      	ldr	r1, [pc, #164]	; (8003e04 <MRT_resetInfo+0x250>)
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f009 fedc 	bl	800db1e <HAL_UART_Transmit>
}
 8003d66:	e022      	b.n	8003dae <MRT_resetInfo+0x1fa>
	  else if(ejection_state_flag==2){
 8003d68:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <MRT_resetInfo+0x248>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d107      	bne.n	8003d80 <MRT_resetInfo+0x1cc>
		  HAL_UART_Transmit(uart, "Ejection State: Drogue descent\r\n", 32, HAL_MAX_DELAY);
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295
 8003d74:	2220      	movs	r2, #32
 8003d76:	4924      	ldr	r1, [pc, #144]	; (8003e08 <MRT_resetInfo+0x254>)
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f009 fed0 	bl	800db1e <HAL_UART_Transmit>
}
 8003d7e:	e016      	b.n	8003dae <MRT_resetInfo+0x1fa>
	  else if(ejection_state_flag==3){
 8003d80:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <MRT_resetInfo+0x248>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d107      	bne.n	8003d98 <MRT_resetInfo+0x1e4>
		  HAL_UART_Transmit(uart, "Ejection State: Main descent\r\n", 30, HAL_MAX_DELAY);
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	221e      	movs	r2, #30
 8003d8e:	491f      	ldr	r1, [pc, #124]	; (8003e0c <MRT_resetInfo+0x258>)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f009 fec4 	bl	800db1e <HAL_UART_Transmit>
}
 8003d96:	e00a      	b.n	8003dae <MRT_resetInfo+0x1fa>
	  else if(ejection_state_flag==4){
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <MRT_resetInfo+0x248>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d106      	bne.n	8003dae <MRT_resetInfo+0x1fa>
		  HAL_UART_Transmit(uart, "Ejection State: Landed\r\n", 24, HAL_MAX_DELAY);
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	2218      	movs	r2, #24
 8003da6:	491a      	ldr	r1, [pc, #104]	; (8003e10 <MRT_resetInfo+0x25c>)
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f009 feb8 	bl	800db1e <HAL_UART_Transmit>
}
 8003dae:	bf00      	nop
 8003db0:	378c      	adds	r7, #140	; 0x8c
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db6:	bf00      	nop
 8003db8:	2000043e 	.word	0x2000043e
 8003dbc:	200006b9 	.word	0x200006b9
 8003dc0:	2000043f 	.word	0x2000043f
 8003dc4:	20000442 	.word	0x20000442
 8003dc8:	20000443 	.word	0x20000443
 8003dcc:	20000444 	.word	0x20000444
 8003dd0:	0801f380 	.word	0x0801f380
 8003dd4:	0801f3c0 	.word	0x0801f3c0
 8003dd8:	20005fec 	.word	0x20005fec
 8003ddc:	0801f3d4 	.word	0x0801f3d4
 8003de0:	0801f3e4 	.word	0x0801f3e4
 8003de4:	20000448 	.word	0x20000448
 8003de8:	20000018 	.word	0x20000018
 8003dec:	0801f3fc 	.word	0x0801f3fc
 8003df0:	20000440 	.word	0x20000440
 8003df4:	0801f40c 	.word	0x0801f40c
 8003df8:	0801f41c 	.word	0x0801f41c
 8003dfc:	20000441 	.word	0x20000441
 8003e00:	0801f42c 	.word	0x0801f42c
 8003e04:	0801f444 	.word	0x0801f444
 8003e08:	0801f45c 	.word	0x0801f45c
 8003e0c:	0801f480 	.word	0x0801f480
 8003e10:	0801f4a0 	.word	0x0801f4a0

08003e14 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 8003e18:	f7ff fd70 	bl	80038fc <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f000 fb6b 	bl	80044f8 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003e22:	2303      	movs	r3, #3
 8003e24:	2200      	movs	r2, #0
 8003e26:	2102      	movs	r1, #2
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <MRT_saveRTCTime+0x20>)
 8003e2a:	f000 fcaf 	bl	800478c <W25qxx_WriteSector>
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20006700 	.word	0x20006700

08003e38 <MRT_prop_poll_pressure_transducer>:


/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f003 fa3d 	bl	80072c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8003e46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f003 fb3d 	bl	80074ca <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f003 fbc5 	bl	80075e0 <HAL_ADC_GetValue>
 8003e56:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f003 fb03 	bl	8007464 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7fc fb60 	bl	8000524 <__aeabi_ui2d>
 8003e64:	a312      	add	r3, pc, #72	; (adr r3, 8003eb0 <MRT_prop_poll_pressure_transducer+0x78>)
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	f7fc fcff 	bl	800086c <__aeabi_ddiv>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	f7fc fec7 	bl	8000c08 <__aeabi_d2f>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fc fb73 	bl	8000568 <__aeabi_f2d>
 8003e82:	a30d      	add	r3, pc, #52	; (adr r3, 8003eb8 <MRT_prop_poll_pressure_transducer+0x80>)
 8003e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e88:	f7fc fbc6 	bl	8000618 <__aeabi_dmul>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	f7fc feb8 	bl	8000c08 <__aeabi_d2f>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	60bb      	str	r3, [r7, #8]

	return voltage;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	ee07 3a90 	vmov	s15, r3
}
 8003ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	f3af 8000 	nop.w
 8003eb0:	00000000 	.word	0x00000000
 8003eb4:	40affe00 	.word	0x40affe00
 8003eb8:	66666666 	.word	0x66666666
 8003ebc:	400a6666 	.word	0x400a6666

08003ec0 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 8003eca:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ece:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003f50 <MRT_getAltitude+0x90>
 8003ed2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ed6:	ee16 0a90 	vmov	r0, s13
 8003eda:	f7fc fb45 	bl	8000568 <__aeabi_f2d>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003f40 <MRT_getAltitude+0x80>
 8003ee6:	ec43 2b10 	vmov	d0, r2, r3
 8003eea:	f014 ff77 	bl	8018ddc <pow>
 8003eee:	ec51 0b10 	vmov	r0, r1, d0
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <MRT_getAltitude+0x94>)
 8003ef8:	f7fc f9d6 	bl	80002a8 <__aeabi_dsub>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	a310      	add	r3, pc, #64	; (adr r3, 8003f48 <MRT_getAltitude+0x88>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f7fc fb85 	bl	8000618 <__aeabi_dmul>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <MRT_getAltitude+0x98>)
 8003f1c:	f7fc f9c6 	bl	80002ac <__adddf3>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f7fc fe6e 	bl	8000c08 <__aeabi_d2f>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	ee07 3a90 	vmov	s15, r3
}
 8003f32:	eeb0 0a67 	vmov.f32	s0, s15
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	f3af 8000 	nop.w
 8003f40:	b4202506 	.word	0xb4202506
 8003f44:	3fc85a8b 	.word	0x3fc85a8b
 8003f48:	76276276 	.word	0x76276276
 8003f4c:	c0e481c2 	.word	0xc0e481c2
 8003f50:	447d8000 	.word	0x447d8000
 8003f54:	3ff00000 	.word	0x3ff00000
 8003f58:	40590000 	.word	0x40590000

08003f5c <tone_freq>:


extern TIM_HandleTypeDef htim2;

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8003f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f6c:	491c      	ldr	r1, [pc, #112]	; (8003fe0 <tone_freq+0x84>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 8003f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	e01f      	b.n	8003fcc <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003f8c:	2108      	movs	r1, #8
 8003f8e:	4815      	ldr	r0, [pc, #84]	; (8003fe4 <tone_freq+0x88>)
 8003f90:	f008 fde6 	bl	800cb60 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 8003f94:	2201      	movs	r2, #1
 8003f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f9a:	4813      	ldr	r0, [pc, #76]	; (8003fe8 <tone_freq+0x8c>)
 8003f9c:	f004 f834 	bl	8008008 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f003 f925 	bl	80071f0 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8003fa6:	2108      	movs	r1, #8
 8003fa8:	480e      	ldr	r0, [pc, #56]	; (8003fe4 <tone_freq+0x88>)
 8003faa:	f008 fea1 	bl	800ccf0 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fb4:	480c      	ldr	r0, [pc, #48]	; (8003fe8 <tone_freq+0x8c>)
 8003fb6:	f004 f827 	bl	8008008 <HAL_GPIO_WritePin>
		if (repeats > 1)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d902      	bls.n	8003fc6 <tone_freq+0x6a>
			HAL_Delay(duration);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f003 f915 	bl	80071f0 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d3db      	bcc.n	8003f8c <tone_freq+0x30>
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	000f4240 	.word	0x000f4240
 8003fe4:	20006858 	.word	0x20006858
 8003fe8:	40020400 	.word	0x40020400

08003fec <buzz_success>:

void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); };
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	f240 4216 	movw	r2, #1046	; 0x416
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	204b      	movs	r0, #75	; 0x4b
 8003ff8:	f7ff ffb0 	bl	8003f5c <tone_freq>
 8003ffc:	bf00      	nop
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <buzz_failure>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); };
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
 8004004:	22dc      	movs	r2, #220	; 0xdc
 8004006:	2103      	movs	r1, #3
 8004008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800400c:	f7ff ffa6 	bl	8003f5c <tone_freq>
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}

08004014 <buzz_startup_success>:

void buzz_startup_success(void) {
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800401a:	2300      	movs	r3, #0
 800401c:	71fb      	strb	r3, [r7, #7]
 800401e:	e008      	b.n	8004032 <buzz_startup_success+0x1e>
		buzz_success();
 8004020:	f7ff ffe4 	bl	8003fec <buzz_success>
		HAL_Delay(1000);
 8004024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004028:	f003 f8e2 	bl	80071f0 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	3301      	adds	r3, #1
 8004030:	71fb      	strb	r3, [r7, #7]
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d9f3      	bls.n	8004020 <buzz_startup_success+0xc>
	}
};
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af02      	add	r7, sp, #8
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800404e:	f107 020f 	add.w	r2, r7, #15
 8004052:	1df9      	adds	r1, r7, #7
 8004054:	2364      	movs	r3, #100	; 0x64
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2301      	movs	r3, #1
 800405a:	4804      	ldr	r0, [pc, #16]	; (800406c <W25qxx_Spi+0x28>)
 800405c:	f008 f994 	bl	800c388 <HAL_SPI_TransmitReceive>
	return ret;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20005f50 	.word	0x20005f50

08004070 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]
 8004082:	2300      	movs	r3, #0
 8004084:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004086:	2200      	movs	r2, #0
 8004088:	2140      	movs	r1, #64	; 0x40
 800408a:	4813      	ldr	r0, [pc, #76]	; (80040d8 <W25qxx_ReadID+0x68>)
 800408c:	f003 ffbc 	bl	8008008 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004090:	209f      	movs	r0, #159	; 0x9f
 8004092:	f7ff ffd7 	bl	8004044 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004096:	20a5      	movs	r0, #165	; 0xa5
 8004098:	f7ff ffd4 	bl	8004044 <W25qxx_Spi>
 800409c:	4603      	mov	r3, r0
 800409e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80040a0:	20a5      	movs	r0, #165	; 0xa5
 80040a2:	f7ff ffcf 	bl	8004044 <W25qxx_Spi>
 80040a6:	4603      	mov	r3, r0
 80040a8:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80040aa:	20a5      	movs	r0, #165	; 0xa5
 80040ac:	f7ff ffca 	bl	8004044 <W25qxx_Spi>
 80040b0:	4603      	mov	r3, r0
 80040b2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80040b4:	2201      	movs	r2, #1
 80040b6:	2140      	movs	r1, #64	; 0x40
 80040b8:	4807      	ldr	r0, [pc, #28]	; (80040d8 <W25qxx_ReadID+0x68>)
 80040ba:	f003 ffa5 	bl	8008008 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	041a      	lsls	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	4313      	orrs	r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
	return Temp;
 80040ce:	68fb      	ldr	r3, [r7, #12]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40020c00 	.word	0x40020c00

080040dc <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80040e2:	2200      	movs	r2, #0
 80040e4:	2140      	movs	r1, #64	; 0x40
 80040e6:	4816      	ldr	r0, [pc, #88]	; (8004140 <W25qxx_ReadUniqID+0x64>)
 80040e8:	f003 ff8e 	bl	8008008 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80040ec:	204b      	movs	r0, #75	; 0x4b
 80040ee:	f7ff ffa9 	bl	8004044 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	71fb      	strb	r3, [r7, #7]
 80040f6:	e005      	b.n	8004104 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80040f8:	20a5      	movs	r0, #165	; 0xa5
 80040fa:	f7ff ffa3 	bl	8004044 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	3301      	adds	r3, #1
 8004102:	71fb      	strb	r3, [r7, #7]
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d9f6      	bls.n	80040f8 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	71bb      	strb	r3, [r7, #6]
 800410e:	e00b      	b.n	8004128 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004110:	79bc      	ldrb	r4, [r7, #6]
 8004112:	20a5      	movs	r0, #165	; 0xa5
 8004114:	f7ff ff96 	bl	8004044 <W25qxx_Spi>
 8004118:	4603      	mov	r3, r0
 800411a:	461a      	mov	r2, r3
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <W25qxx_ReadUniqID+0x68>)
 800411e:	4423      	add	r3, r4
 8004120:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8004122:	79bb      	ldrb	r3, [r7, #6]
 8004124:	3301      	adds	r3, #1
 8004126:	71bb      	strb	r3, [r7, #6]
 8004128:	79bb      	ldrb	r3, [r7, #6]
 800412a:	2b07      	cmp	r3, #7
 800412c:	d9f0      	bls.n	8004110 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800412e:	2201      	movs	r2, #1
 8004130:	2140      	movs	r1, #64	; 0x40
 8004132:	4803      	ldr	r0, [pc, #12]	; (8004140 <W25qxx_ReadUniqID+0x64>)
 8004134:	f003 ff68 	bl	8008008 <HAL_GPIO_WritePin>
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bd90      	pop	{r4, r7, pc}
 8004140:	40020c00 	.word	0x40020c00
 8004144:	20006c0c 	.word	0x20006c0c

08004148 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800414c:	2200      	movs	r2, #0
 800414e:	2140      	movs	r1, #64	; 0x40
 8004150:	4807      	ldr	r0, [pc, #28]	; (8004170 <W25qxx_WriteEnable+0x28>)
 8004152:	f003 ff59 	bl	8008008 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004156:	2006      	movs	r0, #6
 8004158:	f7ff ff74 	bl	8004044 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800415c:	2201      	movs	r2, #1
 800415e:	2140      	movs	r1, #64	; 0x40
 8004160:	4803      	ldr	r0, [pc, #12]	; (8004170 <W25qxx_WriteEnable+0x28>)
 8004162:	f003 ff51 	bl	8008008 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004166:	2001      	movs	r0, #1
 8004168:	f010 fda7 	bl	8014cba <osDelay>
}
 800416c:	bf00      	nop
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40020c00 	.word	0x40020c00

08004174 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004182:	2200      	movs	r2, #0
 8004184:	2140      	movs	r1, #64	; 0x40
 8004186:	481c      	ldr	r0, [pc, #112]	; (80041f8 <W25qxx_ReadStatusRegister+0x84>)
 8004188:	f003 ff3e 	bl	8008008 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d10c      	bne.n	80041ac <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004192:	2005      	movs	r0, #5
 8004194:	f7ff ff56 	bl	8004044 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004198:	20a5      	movs	r0, #165	; 0xa5
 800419a:	f7ff ff53 	bl	8004044 <W25qxx_Spi>
 800419e:	4603      	mov	r3, r0
 80041a0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80041a2:	4a16      	ldr	r2, [pc, #88]	; (80041fc <W25qxx_ReadStatusRegister+0x88>)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80041aa:	e01b      	b.n	80041e4 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d10c      	bne.n	80041cc <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80041b2:	2035      	movs	r0, #53	; 0x35
 80041b4:	f7ff ff46 	bl	8004044 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041b8:	20a5      	movs	r0, #165	; 0xa5
 80041ba:	f7ff ff43 	bl	8004044 <W25qxx_Spi>
 80041be:	4603      	mov	r3, r0
 80041c0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80041c2:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <W25qxx_ReadStatusRegister+0x88>)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80041ca:	e00b      	b.n	80041e4 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80041cc:	2015      	movs	r0, #21
 80041ce:	f7ff ff39 	bl	8004044 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041d2:	20a5      	movs	r0, #165	; 0xa5
 80041d4:	f7ff ff36 	bl	8004044 <W25qxx_Spi>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80041dc:	4a07      	ldr	r2, [pc, #28]	; (80041fc <W25qxx_ReadStatusRegister+0x88>)
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041e4:	2201      	movs	r2, #1
 80041e6:	2140      	movs	r1, #64	; 0x40
 80041e8:	4803      	ldr	r0, [pc, #12]	; (80041f8 <W25qxx_ReadStatusRegister+0x84>)
 80041ea:	f003 ff0d 	bl	8008008 <HAL_GPIO_WritePin>
	return status;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40020c00 	.word	0x40020c00
 80041fc:	20006c0c 	.word	0x20006c0c

08004200 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004204:	2001      	movs	r0, #1
 8004206:	f010 fd58 	bl	8014cba <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800420a:	2200      	movs	r2, #0
 800420c:	2140      	movs	r1, #64	; 0x40
 800420e:	480f      	ldr	r0, [pc, #60]	; (800424c <W25qxx_WaitForWriteEnd+0x4c>)
 8004210:	f003 fefa 	bl	8008008 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004214:	2005      	movs	r0, #5
 8004216:	f7ff ff15 	bl	8004044 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800421a:	20a5      	movs	r0, #165	; 0xa5
 800421c:	f7ff ff12 	bl	8004044 <W25qxx_Spi>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <W25qxx_WaitForWriteEnd+0x50>)
 8004226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800422a:	2001      	movs	r0, #1
 800422c:	f010 fd45 	bl	8014cba <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <W25qxx_WaitForWriteEnd+0x50>)
 8004232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1ed      	bne.n	800421a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800423e:	2201      	movs	r2, #1
 8004240:	2140      	movs	r1, #64	; 0x40
 8004242:	4802      	ldr	r0, [pc, #8]	; (800424c <W25qxx_WaitForWriteEnd+0x4c>)
 8004244:	f003 fee0 	bl	8008008 <HAL_GPIO_WritePin>
}
 8004248:	bf00      	nop
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40020c00 	.word	0x40020c00
 8004250:	20006c0c 	.word	0x20006c0c

08004254 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800425a:	4b90      	ldr	r3, [pc, #576]	; (800449c <W25qxx_Init+0x248>)
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004262:	e002      	b.n	800426a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004264:	2001      	movs	r0, #1
 8004266:	f010 fd28 	bl	8014cba <osDelay>
	while (HAL_GetTick() < 100)
 800426a:	f002 ffb5 	bl	80071d8 <HAL_GetTick>
 800426e:	4603      	mov	r3, r0
 8004270:	2b63      	cmp	r3, #99	; 0x63
 8004272:	d9f7      	bls.n	8004264 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004274:	2201      	movs	r2, #1
 8004276:	2140      	movs	r1, #64	; 0x40
 8004278:	4889      	ldr	r0, [pc, #548]	; (80044a0 <W25qxx_Init+0x24c>)
 800427a:	f003 fec5 	bl	8008008 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800427e:	2064      	movs	r0, #100	; 0x64
 8004280:	f010 fd1b 	bl	8014cba <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004284:	4887      	ldr	r0, [pc, #540]	; (80044a4 <W25qxx_Init+0x250>)
 8004286:	f016 fe6b 	bl	801af60 <puts>
#endif
	id = W25qxx_ReadID();
 800428a:	f7ff fef1 	bl	8004070 <W25qxx_ReadID>
 800428e:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4885      	ldr	r0, [pc, #532]	; (80044a8 <W25qxx_Init+0x254>)
 8004294:	f016 fdde 	bl	801ae54 <iprintf>
#endif
	switch (id & 0x000000FF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	3b11      	subs	r3, #17
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	f200 808b 	bhi.w	80043ba <W25qxx_Init+0x166>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <W25qxx_Init+0x58>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080043a7 	.word	0x080043a7
 80042b0:	08004393 	.word	0x08004393
 80042b4:	0800437f 	.word	0x0800437f
 80042b8:	0800436b 	.word	0x0800436b
 80042bc:	08004357 	.word	0x08004357
 80042c0:	08004343 	.word	0x08004343
 80042c4:	0800432f 	.word	0x0800432f
 80042c8:	08004319 	.word	0x08004319
 80042cc:	08004303 	.word	0x08004303
 80042d0:	080043bb 	.word	0x080043bb
 80042d4:	080043bb 	.word	0x080043bb
 80042d8:	080043bb 	.word	0x080043bb
 80042dc:	080043bb 	.word	0x080043bb
 80042e0:	080043bb 	.word	0x080043bb
 80042e4:	080043bb 	.word	0x080043bb
 80042e8:	080042ed 	.word	0x080042ed
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80042ec:	4b6b      	ldr	r3, [pc, #428]	; (800449c <W25qxx_Init+0x248>)
 80042ee:	220a      	movs	r2, #10
 80042f0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80042f2:	4b6a      	ldr	r3, [pc, #424]	; (800449c <W25qxx_Init+0x248>)
 80042f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80042fa:	486c      	ldr	r0, [pc, #432]	; (80044ac <W25qxx_Init+0x258>)
 80042fc:	f016 fe30 	bl	801af60 <puts>
#endif
		break;
 8004300:	e064      	b.n	80043cc <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004302:	4b66      	ldr	r3, [pc, #408]	; (800449c <W25qxx_Init+0x248>)
 8004304:	2209      	movs	r2, #9
 8004306:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004308:	4b64      	ldr	r3, [pc, #400]	; (800449c <W25qxx_Init+0x248>)
 800430a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004310:	4867      	ldr	r0, [pc, #412]	; (80044b0 <W25qxx_Init+0x25c>)
 8004312:	f016 fe25 	bl	801af60 <puts>
#endif
		break;
 8004316:	e059      	b.n	80043cc <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004318:	4b60      	ldr	r3, [pc, #384]	; (800449c <W25qxx_Init+0x248>)
 800431a:	2208      	movs	r2, #8
 800431c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800431e:	4b5f      	ldr	r3, [pc, #380]	; (800449c <W25qxx_Init+0x248>)
 8004320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004324:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8004326:	4863      	ldr	r0, [pc, #396]	; (80044b4 <W25qxx_Init+0x260>)
 8004328:	f016 fe1a 	bl	801af60 <puts>
#endif
		break;
 800432c:	e04e      	b.n	80043cc <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800432e:	4b5b      	ldr	r3, [pc, #364]	; (800449c <W25qxx_Init+0x248>)
 8004330:	2207      	movs	r2, #7
 8004332:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004334:	4b59      	ldr	r3, [pc, #356]	; (800449c <W25qxx_Init+0x248>)
 8004336:	2280      	movs	r2, #128	; 0x80
 8004338:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 800433a:	485f      	ldr	r0, [pc, #380]	; (80044b8 <W25qxx_Init+0x264>)
 800433c:	f016 fe10 	bl	801af60 <puts>
#endif
		break;
 8004340:	e044      	b.n	80043cc <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004342:	4b56      	ldr	r3, [pc, #344]	; (800449c <W25qxx_Init+0x248>)
 8004344:	2206      	movs	r2, #6
 8004346:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004348:	4b54      	ldr	r3, [pc, #336]	; (800449c <W25qxx_Init+0x248>)
 800434a:	2240      	movs	r2, #64	; 0x40
 800434c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 800434e:	485b      	ldr	r0, [pc, #364]	; (80044bc <W25qxx_Init+0x268>)
 8004350:	f016 fe06 	bl	801af60 <puts>
#endif
		break;
 8004354:	e03a      	b.n	80043cc <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004356:	4b51      	ldr	r3, [pc, #324]	; (800449c <W25qxx_Init+0x248>)
 8004358:	2205      	movs	r2, #5
 800435a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800435c:	4b4f      	ldr	r3, [pc, #316]	; (800449c <W25qxx_Init+0x248>)
 800435e:	2220      	movs	r2, #32
 8004360:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8004362:	4857      	ldr	r0, [pc, #348]	; (80044c0 <W25qxx_Init+0x26c>)
 8004364:	f016 fdfc 	bl	801af60 <puts>
#endif
		break;
 8004368:	e030      	b.n	80043cc <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800436a:	4b4c      	ldr	r3, [pc, #304]	; (800449c <W25qxx_Init+0x248>)
 800436c:	2204      	movs	r2, #4
 800436e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004370:	4b4a      	ldr	r3, [pc, #296]	; (800449c <W25qxx_Init+0x248>)
 8004372:	2210      	movs	r2, #16
 8004374:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004376:	4853      	ldr	r0, [pc, #332]	; (80044c4 <W25qxx_Init+0x270>)
 8004378:	f016 fdf2 	bl	801af60 <puts>
#endif
		break;
 800437c:	e026      	b.n	80043cc <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800437e:	4b47      	ldr	r3, [pc, #284]	; (800449c <W25qxx_Init+0x248>)
 8004380:	2203      	movs	r2, #3
 8004382:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004384:	4b45      	ldr	r3, [pc, #276]	; (800449c <W25qxx_Init+0x248>)
 8004386:	2208      	movs	r2, #8
 8004388:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 800438a:	484f      	ldr	r0, [pc, #316]	; (80044c8 <W25qxx_Init+0x274>)
 800438c:	f016 fde8 	bl	801af60 <puts>
#endif
		break;
 8004390:	e01c      	b.n	80043cc <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004392:	4b42      	ldr	r3, [pc, #264]	; (800449c <W25qxx_Init+0x248>)
 8004394:	2202      	movs	r2, #2
 8004396:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004398:	4b40      	ldr	r3, [pc, #256]	; (800449c <W25qxx_Init+0x248>)
 800439a:	2204      	movs	r2, #4
 800439c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 800439e:	484b      	ldr	r0, [pc, #300]	; (80044cc <W25qxx_Init+0x278>)
 80043a0:	f016 fdde 	bl	801af60 <puts>
#endif
		break;
 80043a4:	e012      	b.n	80043cc <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80043a6:	4b3d      	ldr	r3, [pc, #244]	; (800449c <W25qxx_Init+0x248>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80043ac:	4b3b      	ldr	r3, [pc, #236]	; (800449c <W25qxx_Init+0x248>)
 80043ae:	2202      	movs	r2, #2
 80043b0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 80043b2:	4847      	ldr	r0, [pc, #284]	; (80044d0 <W25qxx_Init+0x27c>)
 80043b4:	f016 fdd4 	bl	801af60 <puts>
#endif
		break;
 80043b8:	e008      	b.n	80043cc <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 80043ba:	4846      	ldr	r0, [pc, #280]	; (80044d4 <W25qxx_Init+0x280>)
 80043bc:	f016 fdd0 	bl	801af60 <puts>
#endif
		w25qxx.Lock = 0;
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <W25qxx_Init+0x248>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e063      	b.n	8004494 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 80043cc:	4b33      	ldr	r3, [pc, #204]	; (800449c <W25qxx_Init+0x248>)
 80043ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d2:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80043d4:	4b31      	ldr	r3, [pc, #196]	; (800449c <W25qxx_Init+0x248>)
 80043d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043da:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80043dc:	4b2f      	ldr	r3, [pc, #188]	; (800449c <W25qxx_Init+0x248>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	4a2e      	ldr	r2, [pc, #184]	; (800449c <W25qxx_Init+0x248>)
 80043e4:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80043e6:	4b2d      	ldr	r3, [pc, #180]	; (800449c <W25qxx_Init+0x248>)
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	4a2c      	ldr	r2, [pc, #176]	; (800449c <W25qxx_Init+0x248>)
 80043ec:	6912      	ldr	r2, [r2, #16]
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	4a2a      	ldr	r2, [pc, #168]	; (800449c <W25qxx_Init+0x248>)
 80043f4:	8952      	ldrh	r2, [r2, #10]
 80043f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80043fa:	4a28      	ldr	r2, [pc, #160]	; (800449c <W25qxx_Init+0x248>)
 80043fc:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80043fe:	4b27      	ldr	r3, [pc, #156]	; (800449c <W25qxx_Init+0x248>)
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	4a25      	ldr	r2, [pc, #148]	; (800449c <W25qxx_Init+0x248>)
 8004406:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004408:	4b24      	ldr	r3, [pc, #144]	; (800449c <W25qxx_Init+0x248>)
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	4a23      	ldr	r2, [pc, #140]	; (800449c <W25qxx_Init+0x248>)
 800440e:	6912      	ldr	r2, [r2, #16]
 8004410:	fb02 f303 	mul.w	r3, r2, r3
 8004414:	0a9b      	lsrs	r3, r3, #10
 8004416:	4a21      	ldr	r2, [pc, #132]	; (800449c <W25qxx_Init+0x248>)
 8004418:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800441a:	f7ff fe5f 	bl	80040dc <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800441e:	2001      	movs	r0, #1
 8004420:	f7ff fea8 	bl	8004174 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004424:	2002      	movs	r0, #2
 8004426:	f7ff fea5 	bl	8004174 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800442a:	2003      	movs	r0, #3
 800442c:	f7ff fea2 	bl	8004174 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <W25qxx_Init+0x248>)
 8004432:	895b      	ldrh	r3, [r3, #10]
 8004434:	4619      	mov	r1, r3
 8004436:	4828      	ldr	r0, [pc, #160]	; (80044d8 <W25qxx_Init+0x284>)
 8004438:	f016 fd0c 	bl	801ae54 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <W25qxx_Init+0x248>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4619      	mov	r1, r3
 8004442:	4826      	ldr	r0, [pc, #152]	; (80044dc <W25qxx_Init+0x288>)
 8004444:	f016 fd06 	bl	801ae54 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <W25qxx_Init+0x248>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	4619      	mov	r1, r3
 800444e:	4824      	ldr	r0, [pc, #144]	; (80044e0 <W25qxx_Init+0x28c>)
 8004450:	f016 fd00 	bl	801ae54 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <W25qxx_Init+0x248>)
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	4619      	mov	r1, r3
 800445a:	4822      	ldr	r0, [pc, #136]	; (80044e4 <W25qxx_Init+0x290>)
 800445c:	f016 fcfa 	bl	801ae54 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004460:	4b0e      	ldr	r3, [pc, #56]	; (800449c <W25qxx_Init+0x248>)
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	4619      	mov	r1, r3
 8004466:	4820      	ldr	r0, [pc, #128]	; (80044e8 <W25qxx_Init+0x294>)
 8004468:	f016 fcf4 	bl	801ae54 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <W25qxx_Init+0x248>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	4619      	mov	r1, r3
 8004472:	481e      	ldr	r0, [pc, #120]	; (80044ec <W25qxx_Init+0x298>)
 8004474:	f016 fcee 	bl	801ae54 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004478:	4b08      	ldr	r3, [pc, #32]	; (800449c <W25qxx_Init+0x248>)
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	4619      	mov	r1, r3
 800447e:	481c      	ldr	r0, [pc, #112]	; (80044f0 <W25qxx_Init+0x29c>)
 8004480:	f016 fce8 	bl	801ae54 <iprintf>
	printf("w25qxx Init Done\r\n");
 8004484:	481b      	ldr	r0, [pc, #108]	; (80044f4 <W25qxx_Init+0x2a0>)
 8004486:	f016 fd6b 	bl	801af60 <puts>
#endif
	w25qxx.Lock = 0;
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <W25qxx_Init+0x248>)
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004492:	2301      	movs	r3, #1
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20006c0c 	.word	0x20006c0c
 80044a0:	40020c00 	.word	0x40020c00
 80044a4:	0801f4bc 	.word	0x0801f4bc
 80044a8:	0801f4d4 	.word	0x0801f4d4
 80044ac:	0801f4e8 	.word	0x0801f4e8
 80044b0:	0801f500 	.word	0x0801f500
 80044b4:	0801f518 	.word	0x0801f518
 80044b8:	0801f530 	.word	0x0801f530
 80044bc:	0801f548 	.word	0x0801f548
 80044c0:	0801f560 	.word	0x0801f560
 80044c4:	0801f578 	.word	0x0801f578
 80044c8:	0801f590 	.word	0x0801f590
 80044cc:	0801f5a8 	.word	0x0801f5a8
 80044d0:	0801f5c0 	.word	0x0801f5c0
 80044d4:	0801f5d8 	.word	0x0801f5d8
 80044d8:	0801f5ec 	.word	0x0801f5ec
 80044dc:	0801f60c 	.word	0x0801f60c
 80044e0:	0801f624 	.word	0x0801f624
 80044e4:	0801f644 	.word	0x0801f644
 80044e8:	0801f660 	.word	0x0801f660
 80044ec:	0801f680 	.word	0x0801f680
 80044f0:	0801f69c 	.word	0x0801f69c
 80044f4:	0801f6bc 	.word	0x0801f6bc

080044f8 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004500:	e002      	b.n	8004508 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004502:	2001      	movs	r0, #1
 8004504:	f010 fbd9 	bl	8014cba <osDelay>
	while (w25qxx.Lock == 1)
 8004508:	4b2d      	ldr	r3, [pc, #180]	; (80045c0 <W25qxx_EraseSector+0xc8>)
 800450a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800450e:	2b01      	cmp	r3, #1
 8004510:	d0f7      	beq.n	8004502 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004512:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <W25qxx_EraseSector+0xc8>)
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 800451a:	f002 fe5d 	bl	80071d8 <HAL_GetTick>
 800451e:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4828      	ldr	r0, [pc, #160]	; (80045c4 <W25qxx_EraseSector+0xcc>)
 8004524:	f016 fc96 	bl	801ae54 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8004528:	f7ff fe6a 	bl	8004200 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800452c:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <W25qxx_EraseSector+0xc8>)
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004538:	f7ff fe06 	bl	8004148 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800453c:	2200      	movs	r2, #0
 800453e:	2140      	movs	r1, #64	; 0x40
 8004540:	4821      	ldr	r0, [pc, #132]	; (80045c8 <W25qxx_EraseSector+0xd0>)
 8004542:	f003 fd61 	bl	8008008 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <W25qxx_EraseSector+0xc8>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b08      	cmp	r3, #8
 800454c:	d909      	bls.n	8004562 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 800454e:	2021      	movs	r0, #33	; 0x21
 8004550:	f7ff fd78 	bl	8004044 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	0e1b      	lsrs	r3, r3, #24
 8004558:	b2db      	uxtb	r3, r3
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fd72 	bl	8004044 <W25qxx_Spi>
 8004560:	e002      	b.n	8004568 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004562:	2020      	movs	r0, #32
 8004564:	f7ff fd6e 	bl	8004044 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	0c1b      	lsrs	r3, r3, #16
 800456c:	b2db      	uxtb	r3, r3
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fd68 	bl	8004044 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	b2db      	uxtb	r3, r3
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fd62 	bl	8004044 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fd5d 	bl	8004044 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800458a:	2201      	movs	r2, #1
 800458c:	2140      	movs	r1, #64	; 0x40
 800458e:	480e      	ldr	r0, [pc, #56]	; (80045c8 <W25qxx_EraseSector+0xd0>)
 8004590:	f003 fd3a 	bl	8008008 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004594:	f7ff fe34 	bl	8004200 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004598:	f002 fe1e 	bl	80071d8 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	4619      	mov	r1, r3
 80045a4:	4809      	ldr	r0, [pc, #36]	; (80045cc <W25qxx_EraseSector+0xd4>)
 80045a6:	f016 fc55 	bl	801ae54 <iprintf>
#endif
	W25qxx_Delay(1);
 80045aa:	2001      	movs	r0, #1
 80045ac:	f010 fb85 	bl	8014cba <osDelay>
	w25qxx.Lock = 0;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <W25qxx_EraseSector+0xc8>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20006c0c 	.word	0x20006c0c
 80045c4:	0801f714 	.word	0x0801f714
 80045c8:	40020c00 	.word	0x40020c00
 80045cc:	0801f738 	.word	0x0801f738

080045d0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <W25qxx_SectorToPage+0x28>)
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	4a05      	ldr	r2, [pc, #20]	; (80045f8 <W25qxx_SectorToPage+0x28>)
 80045e4:	8952      	ldrh	r2, [r2, #10]
 80045e6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20006c0c 	.word	0x20006c0c

080045fc <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800460a:	e002      	b.n	8004612 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800460c:	2001      	movs	r0, #1
 800460e:	f010 fb54 	bl	8014cba <osDelay>
	while (w25qxx.Lock == 1)
 8004612:	4b57      	ldr	r3, [pc, #348]	; (8004770 <W25qxx_WritePage+0x174>)
 8004614:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004618:	2b01      	cmp	r3, #1
 800461a:	d0f7      	beq.n	800460c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800461c:	4b54      	ldr	r3, [pc, #336]	; (8004770 <W25qxx_WritePage+0x174>)
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	4a51      	ldr	r2, [pc, #324]	; (8004770 <W25qxx_WritePage+0x174>)
 800462c:	8952      	ldrh	r2, [r2, #10]
 800462e:	4293      	cmp	r3, r2
 8004630:	d802      	bhi.n	8004638 <W25qxx_WritePage+0x3c>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004638:	4b4d      	ldr	r3, [pc, #308]	; (8004770 <W25qxx_WritePage+0x174>)
 800463a:	895b      	ldrh	r3, [r3, #10]
 800463c:	461a      	mov	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	4413      	add	r3, r2
 800464a:	4a49      	ldr	r2, [pc, #292]	; (8004770 <W25qxx_WritePage+0x174>)
 800464c:	8952      	ldrh	r2, [r2, #10]
 800464e:	4293      	cmp	r3, r2
 8004650:	d905      	bls.n	800465e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004652:	4b47      	ldr	r3, [pc, #284]	; (8004770 <W25qxx_WritePage+0x174>)
 8004654:	895b      	ldrh	r3, [r3, #10]
 8004656:	461a      	mov	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	4843      	ldr	r0, [pc, #268]	; (8004774 <W25qxx_WritePage+0x178>)
 8004666:	f016 fbf5 	bl	801ae54 <iprintf>
	W25qxx_Delay(100);
 800466a:	2064      	movs	r0, #100	; 0x64
 800466c:	f010 fb25 	bl	8014cba <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004670:	f002 fdb2 	bl	80071d8 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8004676:	f7ff fdc3 	bl	8004200 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800467a:	f7ff fd65 	bl	8004148 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800467e:	2200      	movs	r2, #0
 8004680:	2140      	movs	r1, #64	; 0x40
 8004682:	483d      	ldr	r0, [pc, #244]	; (8004778 <W25qxx_WritePage+0x17c>)
 8004684:	f003 fcc0 	bl	8008008 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004688:	4b39      	ldr	r3, [pc, #228]	; (8004770 <W25qxx_WritePage+0x174>)
 800468a:	895b      	ldrh	r3, [r3, #10]
 800468c:	461a      	mov	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	fb03 f302 	mul.w	r3, r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4413      	add	r3, r2
 8004698:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800469a:	4b35      	ldr	r3, [pc, #212]	; (8004770 <W25qxx_WritePage+0x174>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d909      	bls.n	80046b6 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 80046a2:	2012      	movs	r0, #18
 80046a4:	f7ff fcce 	bl	8004044 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	0e1b      	lsrs	r3, r3, #24
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fcc8 	bl	8004044 <W25qxx_Spi>
 80046b4:	e002      	b.n	80046bc <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 80046b6:	2002      	movs	r0, #2
 80046b8:	f7ff fcc4 	bl	8004044 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fcbe 	bl	8004044 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fcb8 	bl	8004044 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff fcb3 	bl	8004044 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	2364      	movs	r3, #100	; 0x64
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	4825      	ldr	r0, [pc, #148]	; (800477c <W25qxx_WritePage+0x180>)
 80046e8:	f007 fc01 	bl	800beee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80046ec:	2201      	movs	r2, #1
 80046ee:	2140      	movs	r1, #64	; 0x40
 80046f0:	4821      	ldr	r0, [pc, #132]	; (8004778 <W25qxx_WritePage+0x17c>)
 80046f2:	f003 fc89 	bl	8008008 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80046f6:	f7ff fd83 	bl	8004200 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80046fa:	f002 fd6d 	bl	80071d8 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e018      	b.n	800473e <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <W25qxx_WritePage+0x12c>
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d905      	bls.n	8004728 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 800471c:	4818      	ldr	r0, [pc, #96]	; (8004780 <W25qxx_WritePage+0x184>)
 800471e:	f016 fc1f 	bl	801af60 <puts>
			W25qxx_Delay(10);
 8004722:	200a      	movs	r0, #10
 8004724:	f010 fac9 	bl	8014cba <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	4413      	add	r3, r2
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	4619      	mov	r1, r3
 8004732:	4814      	ldr	r0, [pc, #80]	; (8004784 <W25qxx_WritePage+0x188>)
 8004734:	f016 fb8e 	bl	801ae54 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	3301      	adds	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d3e2      	bcc.n	800470c <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8004746:	480e      	ldr	r0, [pc, #56]	; (8004780 <W25qxx_WritePage+0x184>)
 8004748:	f016 fc0a 	bl	801af60 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 800474c:	6939      	ldr	r1, [r7, #16]
 800474e:	480e      	ldr	r0, [pc, #56]	; (8004788 <W25qxx_WritePage+0x18c>)
 8004750:	f016 fb80 	bl	801ae54 <iprintf>
	W25qxx_Delay(100);
 8004754:	2064      	movs	r0, #100	; 0x64
 8004756:	f010 fab0 	bl	8014cba <osDelay>
#endif
	W25qxx_Delay(1);
 800475a:	2001      	movs	r0, #1
 800475c:	f010 faad 	bl	8014cba <osDelay>
	w25qxx.Lock = 0;
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <W25qxx_WritePage+0x174>)
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004768:	bf00      	nop
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20006c0c 	.word	0x20006c0c
 8004774:	0801f99c 	.word	0x0801f99c
 8004778:	40020c00 	.word	0x40020c00
 800477c:	20005f50 	.word	0x20005f50
 8004780:	0801f9d8 	.word	0x0801f9d8
 8004784:	0801f9dc 	.word	0x0801f9dc
 8004788:	0801f9e4 	.word	0x0801f9e4

0800478c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800479a:	4b36      	ldr	r3, [pc, #216]	; (8004874 <W25qxx_WriteSector+0xe8>)
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d802      	bhi.n	80047aa <W25qxx_WriteSector+0x1e>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80047aa:	4b32      	ldr	r3, [pc, #200]	; (8004874 <W25qxx_WriteSector+0xe8>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	4830      	ldr	r0, [pc, #192]	; (8004878 <W25qxx_WriteSector+0xec>)
 80047b8:	f016 fb4c 	bl	801ae54 <iprintf>
	W25qxx_Delay(100);
 80047bc:	2064      	movs	r0, #100	; 0x64
 80047be:	f010 fa7c 	bl	8014cba <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80047c2:	4b2c      	ldr	r3, [pc, #176]	; (8004874 <W25qxx_WriteSector+0xe8>)
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d306      	bcc.n	80047da <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 80047cc:	482b      	ldr	r0, [pc, #172]	; (800487c <W25qxx_WriteSector+0xf0>)
 80047ce:	f016 fbc7 	bl	801af60 <puts>
		W25qxx_Delay(100);
 80047d2:	2064      	movs	r0, #100	; 0x64
 80047d4:	f010 fa71 	bl	8014cba <osDelay>
#endif
		return;
 80047d8:	e048      	b.n	800486c <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	441a      	add	r2, r3
 80047e0:	4b24      	ldr	r3, [pc, #144]	; (8004874 <W25qxx_WriteSector+0xe8>)
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d905      	bls.n	80047f4 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80047e8:	4b22      	ldr	r3, [pc, #136]	; (8004874 <W25qxx_WriteSector+0xe8>)
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	e001      	b.n	80047f8 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80047f8:	68b8      	ldr	r0, [r7, #8]
 80047fa:	f7ff fee9 	bl	80045d0 <W25qxx_SectorToPage>
 80047fe:	4602      	mov	r2, r0
 8004800:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <W25qxx_WriteSector+0xe8>)
 8004802:	895b      	ldrh	r3, [r3, #10]
 8004804:	4619      	mov	r1, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	fbb3 f3f1 	udiv	r3, r3, r1
 800480c:	4413      	add	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004810:	4b18      	ldr	r3, [pc, #96]	; (8004874 <W25qxx_WriteSector+0xe8>)
 8004812:	895b      	ldrh	r3, [r3, #10]
 8004814:	461a      	mov	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	fbb3 f1f2 	udiv	r1, r3, r2
 800481c:	fb02 f201 	mul.w	r2, r2, r1
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	69f9      	ldr	r1, [r7, #28]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff fee6 	bl	80045fc <W25qxx_WritePage>
		StartPage++;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	3301      	adds	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <W25qxx_WriteSector+0xe8>)
 8004838:	895b      	ldrh	r3, [r3, #10]
 800483a:	461a      	mov	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1a9a      	subs	r2, r3, r2
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	4413      	add	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <W25qxx_WriteSector+0xe8>)
 8004848:	895b      	ldrh	r3, [r3, #10]
 800484a:	461a      	mov	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dce1      	bgt.n	8004824 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8004860:	4807      	ldr	r0, [pc, #28]	; (8004880 <W25qxx_WriteSector+0xf4>)
 8004862:	f016 fb7d 	bl	801af60 <puts>
	W25qxx_Delay(100);
 8004866:	2064      	movs	r0, #100	; 0x64
 8004868:	f010 fa27 	bl	8014cba <osDelay>
#endif
}
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20006c0c 	.word	0x20006c0c
 8004878:	0801fa08 	.word	0x0801fa08
 800487c:	0801fa48 	.word	0x0801fa48
 8004880:	0801fa68 	.word	0x0801fa68

08004884 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004892:	e002      	b.n	800489a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004894:	2001      	movs	r0, #1
 8004896:	f010 fa10 	bl	8014cba <osDelay>
	while (w25qxx.Lock == 1)
 800489a:	4b54      	ldr	r3, [pc, #336]	; (80049ec <W25qxx_ReadPage+0x168>)
 800489c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d0f7      	beq.n	8004894 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80048a4:	4b51      	ldr	r3, [pc, #324]	; (80049ec <W25qxx_ReadPage+0x168>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80048ac:	4b4f      	ldr	r3, [pc, #316]	; (80049ec <W25qxx_ReadPage+0x168>)
 80048ae:	895b      	ldrh	r3, [r3, #10]
 80048b0:	461a      	mov	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d802      	bhi.n	80048be <W25qxx_ReadPage+0x3a>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80048be:	4b4b      	ldr	r3, [pc, #300]	; (80049ec <W25qxx_ReadPage+0x168>)
 80048c0:	895b      	ldrh	r3, [r3, #10]
 80048c2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	4413      	add	r3, r2
 80048ca:	4a48      	ldr	r2, [pc, #288]	; (80049ec <W25qxx_ReadPage+0x168>)
 80048cc:	8952      	ldrh	r2, [r2, #10]
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d905      	bls.n	80048de <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80048d2:	4b46      	ldr	r3, [pc, #280]	; (80049ec <W25qxx_ReadPage+0x168>)
 80048d4:	895b      	ldrh	r3, [r3, #10]
 80048d6:	461a      	mov	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	4842      	ldr	r0, [pc, #264]	; (80049f0 <W25qxx_ReadPage+0x16c>)
 80048e6:	f016 fab5 	bl	801ae54 <iprintf>
	W25qxx_Delay(100);
 80048ea:	2064      	movs	r0, #100	; 0x64
 80048ec:	f010 f9e5 	bl	8014cba <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80048f0:	f002 fc72 	bl	80071d8 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80048f6:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <W25qxx_ReadPage+0x168>)
 80048f8:	895b      	ldrh	r3, [r3, #10]
 80048fa:	461a      	mov	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	fb03 f302 	mul.w	r3, r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	4413      	add	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004908:	2200      	movs	r2, #0
 800490a:	2140      	movs	r1, #64	; 0x40
 800490c:	4839      	ldr	r0, [pc, #228]	; (80049f4 <W25qxx_ReadPage+0x170>)
 800490e:	f003 fb7b 	bl	8008008 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <W25qxx_ReadPage+0x168>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b08      	cmp	r3, #8
 8004918:	d909      	bls.n	800492e <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 800491a:	200c      	movs	r0, #12
 800491c:	f7ff fb92 	bl	8004044 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	0e1b      	lsrs	r3, r3, #24
 8004924:	b2db      	uxtb	r3, r3
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fb8c 	bl	8004044 <W25qxx_Spi>
 800492c:	e002      	b.n	8004934 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800492e:	200b      	movs	r0, #11
 8004930:	f7ff fb88 	bl	8004044 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	b2db      	uxtb	r3, r3
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fb82 	bl	8004044 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fb7c 	bl	8004044 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fb77 	bl	8004044 <W25qxx_Spi>
	W25qxx_Spi(0);
 8004956:	2000      	movs	r0, #0
 8004958:	f7ff fb74 	bl	8004044 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	b29a      	uxth	r2, r3
 8004960:	2364      	movs	r3, #100	; 0x64
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	4824      	ldr	r0, [pc, #144]	; (80049f8 <W25qxx_ReadPage+0x174>)
 8004966:	f007 fbfe 	bl	800c166 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800496a:	2201      	movs	r2, #1
 800496c:	2140      	movs	r1, #64	; 0x40
 800496e:	4821      	ldr	r0, [pc, #132]	; (80049f4 <W25qxx_ReadPage+0x170>)
 8004970:	f003 fb4a 	bl	8008008 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004974:	f002 fc30 	bl	80071d8 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e018      	b.n	80049b8 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	2b00      	cmp	r3, #0
 800498e:	d108      	bne.n	80049a2 <W25qxx_ReadPage+0x11e>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d905      	bls.n	80049a2 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004996:	4819      	ldr	r0, [pc, #100]	; (80049fc <W25qxx_ReadPage+0x178>)
 8004998:	f016 fae2 	bl	801af60 <puts>
			W25qxx_Delay(10);
 800499c:	200a      	movs	r0, #10
 800499e:	f010 f98c 	bl	8014cba <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	4413      	add	r3, r2
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	4619      	mov	r1, r3
 80049ac:	4814      	ldr	r0, [pc, #80]	; (8004a00 <W25qxx_ReadPage+0x17c>)
 80049ae:	f016 fa51 	bl	801ae54 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	3301      	adds	r3, #1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d3e2      	bcc.n	8004986 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 80049c0:	480e      	ldr	r0, [pc, #56]	; (80049fc <W25qxx_ReadPage+0x178>)
 80049c2:	f016 facd 	bl	801af60 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 80049c6:	6939      	ldr	r1, [r7, #16]
 80049c8:	480e      	ldr	r0, [pc, #56]	; (8004a04 <W25qxx_ReadPage+0x180>)
 80049ca:	f016 fa43 	bl	801ae54 <iprintf>
	W25qxx_Delay(100);
 80049ce:	2064      	movs	r0, #100	; 0x64
 80049d0:	f010 f973 	bl	8014cba <osDelay>
#endif
	W25qxx_Delay(1);
 80049d4:	2001      	movs	r0, #1
 80049d6:	f010 f970 	bl	8014cba <osDelay>
	w25qxx.Lock = 0;
 80049da:	4b04      	ldr	r3, [pc, #16]	; (80049ec <W25qxx_ReadPage+0x168>)
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80049e2:	bf00      	nop
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20006c0c 	.word	0x20006c0c
 80049f0:	0801fbb4 	.word	0x0801fbb4
 80049f4:	40020c00 	.word	0x40020c00
 80049f8:	20005f50 	.word	0x20005f50
 80049fc:	0801f9d8 	.word	0x0801f9d8
 8004a00:	0801f9dc 	.word	0x0801f9dc
 8004a04:	0801fbf0 	.word	0x0801fbf0

08004a08 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004a16:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <W25qxx_ReadSector+0xe8>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d802      	bhi.n	8004a26 <W25qxx_ReadSector+0x1e>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004a26:	4b32      	ldr	r3, [pc, #200]	; (8004af0 <W25qxx_ReadSector+0xe8>)
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	4830      	ldr	r0, [pc, #192]	; (8004af4 <W25qxx_ReadSector+0xec>)
 8004a34:	f016 fa0e 	bl	801ae54 <iprintf>
	W25qxx_Delay(100);
 8004a38:	2064      	movs	r0, #100	; 0x64
 8004a3a:	f010 f93e 	bl	8014cba <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <W25qxx_ReadSector+0xe8>)
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d306      	bcc.n	8004a56 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004a48:	482b      	ldr	r0, [pc, #172]	; (8004af8 <W25qxx_ReadSector+0xf0>)
 8004a4a:	f016 fa89 	bl	801af60 <puts>
		W25qxx_Delay(100);
 8004a4e:	2064      	movs	r0, #100	; 0x64
 8004a50:	f010 f933 	bl	8014cba <osDelay>
#endif
		return;
 8004a54:	e048      	b.n	8004ae8 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	441a      	add	r2, r3
 8004a5c:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <W25qxx_ReadSector+0xe8>)
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d905      	bls.n	8004a70 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004a64:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <W25qxx_ReadSector+0xe8>)
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e001      	b.n	8004a74 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004a74:	68b8      	ldr	r0, [r7, #8]
 8004a76:	f7ff fdab 	bl	80045d0 <W25qxx_SectorToPage>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <W25qxx_ReadSector+0xe8>)
 8004a7e:	895b      	ldrh	r3, [r3, #10]
 8004a80:	4619      	mov	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a88:	4413      	add	r3, r2
 8004a8a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004a8c:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <W25qxx_ReadSector+0xe8>)
 8004a8e:	895b      	ldrh	r3, [r3, #10]
 8004a90:	461a      	mov	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a98:	fb02 f201 	mul.w	r2, r2, r1
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	69f9      	ldr	r1, [r7, #28]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff feec 	bl	8004884 <W25qxx_ReadPage>
		StartPage++;
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004ab2:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <W25qxx_ReadSector+0xe8>)
 8004ab4:	895b      	ldrh	r3, [r3, #10]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	1a9a      	subs	r2, r3, r2
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	4413      	add	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <W25qxx_ReadSector+0xe8>)
 8004ac4:	895b      	ldrh	r3, [r3, #10]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	dce1      	bgt.n	8004aa0 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004adc:	4807      	ldr	r0, [pc, #28]	; (8004afc <W25qxx_ReadSector+0xf4>)
 8004ade:	f016 fa3f 	bl	801af60 <puts>
	W25qxx_Delay(100);
 8004ae2:	2064      	movs	r0, #100	; 0x64
 8004ae4:	f010 f8e9 	bl	8014cba <osDelay>
#endif
}
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20006c0c 	.word	0x20006c0c
 8004af4:	0801fc14 	.word	0x0801fc14
 8004af8:	0801fc54 	.word	0x0801fc54
 8004afc:	0801fc74 	.word	0x0801fc74

08004b00 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	4611      	mov	r1, r2
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	70fb      	strb	r3, [r7, #3]
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8004b4e:	2309      	movs	r3, #9
 8004b50:	e028      	b.n	8004ba4 <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <_ZN10IridiumSBD5sleepEv+0x30>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d101      	bne.n	8004b6c <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 8004b68:	230b      	movs	r3, #11
 8004b6a:	e01b      	b.n	8004ba4 <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f8d3 	bl	8004d20 <_ZN10IridiumSBD13internalSleepEv>
 8004b7a:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10b      	bne.n	8004ba2 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f979 	bl	8004e8c <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f8d1 	bl	8004d44 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZN10IridiumSBD21enableSuperCapChargerEb>:

   return ISBD_SUCCESS;
}

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d004      	beq.n	8004bcc <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004bc2:	4918      	ldr	r1, [pc, #96]	; (8004c24 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f96f 	bl	8004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004bca:	e028      	b.n	8004c1e <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f991 	bl	8004ef4 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004bee:	e00f      	b.n	8004c10 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004bf6:	b25a      	sxtb	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004bfe:	b25b      	sxtb	r3, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	b25b      	sxtb	r3, r3
 8004c04:	4013      	ands	r3, r2
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f9a6 	bl	8004f6a <_ZN10IridiumSBD11set9603pinsEh>
}
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	0801fd78 	.word	0x0801fd78

08004c28 <_ZN10IridiumSBD16enable9603NpowerEb>:
    return(false);
  }
}

void IridiumSBD::enable9603Npower(bool enable)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004c3e:	4918      	ldr	r1, [pc, #96]	; (8004ca0 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f931 	bl	8004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004c46:	e028      	b.n	8004c9a <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f953 	bl	8004ef4 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004c60:	4313      	orrs	r3, r2
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004c6a:	e00f      	b.n	8004c8c <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c72:	b25a      	sxtb	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004c7a:	b25b      	sxtb	r3, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	b25b      	sxtb	r3, r3
 8004c80:	4013      	ands	r3, r2
 8004c82:	b25b      	sxtb	r3, r3
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f968 	bl	8004f6a <_ZN10IridiumSBD11set9603pinsEh>
}
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	0801fe10 	.word	0x0801fe10

08004ca4 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004cba:	4918      	ldr	r1, [pc, #96]	; (8004d1c <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f8f3 	bl	8004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004cc2:	e028      	b.n	8004d16 <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f915 	bl	8004ef4 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004ce6:	e00f      	b.n	8004d08 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004cee:	b25a      	sxtb	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004cf6:	b25b      	sxtb	r3, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	b25b      	sxtb	r3, r3
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	b25b      	sxtb	r3, r3
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f92a 	bl	8004f6a <_ZN10IridiumSBD11set9603pinsEh>
}
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	0801fe58 	.word	0x0801fe58

08004d20 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8004d32:	230a      	movs	r3, #10
 8004d34:	e000      	b.n	8004d38 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f083 0301 	eor.w	r3, r3, #1
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d011      	beq.n	8004d8c <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d04c      	beq.n	8004e0e <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f84e 	bl	8004e20 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d018      	beq.n	8004dc4 <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 8004d92:	4921      	ldr	r1, [pc, #132]	; (8004e18 <_ZN10IridiumSBD5powerEb+0xd4>)
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f887 	bl	8004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d004      	beq.n	8004dae <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8004da4:	2101      	movs	r1, #1
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f848 	bl	8004e3c <_ZN10IridiumSBD11setSleepPinEh>
 8004dac:	e003      	b.n	8004db6 <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8004dae:	2101      	movs	r1, #1
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff77 	bl	8004ca4 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8004db6:	f002 fa0f 	bl	80071d8 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8004dc2:	e025      	b.n	8004e10 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8004dc4:	f002 fa08 	bl	80071d8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004dda:	d205      	bcs.n	8004de8 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f002 fa04 	bl	80071f0 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8004de8:	490c      	ldr	r1, [pc, #48]	; (8004e1c <_ZN10IridiumSBD5powerEb+0xd8>)
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f85c 	bl	8004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f81d 	bl	8004e3c <_ZN10IridiumSBD11setSleepPinEh>
 8004e02:	e005      	b.n	8004e10 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8004e04:	2100      	movs	r1, #0
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff ff4c 	bl	8004ca4 <_ZN10IridiumSBD10enable9603Eb>
 8004e0c:	e000      	b.n	8004e10 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8004e0e:	bf00      	nop
      }
   }
}
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	080202e8 	.word	0x080202e8
 8004e1c:	08020300 	.word	0x08020300

08004e20 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8004e28:	4903      	ldr	r1, [pc, #12]	; (8004e38 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f83c 	bl	8004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	08020318 	.word	0x08020318

08004e3c <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8004e48:	2201      	movs	r2, #1
 8004e4a:	2108      	movs	r1, #8
 8004e4c:	480b      	ldr	r0, [pc, #44]	; (8004e7c <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8004e4e:	f003 f8db 	bl	8008008 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8004e52:	490b      	ldr	r1, [pc, #44]	; (8004e80 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f827 	bl	8004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d104      	bne.n	8004e6a <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8004e60:	4908      	ldr	r1, [pc, #32]	; (8004e84 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f820 	bl	8004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8004e68:	e003      	b.n	8004e72 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8004e6a:	4907      	ldr	r1, [pc, #28]	; (8004e88 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f81b 	bl	8004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40020800 	.word	0x40020800
 8004e80:	08020344 	.word	0x08020344
 8004e84:	08020360 	.word	0x08020360
 8004e88:	08020368 	.word	0x08020368

08004e8c <_ZN10IridiumSBD13endSerialPortEv>:
{
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
}

void IridiumSBD::endSerialPort()
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8004e94:	4903      	ldr	r1, [pc, #12]	; (8004ea4 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f806 	bl	8004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	08020390 	.word	0x08020390

08004ea8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 8004ea8:	b590      	push	{r4, r7, lr}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	60fa      	str	r2, [r7, #12]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8004ec0:	7afb      	ldrb	r3, [r7, #11]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fe2a 	bl	8004b24 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8004ed0:	e7f1      	b.n	8004eb6 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8004ed2:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8004ed4:	687c      	ldr	r4, [r7, #4]
 8004ed6:	6838      	ldr	r0, [r7, #0]
 8004ed8:	f7fb f98a 	bl	80001f0 <strlen>
 8004edc:	4603      	mov	r3, r0
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f008 fe19 	bl	800db1e <HAL_UART_Transmit>
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd90      	pop	{r4, r7, pc}

08004ef4 <_ZN10IridiumSBD13check9603pinsEv>:
  }
}

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f000 f9c9 	bl	80052a0 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	2110      	movs	r1, #16
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fdf3 	bl	8004b00 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fa08 	bl	8005334 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4619      	mov	r1, r3
 8004f32:	f000 f9a2 	bl	800527a <_ZN7TwoWire11requestFromEhh>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00d      	beq.n	8004f62 <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4610      	mov	r0, r2
 8004f56:	4798      	blx	r3
 8004f58:	4603      	mov	r3, r0
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	460b      	mov	r3, r1
 8004f74:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f000 f98c 	bl	80052a0 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8c:	2110      	movs	r1, #16
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fdb6 	bl	8004b00 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	78f9      	ldrb	r1, [r7, #3]
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f9c2 	bl	8005334 <_ZN7TwoWire15endTransmissionEv>
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:

	return HAL_OK;
}


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b08b      	sub	sp, #44	; 0x2c
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc6:	221d      	movs	r2, #29
 8004fc8:	492f      	ldr	r1, [pc, #188]	; (8005088 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8004fca:	f008 fda8 	bl	800db1e <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd4:	221d      	movs	r2, #29
 8004fd6:	492d      	ldr	r1, [pc, #180]	; (800508c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8004fd8:	f008 fda1 	bl	800db1e <HAL_UART_Transmit>
	int err = this->sleep();
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fdad 	bl	8004b3c <_ZN10IridiumSBD5sleepEv>
 8004fe2:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d017      	beq.n	800501a <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8004fea:	f107 0308 	add.w	r3, r7, #8
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	4927      	ldr	r1, [pc, #156]	; (8005090 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f016 f880 	bl	801b0f8 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8004ff8:	687c      	ldr	r4, [r7, #4]
 8004ffa:	f107 0308 	add.w	r3, r7, #8
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb f8f6 	bl	80001f0 <strlen>
 8005004:	4603      	mov	r3, r0
 8005006:	b29a      	uxth	r2, r3
 8005008:	f107 0108 	add.w	r1, r7, #8
 800500c:	f04f 33ff 	mov.w	r3, #4294967295
 8005010:	4620      	mov	r0, r4
 8005012:	f008 fd84 	bl	800db1e <HAL_UART_Transmit>
		return false;
 8005016:	2300      	movs	r3, #0
 8005018:	e032      	b.n	8005080 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f04f 33ff 	mov.w	r3, #4294967295
 8005020:	2204      	movs	r2, #4
 8005022:	491c      	ldr	r1, [pc, #112]	; (8005094 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005024:	f008 fd7b 	bl	800db1e <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	2218      	movs	r2, #24
 8005030:	4919      	ldr	r1, [pc, #100]	; (8005098 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8005032:	f008 fd74 	bl	800db1e <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8005036:	2100      	movs	r1, #0
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff fdf5 	bl	8004c28 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f04f 33ff 	mov.w	r3, #4294967295
 8005044:	2204      	movs	r2, #4
 8005046:	4913      	ldr	r1, [pc, #76]	; (8005094 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005048:	f008 fd69 	bl	800db1e <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f04f 33ff 	mov.w	r3, #4294967295
 8005052:	2227      	movs	r2, #39	; 0x27
 8005054:	4911      	ldr	r1, [pc, #68]	; (800509c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8005056:	f008 fd62 	bl	800db1e <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 800505a:	2100      	movs	r1, #0
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fda5 	bl	8004bac <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f04f 33ff 	mov.w	r3, #4294967295
 8005068:	2204      	movs	r2, #4
 800506a:	490a      	ldr	r1, [pc, #40]	; (8005094 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 800506c:	f008 fd57 	bl	800db1e <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f04f 33ff 	mov.w	r3, #4294967295
 8005076:	2220      	movs	r2, #32
 8005078:	4909      	ldr	r1, [pc, #36]	; (80050a0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 800507a:	f008 fd50 	bl	800db1e <HAL_UART_Transmit>
	return true;
 800507e:	2301      	movs	r3, #1
}
 8005080:	4618      	mov	r0, r3
 8005082:	372c      	adds	r7, #44	; 0x2c
 8005084:	46bd      	mov	sp, r7
 8005086:	bd90      	pop	{r4, r7, pc}
 8005088:	0802059c 	.word	0x0802059c
 800508c:	080205bc 	.word	0x080205bc
 8005090:	080205dc 	.word	0x080205dc
 8005094:	0801fd48 	.word	0x0801fd48
 8005098:	080205f8 	.word	0x080205f8
 800509c:	08020614 	.word	0x08020614
 80050a0:	0802063c 	.word	0x0802063c

080050a4 <MRT_Static_Iridium_Destructor>:
	if (E_T==NULL){
		E_T = new IridiumSBD();
	}
}

void MRT_Static_Iridium_Destructor(){
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <MRT_Static_Iridium_Destructor+0x1c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <MRT_Static_Iridium_Destructor+0x1c>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
	}
}
 80050b6:	bf00      	nop
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	2000044c 	.word	0x2000044c

080050c4 <MRT_Static_Iridium_Shutdown>:
uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart, uint8_t timeout, uint8_t i2c_bus){
	MRT_Static_Iridium_Constructor();
	return E_T->MRT_Iridium_setup(huart,timeout, i2c_bus);
}

bool MRT_Static_Iridium_Shutdown(void){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <MRT_Static_Iridium_Shutdown+0x2c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff ff72 	bl	8004fb8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 80050e0:	f7ff ffe0 	bl	80050a4 <MRT_Static_Iridium_Destructor>
	return b;
 80050e4:	79fb      	ldrb	r3, [r7, #7]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	2000044c 	.word	0x2000044c

080050f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
  while (size--) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	1e5a      	subs	r2, r3, #1
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	bf14      	ite	ne
 800510e:	2301      	movne	r3, #1
 8005110:	2300      	moveq	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00e      	beq.n	8005136 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	1c59      	adds	r1, r3, #1
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	4619      	mov	r1, r3
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	4790      	blx	r2
 800512c:	4602      	mov	r2, r0
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	4413      	add	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
  while (size--) {
 8005134:	e7e6      	b.n	8005104 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8005136:	697b      	ldr	r3, [r7, #20]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	4a06      	ldr	r2, [pc, #24]	; (8005164 <_ZN5PrintC1Ev+0x24>)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	605a      	str	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	08020e98 	.word	0x08020e98

08005168 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff ffe4 	bl	8005140 <_ZN5PrintC1Ev>
 8005178:	4a05      	ldr	r2, [pc, #20]	; (8005190 <_ZN6StreamC1Ev+0x28>)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005184:	609a      	str	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	08020ec8 	.word	0x08020ec8

08005194 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff ffe1 	bl	8005168 <_ZN6StreamC1Ev>
 80051a6:	4a16      	ldr	r2, [pc, #88]	; (8005200 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3390      	adds	r3, #144	; 0x90
 80051b6:	2220      	movs	r2, #32
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f014 ff1e 	bl	8019ffc <memset>
  rxBufferIndex = 0;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	08020ea8 	.word	0x08020ea8

08005204 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af02      	add	r7, sp, #8
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	461a      	mov	r2, r3
 8005212:	4603      	mov	r3, r0
 8005214:	70fb      	strb	r3, [r7, #3]
 8005216:	460b      	mov	r3, r1
 8005218:	70bb      	strb	r3, [r7, #2]
 800521a:	4613      	mov	r3, r2
 800521c:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fc24 	bl	8005a6c <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8005224:	78bb      	ldrb	r3, [r7, #2]
 8005226:	2b20      	cmp	r3, #32
 8005228:	d901      	bls.n	800522e <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 800522a:	2320      	movs	r3, #32
 800522c:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	b2d9      	uxtb	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800523a:	78b8      	ldrb	r0, [r7, #2]
 800523c:	787b      	ldrb	r3, [r7, #1]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	4603      	mov	r3, r0
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f9cf 	bl	80055e6 <_ZN7TwoWire15i2c_master_readEhPchh>
 8005248:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	da02      	bge.n	8005256 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]
 8005254:	e001      	b.n	800525a <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	7bfa      	ldrb	r2, [r7, #15]
 8005266:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fbcc 	bl	8005a08 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
 8005286:	4613      	mov	r3, r2
 8005288:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800528a:	78ba      	ldrb	r2, [r7, #2]
 800528c:	78f9      	ldrb	r1, [r7, #3]
 800528e:	2301      	movs	r3, #1
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ffb7 	bl	8005204 <_ZN7TwoWire11requestFromEhhh>
 8005296:	4603      	mov	r3, r0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b086      	sub	sp, #24
 80052da:	af02      	add	r7, sp, #8
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fbc2 	bl	8005a6c <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	7c1b      	ldrb	r3, [r3, #16]
 80052ec:	0059      	lsls	r1, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f103 0211 	add.w	r2, r3, #17
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80052fa:	4618      	mov	r0, r3
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	4603      	mov	r3, r0
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa00 	bl	8005708 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8005308:	4603      	mov	r3, r0
 800530a:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fb6f 	bl	8005a08 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 800533c:	2101      	movs	r1, #1
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff ffc9 	bl	80052d6 <_ZN7TwoWire15endTransmissionEh>
 8005344:	4603      	mov	r3, r0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01d      	beq.n	80053a0 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800536a:	2b1f      	cmp	r3, #31
 800536c:	d901      	bls.n	8005372 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 800536e:	2300      	movs	r3, #0
 8005370:	e028      	b.n	80053c4 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005378:	4619      	mov	r1, r3
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	440b      	add	r3, r1
 8005380:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005388:	3301      	adds	r3, #1
 800538a:	b2da      	uxtb	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800539e:	e010      	b.n	80053c2 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fb63 	bl	8005a6c <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 80053a6:	1cfb      	adds	r3, r7, #3
 80053a8:	2201      	movs	r2, #1
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fa95 	bl	80058dc <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fb28 	bl	8005a08 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	333c      	adds	r3, #60	; 0x3c
 80053bc:	4618      	mov	r0, r3
 80053be:	f003 fab9 	bl	8008934 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 80053c2:	2301      	movs	r3, #1
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d013      	beq.n	800540a <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d21e      	bcs.n	800542c <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	440a      	add	r2, r1
 80053fa:	7812      	ldrb	r2, [r2, #0]
 80053fc:	4611      	mov	r1, r2
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	3301      	adds	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	e7ed      	b.n	80053e6 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fb2e 	bl	8005a6c <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	461a      	mov	r2, r3
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fa60 	bl	80058dc <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 faf3 	bl	8005a08 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	333c      	adds	r3, #60	; 0x3c
 8005426:	4618      	mov	r0, r3
 8005428:	f003 fa84 	bl	8008934 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 800542c:	687b      	ldr	r3, [r7, #4]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	1ad3      	subs	r3, r2, r3
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  int value = -1;
 8005466:	f04f 33ff 	mov.w	r3, #4294967295
 800546a:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005472:	b2da      	uxtb	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	429a      	cmp	r2, r3
 800547e:	bf34      	ite	cc
 8005480:	2301      	movcc	r3, #1
 8005482:	2300      	movcs	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d012      	beq.n	80054b0 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4413      	add	r3, r2
 8005498:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800549c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	3301      	adds	r3, #1
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 80054b0:	68fb      	ldr	r3, [r7, #12]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  int value = -1;
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	429a      	cmp	r2, r3
 80054de:	bf34      	ite	cc
 80054e0:	2301      	movcc	r3, #1
 80054e2:	2300      	movcs	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4413      	add	r3, r2
 80054f8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80054fc:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80054fe:	68fb      	ldr	r3, [r7, #12]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552c:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005536:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8005538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800553c:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800554a:	bf0c      	ite	eq
 800554c:	2301      	moveq	r3, #1
 800554e:	2300      	movne	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1e5a      	subs	r2, r3, #1
 800555a:	60fa      	str	r2, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0e9      	beq.n	800553e <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 800556a:	2301      	movs	r3, #1
 800556c:	e021      	b.n	80055b2 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800557a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800557e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b01      	cmp	r3, #1
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	1e5a      	subs	r2, r3, #1
 800559c:	60fa      	str	r2, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bf0c      	ite	eq
 80055a2:	2301      	moveq	r3, #1
 80055a4:	2300      	movne	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0e9      	beq.n	8005580 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]

    return 0;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b08a      	sub	sp, #40	; 0x28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	461a      	mov	r2, r3
 80055f2:	460b      	mov	r3, r1
 80055f4:	72fb      	strb	r3, [r7, #11]
 80055f6:	4613      	mov	r3, r2
 80055f8:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fe:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff ff8d 	bl	8005520 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8005606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	bf14      	ite	ne
 800561a:	2301      	movne	r3, #1
 800561c:	2300      	moveq	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	3b01      	subs	r3, #1
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1ed      	bne.n	800560c <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8005630:	f04f 33ff 	mov.w	r3, #4294967295
 8005634:	e064      	b.n	8005700 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8005636:	7afb      	ldrb	r3, [r7, #11]
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8005644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b02      	cmp	r3, #2
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	3b01      	subs	r3, #1
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1ed      	bne.n	800564a <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 800566e:	f04f 33ff 	mov.w	r3, #4294967295
 8005672:	e045      	b.n	8005700 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800568a:	2300      	movs	r3, #0
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	7abb      	ldrb	r3, [r7, #10]
 8005690:	3b01      	subs	r3, #1
 8005692:	6a3a      	ldr	r2, [r7, #32]
 8005694:	429a      	cmp	r2, r3
 8005696:	da17      	bge.n	80056c8 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8005698:	f107 0314 	add.w	r3, r7, #20
 800569c:	2200      	movs	r2, #0
 800569e:	4619      	mov	r1, r3
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f8a4 	bl	80057ee <_ZN7TwoWire20i2c_master_byte_readEPii>
 80056a6:	61b8      	str	r0, [r7, #24]
        if(ret)
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 80056ae:	f04f 33ff 	mov.w	r3, #4294967295
 80056b2:	e025      	b.n	8005700 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 80056b4:	6979      	ldr	r1, [r7, #20]
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	b2ca      	uxtb	r2, r1
 80056be:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	3301      	adds	r3, #1
 80056c4:	623b      	str	r3, [r7, #32]
 80056c6:	e7e2      	b.n	800568e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 80056c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7ff ff74 	bl	80055be <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 80056d6:	f107 0314 	add.w	r3, r7, #20
 80056da:	2201      	movs	r2, #1
 80056dc:	4619      	mov	r1, r3
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f885 	bl	80057ee <_ZN7TwoWire20i2c_master_byte_readEPii>
 80056e4:	61b8      	str	r0, [r7, #24]
    if(ret)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 80056ec:	f04f 33ff 	mov.w	r3, #4294967295
 80056f0:	e006      	b.n	8005700 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 80056f2:	6979      	ldr	r1, [r7, #20]
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	b2ca      	uxtb	r2, r1
 80056fc:	701a      	strb	r2, [r3, #0]

    return length;
 80056fe:	7abb      	ldrb	r3, [r7, #10]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3728      	adds	r7, #40	; 0x28
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff feff 	bl	8005520 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8005722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005726:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	bf14      	ite	ne
 8005736:	2301      	movne	r3, #1
 8005738:	2300      	moveq	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3b01      	subs	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ed      	bne.n	8005728 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 800574c:	2304      	movs	r3, #4
 800574e:	e04a      	b.n	80057e6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800575c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005760:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b02      	cmp	r3, #2
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	3b01      	subs	r3, #1
 800577e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1ed      	bne.n	8005762 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8005786:	2302      	movs	r3, #2
 8005788:	e02d      	b.n	80057e6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800578a:	2300      	movs	r3, #0
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 80057a0:	2300      	movs	r3, #0
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	da15      	bge.n	80057d8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f85a 	bl	8005870 <_ZN7TwoWire21i2c_master_byte_writeEi>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	bf14      	ite	ne
 80057c2:	2301      	movne	r3, #1
 80057c4:	2300      	moveq	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e00a      	b.n	80057e6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	3301      	adds	r3, #1
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	e7e5      	b.n	80057a4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff feed 	bl	80055be <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b087      	sub	sp, #28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d006      	beq.n	8005814 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e005      	b.n	8005820 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8005820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005824:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	bf14      	ite	ne
 8005834:	2301      	movne	r3, #1
 8005836:	2300      	moveq	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	1e5a      	subs	r2, r3, #1
 8005842:	617a      	str	r2, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	bf0c      	ite	eq
 8005848:	2301      	moveq	r3, #1
 800584a:	2300      	movne	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0e9      	beq.n	8005826 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8005852:	f04f 33ff 	mov.w	r3, #4294967295
 8005856:	e005      	b.n	8005864 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	461a      	mov	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	601a      	str	r2, [r3, #0]

    return 0;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800588a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800588e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589a:	2b80      	cmp	r3, #128	; 0x80
 800589c:	d008      	beq.n	80058b0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d001      	beq.n	80058b0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 80058b0:	2300      	movs	r3, #0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00b      	beq.n	80058ce <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1e5a      	subs	r2, r3, #1
 80058ba:	60fa      	str	r2, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf0c      	ite	eq
 80058c0:	2301      	moveq	r3, #1
 80058c2:	2300      	movne	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0e2      	beq.n	8005890 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e000      	b.n	80058d0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 80058ce:	2301      	movs	r3, #1
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 80058dc:	b480      	push	{r7}
 80058de:	b089      	sub	sp, #36	; 0x24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	dd41      	ble.n	800597c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80058f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058fc:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005908:	2b80      	cmp	r3, #128	; 0x80
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	3b01      	subs	r3, #1
 800591a:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1ed      	bne.n	80058fe <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295
 8005926:	e068      	b.n	80059fa <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	60ba      	str	r2, [r7, #8]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	611a      	str	r2, [r3, #16]
        length--;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3b01      	subs	r3, #1
 800593a:	607b      	str	r3, [r7, #4]
        size++;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	3301      	adds	r3, #1
 8005940:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b04      	cmp	r3, #4
 800594e:	d104      	bne.n	800595a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0c8      	beq.n	80058f2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	60ba      	str	r2, [r7, #8]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	611a      	str	r2, [r3, #16]
            length--;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3b01      	subs	r3, #1
 8005972:	607b      	str	r3, [r7, #4]
            size++;
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	3301      	adds	r3, #1
 8005978:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 800597a:	e7ba      	b.n	80058f2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800597c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005980:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005990:	bf14      	ite	ne
 8005992:	2301      	movne	r3, #1
 8005994:	2300      	moveq	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	3b01      	subs	r3, #1
 80059a0:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1ec      	bne.n	8005982 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ac:	e025      	b.n	80059fa <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059b6:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 80059b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059bc:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	bf0c      	ite	eq
 80059cc:	2301      	moveq	r3, #1
 80059ce:	2300      	movne	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d008      	beq.n	80059e8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	3b01      	subs	r3, #1
 80059da:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1ed      	bne.n	80059be <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	e008      	b.n	80059fa <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80059f8:	69bb      	ldr	r3, [r7, #24]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3724      	adds	r7, #36	; 0x24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	4a12      	ldr	r2, [pc, #72]	; (8005a60 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d106      	bne.n	8005a28 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005a1a:	2049      	movs	r0, #73	; 0x49
 8005a1c:	f002 f914 	bl	8007c48 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005a20:	2048      	movs	r0, #72	; 0x48
 8005a22:	f002 f911 	bl	8007c48 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8005a26:	e016      	b.n	8005a56 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2c:	4a0d      	ldr	r2, [pc, #52]	; (8005a64 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d106      	bne.n	8005a40 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8005a32:	2022      	movs	r0, #34	; 0x22
 8005a34:	f002 f908 	bl	8007c48 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005a38:	2021      	movs	r0, #33	; 0x21
 8005a3a:	f002 f905 	bl	8007c48 <HAL_NVIC_EnableIRQ>
}
 8005a3e:	e00a      	b.n	8005a56 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	4a08      	ldr	r2, [pc, #32]	; (8005a68 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d105      	bne.n	8005a56 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005a4a:	2020      	movs	r0, #32
 8005a4c:	f002 f8fc 	bl	8007c48 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005a50:	201f      	movs	r0, #31
 8005a52:	f002 f8f9 	bl	8007c48 <HAL_NVIC_EnableIRQ>
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40005c00 	.word	0x40005c00
 8005a64:	40005800 	.word	0x40005800
 8005a68:	40005400 	.word	0x40005400

08005a6c <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a78:	4a12      	ldr	r2, [pc, #72]	; (8005ac4 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d106      	bne.n	8005a8c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8005a7e:	2049      	movs	r0, #73	; 0x49
 8005a80:	f002 f8f0 	bl	8007c64 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8005a84:	2048      	movs	r0, #72	; 0x48
 8005a86:	f002 f8ed 	bl	8007c64 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8005a8a:	e016      	b.n	8005aba <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a90:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d106      	bne.n	8005aa4 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8005a96:	2022      	movs	r0, #34	; 0x22
 8005a98:	f002 f8e4 	bl	8007c64 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8005a9c:	2021      	movs	r0, #33	; 0x21
 8005a9e:	f002 f8e1 	bl	8007c64 <HAL_NVIC_DisableIRQ>
}
 8005aa2:	e00a      	b.n	8005aba <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa8:	4a08      	ldr	r2, [pc, #32]	; (8005acc <_ZN7TwoWire16disableInterruptEv+0x60>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d105      	bne.n	8005aba <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005aae:	2020      	movs	r0, #32
 8005ab0:	f002 f8d8 	bl	8007c64 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8005ab4:	201f      	movs	r0, #31
 8005ab6:	f002 f8d5 	bl	8007c64 <HAL_NVIC_DisableIRQ>
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40005c00 	.word	0x40005c00
 8005ac8:	40005800 	.word	0x40005800
 8005acc:	40005400 	.word	0x40005400

08005ad0 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d110      	bne.n	8005b02 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d10b      	bne.n	8005b02 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8005aea:	4908      	ldr	r1, [pc, #32]	; (8005b0c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8005aec:	4808      	ldr	r0, [pc, #32]	; (8005b10 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005aee:	f7ff fb51 	bl	8005194 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8005af2:	4908      	ldr	r1, [pc, #32]	; (8005b14 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005af4:	4808      	ldr	r0, [pc, #32]	; (8005b18 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005af6:	f7ff fb4d 	bl	8005194 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8005afa:	4908      	ldr	r1, [pc, #32]	; (8005b1c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005afc:	4808      	ldr	r0, [pc, #32]	; (8005b20 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005afe:	f7ff fb49 	bl	8005194 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8005b02:	bf00      	nop
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40005400 	.word	0x40005400
 8005b10:	20000450 	.word	0x20000450
 8005b14:	40005800 	.word	0x40005800
 8005b18:	20000508 	.word	0x20000508
 8005b1c:	40005c00 	.word	0x40005c00
 8005b20:	200005c0 	.word	0x200005c0

08005b24 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	f7ff ffcf 	bl	8005ad0 <_Z41__static_initialization_and_destruction_0ii>
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	460b      	mov	r3, r1
 8005b42:	72fb      	strb	r3, [r7, #11]
 8005b44:	4613      	mov	r3, r2
 8005b46:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685c      	ldr	r4, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6898      	ldr	r0, [r3, #8]
 8005b50:	893b      	ldrh	r3, [r7, #8]
 8005b52:	7af9      	ldrb	r1, [r7, #11]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	47a0      	blx	r4
 8005b58:	6178      	str	r0, [r7, #20]

  return ret;
 8005b5a:	697b      	ldr	r3, [r7, #20]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd90      	pop	{r4, r7, pc}

08005b64 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	460b      	mov	r3, r1
 8005b72:	72fb      	strb	r3, [r7, #11]
 8005b74:	4613      	mov	r3, r2
 8005b76:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681c      	ldr	r4, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6898      	ldr	r0, [r3, #8]
 8005b80:	893b      	ldrh	r3, [r7, #8]
 8005b82:	7af9      	ldrb	r1, [r7, #11]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	47a0      	blx	r4
 8005b88:	6178      	str	r0, [r7, #20]

  return ret;
 8005b8a:	697b      	ldr	r3, [r7, #20]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd90      	pop	{r4, r7, pc}

08005b94 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005bc0 <lps22hh_from_lsb_to_hpa+0x2c>
 8005baa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bae:	eef0 7a66 	vmov.f32	s15, s13
}
 8005bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	49800000 	.word	0x49800000

08005bc4 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bda:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005bf4 <lps22hh_from_lsb_to_celsius+0x30>
 8005bde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005be2:	eef0 7a66 	vmov.f32	s15, s13
}
 8005be6:	eeb0 0a67 	vmov.f32	s0, s15
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	42c80000 	.word	0x42c80000

08005bf8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005c04:	f107 0208 	add.w	r2, r7, #8
 8005c08:	2301      	movs	r3, #1
 8005c0a:	2110      	movs	r1, #16
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ff91 	bl	8005b34 <lps22hh_read_reg>
 8005c12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10f      	bne.n	8005c3a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	7a3b      	ldrb	r3, [r7, #8]
 8005c24:	f362 0341 	bfi	r3, r2, #1, #1
 8005c28:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005c2a:	f107 0208 	add.w	r2, r7, #8
 8005c2e:	2301      	movs	r3, #1
 8005c30:	2110      	movs	r1, #16
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff ff96 	bl	8005b64 <lps22hh_write_reg>
 8005c38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005c50:	f107 0210 	add.w	r2, r7, #16
 8005c54:	2301      	movs	r3, #1
 8005c56:	2110      	movs	r1, #16
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ff6b 	bl	8005b34 <lps22hh_read_reg>
 8005c5e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d107      	bne.n	8005c76 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005c66:	f107 020c 	add.w	r2, r7, #12
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	2111      	movs	r1, #17
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff ff60 	bl	8005b34 <lps22hh_read_reg>
 8005c74:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10f      	bne.n	8005c9c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	7c3b      	ldrb	r3, [r7, #16]
 8005c86:	f362 1306 	bfi	r3, r2, #4, #3
 8005c8a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005c8c:	f107 0210 	add.w	r2, r7, #16
 8005c90:	2301      	movs	r3, #1
 8005c92:	2110      	movs	r1, #16
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff ff65 	bl	8005b64 <lps22hh_write_reg>
 8005c9a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d119      	bne.n	8005cd6 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	7b3b      	ldrb	r3, [r7, #12]
 8005cae:	f362 0341 	bfi	r3, r2, #1, #1
 8005cb2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	08db      	lsrs	r3, r3, #3
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	7b3b      	ldrb	r3, [r7, #12]
 8005cc0:	f362 0300 	bfi	r3, r2, #0, #1
 8005cc4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005cc6:	f107 020c 	add.w	r2, r7, #12
 8005cca:	2301      	movs	r3, #1
 8005ccc:	2111      	movs	r1, #17
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff ff48 	bl	8005b64 <lps22hh_write_reg>
 8005cd4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005cd6:	697b      	ldr	r3, [r7, #20]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005cea:	f107 0208 	add.w	r2, r7, #8
 8005cee:	2301      	movs	r3, #1
 8005cf0:	2127      	movs	r1, #39	; 0x27
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff ff1e 	bl	8005b34 <lps22hh_read_reg>
 8005cf8:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8005cfa:	7a3b      	ldrb	r3, [r7, #8]
 8005cfc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	701a      	strb	r2, [r3, #0]

  return ret;
 8005d08:	68fb      	ldr	r3, [r7, #12]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005d1c:	f107 0208 	add.w	r2, r7, #8
 8005d20:	2303      	movs	r3, #3
 8005d22:	2128      	movs	r1, #40	; 0x28
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff ff05 	bl	8005b34 <lps22hh_read_reg>
 8005d2a:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005d2c:	7abb      	ldrb	r3, [r7, #10]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	7a7a      	ldrb	r2, [r7, #9]
 8005d3c:	441a      	add	r2, r3
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	7a3a      	ldrb	r2, [r7, #8]
 8005d4a:	441a      	add	r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	021a      	lsls	r2, r3, #8
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	601a      	str	r2, [r3, #0]

  return ret;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005d6e:	f107 0208 	add.w	r2, r7, #8
 8005d72:	2302      	movs	r3, #2
 8005d74:	212b      	movs	r1, #43	; 0x2b
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fedc 	bl	8005b34 <lps22hh_read_reg>
 8005d7c:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005d7e:	7a7b      	ldrb	r3, [r7, #9]
 8005d80:	b21a      	sxth	r2, r3
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	021b      	lsls	r3, r3, #8
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	7a3b      	ldrb	r3, [r7, #8]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	4413      	add	r3, r2
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	b21a      	sxth	r2, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005db4:	2301      	movs	r3, #1
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	210f      	movs	r1, #15
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff feba 	bl	8005b34 <lps22hh_read_reg>
 8005dc0:	60f8      	str	r0, [r7, #12]

  return ret;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005dd8:	f107 0208 	add.w	r2, r7, #8
 8005ddc:	2301      	movs	r3, #1
 8005dde:	2111      	movs	r1, #17
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff fea7 	bl	8005b34 <lps22hh_read_reg>
 8005de6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	7a3b      	ldrb	r3, [r7, #8]
 8005df8:	f362 0382 	bfi	r3, r2, #2, #1
 8005dfc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005dfe:	f107 0208 	add.w	r2, r7, #8
 8005e02:	2301      	movs	r3, #1
 8005e04:	2111      	movs	r1, #17
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff feac 	bl	8005b64 <lps22hh_write_reg>
 8005e0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005e22:	f107 0208 	add.w	r2, r7, #8
 8005e26:	2301      	movs	r3, #1
 8005e28:	2111      	movs	r1, #17
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff fe82 	bl	8005b34 <lps22hh_read_reg>
 8005e30:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8005e32:	7a3b      	ldrb	r3, [r7, #8]
 8005e34:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	701a      	strb	r2, [r3, #0]

  return ret;
 8005e40:	68fb      	ldr	r3, [r7, #12]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005e4a:	b590      	push	{r4, r7, lr}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	461a      	mov	r2, r3
 8005e56:	460b      	mov	r3, r1
 8005e58:	72fb      	strb	r3, [r7, #11]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685c      	ldr	r4, [r3, #4]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6898      	ldr	r0, [r3, #8]
 8005e66:	893b      	ldrh	r3, [r7, #8]
 8005e68:	7af9      	ldrb	r1, [r7, #11]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	47a0      	blx	r4
 8005e6e:	6178      	str	r0, [r7, #20]

  return ret;
 8005e70:	697b      	ldr	r3, [r7, #20]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd90      	pop	{r4, r7, pc}

08005e7a <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005e7a:	b590      	push	{r4, r7, lr}
 8005e7c:	b087      	sub	sp, #28
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	461a      	mov	r2, r3
 8005e86:	460b      	mov	r3, r1
 8005e88:	72fb      	strb	r3, [r7, #11]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681c      	ldr	r4, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6898      	ldr	r0, [r3, #8]
 8005e96:	893b      	ldrh	r3, [r7, #8]
 8005e98:	7af9      	ldrb	r1, [r7, #11]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	47a0      	blx	r4
 8005e9e:	6178      	str	r0, [r7, #20]

  return ret;
 8005ea0:	697b      	ldr	r3, [r7, #20]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd90      	pop	{r4, r7, pc}
	...

08005eac <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8005eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ec2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ed8 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8005ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005eca:	eeb0 0a67 	vmov.f32	s0, s15
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	3d79db23 	.word	0x3d79db23

08005edc <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8005ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ef2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005f08 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8005ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005efa:	eeb0 0a67 	vmov.f32	s0, s15
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	428c0000 	.word	0x428c0000

08005f0c <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8005f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f22:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005f40 <lsm6dsr_from_lsb_to_celsius+0x34>
 8005f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f2a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8005f32:	eeb0 0a67 	vmov.f32	s0, s15
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	43800000 	.word	0x43800000

08005f44 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005f50:	f107 0208 	add.w	r2, r7, #8
 8005f54:	2301      	movs	r3, #1
 8005f56:	2110      	movs	r1, #16
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff ff76 	bl	8005e4a <lsm6dsr_read_reg>
 8005f5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10f      	bne.n	8005f86 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	7a3b      	ldrb	r3, [r7, #8]
 8005f70:	f362 0383 	bfi	r3, r2, #2, #2
 8005f74:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005f76:	f107 0208 	add.w	r2, r7, #8
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	2110      	movs	r1, #16
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff ff7b 	bl	8005e7a <lsm6dsr_write_reg>
 8005f84:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005f86:	68fb      	ldr	r3, [r7, #12]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005fa0:	f107 030c 	add.w	r3, r7, #12
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fbb0 	bl	800670c <lsm6dsr_fsm_enable_get>
 8005fac:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f040 80c4 	bne.w	800613e <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005fb6:	7b3b      	ldrb	r3, [r7, #12]
 8005fb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005fbe:	7b3b      	ldrb	r3, [r7, #12]
 8005fc0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fc4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005fca:	7b3b      	ldrb	r3, [r7, #12]
 8005fcc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005fd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005fd6:	7b3b      	ldrb	r3, [r7, #12]
 8005fd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005fdc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005fe2:	7b3b      	ldrb	r3, [r7, #12]
 8005fe4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005fe8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005fee:	7b3b      	ldrb	r3, [r7, #12]
 8005ff0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005ff4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005ffa:	7b3b      	ldrb	r3, [r7, #12]
 8005ffc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006000:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006002:	4313      	orrs	r3, r2
 8006004:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006006:	7b3b      	ldrb	r3, [r7, #12]
 8006008:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800600c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800600e:	4313      	orrs	r3, r2
 8006010:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006012:	7b7b      	ldrb	r3, [r7, #13]
 8006014:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006018:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800601a:	4313      	orrs	r3, r2
 800601c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800601e:	7b7b      	ldrb	r3, [r7, #13]
 8006020:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006024:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006026:	4313      	orrs	r3, r2
 8006028:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800602a:	7b7b      	ldrb	r3, [r7, #13]
 800602c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006030:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006032:	4313      	orrs	r3, r2
 8006034:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006036:	7b7b      	ldrb	r3, [r7, #13]
 8006038:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800603c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800603e:	4313      	orrs	r3, r2
 8006040:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006042:	7b7b      	ldrb	r3, [r7, #13]
 8006044:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006048:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800604a:	4313      	orrs	r3, r2
 800604c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800604e:	7b7b      	ldrb	r3, [r7, #13]
 8006050:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006054:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006056:	4313      	orrs	r3, r2
 8006058:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800605a:	7b7b      	ldrb	r3, [r7, #13]
 800605c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006062:	4313      	orrs	r3, r2
 8006064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006066:	7b7b      	ldrb	r3, [r7, #13]
 8006068:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800606c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800606e:	4313      	orrs	r3, r2
 8006070:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006072:	2b01      	cmp	r3, #1
 8006074:	d163      	bne.n	800613e <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006076:	f107 030b 	add.w	r3, r7, #11
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fb71 	bl	8006764 <lsm6dsr_fsm_data_rate_get>
 8006082:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d159      	bne.n	800613e <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800608a:	7afb      	ldrb	r3, [r7, #11]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d853      	bhi.n	8006138 <lsm6dsr_xl_data_rate_set+0x1a8>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <lsm6dsr_xl_data_rate_set+0x108>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060bb 	.word	0x080060bb
 80060a0:	080060d9 	.word	0x080060d9
 80060a4:	08006103 	.word	0x08006103
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 80060ae:	2301      	movs	r3, #1
 80060b0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80060b2:	e045      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	75fb      	strb	r3, [r7, #23]
            break;
 80060b8:	e042      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d102      	bne.n	80060c6 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80060c0:	2302      	movs	r3, #2
 80060c2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80060c4:	e03c      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d102      	bne.n	80060d2 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80060cc:	2302      	movs	r3, #2
 80060ce:	75fb      	strb	r3, [r7, #23]
            break;
 80060d0:	e036      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	75fb      	strb	r3, [r7, #23]
            break;
 80060d6:	e033      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80060de:	2303      	movs	r3, #3
 80060e0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80060e2:	e02d      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d102      	bne.n	80060f0 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80060ea:	2303      	movs	r3, #3
 80060ec:	75fb      	strb	r3, [r7, #23]
            break;
 80060ee:	e027      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d102      	bne.n	80060fc <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80060f6:	2303      	movs	r3, #3
 80060f8:	75fb      	strb	r3, [r7, #23]
            break;
 80060fa:	e021      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	75fb      	strb	r3, [r7, #23]
            break;
 8006100:	e01e      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006108:	2304      	movs	r3, #4
 800610a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800610c:	e018      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d102      	bne.n	800611a <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006114:	2304      	movs	r3, #4
 8006116:	75fb      	strb	r3, [r7, #23]
            break;
 8006118:	e012      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d102      	bne.n	8006126 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006120:	2304      	movs	r3, #4
 8006122:	75fb      	strb	r3, [r7, #23]
            break;
 8006124:	e00c      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d102      	bne.n	8006132 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800612c:	2304      	movs	r3, #4
 800612e:	75fb      	strb	r3, [r7, #23]
            break;
 8006130:	e006      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	75fb      	strb	r3, [r7, #23]
            break;
 8006136:	e003      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	75fb      	strb	r3, [r7, #23]
            break;
 800613c:	e000      	b.n	8006140 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800613e:	bf00      	nop
    }
  }

  if (ret == 0)
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d107      	bne.n	8006156 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006146:	f107 0208 	add.w	r2, r7, #8
 800614a:	2301      	movs	r3, #1
 800614c:	2110      	movs	r1, #16
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fe7b 	bl	8005e4a <lsm6dsr_read_reg>
 8006154:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	b2da      	uxtb	r2, r3
 8006164:	7a3b      	ldrb	r3, [r7, #8]
 8006166:	f362 1307 	bfi	r3, r2, #4, #4
 800616a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800616c:	f107 0208 	add.w	r2, r7, #8
 8006170:	2301      	movs	r3, #1
 8006172:	2110      	movs	r1, #16
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff fe80 	bl	8005e7a <lsm6dsr_write_reg>
 800617a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800617c:	693b      	ldr	r3, [r7, #16]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop

08006188 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006194:	f107 0208 	add.w	r2, r7, #8
 8006198:	2301      	movs	r3, #1
 800619a:	2111      	movs	r1, #17
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fe54 	bl	8005e4a <lsm6dsr_read_reg>
 80061a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10f      	bne.n	80061ca <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	7a3b      	ldrb	r3, [r7, #8]
 80061b4:	f362 0303 	bfi	r3, r2, #0, #4
 80061b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80061ba:	f107 0208 	add.w	r2, r7, #8
 80061be:	2301      	movs	r3, #1
 80061c0:	2111      	movs	r1, #17
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fe59 	bl	8005e7a <lsm6dsr_write_reg>
 80061c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80061ca:	68fb      	ldr	r3, [r7, #12]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80061e4:	f107 030c 	add.w	r3, r7, #12
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa8e 	bl	800670c <lsm6dsr_fsm_enable_get>
 80061f0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 80c4 	bne.w	8006382 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80061fa:	7b3b      	ldrb	r3, [r7, #12]
 80061fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006200:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006202:	7b3b      	ldrb	r3, [r7, #12]
 8006204:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006208:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800620a:	4313      	orrs	r3, r2
 800620c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800620e:	7b3b      	ldrb	r3, [r7, #12]
 8006210:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006214:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006216:	4313      	orrs	r3, r2
 8006218:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800621a:	7b3b      	ldrb	r3, [r7, #12]
 800621c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006220:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006222:	4313      	orrs	r3, r2
 8006224:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006226:	7b3b      	ldrb	r3, [r7, #12]
 8006228:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800622c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800622e:	4313      	orrs	r3, r2
 8006230:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006232:	7b3b      	ldrb	r3, [r7, #12]
 8006234:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006238:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800623a:	4313      	orrs	r3, r2
 800623c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800623e:	7b3b      	ldrb	r3, [r7, #12]
 8006240:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006244:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006246:	4313      	orrs	r3, r2
 8006248:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800624a:	7b3b      	ldrb	r3, [r7, #12]
 800624c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006250:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006252:	4313      	orrs	r3, r2
 8006254:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006256:	7b7b      	ldrb	r3, [r7, #13]
 8006258:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800625c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800625e:	4313      	orrs	r3, r2
 8006260:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006262:	7b7b      	ldrb	r3, [r7, #13]
 8006264:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006268:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800626a:	4313      	orrs	r3, r2
 800626c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800626e:	7b7b      	ldrb	r3, [r7, #13]
 8006270:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006274:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006276:	4313      	orrs	r3, r2
 8006278:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800627a:	7b7b      	ldrb	r3, [r7, #13]
 800627c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006280:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006282:	4313      	orrs	r3, r2
 8006284:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006286:	7b7b      	ldrb	r3, [r7, #13]
 8006288:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800628c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800628e:	4313      	orrs	r3, r2
 8006290:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006292:	7b7b      	ldrb	r3, [r7, #13]
 8006294:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006298:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800629a:	4313      	orrs	r3, r2
 800629c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80062a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80062a6:	4313      	orrs	r3, r2
 80062a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80062aa:	7b7b      	ldrb	r3, [r7, #13]
 80062ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80062b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80062b2:	4313      	orrs	r3, r2
 80062b4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d163      	bne.n	8006382 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80062ba:	f107 030b 	add.w	r3, r7, #11
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fa4f 	bl	8006764 <lsm6dsr_fsm_data_rate_get>
 80062c6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d159      	bne.n	8006382 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80062ce:	7afb      	ldrb	r3, [r7, #11]
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d853      	bhi.n	800637c <lsm6dsr_gy_data_rate_set+0x1a8>
 80062d4:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <lsm6dsr_gy_data_rate_set+0x108>)
 80062d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062da:	bf00      	nop
 80062dc:	080062ed 	.word	0x080062ed
 80062e0:	080062ff 	.word	0x080062ff
 80062e4:	0800631d 	.word	0x0800631d
 80062e8:	08006347 	.word	0x08006347
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80062f6:	e045      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	75fb      	strb	r3, [r7, #23]
            break;
 80062fc:	e042      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d102      	bne.n	800630a <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006304:	2302      	movs	r3, #2
 8006306:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006308:	e03c      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d102      	bne.n	8006316 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006310:	2302      	movs	r3, #2
 8006312:	75fb      	strb	r3, [r7, #23]
            break;
 8006314:	e036      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	75fb      	strb	r3, [r7, #23]
            break;
 800631a:	e033      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006322:	2303      	movs	r3, #3
 8006324:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006326:	e02d      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d102      	bne.n	8006334 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800632e:	2303      	movs	r3, #3
 8006330:	75fb      	strb	r3, [r7, #23]
            break;
 8006332:	e027      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d102      	bne.n	8006340 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800633a:	2303      	movs	r3, #3
 800633c:	75fb      	strb	r3, [r7, #23]
            break;
 800633e:	e021      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	75fb      	strb	r3, [r7, #23]
            break;
 8006344:	e01e      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d102      	bne.n	8006352 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800634c:	2304      	movs	r3, #4
 800634e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006350:	e018      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d102      	bne.n	800635e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006358:	2304      	movs	r3, #4
 800635a:	75fb      	strb	r3, [r7, #23]
            break;
 800635c:	e012      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d102      	bne.n	800636a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006364:	2304      	movs	r3, #4
 8006366:	75fb      	strb	r3, [r7, #23]
            break;
 8006368:	e00c      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d102      	bne.n	8006376 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006370:	2304      	movs	r3, #4
 8006372:	75fb      	strb	r3, [r7, #23]
            break;
 8006374:	e006      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	75fb      	strb	r3, [r7, #23]
            break;
 800637a:	e003      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	75fb      	strb	r3, [r7, #23]
            break;
 8006380:	e000      	b.n	8006384 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8006382:	bf00      	nop
    }
  }

  if (ret == 0)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800638a:	f107 0208 	add.w	r2, r7, #8
 800638e:	2301      	movs	r3, #1
 8006390:	2111      	movs	r1, #17
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fd59 	bl	8005e4a <lsm6dsr_read_reg>
 8006398:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10f      	bne.n	80063c0 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	7a3b      	ldrb	r3, [r7, #8]
 80063aa:	f362 1307 	bfi	r3, r2, #4, #4
 80063ae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80063b0:	f107 0208 	add.w	r2, r7, #8
 80063b4:	2301      	movs	r3, #1
 80063b6:	2111      	movs	r1, #17
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7ff fd5e 	bl	8005e7a <lsm6dsr_write_reg>
 80063be:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80063c0:	693b      	ldr	r3, [r7, #16]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop

080063cc <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80063d8:	f107 0208 	add.w	r2, r7, #8
 80063dc:	2301      	movs	r3, #1
 80063de:	2112      	movs	r1, #18
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff fd32 	bl	8005e4a <lsm6dsr_read_reg>
 80063e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10f      	bne.n	800640e <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	7a3b      	ldrb	r3, [r7, #8]
 80063f8:	f362 1386 	bfi	r3, r2, #6, #1
 80063fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80063fe:	f107 0208 	add.w	r2, r7, #8
 8006402:	2301      	movs	r3, #1
 8006404:	2112      	movs	r1, #18
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fd37 	bl	8005e7a <lsm6dsr_write_reg>
 800640c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800640e:	68fb      	ldr	r3, [r7, #12]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006422:	f107 0208 	add.w	r2, r7, #8
 8006426:	2301      	movs	r3, #1
 8006428:	211e      	movs	r1, #30
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff fd0d 	bl	8005e4a <lsm6dsr_read_reg>
 8006430:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8006432:	7a3b      	ldrb	r3, [r7, #8]
 8006434:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	701a      	strb	r2, [r3, #0]

  return ret;
 8006440:	68fb      	ldr	r3, [r7, #12]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006454:	f107 0208 	add.w	r2, r7, #8
 8006458:	2301      	movs	r3, #1
 800645a:	211e      	movs	r1, #30
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fcf4 	bl	8005e4a <lsm6dsr_read_reg>
 8006462:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8006464:	7a3b      	ldrb	r3, [r7, #8]
 8006466:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800646a:	b2db      	uxtb	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	701a      	strb	r2, [r3, #0]

  return ret;
 8006472:	68fb      	ldr	r3, [r7, #12]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006486:	f107 0208 	add.w	r2, r7, #8
 800648a:	2301      	movs	r3, #1
 800648c:	211e      	movs	r1, #30
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff fcdb 	bl	8005e4a <lsm6dsr_read_reg>
 8006494:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8006496:	7a3b      	ldrb	r3, [r7, #8]
 8006498:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800649c:	b2db      	uxtb	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	701a      	strb	r2, [r3, #0]

  return ret;
 80064a4:	68fb      	ldr	r3, [r7, #12]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 80064b8:	f107 0208 	add.w	r2, r7, #8
 80064bc:	2302      	movs	r3, #2
 80064be:	2120      	movs	r1, #32
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff fcc2 	bl	8005e4a <lsm6dsr_read_reg>
 80064c6:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80064c8:	7a7b      	ldrb	r3, [r7, #9]
 80064ca:	b21a      	sxth	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	b29a      	uxth	r2, r3
 80064dc:	7a3b      	ldrb	r3, [r7, #8]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4413      	add	r3, r2
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	b21a      	sxth	r2, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	801a      	strh	r2, [r3, #0]

  return ret;
 80064ea:	68fb      	ldr	r3, [r7, #12]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80064fe:	f107 020c 	add.w	r2, r7, #12
 8006502:	2306      	movs	r3, #6
 8006504:	2122      	movs	r1, #34	; 0x22
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fc9f 	bl	8005e4a <lsm6dsr_read_reg>
 800650c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800650e:	7b7b      	ldrb	r3, [r7, #13]
 8006510:	b21a      	sxth	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800651c:	b29b      	uxth	r3, r3
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	b29a      	uxth	r2, r3
 8006522:	7b3b      	ldrb	r3, [r7, #12]
 8006524:	b29b      	uxth	r3, r3
 8006526:	4413      	add	r3, r2
 8006528:	b29b      	uxth	r3, r3
 800652a:	b21a      	sxth	r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006530:	7bfa      	ldrb	r2, [r7, #15]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	3302      	adds	r3, #2
 8006536:	b212      	sxth	r2, r2
 8006538:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	3302      	adds	r3, #2
 800653e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006542:	b29b      	uxth	r3, r3
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	b29a      	uxth	r2, r3
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	b29b      	uxth	r3, r3
 800654c:	4413      	add	r3, r2
 800654e:	b29a      	uxth	r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	3302      	adds	r3, #2
 8006554:	b212      	sxth	r2, r2
 8006556:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006558:	7c7a      	ldrb	r2, [r7, #17]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	3304      	adds	r3, #4
 800655e:	b212      	sxth	r2, r2
 8006560:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	3304      	adds	r3, #4
 8006566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800656a:	b29b      	uxth	r3, r3
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	b29a      	uxth	r2, r3
 8006570:	7c3b      	ldrb	r3, [r7, #16]
 8006572:	b29b      	uxth	r3, r3
 8006574:	4413      	add	r3, r2
 8006576:	b29a      	uxth	r2, r3
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	3304      	adds	r3, #4
 800657c:	b212      	sxth	r2, r2
 800657e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006580:	697b      	ldr	r3, [r7, #20]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b086      	sub	sp, #24
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8006594:	f107 020c 	add.w	r2, r7, #12
 8006598:	2306      	movs	r3, #6
 800659a:	2128      	movs	r1, #40	; 0x28
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff fc54 	bl	8005e4a <lsm6dsr_read_reg>
 80065a2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80065a4:	7b7b      	ldrb	r3, [r7, #13]
 80065a6:	b21a      	sxth	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	7b3b      	ldrb	r3, [r7, #12]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4413      	add	r3, r2
 80065be:	b29b      	uxth	r3, r3
 80065c0:	b21a      	sxth	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80065c6:	7bfa      	ldrb	r2, [r7, #15]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	3302      	adds	r3, #2
 80065cc:	b212      	sxth	r2, r2
 80065ce:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	3302      	adds	r3, #2
 80065d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	b29a      	uxth	r2, r3
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	4413      	add	r3, r2
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	3302      	adds	r3, #2
 80065ea:	b212      	sxth	r2, r2
 80065ec:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80065ee:	7c7a      	ldrb	r2, [r7, #17]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	3304      	adds	r3, #4
 80065f4:	b212      	sxth	r2, r2
 80065f6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	3304      	adds	r3, #4
 80065fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006600:	b29b      	uxth	r3, r3
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	b29a      	uxth	r2, r3
 8006606:	7c3b      	ldrb	r3, [r7, #16]
 8006608:	b29b      	uxth	r3, r3
 800660a:	4413      	add	r3, r2
 800660c:	b29a      	uxth	r2, r3
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	3304      	adds	r3, #4
 8006612:	b212      	sxth	r2, r2
 8006614:	801a      	strh	r2, [r3, #0]

  return ret;
 8006616:	697b      	ldr	r3, [r7, #20]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800662c:	f107 0208 	add.w	r2, r7, #8
 8006630:	2301      	movs	r3, #1
 8006632:	2101      	movs	r1, #1
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff fc08 	bl	8005e4a <lsm6dsr_read_reg>
 800663a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10f      	bne.n	8006662 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	b2da      	uxtb	r2, r3
 800664a:	7a3b      	ldrb	r3, [r7, #8]
 800664c:	f362 1387 	bfi	r3, r2, #6, #2
 8006650:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006652:	f107 0208 	add.w	r2, r7, #8
 8006656:	2301      	movs	r3, #1
 8006658:	2101      	movs	r1, #1
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff fc0d 	bl	8005e7a <lsm6dsr_write_reg>
 8006660:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8006662:	68fb      	ldr	r3, [r7, #12]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8006676:	2301      	movs	r3, #1
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	210f      	movs	r1, #15
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff fbe4 	bl	8005e4a <lsm6dsr_read_reg>
 8006682:	60f8      	str	r0, [r7, #12]

  return ret;
 8006684:	68fb      	ldr	r3, [r7, #12]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	460b      	mov	r3, r1
 8006698:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800669a:	f107 0208 	add.w	r2, r7, #8
 800669e:	2301      	movs	r3, #1
 80066a0:	2112      	movs	r1, #18
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff fbd1 	bl	8005e4a <lsm6dsr_read_reg>
 80066a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10f      	bne.n	80066d0 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	7a3b      	ldrb	r3, [r7, #8]
 80066ba:	f362 0300 	bfi	r3, r2, #0, #1
 80066be:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80066c0:	f107 0208 	add.w	r2, r7, #8
 80066c4:	2301      	movs	r3, #1
 80066c6:	2112      	movs	r1, #18
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff fbd6 	bl	8005e7a <lsm6dsr_write_reg>
 80066ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80066d0:	68fb      	ldr	r3, [r7, #12]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80066e4:	f107 0208 	add.w	r2, r7, #8
 80066e8:	2301      	movs	r3, #1
 80066ea:	2112      	movs	r1, #18
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff fbac 	bl	8005e4a <lsm6dsr_read_reg>
 80066f2:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80066f4:	7a3b      	ldrb	r3, [r7, #8]
 80066f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	701a      	strb	r2, [r3, #0]

  return ret;
 8006702:	68fb      	ldr	r3, [r7, #12]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8006716:	2102      	movs	r1, #2
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff ff81 	bl	8006620 <lsm6dsr_mem_bank_set>
 800671e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8006726:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8006728:	2301      	movs	r3, #1
 800672a:	2146      	movs	r1, #70	; 0x46
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fb8c 	bl	8005e4a <lsm6dsr_read_reg>
 8006732:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d107      	bne.n	800674a <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800673e:	2301      	movs	r3, #1
 8006740:	2147      	movs	r1, #71	; 0x47
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff fb81 	bl	8005e4a <lsm6dsr_read_reg>
 8006748:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8006750:	2100      	movs	r1, #0
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff ff64 	bl	8006620 <lsm6dsr_mem_bank_set>
 8006758:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800675a:	68fb      	ldr	r3, [r7, #12]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800676e:	2102      	movs	r1, #2
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff ff55 	bl	8006620 <lsm6dsr_mem_bank_set>
 8006776:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d107      	bne.n	800678e <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800677e:	f107 0208 	add.w	r2, r7, #8
 8006782:	2301      	movs	r3, #1
 8006784:	215f      	movs	r1, #95	; 0x5f
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fb5f 	bl	8005e4a <lsm6dsr_read_reg>
 800678c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8006794:	2100      	movs	r1, #0
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff ff42 	bl	8006620 <lsm6dsr_mem_bank_set>
 800679c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800679e:	7a3b      	ldrb	r3, [r7, #8]
 80067a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d81a      	bhi.n	80067e0 <lsm6dsr_fsm_data_rate_get+0x7c>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067c9 	.word	0x080067c9
 80067b8:	080067d1 	.word	0x080067d1
 80067bc:	080067d9 	.word	0x080067d9
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
      break;
 80067c6:	e00f      	b.n	80067e8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
      break;
 80067ce:	e00b      	b.n	80067e8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2202      	movs	r2, #2
 80067d4:	701a      	strb	r2, [r3, #0]
      break;
 80067d6:	e007      	b.n	80067e8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2203      	movs	r2, #3
 80067dc:	701a      	strb	r2, [r3, #0]
      break;
 80067de:	e003      	b.n	80067e8 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]
      break;
 80067e6:	bf00      	nop
  }

  return ret;
 80067e8:	68fb      	ldr	r3, [r7, #12]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop

080067f4 <HAL_RTC_AlarmAEventCallback>:
								0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
								0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
								0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80067fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006800:	2208      	movs	r2, #8
 8006802:	4905      	ldr	r1, [pc, #20]	; (8006818 <HAL_RTC_AlarmAEventCallback+0x24>)
 8006804:	4805      	ldr	r0, [pc, #20]	; (800681c <HAL_RTC_AlarmAEventCallback+0x28>)
 8006806:	f007 f98a 	bl	800db1e <HAL_UART_Transmit>
	flagA = 1;
 800680a:	4b05      	ldr	r3, [pc, #20]	; (8006820 <HAL_RTC_AlarmAEventCallback+0x2c>)
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	08020b50 	.word	0x08020b50
 800681c:	20006c34 	.word	0x20006c34
 8006820:	200006b8 	.word	0x200006b8

08006824 <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(RTC_HandleTypeDef* hrtc, UART_HandleTypeDef uart,uint8_t sleepT){
 8006824:	b084      	sub	sp, #16
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	f107 0014 	add.w	r0, r7, #20
 8006832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	rtc = hrtc;
 8006836:	4a0f      	ldr	r2, [pc, #60]	; (8006874 <MRT_SetupRTOS+0x50>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6013      	str	r3, [r2, #0]
	rtos.huart = uart;
 800683c:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <MRT_SetupRTOS+0x54>)
 800683e:	4618      	mov	r0, r3
 8006840:	f107 0314 	add.w	r3, r7, #20
 8006844:	2244      	movs	r2, #68	; 0x44
 8006846:	4619      	mov	r1, r3
 8006848:	f013 fbb0 	bl	8019fac <memcpy>
	rtos.sleepTime = sleepT;
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <MRT_SetupRTOS+0x54>)
 800684e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8006852:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8006856:	f04f 33ff 	mov.w	r3, #4294967295
 800685a:	2211      	movs	r2, #17
 800685c:	4907      	ldr	r1, [pc, #28]	; (800687c <MRT_SetupRTOS+0x58>)
 800685e:	4806      	ldr	r0, [pc, #24]	; (8006878 <MRT_SetupRTOS+0x54>)
 8006860:	f007 f95d 	bl	800db1e <HAL_UART_Transmit>
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800686e:	b004      	add	sp, #16
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20006c7c 	.word	0x20006c7c
 8006878:	20006c34 	.word	0x20006c34
 800687c:	08020b68 	.word	0x08020b68

08006880 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8006886:	4b15      	ldr	r3, [pc, #84]	; (80068dc <MRT_WUProcedure+0x5c>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b02      	cmp	r3, #2
 8006890:	d11e      	bne.n	80068d0 <MRT_WUProcedure+0x50>
	{

		wu_flag = 1;
 8006892:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <MRT_WUProcedure+0x60>)
 8006894:	2201      	movs	r2, #1
 8006896:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8006898:	4b10      	ldr	r3, [pc, #64]	; (80068dc <MRT_WUProcedure+0x5c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a0f      	ldr	r2, [pc, #60]	; (80068dc <MRT_WUProcedure+0x5c>)
 800689e:	f043 0308 	orr.w	r3, r3, #8
 80068a2:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <MRT_WUProcedure+0x64>)
 80068a6:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7f9 fca1 	bl	80001f0 <strlen>
 80068ae:	4603      	mov	r3, r0
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	480b      	ldr	r0, [pc, #44]	; (80068e8 <MRT_WUProcedure+0x68>)
 80068ba:	f007 f930 	bl	800db1e <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80068be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80068c2:	f003 fe2b 	bl	800a51c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(rtc);
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <MRT_WUProcedure+0x6c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f005 fa24 	bl	800bd18 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 80068d0:	f000 f80e 	bl	80068f0 <MRT_ClearFlags>
}
 80068d4:	bf00      	nop
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40007000 	.word	0x40007000
 80068e0:	200006b9 	.word	0x200006b9
 80068e4:	08020b7c 	.word	0x08020b7c
 80068e8:	20006c34 	.word	0x20006c34
 80068ec:	20006c7c 	.word	0x20006c7c

080068f0 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295
 80068f8:	2214      	movs	r2, #20
 80068fa:	4939      	ldr	r1, [pc, #228]	; (80069e0 <MRT_ClearFlags+0xf0>)
 80068fc:	4839      	ldr	r0, [pc, #228]	; (80069e4 <MRT_ClearFlags+0xf4>)
 80068fe:	f007 f90e 	bl	800db1e <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 8006902:	4b39      	ldr	r3, [pc, #228]	; (80069e8 <MRT_ClearFlags+0xf8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	22ca      	movs	r2, #202	; 0xca
 800690a:	625a      	str	r2, [r3, #36]	; 0x24
 800690c:	4b36      	ldr	r3, [pc, #216]	; (80069e8 <MRT_ClearFlags+0xf8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2253      	movs	r2, #83	; 0x53
 8006914:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 8006916:	e011      	b.n	800693c <MRT_ClearFlags+0x4c>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8006918:	f04f 33ff 	mov.w	r3, #4294967295
 800691c:	2217      	movs	r2, #23
 800691e:	4933      	ldr	r1, [pc, #204]	; (80069ec <MRT_ClearFlags+0xfc>)
 8006920:	4830      	ldr	r0, [pc, #192]	; (80069e4 <MRT_ClearFlags+0xf4>)
 8006922:	f007 f8fc 	bl	800db1e <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRAF);
 8006926:	4b30      	ldr	r3, [pc, #192]	; (80069e8 <MRT_ClearFlags+0xf8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	4b2d      	ldr	r3, [pc, #180]	; (80069e8 <MRT_ClearFlags+0xf8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800693a:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 800693c:	4b2a      	ldr	r3, [pc, #168]	; (80069e8 <MRT_ClearFlags+0xf8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e5      	bne.n	8006918 <MRT_ClearFlags+0x28>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 800694c:	4b26      	ldr	r3, [pc, #152]	; (80069e8 <MRT_ClearFlags+0xf8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	22ff      	movs	r2, #255	; 0xff
 8006954:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006956:	4b26      	ldr	r3, [pc, #152]	; (80069f0 <MRT_ClearFlags+0x100>)
 8006958:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800695c:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 800695e:	4b22      	ldr	r3, [pc, #136]	; (80069e8 <MRT_ClearFlags+0xf8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	22ca      	movs	r2, #202	; 0xca
 8006966:	625a      	str	r2, [r3, #36]	; 0x24
 8006968:	4b1f      	ldr	r3, [pc, #124]	; (80069e8 <MRT_ClearFlags+0xf8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2253      	movs	r2, #83	; 0x53
 8006970:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8006972:	e011      	b.n	8006998 <MRT_ClearFlags+0xa8>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8006974:	f04f 33ff 	mov.w	r3, #4294967295
 8006978:	2217      	movs	r2, #23
 800697a:	491e      	ldr	r1, [pc, #120]	; (80069f4 <MRT_ClearFlags+0x104>)
 800697c:	4819      	ldr	r0, [pc, #100]	; (80069e4 <MRT_ClearFlags+0xf4>)
 800697e:	f007 f8ce 	bl	800db1e <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRBF);
 8006982:	4b19      	ldr	r3, [pc, #100]	; (80069e8 <MRT_ClearFlags+0xf8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	b2da      	uxtb	r2, r3
 800698c:	4b16      	ldr	r3, [pc, #88]	; (80069e8 <MRT_ClearFlags+0xf8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006996:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8006998:	4b13      	ldr	r3, [pc, #76]	; (80069e8 <MRT_ClearFlags+0xf8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e5      	bne.n	8006974 <MRT_ClearFlags+0x84>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 80069a8:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <MRT_ClearFlags+0xf8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	22ff      	movs	r2, #255	; 0xff
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <MRT_ClearFlags+0x100>)
 80069b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069b8:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80069ba:	4b0f      	ldr	r3, [pc, #60]	; (80069f8 <MRT_ClearFlags+0x108>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a0e      	ldr	r2, [pc, #56]	; (80069f8 <MRT_ClearFlags+0x108>)
 80069c0:	f043 0304 	orr.w	r3, r3, #4
 80069c4:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtc, RTC_FLAG_WUTF);
 80069c6:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <MRT_ClearFlags+0xf8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <MRT_ClearFlags+0xf8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80069da:	60da      	str	r2, [r3, #12]
}
 80069dc:	bf00      	nop
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	08020b9c 	.word	0x08020b9c
 80069e4:	20006c34 	.word	0x20006c34
 80069e8:	20006c7c 	.word	0x20006c7c
 80069ec:	08020bb4 	.word	0x08020bb4
 80069f0:	40013c00 	.word	0x40013c00
 80069f4:	08020bcc 	.word	0x08020bcc
 80069f8:	40007000 	.word	0x40007000

080069fc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b0a4      	sub	sp, #144	; 0x90
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8006a04:	f04f 33ff 	mov.w	r3, #4294967295
 8006a08:	220f      	movs	r2, #15
 8006a0a:	491c      	ldr	r1, [pc, #112]	; (8006a7c <MRT_StandByMode+0x80>)
 8006a0c:	481c      	ldr	r0, [pc, #112]	; (8006a80 <MRT_StandByMode+0x84>)
 8006a0e:	f007 f886 	bl	800db1e <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8006a12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006a16:	f003 fd6f 	bl	800a4f8 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8006a1a:	f7ff ff69 	bl	80068f0 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8006a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a22:	2211      	movs	r2, #17
 8006a24:	4917      	ldr	r1, [pc, #92]	; (8006a84 <MRT_StandByMode+0x88>)
 8006a26:	4816      	ldr	r0, [pc, #88]	; (8006a80 <MRT_StandByMode+0x84>)
 8006a28:	f007 f879 	bl	800db1e <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8006a2c:	f107 0308 	add.w	r3, r7, #8
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	4915      	ldr	r1, [pc, #84]	; (8006a88 <MRT_StandByMode+0x8c>)
 8006a34:	4618      	mov	r0, r3
 8006a36:	f014 fb5f 	bl	801b0f8 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8006a3a:	f107 0308 	add.w	r3, r7, #8
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7f9 fbd6 	bl	80001f0 <strlen>
 8006a44:	4603      	mov	r3, r0
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	f107 0108 	add.w	r1, r7, #8
 8006a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a50:	480b      	ldr	r0, [pc, #44]	; (8006a80 <MRT_StandByMode+0x84>)
 8006a52:	f007 f864 	bl	800db1e <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(rtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8006a56:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <MRT_StandByMode+0x90>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f005 f89a 	bl	800bb98 <HAL_RTCEx_SetWakeUpTimer_IT>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <MRT_StandByMode+0x72>
	{
	  Error_Handler();
 8006a6a:	f7fb ffaf 	bl	80029cc <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8006a6e:	f003 fd69 	bl	800a544 <HAL_PWR_EnterSTANDBYMode>
}
 8006a72:	bf00      	nop
 8006a74:	3790      	adds	r7, #144	; 0x90
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08020be4 	.word	0x08020be4
 8006a80:	20006c34 	.word	0x20006c34
 8006a84:	08020bf4 	.word	0x08020bf4
 8006a88:	08020c08 	.word	0x08020c08
 8006a8c:	20006c7c 	.word	0x20006c7c

08006a90 <MRT_setAlarmA>:


void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	71fb      	strb	r3, [r7, #7]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	71bb      	strb	r3, [r7, #6]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <MRT_setAlarmA+0x84>)
 8006aa6:	5cd2      	ldrb	r2, [r2, r3]
 8006aa8:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006aaa:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8006aac:	79bb      	ldrb	r3, [r7, #6]
 8006aae:	4a19      	ldr	r2, [pc, #100]	; (8006b14 <MRT_setAlarmA+0x84>)
 8006ab0:	5cd2      	ldrb	r2, [r2, r3]
 8006ab2:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006ab4:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8006ab6:	797b      	ldrb	r3, [r7, #5]
 8006ab8:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <MRT_setAlarmA+0x84>)
 8006aba:	5cd2      	ldrb	r2, [r2, r3]
 8006abc:	4b16      	ldr	r3, [pc, #88]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006abe:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8006ac0:	4b15      	ldr	r3, [pc, #84]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006acc:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8006ad2:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8006ad8:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006ade:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006af2:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(rtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8006af4:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <MRT_setAlarmA+0x8c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2201      	movs	r2, #1
 8006afa:	4907      	ldr	r1, [pc, #28]	; (8006b18 <MRT_setAlarmA+0x88>)
 8006afc:	4618      	mov	r0, r3
 8006afe:	f004 fe3d 	bl	800b77c <HAL_RTC_SetAlarm_IT>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <MRT_setAlarmA+0x7c>
	  {
	    Error_Handler();
 8006b08:	f7fb ff60 	bl	80029cc <Error_Handler>
	  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20000024 	.word	0x20000024
 8006b18:	20000690 	.word	0x20000690
 8006b1c:	20006c7c 	.word	0x20006c7c

08006b20 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	71fb      	strb	r3, [r7, #7]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	71bb      	strb	r3, [r7, #6]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	4a1b      	ldr	r2, [pc, #108]	; (8006ba4 <MRT_setRTC+0x84>)
 8006b36:	5cd3      	ldrb	r3, [r2, r3]
 8006b38:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8006b3a:	79bb      	ldrb	r3, [r7, #6]
 8006b3c:	4a19      	ldr	r2, [pc, #100]	; (8006ba4 <MRT_setRTC+0x84>)
 8006b3e:	5cd3      	ldrb	r3, [r2, r3]
 8006b40:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8006b42:	797b      	ldrb	r3, [r7, #5]
 8006b44:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <MRT_setRTC+0x84>)
 8006b46:	5cd3      	ldrb	r3, [r2, r3]
 8006b48:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006b52:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <MRT_setRTC+0x88>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f107 010c 	add.w	r1, r7, #12
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f004 fbfc 	bl	800b35a <HAL_RTC_SetTime>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <MRT_setRTC+0x4c>
	  {
	    Error_Handler();
 8006b68:	f7fb ff30 	bl	80029cc <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006b6c:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <MRT_setRTC+0x8c>)
 8006b6e:	2201      	movs	r2, #1
 8006b70:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8006b72:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <MRT_setRTC+0x8c>)
 8006b74:	2201      	movs	r2, #1
 8006b76:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <MRT_setRTC+0x8c>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <MRT_setRTC+0x8c>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006b84:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <MRT_setRTC+0x88>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	4908      	ldr	r1, [pc, #32]	; (8006bac <MRT_setRTC+0x8c>)
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f004 fcff 	bl	800b590 <HAL_RTC_SetDate>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <MRT_setRTC+0x7c>
	  {
	    Error_Handler();
 8006b98:	f7fb ff18 	bl	80029cc <Error_Handler>
	  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20000024 	.word	0x20000024
 8006ba8:	20006c7c 	.word	0x20006c7c
 8006bac:	2000068c 	.word	0x2000068c

08006bb0 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bc0:	483f      	ldr	r0, [pc, #252]	; (8006cc0 <Max31855_Read_Temp+0x110>)
 8006bc2:	f001 fa21 	bl	8008008 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8006bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bca:	2204      	movs	r2, #4
 8006bcc:	493d      	ldr	r1, [pc, #244]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006bce:	483e      	ldr	r0, [pc, #248]	; (8006cc8 <Max31855_Read_Temp+0x118>)
 8006bd0:	f005 fac9 	bl	800c166 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bda:	4839      	ldr	r0, [pc, #228]	; (8006cc0 <Max31855_Read_Temp+0x110>)
 8006bdc:	f001 fa14 	bl	8008008 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8006be0:	4b38      	ldr	r3, [pc, #224]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006be2:	78db      	ldrb	r3, [r3, #3]
 8006be4:	461a      	mov	r2, r3
 8006be6:	4b37      	ldr	r3, [pc, #220]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006be8:	789b      	ldrb	r3, [r3, #2]
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	431a      	orrs	r2, r3
 8006bee:	4b35      	ldr	r3, [pc, #212]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006bf0:	785b      	ldrb	r3, [r3, #1]
 8006bf2:	041b      	lsls	r3, r3, #16
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	4b33      	ldr	r3, [pc, #204]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	061b      	lsls	r3, r3, #24
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	4b30      	ldr	r3, [pc, #192]	; (8006ccc <Max31855_Read_Temp+0x11c>)
 8006c0c:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8006c0e:	4b2d      	ldr	r3, [pc, #180]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	09db      	lsrs	r3, r3, #7
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	4b2d      	ldr	r3, [pc, #180]	; (8006cd0 <Max31855_Read_Temp+0x120>)
 8006c1a:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8006c1c:	4b29      	ldr	r3, [pc, #164]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006c1e:	78db      	ldrb	r3, [r3, #3]
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00c      	beq.n	8006c42 <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8006c28:	4b26      	ldr	r3, [pc, #152]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006c2a:	78db      	ldrb	r3, [r3, #3]
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	425b      	negs	r3, r3
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c3a:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <Max31855_Read_Temp+0x124>)
 8006c3c:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8006c40:	e039      	b.n	8006cb6 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8006c42:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <Max31855_Read_Temp+0x120>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d120      	bne.n	8006c8c <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8006c4a:	4b1e      	ldr	r3, [pc, #120]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	019b      	lsls	r3, r3, #6
 8006c50:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006c52:	7852      	ldrb	r2, [r2, #1]
 8006c54:	0892      	lsrs	r2, r2, #2
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c62:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8006c6a:	f083 031f 	eor.w	r3, r3, #31
 8006c6e:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	425b      	negs	r3, r3
 8006c74:	ee07 3a90 	vmov	s15, r3
 8006c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c7c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c84:	4b13      	ldr	r3, [pc, #76]	; (8006cd4 <Max31855_Read_Temp+0x124>)
 8006c86:	edc3 7a00 	vstr	s15, [r3]
}
 8006c8a:	e014      	b.n	8006cb6 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	019b      	lsls	r3, r3, #6
 8006c92:	4a0c      	ldr	r2, [pc, #48]	; (8006cc4 <Max31855_Read_Temp+0x114>)
 8006c94:	7852      	ldrb	r2, [r2, #1]
 8006c96:	0892      	lsrs	r2, r2, #2
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	ee07 3a90 	vmov	s15, r3
 8006ca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ca8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006cac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cb0:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <Max31855_Read_Temp+0x124>)
 8006cb2:	edc3 7a00 	vstr	s15, [r3]
}
 8006cb6:	bf00      	nop
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	20006c80 	.word	0x20006c80
 8006cc8:	20006710 	.word	0x20006710
 8006ccc:	200006ba 	.word	0x200006ba
 8006cd0:	200006bc 	.word	0x200006bc
 8006cd4:	20006854 	.word	0x20006854

08006cd8 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8006cd8:	b40f      	push	{r0, r1, r2, r3}
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8006ce0:	f107 0314 	add.w	r3, r7, #20
 8006ce4:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cee:	480a      	ldr	r0, [pc, #40]	; (8006d18 <myprintf+0x40>)
 8006cf0:	f015 fa14 	bl	801c11c <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8006cf4:	4808      	ldr	r0, [pc, #32]	; (8006d18 <myprintf+0x40>)
 8006cf6:	f7f9 fa7b 	bl	80001f0 <strlen>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006d02:	4905      	ldr	r1, [pc, #20]	; (8006d18 <myprintf+0x40>)
 8006d04:	4805      	ldr	r0, [pc, #20]	; (8006d1c <myprintf+0x44>)
 8006d06:	f006 ff0a 	bl	800db1e <HAL_UART_Transmit>

}
 8006d0a:	bf00      	nop
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d14:	b004      	add	sp, #16
 8006d16:	4770      	bx	lr
 8006d18:	200006c0 	.word	0x200006c0
 8006d1c:	20005e58 	.word	0x20005e58

08006d20 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	; 0x28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	4932      	ldr	r1, [pc, #200]	; (8006df8 <sd_init_dynamic_filename+0xd8>)
 8006d30:	4832      	ldr	r0, [pc, #200]	; (8006dfc <sd_init_dynamic_filename+0xdc>)
 8006d32:	f00c fdd1 	bl	80138d8 <f_mount>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8006d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8006d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d48:	4619      	mov	r1, r3
 8006d4a:	482d      	ldr	r0, [pc, #180]	; (8006e00 <sd_init_dynamic_filename+0xe0>)
 8006d4c:	f7ff ffc4 	bl	8006cd8 <myprintf>
		return fres;
 8006d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d54:	e04b      	b.n	8006dee <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8006d5a:	f107 0320 	add.w	r3, r7, #32
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68f9      	ldr	r1, [r7, #12]
 8006d62:	4825      	ldr	r0, [pc, #148]	; (8006df8 <sd_init_dynamic_filename+0xd8>)
 8006d64:	f000 f89c 	bl	8006ea0 <scan_files>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	f107 0310 	add.w	r3, r7, #16
 8006d76:	4923      	ldr	r1, [pc, #140]	; (8006e04 <sd_init_dynamic_filename+0xe4>)
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f014 f9bd 	bl	801b0f8 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8006d7e:	f107 0310 	add.w	r3, r7, #16
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f014 fa48 	bl	801b21a <strcpy>
 8006d8a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8006d8c:	f107 0310 	add.w	r3, r7, #16
 8006d90:	221a      	movs	r2, #26
 8006d92:	4619      	mov	r1, r3
 8006d94:	481c      	ldr	r0, [pc, #112]	; (8006e08 <sd_init_dynamic_filename+0xe8>)
 8006d96:	f00c fe03 	bl	80139a0 <f_open>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8006da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d11a      	bne.n	8006dde <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8006da8:	4818      	ldr	r0, [pc, #96]	; (8006e0c <sd_init_dynamic_filename+0xec>)
 8006daa:	f7ff ff95 	bl	8006cd8 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8006dae:	4b16      	ldr	r3, [pc, #88]	; (8006e08 <sd_init_dynamic_filename+0xe8>)
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	4619      	mov	r1, r3
 8006db4:	4814      	ldr	r0, [pc, #80]	; (8006e08 <sd_init_dynamic_filename+0xe8>)
 8006db6:	f00d fa14 	bl	80141e2 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8006dba:	4915      	ldr	r1, [pc, #84]	; (8006e10 <sd_init_dynamic_filename+0xf0>)
 8006dbc:	4815      	ldr	r0, [pc, #84]	; (8006e14 <sd_init_dynamic_filename+0xf4>)
 8006dbe:	f014 f99b 	bl	801b0f8 <siprintf>
	sd_write(&fil, msg_buffer);
 8006dc2:	4914      	ldr	r1, [pc, #80]	; (8006e14 <sd_init_dynamic_filename+0xf4>)
 8006dc4:	4810      	ldr	r0, [pc, #64]	; (8006e08 <sd_init_dynamic_filename+0xe8>)
 8006dc6:	f000 f841 	bl	8006e4c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	480e      	ldr	r0, [pc, #56]	; (8006e08 <sd_init_dynamic_filename+0xe8>)
 8006dce:	f000 f83d 	bl	8006e4c <sd_write>
	f_close(&fil);
 8006dd2:	480d      	ldr	r0, [pc, #52]	; (8006e08 <sd_init_dynamic_filename+0xe8>)
 8006dd4:	f00d f9d6 	bl	8014184 <f_close>

	return fres;
 8006dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ddc:	e007      	b.n	8006dee <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8006dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de2:	4619      	mov	r1, r3
 8006de4:	480c      	ldr	r0, [pc, #48]	; (8006e18 <sd_init_dynamic_filename+0xf8>)
 8006de6:	f7ff ff77 	bl	8006cd8 <myprintf>
		return fres;
 8006dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3728      	adds	r7, #40	; 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	08020c28 	.word	0x08020c28
 8006dfc:	20006004 	.word	0x20006004
 8006e00:	08020c2c 	.word	0x08020c2c
 8006e04:	08020ca8 	.word	0x08020ca8
 8006e08:	200068c4 	.word	0x200068c4
 8006e0c:	08020c44 	.word	0x08020c44
 8006e10:	08020c88 	.word	0x08020c88
 8006e14:	20006c84 	.word	0x20006c84
 8006e18:	08020c74 	.word	0x08020c74

08006e1c <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8006e24:	2212      	movs	r2, #18
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4807      	ldr	r0, [pc, #28]	; (8006e48 <sd_open_file+0x2c>)
 8006e2a:	f00c fdb9 	bl	80139a0 <f_open>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <sd_open_file+0x2c>)
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	4619      	mov	r1, r3
 8006e38:	4803      	ldr	r0, [pc, #12]	; (8006e48 <sd_open_file+0x2c>)
 8006e3a:	f00d f9d2 	bl	80141e2 <f_lseek>

	return fres;
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	200068c4 	.word	0x200068c4

08006e4c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8006e56:	6838      	ldr	r0, [r7, #0]
 8006e58:	f7f9 f9ca 	bl	80001f0 <strlen>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	f107 0308 	add.w	r3, r7, #8
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f00c ff60 	bl	8013d2a <f_write>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4619      	mov	r1, r3
 8006e78:	4807      	ldr	r0, [pc, #28]	; (8006e98 <sd_write+0x4c>)
 8006e7a:	f7ff ff2d 	bl	8006cd8 <myprintf>
		return bytesWrote;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	b25b      	sxtb	r3, r3
 8006e82:	e004      	b.n	8006e8e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8006e84:	4805      	ldr	r0, [pc, #20]	; (8006e9c <sd_write+0x50>)
 8006e86:	f7ff ff27 	bl	8006cd8 <myprintf>
		return -1;
 8006e8a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	08020cb4 	.word	0x08020cb4
 8006e9c:	08020cd8 	.word	0x08020cd8

08006ea0 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8006ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ea2:	b099      	sub	sp, #100	; 0x64
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	466b      	mov	r3, sp
 8006eae:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8006eb0:	68b8      	ldr	r0, [r7, #8]
 8006eb2:	f7f9 f99d 	bl	80001f0 <strlen>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8006ebc:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8006ec0:	4623      	mov	r3, r4
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ec6:	b2e0      	uxtb	r0, r4
 8006ec8:	f04f 0100 	mov.w	r1, #0
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	00cb      	lsls	r3, r1, #3
 8006ed6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006eda:	00c2      	lsls	r2, r0, #3
 8006edc:	b2e0      	uxtb	r0, r4
 8006ede:	f04f 0100 	mov.w	r1, #0
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	00cb      	lsls	r3, r1, #3
 8006eec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006ef0:	00c2      	lsls	r2, r0, #3
 8006ef2:	4623      	mov	r3, r4
 8006ef4:	3307      	adds	r3, #7
 8006ef6:	08db      	lsrs	r3, r3, #3
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	ebad 0d03 	sub.w	sp, sp, r3
 8006efe:	466b      	mov	r3, sp
 8006f00:	3300      	adds	r3, #0
 8006f02:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8006f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f06:	4619      	mov	r1, r3
 8006f08:	68b8      	ldr	r0, [r7, #8]
 8006f0a:	f000 f8ff 	bl	800710c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8006f18:	f107 0318 	add.w	r3, r7, #24
 8006f1c:	68f9      	ldr	r1, [r7, #12]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f00d fbb2 	bl	8014688 <f_opendir>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8006f2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d16c      	bne.n	800700c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8006f32:	f107 0318 	add.w	r3, r7, #24
 8006f36:	4939      	ldr	r1, [pc, #228]	; (800701c <scan_files+0x17c>)
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f00d fc49 	bl	80147d0 <f_readdir>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8006f44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d15a      	bne.n	8007002 <scan_files+0x162>
 8006f4c:	4b33      	ldr	r3, [pc, #204]	; (800701c <scan_files+0x17c>)
 8006f4e:	7a5b      	ldrb	r3, [r3, #9]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d056      	beq.n	8007002 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8006f54:	4b31      	ldr	r3, [pc, #196]	; (800701c <scan_files+0x17c>)
 8006f56:	7a1b      	ldrb	r3, [r3, #8]
 8006f58:	f003 0310 	and.w	r3, r3, #16
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d14e      	bne.n	8006ffe <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8006f60:	466b      	mov	r3, sp
 8006f62:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8006f64:	482e      	ldr	r0, [pc, #184]	; (8007020 <scan_files+0x180>)
 8006f66:	f7f9 f943 	bl	80001f0 <strlen>
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4623      	mov	r3, r4
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	653b      	str	r3, [r7, #80]	; 0x50
 8006f72:	4620      	mov	r0, r4
 8006f74:	f04f 0100 	mov.w	r1, #0
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	00cb      	lsls	r3, r1, #3
 8006f82:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006f86:	00c2      	lsls	r2, r0, #3
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f04f 0100 	mov.w	r1, #0
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	00cb      	lsls	r3, r1, #3
 8006f98:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006f9c:	00c2      	lsls	r2, r0, #3
 8006f9e:	1de3      	adds	r3, r4, #7
 8006fa0:	08db      	lsrs	r3, r3, #3
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	ebad 0d03 	sub.w	sp, sp, r3
 8006fa8:	466b      	mov	r3, sp
 8006faa:	3300      	adds	r3, #0
 8006fac:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8006fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	481b      	ldr	r0, [pc, #108]	; (8007020 <scan_files+0x180>)
 8006fb4:	f000 f8aa 	bl	800710c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8006fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fba:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4817      	ldr	r0, [pc, #92]	; (8007020 <scan_files+0x180>)
 8006fc2:	f014 f932 	bl	801b22a <strncmp>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8006fcc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d112      	bne.n	8006ffa <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8006fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd6:	f107 0214 	add.w	r2, r7, #20
 8006fda:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f820 	bl	8007024 <extract_filename_suffix>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d202      	bcs.n	8006ffa <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	46b5      	mov	sp, r6
 8006ffc:	e799      	b.n	8006f32 <scan_files+0x92>
            	continue; // don't enter directory
 8006ffe:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8007000:	e797      	b.n	8006f32 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8007002:	f107 0318 	add.w	r3, r7, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f00d fbb7 	bl	801477a <f_closedir>
    }

    return res;
 800700c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007010:	46ad      	mov	sp, r5
}
 8007012:	4618      	mov	r0, r3
 8007014:	3764      	adds	r7, #100	; 0x64
 8007016:	46bd      	mov	sp, r7
 8007018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800701a:	bf00      	nop
 800701c:	200007c0 	.word	0x200007c0
 8007020:	200007c9 	.word	0x200007c9

08007024 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8007024:	b5b0      	push	{r4, r5, r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	460b      	mov	r3, r1
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	72fb      	strb	r3, [r7, #11]
 8007032:	466b      	mov	r3, sp
 8007034:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f7f9 f8da 	bl	80001f0 <strlen>
 800703c:	4603      	mov	r3, r0
 800703e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8007040:	2308      	movs	r3, #8
 8007042:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8007044:	7f7c      	ldrb	r4, [r7, #29]
 8007046:	4623      	mov	r3, r4
 8007048:	3b01      	subs	r3, #1
 800704a:	61bb      	str	r3, [r7, #24]
 800704c:	b2e0      	uxtb	r0, r4
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	f04f 0300 	mov.w	r3, #0
 800705a:	00cb      	lsls	r3, r1, #3
 800705c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007060:	00c2      	lsls	r2, r0, #3
 8007062:	b2e0      	uxtb	r0, r4
 8007064:	f04f 0100 	mov.w	r1, #0
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	00cb      	lsls	r3, r1, #3
 8007072:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007076:	00c2      	lsls	r2, r0, #3
 8007078:	4623      	mov	r3, r4
 800707a:	3307      	adds	r3, #7
 800707c:	08db      	lsrs	r3, r3, #3
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	ebad 0d03 	sub.w	sp, sp, r3
 8007084:	466b      	mov	r3, sp
 8007086:	3300      	adds	r3, #0
 8007088:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800708a:	2300      	movs	r3, #0
 800708c:	77fb      	strb	r3, [r7, #31]
 800708e:	e014      	b.n	80070ba <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8007090:	7afb      	ldrb	r3, [r7, #11]
 8007092:	1e5a      	subs	r2, r3, #1
 8007094:	7ffb      	ldrb	r3, [r7, #31]
 8007096:	441a      	add	r2, r3
 8007098:	7fbb      	ldrb	r3, [r7, #30]
 800709a:	3b01      	subs	r3, #1
 800709c:	429a      	cmp	r2, r3
 800709e:	da11      	bge.n	80070c4 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 80070a0:	7afa      	ldrb	r2, [r7, #11]
 80070a2:	7ffb      	ldrb	r3, [r7, #31]
 80070a4:	4413      	add	r3, r2
 80070a6:	461a      	mov	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	441a      	add	r2, r3
 80070ac:	7ffb      	ldrb	r3, [r7, #31]
 80070ae:	7811      	ldrb	r1, [r2, #0]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 80070b4:	7ffb      	ldrb	r3, [r7, #31]
 80070b6:	3301      	adds	r3, #1
 80070b8:	77fb      	strb	r3, [r7, #31]
 80070ba:	7ffa      	ldrb	r2, [r7, #31]
 80070bc:	7f7b      	ldrb	r3, [r7, #29]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d3e6      	bcc.n	8007090 <extract_filename_suffix+0x6c>
 80070c2:	e000      	b.n	80070c6 <extract_filename_suffix+0xa2>
		}
		else break;
 80070c4:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f107 0110 	add.w	r1, r7, #16
 80070cc:	220a      	movs	r2, #10
 80070ce:	4618      	mov	r0, r3
 80070d0:	f014 ff70 	bl	801bfb4 <strtol>
 80070d4:	4603      	mov	r3, r0
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d00a      	beq.n	80070fa <extract_filename_suffix+0xd6>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ec:	d005      	beq.n	80070fa <extract_filename_suffix+0xd6>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d101      	bne.n	80070fe <extract_filename_suffix+0xda>
	{
		return 1;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <extract_filename_suffix+0xdc>
	}

	return 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	46ad      	mov	sp, r5
}
 8007102:	4618      	mov	r0, r3
 8007104:	3720      	adds	r7, #32
 8007106:	46bd      	mov	sp, r7
 8007108:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800710c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
 800711a:	e019      	b.n	8007150 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	4413      	add	r3, r2
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	73bb      	strb	r3, [r7, #14]
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	3301      	adds	r3, #1
 800712a:	4a0f      	ldr	r2, [pc, #60]	; (8007168 <str2upper+0x5c>)
 800712c:	4413      	add	r3, r2
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d102      	bne.n	800713e <str2upper+0x32>
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	3b20      	subs	r3, #32
 800713c:	e000      	b.n	8007140 <str2upper+0x34>
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	7bfa      	ldrb	r2, [r7, #15]
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	440a      	add	r2, r1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	3301      	adds	r3, #1
 800714e:	73fb      	strb	r3, [r7, #15]
 8007150:	7bfc      	ldrb	r4, [r7, #15]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7f9 f84c 	bl	80001f0 <strlen>
 8007158:	4603      	mov	r3, r0
 800715a:	429c      	cmp	r4, r3
 800715c:	d3de      	bcc.n	800711c <str2upper+0x10>
	}
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	bd90      	pop	{r4, r7, pc}
 8007168:	08020fa0 	.word	0x08020fa0

0800716c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007170:	4b0e      	ldr	r3, [pc, #56]	; (80071ac <HAL_Init+0x40>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a0d      	ldr	r2, [pc, #52]	; (80071ac <HAL_Init+0x40>)
 8007176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800717a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <HAL_Init+0x40>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a0a      	ldr	r2, [pc, #40]	; (80071ac <HAL_Init+0x40>)
 8007182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007188:	4b08      	ldr	r3, [pc, #32]	; (80071ac <HAL_Init+0x40>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a07      	ldr	r2, [pc, #28]	; (80071ac <HAL_Init+0x40>)
 800718e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007194:	2003      	movs	r0, #3
 8007196:	f000 fd30 	bl	8007bfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800719a:	2000      	movs	r0, #0
 800719c:	f7fb ff22 	bl	8002fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071a0:	f7fb fc1c 	bl	80029dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40023c00 	.word	0x40023c00

080071b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <HAL_IncTick+0x20>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <HAL_IncTick+0x24>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4413      	add	r3, r2
 80071c0:	4a04      	ldr	r2, [pc, #16]	; (80071d4 <HAL_IncTick+0x24>)
 80071c2:	6013      	str	r3, [r2, #0]
}
 80071c4:	bf00      	nop
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20000064 	.word	0x20000064
 80071d4:	2000706c 	.word	0x2000706c

080071d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0
  return uwTick;
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <HAL_GetTick+0x14>)
 80071de:	681b      	ldr	r3, [r3, #0]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	2000706c 	.word	0x2000706c

080071f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071f8:	f7ff ffee 	bl	80071d8 <HAL_GetTick>
 80071fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d005      	beq.n	8007216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800720a:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <HAL_Delay+0x44>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007216:	bf00      	nop
 8007218:	f7ff ffde 	bl	80071d8 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	429a      	cmp	r2, r3
 8007226:	d8f7      	bhi.n	8007218 <HAL_Delay+0x28>
  {
  }
}
 8007228:	bf00      	nop
 800722a:	bf00      	nop
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000064 	.word	0x20000064

08007238 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e033      	b.n	80072b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d109      	bne.n	800726a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fb fbec 	bl	8002a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	f003 0310 	and.w	r3, r3, #16
 8007272:	2b00      	cmp	r3, #0
 8007274:	d118      	bne.n	80072a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800727e:	f023 0302 	bic.w	r3, r3, #2
 8007282:	f043 0202 	orr.w	r2, r3, #2
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fae8 	bl	8007860 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	f043 0201 	orr.w	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	641a      	str	r2, [r3, #64]	; 0x40
 80072a6:	e001      	b.n	80072ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d101      	bne.n	80072da <HAL_ADC_Start+0x1a>
 80072d6:	2302      	movs	r3, #2
 80072d8:	e0b2      	b.n	8007440 <HAL_ADC_Start+0x180>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d018      	beq.n	8007322 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007300:	4b52      	ldr	r3, [pc, #328]	; (800744c <HAL_ADC_Start+0x18c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a52      	ldr	r2, [pc, #328]	; (8007450 <HAL_ADC_Start+0x190>)
 8007306:	fba2 2303 	umull	r2, r3, r2, r3
 800730a:	0c9a      	lsrs	r2, r3, #18
 800730c:	4613      	mov	r3, r2
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	4413      	add	r3, r2
 8007312:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007314:	e002      	b.n	800731c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	3b01      	subs	r3, #1
 800731a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f9      	bne.n	8007316 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b01      	cmp	r3, #1
 800732e:	d17a      	bne.n	8007426 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734e:	2b00      	cmp	r3, #0
 8007350:	d007      	beq.n	8007362 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800735a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800736a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736e:	d106      	bne.n	800737e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007374:	f023 0206 	bic.w	r2, r3, #6
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	645a      	str	r2, [r3, #68]	; 0x44
 800737c:	e002      	b.n	8007384 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800738c:	4b31      	ldr	r3, [pc, #196]	; (8007454 <HAL_ADC_Start+0x194>)
 800738e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007398:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f003 031f 	and.w	r3, r3, #31
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d12a      	bne.n	80073fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2b      	ldr	r2, [pc, #172]	; (8007458 <HAL_ADC_Start+0x198>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d015      	beq.n	80073dc <HAL_ADC_Start+0x11c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a29      	ldr	r2, [pc, #164]	; (800745c <HAL_ADC_Start+0x19c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d105      	bne.n	80073c6 <HAL_ADC_Start+0x106>
 80073ba:	4b26      	ldr	r3, [pc, #152]	; (8007454 <HAL_ADC_Start+0x194>)
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a25      	ldr	r2, [pc, #148]	; (8007460 <HAL_ADC_Start+0x1a0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d136      	bne.n	800743e <HAL_ADC_Start+0x17e>
 80073d0:	4b20      	ldr	r3, [pc, #128]	; (8007454 <HAL_ADC_Start+0x194>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d130      	bne.n	800743e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d129      	bne.n	800743e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80073f8:	609a      	str	r2, [r3, #8]
 80073fa:	e020      	b.n	800743e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a15      	ldr	r2, [pc, #84]	; (8007458 <HAL_ADC_Start+0x198>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d11b      	bne.n	800743e <HAL_ADC_Start+0x17e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d114      	bne.n	800743e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007422:	609a      	str	r2, [r3, #8]
 8007424:	e00b      	b.n	800743e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	f043 0210 	orr.w	r2, r3, #16
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007436:	f043 0201 	orr.w	r2, r3, #1
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20000000 	.word	0x20000000
 8007450:	431bde83 	.word	0x431bde83
 8007454:	40012300 	.word	0x40012300
 8007458:	40012000 	.word	0x40012000
 800745c:	40012100 	.word	0x40012100
 8007460:	40012200 	.word	0x40012200

08007464 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_ADC_Stop+0x16>
 8007476:	2302      	movs	r3, #2
 8007478:	e021      	b.n	80074be <HAL_ADC_Stop+0x5a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	d109      	bne.n	80074b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80074a8:	f023 0301 	bic.w	r3, r3, #1
 80074ac:	f043 0201 	orr.w	r2, r3, #1
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e6:	d113      	bne.n	8007510 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80074f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f6:	d10b      	bne.n	8007510 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	f043 0220 	orr.w	r2, r3, #32
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e063      	b.n	80075d8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007510:	f7ff fe62 	bl	80071d8 <HAL_GetTick>
 8007514:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007516:	e021      	b.n	800755c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751e:	d01d      	beq.n	800755c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <HAL_ADC_PollForConversion+0x6c>
 8007526:	f7ff fe57 	bl	80071d8 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d212      	bcs.n	800755c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b02      	cmp	r3, #2
 8007542:	d00b      	beq.n	800755c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	f043 0204 	orr.w	r2, r3, #4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e03d      	b.n	80075d8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b02      	cmp	r3, #2
 8007568:	d1d6      	bne.n	8007518 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f06f 0212 	mvn.w	r2, #18
 8007572:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d123      	bne.n	80075d6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007592:	2b00      	cmp	r3, #0
 8007594:	d11f      	bne.n	80075d6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d006      	beq.n	80075b2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d111      	bne.n	80075d6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d105      	bne.n	80075d6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f043 0201 	orr.w	r2, r3, #1
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_ADC_ConfigChannel+0x1c>
 8007614:	2302      	movs	r3, #2
 8007616:	e113      	b.n	8007840 <HAL_ADC_ConfigChannel+0x244>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b09      	cmp	r3, #9
 8007626:	d925      	bls.n	8007674 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68d9      	ldr	r1, [r3, #12]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	4613      	mov	r3, r2
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	4413      	add	r3, r2
 800763c:	3b1e      	subs	r3, #30
 800763e:	2207      	movs	r2, #7
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	43da      	mvns	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	400a      	ands	r2, r1
 800764c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68d9      	ldr	r1, [r3, #12]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	4618      	mov	r0, r3
 8007660:	4603      	mov	r3, r0
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	4403      	add	r3, r0
 8007666:	3b1e      	subs	r3, #30
 8007668:	409a      	lsls	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	60da      	str	r2, [r3, #12]
 8007672:	e022      	b.n	80076ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6919      	ldr	r1, [r3, #16]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	461a      	mov	r2, r3
 8007682:	4613      	mov	r3, r2
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	4413      	add	r3, r2
 8007688:	2207      	movs	r2, #7
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	43da      	mvns	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	400a      	ands	r2, r1
 8007696:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6919      	ldr	r1, [r3, #16]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	4618      	mov	r0, r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	4403      	add	r3, r0
 80076b0:	409a      	lsls	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	2b06      	cmp	r3, #6
 80076c0:	d824      	bhi.n	800770c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	3b05      	subs	r3, #5
 80076d4:	221f      	movs	r2, #31
 80076d6:	fa02 f303 	lsl.w	r3, r2, r3
 80076da:	43da      	mvns	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	400a      	ands	r2, r1
 80076e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	4618      	mov	r0, r3
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	3b05      	subs	r3, #5
 80076fe:	fa00 f203 	lsl.w	r2, r0, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	635a      	str	r2, [r3, #52]	; 0x34
 800770a:	e04c      	b.n	80077a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b0c      	cmp	r3, #12
 8007712:	d824      	bhi.n	800775e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	3b23      	subs	r3, #35	; 0x23
 8007726:	221f      	movs	r2, #31
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	43da      	mvns	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	400a      	ands	r2, r1
 8007734:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	4618      	mov	r0, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	4613      	mov	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	3b23      	subs	r3, #35	; 0x23
 8007750:	fa00 f203 	lsl.w	r2, r0, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
 800775c:	e023      	b.n	80077a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	3b41      	subs	r3, #65	; 0x41
 8007770:	221f      	movs	r2, #31
 8007772:	fa02 f303 	lsl.w	r3, r2, r3
 8007776:	43da      	mvns	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	400a      	ands	r2, r1
 800777e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	4618      	mov	r0, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	3b41      	subs	r3, #65	; 0x41
 800779a:	fa00 f203 	lsl.w	r2, r0, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80077a6:	4b29      	ldr	r3, [pc, #164]	; (800784c <HAL_ADC_ConfigChannel+0x250>)
 80077a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a28      	ldr	r2, [pc, #160]	; (8007850 <HAL_ADC_ConfigChannel+0x254>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d10f      	bne.n	80077d4 <HAL_ADC_ConfigChannel+0x1d8>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b12      	cmp	r3, #18
 80077ba:	d10b      	bne.n	80077d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <HAL_ADC_ConfigChannel+0x254>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d12b      	bne.n	8007836 <HAL_ADC_ConfigChannel+0x23a>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a1c      	ldr	r2, [pc, #112]	; (8007854 <HAL_ADC_ConfigChannel+0x258>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <HAL_ADC_ConfigChannel+0x1f4>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b11      	cmp	r3, #17
 80077ee:	d122      	bne.n	8007836 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a11      	ldr	r2, [pc, #68]	; (8007854 <HAL_ADC_ConfigChannel+0x258>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d111      	bne.n	8007836 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007812:	4b11      	ldr	r3, [pc, #68]	; (8007858 <HAL_ADC_ConfigChannel+0x25c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a11      	ldr	r2, [pc, #68]	; (800785c <HAL_ADC_ConfigChannel+0x260>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	0c9a      	lsrs	r2, r3, #18
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007828:	e002      	b.n	8007830 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	3b01      	subs	r3, #1
 800782e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f9      	bne.n	800782a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	40012300 	.word	0x40012300
 8007850:	40012000 	.word	0x40012000
 8007854:	10000012 	.word	0x10000012
 8007858:	20000000 	.word	0x20000000
 800785c:	431bde83 	.word	0x431bde83

08007860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007868:	4b79      	ldr	r3, [pc, #484]	; (8007a50 <ADC_Init+0x1f0>)
 800786a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	431a      	orrs	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6859      	ldr	r1, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	021a      	lsls	r2, r3, #8
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80078b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6859      	ldr	r1, [r3, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6899      	ldr	r1, [r3, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68da      	ldr	r2, [r3, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	4a58      	ldr	r2, [pc, #352]	; (8007a54 <ADC_Init+0x1f4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d022      	beq.n	800793e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007906:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6899      	ldr	r1, [r3, #8]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689a      	ldr	r2, [r3, #8]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6899      	ldr	r1, [r3, #8]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	609a      	str	r2, [r3, #8]
 800793c:	e00f      	b.n	800795e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800794c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800795c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0202 	bic.w	r2, r2, #2
 800796c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6899      	ldr	r1, [r3, #8]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	7e1b      	ldrb	r3, [r3, #24]
 8007978:	005a      	lsls	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01b      	beq.n	80079c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800799a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80079aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6859      	ldr	r1, [r3, #4]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	3b01      	subs	r3, #1
 80079b8:	035a      	lsls	r2, r3, #13
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	605a      	str	r2, [r3, #4]
 80079c2:	e007      	b.n	80079d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80079e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	051a      	lsls	r2, r3, #20
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6899      	ldr	r1, [r3, #8]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a16:	025a      	lsls	r2, r3, #9
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6899      	ldr	r1, [r3, #8]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	029a      	lsls	r2, r3, #10
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	609a      	str	r2, [r3, #8]
}
 8007a44:	bf00      	nop
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	40012300 	.word	0x40012300
 8007a54:	0f000001 	.word	0x0f000001

08007a58 <__NVIC_SetPriorityGrouping>:
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <__NVIC_SetPriorityGrouping+0x44>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a74:	4013      	ands	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a8a:	4a04      	ldr	r2, [pc, #16]	; (8007a9c <__NVIC_SetPriorityGrouping+0x44>)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	60d3      	str	r3, [r2, #12]
}
 8007a90:	bf00      	nop
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	e000ed00 	.word	0xe000ed00

08007aa0 <__NVIC_GetPriorityGrouping>:
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007aa4:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	0a1b      	lsrs	r3, r3, #8
 8007aaa:	f003 0307 	and.w	r3, r3, #7
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	e000ed00 	.word	0xe000ed00

08007abc <__NVIC_EnableIRQ>:
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	db0b      	blt.n	8007ae6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	f003 021f 	and.w	r2, r3, #31
 8007ad4:	4907      	ldr	r1, [pc, #28]	; (8007af4 <__NVIC_EnableIRQ+0x38>)
 8007ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ada:	095b      	lsrs	r3, r3, #5
 8007adc:	2001      	movs	r0, #1
 8007ade:	fa00 f202 	lsl.w	r2, r0, r2
 8007ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	e000e100 	.word	0xe000e100

08007af8 <__NVIC_DisableIRQ>:
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	db12      	blt.n	8007b30 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	f003 021f 	and.w	r2, r3, #31
 8007b10:	490a      	ldr	r1, [pc, #40]	; (8007b3c <__NVIC_DisableIRQ+0x44>)
 8007b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b16:	095b      	lsrs	r3, r3, #5
 8007b18:	2001      	movs	r0, #1
 8007b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b1e:	3320      	adds	r3, #32
 8007b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007b24:	f3bf 8f4f 	dsb	sy
}
 8007b28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007b2a:	f3bf 8f6f 	isb	sy
}
 8007b2e:	bf00      	nop
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	e000e100 	.word	0xe000e100

08007b40 <__NVIC_SetPriority>:
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	6039      	str	r1, [r7, #0]
 8007b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	db0a      	blt.n	8007b6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	490c      	ldr	r1, [pc, #48]	; (8007b8c <__NVIC_SetPriority+0x4c>)
 8007b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b5e:	0112      	lsls	r2, r2, #4
 8007b60:	b2d2      	uxtb	r2, r2
 8007b62:	440b      	add	r3, r1
 8007b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b68:	e00a      	b.n	8007b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	4908      	ldr	r1, [pc, #32]	; (8007b90 <__NVIC_SetPriority+0x50>)
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	3b04      	subs	r3, #4
 8007b78:	0112      	lsls	r2, r2, #4
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	761a      	strb	r2, [r3, #24]
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	e000e100 	.word	0xe000e100
 8007b90:	e000ed00 	.word	0xe000ed00

08007b94 <NVIC_EncodePriority>:
{
 8007b94:	b480      	push	{r7}
 8007b96:	b089      	sub	sp, #36	; 0x24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	f1c3 0307 	rsb	r3, r3, #7
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	bf28      	it	cs
 8007bb2:	2304      	movcs	r3, #4
 8007bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	2b06      	cmp	r3, #6
 8007bbc:	d902      	bls.n	8007bc4 <NVIC_EncodePriority+0x30>
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	3b03      	subs	r3, #3
 8007bc2:	e000      	b.n	8007bc6 <NVIC_EncodePriority+0x32>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd2:	43da      	mvns	r2, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	fa01 f303 	lsl.w	r3, r1, r3
 8007be6:	43d9      	mvns	r1, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bec:	4313      	orrs	r3, r2
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3724      	adds	r7, #36	; 0x24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff ff28 	bl	8007a58 <__NVIC_SetPriorityGrouping>
}
 8007c08:	bf00      	nop
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c22:	f7ff ff3d 	bl	8007aa0 <__NVIC_GetPriorityGrouping>
 8007c26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	6978      	ldr	r0, [r7, #20]
 8007c2e:	f7ff ffb1 	bl	8007b94 <NVIC_EncodePriority>
 8007c32:	4602      	mov	r2, r0
 8007c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff ff80 	bl	8007b40 <__NVIC_SetPriority>
}
 8007c40:	bf00      	nop
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ff30 	bl	8007abc <__NVIC_EnableIRQ>
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff ff40 	bl	8007af8 <__NVIC_DisableIRQ>
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b089      	sub	sp, #36	; 0x24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	e177      	b.n	8007f8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	4013      	ands	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	f040 8166 	bne.w	8007f86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d005      	beq.n	8007cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d130      	bne.n	8007d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	2203      	movs	r2, #3
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d08:	2201      	movs	r2, #1
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	43db      	mvns	r3, r3
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	4013      	ands	r3, r2
 8007d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	091b      	lsrs	r3, r3, #4
 8007d1e:	f003 0201 	and.w	r2, r3, #1
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f003 0303 	and.w	r3, r3, #3
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d017      	beq.n	8007d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	2203      	movs	r2, #3
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	43db      	mvns	r3, r3
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	4013      	ands	r3, r2
 8007d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d123      	bne.n	8007dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	08da      	lsrs	r2, r3, #3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3208      	adds	r2, #8
 8007d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	220f      	movs	r2, #15
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	43db      	mvns	r3, r3
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	08da      	lsrs	r2, r3, #3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3208      	adds	r2, #8
 8007dbe:	69b9      	ldr	r1, [r7, #24]
 8007dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	2203      	movs	r2, #3
 8007dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f003 0203 	and.w	r2, r3, #3
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 80c0 	beq.w	8007f86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	4b66      	ldr	r3, [pc, #408]	; (8007fa4 <HAL_GPIO_Init+0x324>)
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0e:	4a65      	ldr	r2, [pc, #404]	; (8007fa4 <HAL_GPIO_Init+0x324>)
 8007e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e14:	6453      	str	r3, [r2, #68]	; 0x44
 8007e16:	4b63      	ldr	r3, [pc, #396]	; (8007fa4 <HAL_GPIO_Init+0x324>)
 8007e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e22:	4a61      	ldr	r2, [pc, #388]	; (8007fa8 <HAL_GPIO_Init+0x328>)
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	089b      	lsrs	r3, r3, #2
 8007e28:	3302      	adds	r3, #2
 8007e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	220f      	movs	r2, #15
 8007e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3e:	43db      	mvns	r3, r3
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	4013      	ands	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a58      	ldr	r2, [pc, #352]	; (8007fac <HAL_GPIO_Init+0x32c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d037      	beq.n	8007ebe <HAL_GPIO_Init+0x23e>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a57      	ldr	r2, [pc, #348]	; (8007fb0 <HAL_GPIO_Init+0x330>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d031      	beq.n	8007eba <HAL_GPIO_Init+0x23a>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a56      	ldr	r2, [pc, #344]	; (8007fb4 <HAL_GPIO_Init+0x334>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d02b      	beq.n	8007eb6 <HAL_GPIO_Init+0x236>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a55      	ldr	r2, [pc, #340]	; (8007fb8 <HAL_GPIO_Init+0x338>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d025      	beq.n	8007eb2 <HAL_GPIO_Init+0x232>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a54      	ldr	r2, [pc, #336]	; (8007fbc <HAL_GPIO_Init+0x33c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d01f      	beq.n	8007eae <HAL_GPIO_Init+0x22e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a53      	ldr	r2, [pc, #332]	; (8007fc0 <HAL_GPIO_Init+0x340>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d019      	beq.n	8007eaa <HAL_GPIO_Init+0x22a>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a52      	ldr	r2, [pc, #328]	; (8007fc4 <HAL_GPIO_Init+0x344>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d013      	beq.n	8007ea6 <HAL_GPIO_Init+0x226>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a51      	ldr	r2, [pc, #324]	; (8007fc8 <HAL_GPIO_Init+0x348>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00d      	beq.n	8007ea2 <HAL_GPIO_Init+0x222>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a50      	ldr	r2, [pc, #320]	; (8007fcc <HAL_GPIO_Init+0x34c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d007      	beq.n	8007e9e <HAL_GPIO_Init+0x21e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a4f      	ldr	r2, [pc, #316]	; (8007fd0 <HAL_GPIO_Init+0x350>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d101      	bne.n	8007e9a <HAL_GPIO_Init+0x21a>
 8007e96:	2309      	movs	r3, #9
 8007e98:	e012      	b.n	8007ec0 <HAL_GPIO_Init+0x240>
 8007e9a:	230a      	movs	r3, #10
 8007e9c:	e010      	b.n	8007ec0 <HAL_GPIO_Init+0x240>
 8007e9e:	2308      	movs	r3, #8
 8007ea0:	e00e      	b.n	8007ec0 <HAL_GPIO_Init+0x240>
 8007ea2:	2307      	movs	r3, #7
 8007ea4:	e00c      	b.n	8007ec0 <HAL_GPIO_Init+0x240>
 8007ea6:	2306      	movs	r3, #6
 8007ea8:	e00a      	b.n	8007ec0 <HAL_GPIO_Init+0x240>
 8007eaa:	2305      	movs	r3, #5
 8007eac:	e008      	b.n	8007ec0 <HAL_GPIO_Init+0x240>
 8007eae:	2304      	movs	r3, #4
 8007eb0:	e006      	b.n	8007ec0 <HAL_GPIO_Init+0x240>
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e004      	b.n	8007ec0 <HAL_GPIO_Init+0x240>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e002      	b.n	8007ec0 <HAL_GPIO_Init+0x240>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <HAL_GPIO_Init+0x240>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	f002 0203 	and.w	r2, r2, #3
 8007ec6:	0092      	lsls	r2, r2, #2
 8007ec8:	4093      	lsls	r3, r2
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ed0:	4935      	ldr	r1, [pc, #212]	; (8007fa8 <HAL_GPIO_Init+0x328>)
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	089b      	lsrs	r3, r3, #2
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ede:	4b3d      	ldr	r3, [pc, #244]	; (8007fd4 <HAL_GPIO_Init+0x354>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	43db      	mvns	r3, r3
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	4013      	ands	r3, r2
 8007eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f02:	4a34      	ldr	r2, [pc, #208]	; (8007fd4 <HAL_GPIO_Init+0x354>)
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f08:	4b32      	ldr	r3, [pc, #200]	; (8007fd4 <HAL_GPIO_Init+0x354>)
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	43db      	mvns	r3, r3
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	4013      	ands	r3, r2
 8007f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f2c:	4a29      	ldr	r2, [pc, #164]	; (8007fd4 <HAL_GPIO_Init+0x354>)
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f32:	4b28      	ldr	r3, [pc, #160]	; (8007fd4 <HAL_GPIO_Init+0x354>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	43db      	mvns	r3, r3
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f56:	4a1f      	ldr	r2, [pc, #124]	; (8007fd4 <HAL_GPIO_Init+0x354>)
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f5c:	4b1d      	ldr	r3, [pc, #116]	; (8007fd4 <HAL_GPIO_Init+0x354>)
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	43db      	mvns	r3, r3
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f80:	4a14      	ldr	r2, [pc, #80]	; (8007fd4 <HAL_GPIO_Init+0x354>)
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	61fb      	str	r3, [r7, #28]
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	2b0f      	cmp	r3, #15
 8007f90:	f67f ae84 	bls.w	8007c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	3724      	adds	r7, #36	; 0x24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	40023800 	.word	0x40023800
 8007fa8:	40013800 	.word	0x40013800
 8007fac:	40020000 	.word	0x40020000
 8007fb0:	40020400 	.word	0x40020400
 8007fb4:	40020800 	.word	0x40020800
 8007fb8:	40020c00 	.word	0x40020c00
 8007fbc:	40021000 	.word	0x40021000
 8007fc0:	40021400 	.word	0x40021400
 8007fc4:	40021800 	.word	0x40021800
 8007fc8:	40021c00 	.word	0x40021c00
 8007fcc:	40022000 	.word	0x40022000
 8007fd0:	40022400 	.word	0x40022400
 8007fd4:	40013c00 	.word	0x40013c00

08007fd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	887b      	ldrh	r3, [r7, #2]
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
 8007ff4:	e001      	b.n	8007ffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	807b      	strh	r3, [r7, #2]
 8008014:	4613      	mov	r3, r2
 8008016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008018:	787b      	ldrb	r3, [r7, #1]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800801e:	887a      	ldrh	r2, [r7, #2]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008024:	e003      	b.n	800802e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008026:	887b      	ldrh	r3, [r7, #2]
 8008028:	041a      	lsls	r2, r3, #16
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	619a      	str	r2, [r3, #24]
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
	...

0800803c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008046:	4b08      	ldr	r3, [pc, #32]	; (8008068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008048:	695a      	ldr	r2, [r3, #20]
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	4013      	ands	r3, r2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d006      	beq.n	8008060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008052:	4a05      	ldr	r2, [pc, #20]	; (8008068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008058:	88fb      	ldrh	r3, [r7, #6]
 800805a:	4618      	mov	r0, r3
 800805c:	f7fb fc24 	bl	80038a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40013c00 	.word	0x40013c00

0800806c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e12b      	b.n	80082d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d106      	bne.n	8008098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7fa fd12 	bl	8002abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2224      	movs	r2, #36	; 0x24
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0201 	bic.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80080d0:	f002 fe9a 	bl	800ae08 <HAL_RCC_GetPCLK1Freq>
 80080d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	4a81      	ldr	r2, [pc, #516]	; (80082e0 <HAL_I2C_Init+0x274>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d807      	bhi.n	80080f0 <HAL_I2C_Init+0x84>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4a80      	ldr	r2, [pc, #512]	; (80082e4 <HAL_I2C_Init+0x278>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	bf94      	ite	ls
 80080e8:	2301      	movls	r3, #1
 80080ea:	2300      	movhi	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	e006      	b.n	80080fe <HAL_I2C_Init+0x92>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4a7d      	ldr	r2, [pc, #500]	; (80082e8 <HAL_I2C_Init+0x27c>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	bf94      	ite	ls
 80080f8:	2301      	movls	r3, #1
 80080fa:	2300      	movhi	r3, #0
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e0e7      	b.n	80082d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4a78      	ldr	r2, [pc, #480]	; (80082ec <HAL_I2C_Init+0x280>)
 800810a:	fba2 2303 	umull	r2, r3, r2, r3
 800810e:	0c9b      	lsrs	r3, r3, #18
 8008110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	4a6a      	ldr	r2, [pc, #424]	; (80082e0 <HAL_I2C_Init+0x274>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d802      	bhi.n	8008140 <HAL_I2C_Init+0xd4>
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	3301      	adds	r3, #1
 800813e:	e009      	b.n	8008154 <HAL_I2C_Init+0xe8>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008146:	fb02 f303 	mul.w	r3, r2, r3
 800814a:	4a69      	ldr	r2, [pc, #420]	; (80082f0 <HAL_I2C_Init+0x284>)
 800814c:	fba2 2303 	umull	r2, r3, r2, r3
 8008150:	099b      	lsrs	r3, r3, #6
 8008152:	3301      	adds	r3, #1
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6812      	ldr	r2, [r2, #0]
 8008158:	430b      	orrs	r3, r1
 800815a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008166:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	495c      	ldr	r1, [pc, #368]	; (80082e0 <HAL_I2C_Init+0x274>)
 8008170:	428b      	cmp	r3, r1
 8008172:	d819      	bhi.n	80081a8 <HAL_I2C_Init+0x13c>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	1e59      	subs	r1, r3, #1
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008182:	1c59      	adds	r1, r3, #1
 8008184:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008188:	400b      	ands	r3, r1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <HAL_I2C_Init+0x138>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1e59      	subs	r1, r3, #1
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	fbb1 f3f3 	udiv	r3, r1, r3
 800819c:	3301      	adds	r3, #1
 800819e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081a2:	e051      	b.n	8008248 <HAL_I2C_Init+0x1dc>
 80081a4:	2304      	movs	r3, #4
 80081a6:	e04f      	b.n	8008248 <HAL_I2C_Init+0x1dc>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d111      	bne.n	80081d4 <HAL_I2C_Init+0x168>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	1e58      	subs	r0, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6859      	ldr	r1, [r3, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	440b      	add	r3, r1
 80081be:	fbb0 f3f3 	udiv	r3, r0, r3
 80081c2:	3301      	adds	r3, #1
 80081c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	bf0c      	ite	eq
 80081cc:	2301      	moveq	r3, #1
 80081ce:	2300      	movne	r3, #0
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	e012      	b.n	80081fa <HAL_I2C_Init+0x18e>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	1e58      	subs	r0, r3, #1
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6859      	ldr	r1, [r3, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	0099      	lsls	r1, r3, #2
 80081e4:	440b      	add	r3, r1
 80081e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80081ea:	3301      	adds	r3, #1
 80081ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bf0c      	ite	eq
 80081f4:	2301      	moveq	r3, #1
 80081f6:	2300      	movne	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_I2C_Init+0x196>
 80081fe:	2301      	movs	r3, #1
 8008200:	e022      	b.n	8008248 <HAL_I2C_Init+0x1dc>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10e      	bne.n	8008228 <HAL_I2C_Init+0x1bc>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	1e58      	subs	r0, r3, #1
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6859      	ldr	r1, [r3, #4]
 8008212:	460b      	mov	r3, r1
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	440b      	add	r3, r1
 8008218:	fbb0 f3f3 	udiv	r3, r0, r3
 800821c:	3301      	adds	r3, #1
 800821e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008226:	e00f      	b.n	8008248 <HAL_I2C_Init+0x1dc>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	1e58      	subs	r0, r3, #1
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6859      	ldr	r1, [r3, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	0099      	lsls	r1, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	fbb0 f3f3 	udiv	r3, r0, r3
 800823e:	3301      	adds	r3, #1
 8008240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	6809      	ldr	r1, [r1, #0]
 800824c:	4313      	orrs	r3, r2
 800824e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69da      	ldr	r2, [r3, #28]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	431a      	orrs	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008276:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	6911      	ldr	r1, [r2, #16]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	68d2      	ldr	r2, [r2, #12]
 8008282:	4311      	orrs	r1, r2
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6812      	ldr	r2, [r2, #0]
 8008288:	430b      	orrs	r3, r1
 800828a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695a      	ldr	r2, [r3, #20]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0201 	orr.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	000186a0 	.word	0x000186a0
 80082e4:	001e847f 	.word	0x001e847f
 80082e8:	003d08ff 	.word	0x003d08ff
 80082ec:	431bde83 	.word	0x431bde83
 80082f0:	10624dd3 	.word	0x10624dd3

080082f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	4608      	mov	r0, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	461a      	mov	r2, r3
 8008302:	4603      	mov	r3, r0
 8008304:	817b      	strh	r3, [r7, #10]
 8008306:	460b      	mov	r3, r1
 8008308:	813b      	strh	r3, [r7, #8]
 800830a:	4613      	mov	r3, r2
 800830c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800830e:	f7fe ff63 	bl	80071d8 <HAL_GetTick>
 8008312:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b20      	cmp	r3, #32
 800831e:	f040 80d9 	bne.w	80084d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	2319      	movs	r3, #25
 8008328:	2201      	movs	r2, #1
 800832a:	496d      	ldr	r1, [pc, #436]	; (80084e0 <HAL_I2C_Mem_Write+0x1ec>)
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 fcb5 	bl	8008c9c <I2C_WaitOnFlagUntilTimeout>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008338:	2302      	movs	r3, #2
 800833a:	e0cc      	b.n	80084d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008342:	2b01      	cmp	r3, #1
 8008344:	d101      	bne.n	800834a <HAL_I2C_Mem_Write+0x56>
 8008346:	2302      	movs	r3, #2
 8008348:	e0c5      	b.n	80084d6 <HAL_I2C_Mem_Write+0x1e2>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b01      	cmp	r3, #1
 800835e:	d007      	beq.n	8008370 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0201 	orr.w	r2, r2, #1
 800836e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800837e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2221      	movs	r2, #33	; 0x21
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2240      	movs	r2, #64	; 0x40
 800838c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6a3a      	ldr	r2, [r7, #32]
 800839a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4a4d      	ldr	r2, [pc, #308]	; (80084e4 <HAL_I2C_Mem_Write+0x1f0>)
 80083b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083b2:	88f8      	ldrh	r0, [r7, #6]
 80083b4:	893a      	ldrh	r2, [r7, #8]
 80083b6:	8979      	ldrh	r1, [r7, #10]
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	4603      	mov	r3, r0
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 faec 	bl	80089a0 <I2C_RequestMemoryWrite>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d052      	beq.n	8008474 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e081      	b.n	80084d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 fd36 	bl	8008e48 <I2C_WaitOnTXEFlagUntilTimeout>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00d      	beq.n	80083fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d107      	bne.n	80083fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e06b      	b.n	80084d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	781a      	ldrb	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008418:	3b01      	subs	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008424:	b29b      	uxth	r3, r3
 8008426:	3b01      	subs	r3, #1
 8008428:	b29a      	uxth	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	2b04      	cmp	r3, #4
 800843a:	d11b      	bne.n	8008474 <HAL_I2C_Mem_Write+0x180>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008440:	2b00      	cmp	r3, #0
 8008442:	d017      	beq.n	8008474 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800846a:	b29b      	uxth	r3, r3
 800846c:	3b01      	subs	r3, #1
 800846e:	b29a      	uxth	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1aa      	bne.n	80083d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 fd22 	bl	8008eca <I2C_WaitOnBTFFlagUntilTimeout>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00d      	beq.n	80084a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	2b04      	cmp	r3, #4
 8008492:	d107      	bne.n	80084a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e016      	b.n	80084d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2220      	movs	r2, #32
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	e000      	b.n	80084d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80084d4:	2302      	movs	r3, #2
  }
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	00100002 	.word	0x00100002
 80084e4:	ffff0000 	.word	0xffff0000

080084e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08c      	sub	sp, #48	; 0x30
 80084ec:	af02      	add	r7, sp, #8
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	4608      	mov	r0, r1
 80084f2:	4611      	mov	r1, r2
 80084f4:	461a      	mov	r2, r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	817b      	strh	r3, [r7, #10]
 80084fa:	460b      	mov	r3, r1
 80084fc:	813b      	strh	r3, [r7, #8]
 80084fe:	4613      	mov	r3, r2
 8008500:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008502:	f7fe fe69 	bl	80071d8 <HAL_GetTick>
 8008506:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b20      	cmp	r3, #32
 8008512:	f040 8208 	bne.w	8008926 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	2319      	movs	r3, #25
 800851c:	2201      	movs	r2, #1
 800851e:	497b      	ldr	r1, [pc, #492]	; (800870c <HAL_I2C_Mem_Read+0x224>)
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 fbbb 	bl	8008c9c <I2C_WaitOnFlagUntilTimeout>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800852c:	2302      	movs	r3, #2
 800852e:	e1fb      	b.n	8008928 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008536:	2b01      	cmp	r3, #1
 8008538:	d101      	bne.n	800853e <HAL_I2C_Mem_Read+0x56>
 800853a:	2302      	movs	r3, #2
 800853c:	e1f4      	b.n	8008928 <HAL_I2C_Mem_Read+0x440>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b01      	cmp	r3, #1
 8008552:	d007      	beq.n	8008564 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2222      	movs	r2, #34	; 0x22
 8008578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2240      	movs	r2, #64	; 0x40
 8008580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800858e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800859a:	b29a      	uxth	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4a5b      	ldr	r2, [pc, #364]	; (8008710 <HAL_I2C_Mem_Read+0x228>)
 80085a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085a6:	88f8      	ldrh	r0, [r7, #6]
 80085a8:	893a      	ldrh	r2, [r7, #8]
 80085aa:	8979      	ldrh	r1, [r7, #10]
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	4603      	mov	r3, r0
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 fa88 	bl	8008acc <I2C_RequestMemoryRead>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e1b0      	b.n	8008928 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d113      	bne.n	80085f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ce:	2300      	movs	r3, #0
 80085d0:	623b      	str	r3, [r7, #32]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	623b      	str	r3, [r7, #32]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	623b      	str	r3, [r7, #32]
 80085e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	e184      	b.n	8008900 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d11b      	bne.n	8008636 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800860c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800860e:	2300      	movs	r3, #0
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	61fb      	str	r3, [r7, #28]
 8008622:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	e164      	b.n	8008900 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863a:	2b02      	cmp	r3, #2
 800863c:	d11b      	bne.n	8008676 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800864c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800865c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800865e:	2300      	movs	r3, #0
 8008660:	61bb      	str	r3, [r7, #24]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	61bb      	str	r3, [r7, #24]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	61bb      	str	r3, [r7, #24]
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	e144      	b.n	8008900 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	617b      	str	r3, [r7, #20]
 800868a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800868c:	e138      	b.n	8008900 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008692:	2b03      	cmp	r3, #3
 8008694:	f200 80f1 	bhi.w	800887a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800869c:	2b01      	cmp	r3, #1
 800869e:	d123      	bne.n	80086e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 fc51 	bl	8008f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e139      	b.n	8008928 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691a      	ldr	r2, [r3, #16]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d0:	3b01      	subs	r3, #1
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086e6:	e10b      	b.n	8008900 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d14e      	bne.n	800878e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	2200      	movs	r2, #0
 80086f8:	4906      	ldr	r1, [pc, #24]	; (8008714 <HAL_I2C_Mem_Read+0x22c>)
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 face 	bl	8008c9c <I2C_WaitOnFlagUntilTimeout>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d008      	beq.n	8008718 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e10e      	b.n	8008928 <HAL_I2C_Mem_Read+0x440>
 800870a:	bf00      	nop
 800870c:	00100002 	.word	0x00100002
 8008710:	ffff0000 	.word	0xffff0000
 8008714:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691a      	ldr	r2, [r3, #16]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	b2d2      	uxtb	r2, r2
 8008734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008744:	3b01      	subs	r3, #1
 8008746:	b29a      	uxth	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008750:	b29b      	uxth	r3, r3
 8008752:	3b01      	subs	r3, #1
 8008754:	b29a      	uxth	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800878c:	e0b8      	b.n	8008900 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	2200      	movs	r2, #0
 8008796:	4966      	ldr	r1, [pc, #408]	; (8008930 <HAL_I2C_Mem_Read+0x448>)
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 fa7f 	bl	8008c9c <I2C_WaitOnFlagUntilTimeout>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e0bf      	b.n	8008928 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	b2d2      	uxtb	r2, r2
 80087c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d4:	3b01      	subs	r3, #1
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	3b01      	subs	r3, #1
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f0:	2200      	movs	r2, #0
 80087f2:	494f      	ldr	r1, [pc, #316]	; (8008930 <HAL_I2C_Mem_Read+0x448>)
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fa51 	bl	8008c9c <I2C_WaitOnFlagUntilTimeout>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e091      	b.n	8008928 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691a      	ldr	r2, [r3, #16]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008830:	3b01      	subs	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800883c:	b29b      	uxth	r3, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	b2d2      	uxtb	r2, r2
 8008852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008862:	3b01      	subs	r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008878:	e042      	b.n	8008900 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800887a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 fb64 	bl	8008f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e04c      	b.n	8008928 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	691a      	ldr	r2, [r3, #16]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	b2d2      	uxtb	r2, r2
 800889a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d118      	bne.n	8008900 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	691a      	ldr	r2, [r3, #16]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	b2d2      	uxtb	r2, r2
 80088da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	1c5a      	adds	r2, r3, #1
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	3b01      	subs	r3, #1
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008904:	2b00      	cmp	r3, #0
 8008906:	f47f aec2 	bne.w	800868e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2220      	movs	r2, #32
 800890e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	e000      	b.n	8008928 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008926:	2302      	movs	r3, #2
  }
}
 8008928:	4618      	mov	r0, r3
 800892a:	3728      	adds	r7, #40	; 0x28
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	00010004 	.word	0x00010004

08008934 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b20      	cmp	r3, #32
 8008946:	d124      	bne.n	8008992 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2228      	movs	r2, #40	; 0x28
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b01      	cmp	r3, #1
 800895c:	d007      	beq.n	800896e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f042 0201 	orr.w	r2, r2, #1
 800896c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800897c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800898c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	e000      	b.n	8008994 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008992:	2302      	movs	r3, #2
  }
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af02      	add	r7, sp, #8
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	4608      	mov	r0, r1
 80089aa:	4611      	mov	r1, r2
 80089ac:	461a      	mov	r2, r3
 80089ae:	4603      	mov	r3, r0
 80089b0:	817b      	strh	r3, [r7, #10]
 80089b2:	460b      	mov	r3, r1
 80089b4:	813b      	strh	r3, [r7, #8]
 80089b6:	4613      	mov	r3, r2
 80089b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 f960 	bl	8008c9c <I2C_WaitOnFlagUntilTimeout>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00d      	beq.n	80089fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f0:	d103      	bne.n	80089fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e05f      	b.n	8008abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089fe:	897b      	ldrh	r3, [r7, #10]
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	461a      	mov	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	6a3a      	ldr	r2, [r7, #32]
 8008a12:	492d      	ldr	r1, [pc, #180]	; (8008ac8 <I2C_RequestMemoryWrite+0x128>)
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 f998 	bl	8008d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e04c      	b.n	8008abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a24:	2300      	movs	r3, #0
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3c:	6a39      	ldr	r1, [r7, #32]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 fa02 	bl	8008e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00d      	beq.n	8008a66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d107      	bne.n	8008a62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e02b      	b.n	8008abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d105      	bne.n	8008a78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a6c:	893b      	ldrh	r3, [r7, #8]
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	611a      	str	r2, [r3, #16]
 8008a76:	e021      	b.n	8008abc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a78:	893b      	ldrh	r3, [r7, #8]
 8008a7a:	0a1b      	lsrs	r3, r3, #8
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a88:	6a39      	ldr	r1, [r7, #32]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 f9dc 	bl	8008e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00d      	beq.n	8008ab2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d107      	bne.n	8008aae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e005      	b.n	8008abe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ab2:	893b      	ldrh	r3, [r7, #8]
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	00010002 	.word	0x00010002

08008acc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af02      	add	r7, sp, #8
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	817b      	strh	r3, [r7, #10]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	813b      	strh	r3, [r7, #8]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008af4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 f8c2 	bl	8008c9c <I2C_WaitOnFlagUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2c:	d103      	bne.n	8008b36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e0aa      	b.n	8008c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b3a:	897b      	ldrh	r3, [r7, #10]
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	461a      	mov	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	6a3a      	ldr	r2, [r7, #32]
 8008b4e:	4952      	ldr	r1, [pc, #328]	; (8008c98 <I2C_RequestMemoryRead+0x1cc>)
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 f8fa 	bl	8008d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e097      	b.n	8008c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b78:	6a39      	ldr	r1, [r7, #32]
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 f964 	bl	8008e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00d      	beq.n	8008ba2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d107      	bne.n	8008b9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e076      	b.n	8008c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d105      	bne.n	8008bb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ba8:	893b      	ldrh	r3, [r7, #8]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	611a      	str	r2, [r3, #16]
 8008bb2:	e021      	b.n	8008bf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008bb4:	893b      	ldrh	r3, [r7, #8]
 8008bb6:	0a1b      	lsrs	r3, r3, #8
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc4:	6a39      	ldr	r1, [r7, #32]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 f93e 	bl	8008e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00d      	beq.n	8008bee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d107      	bne.n	8008bea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008be8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e050      	b.n	8008c90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bee:	893b      	ldrh	r3, [r7, #8]
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfa:	6a39      	ldr	r1, [r7, #32]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f923 	bl	8008e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00d      	beq.n	8008c24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d107      	bne.n	8008c20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e035      	b.n	8008c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 f82b 	bl	8008c9c <I2C_WaitOnFlagUntilTimeout>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00d      	beq.n	8008c68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c5a:	d103      	bne.n	8008c64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e013      	b.n	8008c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008c68:	897b      	ldrh	r3, [r7, #10]
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	f043 0301 	orr.w	r3, r3, #1
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	6a3a      	ldr	r2, [r7, #32]
 8008c7c:	4906      	ldr	r1, [pc, #24]	; (8008c98 <I2C_RequestMemoryRead+0x1cc>)
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 f863 	bl	8008d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e000      	b.n	8008c90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	00010002 	.word	0x00010002

08008c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cac:	e025      	b.n	8008cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb4:	d021      	beq.n	8008cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb6:	f7fe fa8f 	bl	80071d8 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d302      	bcc.n	8008ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d116      	bne.n	8008cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f043 0220 	orr.w	r2, r3, #32
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e023      	b.n	8008d42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	0c1b      	lsrs	r3, r3, #16
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d10d      	bne.n	8008d20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	43da      	mvns	r2, r3
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bf0c      	ite	eq
 8008d16:	2301      	moveq	r3, #1
 8008d18:	2300      	movne	r3, #0
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	e00c      	b.n	8008d3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	43da      	mvns	r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bf0c      	ite	eq
 8008d32:	2301      	moveq	r3, #1
 8008d34:	2300      	movne	r3, #0
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d0b6      	beq.n	8008cae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	60f8      	str	r0, [r7, #12]
 8008d52:	60b9      	str	r1, [r7, #8]
 8008d54:	607a      	str	r2, [r7, #4]
 8008d56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d58:	e051      	b.n	8008dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d68:	d123      	bne.n	8008db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	f043 0204 	orr.w	r2, r3, #4
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e046      	b.n	8008e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d021      	beq.n	8008dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dba:	f7fe fa0d 	bl	80071d8 <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d302      	bcc.n	8008dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d116      	bne.n	8008dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	f043 0220 	orr.w	r2, r3, #32
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e020      	b.n	8008e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	0c1b      	lsrs	r3, r3, #16
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d10c      	bne.n	8008e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	43da      	mvns	r2, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	4013      	ands	r3, r2
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	bf14      	ite	ne
 8008e1a:	2301      	movne	r3, #1
 8008e1c:	2300      	moveq	r3, #0
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	e00b      	b.n	8008e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	43da      	mvns	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bf14      	ite	ne
 8008e34:	2301      	movne	r3, #1
 8008e36:	2300      	moveq	r3, #0
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d18d      	bne.n	8008d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e54:	e02d      	b.n	8008eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 f8ce 	bl	8008ff8 <I2C_IsAcknowledgeFailed>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e02d      	b.n	8008ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d021      	beq.n	8008eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e6e:	f7fe f9b3 	bl	80071d8 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d302      	bcc.n	8008e84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d116      	bne.n	8008eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	f043 0220 	orr.w	r2, r3, #32
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e007      	b.n	8008ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebc:	2b80      	cmp	r3, #128	; 0x80
 8008ebe:	d1ca      	bne.n	8008e56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ed6:	e02d      	b.n	8008f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 f88d 	bl	8008ff8 <I2C_IsAcknowledgeFailed>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e02d      	b.n	8008f44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d021      	beq.n	8008f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef0:	f7fe f972 	bl	80071d8 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d302      	bcc.n	8008f06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d116      	bne.n	8008f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f20:	f043 0220 	orr.w	r2, r3, #32
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e007      	b.n	8008f44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d1ca      	bne.n	8008ed8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f58:	e042      	b.n	8008fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	d119      	bne.n	8008f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f06f 0210 	mvn.w	r2, #16
 8008f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e029      	b.n	8008ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f9c:	f7fe f91c 	bl	80071d8 <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d302      	bcc.n	8008fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d116      	bne.n	8008fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fcc:	f043 0220 	orr.w	r2, r3, #32
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e007      	b.n	8008ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fea:	2b40      	cmp	r3, #64	; 0x40
 8008fec:	d1b5      	bne.n	8008f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800900a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800900e:	d11b      	bne.n	8009048 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009018:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2220      	movs	r2, #32
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	f043 0204 	orr.w	r2, r3, #4
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e000      	b.n	800904a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009056:	b480      	push	{r7}
 8009058:	b083      	sub	sp, #12
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b20      	cmp	r3, #32
 800906a:	d129      	bne.n	80090c0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2224      	movs	r2, #36	; 0x24
 8009070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0201 	bic.w	r2, r2, #1
 8009082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0210 	bic.w	r2, r2, #16
 8009092:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0201 	orr.w	r2, r2, #1
 80090b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	e000      	b.n	80090c2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80090c0:	2302      	movs	r3, #2
  }
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b085      	sub	sp, #20
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b20      	cmp	r3, #32
 80090e6:	d12a      	bne.n	800913e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2224      	movs	r2, #36	; 0x24
 80090ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0201 	bic.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009108:	89fb      	ldrh	r3, [r7, #14]
 800910a:	f023 030f 	bic.w	r3, r3, #15
 800910e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	b29a      	uxth	r2, r3
 8009114:	89fb      	ldrh	r3, [r7, #14]
 8009116:	4313      	orrs	r3, r2
 8009118:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	89fa      	ldrh	r2, [r7, #14]
 8009120:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0201 	orr.w	r2, r2, #1
 8009130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2220      	movs	r2, #32
 8009136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	e000      	b.n	8009140 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800913e:	2302      	movs	r3, #2
  }
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e034      	b.n	80091c8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009166:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f245 5255 	movw	r2, #21845	; 0x5555
 8009170:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6852      	ldr	r2, [r2, #4]
 800917a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	6892      	ldr	r2, [r2, #8]
 8009184:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009186:	f7fe f827 	bl	80071d8 <HAL_GetTick>
 800918a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800918c:	e00f      	b.n	80091ae <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800918e:	f7fe f823 	bl	80071d8 <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	2b31      	cmp	r3, #49	; 0x31
 800919a:	d908      	bls.n	80091ae <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e00c      	b.n	80091c8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f003 0303 	and.w	r3, r3, #3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e8      	bne.n	800918e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80091c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80091e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80091f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091f2:	b08f      	sub	sp, #60	; 0x3c
 80091f4:	af0a      	add	r7, sp, #40	; 0x28
 80091f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e10f      	b.n	8009422 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	d106      	bne.n	8009222 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f00f faa5 	bl	801876c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2203      	movs	r2, #3
 8009226:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009232:	2b00      	cmp	r3, #0
 8009234:	d102      	bne.n	800923c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4618      	mov	r0, r3
 8009242:	f005 f8ec 	bl	800e41e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	603b      	str	r3, [r7, #0]
 800924c:	687e      	ldr	r6, [r7, #4]
 800924e:	466d      	mov	r5, sp
 8009250:	f106 0410 	add.w	r4, r6, #16
 8009254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800925a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800925c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009260:	e885 0003 	stmia.w	r5, {r0, r1}
 8009264:	1d33      	adds	r3, r6, #4
 8009266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009268:	6838      	ldr	r0, [r7, #0]
 800926a:	f004 ffc3 	bl	800e1f4 <USB_CoreInit>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2202      	movs	r2, #2
 8009278:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e0d0      	b.n	8009422 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2100      	movs	r1, #0
 8009286:	4618      	mov	r0, r3
 8009288:	f005 f8da 	bl	800e440 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
 8009290:	e04a      	b.n	8009328 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009292:	7bfa      	ldrb	r2, [r7, #15]
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	4613      	mov	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	440b      	add	r3, r1
 80092a0:	333d      	adds	r3, #61	; 0x3d
 80092a2:	2201      	movs	r2, #1
 80092a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80092a6:	7bfa      	ldrb	r2, [r7, #15]
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	1a9b      	subs	r3, r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	333c      	adds	r3, #60	; 0x3c
 80092b6:	7bfa      	ldrb	r2, [r7, #15]
 80092b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80092ba:	7bfa      	ldrb	r2, [r7, #15]
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	b298      	uxth	r0, r3
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	4613      	mov	r3, r2
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	1a9b      	subs	r3, r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	440b      	add	r3, r1
 80092cc:	3342      	adds	r3, #66	; 0x42
 80092ce:	4602      	mov	r2, r0
 80092d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80092d2:	7bfa      	ldrb	r2, [r7, #15]
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	1a9b      	subs	r3, r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	440b      	add	r3, r1
 80092e0:	333f      	adds	r3, #63	; 0x3f
 80092e2:	2200      	movs	r2, #0
 80092e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80092e6:	7bfa      	ldrb	r2, [r7, #15]
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	4613      	mov	r3, r2
 80092ec:	00db      	lsls	r3, r3, #3
 80092ee:	1a9b      	subs	r3, r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	440b      	add	r3, r1
 80092f4:	3344      	adds	r3, #68	; 0x44
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80092fa:	7bfa      	ldrb	r2, [r7, #15]
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	4613      	mov	r3, r2
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	440b      	add	r3, r1
 8009308:	3348      	adds	r3, #72	; 0x48
 800930a:	2200      	movs	r2, #0
 800930c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800930e:	7bfa      	ldrb	r2, [r7, #15]
 8009310:	6879      	ldr	r1, [r7, #4]
 8009312:	4613      	mov	r3, r2
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	440b      	add	r3, r1
 800931c:	3350      	adds	r3, #80	; 0x50
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	3301      	adds	r3, #1
 8009326:	73fb      	strb	r3, [r7, #15]
 8009328:	7bfa      	ldrb	r2, [r7, #15]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	429a      	cmp	r2, r3
 8009330:	d3af      	bcc.n	8009292 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009332:	2300      	movs	r3, #0
 8009334:	73fb      	strb	r3, [r7, #15]
 8009336:	e044      	b.n	80093c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009338:	7bfa      	ldrb	r2, [r7, #15]
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	4613      	mov	r3, r2
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	1a9b      	subs	r3, r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800934a:	2200      	movs	r2, #0
 800934c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800934e:	7bfa      	ldrb	r2, [r7, #15]
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009360:	7bfa      	ldrb	r2, [r7, #15]
 8009362:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009364:	7bfa      	ldrb	r2, [r7, #15]
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	4613      	mov	r3, r2
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	1a9b      	subs	r3, r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	440b      	add	r3, r1
 8009372:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800937a:	7bfa      	ldrb	r2, [r7, #15]
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	4613      	mov	r3, r2
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	1a9b      	subs	r3, r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	440b      	add	r3, r1
 8009388:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009390:	7bfa      	ldrb	r2, [r7, #15]
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	4613      	mov	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	1a9b      	subs	r3, r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80093a6:	7bfa      	ldrb	r2, [r7, #15]
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	00db      	lsls	r3, r3, #3
 80093ae:	1a9b      	subs	r3, r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	440b      	add	r3, r1
 80093b4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	3301      	adds	r3, #1
 80093c0:	73fb      	strb	r3, [r7, #15]
 80093c2:	7bfa      	ldrb	r2, [r7, #15]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d3b5      	bcc.n	8009338 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	603b      	str	r3, [r7, #0]
 80093d2:	687e      	ldr	r6, [r7, #4]
 80093d4:	466d      	mov	r5, sp
 80093d6:	f106 0410 	add.w	r4, r6, #16
 80093da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80093e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80093ea:	1d33      	adds	r3, r6, #4
 80093ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093ee:	6838      	ldr	r0, [r7, #0]
 80093f0:	f005 f872 	bl	800e4d8 <USB_DevInit>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d005      	beq.n	8009406 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2202      	movs	r2, #2
 80093fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e00d      	b.n	8009422 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4618      	mov	r0, r3
 800941c:	f006 f8ee 	bl	800f5fc <USB_DevDisconnect>

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800942a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b084      	sub	sp, #16
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <HAL_PCD_Start+0x1c>
 8009442:	2302      	movs	r3, #2
 8009444:	e020      	b.n	8009488 <HAL_PCD_Start+0x5e>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009452:	2b01      	cmp	r3, #1
 8009454:	d109      	bne.n	800946a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800945a:	2b01      	cmp	r3, #1
 800945c:	d005      	beq.n	800946a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4618      	mov	r0, r3
 8009470:	f004 ffc4 	bl	800e3fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4618      	mov	r0, r3
 800947a:	f006 f89e 	bl	800f5ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b08d      	sub	sp, #52	; 0x34
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f006 f95c 	bl	800f764 <USB_GetMode>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f040 839d 	bne.w	8009bee <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f006 f8c0 	bl	800f63e <USB_ReadInterrupts>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 8393 	beq.w	8009bec <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f006 f8b7 	bl	800f63e <USB_ReadInterrupts>
 80094d0:	4603      	mov	r3, r0
 80094d2:	f003 0302 	and.w	r3, r3, #2
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d107      	bne.n	80094ea <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	695a      	ldr	r2, [r3, #20]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f002 0202 	and.w	r2, r2, #2
 80094e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f006 f8a5 	bl	800f63e <USB_ReadInterrupts>
 80094f4:	4603      	mov	r3, r0
 80094f6:	f003 0310 	and.w	r3, r3, #16
 80094fa:	2b10      	cmp	r3, #16
 80094fc:	d161      	bne.n	80095c2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	699a      	ldr	r2, [r3, #24]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0210 	bic.w	r2, r2, #16
 800950c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	f003 020f 	and.w	r2, r3, #15
 800951a:	4613      	mov	r3, r2
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	1a9b      	subs	r3, r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	4413      	add	r3, r2
 800952a:	3304      	adds	r3, #4
 800952c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	0c5b      	lsrs	r3, r3, #17
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	2b02      	cmp	r3, #2
 8009538:	d124      	bne.n	8009584 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009540:	4013      	ands	r3, r2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d035      	beq.n	80095b2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	091b      	lsrs	r3, r3, #4
 800954e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009554:	b29b      	uxth	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	6a38      	ldr	r0, [r7, #32]
 800955a:	f005 fedc 	bl	800f316 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	091b      	lsrs	r3, r3, #4
 8009566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800956a:	441a      	add	r2, r3
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	699a      	ldr	r2, [r3, #24]
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	091b      	lsrs	r3, r3, #4
 8009578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800957c:	441a      	add	r2, r3
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	619a      	str	r2, [r3, #24]
 8009582:	e016      	b.n	80095b2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	0c5b      	lsrs	r3, r3, #17
 8009588:	f003 030f 	and.w	r3, r3, #15
 800958c:	2b06      	cmp	r3, #6
 800958e:	d110      	bne.n	80095b2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009596:	2208      	movs	r2, #8
 8009598:	4619      	mov	r1, r3
 800959a:	6a38      	ldr	r0, [r7, #32]
 800959c:	f005 febb 	bl	800f316 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	699a      	ldr	r2, [r3, #24]
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	091b      	lsrs	r3, r3, #4
 80095a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095ac:	441a      	add	r2, r3
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	699a      	ldr	r2, [r3, #24]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0210 	orr.w	r2, r2, #16
 80095c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f006 f839 	bl	800f63e <USB_ReadInterrupts>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095d6:	d16e      	bne.n	80096b6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f006 f83f 	bl	800f664 <USB_ReadDevAllOutEpInterrupt>
 80095e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80095e8:	e062      	b.n	80096b0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d057      	beq.n	80096a4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f006 f864 	bl	800f6cc <USB_ReadDevOutEPInterrupt>
 8009604:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00c      	beq.n	800962a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961c:	461a      	mov	r2, r3
 800961e:	2301      	movs	r3, #1
 8009620:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fdb1 	bl	800a18c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f003 0308 	and.w	r3, r3, #8
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00c      	beq.n	800964e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009640:	461a      	mov	r2, r3
 8009642:	2308      	movs	r3, #8
 8009644:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 feab 	bl	800a3a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f003 0310 	and.w	r3, r3, #16
 8009654:	2b00      	cmp	r3, #0
 8009656:	d008      	beq.n	800966a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009664:	461a      	mov	r2, r3
 8009666:	2310      	movs	r3, #16
 8009668:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d008      	beq.n	8009686 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	015a      	lsls	r2, r3, #5
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	4413      	add	r3, r2
 800967c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009680:	461a      	mov	r2, r3
 8009682:	2320      	movs	r3, #32
 8009684:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d009      	beq.n	80096a4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969c:	461a      	mov	r2, r3
 800969e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	3301      	adds	r3, #1
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	085b      	lsrs	r3, r3, #1
 80096ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d199      	bne.n	80095ea <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f005 ffbf 	bl	800f63e <USB_ReadInterrupts>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096ca:	f040 80c0 	bne.w	800984e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f005 ffe0 	bl	800f698 <USB_ReadDevAllInEpInterrupt>
 80096d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80096de:	e0b2      	b.n	8009846 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80a7 	beq.w	800983a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f2:	b2d2      	uxtb	r2, r2
 80096f4:	4611      	mov	r1, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f006 f806 	bl	800f708 <USB_ReadDevInEPInterrupt>
 80096fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	2b00      	cmp	r3, #0
 8009706:	d057      	beq.n	80097b8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	f003 030f 	and.w	r3, r3, #15
 800970e:	2201      	movs	r2, #1
 8009710:	fa02 f303 	lsl.w	r3, r2, r3
 8009714:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800971c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	43db      	mvns	r3, r3
 8009722:	69f9      	ldr	r1, [r7, #28]
 8009724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009728:	4013      	ands	r3, r2
 800972a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009738:	461a      	mov	r2, r3
 800973a:	2301      	movs	r3, #1
 800973c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d132      	bne.n	80097ac <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974a:	4613      	mov	r3, r2
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	1a9b      	subs	r3, r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	440b      	add	r3, r1
 8009754:	3348      	adds	r3, #72	; 0x48
 8009756:	6819      	ldr	r1, [r3, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975c:	4613      	mov	r3, r2
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	1a9b      	subs	r3, r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4403      	add	r3, r0
 8009766:	3344      	adds	r3, #68	; 0x44
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4419      	add	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009770:	4613      	mov	r3, r2
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4403      	add	r3, r0
 800977a:	3348      	adds	r3, #72	; 0x48
 800977c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	2b00      	cmp	r3, #0
 8009782:	d113      	bne.n	80097ac <HAL_PCD_IRQHandler+0x31c>
 8009784:	6879      	ldr	r1, [r7, #4]
 8009786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009788:	4613      	mov	r3, r2
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	440b      	add	r3, r1
 8009792:	3350      	adds	r3, #80	; 0x50
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d108      	bne.n	80097ac <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80097a4:	461a      	mov	r2, r3
 80097a6:	2101      	movs	r1, #1
 80097a8:	f006 f80e 	bl	800f7c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f00f f869 	bl	801888a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f003 0308 	and.w	r3, r3, #8
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d008      	beq.n	80097d4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ce:	461a      	mov	r2, r3
 80097d0:	2308      	movs	r3, #8
 80097d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d008      	beq.n	80097f0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ea:	461a      	mov	r2, r3
 80097ec:	2310      	movs	r3, #16
 80097ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d008      	beq.n	800980c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009806:	461a      	mov	r2, r3
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d008      	beq.n	8009828 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009822:	461a      	mov	r2, r3
 8009824:	2302      	movs	r3, #2
 8009826:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fc1b 	bl	800a070 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	3301      	adds	r3, #1
 800983e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009842:	085b      	lsrs	r3, r3, #1
 8009844:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009848:	2b00      	cmp	r3, #0
 800984a:	f47f af49 	bne.w	80096e0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4618      	mov	r0, r3
 8009854:	f005 fef3 	bl	800f63e <USB_ReadInterrupts>
 8009858:	4603      	mov	r3, r0
 800985a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800985e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009862:	d122      	bne.n	80098aa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	69fa      	ldr	r2, [r7, #28]
 800986e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009872:	f023 0301 	bic.w	r3, r3, #1
 8009876:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800987e:	2b01      	cmp	r3, #1
 8009880:	d108      	bne.n	8009894 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800988a:	2100      	movs	r1, #0
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fe27 	bl	800a4e0 <HAL_PCDEx_LPM_Callback>
 8009892:	e002      	b.n	800989a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f00f f86f 	bl	8018978 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	695a      	ldr	r2, [r3, #20]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80098a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f005 fec5 	bl	800f63e <USB_ReadInterrupts>
 80098b4:	4603      	mov	r3, r0
 80098b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098be:	d112      	bne.n	80098e6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d102      	bne.n	80098d6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f00f f82b 	bl	801892c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	695a      	ldr	r2, [r3, #20]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80098e4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f005 fea7 	bl	800f63e <USB_ReadInterrupts>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098fa:	f040 80c7 	bne.w	8009a8c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	69fa      	ldr	r2, [r7, #28]
 8009908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800990c:	f023 0301 	bic.w	r3, r3, #1
 8009910:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2110      	movs	r1, #16
 8009918:	4618      	mov	r0, r3
 800991a:	f004 ff41 	bl	800e7a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800991e:	2300      	movs	r3, #0
 8009920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009922:	e056      	b.n	80099d2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009930:	461a      	mov	r2, r3
 8009932:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009936:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	69fa      	ldr	r2, [r7, #28]
 800994c:	440a      	add	r2, r1
 800994e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009952:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009956:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009968:	0151      	lsls	r1, r2, #5
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	440a      	add	r2, r1
 800996e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009972:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009976:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009984:	461a      	mov	r2, r3
 8009986:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800998a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999c:	0151      	lsls	r1, r2, #5
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	440a      	add	r2, r1
 80099a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099bc:	0151      	lsls	r1, r2, #5
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	440a      	add	r2, r1
 80099c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	3301      	adds	r3, #1
 80099d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099d8:	429a      	cmp	r2, r3
 80099da:	d3a3      	bcc.n	8009924 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80099ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d016      	beq.n	8009a26 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a08:	f043 030b 	orr.w	r3, r3, #11
 8009a0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a18:	69fa      	ldr	r2, [r7, #28]
 8009a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a1e:	f043 030b 	orr.w	r3, r3, #11
 8009a22:	6453      	str	r3, [r2, #68]	; 0x44
 8009a24:	e015      	b.n	8009a52 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009a38:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009a3c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	69fa      	ldr	r2, [r7, #28]
 8009a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a4c:	f043 030b 	orr.w	r3, r3, #11
 8009a50:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a60:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009a64:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a76:	461a      	mov	r2, r3
 8009a78:	f005 fea6 	bl	800f7c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	695a      	ldr	r2, [r3, #20]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f005 fdd4 	bl	800f63e <USB_ReadInterrupts>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aa0:	d124      	bne.n	8009aec <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f005 fe6a 	bl	800f780 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f004 fed2 	bl	800e85a <USB_GetDevSpeed>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	461a      	mov	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681c      	ldr	r4, [r3, #0]
 8009ac2:	f001 f995 	bl	800adf0 <HAL_RCC_GetHCLKFreq>
 8009ac6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f004 fbf1 	bl	800e2b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f00e feff 	bl	80188da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	695a      	ldr	r2, [r3, #20]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f005 fda4 	bl	800f63e <USB_ReadInterrupts>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f003 0308 	and.w	r3, r3, #8
 8009afc:	2b08      	cmp	r3, #8
 8009afe:	d10a      	bne.n	8009b16 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f00e fedc 	bl	80188be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	695a      	ldr	r2, [r3, #20]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f002 0208 	and.w	r2, r2, #8
 8009b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f005 fd8f 	bl	800f63e <USB_ReadInterrupts>
 8009b20:	4603      	mov	r3, r0
 8009b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b2a:	d10f      	bne.n	8009b4c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f00e ff3e 	bl	80189b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	695a      	ldr	r2, [r3, #20]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f005 fd74 	bl	800f63e <USB_ReadInterrupts>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b60:	d10f      	bne.n	8009b82 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f00e ff11 	bl	8018994 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695a      	ldr	r2, [r3, #20]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f005 fd59 	bl	800f63e <USB_ReadInterrupts>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b96:	d10a      	bne.n	8009bae <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f00e ff1f 	bl	80189dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	695a      	ldr	r2, [r3, #20]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f005 fd43 	bl	800f63e <USB_ReadInterrupts>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	f003 0304 	and.w	r3, r3, #4
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	d115      	bne.n	8009bee <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f00e ff0f 	bl	80189f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6859      	ldr	r1, [r3, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	430a      	orrs	r2, r1
 8009be8:	605a      	str	r2, [r3, #4]
 8009bea:	e000      	b.n	8009bee <HAL_PCD_IRQHandler+0x75e>
      return;
 8009bec:	bf00      	nop
    }
  }
}
 8009bee:	3734      	adds	r7, #52	; 0x34
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd90      	pop	{r4, r7, pc}

08009bf4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d101      	bne.n	8009c0e <HAL_PCD_SetAddress+0x1a>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e013      	b.n	8009c36 <HAL_PCD_SetAddress+0x42>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	78fa      	ldrb	r2, [r7, #3]
 8009c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	78fa      	ldrb	r2, [r7, #3]
 8009c24:	4611      	mov	r1, r2
 8009c26:	4618      	mov	r0, r3
 8009c28:	f005 fca1 	bl	800f56e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	4608      	mov	r0, r1
 8009c48:	4611      	mov	r1, r2
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	70fb      	strb	r3, [r7, #3]
 8009c50:	460b      	mov	r3, r1
 8009c52:	803b      	strh	r3, [r7, #0]
 8009c54:	4613      	mov	r3, r2
 8009c56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	da0f      	bge.n	8009c84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	f003 020f 	and.w	r2, r3, #15
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	00db      	lsls	r3, r3, #3
 8009c6e:	1a9b      	subs	r3, r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	3338      	adds	r3, #56	; 0x38
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	4413      	add	r3, r2
 8009c78:	3304      	adds	r3, #4
 8009c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	705a      	strb	r2, [r3, #1]
 8009c82:	e00f      	b.n	8009ca4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	f003 020f 	and.w	r2, r3, #15
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	00db      	lsls	r3, r3, #3
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	4413      	add	r3, r2
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009ca4:	78fb      	ldrb	r3, [r7, #3]
 8009ca6:	f003 030f 	and.w	r3, r3, #15
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009cb0:	883a      	ldrh	r2, [r7, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	78ba      	ldrb	r2, [r7, #2]
 8009cba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	785b      	ldrb	r3, [r3, #1]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d004      	beq.n	8009cce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009cce:	78bb      	ldrb	r3, [r7, #2]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d102      	bne.n	8009cda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d101      	bne.n	8009ce8 <HAL_PCD_EP_Open+0xaa>
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e00e      	b.n	8009d06 <HAL_PCD_EP_Open+0xc8>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68f9      	ldr	r1, [r7, #12]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f004 fdd4 	bl	800e8a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009d04:	7afb      	ldrb	r3, [r7, #11]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	460b      	mov	r3, r1
 8009d18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	da0f      	bge.n	8009d42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	f003 020f 	and.w	r2, r3, #15
 8009d28:	4613      	mov	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	3338      	adds	r3, #56	; 0x38
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	4413      	add	r3, r2
 8009d36:	3304      	adds	r3, #4
 8009d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	705a      	strb	r2, [r3, #1]
 8009d40:	e00f      	b.n	8009d62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d42:	78fb      	ldrb	r3, [r7, #3]
 8009d44:	f003 020f 	and.w	r2, r3, #15
 8009d48:	4613      	mov	r3, r2
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	1a9b      	subs	r3, r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	4413      	add	r3, r2
 8009d58:	3304      	adds	r3, #4
 8009d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009d62:	78fb      	ldrb	r3, [r7, #3]
 8009d64:	f003 030f 	and.w	r3, r3, #15
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d101      	bne.n	8009d7c <HAL_PCD_EP_Close+0x6e>
 8009d78:	2302      	movs	r3, #2
 8009d7a:	e00e      	b.n	8009d9a <HAL_PCD_EP_Close+0x8c>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68f9      	ldr	r1, [r7, #12]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f004 fe12 	bl	800e9b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b086      	sub	sp, #24
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
 8009dae:	460b      	mov	r3, r1
 8009db0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009db2:	7afb      	ldrb	r3, [r7, #11]
 8009db4:	f003 020f 	and.w	r2, r3, #15
 8009db8:	4613      	mov	r3, r2
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	1a9b      	subs	r3, r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	3304      	adds	r3, #4
 8009dca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2200      	movs	r2, #0
 8009de2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009de4:	7afb      	ldrb	r3, [r7, #11]
 8009de6:	f003 030f 	and.w	r3, r3, #15
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d102      	bne.n	8009dfe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009dfe:	7afb      	ldrb	r3, [r7, #11]
 8009e00:	f003 030f 	and.w	r3, r3, #15
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d109      	bne.n	8009e1c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6818      	ldr	r0, [r3, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	461a      	mov	r2, r3
 8009e14:	6979      	ldr	r1, [r7, #20]
 8009e16:	f005 f8ed 	bl	800eff4 <USB_EP0StartXfer>
 8009e1a:	e008      	b.n	8009e2e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6818      	ldr	r0, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	461a      	mov	r2, r3
 8009e28:	6979      	ldr	r1, [r7, #20]
 8009e2a:	f004 fe9f 	bl	800eb6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	f003 020f 	and.w	r2, r3, #15
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	1a9b      	subs	r3, r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	440b      	add	r3, r1
 8009e56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009e5a:	681b      	ldr	r3, [r3, #0]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	607a      	str	r2, [r7, #4]
 8009e72:	603b      	str	r3, [r7, #0]
 8009e74:	460b      	mov	r3, r1
 8009e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e78:	7afb      	ldrb	r3, [r7, #11]
 8009e7a:	f003 020f 	and.w	r2, r3, #15
 8009e7e:	4613      	mov	r3, r2
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	1a9b      	subs	r3, r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	3338      	adds	r3, #56	; 0x38
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ea8:	7afb      	ldrb	r3, [r7, #11]
 8009eaa:	f003 030f 	and.w	r3, r3, #15
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d102      	bne.n	8009ec2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009ec2:	7afb      	ldrb	r3, [r7, #11]
 8009ec4:	f003 030f 	and.w	r3, r3, #15
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d109      	bne.n	8009ee0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6818      	ldr	r0, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	6979      	ldr	r1, [r7, #20]
 8009eda:	f005 f88b 	bl	800eff4 <USB_EP0StartXfer>
 8009ede:	e008      	b.n	8009ef2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6818      	ldr	r0, [r3, #0]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	461a      	mov	r2, r3
 8009eec:	6979      	ldr	r1, [r7, #20]
 8009eee:	f004 fe3d 	bl	800eb6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009f08:	78fb      	ldrb	r3, [r7, #3]
 8009f0a:	f003 020f 	and.w	r2, r3, #15
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d901      	bls.n	8009f1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e050      	b.n	8009fbc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	da0f      	bge.n	8009f42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f22:	78fb      	ldrb	r3, [r7, #3]
 8009f24:	f003 020f 	and.w	r2, r3, #15
 8009f28:	4613      	mov	r3, r2
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	1a9b      	subs	r3, r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	3338      	adds	r3, #56	; 0x38
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	4413      	add	r3, r2
 8009f36:	3304      	adds	r3, #4
 8009f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	705a      	strb	r2, [r3, #1]
 8009f40:	e00d      	b.n	8009f5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009f42:	78fa      	ldrb	r2, [r7, #3]
 8009f44:	4613      	mov	r3, r2
 8009f46:	00db      	lsls	r3, r3, #3
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	4413      	add	r3, r2
 8009f54:	3304      	adds	r3, #4
 8009f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2201      	movs	r2, #1
 8009f62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	f003 030f 	and.w	r3, r3, #15
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d101      	bne.n	8009f7e <HAL_PCD_EP_SetStall+0x82>
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	e01e      	b.n	8009fbc <HAL_PCD_EP_SetStall+0xc0>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68f9      	ldr	r1, [r7, #12]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f005 fa1a 	bl	800f3c6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009f92:	78fb      	ldrb	r3, [r7, #3]
 8009f94:	f003 030f 	and.w	r3, r3, #15
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6818      	ldr	r0, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	b2d9      	uxtb	r1, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009fac:	461a      	mov	r2, r3
 8009fae:	f005 fc0b 	bl	800f7c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	f003 020f 	and.w	r2, r3, #15
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d901      	bls.n	8009fe2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e042      	b.n	800a068 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	da0f      	bge.n	800a00a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	f003 020f 	and.w	r2, r3, #15
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	3338      	adds	r3, #56	; 0x38
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	3304      	adds	r3, #4
 800a000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2201      	movs	r2, #1
 800a006:	705a      	strb	r2, [r3, #1]
 800a008:	e00f      	b.n	800a02a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	f003 020f 	and.w	r2, r3, #15
 800a010:	4613      	mov	r3, r2
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	1a9b      	subs	r3, r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	4413      	add	r3, r2
 800a020:	3304      	adds	r3, #4
 800a022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	f003 030f 	and.w	r3, r3, #15
 800a036:	b2da      	uxtb	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_PCD_EP_ClrStall+0x86>
 800a046:	2302      	movs	r3, #2
 800a048:	e00e      	b.n	800a068 <HAL_PCD_EP_ClrStall+0xa4>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68f9      	ldr	r1, [r7, #12]
 800a058:	4618      	mov	r0, r3
 800a05a:	f005 fa22 	bl	800f4a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08a      	sub	sp, #40	; 0x28
 800a074:	af02      	add	r7, sp, #8
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	4613      	mov	r3, r2
 800a088:	00db      	lsls	r3, r3, #3
 800a08a:	1a9b      	subs	r3, r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	3338      	adds	r3, #56	; 0x38
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	4413      	add	r3, r2
 800a094:	3304      	adds	r3, #4
 800a096:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	699a      	ldr	r2, [r3, #24]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d901      	bls.n	800a0a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e06c      	b.n	800a182 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	695a      	ldr	r2, [r3, #20]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	69fa      	ldr	r2, [r7, #28]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d902      	bls.n	800a0c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	3303      	adds	r3, #3
 800a0c8:	089b      	lsrs	r3, r3, #2
 800a0ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a0cc:	e02b      	b.n	800a126 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	695a      	ldr	r2, [r3, #20]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	69fa      	ldr	r2, [r7, #28]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d902      	bls.n	800a0ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	3303      	adds	r3, #3
 800a0ee:	089b      	lsrs	r3, r3, #2
 800a0f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	68d9      	ldr	r1, [r3, #12]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a102:	b2db      	uxtb	r3, r3
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	4603      	mov	r3, r0
 800a108:	6978      	ldr	r0, [r7, #20]
 800a10a:	f005 f8c6 	bl	800f29a <USB_WritePacket>

    ep->xfer_buff  += len;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	68da      	ldr	r2, [r3, #12]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	441a      	add	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	699a      	ldr	r2, [r3, #24]
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	441a      	add	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	015a      	lsls	r2, r3, #5
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	4413      	add	r3, r2
 800a12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	b29b      	uxth	r3, r3
 800a136:	69ba      	ldr	r2, [r7, #24]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d809      	bhi.n	800a150 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	699a      	ldr	r2, [r3, #24]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a144:	429a      	cmp	r2, r3
 800a146:	d203      	bcs.n	800a150 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1be      	bne.n	800a0ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	695a      	ldr	r2, [r3, #20]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d811      	bhi.n	800a180 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	f003 030f 	and.w	r3, r3, #15
 800a162:	2201      	movs	r2, #1
 800a164:	fa02 f303 	lsl.w	r3, r2, r3
 800a168:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	43db      	mvns	r3, r3
 800a176:	6939      	ldr	r1, [r7, #16]
 800a178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a17c:	4013      	ands	r3, r2
 800a17e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3720      	adds	r7, #32
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	333c      	adds	r3, #60	; 0x3c
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	f040 80a0 	bne.w	800a304 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f003 0308 	and.w	r3, r3, #8
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d015      	beq.n	800a1fa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	4a72      	ldr	r2, [pc, #456]	; (800a39c <PCD_EP_OutXfrComplete_int+0x210>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	f240 80dd 	bls.w	800a392 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 80d7 	beq.w	800a392 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1f6:	6093      	str	r3, [r2, #8]
 800a1f8:	e0cb      	b.n	800a392 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b00      	cmp	r3, #0
 800a202:	d009      	beq.n	800a218 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a210:	461a      	mov	r2, r3
 800a212:	2320      	movs	r3, #32
 800a214:	6093      	str	r3, [r2, #8]
 800a216:	e0bc      	b.n	800a392 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f040 80b7 	bne.w	800a392 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4a5d      	ldr	r2, [pc, #372]	; (800a39c <PCD_EP_OutXfrComplete_int+0x210>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d90f      	bls.n	800a24c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00a      	beq.n	800a24c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a242:	461a      	mov	r2, r3
 800a244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a248:	6093      	str	r3, [r2, #8]
 800a24a:	e0a2      	b.n	800a392 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	4613      	mov	r3, r2
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	1a9b      	subs	r3, r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	440b      	add	r3, r1
 800a25a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a25e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	0159      	lsls	r1, r3, #5
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	440b      	add	r3, r1
 800a268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a272:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	4613      	mov	r3, r2
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	1a9b      	subs	r3, r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4403      	add	r3, r0
 800a282:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a286:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	4613      	mov	r3, r2
 800a28e:	00db      	lsls	r3, r3, #3
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	440b      	add	r3, r1
 800a296:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a29a:	6819      	ldr	r1, [r3, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	1a9b      	subs	r3, r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4403      	add	r3, r0
 800a2aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4419      	add	r1, r3
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	1a9b      	subs	r3, r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4403      	add	r3, r0
 800a2c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a2c4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d114      	bne.n	800a2f6 <PCD_EP_OutXfrComplete_int+0x16a>
 800a2cc:	6879      	ldr	r1, [r7, #4]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	1a9b      	subs	r3, r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	440b      	add	r3, r1
 800a2da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d108      	bne.n	800a2f6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6818      	ldr	r0, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	f005 fa69 	bl	800f7c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f00e faa9 	bl	8018854 <HAL_PCD_DataOutStageCallback>
 800a302:	e046      	b.n	800a392 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4a26      	ldr	r2, [pc, #152]	; (800a3a0 <PCD_EP_OutXfrComplete_int+0x214>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d124      	bne.n	800a356 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00a      	beq.n	800a32c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a322:	461a      	mov	r2, r3
 800a324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a328:	6093      	str	r3, [r2, #8]
 800a32a:	e032      	b.n	800a392 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f003 0320 	and.w	r3, r3, #32
 800a332:	2b00      	cmp	r3, #0
 800a334:	d008      	beq.n	800a348 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a342:	461a      	mov	r2, r3
 800a344:	2320      	movs	r3, #32
 800a346:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f00e fa80 	bl	8018854 <HAL_PCD_DataOutStageCallback>
 800a354:	e01d      	b.n	800a392 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d114      	bne.n	800a386 <PCD_EP_OutXfrComplete_int+0x1fa>
 800a35c:	6879      	ldr	r1, [r7, #4]
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	4613      	mov	r3, r2
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	1a9b      	subs	r3, r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	440b      	add	r3, r1
 800a36a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d108      	bne.n	800a386 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a37e:	461a      	mov	r2, r3
 800a380:	2100      	movs	r1, #0
 800a382:	f005 fa21 	bl	800f7c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f00e fa61 	bl	8018854 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3718      	adds	r7, #24
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	4f54300a 	.word	0x4f54300a
 800a3a0:	4f54310a 	.word	0x4f54310a

0800a3a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	333c      	adds	r3, #60	; 0x3c
 800a3bc:	3304      	adds	r3, #4
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	4a15      	ldr	r2, [pc, #84]	; (800a42c <PCD_EP_OutSetupPacket_int+0x88>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d90e      	bls.n	800a3f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d009      	beq.n	800a3f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f00e fa19 	bl	8018830 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	4a0a      	ldr	r2, [pc, #40]	; (800a42c <PCD_EP_OutSetupPacket_int+0x88>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d90c      	bls.n	800a420 <PCD_EP_OutSetupPacket_int+0x7c>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d108      	bne.n	800a420 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a418:	461a      	mov	r2, r3
 800a41a:	2101      	movs	r1, #1
 800a41c:	f005 f9d4 	bl	800f7c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	4f54300a 	.word	0x4f54300a

0800a430 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	70fb      	strb	r3, [r7, #3]
 800a43c:	4613      	mov	r3, r2
 800a43e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a448:	78fb      	ldrb	r3, [r7, #3]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d107      	bne.n	800a45e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a44e:	883b      	ldrh	r3, [r7, #0]
 800a450:	0419      	lsls	r1, r3, #16
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	430a      	orrs	r2, r1
 800a45a:	629a      	str	r2, [r3, #40]	; 0x28
 800a45c:	e028      	b.n	800a4b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a464:	0c1b      	lsrs	r3, r3, #16
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	4413      	add	r3, r2
 800a46a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
 800a470:	e00d      	b.n	800a48e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	3340      	adds	r3, #64	; 0x40
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	0c1b      	lsrs	r3, r3, #16
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	4413      	add	r3, r2
 800a486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	3301      	adds	r3, #1
 800a48c:	73fb      	strb	r3, [r7, #15]
 800a48e:	7bfa      	ldrb	r2, [r7, #15]
 800a490:	78fb      	ldrb	r3, [r7, #3]
 800a492:	3b01      	subs	r3, #1
 800a494:	429a      	cmp	r2, r3
 800a496:	d3ec      	bcc.n	800a472 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a498:	883b      	ldrh	r3, [r7, #0]
 800a49a:	0418      	lsls	r0, r3, #16
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6819      	ldr	r1, [r3, #0]
 800a4a0:	78fb      	ldrb	r3, [r7, #3]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	4302      	orrs	r2, r0
 800a4a8:	3340      	adds	r3, #64	; 0x40
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	440b      	add	r3, r1
 800a4ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b083      	sub	sp, #12
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	887a      	ldrh	r2, [r7, #2]
 800a4d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800a500:	4b05      	ldr	r3, [pc, #20]	; (800a518 <HAL_PWR_EnableWakeUpPin+0x20>)
 800a502:	685a      	ldr	r2, [r3, #4]
 800a504:	4904      	ldr	r1, [pc, #16]	; (800a518 <HAL_PWR_EnableWakeUpPin+0x20>)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4313      	orrs	r3, r2
 800a50a:	604b      	str	r3, [r1, #4]
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	40007000 	.word	0x40007000

0800a51c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800a524:	4b06      	ldr	r3, [pc, #24]	; (800a540 <HAL_PWR_DisableWakeUpPin+0x24>)
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	43db      	mvns	r3, r3
 800a52c:	4904      	ldr	r1, [pc, #16]	; (800a540 <HAL_PWR_DisableWakeUpPin+0x24>)
 800a52e:	4013      	ands	r3, r2
 800a530:	604b      	str	r3, [r1, #4]
}
 800a532:	bf00      	nop
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	40007000 	.word	0x40007000

0800a544 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800a544:	b480      	push	{r7}
 800a546:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800a548:	4b08      	ldr	r3, [pc, #32]	; (800a56c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a07      	ldr	r2, [pc, #28]	; (800a56c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800a54e:	f043 0302 	orr.w	r3, r3, #2
 800a552:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a554:	4b06      	ldr	r3, [pc, #24]	; (800a570 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	4a05      	ldr	r2, [pc, #20]	; (800a570 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800a55a:	f043 0304 	orr.w	r3, r3, #4
 800a55e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800a560:	bf30      	wfi
}
 800a562:	bf00      	nop
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	40007000 	.word	0x40007000
 800a570:	e000ed00 	.word	0xe000ed00

0800a574 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e264      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d075      	beq.n	800a67e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a592:	4ba3      	ldr	r3, [pc, #652]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f003 030c 	and.w	r3, r3, #12
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d00c      	beq.n	800a5b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a59e:	4ba0      	ldr	r3, [pc, #640]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	d112      	bne.n	800a5d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a5aa:	4b9d      	ldr	r3, [pc, #628]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5b6:	d10b      	bne.n	800a5d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5b8:	4b99      	ldr	r3, [pc, #612]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d05b      	beq.n	800a67c <HAL_RCC_OscConfig+0x108>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d157      	bne.n	800a67c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e23f      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d8:	d106      	bne.n	800a5e8 <HAL_RCC_OscConfig+0x74>
 800a5da:	4b91      	ldr	r3, [pc, #580]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a90      	ldr	r2, [pc, #576]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a5e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5e4:	6013      	str	r3, [r2, #0]
 800a5e6:	e01d      	b.n	800a624 <HAL_RCC_OscConfig+0xb0>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5f0:	d10c      	bne.n	800a60c <HAL_RCC_OscConfig+0x98>
 800a5f2:	4b8b      	ldr	r3, [pc, #556]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a8a      	ldr	r2, [pc, #552]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a5f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	4b88      	ldr	r3, [pc, #544]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a87      	ldr	r2, [pc, #540]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	e00b      	b.n	800a624 <HAL_RCC_OscConfig+0xb0>
 800a60c:	4b84      	ldr	r3, [pc, #528]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a83      	ldr	r2, [pc, #524]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	4b81      	ldr	r3, [pc, #516]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a80      	ldr	r2, [pc, #512]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a61e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d013      	beq.n	800a654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a62c:	f7fc fdd4 	bl	80071d8 <HAL_GetTick>
 800a630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a632:	e008      	b.n	800a646 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a634:	f7fc fdd0 	bl	80071d8 <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	2b64      	cmp	r3, #100	; 0x64
 800a640:	d901      	bls.n	800a646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e204      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a646:	4b76      	ldr	r3, [pc, #472]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d0f0      	beq.n	800a634 <HAL_RCC_OscConfig+0xc0>
 800a652:	e014      	b.n	800a67e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a654:	f7fc fdc0 	bl	80071d8 <HAL_GetTick>
 800a658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a65a:	e008      	b.n	800a66e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a65c:	f7fc fdbc 	bl	80071d8 <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	2b64      	cmp	r3, #100	; 0x64
 800a668:	d901      	bls.n	800a66e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e1f0      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a66e:	4b6c      	ldr	r3, [pc, #432]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1f0      	bne.n	800a65c <HAL_RCC_OscConfig+0xe8>
 800a67a:	e000      	b.n	800a67e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a67c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0302 	and.w	r3, r3, #2
 800a686:	2b00      	cmp	r3, #0
 800a688:	d063      	beq.n	800a752 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a68a:	4b65      	ldr	r3, [pc, #404]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	f003 030c 	and.w	r3, r3, #12
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00b      	beq.n	800a6ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a696:	4b62      	ldr	r3, [pc, #392]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d11c      	bne.n	800a6dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a6a2:	4b5f      	ldr	r3, [pc, #380]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d116      	bne.n	800a6dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6ae:	4b5c      	ldr	r3, [pc, #368]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0302 	and.w	r3, r3, #2
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d005      	beq.n	800a6c6 <HAL_RCC_OscConfig+0x152>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d001      	beq.n	800a6c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e1c4      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6c6:	4b56      	ldr	r3, [pc, #344]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	00db      	lsls	r3, r3, #3
 800a6d4:	4952      	ldr	r1, [pc, #328]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6da:	e03a      	b.n	800a752 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d020      	beq.n	800a726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a6e4:	4b4f      	ldr	r3, [pc, #316]	; (800a824 <HAL_RCC_OscConfig+0x2b0>)
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ea:	f7fc fd75 	bl	80071d8 <HAL_GetTick>
 800a6ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6f0:	e008      	b.n	800a704 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a6f2:	f7fc fd71 	bl	80071d8 <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d901      	bls.n	800a704 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a700:	2303      	movs	r3, #3
 800a702:	e1a5      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a704:	4b46      	ldr	r3, [pc, #280]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0302 	and.w	r3, r3, #2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d0f0      	beq.n	800a6f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a710:	4b43      	ldr	r3, [pc, #268]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	4940      	ldr	r1, [pc, #256]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a720:	4313      	orrs	r3, r2
 800a722:	600b      	str	r3, [r1, #0]
 800a724:	e015      	b.n	800a752 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a726:	4b3f      	ldr	r3, [pc, #252]	; (800a824 <HAL_RCC_OscConfig+0x2b0>)
 800a728:	2200      	movs	r2, #0
 800a72a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a72c:	f7fc fd54 	bl	80071d8 <HAL_GetTick>
 800a730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a732:	e008      	b.n	800a746 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a734:	f7fc fd50 	bl	80071d8 <HAL_GetTick>
 800a738:	4602      	mov	r2, r0
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d901      	bls.n	800a746 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e184      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a746:	4b36      	ldr	r3, [pc, #216]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1f0      	bne.n	800a734 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0308 	and.w	r3, r3, #8
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d030      	beq.n	800a7c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d016      	beq.n	800a794 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a766:	4b30      	ldr	r3, [pc, #192]	; (800a828 <HAL_RCC_OscConfig+0x2b4>)
 800a768:	2201      	movs	r2, #1
 800a76a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a76c:	f7fc fd34 	bl	80071d8 <HAL_GetTick>
 800a770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a772:	e008      	b.n	800a786 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a774:	f7fc fd30 	bl	80071d8 <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e164      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a786:	4b26      	ldr	r3, [pc, #152]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0f0      	beq.n	800a774 <HAL_RCC_OscConfig+0x200>
 800a792:	e015      	b.n	800a7c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a794:	4b24      	ldr	r3, [pc, #144]	; (800a828 <HAL_RCC_OscConfig+0x2b4>)
 800a796:	2200      	movs	r2, #0
 800a798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a79a:	f7fc fd1d 	bl	80071d8 <HAL_GetTick>
 800a79e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7a0:	e008      	b.n	800a7b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a7a2:	f7fc fd19 	bl	80071d8 <HAL_GetTick>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d901      	bls.n	800a7b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e14d      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7b4:	4b1a      	ldr	r3, [pc, #104]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a7b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7b8:	f003 0302 	and.w	r3, r3, #2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1f0      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 80a0 	beq.w	800a90e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7d2:	4b13      	ldr	r3, [pc, #76]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10f      	bne.n	800a7fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60bb      	str	r3, [r7, #8]
 800a7e2:	4b0f      	ldr	r3, [pc, #60]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e6:	4a0e      	ldr	r2, [pc, #56]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a7e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ec:	6413      	str	r3, [r2, #64]	; 0x40
 800a7ee:	4b0c      	ldr	r3, [pc, #48]	; (800a820 <HAL_RCC_OscConfig+0x2ac>)
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7f6:	60bb      	str	r3, [r7, #8]
 800a7f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <HAL_RCC_OscConfig+0x2b8>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a806:	2b00      	cmp	r3, #0
 800a808:	d121      	bne.n	800a84e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a80a:	4b08      	ldr	r3, [pc, #32]	; (800a82c <HAL_RCC_OscConfig+0x2b8>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a07      	ldr	r2, [pc, #28]	; (800a82c <HAL_RCC_OscConfig+0x2b8>)
 800a810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a816:	f7fc fcdf 	bl	80071d8 <HAL_GetTick>
 800a81a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a81c:	e011      	b.n	800a842 <HAL_RCC_OscConfig+0x2ce>
 800a81e:	bf00      	nop
 800a820:	40023800 	.word	0x40023800
 800a824:	42470000 	.word	0x42470000
 800a828:	42470e80 	.word	0x42470e80
 800a82c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a830:	f7fc fcd2 	bl	80071d8 <HAL_GetTick>
 800a834:	4602      	mov	r2, r0
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d901      	bls.n	800a842 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e106      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a842:	4b85      	ldr	r3, [pc, #532]	; (800aa58 <HAL_RCC_OscConfig+0x4e4>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0f0      	beq.n	800a830 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d106      	bne.n	800a864 <HAL_RCC_OscConfig+0x2f0>
 800a856:	4b81      	ldr	r3, [pc, #516]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a85a:	4a80      	ldr	r2, [pc, #512]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a85c:	f043 0301 	orr.w	r3, r3, #1
 800a860:	6713      	str	r3, [r2, #112]	; 0x70
 800a862:	e01c      	b.n	800a89e <HAL_RCC_OscConfig+0x32a>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	2b05      	cmp	r3, #5
 800a86a:	d10c      	bne.n	800a886 <HAL_RCC_OscConfig+0x312>
 800a86c:	4b7b      	ldr	r3, [pc, #492]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a870:	4a7a      	ldr	r2, [pc, #488]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a872:	f043 0304 	orr.w	r3, r3, #4
 800a876:	6713      	str	r3, [r2, #112]	; 0x70
 800a878:	4b78      	ldr	r3, [pc, #480]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87c:	4a77      	ldr	r2, [pc, #476]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a87e:	f043 0301 	orr.w	r3, r3, #1
 800a882:	6713      	str	r3, [r2, #112]	; 0x70
 800a884:	e00b      	b.n	800a89e <HAL_RCC_OscConfig+0x32a>
 800a886:	4b75      	ldr	r3, [pc, #468]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a88a:	4a74      	ldr	r2, [pc, #464]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a88c:	f023 0301 	bic.w	r3, r3, #1
 800a890:	6713      	str	r3, [r2, #112]	; 0x70
 800a892:	4b72      	ldr	r3, [pc, #456]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a896:	4a71      	ldr	r2, [pc, #452]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a898:	f023 0304 	bic.w	r3, r3, #4
 800a89c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d015      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8a6:	f7fc fc97 	bl	80071d8 <HAL_GetTick>
 800a8aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8ac:	e00a      	b.n	800a8c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a8ae:	f7fc fc93 	bl	80071d8 <HAL_GetTick>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d901      	bls.n	800a8c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e0c5      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8c4:	4b65      	ldr	r3, [pc, #404]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c8:	f003 0302 	and.w	r3, r3, #2
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d0ee      	beq.n	800a8ae <HAL_RCC_OscConfig+0x33a>
 800a8d0:	e014      	b.n	800a8fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8d2:	f7fc fc81 	bl	80071d8 <HAL_GetTick>
 800a8d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8d8:	e00a      	b.n	800a8f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a8da:	f7fc fc7d 	bl	80071d8 <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d901      	bls.n	800a8f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e0af      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8f0:	4b5a      	ldr	r3, [pc, #360]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1ee      	bne.n	800a8da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d105      	bne.n	800a90e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a902:	4b56      	ldr	r3, [pc, #344]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a906:	4a55      	ldr	r2, [pc, #340]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a90c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 809b 	beq.w	800aa4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a918:	4b50      	ldr	r3, [pc, #320]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	f003 030c 	and.w	r3, r3, #12
 800a920:	2b08      	cmp	r3, #8
 800a922:	d05c      	beq.n	800a9de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d141      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a92c:	4b4c      	ldr	r3, [pc, #304]	; (800aa60 <HAL_RCC_OscConfig+0x4ec>)
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a932:	f7fc fc51 	bl	80071d8 <HAL_GetTick>
 800a936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a938:	e008      	b.n	800a94c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a93a:	f7fc fc4d 	bl	80071d8 <HAL_GetTick>
 800a93e:	4602      	mov	r2, r0
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	2b02      	cmp	r3, #2
 800a946:	d901      	bls.n	800a94c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a948:	2303      	movs	r3, #3
 800a94a:	e081      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a94c:	4b43      	ldr	r3, [pc, #268]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1f0      	bne.n	800a93a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	69da      	ldr	r2, [r3, #28]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	431a      	orrs	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	019b      	lsls	r3, r3, #6
 800a968:	431a      	orrs	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96e:	085b      	lsrs	r3, r3, #1
 800a970:	3b01      	subs	r3, #1
 800a972:	041b      	lsls	r3, r3, #16
 800a974:	431a      	orrs	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97a:	061b      	lsls	r3, r3, #24
 800a97c:	4937      	ldr	r1, [pc, #220]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a982:	4b37      	ldr	r3, [pc, #220]	; (800aa60 <HAL_RCC_OscConfig+0x4ec>)
 800a984:	2201      	movs	r2, #1
 800a986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a988:	f7fc fc26 	bl	80071d8 <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a98e:	e008      	b.n	800a9a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a990:	f7fc fc22 	bl	80071d8 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e056      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9a2:	4b2e      	ldr	r3, [pc, #184]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0f0      	beq.n	800a990 <HAL_RCC_OscConfig+0x41c>
 800a9ae:	e04e      	b.n	800aa4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9b0:	4b2b      	ldr	r3, [pc, #172]	; (800aa60 <HAL_RCC_OscConfig+0x4ec>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9b6:	f7fc fc0f 	bl	80071d8 <HAL_GetTick>
 800a9ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9bc:	e008      	b.n	800a9d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a9be:	f7fc fc0b 	bl	80071d8 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d901      	bls.n	800a9d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e03f      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9d0:	4b22      	ldr	r3, [pc, #136]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1f0      	bne.n	800a9be <HAL_RCC_OscConfig+0x44a>
 800a9dc:	e037      	b.n	800aa4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d101      	bne.n	800a9ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e032      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a9ea:	4b1c      	ldr	r3, [pc, #112]	; (800aa5c <HAL_RCC_OscConfig+0x4e8>)
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d028      	beq.n	800aa4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d121      	bne.n	800aa4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d11a      	bne.n	800aa4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d111      	bne.n	800aa4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa30:	085b      	lsrs	r3, r3, #1
 800aa32:	3b01      	subs	r3, #1
 800aa34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d107      	bne.n	800aa4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d001      	beq.n	800aa4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e000      	b.n	800aa50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	40007000 	.word	0x40007000
 800aa5c:	40023800 	.word	0x40023800
 800aa60:	42470060 	.word	0x42470060

0800aa64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e0cc      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa78:	4b68      	ldr	r3, [pc, #416]	; (800ac1c <HAL_RCC_ClockConfig+0x1b8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 030f 	and.w	r3, r3, #15
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d90c      	bls.n	800aaa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa86:	4b65      	ldr	r3, [pc, #404]	; (800ac1c <HAL_RCC_ClockConfig+0x1b8>)
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	b2d2      	uxtb	r2, r2
 800aa8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa8e:	4b63      	ldr	r3, [pc, #396]	; (800ac1c <HAL_RCC_ClockConfig+0x1b8>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 030f 	and.w	r3, r3, #15
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d001      	beq.n	800aaa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e0b8      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d020      	beq.n	800aaee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0304 	and.w	r3, r3, #4
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d005      	beq.n	800aac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aab8:	4b59      	ldr	r3, [pc, #356]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	4a58      	ldr	r2, [pc, #352]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800aabe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0308 	and.w	r3, r3, #8
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d005      	beq.n	800aadc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aad0:	4b53      	ldr	r3, [pc, #332]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	4a52      	ldr	r2, [pc, #328]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800aad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800aada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aadc:	4b50      	ldr	r3, [pc, #320]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	494d      	ldr	r1, [pc, #308]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d044      	beq.n	800ab84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d107      	bne.n	800ab12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab02:	4b47      	ldr	r3, [pc, #284]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d119      	bne.n	800ab42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e07f      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d003      	beq.n	800ab22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d107      	bne.n	800ab32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab22:	4b3f      	ldr	r3, [pc, #252]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d109      	bne.n	800ab42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e06f      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab32:	4b3b      	ldr	r3, [pc, #236]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0302 	and.w	r3, r3, #2
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e067      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab42:	4b37      	ldr	r3, [pc, #220]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	f023 0203 	bic.w	r2, r3, #3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	4934      	ldr	r1, [pc, #208]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800ab50:	4313      	orrs	r3, r2
 800ab52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ab54:	f7fc fb40 	bl	80071d8 <HAL_GetTick>
 800ab58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab5a:	e00a      	b.n	800ab72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab5c:	f7fc fb3c 	bl	80071d8 <HAL_GetTick>
 800ab60:	4602      	mov	r2, r0
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d901      	bls.n	800ab72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e04f      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab72:	4b2b      	ldr	r3, [pc, #172]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	f003 020c 	and.w	r2, r3, #12
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d1eb      	bne.n	800ab5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ab84:	4b25      	ldr	r3, [pc, #148]	; (800ac1c <HAL_RCC_ClockConfig+0x1b8>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 030f 	and.w	r3, r3, #15
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d20c      	bcs.n	800abac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab92:	4b22      	ldr	r3, [pc, #136]	; (800ac1c <HAL_RCC_ClockConfig+0x1b8>)
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	b2d2      	uxtb	r2, r2
 800ab98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab9a:	4b20      	ldr	r3, [pc, #128]	; (800ac1c <HAL_RCC_ClockConfig+0x1b8>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 030f 	and.w	r3, r3, #15
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d001      	beq.n	800abac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e032      	b.n	800ac12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d008      	beq.n	800abca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800abb8:	4b19      	ldr	r3, [pc, #100]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	4916      	ldr	r1, [pc, #88]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0308 	and.w	r3, r3, #8
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d009      	beq.n	800abea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800abd6:	4b12      	ldr	r3, [pc, #72]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	00db      	lsls	r3, r3, #3
 800abe4:	490e      	ldr	r1, [pc, #56]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800abe6:	4313      	orrs	r3, r2
 800abe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800abea:	f000 f821 	bl	800ac30 <HAL_RCC_GetSysClockFreq>
 800abee:	4602      	mov	r2, r0
 800abf0:	4b0b      	ldr	r3, [pc, #44]	; (800ac20 <HAL_RCC_ClockConfig+0x1bc>)
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	091b      	lsrs	r3, r3, #4
 800abf6:	f003 030f 	and.w	r3, r3, #15
 800abfa:	490a      	ldr	r1, [pc, #40]	; (800ac24 <HAL_RCC_ClockConfig+0x1c0>)
 800abfc:	5ccb      	ldrb	r3, [r1, r3]
 800abfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ac02:	4a09      	ldr	r2, [pc, #36]	; (800ac28 <HAL_RCC_ClockConfig+0x1c4>)
 800ac04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ac06:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <HAL_RCC_ClockConfig+0x1c8>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7f8 f9ea 	bl	8002fe4 <HAL_InitTick>

  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	40023c00 	.word	0x40023c00
 800ac20:	40023800 	.word	0x40023800
 800ac24:	08020e78 	.word	0x08020e78
 800ac28:	20000000 	.word	0x20000000
 800ac2c:	20000060 	.word	0x20000060

0800ac30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	607b      	str	r3, [r7, #4]
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	2300      	movs	r3, #0
 800ac42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ac44:	2300      	movs	r3, #0
 800ac46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac48:	4b67      	ldr	r3, [pc, #412]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	f003 030c 	and.w	r3, r3, #12
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d00d      	beq.n	800ac70 <HAL_RCC_GetSysClockFreq+0x40>
 800ac54:	2b08      	cmp	r3, #8
 800ac56:	f200 80bd 	bhi.w	800add4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <HAL_RCC_GetSysClockFreq+0x34>
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	d003      	beq.n	800ac6a <HAL_RCC_GetSysClockFreq+0x3a>
 800ac62:	e0b7      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ac64:	4b61      	ldr	r3, [pc, #388]	; (800adec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ac66:	60bb      	str	r3, [r7, #8]
       break;
 800ac68:	e0b7      	b.n	800adda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ac6a:	4b60      	ldr	r3, [pc, #384]	; (800adec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ac6c:	60bb      	str	r3, [r7, #8]
      break;
 800ac6e:	e0b4      	b.n	800adda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ac70:	4b5d      	ldr	r3, [pc, #372]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ac7a:	4b5b      	ldr	r3, [pc, #364]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d04d      	beq.n	800ad22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac86:	4b58      	ldr	r3, [pc, #352]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	099b      	lsrs	r3, r3, #6
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	f04f 0300 	mov.w	r3, #0
 800ac92:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ac96:	f04f 0100 	mov.w	r1, #0
 800ac9a:	ea02 0800 	and.w	r8, r2, r0
 800ac9e:	ea03 0901 	and.w	r9, r3, r1
 800aca2:	4640      	mov	r0, r8
 800aca4:	4649      	mov	r1, r9
 800aca6:	f04f 0200 	mov.w	r2, #0
 800acaa:	f04f 0300 	mov.w	r3, #0
 800acae:	014b      	lsls	r3, r1, #5
 800acb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800acb4:	0142      	lsls	r2, r0, #5
 800acb6:	4610      	mov	r0, r2
 800acb8:	4619      	mov	r1, r3
 800acba:	ebb0 0008 	subs.w	r0, r0, r8
 800acbe:	eb61 0109 	sbc.w	r1, r1, r9
 800acc2:	f04f 0200 	mov.w	r2, #0
 800acc6:	f04f 0300 	mov.w	r3, #0
 800acca:	018b      	lsls	r3, r1, #6
 800accc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800acd0:	0182      	lsls	r2, r0, #6
 800acd2:	1a12      	subs	r2, r2, r0
 800acd4:	eb63 0301 	sbc.w	r3, r3, r1
 800acd8:	f04f 0000 	mov.w	r0, #0
 800acdc:	f04f 0100 	mov.w	r1, #0
 800ace0:	00d9      	lsls	r1, r3, #3
 800ace2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ace6:	00d0      	lsls	r0, r2, #3
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	eb12 0208 	adds.w	r2, r2, r8
 800acf0:	eb43 0309 	adc.w	r3, r3, r9
 800acf4:	f04f 0000 	mov.w	r0, #0
 800acf8:	f04f 0100 	mov.w	r1, #0
 800acfc:	0299      	lsls	r1, r3, #10
 800acfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ad02:	0290      	lsls	r0, r2, #10
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f04f 0300 	mov.w	r3, #0
 800ad14:	f7f5 ffc8 	bl	8000ca8 <__aeabi_uldivmod>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	e04a      	b.n	800adb8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad22:	4b31      	ldr	r3, [pc, #196]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	099b      	lsrs	r3, r3, #6
 800ad28:	461a      	mov	r2, r3
 800ad2a:	f04f 0300 	mov.w	r3, #0
 800ad2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ad32:	f04f 0100 	mov.w	r1, #0
 800ad36:	ea02 0400 	and.w	r4, r2, r0
 800ad3a:	ea03 0501 	and.w	r5, r3, r1
 800ad3e:	4620      	mov	r0, r4
 800ad40:	4629      	mov	r1, r5
 800ad42:	f04f 0200 	mov.w	r2, #0
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	014b      	lsls	r3, r1, #5
 800ad4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ad50:	0142      	lsls	r2, r0, #5
 800ad52:	4610      	mov	r0, r2
 800ad54:	4619      	mov	r1, r3
 800ad56:	1b00      	subs	r0, r0, r4
 800ad58:	eb61 0105 	sbc.w	r1, r1, r5
 800ad5c:	f04f 0200 	mov.w	r2, #0
 800ad60:	f04f 0300 	mov.w	r3, #0
 800ad64:	018b      	lsls	r3, r1, #6
 800ad66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ad6a:	0182      	lsls	r2, r0, #6
 800ad6c:	1a12      	subs	r2, r2, r0
 800ad6e:	eb63 0301 	sbc.w	r3, r3, r1
 800ad72:	f04f 0000 	mov.w	r0, #0
 800ad76:	f04f 0100 	mov.w	r1, #0
 800ad7a:	00d9      	lsls	r1, r3, #3
 800ad7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad80:	00d0      	lsls	r0, r2, #3
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	1912      	adds	r2, r2, r4
 800ad88:	eb45 0303 	adc.w	r3, r5, r3
 800ad8c:	f04f 0000 	mov.w	r0, #0
 800ad90:	f04f 0100 	mov.w	r1, #0
 800ad94:	0299      	lsls	r1, r3, #10
 800ad96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ad9a:	0290      	lsls	r0, r2, #10
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4610      	mov	r0, r2
 800ada2:	4619      	mov	r1, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	461a      	mov	r2, r3
 800ada8:	f04f 0300 	mov.w	r3, #0
 800adac:	f7f5 ff7c 	bl	8000ca8 <__aeabi_uldivmod>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4613      	mov	r3, r2
 800adb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800adb8:	4b0b      	ldr	r3, [pc, #44]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	0c1b      	lsrs	r3, r3, #16
 800adbe:	f003 0303 	and.w	r3, r3, #3
 800adc2:	3301      	adds	r3, #1
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800add0:	60bb      	str	r3, [r7, #8]
      break;
 800add2:	e002      	b.n	800adda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800add4:	4b05      	ldr	r3, [pc, #20]	; (800adec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800add6:	60bb      	str	r3, [r7, #8]
      break;
 800add8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800adda:	68bb      	ldr	r3, [r7, #8]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ade6:	bf00      	nop
 800ade8:	40023800 	.word	0x40023800
 800adec:	00f42400 	.word	0x00f42400

0800adf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800adf0:	b480      	push	{r7}
 800adf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800adf4:	4b03      	ldr	r3, [pc, #12]	; (800ae04 <HAL_RCC_GetHCLKFreq+0x14>)
 800adf6:	681b      	ldr	r3, [r3, #0]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	20000000 	.word	0x20000000

0800ae08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ae0c:	f7ff fff0 	bl	800adf0 <HAL_RCC_GetHCLKFreq>
 800ae10:	4602      	mov	r2, r0
 800ae12:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	0a9b      	lsrs	r3, r3, #10
 800ae18:	f003 0307 	and.w	r3, r3, #7
 800ae1c:	4903      	ldr	r1, [pc, #12]	; (800ae2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae1e:	5ccb      	ldrb	r3, [r1, r3]
 800ae20:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	40023800 	.word	0x40023800
 800ae2c:	08020e88 	.word	0x08020e88

0800ae30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ae34:	f7ff ffdc 	bl	800adf0 <HAL_RCC_GetHCLKFreq>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	0b5b      	lsrs	r3, r3, #13
 800ae40:	f003 0307 	and.w	r3, r3, #7
 800ae44:	4903      	ldr	r1, [pc, #12]	; (800ae54 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae46:	5ccb      	ldrb	r3, [r1, r3]
 800ae48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	40023800 	.word	0x40023800
 800ae54:	08020e88 	.word	0x08020e88

0800ae58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	220f      	movs	r2, #15
 800ae66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ae68:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <HAL_RCC_GetClockConfig+0x5c>)
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	f003 0203 	and.w	r2, r3, #3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ae74:	4b0f      	ldr	r3, [pc, #60]	; (800aeb4 <HAL_RCC_GetClockConfig+0x5c>)
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ae80:	4b0c      	ldr	r3, [pc, #48]	; (800aeb4 <HAL_RCC_GetClockConfig+0x5c>)
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ae8c:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <HAL_RCC_GetClockConfig+0x5c>)
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	08db      	lsrs	r3, r3, #3
 800ae92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae9a:	4b07      	ldr	r3, [pc, #28]	; (800aeb8 <HAL_RCC_GetClockConfig+0x60>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 020f 	and.w	r2, r3, #15
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	601a      	str	r2, [r3, #0]
}
 800aea6:	bf00      	nop
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	40023800 	.word	0x40023800
 800aeb8:	40023c00 	.word	0x40023c00

0800aebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aec4:	2300      	movs	r3, #0
 800aec6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800aec8:	2300      	movs	r3, #0
 800aeca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10b      	bne.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d105      	bne.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d075      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aef0:	4bad      	ldr	r3, [pc, #692]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aef6:	f7fc f96f 	bl	80071d8 <HAL_GetTick>
 800aefa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aefc:	e008      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800aefe:	f7fc f96b 	bl	80071d8 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d901      	bls.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e18b      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800af10:	4ba6      	ldr	r3, [pc, #664]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1f0      	bne.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	2b00      	cmp	r3, #0
 800af26:	d009      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	019a      	lsls	r2, r3, #6
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	071b      	lsls	r3, r3, #28
 800af34:	499d      	ldr	r1, [pc, #628]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af36:	4313      	orrs	r3, r2
 800af38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	2b00      	cmp	r3, #0
 800af46:	d01f      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af48:	4b98      	ldr	r3, [pc, #608]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af4e:	0f1b      	lsrs	r3, r3, #28
 800af50:	f003 0307 	and.w	r3, r3, #7
 800af54:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	019a      	lsls	r2, r3, #6
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	061b      	lsls	r3, r3, #24
 800af62:	431a      	orrs	r2, r3
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	071b      	lsls	r3, r3, #28
 800af68:	4990      	ldr	r1, [pc, #576]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af6a:	4313      	orrs	r3, r2
 800af6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800af70:	4b8e      	ldr	r3, [pc, #568]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af76:	f023 021f 	bic.w	r2, r3, #31
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	69db      	ldr	r3, [r3, #28]
 800af7e:	3b01      	subs	r3, #1
 800af80:	498a      	ldr	r1, [pc, #552]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af82:	4313      	orrs	r3, r2
 800af84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00d      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	019a      	lsls	r2, r3, #6
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	061b      	lsls	r3, r3, #24
 800afa0:	431a      	orrs	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	071b      	lsls	r3, r3, #28
 800afa8:	4980      	ldr	r1, [pc, #512]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800afb0:	4b7d      	ldr	r3, [pc, #500]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800afb2:	2201      	movs	r2, #1
 800afb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800afb6:	f7fc f90f 	bl	80071d8 <HAL_GetTick>
 800afba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800afbc:	e008      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800afbe:	f7fc f90b 	bl	80071d8 <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d901      	bls.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e12b      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800afd0:	4b76      	ldr	r3, [pc, #472]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d0f0      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0304 	and.w	r3, r3, #4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d105      	bne.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d079      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800aff4:	4b6e      	ldr	r3, [pc, #440]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800affa:	f7fc f8ed 	bl	80071d8 <HAL_GetTick>
 800affe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b000:	e008      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b002:	f7fc f8e9 	bl	80071d8 <HAL_GetTick>
 800b006:	4602      	mov	r2, r0
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d901      	bls.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b010:	2303      	movs	r3, #3
 800b012:	e109      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b014:	4b65      	ldr	r3, [pc, #404]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b01c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b020:	d0ef      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0304 	and.w	r3, r3, #4
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d020      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b02e:	4b5f      	ldr	r3, [pc, #380]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b034:	0f1b      	lsrs	r3, r3, #28
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	019a      	lsls	r2, r3, #6
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	061b      	lsls	r3, r3, #24
 800b048:	431a      	orrs	r2, r3
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	071b      	lsls	r3, r3, #28
 800b04e:	4957      	ldr	r1, [pc, #348]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b050:	4313      	orrs	r3, r2
 800b052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b056:	4b55      	ldr	r3, [pc, #340]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b05c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a1b      	ldr	r3, [r3, #32]
 800b064:	3b01      	subs	r3, #1
 800b066:	021b      	lsls	r3, r3, #8
 800b068:	4950      	ldr	r1, [pc, #320]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b06a:	4313      	orrs	r3, r2
 800b06c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0308 	and.w	r3, r3, #8
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d01e      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b07c:	4b4b      	ldr	r3, [pc, #300]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b082:	0e1b      	lsrs	r3, r3, #24
 800b084:	f003 030f 	and.w	r3, r3, #15
 800b088:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	019a      	lsls	r2, r3, #6
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	061b      	lsls	r3, r3, #24
 800b094:	431a      	orrs	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	071b      	lsls	r3, r3, #28
 800b09c:	4943      	ldr	r1, [pc, #268]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b0a4:	4b41      	ldr	r3, [pc, #260]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b0a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	493e      	ldr	r1, [pc, #248]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b0ba:	4b3d      	ldr	r3, [pc, #244]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b0bc:	2201      	movs	r2, #1
 800b0be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b0c0:	f7fc f88a 	bl	80071d8 <HAL_GetTick>
 800b0c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0c6:	e008      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b0c8:	f7fc f886 	bl	80071d8 <HAL_GetTick>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d901      	bls.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e0a6      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0da:	4b34      	ldr	r3, [pc, #208]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0e6:	d1ef      	bne.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f003 0320 	and.w	r3, r3, #32
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 808d 	beq.w	800b210 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	4b2c      	ldr	r3, [pc, #176]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	4a2b      	ldr	r2, [pc, #172]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b104:	6413      	str	r3, [r2, #64]	; 0x40
 800b106:	4b29      	ldr	r3, [pc, #164]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b112:	4b28      	ldr	r3, [pc, #160]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a27      	ldr	r2, [pc, #156]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800b118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b11c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b11e:	f7fc f85b 	bl	80071d8 <HAL_GetTick>
 800b122:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b124:	e008      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b126:	f7fc f857 	bl	80071d8 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	2b02      	cmp	r3, #2
 800b132:	d901      	bls.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e077      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b138:	4b1e      	ldr	r3, [pc, #120]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0f0      	beq.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b144:	4b19      	ldr	r3, [pc, #100]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b14c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d039      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d032      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b162:	4b12      	ldr	r3, [pc, #72]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b16a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b16c:	4b12      	ldr	r3, [pc, #72]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800b16e:	2201      	movs	r2, #1
 800b170:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b172:	4b11      	ldr	r3, [pc, #68]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800b174:	2200      	movs	r2, #0
 800b176:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b178:	4a0c      	ldr	r2, [pc, #48]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b17e:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	2b01      	cmp	r3, #1
 800b188:	d11e      	bne.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b18a:	f7fc f825 	bl	80071d8 <HAL_GetTick>
 800b18e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b190:	e014      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b192:	f7fc f821 	bl	80071d8 <HAL_GetTick>
 800b196:	4602      	mov	r2, r0
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d90b      	bls.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e03f      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b1a8:	42470068 	.word	0x42470068
 800b1ac:	40023800 	.word	0x40023800
 800b1b0:	42470070 	.word	0x42470070
 800b1b4:	40007000 	.word	0x40007000
 800b1b8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1bc:	4b1c      	ldr	r3, [pc, #112]	; (800b230 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b1be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c0:	f003 0302 	and.w	r3, r3, #2
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d0e4      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1d4:	d10d      	bne.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800b1d6:	4b16      	ldr	r3, [pc, #88]	; (800b230 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b1e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1ea:	4911      	ldr	r1, [pc, #68]	; (800b230 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	608b      	str	r3, [r1, #8]
 800b1f0:	e005      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b1f2:	4b0f      	ldr	r3, [pc, #60]	; (800b230 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	4a0e      	ldr	r2, [pc, #56]	; (800b230 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b1f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b1fc:	6093      	str	r3, [r2, #8]
 800b1fe:	4b0c      	ldr	r3, [pc, #48]	; (800b230 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b200:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b20a:	4909      	ldr	r1, [pc, #36]	; (800b230 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0310 	and.w	r3, r3, #16
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d004      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800b222:	4b04      	ldr	r3, [pc, #16]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800b224:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	40023800 	.word	0x40023800
 800b234:	424711e0 	.word	0x424711e0

0800b238 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	e083      	b.n	800b352 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	7f5b      	ldrb	r3, [r3, #29]
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b00      	cmp	r3, #0
 800b252:	d105      	bne.n	800b260 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7f7 fcce 	bl	8002bfc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2202      	movs	r2, #2
 800b264:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	22ca      	movs	r2, #202	; 0xca
 800b26c:	625a      	str	r2, [r3, #36]	; 0x24
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2253      	movs	r2, #83	; 0x53
 800b274:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fc26 	bl	800bac8 <RTC_EnterInitMode>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d008      	beq.n	800b294 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	22ff      	movs	r2, #255	; 0xff
 800b288:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2204      	movs	r2, #4
 800b28e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	e05e      	b.n	800b352 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	6812      	ldr	r2, [r2, #0]
 800b29e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6899      	ldr	r1, [r3, #8]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	685a      	ldr	r2, [r3, #4]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	68d2      	ldr	r2, [r2, #12]
 800b2ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6919      	ldr	r1, [r3, #16]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	041a      	lsls	r2, r3, #16
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	430a      	orrs	r2, r1
 800b2e2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68da      	ldr	r2, [r3, #12]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f003 0320 	and.w	r3, r3, #32
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10e      	bne.n	800b320 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fbb8 	bl	800ba78 <HAL_RTC_WaitForSynchro>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d008      	beq.n	800b320 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	22ff      	movs	r2, #255	; 0xff
 800b314:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2204      	movs	r2, #4
 800b31a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e018      	b.n	800b352 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b32e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699a      	ldr	r2, [r3, #24]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	430a      	orrs	r2, r1
 800b340:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	22ff      	movs	r2, #255	; 0xff
 800b348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800b350:	2300      	movs	r3, #0
  }
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b35a:	b590      	push	{r4, r7, lr}
 800b35c:	b087      	sub	sp, #28
 800b35e:	af00      	add	r7, sp, #0
 800b360:	60f8      	str	r0, [r7, #12]
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b366:	2300      	movs	r3, #0
 800b368:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	7f1b      	ldrb	r3, [r3, #28]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d101      	bne.n	800b376 <HAL_RTC_SetTime+0x1c>
 800b372:	2302      	movs	r3, #2
 800b374:	e0aa      	b.n	800b4cc <HAL_RTC_SetTime+0x172>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2201      	movs	r2, #1
 800b37a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2202      	movs	r2, #2
 800b380:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d126      	bne.n	800b3d6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b392:	2b00      	cmp	r3, #0
 800b394:	d102      	bne.n	800b39c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	2200      	movs	r2, #0
 800b39a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fbbd 	bl	800bb20 <RTC_ByteToBcd2>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	785b      	ldrb	r3, [r3, #1]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f000 fbb6 	bl	800bb20 <RTC_ByteToBcd2>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b3b8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	789b      	ldrb	r3, [r3, #2]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 fbae 	bl	800bb20 <RTC_ByteToBcd2>
 800b3c4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800b3c6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	78db      	ldrb	r3, [r3, #3]
 800b3ce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	617b      	str	r3, [r7, #20]
 800b3d4:	e018      	b.n	800b408 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d102      	bne.n	800b3ea <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	785b      	ldrb	r3, [r3, #1]
 800b3f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b3f6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800b3f8:	68ba      	ldr	r2, [r7, #8]
 800b3fa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b3fc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	78db      	ldrb	r3, [r3, #3]
 800b402:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b404:	4313      	orrs	r3, r2
 800b406:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	22ca      	movs	r2, #202	; 0xca
 800b40e:	625a      	str	r2, [r3, #36]	; 0x24
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2253      	movs	r2, #83	; 0x53
 800b416:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f000 fb55 	bl	800bac8 <RTC_EnterInitMode>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00b      	beq.n	800b43c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	22ff      	movs	r2, #255	; 0xff
 800b42a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2204      	movs	r2, #4
 800b430:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	e047      	b.n	800b4cc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b446:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b44a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	689a      	ldr	r2, [r3, #8]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b45a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6899      	ldr	r1, [r3, #8]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	68da      	ldr	r2, [r3, #12]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	431a      	orrs	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	430a      	orrs	r2, r1
 800b472:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68da      	ldr	r2, [r3, #12]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b482:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	f003 0320 	and.w	r3, r3, #32
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d111      	bne.n	800b4b6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 faf0 	bl	800ba78 <HAL_RTC_WaitForSynchro>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00b      	beq.n	800b4b6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	22ff      	movs	r2, #255	; 0xff
 800b4a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2204      	movs	r2, #4
 800b4aa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e00a      	b.n	800b4cc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	22ff      	movs	r2, #255	; 0xff
 800b4bc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800b4ca:	2300      	movs	r3, #0
  }
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	371c      	adds	r7, #28
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd90      	pop	{r4, r7, pc}

0800b4d4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b506:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b50a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	0c1b      	lsrs	r3, r3, #16
 800b510:	b2db      	uxtb	r3, r3
 800b512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b516:	b2da      	uxtb	r2, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	0a1b      	lsrs	r3, r3, #8
 800b520:	b2db      	uxtb	r3, r3
 800b522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b526:	b2da      	uxtb	r2, r3
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b534:	b2da      	uxtb	r2, r3
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	0c1b      	lsrs	r3, r3, #16
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b544:	b2da      	uxtb	r2, r3
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d11a      	bne.n	800b586 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	4618      	mov	r0, r3
 800b556:	f000 fb01 	bl	800bb5c <RTC_Bcd2ToByte>
 800b55a:	4603      	mov	r3, r0
 800b55c:	461a      	mov	r2, r3
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	785b      	ldrb	r3, [r3, #1]
 800b566:	4618      	mov	r0, r3
 800b568:	f000 faf8 	bl	800bb5c <RTC_Bcd2ToByte>
 800b56c:	4603      	mov	r3, r0
 800b56e:	461a      	mov	r2, r3
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	789b      	ldrb	r3, [r3, #2]
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 faef 	bl	800bb5c <RTC_Bcd2ToByte>
 800b57e:	4603      	mov	r3, r0
 800b580:	461a      	mov	r2, r3
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b590:	b590      	push	{r4, r7, lr}
 800b592:	b087      	sub	sp, #28
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	7f1b      	ldrb	r3, [r3, #28]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d101      	bne.n	800b5ac <HAL_RTC_SetDate+0x1c>
 800b5a8:	2302      	movs	r3, #2
 800b5aa:	e094      	b.n	800b6d6 <HAL_RTC_SetDate+0x146>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10e      	bne.n	800b5dc <HAL_RTC_SetDate+0x4c>
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	785b      	ldrb	r3, [r3, #1]
 800b5c2:	f003 0310 	and.w	r3, r3, #16
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d008      	beq.n	800b5dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	785b      	ldrb	r3, [r3, #1]
 800b5ce:	f023 0310 	bic.w	r3, r3, #16
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	330a      	adds	r3, #10
 800b5d6:	b2da      	uxtb	r2, r3
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d11c      	bne.n	800b61c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	78db      	ldrb	r3, [r3, #3]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 fa9a 	bl	800bb20 <RTC_ByteToBcd2>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	785b      	ldrb	r3, [r3, #1]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f000 fa93 	bl	800bb20 <RTC_ByteToBcd2>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b5fe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	789b      	ldrb	r3, [r3, #2]
 800b604:	4618      	mov	r0, r3
 800b606:	f000 fa8b 	bl	800bb20 <RTC_ByteToBcd2>
 800b60a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b60c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b616:	4313      	orrs	r3, r2
 800b618:	617b      	str	r3, [r7, #20]
 800b61a:	e00e      	b.n	800b63a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	78db      	ldrb	r3, [r3, #3]
 800b620:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	785b      	ldrb	r3, [r3, #1]
 800b626:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b628:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800b62e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b636:	4313      	orrs	r3, r2
 800b638:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	22ca      	movs	r2, #202	; 0xca
 800b640:	625a      	str	r2, [r3, #36]	; 0x24
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2253      	movs	r2, #83	; 0x53
 800b648:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f000 fa3c 	bl	800bac8 <RTC_EnterInitMode>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	22ff      	movs	r2, #255	; 0xff
 800b65c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2204      	movs	r2, #4
 800b662:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e033      	b.n	800b6d6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b678:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b67c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68da      	ldr	r2, [r3, #12]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b68c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f003 0320 	and.w	r3, r3, #32
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d111      	bne.n	800b6c0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 f9eb 	bl	800ba78 <HAL_RTC_WaitForSynchro>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00b      	beq.n	800b6c0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	22ff      	movs	r2, #255	; 0xff
 800b6ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2204      	movs	r2, #4
 800b6b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e00a      	b.n	800b6d6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	22ff      	movs	r2, #255	; 0xff
 800b6c6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
  }
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	371c      	adds	r7, #28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd90      	pop	{r4, r7, pc}

0800b6de <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b086      	sub	sp, #24
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b6fc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	0c1b      	lsrs	r3, r3, #16
 800b702:	b2da      	uxtb	r2, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	0a1b      	lsrs	r3, r3, #8
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	f003 031f 	and.w	r3, r3, #31
 800b712:	b2da      	uxtb	r2, r3
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b720:	b2da      	uxtb	r2, r3
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	0b5b      	lsrs	r3, r3, #13
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	f003 0307 	and.w	r3, r3, #7
 800b730:	b2da      	uxtb	r2, r3
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d11a      	bne.n	800b772 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	78db      	ldrb	r3, [r3, #3]
 800b740:	4618      	mov	r0, r3
 800b742:	f000 fa0b 	bl	800bb5c <RTC_Bcd2ToByte>
 800b746:	4603      	mov	r3, r0
 800b748:	461a      	mov	r2, r3
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	785b      	ldrb	r3, [r3, #1]
 800b752:	4618      	mov	r0, r3
 800b754:	f000 fa02 	bl	800bb5c <RTC_Bcd2ToByte>
 800b758:	4603      	mov	r3, r0
 800b75a:	461a      	mov	r2, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	789b      	ldrb	r3, [r3, #2]
 800b764:	4618      	mov	r0, r3
 800b766:	f000 f9f9 	bl	800bb5c <RTC_Bcd2ToByte>
 800b76a:	4603      	mov	r3, r0
 800b76c:	461a      	mov	r2, r3
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b77c:	b590      	push	{r4, r7, lr}
 800b77e:	b089      	sub	sp, #36	; 0x24
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800b788:	2300      	movs	r3, #0
 800b78a:	61fb      	str	r3, [r7, #28]
 800b78c:	2300      	movs	r3, #0
 800b78e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800b790:	4b93      	ldr	r3, [pc, #588]	; (800b9e0 <HAL_RTC_SetAlarm_IT+0x264>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a93      	ldr	r2, [pc, #588]	; (800b9e4 <HAL_RTC_SetAlarm_IT+0x268>)
 800b796:	fba2 2303 	umull	r2, r3, r2, r3
 800b79a:	0adb      	lsrs	r3, r3, #11
 800b79c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7a0:	fb02 f303 	mul.w	r3, r2, r3
 800b7a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	7f1b      	ldrb	r3, [r3, #28]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d101      	bne.n	800b7b2 <HAL_RTC_SetAlarm_IT+0x36>
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	e111      	b.n	800b9d6 <HAL_RTC_SetAlarm_IT+0x25a>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d137      	bne.n	800b834 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d102      	bne.n	800b7d8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 f99f 	bl	800bb20 <RTC_ByteToBcd2>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	785b      	ldrb	r3, [r3, #1]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 f998 	bl	800bb20 <RTC_ByteToBcd2>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b7f4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	789b      	ldrb	r3, [r3, #2]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 f990 	bl	800bb20 <RTC_ByteToBcd2>
 800b800:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b802:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	78db      	ldrb	r3, [r3, #3]
 800b80a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b80c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b816:	4618      	mov	r0, r3
 800b818:	f000 f982 	bl	800bb20 <RTC_ByteToBcd2>
 800b81c:	4603      	mov	r3, r0
 800b81e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b820:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b828:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b82e:	4313      	orrs	r3, r2
 800b830:	61fb      	str	r3, [r7, #28]
 800b832:	e023      	b.n	800b87c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d102      	bne.n	800b848 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	2200      	movs	r2, #0
 800b846:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	785b      	ldrb	r3, [r3, #1]
 800b852:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b854:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b85a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	78db      	ldrb	r3, [r3, #3]
 800b860:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b862:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b86a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b86c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b872:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b878:	4313      	orrs	r3, r2
 800b87a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	4313      	orrs	r3, r2
 800b886:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	22ca      	movs	r2, #202	; 0xca
 800b88e:	625a      	str	r2, [r3, #36]	; 0x24
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2253      	movs	r2, #83	; 0x53
 800b896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a0:	d141      	bne.n	800b926 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	689a      	ldr	r2, [r3, #8]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8b0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800b8c2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	1e5a      	subs	r2, r3, #1
 800b8c8:	617a      	str	r2, [r7, #20]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10b      	bne.n	800b8e6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	22ff      	movs	r2, #255	; 0xff
 800b8d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2203      	movs	r2, #3
 800b8da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	e077      	b.n	800b9d6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	f003 0301 	and.w	r3, r3, #1
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d0e7      	beq.n	800b8c4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	69fa      	ldr	r2, [r7, #28]
 800b8fa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	689a      	ldr	r2, [r3, #8]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b912:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689a      	ldr	r2, [r3, #8]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b922:	609a      	str	r2, [r3, #8]
 800b924:	e040      	b.n	800b9a8 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b934:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f462 7220 	orn	r2, r2, #640	; 0x280
 800b946:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	1e5a      	subs	r2, r3, #1
 800b94c:	617a      	str	r2, [r7, #20]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d10b      	bne.n	800b96a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	22ff      	movs	r2, #255	; 0xff
 800b958:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2203      	movs	r2, #3
 800b95e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b966:	2303      	movs	r3, #3
 800b968:	e035      	b.n	800b9d6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f003 0302 	and.w	r3, r3, #2
 800b974:	2b00      	cmp	r3, #0
 800b976:	d0e7      	beq.n	800b948 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	69fa      	ldr	r2, [r7, #28]
 800b97e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	69ba      	ldr	r2, [r7, #24]
 800b986:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	689a      	ldr	r2, [r3, #8]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b996:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	689a      	ldr	r2, [r3, #8]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9a6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b9a8:	4b0f      	ldr	r3, [pc, #60]	; (800b9e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a0e      	ldr	r2, [pc, #56]	; (800b9e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b9ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9b2:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800b9b4:	4b0c      	ldr	r3, [pc, #48]	; (800b9e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	4a0b      	ldr	r2, [pc, #44]	; (800b9e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b9ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9be:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	22ff      	movs	r2, #255	; 0xff
 800b9c6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3724      	adds	r7, #36	; 0x24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd90      	pop	{r4, r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20000000 	.word	0x20000000
 800b9e4:	10624dd3 	.word	0x10624dd3
 800b9e8:	40013c00 	.word	0x40013c00

0800b9ec <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d012      	beq.n	800ba28 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00b      	beq.n	800ba28 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7fa feef 	bl	80067f4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800ba26:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d012      	beq.n	800ba5c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00b      	beq.n	800ba5c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f9bf 	bl	800bdc8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f462 7220 	orn	r2, r2, #640	; 0x280
 800ba5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ba5c:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <HAL_RTC_AlarmIRQHandler+0x88>)
 800ba5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ba62:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	775a      	strb	r2, [r3, #29]
}
 800ba6a:	bf00      	nop
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	40013c00 	.word	0x40013c00

0800ba78 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba80:	2300      	movs	r3, #0
 800ba82:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68da      	ldr	r2, [r3, #12]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ba92:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba94:	f7fb fba0 	bl	80071d8 <HAL_GetTick>
 800ba98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ba9a:	e009      	b.n	800bab0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ba9c:	f7fb fb9c 	bl	80071d8 <HAL_GetTick>
 800baa0:	4602      	mov	r2, r0
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800baaa:	d901      	bls.n	800bab0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e007      	b.n	800bac0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0ee      	beq.n	800ba9c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bad0:	2300      	movs	r3, #0
 800bad2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d119      	bne.n	800bb16 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f04f 32ff 	mov.w	r2, #4294967295
 800baea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800baec:	f7fb fb74 	bl	80071d8 <HAL_GetTick>
 800baf0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800baf2:	e009      	b.n	800bb08 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800baf4:	f7fb fb70 	bl	80071d8 <HAL_GetTick>
 800baf8:	4602      	mov	r2, r0
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb02:	d901      	bls.n	800bb08 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800bb04:	2303      	movs	r3, #3
 800bb06:	e007      	b.n	800bb18 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0ee      	beq.n	800baf4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	4603      	mov	r3, r0
 800bb28:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800bb2e:	e005      	b.n	800bb3c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	3301      	adds	r3, #1
 800bb34:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800bb36:	79fb      	ldrb	r3, [r7, #7]
 800bb38:	3b0a      	subs	r3, #10
 800bb3a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800bb3c:	79fb      	ldrb	r3, [r7, #7]
 800bb3e:	2b09      	cmp	r3, #9
 800bb40:	d8f6      	bhi.n	800bb30 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	011b      	lsls	r3, r3, #4
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	79fb      	ldrb	r3, [r7, #7]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	b2db      	uxtb	r3, r3
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4603      	mov	r3, r0
 800bb64:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800bb6a:	79fb      	ldrb	r3, [r7, #7]
 800bb6c:	091b      	lsrs	r3, r3, #4
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	461a      	mov	r2, r3
 800bb72:	4613      	mov	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4413      	add	r3, r2
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800bb7c:	79fb      	ldrb	r3, [r7, #7]
 800bb7e:	f003 030f 	and.w	r3, r3, #15
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	4413      	add	r3, r2
 800bb8a:	b2db      	uxtb	r3, r3
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b087      	sub	sp, #28
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	7f1b      	ldrb	r3, [r3, #28]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d101      	bne.n	800bbb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800bbac:	2302      	movs	r3, #2
 800bbae:	e0a6      	b.n	800bcfe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2202      	movs	r2, #2
 800bbba:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	22ca      	movs	r2, #202	; 0xca
 800bbc2:	625a      	str	r2, [r3, #36]	; 0x24
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2253      	movs	r2, #83	; 0x53
 800bbca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d022      	beq.n	800bc20 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800bbda:	4b4c      	ldr	r3, [pc, #304]	; (800bd0c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a4c      	ldr	r2, [pc, #304]	; (800bd10 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800bbe0:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe4:	0adb      	lsrs	r3, r3, #11
 800bbe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bbea:	fb02 f303 	mul.w	r3, r2, r3
 800bbee:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	1e5a      	subs	r2, r3, #1
 800bbf4:	617a      	str	r2, [r7, #20]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10b      	bne.n	800bc12 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	22ff      	movs	r2, #255	; 0xff
 800bc00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2203      	movs	r2, #3
 800bc06:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e075      	b.n	800bcfe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	f003 0304 	and.w	r3, r3, #4
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1e7      	bne.n	800bbf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689a      	ldr	r2, [r3, #8]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc2e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800bc30:	4b36      	ldr	r3, [pc, #216]	; (800bd0c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a36      	ldr	r2, [pc, #216]	; (800bd10 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800bc36:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3a:	0adb      	lsrs	r3, r3, #11
 800bc3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc40:	fb02 f303 	mul.w	r3, r2, r3
 800bc44:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	1e5a      	subs	r2, r3, #1
 800bc4a:	617a      	str	r2, [r7, #20]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10b      	bne.n	800bc68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	22ff      	movs	r2, #255	; 0xff
 800bc56:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2203      	movs	r2, #3
 800bc5c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800bc64:	2303      	movs	r3, #3
 800bc66:	e04a      	b.n	800bcfe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	f003 0304 	and.w	r3, r3, #4
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d0e7      	beq.n	800bc46 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	689a      	ldr	r2, [r3, #8]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f022 0207 	bic.w	r2, r2, #7
 800bc8c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6899      	ldr	r1, [r3, #8]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	430a      	orrs	r2, r1
 800bc9c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a1c      	ldr	r2, [pc, #112]	; (800bd14 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800bca4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bca8:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800bcaa:	4b1a      	ldr	r3, [pc, #104]	; (800bd14 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	4a19      	ldr	r2, [pc, #100]	; (800bd14 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800bcb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bcb4:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800bcc6:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	689a      	ldr	r2, [r3, #8]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcd6:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	689a      	ldr	r2, [r3, #8]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bce6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	22ff      	movs	r2, #255	; 0xff
 800bcee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	371c      	adds	r7, #28
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	20000000 	.word	0x20000000
 800bd10:	10624dd3 	.word	0x10624dd3
 800bd14:	40013c00 	.word	0x40013c00

0800bd18 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bd20:	2300      	movs	r3, #0
 800bd22:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	7f1b      	ldrb	r3, [r3, #28]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d101      	bne.n	800bd30 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	e047      	b.n	800bdc0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2202      	movs	r2, #2
 800bd3a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	22ca      	movs	r2, #202	; 0xca
 800bd42:	625a      	str	r2, [r3, #36]	; 0x24
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2253      	movs	r2, #83	; 0x53
 800bd4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689a      	ldr	r2, [r3, #8]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd5a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	689a      	ldr	r2, [r3, #8]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd6a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bd6c:	f7fb fa34 	bl	80071d8 <HAL_GetTick>
 800bd70:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800bd72:	e013      	b.n	800bd9c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bd74:	f7fb fa30 	bl	80071d8 <HAL_GetTick>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd82:	d90b      	bls.n	800bd9c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	22ff      	movs	r2, #255	; 0xff
 800bd8a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2203      	movs	r2, #3
 800bd90:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e011      	b.n	800bdc0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	f003 0304 	and.w	r3, r3, #4
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0e4      	beq.n	800bd74 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	22ff      	movs	r2, #255	; 0xff
 800bdb0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e07b      	b.n	800bee6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d108      	bne.n	800be08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdfe:	d009      	beq.n	800be14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	61da      	str	r2, [r3, #28]
 800be06:	e005      	b.n	800be14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be20:	b2db      	uxtb	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d106      	bne.n	800be34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7f6 ff16 	bl	8002c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2202      	movs	r2, #2
 800be38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800be5c:	431a      	orrs	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be66:	431a      	orrs	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	f003 0302 	and.w	r3, r3, #2
 800be70:	431a      	orrs	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	f003 0301 	and.w	r3, r3, #1
 800be7a:	431a      	orrs	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be84:	431a      	orrs	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	69db      	ldr	r3, [r3, #28]
 800be8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be8e:	431a      	orrs	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a1b      	ldr	r3, [r3, #32]
 800be94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be98:	ea42 0103 	orr.w	r1, r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	430a      	orrs	r2, r1
 800beaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	0c1b      	lsrs	r3, r3, #16
 800beb2:	f003 0104 	and.w	r1, r3, #4
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beba:	f003 0210 	and.w	r2, r3, #16
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	69da      	ldr	r2, [r3, #28]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bed4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b088      	sub	sp, #32
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	60b9      	str	r1, [r7, #8]
 800bef8:	603b      	str	r3, [r7, #0]
 800befa:	4613      	mov	r3, r2
 800befc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d101      	bne.n	800bf10 <HAL_SPI_Transmit+0x22>
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	e126      	b.n	800c15e <HAL_SPI_Transmit+0x270>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf18:	f7fb f95e 	bl	80071d8 <HAL_GetTick>
 800bf1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bf1e:	88fb      	ldrh	r3, [r7, #6]
 800bf20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d002      	beq.n	800bf34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bf2e:	2302      	movs	r3, #2
 800bf30:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf32:	e10b      	b.n	800c14c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <HAL_SPI_Transmit+0x52>
 800bf3a:	88fb      	ldrh	r3, [r7, #6]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d102      	bne.n	800bf46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf44:	e102      	b.n	800c14c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2203      	movs	r2, #3
 800bf4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	88fa      	ldrh	r2, [r7, #6]
 800bf5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	88fa      	ldrh	r2, [r7, #6]
 800bf64:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf8c:	d10f      	bne.n	800bfae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb8:	2b40      	cmp	r3, #64	; 0x40
 800bfba:	d007      	beq.n	800bfcc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfd4:	d14b      	bne.n	800c06e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d002      	beq.n	800bfe4 <HAL_SPI_Transmit+0xf6>
 800bfde:	8afb      	ldrh	r3, [r7, #22]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d13e      	bne.n	800c062 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe8:	881a      	ldrh	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff4:	1c9a      	adds	r2, r3, #2
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bffe:	b29b      	uxth	r3, r3
 800c000:	3b01      	subs	r3, #1
 800c002:	b29a      	uxth	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c008:	e02b      	b.n	800c062 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	f003 0302 	and.w	r3, r3, #2
 800c014:	2b02      	cmp	r3, #2
 800c016:	d112      	bne.n	800c03e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01c:	881a      	ldrh	r2, [r3, #0]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c028:	1c9a      	adds	r2, r3, #2
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c032:	b29b      	uxth	r3, r3
 800c034:	3b01      	subs	r3, #1
 800c036:	b29a      	uxth	r2, r3
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	86da      	strh	r2, [r3, #54]	; 0x36
 800c03c:	e011      	b.n	800c062 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c03e:	f7fb f8cb 	bl	80071d8 <HAL_GetTick>
 800c042:	4602      	mov	r2, r0
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d803      	bhi.n	800c056 <HAL_SPI_Transmit+0x168>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c054:	d102      	bne.n	800c05c <HAL_SPI_Transmit+0x16e>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d102      	bne.n	800c062 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c060:	e074      	b.n	800c14c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c066:	b29b      	uxth	r3, r3
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1ce      	bne.n	800c00a <HAL_SPI_Transmit+0x11c>
 800c06c:	e04c      	b.n	800c108 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d002      	beq.n	800c07c <HAL_SPI_Transmit+0x18e>
 800c076:	8afb      	ldrh	r3, [r7, #22]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d140      	bne.n	800c0fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	330c      	adds	r3, #12
 800c086:	7812      	ldrb	r2, [r2, #0]
 800c088:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c098:	b29b      	uxth	r3, r3
 800c09a:	3b01      	subs	r3, #1
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c0a2:	e02c      	b.n	800c0fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	f003 0302 	and.w	r3, r3, #2
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	d113      	bne.n	800c0da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	330c      	adds	r3, #12
 800c0bc:	7812      	ldrb	r2, [r2, #0]
 800c0be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	86da      	strh	r2, [r3, #54]	; 0x36
 800c0d8:	e011      	b.n	800c0fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0da:	f7fb f87d 	bl	80071d8 <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d803      	bhi.n	800c0f2 <HAL_SPI_Transmit+0x204>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f0:	d102      	bne.n	800c0f8 <HAL_SPI_Transmit+0x20a>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d102      	bne.n	800c0fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c0fc:	e026      	b.n	800c14c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c102:	b29b      	uxth	r3, r3
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1cd      	bne.n	800c0a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c108:	69ba      	ldr	r2, [r7, #24]
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f000 fbcb 	bl	800c8a8 <SPI_EndRxTxTransaction>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2220      	movs	r2, #32
 800c11c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10a      	bne.n	800c13c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c126:	2300      	movs	r3, #0
 800c128:	613b      	str	r3, [r7, #16]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	613b      	str	r3, [r7, #16]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	613b      	str	r3, [r7, #16]
 800c13a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	77fb      	strb	r3, [r7, #31]
 800c148:	e000      	b.n	800c14c <HAL_SPI_Transmit+0x25e>
  }

error:
 800c14a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c15c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3720      	adds	r7, #32
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b088      	sub	sp, #32
 800c16a:	af02      	add	r7, sp, #8
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	603b      	str	r3, [r7, #0]
 800c172:	4613      	mov	r3, r2
 800c174:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c182:	d112      	bne.n	800c1aa <HAL_SPI_Receive+0x44>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10e      	bne.n	800c1aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2204      	movs	r2, #4
 800c190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c194:	88fa      	ldrh	r2, [r7, #6]
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	4613      	mov	r3, r2
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	68b9      	ldr	r1, [r7, #8]
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f000 f8f1 	bl	800c388 <HAL_SPI_TransmitReceive>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	e0ea      	b.n	800c380 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d101      	bne.n	800c1b8 <HAL_SPI_Receive+0x52>
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	e0e3      	b.n	800c380 <HAL_SPI_Receive+0x21a>
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1c0:	f7fb f80a 	bl	80071d8 <HAL_GetTick>
 800c1c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d002      	beq.n	800c1d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c1d2:	2302      	movs	r3, #2
 800c1d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1d6:	e0ca      	b.n	800c36e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d002      	beq.n	800c1e4 <HAL_SPI_Receive+0x7e>
 800c1de:	88fb      	ldrh	r3, [r7, #6]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d102      	bne.n	800c1ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1e8:	e0c1      	b.n	800c36e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2204      	movs	r2, #4
 800c1ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	88fa      	ldrh	r2, [r7, #6]
 800c202:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	88fa      	ldrh	r2, [r7, #6]
 800c208:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2200      	movs	r2, #0
 800c214:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2200      	movs	r2, #0
 800c220:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c230:	d10f      	bne.n	800c252 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c240:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c250:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25c:	2b40      	cmp	r3, #64	; 0x40
 800c25e:	d007      	beq.n	800c270 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c26e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d162      	bne.n	800c33e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c278:	e02e      	b.n	800c2d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	2b01      	cmp	r3, #1
 800c286:	d115      	bne.n	800c2b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f103 020c 	add.w	r2, r3, #12
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c294:	7812      	ldrb	r2, [r2, #0]
 800c296:	b2d2      	uxtb	r2, r2
 800c298:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29e:	1c5a      	adds	r2, r3, #1
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2b2:	e011      	b.n	800c2d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2b4:	f7fa ff90 	bl	80071d8 <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d803      	bhi.n	800c2cc <HAL_SPI_Receive+0x166>
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ca:	d102      	bne.n	800c2d2 <HAL_SPI_Receive+0x16c>
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d102      	bne.n	800c2d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c2d6:	e04a      	b.n	800c36e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1cb      	bne.n	800c27a <HAL_SPI_Receive+0x114>
 800c2e2:	e031      	b.n	800c348 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f003 0301 	and.w	r3, r3, #1
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d113      	bne.n	800c31a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	68da      	ldr	r2, [r3, #12]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fc:	b292      	uxth	r2, r2
 800c2fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c304:	1c9a      	adds	r2, r3, #2
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c30e:	b29b      	uxth	r3, r3
 800c310:	3b01      	subs	r3, #1
 800c312:	b29a      	uxth	r2, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c318:	e011      	b.n	800c33e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c31a:	f7fa ff5d 	bl	80071d8 <HAL_GetTick>
 800c31e:	4602      	mov	r2, r0
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	1ad3      	subs	r3, r2, r3
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	429a      	cmp	r2, r3
 800c328:	d803      	bhi.n	800c332 <HAL_SPI_Receive+0x1cc>
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c330:	d102      	bne.n	800c338 <HAL_SPI_Receive+0x1d2>
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d102      	bne.n	800c33e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800c338:	2303      	movs	r3, #3
 800c33a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c33c:	e017      	b.n	800c36e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c342:	b29b      	uxth	r3, r3
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1cd      	bne.n	800c2e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c348:	693a      	ldr	r2, [r7, #16]
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f000 fa45 	bl	800c7dc <SPI_EndRxTransaction>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2220      	movs	r2, #32
 800c35c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	75fb      	strb	r3, [r7, #23]
 800c36a:	e000      	b.n	800c36e <HAL_SPI_Receive+0x208>
  }

error :
 800c36c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2201      	movs	r2, #1
 800c372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2200      	movs	r2, #0
 800c37a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08c      	sub	sp, #48	; 0x30
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c396:	2301      	movs	r3, #1
 800c398:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d101      	bne.n	800c3ae <HAL_SPI_TransmitReceive+0x26>
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	e18a      	b.n	800c6c4 <HAL_SPI_TransmitReceive+0x33c>
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3b6:	f7fa ff0f 	bl	80071d8 <HAL_GetTick>
 800c3ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c3cc:	887b      	ldrh	r3, [r7, #2]
 800c3ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c3d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d00f      	beq.n	800c3f8 <HAL_SPI_TransmitReceive+0x70>
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3de:	d107      	bne.n	800c3f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d103      	bne.n	800c3f0 <HAL_SPI_TransmitReceive+0x68>
 800c3e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c3ec:	2b04      	cmp	r3, #4
 800c3ee:	d003      	beq.n	800c3f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c3f0:	2302      	movs	r3, #2
 800c3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c3f6:	e15b      	b.n	800c6b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d005      	beq.n	800c40a <HAL_SPI_TransmitReceive+0x82>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <HAL_SPI_TransmitReceive+0x82>
 800c404:	887b      	ldrh	r3, [r7, #2]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d103      	bne.n	800c412 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c410:	e14e      	b.n	800c6b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b04      	cmp	r3, #4
 800c41c:	d003      	beq.n	800c426 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2205      	movs	r2, #5
 800c422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	887a      	ldrh	r2, [r7, #2]
 800c436:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	887a      	ldrh	r2, [r7, #2]
 800c43c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	68ba      	ldr	r2, [r7, #8]
 800c442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	887a      	ldrh	r2, [r7, #2]
 800c448:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	887a      	ldrh	r2, [r7, #2]
 800c44e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c466:	2b40      	cmp	r3, #64	; 0x40
 800c468:	d007      	beq.n	800c47a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c478:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c482:	d178      	bne.n	800c576 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <HAL_SPI_TransmitReceive+0x10a>
 800c48c:	8b7b      	ldrh	r3, [r7, #26]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d166      	bne.n	800c560 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c496:	881a      	ldrh	r2, [r3, #0]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a2:	1c9a      	adds	r2, r3, #2
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c4b6:	e053      	b.n	800c560 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	f003 0302 	and.w	r3, r3, #2
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d11b      	bne.n	800c4fe <HAL_SPI_TransmitReceive+0x176>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d016      	beq.n	800c4fe <HAL_SPI_TransmitReceive+0x176>
 800c4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d113      	bne.n	800c4fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4da:	881a      	ldrh	r2, [r3, #0]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e6:	1c9a      	adds	r2, r3, #2
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	f003 0301 	and.w	r3, r3, #1
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d119      	bne.n	800c540 <HAL_SPI_TransmitReceive+0x1b8>
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c510:	b29b      	uxth	r3, r3
 800c512:	2b00      	cmp	r3, #0
 800c514:	d014      	beq.n	800c540 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68da      	ldr	r2, [r3, #12]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c520:	b292      	uxth	r2, r2
 800c522:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c528:	1c9a      	adds	r2, r3, #2
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c532:	b29b      	uxth	r3, r3
 800c534:	3b01      	subs	r3, #1
 800c536:	b29a      	uxth	r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c53c:	2301      	movs	r3, #1
 800c53e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c540:	f7fa fe4a 	bl	80071d8 <HAL_GetTick>
 800c544:	4602      	mov	r2, r0
 800c546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d807      	bhi.n	800c560 <HAL_SPI_TransmitReceive+0x1d8>
 800c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c556:	d003      	beq.n	800c560 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c558:	2303      	movs	r3, #3
 800c55a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c55e:	e0a7      	b.n	800c6b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c564:	b29b      	uxth	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1a6      	bne.n	800c4b8 <HAL_SPI_TransmitReceive+0x130>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c56e:	b29b      	uxth	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	d1a1      	bne.n	800c4b8 <HAL_SPI_TransmitReceive+0x130>
 800c574:	e07c      	b.n	800c670 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <HAL_SPI_TransmitReceive+0x1fc>
 800c57e:	8b7b      	ldrh	r3, [r7, #26]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d16b      	bne.n	800c65c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	330c      	adds	r3, #12
 800c58e:	7812      	ldrb	r2, [r2, #0]
 800c590:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c5aa:	e057      	b.n	800c65c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	f003 0302 	and.w	r3, r3, #2
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d11c      	bne.n	800c5f4 <HAL_SPI_TransmitReceive+0x26c>
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d017      	beq.n	800c5f4 <HAL_SPI_TransmitReceive+0x26c>
 800c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d114      	bne.n	800c5f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	330c      	adds	r3, #12
 800c5d4:	7812      	ldrb	r2, [r2, #0]
 800c5d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	f003 0301 	and.w	r3, r3, #1
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d119      	bne.n	800c636 <HAL_SPI_TransmitReceive+0x2ae>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c606:	b29b      	uxth	r3, r3
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d014      	beq.n	800c636 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	68da      	ldr	r2, [r3, #12]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c616:	b2d2      	uxtb	r2, r2
 800c618:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c628:	b29b      	uxth	r3, r3
 800c62a:	3b01      	subs	r3, #1
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c632:	2301      	movs	r3, #1
 800c634:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c636:	f7fa fdcf 	bl	80071d8 <HAL_GetTick>
 800c63a:	4602      	mov	r2, r0
 800c63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c642:	429a      	cmp	r2, r3
 800c644:	d803      	bhi.n	800c64e <HAL_SPI_TransmitReceive+0x2c6>
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64c:	d102      	bne.n	800c654 <HAL_SPI_TransmitReceive+0x2cc>
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	2b00      	cmp	r3, #0
 800c652:	d103      	bne.n	800c65c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c65a:	e029      	b.n	800c6b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c660:	b29b      	uxth	r3, r3
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1a2      	bne.n	800c5ac <HAL_SPI_TransmitReceive+0x224>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d19d      	bne.n	800c5ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c672:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f000 f917 	bl	800c8a8 <SPI_EndRxTxTransaction>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d006      	beq.n	800c68e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2220      	movs	r2, #32
 800c68a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c68c:	e010      	b.n	800c6b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10b      	bne.n	800c6ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c696:	2300      	movs	r3, #0
 800c698:	617b      	str	r3, [r7, #20]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	617b      	str	r3, [r7, #20]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	e000      	b.n	800c6b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c6ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c6c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3730      	adds	r7, #48	; 0x30
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b088      	sub	sp, #32
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	603b      	str	r3, [r7, #0]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c6dc:	f7fa fd7c 	bl	80071d8 <HAL_GetTick>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	1a9b      	subs	r3, r3, r2
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c6ec:	f7fa fd74 	bl	80071d8 <HAL_GetTick>
 800c6f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c6f2:	4b39      	ldr	r3, [pc, #228]	; (800c7d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	015b      	lsls	r3, r3, #5
 800c6f8:	0d1b      	lsrs	r3, r3, #20
 800c6fa:	69fa      	ldr	r2, [r7, #28]
 800c6fc:	fb02 f303 	mul.w	r3, r2, r3
 800c700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c702:	e054      	b.n	800c7ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70a:	d050      	beq.n	800c7ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c70c:	f7fa fd64 	bl	80071d8 <HAL_GetTick>
 800c710:	4602      	mov	r2, r0
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	69fa      	ldr	r2, [r7, #28]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d902      	bls.n	800c722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d13d      	bne.n	800c79e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c73a:	d111      	bne.n	800c760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c744:	d004      	beq.n	800c750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c74e:	d107      	bne.n	800c760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c75e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c768:	d10f      	bne.n	800c78a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c778:	601a      	str	r2, [r3, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2201      	movs	r2, #1
 800c78e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c79a:	2303      	movs	r3, #3
 800c79c:	e017      	b.n	800c7ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	689a      	ldr	r2, [r3, #8]
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	bf0c      	ite	eq
 800c7be:	2301      	moveq	r3, #1
 800c7c0:	2300      	movne	r3, #0
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	79fb      	ldrb	r3, [r7, #7]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d19b      	bne.n	800c704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3720      	adds	r7, #32
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	20000000 	.word	0x20000000

0800c7dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af02      	add	r7, sp, #8
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7f0:	d111      	bne.n	800c816 <SPI_EndRxTransaction+0x3a>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7fa:	d004      	beq.n	800c806 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c804:	d107      	bne.n	800c816 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c814:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c81e:	d12a      	bne.n	800c876 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c828:	d012      	beq.n	800c850 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	2200      	movs	r2, #0
 800c832:	2180      	movs	r1, #128	; 0x80
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f7ff ff49 	bl	800c6cc <SPI_WaitFlagStateUntilTimeout>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d02d      	beq.n	800c89c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c844:	f043 0220 	orr.w	r2, r3, #32
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c84c:	2303      	movs	r3, #3
 800c84e:	e026      	b.n	800c89e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	2200      	movs	r2, #0
 800c858:	2101      	movs	r1, #1
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f7ff ff36 	bl	800c6cc <SPI_WaitFlagStateUntilTimeout>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d01a      	beq.n	800c89c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c86a:	f043 0220 	orr.w	r2, r3, #32
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c872:	2303      	movs	r3, #3
 800c874:	e013      	b.n	800c89e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	2200      	movs	r2, #0
 800c87e:	2101      	movs	r1, #1
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f7ff ff23 	bl	800c6cc <SPI_WaitFlagStateUntilTimeout>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d007      	beq.n	800c89c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c890:	f043 0220 	orr.w	r2, r3, #32
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c898:	2303      	movs	r3, #3
 800c89a:	e000      	b.n	800c89e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
	...

0800c8a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b088      	sub	sp, #32
 800c8ac:	af02      	add	r7, sp, #8
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c8b4:	4b1b      	ldr	r3, [pc, #108]	; (800c924 <SPI_EndRxTxTransaction+0x7c>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a1b      	ldr	r2, [pc, #108]	; (800c928 <SPI_EndRxTxTransaction+0x80>)
 800c8ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c8be:	0d5b      	lsrs	r3, r3, #21
 800c8c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8c4:	fb02 f303 	mul.w	r3, r2, r3
 800c8c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8d2:	d112      	bne.n	800c8fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2180      	movs	r1, #128	; 0x80
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f7ff fef4 	bl	800c6cc <SPI_WaitFlagStateUntilTimeout>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d016      	beq.n	800c918 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ee:	f043 0220 	orr.w	r2, r3, #32
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	e00f      	b.n	800c91a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00a      	beq.n	800c916 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	3b01      	subs	r3, #1
 800c904:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c910:	2b80      	cmp	r3, #128	; 0x80
 800c912:	d0f2      	beq.n	800c8fa <SPI_EndRxTxTransaction+0x52>
 800c914:	e000      	b.n	800c918 <SPI_EndRxTxTransaction+0x70>
        break;
 800c916:	bf00      	nop
  }

  return HAL_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3718      	adds	r7, #24
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	20000000 	.word	0x20000000
 800c928:	165e9f81 	.word	0x165e9f81

0800c92c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d101      	bne.n	800c93e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c93a:	2301      	movs	r3, #1
 800c93c:	e041      	b.n	800c9c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c944:	b2db      	uxtb	r3, r3
 800c946:	2b00      	cmp	r3, #0
 800c948:	d106      	bne.n	800c958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7f6 fa3a 	bl	8002dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2202      	movs	r2, #2
 800c95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	3304      	adds	r3, #4
 800c968:	4619      	mov	r1, r3
 800c96a:	4610      	mov	r0, r2
 800c96c:	f000 fcea 	bl	800d344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d001      	beq.n	800c9e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e04e      	b.n	800ca82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2202      	movs	r2, #2
 800c9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68da      	ldr	r2, [r3, #12]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f042 0201 	orr.w	r2, r2, #1
 800c9fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a23      	ldr	r2, [pc, #140]	; (800ca90 <HAL_TIM_Base_Start_IT+0xc4>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d022      	beq.n	800ca4c <HAL_TIM_Base_Start_IT+0x80>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca0e:	d01d      	beq.n	800ca4c <HAL_TIM_Base_Start_IT+0x80>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a1f      	ldr	r2, [pc, #124]	; (800ca94 <HAL_TIM_Base_Start_IT+0xc8>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d018      	beq.n	800ca4c <HAL_TIM_Base_Start_IT+0x80>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a1e      	ldr	r2, [pc, #120]	; (800ca98 <HAL_TIM_Base_Start_IT+0xcc>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d013      	beq.n	800ca4c <HAL_TIM_Base_Start_IT+0x80>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a1c      	ldr	r2, [pc, #112]	; (800ca9c <HAL_TIM_Base_Start_IT+0xd0>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d00e      	beq.n	800ca4c <HAL_TIM_Base_Start_IT+0x80>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a1b      	ldr	r2, [pc, #108]	; (800caa0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d009      	beq.n	800ca4c <HAL_TIM_Base_Start_IT+0x80>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a19      	ldr	r2, [pc, #100]	; (800caa4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d004      	beq.n	800ca4c <HAL_TIM_Base_Start_IT+0x80>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a18      	ldr	r2, [pc, #96]	; (800caa8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d111      	bne.n	800ca70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f003 0307 	and.w	r3, r3, #7
 800ca56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2b06      	cmp	r3, #6
 800ca5c:	d010      	beq.n	800ca80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f042 0201 	orr.w	r2, r2, #1
 800ca6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca6e:	e007      	b.n	800ca80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f042 0201 	orr.w	r2, r2, #1
 800ca7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3714      	adds	r7, #20
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	40010000 	.word	0x40010000
 800ca94:	40000400 	.word	0x40000400
 800ca98:	40000800 	.word	0x40000800
 800ca9c:	40000c00 	.word	0x40000c00
 800caa0:	40010400 	.word	0x40010400
 800caa4:	40014000 	.word	0x40014000
 800caa8:	40001800 	.word	0x40001800

0800caac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	e041      	b.n	800cb42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d106      	bne.n	800cad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 f839 	bl	800cb4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2202      	movs	r2, #2
 800cadc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3304      	adds	r3, #4
 800cae8:	4619      	mov	r1, r3
 800caea:	4610      	mov	r0, r2
 800caec:	f000 fc2a 	bl	800d344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2201      	movs	r2, #1
 800cb24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cb4a:	b480      	push	{r7}
 800cb4c:	b083      	sub	sp, #12
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cb52:	bf00      	nop
 800cb54:	370c      	adds	r7, #12
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
	...

0800cb60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d109      	bne.n	800cb84 <HAL_TIM_PWM_Start+0x24>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	bf14      	ite	ne
 800cb7c:	2301      	movne	r3, #1
 800cb7e:	2300      	moveq	r3, #0
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	e022      	b.n	800cbca <HAL_TIM_PWM_Start+0x6a>
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2b04      	cmp	r3, #4
 800cb88:	d109      	bne.n	800cb9e <HAL_TIM_PWM_Start+0x3e>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	bf14      	ite	ne
 800cb96:	2301      	movne	r3, #1
 800cb98:	2300      	moveq	r3, #0
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	e015      	b.n	800cbca <HAL_TIM_PWM_Start+0x6a>
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2b08      	cmp	r3, #8
 800cba2:	d109      	bne.n	800cbb8 <HAL_TIM_PWM_Start+0x58>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	bf14      	ite	ne
 800cbb0:	2301      	movne	r3, #1
 800cbb2:	2300      	moveq	r3, #0
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	e008      	b.n	800cbca <HAL_TIM_PWM_Start+0x6a>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	bf14      	ite	ne
 800cbc4:	2301      	movne	r3, #1
 800cbc6:	2300      	moveq	r3, #0
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e07c      	b.n	800cccc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d104      	bne.n	800cbe2 <HAL_TIM_PWM_Start+0x82>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2202      	movs	r2, #2
 800cbdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cbe0:	e013      	b.n	800cc0a <HAL_TIM_PWM_Start+0xaa>
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b04      	cmp	r3, #4
 800cbe6:	d104      	bne.n	800cbf2 <HAL_TIM_PWM_Start+0x92>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2202      	movs	r2, #2
 800cbec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cbf0:	e00b      	b.n	800cc0a <HAL_TIM_PWM_Start+0xaa>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b08      	cmp	r3, #8
 800cbf6:	d104      	bne.n	800cc02 <HAL_TIM_PWM_Start+0xa2>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2202      	movs	r2, #2
 800cbfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc00:	e003      	b.n	800cc0a <HAL_TIM_PWM_Start+0xaa>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2202      	movs	r2, #2
 800cc06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	6839      	ldr	r1, [r7, #0]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f000 fe80 	bl	800d918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a2d      	ldr	r2, [pc, #180]	; (800ccd4 <HAL_TIM_PWM_Start+0x174>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d004      	beq.n	800cc2c <HAL_TIM_PWM_Start+0xcc>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a2c      	ldr	r2, [pc, #176]	; (800ccd8 <HAL_TIM_PWM_Start+0x178>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d101      	bne.n	800cc30 <HAL_TIM_PWM_Start+0xd0>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e000      	b.n	800cc32 <HAL_TIM_PWM_Start+0xd2>
 800cc30:	2300      	movs	r3, #0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d007      	beq.n	800cc46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a22      	ldr	r2, [pc, #136]	; (800ccd4 <HAL_TIM_PWM_Start+0x174>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d022      	beq.n	800cc96 <HAL_TIM_PWM_Start+0x136>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc58:	d01d      	beq.n	800cc96 <HAL_TIM_PWM_Start+0x136>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a1f      	ldr	r2, [pc, #124]	; (800ccdc <HAL_TIM_PWM_Start+0x17c>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d018      	beq.n	800cc96 <HAL_TIM_PWM_Start+0x136>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a1d      	ldr	r2, [pc, #116]	; (800cce0 <HAL_TIM_PWM_Start+0x180>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d013      	beq.n	800cc96 <HAL_TIM_PWM_Start+0x136>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a1c      	ldr	r2, [pc, #112]	; (800cce4 <HAL_TIM_PWM_Start+0x184>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d00e      	beq.n	800cc96 <HAL_TIM_PWM_Start+0x136>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a16      	ldr	r2, [pc, #88]	; (800ccd8 <HAL_TIM_PWM_Start+0x178>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d009      	beq.n	800cc96 <HAL_TIM_PWM_Start+0x136>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a18      	ldr	r2, [pc, #96]	; (800cce8 <HAL_TIM_PWM_Start+0x188>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d004      	beq.n	800cc96 <HAL_TIM_PWM_Start+0x136>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a16      	ldr	r2, [pc, #88]	; (800ccec <HAL_TIM_PWM_Start+0x18c>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d111      	bne.n	800ccba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	f003 0307 	and.w	r3, r3, #7
 800cca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2b06      	cmp	r3, #6
 800cca6:	d010      	beq.n	800ccca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f042 0201 	orr.w	r2, r2, #1
 800ccb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccb8:	e007      	b.n	800ccca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f042 0201 	orr.w	r2, r2, #1
 800ccc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	40010000 	.word	0x40010000
 800ccd8:	40010400 	.word	0x40010400
 800ccdc:	40000400 	.word	0x40000400
 800cce0:	40000800 	.word	0x40000800
 800cce4:	40000c00 	.word	0x40000c00
 800cce8:	40014000 	.word	0x40014000
 800ccec:	40001800 	.word	0x40001800

0800ccf0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	6839      	ldr	r1, [r7, #0]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 fe08 	bl	800d918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a2e      	ldr	r2, [pc, #184]	; (800cdc8 <HAL_TIM_PWM_Stop+0xd8>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d004      	beq.n	800cd1c <HAL_TIM_PWM_Stop+0x2c>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a2d      	ldr	r2, [pc, #180]	; (800cdcc <HAL_TIM_PWM_Stop+0xdc>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d101      	bne.n	800cd20 <HAL_TIM_PWM_Stop+0x30>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e000      	b.n	800cd22 <HAL_TIM_PWM_Stop+0x32>
 800cd20:	2300      	movs	r3, #0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d017      	beq.n	800cd56 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	6a1a      	ldr	r2, [r3, #32]
 800cd2c:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd30:	4013      	ands	r3, r2
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d10f      	bne.n	800cd56 <HAL_TIM_PWM_Stop+0x66>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	6a1a      	ldr	r2, [r3, #32]
 800cd3c:	f240 4344 	movw	r3, #1092	; 0x444
 800cd40:	4013      	ands	r3, r2
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d107      	bne.n	800cd56 <HAL_TIM_PWM_Stop+0x66>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6a1a      	ldr	r2, [r3, #32]
 800cd5c:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd60:	4013      	ands	r3, r2
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d10f      	bne.n	800cd86 <HAL_TIM_PWM_Stop+0x96>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6a1a      	ldr	r2, [r3, #32]
 800cd6c:	f240 4344 	movw	r3, #1092	; 0x444
 800cd70:	4013      	ands	r3, r2
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d107      	bne.n	800cd86 <HAL_TIM_PWM_Stop+0x96>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f022 0201 	bic.w	r2, r2, #1
 800cd84:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d104      	bne.n	800cd96 <HAL_TIM_PWM_Stop+0xa6>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd94:	e013      	b.n	800cdbe <HAL_TIM_PWM_Stop+0xce>
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	2b04      	cmp	r3, #4
 800cd9a:	d104      	bne.n	800cda6 <HAL_TIM_PWM_Stop+0xb6>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cda4:	e00b      	b.n	800cdbe <HAL_TIM_PWM_Stop+0xce>
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2b08      	cmp	r3, #8
 800cdaa:	d104      	bne.n	800cdb6 <HAL_TIM_PWM_Stop+0xc6>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cdb4:	e003      	b.n	800cdbe <HAL_TIM_PWM_Stop+0xce>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800cdbe:	2300      	movs	r3, #0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	40010000 	.word	0x40010000
 800cdcc:	40010400 	.word	0x40010400

0800cdd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	f003 0302 	and.w	r3, r3, #2
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	d122      	bne.n	800ce2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	f003 0302 	and.w	r3, r3, #2
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d11b      	bne.n	800ce2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f06f 0202 	mvn.w	r2, #2
 800cdfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2201      	movs	r2, #1
 800ce02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	f003 0303 	and.w	r3, r3, #3
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d003      	beq.n	800ce1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fa77 	bl	800d306 <HAL_TIM_IC_CaptureCallback>
 800ce18:	e005      	b.n	800ce26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 fa69 	bl	800d2f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 fa7a 	bl	800d31a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	f003 0304 	and.w	r3, r3, #4
 800ce36:	2b04      	cmp	r3, #4
 800ce38:	d122      	bne.n	800ce80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	f003 0304 	and.w	r3, r3, #4
 800ce44:	2b04      	cmp	r3, #4
 800ce46:	d11b      	bne.n	800ce80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f06f 0204 	mvn.w	r2, #4
 800ce50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2202      	movs	r2, #2
 800ce56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	699b      	ldr	r3, [r3, #24]
 800ce5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d003      	beq.n	800ce6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 fa4d 	bl	800d306 <HAL_TIM_IC_CaptureCallback>
 800ce6c:	e005      	b.n	800ce7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 fa3f 	bl	800d2f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 fa50 	bl	800d31a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	f003 0308 	and.w	r3, r3, #8
 800ce8a:	2b08      	cmp	r3, #8
 800ce8c:	d122      	bne.n	800ced4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	f003 0308 	and.w	r3, r3, #8
 800ce98:	2b08      	cmp	r3, #8
 800ce9a:	d11b      	bne.n	800ced4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f06f 0208 	mvn.w	r2, #8
 800cea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2204      	movs	r2, #4
 800ceaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	69db      	ldr	r3, [r3, #28]
 800ceb2:	f003 0303 	and.w	r3, r3, #3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d003      	beq.n	800cec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 fa23 	bl	800d306 <HAL_TIM_IC_CaptureCallback>
 800cec0:	e005      	b.n	800cece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fa15 	bl	800d2f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 fa26 	bl	800d31a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	f003 0310 	and.w	r3, r3, #16
 800cede:	2b10      	cmp	r3, #16
 800cee0:	d122      	bne.n	800cf28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	f003 0310 	and.w	r3, r3, #16
 800ceec:	2b10      	cmp	r3, #16
 800ceee:	d11b      	bne.n	800cf28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f06f 0210 	mvn.w	r2, #16
 800cef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2208      	movs	r2, #8
 800cefe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	69db      	ldr	r3, [r3, #28]
 800cf06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 f9f9 	bl	800d306 <HAL_TIM_IC_CaptureCallback>
 800cf14:	e005      	b.n	800cf22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f9eb 	bl	800d2f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f000 f9fc 	bl	800d31a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	691b      	ldr	r3, [r3, #16]
 800cf2e:	f003 0301 	and.w	r3, r3, #1
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d10e      	bne.n	800cf54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	f003 0301 	and.w	r3, r3, #1
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d107      	bne.n	800cf54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f06f 0201 	mvn.w	r2, #1
 800cf4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7f5 fd2a 	bl	80029a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf5e:	2b80      	cmp	r3, #128	; 0x80
 800cf60:	d10e      	bne.n	800cf80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf6c:	2b80      	cmp	r3, #128	; 0x80
 800cf6e:	d107      	bne.n	800cf80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cf78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fd78 	bl	800da70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf8a:	2b40      	cmp	r3, #64	; 0x40
 800cf8c:	d10e      	bne.n	800cfac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf98:	2b40      	cmp	r3, #64	; 0x40
 800cf9a:	d107      	bne.n	800cfac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cfa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f9c1 	bl	800d32e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	691b      	ldr	r3, [r3, #16]
 800cfb2:	f003 0320 	and.w	r3, r3, #32
 800cfb6:	2b20      	cmp	r3, #32
 800cfb8:	d10e      	bne.n	800cfd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	f003 0320 	and.w	r3, r3, #32
 800cfc4:	2b20      	cmp	r3, #32
 800cfc6:	d107      	bne.n	800cfd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f06f 0220 	mvn.w	r2, #32
 800cfd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 fd42 	bl	800da5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cfd8:	bf00      	nop
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cfec:	2300      	movs	r3, #0
 800cfee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d101      	bne.n	800cffe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cffa:	2302      	movs	r3, #2
 800cffc:	e0ae      	b.n	800d15c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b0c      	cmp	r3, #12
 800d00a:	f200 809f 	bhi.w	800d14c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d00e:	a201      	add	r2, pc, #4	; (adr r2, 800d014 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d014:	0800d049 	.word	0x0800d049
 800d018:	0800d14d 	.word	0x0800d14d
 800d01c:	0800d14d 	.word	0x0800d14d
 800d020:	0800d14d 	.word	0x0800d14d
 800d024:	0800d089 	.word	0x0800d089
 800d028:	0800d14d 	.word	0x0800d14d
 800d02c:	0800d14d 	.word	0x0800d14d
 800d030:	0800d14d 	.word	0x0800d14d
 800d034:	0800d0cb 	.word	0x0800d0cb
 800d038:	0800d14d 	.word	0x0800d14d
 800d03c:	0800d14d 	.word	0x0800d14d
 800d040:	0800d14d 	.word	0x0800d14d
 800d044:	0800d10b 	.word	0x0800d10b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68b9      	ldr	r1, [r7, #8]
 800d04e:	4618      	mov	r0, r3
 800d050:	f000 fa18 	bl	800d484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	699a      	ldr	r2, [r3, #24]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f042 0208 	orr.w	r2, r2, #8
 800d062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	699a      	ldr	r2, [r3, #24]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f022 0204 	bic.w	r2, r2, #4
 800d072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6999      	ldr	r1, [r3, #24]
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	691a      	ldr	r2, [r3, #16]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	430a      	orrs	r2, r1
 800d084:	619a      	str	r2, [r3, #24]
      break;
 800d086:	e064      	b.n	800d152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	68b9      	ldr	r1, [r7, #8]
 800d08e:	4618      	mov	r0, r3
 800d090:	f000 fa68 	bl	800d564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	699a      	ldr	r2, [r3, #24]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	699a      	ldr	r2, [r3, #24]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d0b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	6999      	ldr	r1, [r3, #24]
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	021a      	lsls	r2, r3, #8
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	430a      	orrs	r2, r1
 800d0c6:	619a      	str	r2, [r3, #24]
      break;
 800d0c8:	e043      	b.n	800d152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	68b9      	ldr	r1, [r7, #8]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f000 fabd 	bl	800d650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	69da      	ldr	r2, [r3, #28]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f042 0208 	orr.w	r2, r2, #8
 800d0e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	69da      	ldr	r2, [r3, #28]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f022 0204 	bic.w	r2, r2, #4
 800d0f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	69d9      	ldr	r1, [r3, #28]
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	691a      	ldr	r2, [r3, #16]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	430a      	orrs	r2, r1
 800d106:	61da      	str	r2, [r3, #28]
      break;
 800d108:	e023      	b.n	800d152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68b9      	ldr	r1, [r7, #8]
 800d110:	4618      	mov	r0, r3
 800d112:	f000 fb11 	bl	800d738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	69da      	ldr	r2, [r3, #28]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	69da      	ldr	r2, [r3, #28]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	69d9      	ldr	r1, [r3, #28]
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	021a      	lsls	r2, r3, #8
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	430a      	orrs	r2, r1
 800d148:	61da      	str	r2, [r3, #28]
      break;
 800d14a:	e002      	b.n	800d152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	75fb      	strb	r3, [r7, #23]
      break;
 800d150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3718      	adds	r7, #24
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d16e:	2300      	movs	r3, #0
 800d170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d101      	bne.n	800d180 <HAL_TIM_ConfigClockSource+0x1c>
 800d17c:	2302      	movs	r3, #2
 800d17e:	e0b4      	b.n	800d2ea <HAL_TIM_ConfigClockSource+0x186>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2202      	movs	r2, #2
 800d18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d19e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d1a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1b8:	d03e      	beq.n	800d238 <HAL_TIM_ConfigClockSource+0xd4>
 800d1ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1be:	f200 8087 	bhi.w	800d2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d1c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1c6:	f000 8086 	beq.w	800d2d6 <HAL_TIM_ConfigClockSource+0x172>
 800d1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1ce:	d87f      	bhi.n	800d2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d1d0:	2b70      	cmp	r3, #112	; 0x70
 800d1d2:	d01a      	beq.n	800d20a <HAL_TIM_ConfigClockSource+0xa6>
 800d1d4:	2b70      	cmp	r3, #112	; 0x70
 800d1d6:	d87b      	bhi.n	800d2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d1d8:	2b60      	cmp	r3, #96	; 0x60
 800d1da:	d050      	beq.n	800d27e <HAL_TIM_ConfigClockSource+0x11a>
 800d1dc:	2b60      	cmp	r3, #96	; 0x60
 800d1de:	d877      	bhi.n	800d2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d1e0:	2b50      	cmp	r3, #80	; 0x50
 800d1e2:	d03c      	beq.n	800d25e <HAL_TIM_ConfigClockSource+0xfa>
 800d1e4:	2b50      	cmp	r3, #80	; 0x50
 800d1e6:	d873      	bhi.n	800d2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d1e8:	2b40      	cmp	r3, #64	; 0x40
 800d1ea:	d058      	beq.n	800d29e <HAL_TIM_ConfigClockSource+0x13a>
 800d1ec:	2b40      	cmp	r3, #64	; 0x40
 800d1ee:	d86f      	bhi.n	800d2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d1f0:	2b30      	cmp	r3, #48	; 0x30
 800d1f2:	d064      	beq.n	800d2be <HAL_TIM_ConfigClockSource+0x15a>
 800d1f4:	2b30      	cmp	r3, #48	; 0x30
 800d1f6:	d86b      	bhi.n	800d2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d1f8:	2b20      	cmp	r3, #32
 800d1fa:	d060      	beq.n	800d2be <HAL_TIM_ConfigClockSource+0x15a>
 800d1fc:	2b20      	cmp	r3, #32
 800d1fe:	d867      	bhi.n	800d2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d200:	2b00      	cmp	r3, #0
 800d202:	d05c      	beq.n	800d2be <HAL_TIM_ConfigClockSource+0x15a>
 800d204:	2b10      	cmp	r3, #16
 800d206:	d05a      	beq.n	800d2be <HAL_TIM_ConfigClockSource+0x15a>
 800d208:	e062      	b.n	800d2d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6818      	ldr	r0, [r3, #0]
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	6899      	ldr	r1, [r3, #8]
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	f000 fb5d 	bl	800d8d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d22c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	609a      	str	r2, [r3, #8]
      break;
 800d236:	e04f      	b.n	800d2d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6818      	ldr	r0, [r3, #0]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	6899      	ldr	r1, [r3, #8]
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	f000 fb46 	bl	800d8d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	689a      	ldr	r2, [r3, #8]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d25a:	609a      	str	r2, [r3, #8]
      break;
 800d25c:	e03c      	b.n	800d2d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6818      	ldr	r0, [r3, #0]
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	6859      	ldr	r1, [r3, #4]
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	461a      	mov	r2, r3
 800d26c:	f000 faba 	bl	800d7e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2150      	movs	r1, #80	; 0x50
 800d276:	4618      	mov	r0, r3
 800d278:	f000 fb13 	bl	800d8a2 <TIM_ITRx_SetConfig>
      break;
 800d27c:	e02c      	b.n	800d2d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6818      	ldr	r0, [r3, #0]
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	6859      	ldr	r1, [r3, #4]
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	461a      	mov	r2, r3
 800d28c:	f000 fad9 	bl	800d842 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2160      	movs	r1, #96	; 0x60
 800d296:	4618      	mov	r0, r3
 800d298:	f000 fb03 	bl	800d8a2 <TIM_ITRx_SetConfig>
      break;
 800d29c:	e01c      	b.n	800d2d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6818      	ldr	r0, [r3, #0]
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	6859      	ldr	r1, [r3, #4]
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	f000 fa9a 	bl	800d7e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2140      	movs	r1, #64	; 0x40
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 faf3 	bl	800d8a2 <TIM_ITRx_SetConfig>
      break;
 800d2bc:	e00c      	b.n	800d2d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	f000 faea 	bl	800d8a2 <TIM_ITRx_SetConfig>
      break;
 800d2ce:	e003      	b.n	800d2d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d2d4:	e000      	b.n	800d2d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d2d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d2f2:	b480      	push	{r7}
 800d2f4:	b083      	sub	sp, #12
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d2fa:	bf00      	nop
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr

0800d306 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d306:	b480      	push	{r7}
 800d308:	b083      	sub	sp, #12
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d30e:	bf00      	nop
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d322:	bf00      	nop
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d336:	bf00      	nop
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
	...

0800d344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4a40      	ldr	r2, [pc, #256]	; (800d458 <TIM_Base_SetConfig+0x114>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d013      	beq.n	800d384 <TIM_Base_SetConfig+0x40>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d362:	d00f      	beq.n	800d384 <TIM_Base_SetConfig+0x40>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a3d      	ldr	r2, [pc, #244]	; (800d45c <TIM_Base_SetConfig+0x118>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d00b      	beq.n	800d384 <TIM_Base_SetConfig+0x40>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a3c      	ldr	r2, [pc, #240]	; (800d460 <TIM_Base_SetConfig+0x11c>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d007      	beq.n	800d384 <TIM_Base_SetConfig+0x40>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a3b      	ldr	r2, [pc, #236]	; (800d464 <TIM_Base_SetConfig+0x120>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d003      	beq.n	800d384 <TIM_Base_SetConfig+0x40>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a3a      	ldr	r2, [pc, #232]	; (800d468 <TIM_Base_SetConfig+0x124>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d108      	bne.n	800d396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d38a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	4313      	orrs	r3, r2
 800d394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4a2f      	ldr	r2, [pc, #188]	; (800d458 <TIM_Base_SetConfig+0x114>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d02b      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3a4:	d027      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a2c      	ldr	r2, [pc, #176]	; (800d45c <TIM_Base_SetConfig+0x118>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d023      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4a2b      	ldr	r2, [pc, #172]	; (800d460 <TIM_Base_SetConfig+0x11c>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d01f      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4a2a      	ldr	r2, [pc, #168]	; (800d464 <TIM_Base_SetConfig+0x120>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d01b      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4a29      	ldr	r2, [pc, #164]	; (800d468 <TIM_Base_SetConfig+0x124>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d017      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4a28      	ldr	r2, [pc, #160]	; (800d46c <TIM_Base_SetConfig+0x128>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d013      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4a27      	ldr	r2, [pc, #156]	; (800d470 <TIM_Base_SetConfig+0x12c>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d00f      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	4a26      	ldr	r2, [pc, #152]	; (800d474 <TIM_Base_SetConfig+0x130>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d00b      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	4a25      	ldr	r2, [pc, #148]	; (800d478 <TIM_Base_SetConfig+0x134>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d007      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4a24      	ldr	r2, [pc, #144]	; (800d47c <TIM_Base_SetConfig+0x138>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d003      	beq.n	800d3f6 <TIM_Base_SetConfig+0xb2>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	4a23      	ldr	r2, [pc, #140]	; (800d480 <TIM_Base_SetConfig+0x13c>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d108      	bne.n	800d408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	4313      	orrs	r3, r2
 800d406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	4313      	orrs	r3, r2
 800d414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	689a      	ldr	r2, [r3, #8]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a0a      	ldr	r2, [pc, #40]	; (800d458 <TIM_Base_SetConfig+0x114>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d003      	beq.n	800d43c <TIM_Base_SetConfig+0xf8>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a0c      	ldr	r2, [pc, #48]	; (800d468 <TIM_Base_SetConfig+0x124>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d103      	bne.n	800d444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	691a      	ldr	r2, [r3, #16]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2201      	movs	r2, #1
 800d448:	615a      	str	r2, [r3, #20]
}
 800d44a:	bf00      	nop
 800d44c:	3714      	adds	r7, #20
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	40010000 	.word	0x40010000
 800d45c:	40000400 	.word	0x40000400
 800d460:	40000800 	.word	0x40000800
 800d464:	40000c00 	.word	0x40000c00
 800d468:	40010400 	.word	0x40010400
 800d46c:	40014000 	.word	0x40014000
 800d470:	40014400 	.word	0x40014400
 800d474:	40014800 	.word	0x40014800
 800d478:	40001800 	.word	0x40001800
 800d47c:	40001c00 	.word	0x40001c00
 800d480:	40002000 	.word	0x40002000

0800d484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d484:	b480      	push	{r7}
 800d486:	b087      	sub	sp, #28
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6a1b      	ldr	r3, [r3, #32]
 800d492:	f023 0201 	bic.w	r2, r3, #1
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	699b      	ldr	r3, [r3, #24]
 800d4aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f023 0303 	bic.w	r3, r3, #3
 800d4ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f023 0302 	bic.w	r3, r3, #2
 800d4cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	697a      	ldr	r2, [r7, #20]
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a20      	ldr	r2, [pc, #128]	; (800d55c <TIM_OC1_SetConfig+0xd8>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d003      	beq.n	800d4e8 <TIM_OC1_SetConfig+0x64>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a1f      	ldr	r2, [pc, #124]	; (800d560 <TIM_OC1_SetConfig+0xdc>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d10c      	bne.n	800d502 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	f023 0308 	bic.w	r3, r3, #8
 800d4ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	697a      	ldr	r2, [r7, #20]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	f023 0304 	bic.w	r3, r3, #4
 800d500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	4a15      	ldr	r2, [pc, #84]	; (800d55c <TIM_OC1_SetConfig+0xd8>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d003      	beq.n	800d512 <TIM_OC1_SetConfig+0x8e>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4a14      	ldr	r2, [pc, #80]	; (800d560 <TIM_OC1_SetConfig+0xdc>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d111      	bne.n	800d536 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	693a      	ldr	r2, [r7, #16]
 800d528:	4313      	orrs	r3, r2
 800d52a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	693a      	ldr	r2, [r7, #16]
 800d532:	4313      	orrs	r3, r2
 800d534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	693a      	ldr	r2, [r7, #16]
 800d53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	685a      	ldr	r2, [r3, #4]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	697a      	ldr	r2, [r7, #20]
 800d54e:	621a      	str	r2, [r3, #32]
}
 800d550:	bf00      	nop
 800d552:	371c      	adds	r7, #28
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	40010000 	.word	0x40010000
 800d560:	40010400 	.word	0x40010400

0800d564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d564:	b480      	push	{r7}
 800d566:	b087      	sub	sp, #28
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	f023 0210 	bic.w	r2, r3, #16
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6a1b      	ldr	r3, [r3, #32]
 800d57e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d59a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	021b      	lsls	r3, r3, #8
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	f023 0320 	bic.w	r3, r3, #32
 800d5ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	011b      	lsls	r3, r3, #4
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4a22      	ldr	r2, [pc, #136]	; (800d648 <TIM_OC2_SetConfig+0xe4>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d003      	beq.n	800d5cc <TIM_OC2_SetConfig+0x68>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4a21      	ldr	r2, [pc, #132]	; (800d64c <TIM_OC2_SetConfig+0xe8>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d10d      	bne.n	800d5e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	011b      	lsls	r3, r3, #4
 800d5da:	697a      	ldr	r2, [r7, #20]
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	4a17      	ldr	r2, [pc, #92]	; (800d648 <TIM_OC2_SetConfig+0xe4>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d003      	beq.n	800d5f8 <TIM_OC2_SetConfig+0x94>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4a16      	ldr	r2, [pc, #88]	; (800d64c <TIM_OC2_SetConfig+0xe8>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d113      	bne.n	800d620 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	695b      	ldr	r3, [r3, #20]
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	693a      	ldr	r2, [r7, #16]
 800d610:	4313      	orrs	r3, r2
 800d612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	693a      	ldr	r2, [r7, #16]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	693a      	ldr	r2, [r7, #16]
 800d624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	685a      	ldr	r2, [r3, #4]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	697a      	ldr	r2, [r7, #20]
 800d638:	621a      	str	r2, [r3, #32]
}
 800d63a:	bf00      	nop
 800d63c:	371c      	adds	r7, #28
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	40010000 	.word	0x40010000
 800d64c:	40010400 	.word	0x40010400

0800d650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d650:	b480      	push	{r7}
 800d652:	b087      	sub	sp, #28
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	69db      	ldr	r3, [r3, #28]
 800d676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d67e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f023 0303 	bic.w	r3, r3, #3
 800d686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	4313      	orrs	r3, r2
 800d690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	021b      	lsls	r3, r3, #8
 800d6a0:	697a      	ldr	r2, [r7, #20]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4a21      	ldr	r2, [pc, #132]	; (800d730 <TIM_OC3_SetConfig+0xe0>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d003      	beq.n	800d6b6 <TIM_OC3_SetConfig+0x66>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4a20      	ldr	r2, [pc, #128]	; (800d734 <TIM_OC3_SetConfig+0xe4>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d10d      	bne.n	800d6d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	021b      	lsls	r3, r3, #8
 800d6c4:	697a      	ldr	r2, [r7, #20]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4a16      	ldr	r2, [pc, #88]	; (800d730 <TIM_OC3_SetConfig+0xe0>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d003      	beq.n	800d6e2 <TIM_OC3_SetConfig+0x92>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a15      	ldr	r2, [pc, #84]	; (800d734 <TIM_OC3_SetConfig+0xe4>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d113      	bne.n	800d70a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	695b      	ldr	r3, [r3, #20]
 800d6f6:	011b      	lsls	r3, r3, #4
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	011b      	lsls	r3, r3, #4
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	4313      	orrs	r3, r2
 800d708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	68fa      	ldr	r2, [r7, #12]
 800d714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	685a      	ldr	r2, [r3, #4]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	697a      	ldr	r2, [r7, #20]
 800d722:	621a      	str	r2, [r3, #32]
}
 800d724:	bf00      	nop
 800d726:	371c      	adds	r7, #28
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr
 800d730:	40010000 	.word	0x40010000
 800d734:	40010400 	.word	0x40010400

0800d738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d738:	b480      	push	{r7}
 800d73a:	b087      	sub	sp, #28
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a1b      	ldr	r3, [r3, #32]
 800d752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	69db      	ldr	r3, [r3, #28]
 800d75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d76e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	021b      	lsls	r3, r3, #8
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	4313      	orrs	r3, r2
 800d77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	031b      	lsls	r3, r3, #12
 800d78a:	693a      	ldr	r2, [r7, #16]
 800d78c:	4313      	orrs	r3, r2
 800d78e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4a12      	ldr	r2, [pc, #72]	; (800d7dc <TIM_OC4_SetConfig+0xa4>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d003      	beq.n	800d7a0 <TIM_OC4_SetConfig+0x68>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4a11      	ldr	r2, [pc, #68]	; (800d7e0 <TIM_OC4_SetConfig+0xa8>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d109      	bne.n	800d7b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	695b      	ldr	r3, [r3, #20]
 800d7ac:	019b      	lsls	r3, r3, #6
 800d7ae:	697a      	ldr	r2, [r7, #20]
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	697a      	ldr	r2, [r7, #20]
 800d7b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	685a      	ldr	r2, [r3, #4]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	693a      	ldr	r2, [r7, #16]
 800d7cc:	621a      	str	r2, [r3, #32]
}
 800d7ce:	bf00      	nop
 800d7d0:	371c      	adds	r7, #28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop
 800d7dc:	40010000 	.word	0x40010000
 800d7e0:	40010400 	.word	0x40010400

0800d7e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b087      	sub	sp, #28
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6a1b      	ldr	r3, [r3, #32]
 800d7f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6a1b      	ldr	r3, [r3, #32]
 800d7fa:	f023 0201 	bic.w	r2, r3, #1
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d80e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	011b      	lsls	r3, r3, #4
 800d814:	693a      	ldr	r2, [r7, #16]
 800d816:	4313      	orrs	r3, r2
 800d818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f023 030a 	bic.w	r3, r3, #10
 800d820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d822:	697a      	ldr	r2, [r7, #20]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	4313      	orrs	r3, r2
 800d828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	697a      	ldr	r2, [r7, #20]
 800d834:	621a      	str	r2, [r3, #32]
}
 800d836:	bf00      	nop
 800d838:	371c      	adds	r7, #28
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr

0800d842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d842:	b480      	push	{r7}
 800d844:	b087      	sub	sp, #28
 800d846:	af00      	add	r7, sp, #0
 800d848:	60f8      	str	r0, [r7, #12]
 800d84a:	60b9      	str	r1, [r7, #8]
 800d84c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6a1b      	ldr	r3, [r3, #32]
 800d852:	f023 0210 	bic.w	r2, r3, #16
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	699b      	ldr	r3, [r3, #24]
 800d85e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6a1b      	ldr	r3, [r3, #32]
 800d864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d86c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	031b      	lsls	r3, r3, #12
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	4313      	orrs	r3, r2
 800d876:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d87e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	011b      	lsls	r3, r3, #4
 800d884:	693a      	ldr	r2, [r7, #16]
 800d886:	4313      	orrs	r3, r2
 800d888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	697a      	ldr	r2, [r7, #20]
 800d88e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	693a      	ldr	r2, [r7, #16]
 800d894:	621a      	str	r2, [r3, #32]
}
 800d896:	bf00      	nop
 800d898:	371c      	adds	r7, #28
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b085      	sub	sp, #20
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	f043 0307 	orr.w	r3, r3, #7
 800d8c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68fa      	ldr	r2, [r7, #12]
 800d8ca:	609a      	str	r2, [r3, #8]
}
 800d8cc:	bf00      	nop
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b087      	sub	sp, #28
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
 800d8e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d8f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	021a      	lsls	r2, r3, #8
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	431a      	orrs	r2, r3
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	697a      	ldr	r2, [r7, #20]
 800d902:	4313      	orrs	r3, r2
 800d904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	609a      	str	r2, [r3, #8]
}
 800d90c:	bf00      	nop
 800d90e:	371c      	adds	r7, #28
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d918:	b480      	push	{r7}
 800d91a:	b087      	sub	sp, #28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	f003 031f 	and.w	r3, r3, #31
 800d92a:	2201      	movs	r2, #1
 800d92c:	fa02 f303 	lsl.w	r3, r2, r3
 800d930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	6a1a      	ldr	r2, [r3, #32]
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	43db      	mvns	r3, r3
 800d93a:	401a      	ands	r2, r3
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6a1a      	ldr	r2, [r3, #32]
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	f003 031f 	and.w	r3, r3, #31
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	fa01 f303 	lsl.w	r3, r1, r3
 800d950:	431a      	orrs	r2, r3
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	621a      	str	r2, [r3, #32]
}
 800d956:	bf00      	nop
 800d958:	371c      	adds	r7, #28
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
	...

0800d964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d974:	2b01      	cmp	r3, #1
 800d976:	d101      	bne.n	800d97c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d978:	2302      	movs	r3, #2
 800d97a:	e05a      	b.n	800da32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2201      	movs	r2, #1
 800d980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2202      	movs	r2, #2
 800d988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	68fa      	ldr	r2, [r7, #12]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a21      	ldr	r2, [pc, #132]	; (800da40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d022      	beq.n	800da06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9c8:	d01d      	beq.n	800da06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a1d      	ldr	r2, [pc, #116]	; (800da44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d018      	beq.n	800da06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a1b      	ldr	r2, [pc, #108]	; (800da48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d013      	beq.n	800da06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a1a      	ldr	r2, [pc, #104]	; (800da4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d00e      	beq.n	800da06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a18      	ldr	r2, [pc, #96]	; (800da50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d009      	beq.n	800da06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a17      	ldr	r2, [pc, #92]	; (800da54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d004      	beq.n	800da06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a15      	ldr	r2, [pc, #84]	; (800da58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d10c      	bne.n	800da20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	68ba      	ldr	r2, [r7, #8]
 800da14:	4313      	orrs	r3, r2
 800da16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	40010000 	.word	0x40010000
 800da44:	40000400 	.word	0x40000400
 800da48:	40000800 	.word	0x40000800
 800da4c:	40000c00 	.word	0x40000c00
 800da50:	40010400 	.word	0x40010400
 800da54:	40014000 	.word	0x40014000
 800da58:	40001800 	.word	0x40001800

0800da5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	e03f      	b.n	800db16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d106      	bne.n	800dab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7f5 f9e6 	bl	8002e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2224      	movs	r2, #36	; 0x24
 800dab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	68da      	ldr	r2, [r3, #12]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 f9cb 	bl	800de64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	691a      	ldr	r2, [r3, #16]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dadc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	695a      	ldr	r2, [r3, #20]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800daec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68da      	ldr	r2, [r3, #12]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dafc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2220      	movs	r2, #32
 800db08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2220      	movs	r2, #32
 800db10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800db14:	2300      	movs	r3, #0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b08a      	sub	sp, #40	; 0x28
 800db22:	af02      	add	r7, sp, #8
 800db24:	60f8      	str	r0, [r7, #12]
 800db26:	60b9      	str	r1, [r7, #8]
 800db28:	603b      	str	r3, [r7, #0]
 800db2a:	4613      	mov	r3, r2
 800db2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800db2e:	2300      	movs	r3, #0
 800db30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	2b20      	cmp	r3, #32
 800db3c:	d17c      	bne.n	800dc38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <HAL_UART_Transmit+0x2c>
 800db44:	88fb      	ldrh	r3, [r7, #6]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d101      	bne.n	800db4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800db4a:	2301      	movs	r3, #1
 800db4c:	e075      	b.n	800dc3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db54:	2b01      	cmp	r3, #1
 800db56:	d101      	bne.n	800db5c <HAL_UART_Transmit+0x3e>
 800db58:	2302      	movs	r3, #2
 800db5a:	e06e      	b.n	800dc3a <HAL_UART_Transmit+0x11c>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2200      	movs	r2, #0
 800db68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2221      	movs	r2, #33	; 0x21
 800db6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800db72:	f7f9 fb31 	bl	80071d8 <HAL_GetTick>
 800db76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	88fa      	ldrh	r2, [r7, #6]
 800db7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	88fa      	ldrh	r2, [r7, #6]
 800db82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db8c:	d108      	bne.n	800dba0 <HAL_UART_Transmit+0x82>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	691b      	ldr	r3, [r3, #16]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d104      	bne.n	800dba0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800db96:	2300      	movs	r3, #0
 800db98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	61bb      	str	r3, [r7, #24]
 800db9e:	e003      	b.n	800dba8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dba4:	2300      	movs	r3, #0
 800dba6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800dbb0:	e02a      	b.n	800dc08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	2180      	movs	r1, #128	; 0x80
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f000 f8e2 	bl	800dd86 <UART_WaitOnFlagUntilTimeout>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800dbc8:	2303      	movs	r3, #3
 800dbca:	e036      	b.n	800dc3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10b      	bne.n	800dbea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	881b      	ldrh	r3, [r3, #0]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dbe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	3302      	adds	r3, #2
 800dbe6:	61bb      	str	r3, [r7, #24]
 800dbe8:	e007      	b.n	800dbfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	781a      	ldrb	r2, [r3, #0]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	3b01      	subs	r3, #1
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1cf      	bne.n	800dbb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	2140      	movs	r1, #64	; 0x40
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f000 f8b2 	bl	800dd86 <UART_WaitOnFlagUntilTimeout>
 800dc22:	4603      	mov	r3, r0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d001      	beq.n	800dc2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800dc28:	2303      	movs	r3, #3
 800dc2a:	e006      	b.n	800dc3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2220      	movs	r2, #32
 800dc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800dc34:	2300      	movs	r3, #0
 800dc36:	e000      	b.n	800dc3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800dc38:	2302      	movs	r3, #2
  }
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3720      	adds	r7, #32
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b08a      	sub	sp, #40	; 0x28
 800dc46:	af02      	add	r7, sp, #8
 800dc48:	60f8      	str	r0, [r7, #12]
 800dc4a:	60b9      	str	r1, [r7, #8]
 800dc4c:	603b      	str	r3, [r7, #0]
 800dc4e:	4613      	mov	r3, r2
 800dc50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800dc52:	2300      	movs	r3, #0
 800dc54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	2b20      	cmp	r3, #32
 800dc60:	f040 808c 	bne.w	800dd7c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d002      	beq.n	800dc70 <HAL_UART_Receive+0x2e>
 800dc6a:	88fb      	ldrh	r3, [r7, #6]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d101      	bne.n	800dc74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e084      	b.n	800dd7e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d101      	bne.n	800dc82 <HAL_UART_Receive+0x40>
 800dc7e:	2302      	movs	r3, #2
 800dc80:	e07d      	b.n	800dd7e <HAL_UART_Receive+0x13c>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2201      	movs	r2, #1
 800dc86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2222      	movs	r2, #34	; 0x22
 800dc94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dc9e:	f7f9 fa9b 	bl	80071d8 <HAL_GetTick>
 800dca2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	88fa      	ldrh	r2, [r7, #6]
 800dca8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	88fa      	ldrh	r2, [r7, #6]
 800dcae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcb8:	d108      	bne.n	800dccc <HAL_UART_Receive+0x8a>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d104      	bne.n	800dccc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	61bb      	str	r3, [r7, #24]
 800dcca:	e003      	b.n	800dcd4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800dcdc:	e043      	b.n	800dd66 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	2200      	movs	r2, #0
 800dce6:	2120      	movs	r1, #32
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f000 f84c 	bl	800dd86 <UART_WaitOnFlagUntilTimeout>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d001      	beq.n	800dcf8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	e042      	b.n	800dd7e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10c      	bne.n	800dd18 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	3302      	adds	r3, #2
 800dd14:	61bb      	str	r3, [r7, #24]
 800dd16:	e01f      	b.n	800dd58 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd20:	d007      	beq.n	800dd32 <HAL_UART_Receive+0xf0>
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d10a      	bne.n	800dd40 <HAL_UART_Receive+0xfe>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	691b      	ldr	r3, [r3, #16]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d106      	bne.n	800dd40 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	701a      	strb	r2, [r3, #0]
 800dd3e:	e008      	b.n	800dd52 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	3301      	adds	r3, #1
 800dd56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1b6      	bne.n	800dcde <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2220      	movs	r2, #32
 800dd74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e000      	b.n	800dd7e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800dd7c:	2302      	movs	r3, #2
  }
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3720      	adds	r7, #32
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b090      	sub	sp, #64	; 0x40
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	60f8      	str	r0, [r7, #12]
 800dd8e:	60b9      	str	r1, [r7, #8]
 800dd90:	603b      	str	r3, [r7, #0]
 800dd92:	4613      	mov	r3, r2
 800dd94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd96:	e050      	b.n	800de3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd9e:	d04c      	beq.n	800de3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800dda0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d007      	beq.n	800ddb6 <UART_WaitOnFlagUntilTimeout+0x30>
 800dda6:	f7f9 fa17 	bl	80071d8 <HAL_GetTick>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	1ad3      	subs	r3, r2, r3
 800ddb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d241      	bcs.n	800de3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	330c      	adds	r3, #12
 800ddbc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc0:	e853 3f00 	ldrex	r3, [r3]
 800ddc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ddcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	330c      	adds	r3, #12
 800ddd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddd6:	637a      	str	r2, [r7, #52]	; 0x34
 800ddd8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddde:	e841 2300 	strex	r3, r2, [r1]
 800dde2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1e5      	bne.n	800ddb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	3314      	adds	r3, #20
 800ddf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	e853 3f00 	ldrex	r3, [r3]
 800ddf8:	613b      	str	r3, [r7, #16]
   return(result);
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	f023 0301 	bic.w	r3, r3, #1
 800de00:	63bb      	str	r3, [r7, #56]	; 0x38
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3314      	adds	r3, #20
 800de08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de0a:	623a      	str	r2, [r7, #32]
 800de0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de0e:	69f9      	ldr	r1, [r7, #28]
 800de10:	6a3a      	ldr	r2, [r7, #32]
 800de12:	e841 2300 	strex	r3, r2, [r1]
 800de16:	61bb      	str	r3, [r7, #24]
   return(result);
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d1e5      	bne.n	800ddea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2220      	movs	r2, #32
 800de22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2220      	movs	r2, #32
 800de2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2200      	movs	r2, #0
 800de32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800de36:	2303      	movs	r3, #3
 800de38:	e00f      	b.n	800de5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	4013      	ands	r3, r2
 800de44:	68ba      	ldr	r2, [r7, #8]
 800de46:	429a      	cmp	r2, r3
 800de48:	bf0c      	ite	eq
 800de4a:	2301      	moveq	r3, #1
 800de4c:	2300      	movne	r3, #0
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	461a      	mov	r2, r3
 800de52:	79fb      	ldrb	r3, [r7, #7]
 800de54:	429a      	cmp	r2, r3
 800de56:	d09f      	beq.n	800dd98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800de58:	2300      	movs	r3, #0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3740      	adds	r7, #64	; 0x40
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
	...

0800de64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de68:	b09f      	sub	sp, #124	; 0x7c
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	691b      	ldr	r3, [r3, #16]
 800de74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800de78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de7a:	68d9      	ldr	r1, [r3, #12]
 800de7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	ea40 0301 	orr.w	r3, r0, r1
 800de84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800de86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de88:	689a      	ldr	r2, [r3, #8]
 800de8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	431a      	orrs	r2, r3
 800de90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de92:	695b      	ldr	r3, [r3, #20]
 800de94:	431a      	orrs	r2, r3
 800de96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de98:	69db      	ldr	r3, [r3, #28]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800de9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dea8:	f021 010c 	bic.w	r1, r1, #12
 800deac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800deb2:	430b      	orrs	r3, r1
 800deb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800deb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	695b      	ldr	r3, [r3, #20]
 800debc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dec2:	6999      	ldr	r1, [r3, #24]
 800dec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	ea40 0301 	orr.w	r3, r0, r1
 800decc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	4bc5      	ldr	r3, [pc, #788]	; (800e1e8 <UART_SetConfig+0x384>)
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d004      	beq.n	800dee2 <UART_SetConfig+0x7e>
 800ded8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	4bc3      	ldr	r3, [pc, #780]	; (800e1ec <UART_SetConfig+0x388>)
 800dede:	429a      	cmp	r2, r3
 800dee0:	d103      	bne.n	800deea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dee2:	f7fc ffa5 	bl	800ae30 <HAL_RCC_GetPCLK2Freq>
 800dee6:	6778      	str	r0, [r7, #116]	; 0x74
 800dee8:	e002      	b.n	800def0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800deea:	f7fc ff8d 	bl	800ae08 <HAL_RCC_GetPCLK1Freq>
 800deee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800def0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800def2:	69db      	ldr	r3, [r3, #28]
 800def4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800def8:	f040 80b6 	bne.w	800e068 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800defc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800defe:	461c      	mov	r4, r3
 800df00:	f04f 0500 	mov.w	r5, #0
 800df04:	4622      	mov	r2, r4
 800df06:	462b      	mov	r3, r5
 800df08:	1891      	adds	r1, r2, r2
 800df0a:	6439      	str	r1, [r7, #64]	; 0x40
 800df0c:	415b      	adcs	r3, r3
 800df0e:	647b      	str	r3, [r7, #68]	; 0x44
 800df10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800df14:	1912      	adds	r2, r2, r4
 800df16:	eb45 0303 	adc.w	r3, r5, r3
 800df1a:	f04f 0000 	mov.w	r0, #0
 800df1e:	f04f 0100 	mov.w	r1, #0
 800df22:	00d9      	lsls	r1, r3, #3
 800df24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800df28:	00d0      	lsls	r0, r2, #3
 800df2a:	4602      	mov	r2, r0
 800df2c:	460b      	mov	r3, r1
 800df2e:	1911      	adds	r1, r2, r4
 800df30:	6639      	str	r1, [r7, #96]	; 0x60
 800df32:	416b      	adcs	r3, r5
 800df34:	667b      	str	r3, [r7, #100]	; 0x64
 800df36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	461a      	mov	r2, r3
 800df3c:	f04f 0300 	mov.w	r3, #0
 800df40:	1891      	adds	r1, r2, r2
 800df42:	63b9      	str	r1, [r7, #56]	; 0x38
 800df44:	415b      	adcs	r3, r3
 800df46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800df4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800df50:	f7f2 feaa 	bl	8000ca8 <__aeabi_uldivmod>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4ba5      	ldr	r3, [pc, #660]	; (800e1f0 <UART_SetConfig+0x38c>)
 800df5a:	fba3 2302 	umull	r2, r3, r3, r2
 800df5e:	095b      	lsrs	r3, r3, #5
 800df60:	011e      	lsls	r6, r3, #4
 800df62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df64:	461c      	mov	r4, r3
 800df66:	f04f 0500 	mov.w	r5, #0
 800df6a:	4622      	mov	r2, r4
 800df6c:	462b      	mov	r3, r5
 800df6e:	1891      	adds	r1, r2, r2
 800df70:	6339      	str	r1, [r7, #48]	; 0x30
 800df72:	415b      	adcs	r3, r3
 800df74:	637b      	str	r3, [r7, #52]	; 0x34
 800df76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800df7a:	1912      	adds	r2, r2, r4
 800df7c:	eb45 0303 	adc.w	r3, r5, r3
 800df80:	f04f 0000 	mov.w	r0, #0
 800df84:	f04f 0100 	mov.w	r1, #0
 800df88:	00d9      	lsls	r1, r3, #3
 800df8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800df8e:	00d0      	lsls	r0, r2, #3
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	1911      	adds	r1, r2, r4
 800df96:	65b9      	str	r1, [r7, #88]	; 0x58
 800df98:	416b      	adcs	r3, r5
 800df9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	f04f 0300 	mov.w	r3, #0
 800dfa6:	1891      	adds	r1, r2, r2
 800dfa8:	62b9      	str	r1, [r7, #40]	; 0x28
 800dfaa:	415b      	adcs	r3, r3
 800dfac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dfae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dfb2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800dfb6:	f7f2 fe77 	bl	8000ca8 <__aeabi_uldivmod>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	4b8c      	ldr	r3, [pc, #560]	; (800e1f0 <UART_SetConfig+0x38c>)
 800dfc0:	fba3 1302 	umull	r1, r3, r3, r2
 800dfc4:	095b      	lsrs	r3, r3, #5
 800dfc6:	2164      	movs	r1, #100	; 0x64
 800dfc8:	fb01 f303 	mul.w	r3, r1, r3
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	00db      	lsls	r3, r3, #3
 800dfd0:	3332      	adds	r3, #50	; 0x32
 800dfd2:	4a87      	ldr	r2, [pc, #540]	; (800e1f0 <UART_SetConfig+0x38c>)
 800dfd4:	fba2 2303 	umull	r2, r3, r2, r3
 800dfd8:	095b      	lsrs	r3, r3, #5
 800dfda:	005b      	lsls	r3, r3, #1
 800dfdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dfe0:	441e      	add	r6, r3
 800dfe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f04f 0100 	mov.w	r1, #0
 800dfea:	4602      	mov	r2, r0
 800dfec:	460b      	mov	r3, r1
 800dfee:	1894      	adds	r4, r2, r2
 800dff0:	623c      	str	r4, [r7, #32]
 800dff2:	415b      	adcs	r3, r3
 800dff4:	627b      	str	r3, [r7, #36]	; 0x24
 800dff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dffa:	1812      	adds	r2, r2, r0
 800dffc:	eb41 0303 	adc.w	r3, r1, r3
 800e000:	f04f 0400 	mov.w	r4, #0
 800e004:	f04f 0500 	mov.w	r5, #0
 800e008:	00dd      	lsls	r5, r3, #3
 800e00a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e00e:	00d4      	lsls	r4, r2, #3
 800e010:	4622      	mov	r2, r4
 800e012:	462b      	mov	r3, r5
 800e014:	1814      	adds	r4, r2, r0
 800e016:	653c      	str	r4, [r7, #80]	; 0x50
 800e018:	414b      	adcs	r3, r1
 800e01a:	657b      	str	r3, [r7, #84]	; 0x54
 800e01c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	461a      	mov	r2, r3
 800e022:	f04f 0300 	mov.w	r3, #0
 800e026:	1891      	adds	r1, r2, r2
 800e028:	61b9      	str	r1, [r7, #24]
 800e02a:	415b      	adcs	r3, r3
 800e02c:	61fb      	str	r3, [r7, #28]
 800e02e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e032:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e036:	f7f2 fe37 	bl	8000ca8 <__aeabi_uldivmod>
 800e03a:	4602      	mov	r2, r0
 800e03c:	460b      	mov	r3, r1
 800e03e:	4b6c      	ldr	r3, [pc, #432]	; (800e1f0 <UART_SetConfig+0x38c>)
 800e040:	fba3 1302 	umull	r1, r3, r3, r2
 800e044:	095b      	lsrs	r3, r3, #5
 800e046:	2164      	movs	r1, #100	; 0x64
 800e048:	fb01 f303 	mul.w	r3, r1, r3
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	00db      	lsls	r3, r3, #3
 800e050:	3332      	adds	r3, #50	; 0x32
 800e052:	4a67      	ldr	r2, [pc, #412]	; (800e1f0 <UART_SetConfig+0x38c>)
 800e054:	fba2 2303 	umull	r2, r3, r2, r3
 800e058:	095b      	lsrs	r3, r3, #5
 800e05a:	f003 0207 	and.w	r2, r3, #7
 800e05e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4432      	add	r2, r6
 800e064:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e066:	e0b9      	b.n	800e1dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e06a:	461c      	mov	r4, r3
 800e06c:	f04f 0500 	mov.w	r5, #0
 800e070:	4622      	mov	r2, r4
 800e072:	462b      	mov	r3, r5
 800e074:	1891      	adds	r1, r2, r2
 800e076:	6139      	str	r1, [r7, #16]
 800e078:	415b      	adcs	r3, r3
 800e07a:	617b      	str	r3, [r7, #20]
 800e07c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e080:	1912      	adds	r2, r2, r4
 800e082:	eb45 0303 	adc.w	r3, r5, r3
 800e086:	f04f 0000 	mov.w	r0, #0
 800e08a:	f04f 0100 	mov.w	r1, #0
 800e08e:	00d9      	lsls	r1, r3, #3
 800e090:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e094:	00d0      	lsls	r0, r2, #3
 800e096:	4602      	mov	r2, r0
 800e098:	460b      	mov	r3, r1
 800e09a:	eb12 0804 	adds.w	r8, r2, r4
 800e09e:	eb43 0905 	adc.w	r9, r3, r5
 800e0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f04f 0100 	mov.w	r1, #0
 800e0ac:	f04f 0200 	mov.w	r2, #0
 800e0b0:	f04f 0300 	mov.w	r3, #0
 800e0b4:	008b      	lsls	r3, r1, #2
 800e0b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e0ba:	0082      	lsls	r2, r0, #2
 800e0bc:	4640      	mov	r0, r8
 800e0be:	4649      	mov	r1, r9
 800e0c0:	f7f2 fdf2 	bl	8000ca8 <__aeabi_uldivmod>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	4b49      	ldr	r3, [pc, #292]	; (800e1f0 <UART_SetConfig+0x38c>)
 800e0ca:	fba3 2302 	umull	r2, r3, r3, r2
 800e0ce:	095b      	lsrs	r3, r3, #5
 800e0d0:	011e      	lsls	r6, r3, #4
 800e0d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f04f 0100 	mov.w	r1, #0
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	1894      	adds	r4, r2, r2
 800e0e0:	60bc      	str	r4, [r7, #8]
 800e0e2:	415b      	adcs	r3, r3
 800e0e4:	60fb      	str	r3, [r7, #12]
 800e0e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e0ea:	1812      	adds	r2, r2, r0
 800e0ec:	eb41 0303 	adc.w	r3, r1, r3
 800e0f0:	f04f 0400 	mov.w	r4, #0
 800e0f4:	f04f 0500 	mov.w	r5, #0
 800e0f8:	00dd      	lsls	r5, r3, #3
 800e0fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e0fe:	00d4      	lsls	r4, r2, #3
 800e100:	4622      	mov	r2, r4
 800e102:	462b      	mov	r3, r5
 800e104:	1814      	adds	r4, r2, r0
 800e106:	64bc      	str	r4, [r7, #72]	; 0x48
 800e108:	414b      	adcs	r3, r1
 800e10a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	4618      	mov	r0, r3
 800e112:	f04f 0100 	mov.w	r1, #0
 800e116:	f04f 0200 	mov.w	r2, #0
 800e11a:	f04f 0300 	mov.w	r3, #0
 800e11e:	008b      	lsls	r3, r1, #2
 800e120:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e124:	0082      	lsls	r2, r0, #2
 800e126:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e12a:	f7f2 fdbd 	bl	8000ca8 <__aeabi_uldivmod>
 800e12e:	4602      	mov	r2, r0
 800e130:	460b      	mov	r3, r1
 800e132:	4b2f      	ldr	r3, [pc, #188]	; (800e1f0 <UART_SetConfig+0x38c>)
 800e134:	fba3 1302 	umull	r1, r3, r3, r2
 800e138:	095b      	lsrs	r3, r3, #5
 800e13a:	2164      	movs	r1, #100	; 0x64
 800e13c:	fb01 f303 	mul.w	r3, r1, r3
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	011b      	lsls	r3, r3, #4
 800e144:	3332      	adds	r3, #50	; 0x32
 800e146:	4a2a      	ldr	r2, [pc, #168]	; (800e1f0 <UART_SetConfig+0x38c>)
 800e148:	fba2 2303 	umull	r2, r3, r2, r3
 800e14c:	095b      	lsrs	r3, r3, #5
 800e14e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e152:	441e      	add	r6, r3
 800e154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e156:	4618      	mov	r0, r3
 800e158:	f04f 0100 	mov.w	r1, #0
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	1894      	adds	r4, r2, r2
 800e162:	603c      	str	r4, [r7, #0]
 800e164:	415b      	adcs	r3, r3
 800e166:	607b      	str	r3, [r7, #4]
 800e168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e16c:	1812      	adds	r2, r2, r0
 800e16e:	eb41 0303 	adc.w	r3, r1, r3
 800e172:	f04f 0400 	mov.w	r4, #0
 800e176:	f04f 0500 	mov.w	r5, #0
 800e17a:	00dd      	lsls	r5, r3, #3
 800e17c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e180:	00d4      	lsls	r4, r2, #3
 800e182:	4622      	mov	r2, r4
 800e184:	462b      	mov	r3, r5
 800e186:	eb12 0a00 	adds.w	sl, r2, r0
 800e18a:	eb43 0b01 	adc.w	fp, r3, r1
 800e18e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	4618      	mov	r0, r3
 800e194:	f04f 0100 	mov.w	r1, #0
 800e198:	f04f 0200 	mov.w	r2, #0
 800e19c:	f04f 0300 	mov.w	r3, #0
 800e1a0:	008b      	lsls	r3, r1, #2
 800e1a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e1a6:	0082      	lsls	r2, r0, #2
 800e1a8:	4650      	mov	r0, sl
 800e1aa:	4659      	mov	r1, fp
 800e1ac:	f7f2 fd7c 	bl	8000ca8 <__aeabi_uldivmod>
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	4b0e      	ldr	r3, [pc, #56]	; (800e1f0 <UART_SetConfig+0x38c>)
 800e1b6:	fba3 1302 	umull	r1, r3, r3, r2
 800e1ba:	095b      	lsrs	r3, r3, #5
 800e1bc:	2164      	movs	r1, #100	; 0x64
 800e1be:	fb01 f303 	mul.w	r3, r1, r3
 800e1c2:	1ad3      	subs	r3, r2, r3
 800e1c4:	011b      	lsls	r3, r3, #4
 800e1c6:	3332      	adds	r3, #50	; 0x32
 800e1c8:	4a09      	ldr	r2, [pc, #36]	; (800e1f0 <UART_SetConfig+0x38c>)
 800e1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e1ce:	095b      	lsrs	r3, r3, #5
 800e1d0:	f003 020f 	and.w	r2, r3, #15
 800e1d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4432      	add	r2, r6
 800e1da:	609a      	str	r2, [r3, #8]
}
 800e1dc:	bf00      	nop
 800e1de:	377c      	adds	r7, #124	; 0x7c
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e6:	bf00      	nop
 800e1e8:	40011000 	.word	0x40011000
 800e1ec:	40011400 	.word	0x40011400
 800e1f0:	51eb851f 	.word	0x51eb851f

0800e1f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e1f4:	b084      	sub	sp, #16
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b084      	sub	sp, #16
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
 800e1fe:	f107 001c 	add.w	r0, r7, #28
 800e202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d122      	bne.n	800e252 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e210:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e236:	2b01      	cmp	r3, #1
 800e238:	d105      	bne.n	800e246 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f001 fb1c 	bl	800f884 <USB_CoreReset>
 800e24c:	4603      	mov	r3, r0
 800e24e:	73fb      	strb	r3, [r7, #15]
 800e250:	e01a      	b.n	800e288 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f001 fb10 	bl	800f884 <USB_CoreReset>
 800e264:	4603      	mov	r3, r0
 800e266:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d106      	bne.n	800e27c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e272:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	639a      	str	r2, [r3, #56]	; 0x38
 800e27a:	e005      	b.n	800e288 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e280:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d10b      	bne.n	800e2a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	f043 0206 	orr.w	r2, r3, #6
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	f043 0220 	orr.w	r2, r3, #32
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2b2:	b004      	add	sp, #16
 800e2b4:	4770      	bx	lr
	...

0800e2b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e2c6:	79fb      	ldrb	r3, [r7, #7]
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d165      	bne.n	800e398 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	4a41      	ldr	r2, [pc, #260]	; (800e3d4 <USB_SetTurnaroundTime+0x11c>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d906      	bls.n	800e2e2 <USB_SetTurnaroundTime+0x2a>
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	4a40      	ldr	r2, [pc, #256]	; (800e3d8 <USB_SetTurnaroundTime+0x120>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d202      	bcs.n	800e2e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e2dc:	230f      	movs	r3, #15
 800e2de:	617b      	str	r3, [r7, #20]
 800e2e0:	e062      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	4a3c      	ldr	r2, [pc, #240]	; (800e3d8 <USB_SetTurnaroundTime+0x120>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d306      	bcc.n	800e2f8 <USB_SetTurnaroundTime+0x40>
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	4a3b      	ldr	r2, [pc, #236]	; (800e3dc <USB_SetTurnaroundTime+0x124>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d202      	bcs.n	800e2f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e2f2:	230e      	movs	r3, #14
 800e2f4:	617b      	str	r3, [r7, #20]
 800e2f6:	e057      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	4a38      	ldr	r2, [pc, #224]	; (800e3dc <USB_SetTurnaroundTime+0x124>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d306      	bcc.n	800e30e <USB_SetTurnaroundTime+0x56>
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	4a37      	ldr	r2, [pc, #220]	; (800e3e0 <USB_SetTurnaroundTime+0x128>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d202      	bcs.n	800e30e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e308:	230d      	movs	r3, #13
 800e30a:	617b      	str	r3, [r7, #20]
 800e30c:	e04c      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	4a33      	ldr	r2, [pc, #204]	; (800e3e0 <USB_SetTurnaroundTime+0x128>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d306      	bcc.n	800e324 <USB_SetTurnaroundTime+0x6c>
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	4a32      	ldr	r2, [pc, #200]	; (800e3e4 <USB_SetTurnaroundTime+0x12c>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d802      	bhi.n	800e324 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e31e:	230c      	movs	r3, #12
 800e320:	617b      	str	r3, [r7, #20]
 800e322:	e041      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	4a2f      	ldr	r2, [pc, #188]	; (800e3e4 <USB_SetTurnaroundTime+0x12c>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d906      	bls.n	800e33a <USB_SetTurnaroundTime+0x82>
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	4a2e      	ldr	r2, [pc, #184]	; (800e3e8 <USB_SetTurnaroundTime+0x130>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d802      	bhi.n	800e33a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e334:	230b      	movs	r3, #11
 800e336:	617b      	str	r3, [r7, #20]
 800e338:	e036      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	4a2a      	ldr	r2, [pc, #168]	; (800e3e8 <USB_SetTurnaroundTime+0x130>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d906      	bls.n	800e350 <USB_SetTurnaroundTime+0x98>
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	4a29      	ldr	r2, [pc, #164]	; (800e3ec <USB_SetTurnaroundTime+0x134>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d802      	bhi.n	800e350 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e34a:	230a      	movs	r3, #10
 800e34c:	617b      	str	r3, [r7, #20]
 800e34e:	e02b      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	4a26      	ldr	r2, [pc, #152]	; (800e3ec <USB_SetTurnaroundTime+0x134>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d906      	bls.n	800e366 <USB_SetTurnaroundTime+0xae>
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	4a25      	ldr	r2, [pc, #148]	; (800e3f0 <USB_SetTurnaroundTime+0x138>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d202      	bcs.n	800e366 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e360:	2309      	movs	r3, #9
 800e362:	617b      	str	r3, [r7, #20]
 800e364:	e020      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	4a21      	ldr	r2, [pc, #132]	; (800e3f0 <USB_SetTurnaroundTime+0x138>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d306      	bcc.n	800e37c <USB_SetTurnaroundTime+0xc4>
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	4a20      	ldr	r2, [pc, #128]	; (800e3f4 <USB_SetTurnaroundTime+0x13c>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d802      	bhi.n	800e37c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e376:	2308      	movs	r3, #8
 800e378:	617b      	str	r3, [r7, #20]
 800e37a:	e015      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	4a1d      	ldr	r2, [pc, #116]	; (800e3f4 <USB_SetTurnaroundTime+0x13c>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d906      	bls.n	800e392 <USB_SetTurnaroundTime+0xda>
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	4a1c      	ldr	r2, [pc, #112]	; (800e3f8 <USB_SetTurnaroundTime+0x140>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d202      	bcs.n	800e392 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e38c:	2307      	movs	r3, #7
 800e38e:	617b      	str	r3, [r7, #20]
 800e390:	e00a      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e392:	2306      	movs	r3, #6
 800e394:	617b      	str	r3, [r7, #20]
 800e396:	e007      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e398:	79fb      	ldrb	r3, [r7, #7]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d102      	bne.n	800e3a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e39e:	2309      	movs	r3, #9
 800e3a0:	617b      	str	r3, [r7, #20]
 800e3a2:	e001      	b.n	800e3a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e3a4:	2309      	movs	r3, #9
 800e3a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	68da      	ldr	r2, [r3, #12]
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	029b      	lsls	r3, r3, #10
 800e3bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e3c0:	431a      	orrs	r2, r3
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	371c      	adds	r7, #28
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr
 800e3d4:	00d8acbf 	.word	0x00d8acbf
 800e3d8:	00e4e1c0 	.word	0x00e4e1c0
 800e3dc:	00f42400 	.word	0x00f42400
 800e3e0:	01067380 	.word	0x01067380
 800e3e4:	011a499f 	.word	0x011a499f
 800e3e8:	01312cff 	.word	0x01312cff
 800e3ec:	014ca43f 	.word	0x014ca43f
 800e3f0:	016e3600 	.word	0x016e3600
 800e3f4:	01a6ab1f 	.word	0x01a6ab1f
 800e3f8:	01e84800 	.word	0x01e84800

0800e3fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	f043 0201 	orr.w	r2, r3, #1
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e410:	2300      	movs	r3, #0
}
 800e412:	4618      	mov	r0, r3
 800e414:	370c      	adds	r7, #12
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr

0800e41e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e41e:	b480      	push	{r7}
 800e420:	b083      	sub	sp, #12
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	f023 0201 	bic.w	r2, r3, #1
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	460b      	mov	r3, r1
 800e44a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e44c:	2300      	movs	r3, #0
 800e44e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e45c:	78fb      	ldrb	r3, [r7, #3]
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d115      	bne.n	800e48e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e46e:	2001      	movs	r0, #1
 800e470:	f7f8 febe 	bl	80071f0 <HAL_Delay>
      ms++;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	3301      	adds	r3, #1
 800e478:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f001 f972 	bl	800f764 <USB_GetMode>
 800e480:	4603      	mov	r3, r0
 800e482:	2b01      	cmp	r3, #1
 800e484:	d01e      	beq.n	800e4c4 <USB_SetCurrentMode+0x84>
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2b31      	cmp	r3, #49	; 0x31
 800e48a:	d9f0      	bls.n	800e46e <USB_SetCurrentMode+0x2e>
 800e48c:	e01a      	b.n	800e4c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e48e:	78fb      	ldrb	r3, [r7, #3]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d115      	bne.n	800e4c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e4a0:	2001      	movs	r0, #1
 800e4a2:	f7f8 fea5 	bl	80071f0 <HAL_Delay>
      ms++;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	3301      	adds	r3, #1
 800e4aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f001 f959 	bl	800f764 <USB_GetMode>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d005      	beq.n	800e4c4 <USB_SetCurrentMode+0x84>
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2b31      	cmp	r3, #49	; 0x31
 800e4bc:	d9f0      	bls.n	800e4a0 <USB_SetCurrentMode+0x60>
 800e4be:	e001      	b.n	800e4c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	e005      	b.n	800e4d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2b32      	cmp	r3, #50	; 0x32
 800e4c8:	d101      	bne.n	800e4ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e000      	b.n	800e4d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e4d8:	b084      	sub	sp, #16
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b086      	sub	sp, #24
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e4e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	613b      	str	r3, [r7, #16]
 800e4f6:	e009      	b.n	800e50c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	3340      	adds	r3, #64	; 0x40
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4413      	add	r3, r2
 800e502:	2200      	movs	r2, #0
 800e504:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	3301      	adds	r3, #1
 800e50a:	613b      	str	r3, [r7, #16]
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	2b0e      	cmp	r3, #14
 800e510:	d9f2      	bls.n	800e4f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e514:	2b00      	cmp	r3, #0
 800e516:	d11c      	bne.n	800e552 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e526:	f043 0302 	orr.w	r3, r3, #2
 800e52a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e530:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e53c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e548:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	639a      	str	r2, [r3, #56]	; 0x38
 800e550:	e00b      	b.n	800e56a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e556:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e562:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e570:	461a      	mov	r2, r3
 800e572:	2300      	movs	r3, #0
 800e574:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e57c:	4619      	mov	r1, r3
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e584:	461a      	mov	r2, r3
 800e586:	680b      	ldr	r3, [r1, #0]
 800e588:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d10c      	bne.n	800e5aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e592:	2b00      	cmp	r3, #0
 800e594:	d104      	bne.n	800e5a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e596:	2100      	movs	r1, #0
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 f945 	bl	800e828 <USB_SetDevSpeed>
 800e59e:	e008      	b.n	800e5b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e5a0:	2101      	movs	r1, #1
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 f940 	bl	800e828 <USB_SetDevSpeed>
 800e5a8:	e003      	b.n	800e5b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e5aa:	2103      	movs	r1, #3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 f93b 	bl	800e828 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e5b2:	2110      	movs	r1, #16
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 f8f3 	bl	800e7a0 <USB_FlushTxFifo>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d001      	beq.n	800e5c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f000 f90f 	bl	800e7e8 <USB_FlushRxFifo>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d001      	beq.n	800e5d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5da:	461a      	mov	r2, r3
 800e5dc:	2300      	movs	r3, #0
 800e5de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	613b      	str	r3, [r7, #16]
 800e5fc:	e043      	b.n	800e686 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	015a      	lsls	r2, r3, #5
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	4413      	add	r3, r2
 800e606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e614:	d118      	bne.n	800e648 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d10a      	bne.n	800e632 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	015a      	lsls	r2, r3, #5
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	4413      	add	r3, r2
 800e624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e628:	461a      	mov	r2, r3
 800e62a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e62e:	6013      	str	r3, [r2, #0]
 800e630:	e013      	b.n	800e65a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	015a      	lsls	r2, r3, #5
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	4413      	add	r3, r2
 800e63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e63e:	461a      	mov	r2, r3
 800e640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e644:	6013      	str	r3, [r2, #0]
 800e646:	e008      	b.n	800e65a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	015a      	lsls	r2, r3, #5
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4413      	add	r3, r2
 800e650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e654:	461a      	mov	r2, r3
 800e656:	2300      	movs	r3, #0
 800e658:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	015a      	lsls	r2, r3, #5
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	4413      	add	r3, r2
 800e662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e666:	461a      	mov	r2, r3
 800e668:	2300      	movs	r3, #0
 800e66a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	015a      	lsls	r2, r3, #5
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	4413      	add	r3, r2
 800e674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e678:	461a      	mov	r2, r3
 800e67a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e67e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	3301      	adds	r3, #1
 800e684:	613b      	str	r3, [r7, #16]
 800e686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e688:	693a      	ldr	r2, [r7, #16]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d3b7      	bcc.n	800e5fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e68e:	2300      	movs	r3, #0
 800e690:	613b      	str	r3, [r7, #16]
 800e692:	e043      	b.n	800e71c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	015a      	lsls	r2, r3, #5
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	4413      	add	r3, r2
 800e69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6aa:	d118      	bne.n	800e6de <USB_DevInit+0x206>
    {
      if (i == 0U)
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d10a      	bne.n	800e6c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	015a      	lsls	r2, r3, #5
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	4413      	add	r3, r2
 800e6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6be:	461a      	mov	r2, r3
 800e6c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e6c4:	6013      	str	r3, [r2, #0]
 800e6c6:	e013      	b.n	800e6f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	015a      	lsls	r2, r3, #5
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	4413      	add	r3, r2
 800e6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e6da:	6013      	str	r3, [r2, #0]
 800e6dc:	e008      	b.n	800e6f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	015a      	lsls	r2, r3, #5
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	015a      	lsls	r2, r3, #5
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	2300      	movs	r3, #0
 800e700:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	015a      	lsls	r2, r3, #5
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	4413      	add	r3, r2
 800e70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e70e:	461a      	mov	r2, r3
 800e710:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e714:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	3301      	adds	r3, #1
 800e71a:	613b      	str	r3, [r7, #16]
 800e71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71e:	693a      	ldr	r2, [r7, #16]
 800e720:	429a      	cmp	r2, r3
 800e722:	d3b7      	bcc.n	800e694 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e72a:	691b      	ldr	r3, [r3, #16]
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e736:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e744:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d105      	bne.n	800e758 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	699b      	ldr	r3, [r3, #24]
 800e750:	f043 0210 	orr.w	r2, r3, #16
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	699a      	ldr	r2, [r3, #24]
 800e75c:	4b0f      	ldr	r3, [pc, #60]	; (800e79c <USB_DevInit+0x2c4>)
 800e75e:	4313      	orrs	r3, r2
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e766:	2b00      	cmp	r3, #0
 800e768:	d005      	beq.n	800e776 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	699b      	ldr	r3, [r3, #24]
 800e76e:	f043 0208 	orr.w	r2, r3, #8
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d107      	bne.n	800e78c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	699b      	ldr	r3, [r3, #24]
 800e780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e784:	f043 0304 	orr.w	r3, r3, #4
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e78c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3718      	adds	r7, #24
 800e792:	46bd      	mov	sp, r7
 800e794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e798:	b004      	add	sp, #16
 800e79a:	4770      	bx	lr
 800e79c:	803c3800 	.word	0x803c3800

0800e7a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b085      	sub	sp, #20
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	019b      	lsls	r3, r3, #6
 800e7b2:	f043 0220 	orr.w	r2, r3, #32
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	60fb      	str	r3, [r7, #12]
 800e7c0:	4a08      	ldr	r2, [pc, #32]	; (800e7e4 <USB_FlushTxFifo+0x44>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d901      	bls.n	800e7ca <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800e7c6:	2303      	movs	r3, #3
 800e7c8:	e006      	b.n	800e7d8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	691b      	ldr	r3, [r3, #16]
 800e7ce:	f003 0320 	and.w	r3, r3, #32
 800e7d2:	2b20      	cmp	r3, #32
 800e7d4:	d0f1      	beq.n	800e7ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e7d6:	2300      	movs	r3, #0
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3714      	adds	r7, #20
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr
 800e7e4:	00030d40 	.word	0x00030d40

0800e7e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2210      	movs	r2, #16
 800e7f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	60fb      	str	r3, [r7, #12]
 800e800:	4a08      	ldr	r2, [pc, #32]	; (800e824 <USB_FlushRxFifo+0x3c>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d901      	bls.n	800e80a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800e806:	2303      	movs	r3, #3
 800e808:	e006      	b.n	800e818 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	691b      	ldr	r3, [r3, #16]
 800e80e:	f003 0310 	and.w	r3, r3, #16
 800e812:	2b10      	cmp	r3, #16
 800e814:	d0f1      	beq.n	800e7fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr
 800e824:	00030d40 	.word	0x00030d40

0800e828 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e828:	b480      	push	{r7}
 800e82a:	b085      	sub	sp, #20
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	460b      	mov	r3, r1
 800e832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	78fb      	ldrb	r3, [r7, #3]
 800e842:	68f9      	ldr	r1, [r7, #12]
 800e844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e848:	4313      	orrs	r3, r2
 800e84a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3714      	adds	r7, #20
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e85a:	b480      	push	{r7}
 800e85c:	b087      	sub	sp, #28
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	f003 0306 	and.w	r3, r3, #6
 800e872:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d102      	bne.n	800e880 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e87a:	2300      	movs	r3, #0
 800e87c:	75fb      	strb	r3, [r7, #23]
 800e87e:	e00a      	b.n	800e896 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2b02      	cmp	r3, #2
 800e884:	d002      	beq.n	800e88c <USB_GetDevSpeed+0x32>
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2b06      	cmp	r3, #6
 800e88a:	d102      	bne.n	800e892 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e88c:	2302      	movs	r3, #2
 800e88e:	75fb      	strb	r3, [r7, #23]
 800e890:	e001      	b.n	800e896 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e892:	230f      	movs	r3, #15
 800e894:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e896:	7dfb      	ldrb	r3, [r7, #23]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	371c      	adds	r7, #28
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b085      	sub	sp, #20
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	785b      	ldrb	r3, [r3, #1]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d13a      	bne.n	800e936 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8c6:	69da      	ldr	r2, [r3, #28]
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	f003 030f 	and.w	r3, r3, #15
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	68f9      	ldr	r1, [r7, #12]
 800e8da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	015a      	lsls	r2, r3, #5
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d155      	bne.n	800e9a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	015a      	lsls	r2, r3, #5
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	4413      	add	r3, r2
 800e900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	78db      	ldrb	r3, [r3, #3]
 800e912:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e914:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	059b      	lsls	r3, r3, #22
 800e91a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e91c:	4313      	orrs	r3, r2
 800e91e:	68ba      	ldr	r2, [r7, #8]
 800e920:	0151      	lsls	r1, r2, #5
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	440a      	add	r2, r1
 800e926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e92a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e92e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e932:	6013      	str	r3, [r2, #0]
 800e934:	e036      	b.n	800e9a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e93c:	69da      	ldr	r2, [r3, #28]
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	f003 030f 	and.w	r3, r3, #15
 800e946:	2101      	movs	r1, #1
 800e948:	fa01 f303 	lsl.w	r3, r1, r3
 800e94c:	041b      	lsls	r3, r3, #16
 800e94e:	68f9      	ldr	r1, [r7, #12]
 800e950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e954:	4313      	orrs	r3, r2
 800e956:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	015a      	lsls	r2, r3, #5
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	4413      	add	r3, r2
 800e960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d11a      	bne.n	800e9a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	015a      	lsls	r2, r3, #5
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	4413      	add	r3, r2
 800e976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	78db      	ldrb	r3, [r3, #3]
 800e988:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e98a:	430b      	orrs	r3, r1
 800e98c:	4313      	orrs	r3, r2
 800e98e:	68ba      	ldr	r2, [r7, #8]
 800e990:	0151      	lsls	r1, r2, #5
 800e992:	68fa      	ldr	r2, [r7, #12]
 800e994:	440a      	add	r2, r1
 800e996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e99a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e99e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
	...

0800e9b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	785b      	ldrb	r3, [r3, #1]
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d161      	bne.n	800ea94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	015a      	lsls	r2, r3, #5
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	4413      	add	r3, r2
 800e9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e9e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e9e6:	d11f      	bne.n	800ea28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	015a      	lsls	r2, r3, #5
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	68ba      	ldr	r2, [r7, #8]
 800e9f8:	0151      	lsls	r1, r2, #5
 800e9fa:	68fa      	ldr	r2, [r7, #12]
 800e9fc:	440a      	add	r2, r1
 800e9fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ea06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	015a      	lsls	r2, r3, #5
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	4413      	add	r3, r2
 800ea10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	68ba      	ldr	r2, [r7, #8]
 800ea18:	0151      	lsls	r1, r2, #5
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	440a      	add	r2, r1
 800ea1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ea26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	f003 030f 	and.w	r3, r3, #15
 800ea38:	2101      	movs	r1, #1
 800ea3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	43db      	mvns	r3, r3
 800ea42:	68f9      	ldr	r1, [r7, #12]
 800ea44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea48:	4013      	ands	r3, r2
 800ea4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea52:	69da      	ldr	r2, [r3, #28]
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	f003 030f 	and.w	r3, r3, #15
 800ea5c:	2101      	movs	r1, #1
 800ea5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	43db      	mvns	r3, r3
 800ea66:	68f9      	ldr	r1, [r7, #12]
 800ea68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea6c:	4013      	ands	r3, r2
 800ea6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	015a      	lsls	r2, r3, #5
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	4413      	add	r3, r2
 800ea78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	0159      	lsls	r1, r3, #5
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	440b      	add	r3, r1
 800ea86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	4b35      	ldr	r3, [pc, #212]	; (800eb64 <USB_DeactivateEndpoint+0x1b0>)
 800ea8e:	4013      	ands	r3, r2
 800ea90:	600b      	str	r3, [r1, #0]
 800ea92:	e060      	b.n	800eb56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	015a      	lsls	r2, r3, #5
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eaa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eaaa:	d11f      	bne.n	800eaec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	015a      	lsls	r2, r3, #5
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	4413      	add	r3, r2
 800eab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	0151      	lsls	r1, r2, #5
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	440a      	add	r2, r1
 800eac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eac6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eaca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	015a      	lsls	r2, r3, #5
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	4413      	add	r3, r2
 800ead4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	0151      	lsls	r1, r2, #5
 800eade:	68fa      	ldr	r2, [r7, #12]
 800eae0:	440a      	add	r2, r1
 800eae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eaea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	f003 030f 	and.w	r3, r3, #15
 800eafc:	2101      	movs	r1, #1
 800eafe:	fa01 f303 	lsl.w	r3, r1, r3
 800eb02:	041b      	lsls	r3, r3, #16
 800eb04:	43db      	mvns	r3, r3
 800eb06:	68f9      	ldr	r1, [r7, #12]
 800eb08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb0c:	4013      	ands	r3, r2
 800eb0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb16:	69da      	ldr	r2, [r3, #28]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	f003 030f 	and.w	r3, r3, #15
 800eb20:	2101      	movs	r1, #1
 800eb22:	fa01 f303 	lsl.w	r3, r1, r3
 800eb26:	041b      	lsls	r3, r3, #16
 800eb28:	43db      	mvns	r3, r3
 800eb2a:	68f9      	ldr	r1, [r7, #12]
 800eb2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb30:	4013      	ands	r3, r2
 800eb32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	015a      	lsls	r2, r3, #5
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	4413      	add	r3, r2
 800eb3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	0159      	lsls	r1, r3, #5
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	440b      	add	r3, r1
 800eb4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb4e:	4619      	mov	r1, r3
 800eb50:	4b05      	ldr	r3, [pc, #20]	; (800eb68 <USB_DeactivateEndpoint+0x1b4>)
 800eb52:	4013      	ands	r3, r2
 800eb54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800eb56:	2300      	movs	r3, #0
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3714      	adds	r7, #20
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr
 800eb64:	ec337800 	.word	0xec337800
 800eb68:	eff37800 	.word	0xeff37800

0800eb6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b08a      	sub	sp, #40	; 0x28
 800eb70:	af02      	add	r7, sp, #8
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	4613      	mov	r3, r2
 800eb78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	785b      	ldrb	r3, [r3, #1]
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	f040 815c 	bne.w	800ee46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	695b      	ldr	r3, [r3, #20]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d132      	bne.n	800ebfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eb96:	69bb      	ldr	r3, [r7, #24]
 800eb98:	015a      	lsls	r2, r3, #5
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eba2:	691b      	ldr	r3, [r3, #16]
 800eba4:	69ba      	ldr	r2, [r7, #24]
 800eba6:	0151      	lsls	r1, r2, #5
 800eba8:	69fa      	ldr	r2, [r7, #28]
 800ebaa:	440a      	add	r2, r1
 800ebac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ebb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ebb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	015a      	lsls	r2, r3, #5
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebc6:	691b      	ldr	r3, [r3, #16]
 800ebc8:	69ba      	ldr	r2, [r7, #24]
 800ebca:	0151      	lsls	r1, r2, #5
 800ebcc:	69fa      	ldr	r2, [r7, #28]
 800ebce:	440a      	add	r2, r1
 800ebd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ebd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ebda:	69bb      	ldr	r3, [r7, #24]
 800ebdc:	015a      	lsls	r2, r3, #5
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebe6:	691b      	ldr	r3, [r3, #16]
 800ebe8:	69ba      	ldr	r2, [r7, #24]
 800ebea:	0151      	lsls	r1, r2, #5
 800ebec:	69fa      	ldr	r2, [r7, #28]
 800ebee:	440a      	add	r2, r1
 800ebf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebf4:	0cdb      	lsrs	r3, r3, #19
 800ebf6:	04db      	lsls	r3, r3, #19
 800ebf8:	6113      	str	r3, [r2, #16]
 800ebfa:	e074      	b.n	800ece6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	015a      	lsls	r2, r3, #5
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	4413      	add	r3, r2
 800ec04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec08:	691b      	ldr	r3, [r3, #16]
 800ec0a:	69ba      	ldr	r2, [r7, #24]
 800ec0c:	0151      	lsls	r1, r2, #5
 800ec0e:	69fa      	ldr	r2, [r7, #28]
 800ec10:	440a      	add	r2, r1
 800ec12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec16:	0cdb      	lsrs	r3, r3, #19
 800ec18:	04db      	lsls	r3, r3, #19
 800ec1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	015a      	lsls	r2, r3, #5
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	4413      	add	r3, r2
 800ec24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	69ba      	ldr	r2, [r7, #24]
 800ec2c:	0151      	lsls	r1, r2, #5
 800ec2e:	69fa      	ldr	r2, [r7, #28]
 800ec30:	440a      	add	r2, r1
 800ec32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ec3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ec3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	015a      	lsls	r2, r3, #5
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	4413      	add	r3, r2
 800ec48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	6959      	ldr	r1, [r3, #20]
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	689b      	ldr	r3, [r3, #8]
 800ec56:	440b      	add	r3, r1
 800ec58:	1e59      	subs	r1, r3, #1
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ec62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ec64:	4b9d      	ldr	r3, [pc, #628]	; (800eedc <USB_EPStartXfer+0x370>)
 800ec66:	400b      	ands	r3, r1
 800ec68:	69b9      	ldr	r1, [r7, #24]
 800ec6a:	0148      	lsls	r0, r1, #5
 800ec6c:	69f9      	ldr	r1, [r7, #28]
 800ec6e:	4401      	add	r1, r0
 800ec70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ec74:	4313      	orrs	r3, r2
 800ec76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	015a      	lsls	r2, r3, #5
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	4413      	add	r3, r2
 800ec80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec84:	691a      	ldr	r2, [r3, #16]
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	695b      	ldr	r3, [r3, #20]
 800ec8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec8e:	69b9      	ldr	r1, [r7, #24]
 800ec90:	0148      	lsls	r0, r1, #5
 800ec92:	69f9      	ldr	r1, [r7, #28]
 800ec94:	4401      	add	r1, r0
 800ec96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	78db      	ldrb	r3, [r3, #3]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d11f      	bne.n	800ece6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	015a      	lsls	r2, r3, #5
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	4413      	add	r3, r2
 800ecae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecb2:	691b      	ldr	r3, [r3, #16]
 800ecb4:	69ba      	ldr	r2, [r7, #24]
 800ecb6:	0151      	lsls	r1, r2, #5
 800ecb8:	69fa      	ldr	r2, [r7, #28]
 800ecba:	440a      	add	r2, r1
 800ecbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ecc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	015a      	lsls	r2, r3, #5
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	4413      	add	r3, r2
 800ecce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecd2:	691b      	ldr	r3, [r3, #16]
 800ecd4:	69ba      	ldr	r2, [r7, #24]
 800ecd6:	0151      	lsls	r1, r2, #5
 800ecd8:	69fa      	ldr	r2, [r7, #28]
 800ecda:	440a      	add	r2, r1
 800ecdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ece0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ece4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ece6:	79fb      	ldrb	r3, [r7, #7]
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d14b      	bne.n	800ed84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	691b      	ldr	r3, [r3, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d009      	beq.n	800ed08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	015a      	lsls	r2, r3, #5
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed00:	461a      	mov	r2, r3
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	691b      	ldr	r3, [r3, #16]
 800ed06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	78db      	ldrb	r3, [r3, #3]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d128      	bne.n	800ed62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d110      	bne.n	800ed42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	015a      	lsls	r2, r3, #5
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	4413      	add	r3, r2
 800ed28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	69ba      	ldr	r2, [r7, #24]
 800ed30:	0151      	lsls	r1, r2, #5
 800ed32:	69fa      	ldr	r2, [r7, #28]
 800ed34:	440a      	add	r2, r1
 800ed36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed3e:	6013      	str	r3, [r2, #0]
 800ed40:	e00f      	b.n	800ed62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ed42:	69bb      	ldr	r3, [r7, #24]
 800ed44:	015a      	lsls	r2, r3, #5
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	4413      	add	r3, r2
 800ed4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	69ba      	ldr	r2, [r7, #24]
 800ed52:	0151      	lsls	r1, r2, #5
 800ed54:	69fa      	ldr	r2, [r7, #28]
 800ed56:	440a      	add	r2, r1
 800ed58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	015a      	lsls	r2, r3, #5
 800ed66:	69fb      	ldr	r3, [r7, #28]
 800ed68:	4413      	add	r3, r2
 800ed6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	69ba      	ldr	r2, [r7, #24]
 800ed72:	0151      	lsls	r1, r2, #5
 800ed74:	69fa      	ldr	r2, [r7, #28]
 800ed76:	440a      	add	r2, r1
 800ed78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ed80:	6013      	str	r3, [r2, #0]
 800ed82:	e12f      	b.n	800efe4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	015a      	lsls	r2, r3, #5
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	69ba      	ldr	r2, [r7, #24]
 800ed94:	0151      	lsls	r1, r2, #5
 800ed96:	69fa      	ldr	r2, [r7, #28]
 800ed98:	440a      	add	r2, r1
 800ed9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eda2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	78db      	ldrb	r3, [r3, #3]
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d015      	beq.n	800edd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	695b      	ldr	r3, [r3, #20]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 8117 	beq.w	800efe4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	f003 030f 	and.w	r3, r3, #15
 800edc6:	2101      	movs	r1, #1
 800edc8:	fa01 f303 	lsl.w	r3, r1, r3
 800edcc:	69f9      	ldr	r1, [r7, #28]
 800edce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800edd2:	4313      	orrs	r3, r2
 800edd4:	634b      	str	r3, [r1, #52]	; 0x34
 800edd6:	e105      	b.n	800efe4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d110      	bne.n	800ee0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	015a      	lsls	r2, r3, #5
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	4413      	add	r3, r2
 800edf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	69ba      	ldr	r2, [r7, #24]
 800edf8:	0151      	lsls	r1, r2, #5
 800edfa:	69fa      	ldr	r2, [r7, #28]
 800edfc:	440a      	add	r2, r1
 800edfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee06:	6013      	str	r3, [r2, #0]
 800ee08:	e00f      	b.n	800ee2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	015a      	lsls	r2, r3, #5
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	4413      	add	r3, r2
 800ee12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	69ba      	ldr	r2, [r7, #24]
 800ee1a:	0151      	lsls	r1, r2, #5
 800ee1c:	69fa      	ldr	r2, [r7, #28]
 800ee1e:	440a      	add	r2, r1
 800ee20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	68d9      	ldr	r1, [r3, #12]
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	781a      	ldrb	r2, [r3, #0]
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	695b      	ldr	r3, [r3, #20]
 800ee36:	b298      	uxth	r0, r3
 800ee38:	79fb      	ldrb	r3, [r7, #7]
 800ee3a:	9300      	str	r3, [sp, #0]
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	68f8      	ldr	r0, [r7, #12]
 800ee40:	f000 fa2b 	bl	800f29a <USB_WritePacket>
 800ee44:	e0ce      	b.n	800efe4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	015a      	lsls	r2, r3, #5
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee52:	691b      	ldr	r3, [r3, #16]
 800ee54:	69ba      	ldr	r2, [r7, #24]
 800ee56:	0151      	lsls	r1, r2, #5
 800ee58:	69fa      	ldr	r2, [r7, #28]
 800ee5a:	440a      	add	r2, r1
 800ee5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee60:	0cdb      	lsrs	r3, r3, #19
 800ee62:	04db      	lsls	r3, r3, #19
 800ee64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	015a      	lsls	r2, r3, #5
 800ee6a:	69fb      	ldr	r3, [r7, #28]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee72:	691b      	ldr	r3, [r3, #16]
 800ee74:	69ba      	ldr	r2, [r7, #24]
 800ee76:	0151      	lsls	r1, r2, #5
 800ee78:	69fa      	ldr	r2, [r7, #28]
 800ee7a:	440a      	add	r2, r1
 800ee7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ee84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ee88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	695b      	ldr	r3, [r3, #20]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d126      	bne.n	800eee0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	015a      	lsls	r2, r3, #5
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	4413      	add	r3, r2
 800ee9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee9e:	691a      	ldr	r2, [r3, #16]
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eea8:	69b9      	ldr	r1, [r7, #24]
 800eeaa:	0148      	lsls	r0, r1, #5
 800eeac:	69f9      	ldr	r1, [r7, #28]
 800eeae:	4401      	add	r1, r0
 800eeb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	015a      	lsls	r2, r3, #5
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	4413      	add	r3, r2
 800eec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eec4:	691b      	ldr	r3, [r3, #16]
 800eec6:	69ba      	ldr	r2, [r7, #24]
 800eec8:	0151      	lsls	r1, r2, #5
 800eeca:	69fa      	ldr	r2, [r7, #28]
 800eecc:	440a      	add	r2, r1
 800eece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eed2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eed6:	6113      	str	r3, [r2, #16]
 800eed8:	e036      	b.n	800ef48 <USB_EPStartXfer+0x3dc>
 800eeda:	bf00      	nop
 800eedc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	695a      	ldr	r2, [r3, #20]
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	689b      	ldr	r3, [r3, #8]
 800eee8:	4413      	add	r3, r2
 800eeea:	1e5a      	subs	r2, r3, #1
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eef4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	015a      	lsls	r2, r3, #5
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	4413      	add	r3, r2
 800eefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef02:	691a      	ldr	r2, [r3, #16]
 800ef04:	8afb      	ldrh	r3, [r7, #22]
 800ef06:	04d9      	lsls	r1, r3, #19
 800ef08:	4b39      	ldr	r3, [pc, #228]	; (800eff0 <USB_EPStartXfer+0x484>)
 800ef0a:	400b      	ands	r3, r1
 800ef0c:	69b9      	ldr	r1, [r7, #24]
 800ef0e:	0148      	lsls	r0, r1, #5
 800ef10:	69f9      	ldr	r1, [r7, #28]
 800ef12:	4401      	add	r1, r0
 800ef14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	015a      	lsls	r2, r3, #5
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	4413      	add	r3, r2
 800ef24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef28:	691a      	ldr	r2, [r3, #16]
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	8af9      	ldrh	r1, [r7, #22]
 800ef30:	fb01 f303 	mul.w	r3, r1, r3
 800ef34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef38:	69b9      	ldr	r1, [r7, #24]
 800ef3a:	0148      	lsls	r0, r1, #5
 800ef3c:	69f9      	ldr	r1, [r7, #28]
 800ef3e:	4401      	add	r1, r0
 800ef40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ef44:	4313      	orrs	r3, r2
 800ef46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ef48:	79fb      	ldrb	r3, [r7, #7]
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d10d      	bne.n	800ef6a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d009      	beq.n	800ef6a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	68d9      	ldr	r1, [r3, #12]
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	015a      	lsls	r2, r3, #5
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	4413      	add	r3, r2
 800ef62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef66:	460a      	mov	r2, r1
 800ef68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	78db      	ldrb	r3, [r3, #3]
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d128      	bne.n	800efc4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef78:	689b      	ldr	r3, [r3, #8]
 800ef7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d110      	bne.n	800efa4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	015a      	lsls	r2, r3, #5
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	4413      	add	r3, r2
 800ef8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	69ba      	ldr	r2, [r7, #24]
 800ef92:	0151      	lsls	r1, r2, #5
 800ef94:	69fa      	ldr	r2, [r7, #28]
 800ef96:	440a      	add	r2, r1
 800ef98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800efa0:	6013      	str	r3, [r2, #0]
 800efa2:	e00f      	b.n	800efc4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	015a      	lsls	r2, r3, #5
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	4413      	add	r3, r2
 800efac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	69ba      	ldr	r2, [r7, #24]
 800efb4:	0151      	lsls	r1, r2, #5
 800efb6:	69fa      	ldr	r2, [r7, #28]
 800efb8:	440a      	add	r2, r1
 800efba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800efbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800efc2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	015a      	lsls	r2, r3, #5
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	4413      	add	r3, r2
 800efcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	69ba      	ldr	r2, [r7, #24]
 800efd4:	0151      	lsls	r1, r2, #5
 800efd6:	69fa      	ldr	r2, [r7, #28]
 800efd8:	440a      	add	r2, r1
 800efda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800efde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800efe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3720      	adds	r7, #32
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	1ff80000 	.word	0x1ff80000

0800eff4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b087      	sub	sp, #28
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	4613      	mov	r3, r2
 800f000:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	785b      	ldrb	r3, [r3, #1]
 800f010:	2b01      	cmp	r3, #1
 800f012:	f040 80cd 	bne.w	800f1b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	695b      	ldr	r3, [r3, #20]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d132      	bne.n	800f084 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	015a      	lsls	r2, r3, #5
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	4413      	add	r3, r2
 800f026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f02a:	691b      	ldr	r3, [r3, #16]
 800f02c:	693a      	ldr	r2, [r7, #16]
 800f02e:	0151      	lsls	r1, r2, #5
 800f030:	697a      	ldr	r2, [r7, #20]
 800f032:	440a      	add	r2, r1
 800f034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f03c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f040:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	015a      	lsls	r2, r3, #5
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	4413      	add	r3, r2
 800f04a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f04e:	691b      	ldr	r3, [r3, #16]
 800f050:	693a      	ldr	r2, [r7, #16]
 800f052:	0151      	lsls	r1, r2, #5
 800f054:	697a      	ldr	r2, [r7, #20]
 800f056:	440a      	add	r2, r1
 800f058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f05c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f060:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	015a      	lsls	r2, r3, #5
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	4413      	add	r3, r2
 800f06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f06e:	691b      	ldr	r3, [r3, #16]
 800f070:	693a      	ldr	r2, [r7, #16]
 800f072:	0151      	lsls	r1, r2, #5
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	440a      	add	r2, r1
 800f078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f07c:	0cdb      	lsrs	r3, r3, #19
 800f07e:	04db      	lsls	r3, r3, #19
 800f080:	6113      	str	r3, [r2, #16]
 800f082:	e04e      	b.n	800f122 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	015a      	lsls	r2, r3, #5
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	4413      	add	r3, r2
 800f08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f090:	691b      	ldr	r3, [r3, #16]
 800f092:	693a      	ldr	r2, [r7, #16]
 800f094:	0151      	lsls	r1, r2, #5
 800f096:	697a      	ldr	r2, [r7, #20]
 800f098:	440a      	add	r2, r1
 800f09a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f09e:	0cdb      	lsrs	r3, r3, #19
 800f0a0:	04db      	lsls	r3, r3, #19
 800f0a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	015a      	lsls	r2, r3, #5
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	4413      	add	r3, r2
 800f0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	693a      	ldr	r2, [r7, #16]
 800f0b4:	0151      	lsls	r1, r2, #5
 800f0b6:	697a      	ldr	r2, [r7, #20]
 800f0b8:	440a      	add	r2, r1
 800f0ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f0c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f0c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	695a      	ldr	r2, [r3, #20]
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d903      	bls.n	800f0dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	689a      	ldr	r2, [r3, #8]
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	015a      	lsls	r2, r3, #5
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0e8:	691b      	ldr	r3, [r3, #16]
 800f0ea:	693a      	ldr	r2, [r7, #16]
 800f0ec:	0151      	lsls	r1, r2, #5
 800f0ee:	697a      	ldr	r2, [r7, #20]
 800f0f0:	440a      	add	r2, r1
 800f0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	015a      	lsls	r2, r3, #5
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	4413      	add	r3, r2
 800f104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f108:	691a      	ldr	r2, [r3, #16]
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	695b      	ldr	r3, [r3, #20]
 800f10e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f112:	6939      	ldr	r1, [r7, #16]
 800f114:	0148      	lsls	r0, r1, #5
 800f116:	6979      	ldr	r1, [r7, #20]
 800f118:	4401      	add	r1, r0
 800f11a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f11e:	4313      	orrs	r3, r2
 800f120:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f122:	79fb      	ldrb	r3, [r7, #7]
 800f124:	2b01      	cmp	r3, #1
 800f126:	d11e      	bne.n	800f166 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	691b      	ldr	r3, [r3, #16]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d009      	beq.n	800f144 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	015a      	lsls	r2, r3, #5
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	4413      	add	r3, r2
 800f138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f13c:	461a      	mov	r2, r3
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	015a      	lsls	r2, r3, #5
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	4413      	add	r3, r2
 800f14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	693a      	ldr	r2, [r7, #16]
 800f154:	0151      	lsls	r1, r2, #5
 800f156:	697a      	ldr	r2, [r7, #20]
 800f158:	440a      	add	r2, r1
 800f15a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f15e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f162:	6013      	str	r3, [r2, #0]
 800f164:	e092      	b.n	800f28c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	015a      	lsls	r2, r3, #5
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	4413      	add	r3, r2
 800f16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	693a      	ldr	r2, [r7, #16]
 800f176:	0151      	lsls	r1, r2, #5
 800f178:	697a      	ldr	r2, [r7, #20]
 800f17a:	440a      	add	r2, r1
 800f17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f180:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f184:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	695b      	ldr	r3, [r3, #20]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d07e      	beq.n	800f28c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	f003 030f 	and.w	r3, r3, #15
 800f19e:	2101      	movs	r1, #1
 800f1a0:	fa01 f303 	lsl.w	r3, r1, r3
 800f1a4:	6979      	ldr	r1, [r7, #20]
 800f1a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	634b      	str	r3, [r1, #52]	; 0x34
 800f1ae:	e06d      	b.n	800f28c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	015a      	lsls	r2, r3, #5
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	4413      	add	r3, r2
 800f1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	693a      	ldr	r2, [r7, #16]
 800f1c0:	0151      	lsls	r1, r2, #5
 800f1c2:	697a      	ldr	r2, [r7, #20]
 800f1c4:	440a      	add	r2, r1
 800f1c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1ca:	0cdb      	lsrs	r3, r3, #19
 800f1cc:	04db      	lsls	r3, r3, #19
 800f1ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1dc:	691b      	ldr	r3, [r3, #16]
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	0151      	lsls	r1, r2, #5
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	440a      	add	r2, r1
 800f1e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f1ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f1f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	695b      	ldr	r3, [r3, #20]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d003      	beq.n	800f204 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	689a      	ldr	r2, [r3, #8]
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	015a      	lsls	r2, r3, #5
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	4413      	add	r3, r2
 800f20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f210:	691b      	ldr	r3, [r3, #16]
 800f212:	693a      	ldr	r2, [r7, #16]
 800f214:	0151      	lsls	r1, r2, #5
 800f216:	697a      	ldr	r2, [r7, #20]
 800f218:	440a      	add	r2, r1
 800f21a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f21e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f222:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	015a      	lsls	r2, r3, #5
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	4413      	add	r3, r2
 800f22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f230:	691a      	ldr	r2, [r3, #16]
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f23a:	6939      	ldr	r1, [r7, #16]
 800f23c:	0148      	lsls	r0, r1, #5
 800f23e:	6979      	ldr	r1, [r7, #20]
 800f240:	4401      	add	r1, r0
 800f242:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f246:	4313      	orrs	r3, r2
 800f248:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f24a:	79fb      	ldrb	r3, [r7, #7]
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d10d      	bne.n	800f26c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d009      	beq.n	800f26c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	68d9      	ldr	r1, [r3, #12]
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	015a      	lsls	r2, r3, #5
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	4413      	add	r3, r2
 800f264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f268:	460a      	mov	r2, r1
 800f26a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	015a      	lsls	r2, r3, #5
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	4413      	add	r3, r2
 800f274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	693a      	ldr	r2, [r7, #16]
 800f27c:	0151      	lsls	r1, r2, #5
 800f27e:	697a      	ldr	r2, [r7, #20]
 800f280:	440a      	add	r2, r1
 800f282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f286:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f28a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f28c:	2300      	movs	r3, #0
}
 800f28e:	4618      	mov	r0, r3
 800f290:	371c      	adds	r7, #28
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f29a:	b480      	push	{r7}
 800f29c:	b089      	sub	sp, #36	; 0x24
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	60f8      	str	r0, [r7, #12]
 800f2a2:	60b9      	str	r1, [r7, #8]
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	71fb      	strb	r3, [r7, #7]
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f2b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d123      	bne.n	800f308 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f2c0:	88bb      	ldrh	r3, [r7, #4]
 800f2c2:	3303      	adds	r3, #3
 800f2c4:	089b      	lsrs	r3, r3, #2
 800f2c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	61bb      	str	r3, [r7, #24]
 800f2cc:	e018      	b.n	800f300 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f2ce:	79fb      	ldrb	r3, [r7, #7]
 800f2d0:	031a      	lsls	r2, r3, #12
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2da:	461a      	mov	r2, r3
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	61bb      	str	r3, [r7, #24]
 800f300:	69ba      	ldr	r2, [r7, #24]
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	429a      	cmp	r2, r3
 800f306:	d3e2      	bcc.n	800f2ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f308:	2300      	movs	r3, #0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3724      	adds	r7, #36	; 0x24
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr

0800f316 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f316:	b480      	push	{r7}
 800f318:	b08b      	sub	sp, #44	; 0x2c
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	60f8      	str	r0, [r7, #12]
 800f31e:	60b9      	str	r1, [r7, #8]
 800f320:	4613      	mov	r3, r2
 800f322:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f32c:	88fb      	ldrh	r3, [r7, #6]
 800f32e:	089b      	lsrs	r3, r3, #2
 800f330:	b29b      	uxth	r3, r3
 800f332:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f334:	88fb      	ldrh	r3, [r7, #6]
 800f336:	f003 0303 	and.w	r3, r3, #3
 800f33a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f33c:	2300      	movs	r3, #0
 800f33e:	623b      	str	r3, [r7, #32]
 800f340:	e014      	b.n	800f36c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34c:	601a      	str	r2, [r3, #0]
    pDest++;
 800f34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f350:	3301      	adds	r3, #1
 800f352:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	3301      	adds	r3, #1
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35c:	3301      	adds	r3, #1
 800f35e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f362:	3301      	adds	r3, #1
 800f364:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f366:	6a3b      	ldr	r3, [r7, #32]
 800f368:	3301      	adds	r3, #1
 800f36a:	623b      	str	r3, [r7, #32]
 800f36c:	6a3a      	ldr	r2, [r7, #32]
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	429a      	cmp	r2, r3
 800f372:	d3e6      	bcc.n	800f342 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f374:	8bfb      	ldrh	r3, [r7, #30]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d01e      	beq.n	800f3b8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f37a:	2300      	movs	r3, #0
 800f37c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f37e:	69bb      	ldr	r3, [r7, #24]
 800f380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f384:	461a      	mov	r2, r3
 800f386:	f107 0310 	add.w	r3, r7, #16
 800f38a:	6812      	ldr	r2, [r2, #0]
 800f38c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f38e:	693a      	ldr	r2, [r7, #16]
 800f390:	6a3b      	ldr	r3, [r7, #32]
 800f392:	b2db      	uxtb	r3, r3
 800f394:	00db      	lsls	r3, r3, #3
 800f396:	fa22 f303 	lsr.w	r3, r2, r3
 800f39a:	b2da      	uxtb	r2, r3
 800f39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39e:	701a      	strb	r2, [r3, #0]
      i++;
 800f3a0:	6a3b      	ldr	r3, [r7, #32]
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	623b      	str	r3, [r7, #32]
      pDest++;
 800f3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f3ac:	8bfb      	ldrh	r3, [r7, #30]
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f3b2:	8bfb      	ldrh	r3, [r7, #30]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1ea      	bne.n	800f38e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	372c      	adds	r7, #44	; 0x2c
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr

0800f3c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f3c6:	b480      	push	{r7}
 800f3c8:	b085      	sub	sp, #20
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
 800f3ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	785b      	ldrb	r3, [r3, #1]
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d12c      	bne.n	800f43c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	015a      	lsls	r2, r3, #5
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	db12      	blt.n	800f41a <USB_EPSetStall+0x54>
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00f      	beq.n	800f41a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	015a      	lsls	r2, r3, #5
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	4413      	add	r3, r2
 800f402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68ba      	ldr	r2, [r7, #8]
 800f40a:	0151      	lsls	r1, r2, #5
 800f40c:	68fa      	ldr	r2, [r7, #12]
 800f40e:	440a      	add	r2, r1
 800f410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f414:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f418:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	015a      	lsls	r2, r3, #5
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	4413      	add	r3, r2
 800f422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	0151      	lsls	r1, r2, #5
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	440a      	add	r2, r1
 800f430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f438:	6013      	str	r3, [r2, #0]
 800f43a:	e02b      	b.n	800f494 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	015a      	lsls	r2, r3, #5
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	4413      	add	r3, r2
 800f444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	db12      	blt.n	800f474 <USB_EPSetStall+0xae>
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d00f      	beq.n	800f474 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	015a      	lsls	r2, r3, #5
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	4413      	add	r3, r2
 800f45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	68ba      	ldr	r2, [r7, #8]
 800f464:	0151      	lsls	r1, r2, #5
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	440a      	add	r2, r1
 800f46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f46e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f472:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	015a      	lsls	r2, r3, #5
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	4413      	add	r3, r2
 800f47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	68ba      	ldr	r2, [r7, #8]
 800f484:	0151      	lsls	r1, r2, #5
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	440a      	add	r2, r1
 800f48a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f48e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f492:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f494:	2300      	movs	r3, #0
}
 800f496:	4618      	mov	r0, r3
 800f498:	3714      	adds	r7, #20
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr

0800f4a2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f4a2:	b480      	push	{r7}
 800f4a4:	b085      	sub	sp, #20
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
 800f4aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	785b      	ldrb	r3, [r3, #1]
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d128      	bne.n	800f510 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	015a      	lsls	r2, r3, #5
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	68ba      	ldr	r2, [r7, #8]
 800f4ce:	0151      	lsls	r1, r2, #5
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	440a      	add	r2, r1
 800f4d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f4dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	78db      	ldrb	r3, [r3, #3]
 800f4e2:	2b03      	cmp	r3, #3
 800f4e4:	d003      	beq.n	800f4ee <USB_EPClearStall+0x4c>
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	78db      	ldrb	r3, [r3, #3]
 800f4ea:	2b02      	cmp	r3, #2
 800f4ec:	d138      	bne.n	800f560 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	015a      	lsls	r2, r3, #5
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	0151      	lsls	r1, r2, #5
 800f500:	68fa      	ldr	r2, [r7, #12]
 800f502:	440a      	add	r2, r1
 800f504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f50c:	6013      	str	r3, [r2, #0]
 800f50e:	e027      	b.n	800f560 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	015a      	lsls	r2, r3, #5
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	4413      	add	r3, r2
 800f518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	0151      	lsls	r1, r2, #5
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	440a      	add	r2, r1
 800f526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f52a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f52e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	78db      	ldrb	r3, [r3, #3]
 800f534:	2b03      	cmp	r3, #3
 800f536:	d003      	beq.n	800f540 <USB_EPClearStall+0x9e>
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	78db      	ldrb	r3, [r3, #3]
 800f53c:	2b02      	cmp	r3, #2
 800f53e:	d10f      	bne.n	800f560 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	015a      	lsls	r2, r3, #5
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	4413      	add	r3, r2
 800f548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	0151      	lsls	r1, r2, #5
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	440a      	add	r2, r1
 800f556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f55a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f55e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f560:	2300      	movs	r3, #0
}
 800f562:	4618      	mov	r0, r3
 800f564:	3714      	adds	r7, #20
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr

0800f56e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f56e:	b480      	push	{r7}
 800f570:	b085      	sub	sp, #20
 800f572:	af00      	add	r7, sp, #0
 800f574:	6078      	str	r0, [r7, #4]
 800f576:	460b      	mov	r3, r1
 800f578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f58c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f590:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	78fb      	ldrb	r3, [r7, #3]
 800f59c:	011b      	lsls	r3, r3, #4
 800f59e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f5a2:	68f9      	ldr	r1, [r7, #12]
 800f5a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f5ac:	2300      	movs	r3, #0
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3714      	adds	r7, #20
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr

0800f5ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f5ba:	b480      	push	{r7}
 800f5bc:	b085      	sub	sp, #20
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f5d4:	f023 0303 	bic.w	r3, r3, #3
 800f5d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	68fa      	ldr	r2, [r7, #12]
 800f5e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f5e8:	f023 0302 	bic.w	r3, r3, #2
 800f5ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f5ee:	2300      	movs	r3, #0
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3714      	adds	r7, #20
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f616:	f023 0303 	bic.w	r3, r3, #3
 800f61a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	68fa      	ldr	r2, [r7, #12]
 800f626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f62a:	f043 0302 	orr.w	r3, r3, #2
 800f62e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f630:	2300      	movs	r3, #0
}
 800f632:	4618      	mov	r0, r3
 800f634:	3714      	adds	r7, #20
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr

0800f63e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f63e:	b480      	push	{r7}
 800f640:	b085      	sub	sp, #20
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	695b      	ldr	r3, [r3, #20]
 800f64a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	699b      	ldr	r3, [r3, #24]
 800f650:	68fa      	ldr	r2, [r7, #12]
 800f652:	4013      	ands	r3, r2
 800f654:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f656:	68fb      	ldr	r3, [r7, #12]
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3714      	adds	r7, #20
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f676:	699b      	ldr	r3, [r3, #24]
 800f678:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f680:	69db      	ldr	r3, [r3, #28]
 800f682:	68ba      	ldr	r2, [r7, #8]
 800f684:	4013      	ands	r3, r2
 800f686:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	0c1b      	lsrs	r3, r3, #16
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3714      	adds	r7, #20
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6aa:	699b      	ldr	r3, [r3, #24]
 800f6ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6b4:	69db      	ldr	r3, [r3, #28]
 800f6b6:	68ba      	ldr	r2, [r7, #8]
 800f6b8:	4013      	ands	r3, r2
 800f6ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	b29b      	uxth	r3, r3
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3714      	adds	r7, #20
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b085      	sub	sp, #20
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f6dc:	78fb      	ldrb	r3, [r7, #3]
 800f6de:	015a      	lsls	r2, r3, #5
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6f2:	695b      	ldr	r3, [r3, #20]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	4013      	ands	r3, r2
 800f6f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f6fa:	68bb      	ldr	r3, [r7, #8]
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3714      	adds	r7, #20
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f708:	b480      	push	{r7}
 800f70a:	b087      	sub	sp, #28
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	460b      	mov	r3, r1
 800f712:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f72a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f72c:	78fb      	ldrb	r3, [r7, #3]
 800f72e:	f003 030f 	and.w	r3, r3, #15
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	fa22 f303 	lsr.w	r3, r2, r3
 800f738:	01db      	lsls	r3, r3, #7
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	693a      	ldr	r2, [r7, #16]
 800f73e:	4313      	orrs	r3, r2
 800f740:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f742:	78fb      	ldrb	r3, [r7, #3]
 800f744:	015a      	lsls	r2, r3, #5
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	4413      	add	r3, r2
 800f74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f74e:	689b      	ldr	r3, [r3, #8]
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	4013      	ands	r3, r2
 800f754:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f756:	68bb      	ldr	r3, [r7, #8]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	371c      	adds	r7, #28
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	695b      	ldr	r3, [r3, #20]
 800f770:	f003 0301 	and.w	r3, r3, #1
}
 800f774:	4618      	mov	r0, r3
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f780:	b480      	push	{r7}
 800f782:	b085      	sub	sp, #20
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f79a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f79e:	f023 0307 	bic.w	r3, r3, #7
 800f7a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	68fa      	ldr	r2, [r7, #12]
 800f7ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f7b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f7b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f7b8:	2300      	movs	r3, #0
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3714      	adds	r7, #20
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr
	...

0800f7c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b087      	sub	sp, #28
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	460b      	mov	r3, r1
 800f7d2:	607a      	str	r2, [r7, #4]
 800f7d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	333c      	adds	r3, #60	; 0x3c
 800f7de:	3304      	adds	r3, #4
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	4a26      	ldr	r2, [pc, #152]	; (800f880 <USB_EP0_OutStart+0xb8>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d90a      	bls.n	800f802 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7fc:	d101      	bne.n	800f802 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	e037      	b.n	800f872 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f808:	461a      	mov	r2, r3
 800f80a:	2300      	movs	r3, #0
 800f80c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f814:	691b      	ldr	r3, [r3, #16]
 800f816:	697a      	ldr	r2, [r7, #20]
 800f818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f81c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f820:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f828:	691b      	ldr	r3, [r3, #16]
 800f82a:	697a      	ldr	r2, [r7, #20]
 800f82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f830:	f043 0318 	orr.w	r3, r3, #24
 800f834:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f83c:	691b      	ldr	r3, [r3, #16]
 800f83e:	697a      	ldr	r2, [r7, #20]
 800f840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f844:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f848:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f84a:	7afb      	ldrb	r3, [r7, #11]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d10f      	bne.n	800f870 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f856:	461a      	mov	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f86a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f86e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f870:	2300      	movs	r3, #0
}
 800f872:	4618      	mov	r0, r3
 800f874:	371c      	adds	r7, #28
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr
 800f87e:	bf00      	nop
 800f880:	4f54300a 	.word	0x4f54300a

0800f884 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f88c:	2300      	movs	r3, #0
 800f88e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	3301      	adds	r3, #1
 800f894:	60fb      	str	r3, [r7, #12]
 800f896:	4a13      	ldr	r2, [pc, #76]	; (800f8e4 <USB_CoreReset+0x60>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d901      	bls.n	800f8a0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800f89c:	2303      	movs	r3, #3
 800f89e:	e01a      	b.n	800f8d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	daf3      	bge.n	800f890 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	691b      	ldr	r3, [r3, #16]
 800f8b0:	f043 0201 	orr.w	r2, r3, #1
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	60fb      	str	r3, [r7, #12]
 800f8be:	4a09      	ldr	r2, [pc, #36]	; (800f8e4 <USB_CoreReset+0x60>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d901      	bls.n	800f8c8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800f8c4:	2303      	movs	r3, #3
 800f8c6:	e006      	b.n	800f8d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	691b      	ldr	r3, [r3, #16]
 800f8cc:	f003 0301 	and.w	r3, r3, #1
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d0f1      	beq.n	800f8b8 <USB_CoreReset+0x34>

  return HAL_OK;
 800f8d4:	2300      	movs	r3, #0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3714      	adds	r7, #20
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr
 800f8e2:	bf00      	nop
 800f8e4:	00030d40 	.word	0x00030d40

0800f8e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f8ec:	4904      	ldr	r1, [pc, #16]	; (800f900 <MX_FATFS_Init+0x18>)
 800f8ee:	4805      	ldr	r0, [pc, #20]	; (800f904 <MX_FATFS_Init+0x1c>)
 800f8f0:	f004 fffe 	bl	80148f0 <FATFS_LinkDriver>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	4b03      	ldr	r3, [pc, #12]	; (800f908 <MX_FATFS_Init+0x20>)
 800f8fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f8fc:	bf00      	nop
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	20007070 	.word	0x20007070
 800f904:	20000068 	.word	0x20000068
 800f908:	20007074 	.word	0x20007074

0800f90c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f90c:	b480      	push	{r7}
 800f90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f910:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f912:	4618      	mov	r0, r3
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	4603      	mov	r3, r0
 800f924:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800f926:	79fb      	ldrb	r3, [r7, #7]
 800f928:	4618      	mov	r0, r3
 800f92a:	f000 f9dd 	bl	800fce8 <USER_SPI_initialize>
 800f92e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800f930:	4618      	mov	r0, r3
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	4603      	mov	r3, r0
 800f940:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800f942:	79fb      	ldrb	r3, [r7, #7]
 800f944:	4618      	mov	r0, r3
 800f946:	f000 fab9 	bl	800febc <USER_SPI_status>
 800f94a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3708      	adds	r7, #8
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60b9      	str	r1, [r7, #8]
 800f95c:	607a      	str	r2, [r7, #4]
 800f95e:	603b      	str	r3, [r7, #0]
 800f960:	4603      	mov	r3, r0
 800f962:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800f964:	7bf8      	ldrb	r0, [r7, #15]
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	68b9      	ldr	r1, [r7, #8]
 800f96c:	f000 fabc 	bl	800fee8 <USER_SPI_read>
 800f970:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800f972:	4618      	mov	r0, r3
 800f974:	3710      	adds	r7, #16
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}

0800f97a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f97a:	b580      	push	{r7, lr}
 800f97c:	b084      	sub	sp, #16
 800f97e:	af00      	add	r7, sp, #0
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
 800f984:	603b      	str	r3, [r7, #0]
 800f986:	4603      	mov	r3, r0
 800f988:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800f98a:	7bf8      	ldrb	r0, [r7, #15]
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	68b9      	ldr	r1, [r7, #8]
 800f992:	f000 fb0f 	bl	800ffb4 <USER_SPI_write>
 800f996:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	603a      	str	r2, [r7, #0]
 800f9aa:	71fb      	strb	r3, [r7, #7]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800f9b0:	79b9      	ldrb	r1, [r7, #6]
 800f9b2:	79fb      	ldrb	r3, [r7, #7]
 800f9b4:	683a      	ldr	r2, [r7, #0]
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f000 fb78 	bl	80100ac <USER_SPI_ioctl>
 800f9bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3708      	adds	r7, #8
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
	...

0800f9c8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800f9d0:	f7f7 fc02 	bl	80071d8 <HAL_GetTick>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	4a04      	ldr	r2, [pc, #16]	; (800f9e8 <SPI_Timer_On+0x20>)
 800f9d8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800f9da:	4a04      	ldr	r2, [pc, #16]	; (800f9ec <SPI_Timer_On+0x24>)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6013      	str	r3, [r2, #0]
}
 800f9e0:	bf00      	nop
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	200074dc 	.word	0x200074dc
 800f9ec:	200074e0 	.word	0x200074e0

0800f9f0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800f9f4:	f7f7 fbf0 	bl	80071d8 <HAL_GetTick>
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	4b06      	ldr	r3, [pc, #24]	; (800fa14 <SPI_Timer_Status+0x24>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	1ad2      	subs	r2, r2, r3
 800fa00:	4b05      	ldr	r3, [pc, #20]	; (800fa18 <SPI_Timer_Status+0x28>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	bf34      	ite	cc
 800fa08:	2301      	movcc	r3, #1
 800fa0a:	2300      	movcs	r3, #0
 800fa0c:	b2db      	uxtb	r3, r3
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	200074dc 	.word	0x200074dc
 800fa18:	200074e0 	.word	0x200074e0

0800fa1c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b086      	sub	sp, #24
 800fa20:	af02      	add	r7, sp, #8
 800fa22:	4603      	mov	r3, r0
 800fa24:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800fa26:	f107 020f 	add.w	r2, r7, #15
 800fa2a:	1df9      	adds	r1, r7, #7
 800fa2c:	2332      	movs	r3, #50	; 0x32
 800fa2e:	9300      	str	r3, [sp, #0]
 800fa30:	2301      	movs	r3, #1
 800fa32:	4804      	ldr	r0, [pc, #16]	; (800fa44 <xchg_spi+0x28>)
 800fa34:	f7fc fca8 	bl	800c388 <HAL_SPI_TransmitReceive>
    return rxDat;
 800fa38:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3710      	adds	r7, #16
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	20005f50 	.word	0x20005f50

0800fa48 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800fa48:	b590      	push	{r4, r7, lr}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800fa52:	2300      	movs	r3, #0
 800fa54:	60fb      	str	r3, [r7, #12]
 800fa56:	e00a      	b.n	800fa6e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	18d4      	adds	r4, r2, r3
 800fa5e:	20ff      	movs	r0, #255	; 0xff
 800fa60:	f7ff ffdc 	bl	800fa1c <xchg_spi>
 800fa64:	4603      	mov	r3, r0
 800fa66:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	60fb      	str	r3, [r7, #12]
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d3f0      	bcc.n	800fa58 <rcvr_spi_multi+0x10>
	}
}
 800fa76:	bf00      	nop
 800fa78:	bf00      	nop
 800fa7a:	3714      	adds	r7, #20
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd90      	pop	{r4, r7, pc}

0800fa80 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	60fb      	str	r3, [r7, #12]
 800fa8e:	e009      	b.n	800faa4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	4413      	add	r3, r2
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff ffbf 	bl	800fa1c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	3301      	adds	r3, #1
 800faa2:	60fb      	str	r3, [r7, #12]
 800faa4:	68fa      	ldr	r2, [r7, #12]
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d3f1      	bcc.n	800fa90 <xmit_spi_multi+0x10>
	}
}
 800faac:	bf00      	nop
 800faae:	bf00      	nop
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800fab6:	b580      	push	{r7, lr}
 800fab8:	b086      	sub	sp, #24
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800fabe:	f7f7 fb8b 	bl	80071d8 <HAL_GetTick>
 800fac2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800fac8:	20ff      	movs	r0, #255	; 0xff
 800faca:	f7ff ffa7 	bl	800fa1c <xchg_spi>
 800face:	4603      	mov	r3, r0
 800fad0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800fad2:	7bfb      	ldrb	r3, [r7, #15]
 800fad4:	2bff      	cmp	r3, #255	; 0xff
 800fad6:	d007      	beq.n	800fae8 <wait_ready+0x32>
 800fad8:	f7f7 fb7e 	bl	80071d8 <HAL_GetTick>
 800fadc:	4602      	mov	r2, r0
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	1ad3      	subs	r3, r2, r3
 800fae2:	693a      	ldr	r2, [r7, #16]
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d8ef      	bhi.n	800fac8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800fae8:	7bfb      	ldrb	r3, [r7, #15]
 800faea:	2bff      	cmp	r3, #255	; 0xff
 800faec:	bf0c      	ite	eq
 800faee:	2301      	moveq	r3, #1
 800faf0:	2300      	movne	r3, #0
 800faf2:	b2db      	uxtb	r3, r3
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3718      	adds	r7, #24
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800fb00:	2201      	movs	r2, #1
 800fb02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fb06:	4804      	ldr	r0, [pc, #16]	; (800fb18 <despiselect+0x1c>)
 800fb08:	f7f8 fa7e 	bl	8008008 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800fb0c:	20ff      	movs	r0, #255	; 0xff
 800fb0e:	f7ff ff85 	bl	800fa1c <xchg_spi>

}
 800fb12:	bf00      	nop
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	40021400 	.word	0x40021400

0800fb1c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800fb20:	2200      	movs	r2, #0
 800fb22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fb26:	480a      	ldr	r0, [pc, #40]	; (800fb50 <spiselect+0x34>)
 800fb28:	f7f8 fa6e 	bl	8008008 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800fb2c:	20ff      	movs	r0, #255	; 0xff
 800fb2e:	f7ff ff75 	bl	800fa1c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800fb32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fb36:	f7ff ffbe 	bl	800fab6 <wait_ready>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d001      	beq.n	800fb44 <spiselect+0x28>
 800fb40:	2301      	movs	r3, #1
 800fb42:	e002      	b.n	800fb4a <spiselect+0x2e>

	despiselect();
 800fb44:	f7ff ffda 	bl	800fafc <despiselect>
	return 0;	/* Timeout */
 800fb48:	2300      	movs	r3, #0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	40021400 	.word	0x40021400

0800fb54 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b084      	sub	sp, #16
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800fb5e:	20c8      	movs	r0, #200	; 0xc8
 800fb60:	f7ff ff32 	bl	800f9c8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800fb64:	20ff      	movs	r0, #255	; 0xff
 800fb66:	f7ff ff59 	bl	800fa1c <xchg_spi>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800fb6e:	7bfb      	ldrb	r3, [r7, #15]
 800fb70:	2bff      	cmp	r3, #255	; 0xff
 800fb72:	d104      	bne.n	800fb7e <rcvr_datablock+0x2a>
 800fb74:	f7ff ff3c 	bl	800f9f0 <SPI_Timer_Status>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d1f2      	bne.n	800fb64 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800fb7e:	7bfb      	ldrb	r3, [r7, #15]
 800fb80:	2bfe      	cmp	r3, #254	; 0xfe
 800fb82:	d001      	beq.n	800fb88 <rcvr_datablock+0x34>
 800fb84:	2300      	movs	r3, #0
 800fb86:	e00a      	b.n	800fb9e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800fb88:	6839      	ldr	r1, [r7, #0]
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f7ff ff5c 	bl	800fa48 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800fb90:	20ff      	movs	r0, #255	; 0xff
 800fb92:	f7ff ff43 	bl	800fa1c <xchg_spi>
 800fb96:	20ff      	movs	r0, #255	; 0xff
 800fb98:	f7ff ff40 	bl	800fa1c <xchg_spi>

	return 1;						/* Function succeeded */
 800fb9c:	2301      	movs	r3, #1
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b084      	sub	sp, #16
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
 800fbae:	460b      	mov	r3, r1
 800fbb0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800fbb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fbb6:	f7ff ff7e 	bl	800fab6 <wait_ready>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d101      	bne.n	800fbc4 <xmit_datablock+0x1e>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	e01e      	b.n	800fc02 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800fbc4:	78fb      	ldrb	r3, [r7, #3]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7ff ff28 	bl	800fa1c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800fbcc:	78fb      	ldrb	r3, [r7, #3]
 800fbce:	2bfd      	cmp	r3, #253	; 0xfd
 800fbd0:	d016      	beq.n	800fc00 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800fbd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f7ff ff52 	bl	800fa80 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800fbdc:	20ff      	movs	r0, #255	; 0xff
 800fbde:	f7ff ff1d 	bl	800fa1c <xchg_spi>
 800fbe2:	20ff      	movs	r0, #255	; 0xff
 800fbe4:	f7ff ff1a 	bl	800fa1c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800fbe8:	20ff      	movs	r0, #255	; 0xff
 800fbea:	f7ff ff17 	bl	800fa1c <xchg_spi>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800fbf2:	7bfb      	ldrb	r3, [r7, #15]
 800fbf4:	f003 031f 	and.w	r3, r3, #31
 800fbf8:	2b05      	cmp	r3, #5
 800fbfa:	d001      	beq.n	800fc00 <xmit_datablock+0x5a>
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	e000      	b.n	800fc02 <xmit_datablock+0x5c>
	}
	return 1;
 800fc00:	2301      	movs	r3, #1
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}

0800fc0a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800fc0a:	b580      	push	{r7, lr}
 800fc0c:	b084      	sub	sp, #16
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	4603      	mov	r3, r0
 800fc12:	6039      	str	r1, [r7, #0]
 800fc14:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800fc16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	da0e      	bge.n	800fc3c <send_cmd+0x32>
		cmd &= 0x7F;
 800fc1e:	79fb      	ldrb	r3, [r7, #7]
 800fc20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc24:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800fc26:	2100      	movs	r1, #0
 800fc28:	2037      	movs	r0, #55	; 0x37
 800fc2a:	f7ff ffee 	bl	800fc0a <send_cmd>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800fc32:	7bbb      	ldrb	r3, [r7, #14]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d901      	bls.n	800fc3c <send_cmd+0x32>
 800fc38:	7bbb      	ldrb	r3, [r7, #14]
 800fc3a:	e051      	b.n	800fce0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800fc3c:	79fb      	ldrb	r3, [r7, #7]
 800fc3e:	2b0c      	cmp	r3, #12
 800fc40:	d008      	beq.n	800fc54 <send_cmd+0x4a>
		despiselect();
 800fc42:	f7ff ff5b 	bl	800fafc <despiselect>
		if (!spiselect()) return 0xFF;
 800fc46:	f7ff ff69 	bl	800fb1c <spiselect>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d101      	bne.n	800fc54 <send_cmd+0x4a>
 800fc50:	23ff      	movs	r3, #255	; 0xff
 800fc52:	e045      	b.n	800fce0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800fc54:	79fb      	ldrb	r3, [r7, #7]
 800fc56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7ff fedd 	bl	800fa1c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	0e1b      	lsrs	r3, r3, #24
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7ff fed7 	bl	800fa1c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	0c1b      	lsrs	r3, r3, #16
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7ff fed1 	bl	800fa1c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	0a1b      	lsrs	r3, r3, #8
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7ff fecb 	bl	800fa1c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7ff fec6 	bl	800fa1c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800fc90:	2301      	movs	r3, #1
 800fc92:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800fc94:	79fb      	ldrb	r3, [r7, #7]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d101      	bne.n	800fc9e <send_cmd+0x94>
 800fc9a:	2395      	movs	r3, #149	; 0x95
 800fc9c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	2b08      	cmp	r3, #8
 800fca2:	d101      	bne.n	800fca8 <send_cmd+0x9e>
 800fca4:	2387      	movs	r3, #135	; 0x87
 800fca6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800fca8:	7bfb      	ldrb	r3, [r7, #15]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7ff feb6 	bl	800fa1c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800fcb0:	79fb      	ldrb	r3, [r7, #7]
 800fcb2:	2b0c      	cmp	r3, #12
 800fcb4:	d102      	bne.n	800fcbc <send_cmd+0xb2>
 800fcb6:	20ff      	movs	r0, #255	; 0xff
 800fcb8:	f7ff feb0 	bl	800fa1c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800fcbc:	230a      	movs	r3, #10
 800fcbe:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800fcc0:	20ff      	movs	r0, #255	; 0xff
 800fcc2:	f7ff feab 	bl	800fa1c <xchg_spi>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800fcca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	da05      	bge.n	800fcde <send_cmd+0xd4>
 800fcd2:	7bfb      	ldrb	r3, [r7, #15]
 800fcd4:	3b01      	subs	r3, #1
 800fcd6:	73fb      	strb	r3, [r7, #15]
 800fcd8:	7bfb      	ldrb	r3, [r7, #15]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d1f0      	bne.n	800fcc0 <send_cmd+0xb6>

	return res;							/* Return received response */
 800fcde:	7bbb      	ldrb	r3, [r7, #14]
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800fce8:	b590      	push	{r4, r7, lr}
 800fcea:	b085      	sub	sp, #20
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800fcf2:	79fb      	ldrb	r3, [r7, #7]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d001      	beq.n	800fcfc <USER_SPI_initialize+0x14>
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e0d4      	b.n	800fea6 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800fcfc:	4b6c      	ldr	r3, [pc, #432]	; (800feb0 <USER_SPI_initialize+0x1c8>)
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	f003 0302 	and.w	r3, r3, #2
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d003      	beq.n	800fd12 <USER_SPI_initialize+0x2a>
 800fd0a:	4b69      	ldr	r3, [pc, #420]	; (800feb0 <USER_SPI_initialize+0x1c8>)
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	e0c9      	b.n	800fea6 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800fd12:	4b68      	ldr	r3, [pc, #416]	; (800feb4 <USER_SPI_initialize+0x1cc>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	4b66      	ldr	r3, [pc, #408]	; (800feb4 <USER_SPI_initialize+0x1cc>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800fd20:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800fd22:	230a      	movs	r3, #10
 800fd24:	73fb      	strb	r3, [r7, #15]
 800fd26:	e005      	b.n	800fd34 <USER_SPI_initialize+0x4c>
 800fd28:	20ff      	movs	r0, #255	; 0xff
 800fd2a:	f7ff fe77 	bl	800fa1c <xchg_spi>
 800fd2e:	7bfb      	ldrb	r3, [r7, #15]
 800fd30:	3b01      	subs	r3, #1
 800fd32:	73fb      	strb	r3, [r7, #15]
 800fd34:	7bfb      	ldrb	r3, [r7, #15]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d1f6      	bne.n	800fd28 <USER_SPI_initialize+0x40>

	ty = 0;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800fd3e:	2100      	movs	r1, #0
 800fd40:	2000      	movs	r0, #0
 800fd42:	f7ff ff62 	bl	800fc0a <send_cmd>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	f040 808b 	bne.w	800fe64 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800fd4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fd52:	f7ff fe39 	bl	800f9c8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800fd56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd5a:	2008      	movs	r0, #8
 800fd5c:	f7ff ff55 	bl	800fc0a <send_cmd>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d151      	bne.n	800fe0a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800fd66:	2300      	movs	r3, #0
 800fd68:	73fb      	strb	r3, [r7, #15]
 800fd6a:	e00d      	b.n	800fd88 <USER_SPI_initialize+0xa0>
 800fd6c:	7bfc      	ldrb	r4, [r7, #15]
 800fd6e:	20ff      	movs	r0, #255	; 0xff
 800fd70:	f7ff fe54 	bl	800fa1c <xchg_spi>
 800fd74:	4603      	mov	r3, r0
 800fd76:	461a      	mov	r2, r3
 800fd78:	f107 0310 	add.w	r3, r7, #16
 800fd7c:	4423      	add	r3, r4
 800fd7e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800fd82:	7bfb      	ldrb	r3, [r7, #15]
 800fd84:	3301      	adds	r3, #1
 800fd86:	73fb      	strb	r3, [r7, #15]
 800fd88:	7bfb      	ldrb	r3, [r7, #15]
 800fd8a:	2b03      	cmp	r3, #3
 800fd8c:	d9ee      	bls.n	800fd6c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800fd8e:	7abb      	ldrb	r3, [r7, #10]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d167      	bne.n	800fe64 <USER_SPI_initialize+0x17c>
 800fd94:	7afb      	ldrb	r3, [r7, #11]
 800fd96:	2baa      	cmp	r3, #170	; 0xaa
 800fd98:	d164      	bne.n	800fe64 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800fd9a:	bf00      	nop
 800fd9c:	f7ff fe28 	bl	800f9f0 <SPI_Timer_Status>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d007      	beq.n	800fdb6 <USER_SPI_initialize+0xce>
 800fda6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800fdaa:	20a9      	movs	r0, #169	; 0xa9
 800fdac:	f7ff ff2d 	bl	800fc0a <send_cmd>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d1f2      	bne.n	800fd9c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800fdb6:	f7ff fe1b 	bl	800f9f0 <SPI_Timer_Status>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d051      	beq.n	800fe64 <USER_SPI_initialize+0x17c>
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	203a      	movs	r0, #58	; 0x3a
 800fdc4:	f7ff ff21 	bl	800fc0a <send_cmd>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d14a      	bne.n	800fe64 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800fdce:	2300      	movs	r3, #0
 800fdd0:	73fb      	strb	r3, [r7, #15]
 800fdd2:	e00d      	b.n	800fdf0 <USER_SPI_initialize+0x108>
 800fdd4:	7bfc      	ldrb	r4, [r7, #15]
 800fdd6:	20ff      	movs	r0, #255	; 0xff
 800fdd8:	f7ff fe20 	bl	800fa1c <xchg_spi>
 800fddc:	4603      	mov	r3, r0
 800fdde:	461a      	mov	r2, r3
 800fde0:	f107 0310 	add.w	r3, r7, #16
 800fde4:	4423      	add	r3, r4
 800fde6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800fdea:	7bfb      	ldrb	r3, [r7, #15]
 800fdec:	3301      	adds	r3, #1
 800fdee:	73fb      	strb	r3, [r7, #15]
 800fdf0:	7bfb      	ldrb	r3, [r7, #15]
 800fdf2:	2b03      	cmp	r3, #3
 800fdf4:	d9ee      	bls.n	800fdd4 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800fdf6:	7a3b      	ldrb	r3, [r7, #8]
 800fdf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d001      	beq.n	800fe04 <USER_SPI_initialize+0x11c>
 800fe00:	230c      	movs	r3, #12
 800fe02:	e000      	b.n	800fe06 <USER_SPI_initialize+0x11e>
 800fe04:	2304      	movs	r3, #4
 800fe06:	737b      	strb	r3, [r7, #13]
 800fe08:	e02c      	b.n	800fe64 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	20a9      	movs	r0, #169	; 0xa9
 800fe0e:	f7ff fefc 	bl	800fc0a <send_cmd>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d804      	bhi.n	800fe22 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800fe18:	2302      	movs	r3, #2
 800fe1a:	737b      	strb	r3, [r7, #13]
 800fe1c:	23a9      	movs	r3, #169	; 0xa9
 800fe1e:	73bb      	strb	r3, [r7, #14]
 800fe20:	e003      	b.n	800fe2a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800fe22:	2301      	movs	r3, #1
 800fe24:	737b      	strb	r3, [r7, #13]
 800fe26:	2301      	movs	r3, #1
 800fe28:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800fe2a:	bf00      	nop
 800fe2c:	f7ff fde0 	bl	800f9f0 <SPI_Timer_Status>
 800fe30:	4603      	mov	r3, r0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d007      	beq.n	800fe46 <USER_SPI_initialize+0x15e>
 800fe36:	7bbb      	ldrb	r3, [r7, #14]
 800fe38:	2100      	movs	r1, #0
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7ff fee5 	bl	800fc0a <send_cmd>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1f2      	bne.n	800fe2c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800fe46:	f7ff fdd3 	bl	800f9f0 <SPI_Timer_Status>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d007      	beq.n	800fe60 <USER_SPI_initialize+0x178>
 800fe50:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fe54:	2010      	movs	r0, #16
 800fe56:	f7ff fed8 	bl	800fc0a <send_cmd>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d001      	beq.n	800fe64 <USER_SPI_initialize+0x17c>
				ty = 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800fe64:	4a14      	ldr	r2, [pc, #80]	; (800feb8 <USER_SPI_initialize+0x1d0>)
 800fe66:	7b7b      	ldrb	r3, [r7, #13]
 800fe68:	7013      	strb	r3, [r2, #0]
	despiselect();
 800fe6a:	f7ff fe47 	bl	800fafc <despiselect>

	if (ty) {			/* OK */
 800fe6e:	7b7b      	ldrb	r3, [r7, #13]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d012      	beq.n	800fe9a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800fe74:	4b0f      	ldr	r3, [pc, #60]	; (800feb4 <USER_SPI_initialize+0x1cc>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800fe7e:	4b0d      	ldr	r3, [pc, #52]	; (800feb4 <USER_SPI_initialize+0x1cc>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f042 0218 	orr.w	r2, r2, #24
 800fe86:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800fe88:	4b09      	ldr	r3, [pc, #36]	; (800feb0 <USER_SPI_initialize+0x1c8>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	f023 0301 	bic.w	r3, r3, #1
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	4b06      	ldr	r3, [pc, #24]	; (800feb0 <USER_SPI_initialize+0x1c8>)
 800fe96:	701a      	strb	r2, [r3, #0]
 800fe98:	e002      	b.n	800fea0 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800fe9a:	4b05      	ldr	r3, [pc, #20]	; (800feb0 <USER_SPI_initialize+0x1c8>)
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800fea0:	4b03      	ldr	r3, [pc, #12]	; (800feb0 <USER_SPI_initialize+0x1c8>)
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	b2db      	uxtb	r3, r3
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3714      	adds	r7, #20
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd90      	pop	{r4, r7, pc}
 800feae:	bf00      	nop
 800feb0:	2000007c 	.word	0x2000007c
 800feb4:	20005f50 	.word	0x20005f50
 800feb8:	200007d8 	.word	0x200007d8

0800febc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	4603      	mov	r3, r0
 800fec4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800fec6:	79fb      	ldrb	r3, [r7, #7]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d001      	beq.n	800fed0 <USER_SPI_status+0x14>
 800fecc:	2301      	movs	r3, #1
 800fece:	e002      	b.n	800fed6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800fed0:	4b04      	ldr	r3, [pc, #16]	; (800fee4 <USER_SPI_status+0x28>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	b2db      	uxtb	r3, r3
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	370c      	adds	r7, #12
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop
 800fee4:	2000007c 	.word	0x2000007c

0800fee8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	60b9      	str	r1, [r7, #8]
 800fef0:	607a      	str	r2, [r7, #4]
 800fef2:	603b      	str	r3, [r7, #0]
 800fef4:	4603      	mov	r3, r0
 800fef6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800fef8:	7bfb      	ldrb	r3, [r7, #15]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d102      	bne.n	800ff04 <USER_SPI_read+0x1c>
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d101      	bne.n	800ff08 <USER_SPI_read+0x20>
 800ff04:	2304      	movs	r3, #4
 800ff06:	e04d      	b.n	800ffa4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ff08:	4b28      	ldr	r3, [pc, #160]	; (800ffac <USER_SPI_read+0xc4>)
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <USER_SPI_read+0x32>
 800ff16:	2303      	movs	r3, #3
 800ff18:	e044      	b.n	800ffa4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ff1a:	4b25      	ldr	r3, [pc, #148]	; (800ffb0 <USER_SPI_read+0xc8>)
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	f003 0308 	and.w	r3, r3, #8
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d102      	bne.n	800ff2c <USER_SPI_read+0x44>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	025b      	lsls	r3, r3, #9
 800ff2a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d111      	bne.n	800ff56 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800ff32:	6879      	ldr	r1, [r7, #4]
 800ff34:	2011      	movs	r0, #17
 800ff36:	f7ff fe68 	bl	800fc0a <send_cmd>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d129      	bne.n	800ff94 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800ff40:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff44:	68b8      	ldr	r0, [r7, #8]
 800ff46:	f7ff fe05 	bl	800fb54 <rcvr_datablock>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d021      	beq.n	800ff94 <USER_SPI_read+0xac>
			count = 0;
 800ff50:	2300      	movs	r3, #0
 800ff52:	603b      	str	r3, [r7, #0]
 800ff54:	e01e      	b.n	800ff94 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ff56:	6879      	ldr	r1, [r7, #4]
 800ff58:	2012      	movs	r0, #18
 800ff5a:	f7ff fe56 	bl	800fc0a <send_cmd>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d117      	bne.n	800ff94 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800ff64:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff68:	68b8      	ldr	r0, [r7, #8]
 800ff6a:	f7ff fdf3 	bl	800fb54 <rcvr_datablock>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00a      	beq.n	800ff8a <USER_SPI_read+0xa2>
				buff += 512;
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ff7a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	603b      	str	r3, [r7, #0]
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d1ed      	bne.n	800ff64 <USER_SPI_read+0x7c>
 800ff88:	e000      	b.n	800ff8c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800ff8a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	200c      	movs	r0, #12
 800ff90:	f7ff fe3b 	bl	800fc0a <send_cmd>
		}
	}
	despiselect();
 800ff94:	f7ff fdb2 	bl	800fafc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	bf14      	ite	ne
 800ff9e:	2301      	movne	r3, #1
 800ffa0:	2300      	moveq	r3, #0
 800ffa2:	b2db      	uxtb	r3, r3
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	2000007c 	.word	0x2000007c
 800ffb0:	200007d8 	.word	0x200007d8

0800ffb4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60b9      	str	r1, [r7, #8]
 800ffbc:	607a      	str	r2, [r7, #4]
 800ffbe:	603b      	str	r3, [r7, #0]
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ffc4:	7bfb      	ldrb	r3, [r7, #15]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d102      	bne.n	800ffd0 <USER_SPI_write+0x1c>
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d101      	bne.n	800ffd4 <USER_SPI_write+0x20>
 800ffd0:	2304      	movs	r3, #4
 800ffd2:	e063      	b.n	801009c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800ffd4:	4b33      	ldr	r3, [pc, #204]	; (80100a4 <USER_SPI_write+0xf0>)
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	f003 0301 	and.w	r3, r3, #1
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <USER_SPI_write+0x32>
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	e05a      	b.n	801009c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800ffe6:	4b2f      	ldr	r3, [pc, #188]	; (80100a4 <USER_SPI_write+0xf0>)
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	f003 0304 	and.w	r3, r3, #4
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d001      	beq.n	800fff8 <USER_SPI_write+0x44>
 800fff4:	2302      	movs	r3, #2
 800fff6:	e051      	b.n	801009c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800fff8:	4b2b      	ldr	r3, [pc, #172]	; (80100a8 <USER_SPI_write+0xf4>)
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	f003 0308 	and.w	r3, r3, #8
 8010000:	2b00      	cmp	r3, #0
 8010002:	d102      	bne.n	801000a <USER_SPI_write+0x56>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	025b      	lsls	r3, r3, #9
 8010008:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d110      	bne.n	8010032 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8010010:	6879      	ldr	r1, [r7, #4]
 8010012:	2018      	movs	r0, #24
 8010014:	f7ff fdf9 	bl	800fc0a <send_cmd>
 8010018:	4603      	mov	r3, r0
 801001a:	2b00      	cmp	r3, #0
 801001c:	d136      	bne.n	801008c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 801001e:	21fe      	movs	r1, #254	; 0xfe
 8010020:	68b8      	ldr	r0, [r7, #8]
 8010022:	f7ff fdc0 	bl	800fba6 <xmit_datablock>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d02f      	beq.n	801008c <USER_SPI_write+0xd8>
			count = 0;
 801002c:	2300      	movs	r3, #0
 801002e:	603b      	str	r3, [r7, #0]
 8010030:	e02c      	b.n	801008c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8010032:	4b1d      	ldr	r3, [pc, #116]	; (80100a8 <USER_SPI_write+0xf4>)
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	f003 0306 	and.w	r3, r3, #6
 801003a:	2b00      	cmp	r3, #0
 801003c:	d003      	beq.n	8010046 <USER_SPI_write+0x92>
 801003e:	6839      	ldr	r1, [r7, #0]
 8010040:	2097      	movs	r0, #151	; 0x97
 8010042:	f7ff fde2 	bl	800fc0a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8010046:	6879      	ldr	r1, [r7, #4]
 8010048:	2019      	movs	r0, #25
 801004a:	f7ff fdde 	bl	800fc0a <send_cmd>
 801004e:	4603      	mov	r3, r0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d11b      	bne.n	801008c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8010054:	21fc      	movs	r1, #252	; 0xfc
 8010056:	68b8      	ldr	r0, [r7, #8]
 8010058:	f7ff fda5 	bl	800fba6 <xmit_datablock>
 801005c:	4603      	mov	r3, r0
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00a      	beq.n	8010078 <USER_SPI_write+0xc4>
				buff += 512;
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010068:	60bb      	str	r3, [r7, #8]
			} while (--count);
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	3b01      	subs	r3, #1
 801006e:	603b      	str	r3, [r7, #0]
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d1ee      	bne.n	8010054 <USER_SPI_write+0xa0>
 8010076:	e000      	b.n	801007a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8010078:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 801007a:	21fd      	movs	r1, #253	; 0xfd
 801007c:	2000      	movs	r0, #0
 801007e:	f7ff fd92 	bl	800fba6 <xmit_datablock>
 8010082:	4603      	mov	r3, r0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d101      	bne.n	801008c <USER_SPI_write+0xd8>
 8010088:	2301      	movs	r3, #1
 801008a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 801008c:	f7ff fd36 	bl	800fafc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	bf14      	ite	ne
 8010096:	2301      	movne	r3, #1
 8010098:	2300      	moveq	r3, #0
 801009a:	b2db      	uxtb	r3, r3
}
 801009c:	4618      	mov	r0, r3
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	2000007c 	.word	0x2000007c
 80100a8:	200007d8 	.word	0x200007d8

080100ac <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b08c      	sub	sp, #48	; 0x30
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	4603      	mov	r3, r0
 80100b4:	603a      	str	r2, [r7, #0]
 80100b6:	71fb      	strb	r3, [r7, #7]
 80100b8:	460b      	mov	r3, r1
 80100ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80100bc:	79fb      	ldrb	r3, [r7, #7]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <USER_SPI_ioctl+0x1a>
 80100c2:	2304      	movs	r3, #4
 80100c4:	e15a      	b.n	801037c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80100c6:	4baf      	ldr	r3, [pc, #700]	; (8010384 <USER_SPI_ioctl+0x2d8>)
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	f003 0301 	and.w	r3, r3, #1
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d001      	beq.n	80100d8 <USER_SPI_ioctl+0x2c>
 80100d4:	2303      	movs	r3, #3
 80100d6:	e151      	b.n	801037c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80100d8:	2301      	movs	r3, #1
 80100da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80100de:	79bb      	ldrb	r3, [r7, #6]
 80100e0:	2b04      	cmp	r3, #4
 80100e2:	f200 8136 	bhi.w	8010352 <USER_SPI_ioctl+0x2a6>
 80100e6:	a201      	add	r2, pc, #4	; (adr r2, 80100ec <USER_SPI_ioctl+0x40>)
 80100e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ec:	08010101 	.word	0x08010101
 80100f0:	08010115 	.word	0x08010115
 80100f4:	08010353 	.word	0x08010353
 80100f8:	080101c1 	.word	0x080101c1
 80100fc:	080102b7 	.word	0x080102b7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8010100:	f7ff fd0c 	bl	800fb1c <spiselect>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	f000 8127 	beq.w	801035a <USER_SPI_ioctl+0x2ae>
 801010c:	2300      	movs	r3, #0
 801010e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8010112:	e122      	b.n	801035a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8010114:	2100      	movs	r1, #0
 8010116:	2009      	movs	r0, #9
 8010118:	f7ff fd77 	bl	800fc0a <send_cmd>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	f040 811d 	bne.w	801035e <USER_SPI_ioctl+0x2b2>
 8010124:	f107 030c 	add.w	r3, r7, #12
 8010128:	2110      	movs	r1, #16
 801012a:	4618      	mov	r0, r3
 801012c:	f7ff fd12 	bl	800fb54 <rcvr_datablock>
 8010130:	4603      	mov	r3, r0
 8010132:	2b00      	cmp	r3, #0
 8010134:	f000 8113 	beq.w	801035e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8010138:	7b3b      	ldrb	r3, [r7, #12]
 801013a:	099b      	lsrs	r3, r3, #6
 801013c:	b2db      	uxtb	r3, r3
 801013e:	2b01      	cmp	r3, #1
 8010140:	d111      	bne.n	8010166 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8010142:	7d7b      	ldrb	r3, [r7, #21]
 8010144:	461a      	mov	r2, r3
 8010146:	7d3b      	ldrb	r3, [r7, #20]
 8010148:	021b      	lsls	r3, r3, #8
 801014a:	4413      	add	r3, r2
 801014c:	461a      	mov	r2, r3
 801014e:	7cfb      	ldrb	r3, [r7, #19]
 8010150:	041b      	lsls	r3, r3, #16
 8010152:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010156:	4413      	add	r3, r2
 8010158:	3301      	adds	r3, #1
 801015a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	029a      	lsls	r2, r3, #10
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	601a      	str	r2, [r3, #0]
 8010164:	e028      	b.n	80101b8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8010166:	7c7b      	ldrb	r3, [r7, #17]
 8010168:	f003 030f 	and.w	r3, r3, #15
 801016c:	b2da      	uxtb	r2, r3
 801016e:	7dbb      	ldrb	r3, [r7, #22]
 8010170:	09db      	lsrs	r3, r3, #7
 8010172:	b2db      	uxtb	r3, r3
 8010174:	4413      	add	r3, r2
 8010176:	b2da      	uxtb	r2, r3
 8010178:	7d7b      	ldrb	r3, [r7, #21]
 801017a:	005b      	lsls	r3, r3, #1
 801017c:	b2db      	uxtb	r3, r3
 801017e:	f003 0306 	and.w	r3, r3, #6
 8010182:	b2db      	uxtb	r3, r3
 8010184:	4413      	add	r3, r2
 8010186:	b2db      	uxtb	r3, r3
 8010188:	3302      	adds	r3, #2
 801018a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 801018e:	7d3b      	ldrb	r3, [r7, #20]
 8010190:	099b      	lsrs	r3, r3, #6
 8010192:	b2db      	uxtb	r3, r3
 8010194:	461a      	mov	r2, r3
 8010196:	7cfb      	ldrb	r3, [r7, #19]
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	441a      	add	r2, r3
 801019c:	7cbb      	ldrb	r3, [r7, #18]
 801019e:	029b      	lsls	r3, r3, #10
 80101a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80101a4:	4413      	add	r3, r2
 80101a6:	3301      	adds	r3, #1
 80101a8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80101aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80101ae:	3b09      	subs	r3, #9
 80101b0:	69fa      	ldr	r2, [r7, #28]
 80101b2:	409a      	lsls	r2, r3
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80101b8:	2300      	movs	r3, #0
 80101ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80101be:	e0ce      	b.n	801035e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80101c0:	4b71      	ldr	r3, [pc, #452]	; (8010388 <USER_SPI_ioctl+0x2dc>)
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	f003 0304 	and.w	r3, r3, #4
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d031      	beq.n	8010230 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80101cc:	2100      	movs	r1, #0
 80101ce:	208d      	movs	r0, #141	; 0x8d
 80101d0:	f7ff fd1b 	bl	800fc0a <send_cmd>
 80101d4:	4603      	mov	r3, r0
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	f040 80c3 	bne.w	8010362 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80101dc:	20ff      	movs	r0, #255	; 0xff
 80101de:	f7ff fc1d 	bl	800fa1c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80101e2:	f107 030c 	add.w	r3, r7, #12
 80101e6:	2110      	movs	r1, #16
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7ff fcb3 	bl	800fb54 <rcvr_datablock>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f000 80b6 	beq.w	8010362 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80101f6:	2330      	movs	r3, #48	; 0x30
 80101f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80101fc:	e007      	b.n	801020e <USER_SPI_ioctl+0x162>
 80101fe:	20ff      	movs	r0, #255	; 0xff
 8010200:	f7ff fc0c 	bl	800fa1c <xchg_spi>
 8010204:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010208:	3b01      	subs	r3, #1
 801020a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801020e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010212:	2b00      	cmp	r3, #0
 8010214:	d1f3      	bne.n	80101fe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8010216:	7dbb      	ldrb	r3, [r7, #22]
 8010218:	091b      	lsrs	r3, r3, #4
 801021a:	b2db      	uxtb	r3, r3
 801021c:	461a      	mov	r2, r3
 801021e:	2310      	movs	r3, #16
 8010220:	fa03 f202 	lsl.w	r2, r3, r2
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8010228:	2300      	movs	r3, #0
 801022a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 801022e:	e098      	b.n	8010362 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8010230:	2100      	movs	r1, #0
 8010232:	2009      	movs	r0, #9
 8010234:	f7ff fce9 	bl	800fc0a <send_cmd>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	f040 8091 	bne.w	8010362 <USER_SPI_ioctl+0x2b6>
 8010240:	f107 030c 	add.w	r3, r7, #12
 8010244:	2110      	movs	r1, #16
 8010246:	4618      	mov	r0, r3
 8010248:	f7ff fc84 	bl	800fb54 <rcvr_datablock>
 801024c:	4603      	mov	r3, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	f000 8087 	beq.w	8010362 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8010254:	4b4c      	ldr	r3, [pc, #304]	; (8010388 <USER_SPI_ioctl+0x2dc>)
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	f003 0302 	and.w	r3, r3, #2
 801025c:	2b00      	cmp	r3, #0
 801025e:	d012      	beq.n	8010286 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8010260:	7dbb      	ldrb	r3, [r7, #22]
 8010262:	005b      	lsls	r3, r3, #1
 8010264:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8010268:	7dfa      	ldrb	r2, [r7, #23]
 801026a:	09d2      	lsrs	r2, r2, #7
 801026c:	b2d2      	uxtb	r2, r2
 801026e:	4413      	add	r3, r2
 8010270:	1c5a      	adds	r2, r3, #1
 8010272:	7e7b      	ldrb	r3, [r7, #25]
 8010274:	099b      	lsrs	r3, r3, #6
 8010276:	b2db      	uxtb	r3, r3
 8010278:	3b01      	subs	r3, #1
 801027a:	fa02 f303 	lsl.w	r3, r2, r3
 801027e:	461a      	mov	r2, r3
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	601a      	str	r2, [r3, #0]
 8010284:	e013      	b.n	80102ae <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8010286:	7dbb      	ldrb	r3, [r7, #22]
 8010288:	109b      	asrs	r3, r3, #2
 801028a:	b29b      	uxth	r3, r3
 801028c:	f003 031f 	and.w	r3, r3, #31
 8010290:	3301      	adds	r3, #1
 8010292:	7dfa      	ldrb	r2, [r7, #23]
 8010294:	00d2      	lsls	r2, r2, #3
 8010296:	f002 0218 	and.w	r2, r2, #24
 801029a:	7df9      	ldrb	r1, [r7, #23]
 801029c:	0949      	lsrs	r1, r1, #5
 801029e:	b2c9      	uxtb	r1, r1
 80102a0:	440a      	add	r2, r1
 80102a2:	3201      	adds	r2, #1
 80102a4:	fb02 f303 	mul.w	r3, r2, r3
 80102a8:	461a      	mov	r2, r3
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80102ae:	2300      	movs	r3, #0
 80102b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80102b4:	e055      	b.n	8010362 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80102b6:	4b34      	ldr	r3, [pc, #208]	; (8010388 <USER_SPI_ioctl+0x2dc>)
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	f003 0306 	and.w	r3, r3, #6
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d051      	beq.n	8010366 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80102c2:	f107 020c 	add.w	r2, r7, #12
 80102c6:	79fb      	ldrb	r3, [r7, #7]
 80102c8:	210b      	movs	r1, #11
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff feee 	bl	80100ac <USER_SPI_ioctl>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d149      	bne.n	801036a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80102d6:	7b3b      	ldrb	r3, [r7, #12]
 80102d8:	099b      	lsrs	r3, r3, #6
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d104      	bne.n	80102ea <USER_SPI_ioctl+0x23e>
 80102e0:	7dbb      	ldrb	r3, [r7, #22]
 80102e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d041      	beq.n	801036e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	623b      	str	r3, [r7, #32]
 80102ee:	6a3b      	ldr	r3, [r7, #32]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80102f4:	6a3b      	ldr	r3, [r7, #32]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80102fa:	4b23      	ldr	r3, [pc, #140]	; (8010388 <USER_SPI_ioctl+0x2dc>)
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	f003 0308 	and.w	r3, r3, #8
 8010302:	2b00      	cmp	r3, #0
 8010304:	d105      	bne.n	8010312 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8010306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010308:	025b      	lsls	r3, r3, #9
 801030a:	62bb      	str	r3, [r7, #40]	; 0x28
 801030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030e:	025b      	lsls	r3, r3, #9
 8010310:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8010312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010314:	2020      	movs	r0, #32
 8010316:	f7ff fc78 	bl	800fc0a <send_cmd>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d128      	bne.n	8010372 <USER_SPI_ioctl+0x2c6>
 8010320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010322:	2021      	movs	r0, #33	; 0x21
 8010324:	f7ff fc71 	bl	800fc0a <send_cmd>
 8010328:	4603      	mov	r3, r0
 801032a:	2b00      	cmp	r3, #0
 801032c:	d121      	bne.n	8010372 <USER_SPI_ioctl+0x2c6>
 801032e:	2100      	movs	r1, #0
 8010330:	2026      	movs	r0, #38	; 0x26
 8010332:	f7ff fc6a 	bl	800fc0a <send_cmd>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d11a      	bne.n	8010372 <USER_SPI_ioctl+0x2c6>
 801033c:	f247 5030 	movw	r0, #30000	; 0x7530
 8010340:	f7ff fbb9 	bl	800fab6 <wait_ready>
 8010344:	4603      	mov	r3, r0
 8010346:	2b00      	cmp	r3, #0
 8010348:	d013      	beq.n	8010372 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 801034a:	2300      	movs	r3, #0
 801034c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8010350:	e00f      	b.n	8010372 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8010352:	2304      	movs	r3, #4
 8010354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010358:	e00c      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		break;
 801035a:	bf00      	nop
 801035c:	e00a      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		break;
 801035e:	bf00      	nop
 8010360:	e008      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		break;
 8010362:	bf00      	nop
 8010364:	e006      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8010366:	bf00      	nop
 8010368:	e004      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 801036a:	bf00      	nop
 801036c:	e002      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 801036e:	bf00      	nop
 8010370:	e000      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		break;
 8010372:	bf00      	nop
	}

	despiselect();
 8010374:	f7ff fbc2 	bl	800fafc <despiselect>

	return res;
 8010378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801037c:	4618      	mov	r0, r3
 801037e:	3730      	adds	r7, #48	; 0x30
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	2000007c 	.word	0x2000007c
 8010388:	200007d8 	.word	0x200007d8

0801038c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	460b      	mov	r3, r1
 8010396:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010398:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801039c:	f008 fcc4 	bl	8018d28 <USBD_static_malloc>
 80103a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d105      	bne.n	80103b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80103b0:	2302      	movs	r3, #2
 80103b2:	e066      	b.n	8010482 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	68fa      	ldr	r2, [r7, #12]
 80103b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	7c1b      	ldrb	r3, [r3, #16]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d119      	bne.n	80103f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80103c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103c8:	2202      	movs	r2, #2
 80103ca:	2181      	movs	r1, #129	; 0x81
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f008 fb88 	bl	8018ae2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2201      	movs	r2, #1
 80103d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80103d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103dc:	2202      	movs	r2, #2
 80103de:	2101      	movs	r1, #1
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f008 fb7e 	bl	8018ae2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2201      	movs	r2, #1
 80103ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2210      	movs	r2, #16
 80103f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80103f6:	e016      	b.n	8010426 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80103f8:	2340      	movs	r3, #64	; 0x40
 80103fa:	2202      	movs	r2, #2
 80103fc:	2181      	movs	r1, #129	; 0x81
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f008 fb6f 	bl	8018ae2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2201      	movs	r2, #1
 8010408:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801040a:	2340      	movs	r3, #64	; 0x40
 801040c:	2202      	movs	r2, #2
 801040e:	2101      	movs	r1, #1
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f008 fb66 	bl	8018ae2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2201      	movs	r2, #1
 801041a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2210      	movs	r2, #16
 8010422:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010426:	2308      	movs	r3, #8
 8010428:	2203      	movs	r2, #3
 801042a:	2182      	movs	r1, #130	; 0x82
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f008 fb58 	bl	8018ae2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2201      	movs	r2, #1
 8010436:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2200      	movs	r2, #0
 8010448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2200      	movs	r2, #0
 8010450:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	7c1b      	ldrb	r3, [r3, #16]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d109      	bne.n	8010470 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010466:	2101      	movs	r1, #1
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f008 fc29 	bl	8018cc0 <USBD_LL_PrepareReceive>
 801046e:	e007      	b.n	8010480 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010476:	2340      	movs	r3, #64	; 0x40
 8010478:	2101      	movs	r1, #1
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f008 fc20 	bl	8018cc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010480:	2300      	movs	r3, #0
}
 8010482:	4618      	mov	r0, r3
 8010484:	3710      	adds	r7, #16
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b082      	sub	sp, #8
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
 8010492:	460b      	mov	r3, r1
 8010494:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010496:	2181      	movs	r1, #129	; 0x81
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f008 fb48 	bl	8018b2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2200      	movs	r2, #0
 80104a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80104a4:	2101      	movs	r1, #1
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f008 fb41 	bl	8018b2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2200      	movs	r2, #0
 80104b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80104b4:	2182      	movs	r1, #130	; 0x82
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f008 fb39 	bl	8018b2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d00e      	beq.n	80104f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104e6:	4618      	mov	r0, r3
 80104e8:	f008 fc2c 	bl	8018d44 <USBD_static_free>
    pdev->pClassData = NULL;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2200      	movs	r2, #0
 80104f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80104f4:	2300      	movs	r3, #0
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3708      	adds	r7, #8
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
	...

08010500 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b086      	sub	sp, #24
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010510:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010512:	2300      	movs	r3, #0
 8010514:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010516:	2300      	movs	r3, #0
 8010518:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801051a:	2300      	movs	r3, #0
 801051c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d101      	bne.n	8010528 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8010524:	2303      	movs	r3, #3
 8010526:	e0af      	b.n	8010688 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010530:	2b00      	cmp	r3, #0
 8010532:	d03f      	beq.n	80105b4 <USBD_CDC_Setup+0xb4>
 8010534:	2b20      	cmp	r3, #32
 8010536:	f040 809f 	bne.w	8010678 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	88db      	ldrh	r3, [r3, #6]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d02e      	beq.n	80105a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	b25b      	sxtb	r3, r3
 8010548:	2b00      	cmp	r3, #0
 801054a:	da16      	bge.n	801057a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010552:	689b      	ldr	r3, [r3, #8]
 8010554:	683a      	ldr	r2, [r7, #0]
 8010556:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010558:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801055a:	683a      	ldr	r2, [r7, #0]
 801055c:	88d2      	ldrh	r2, [r2, #6]
 801055e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	88db      	ldrh	r3, [r3, #6]
 8010564:	2b07      	cmp	r3, #7
 8010566:	bf28      	it	cs
 8010568:	2307      	movcs	r3, #7
 801056a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	89fa      	ldrh	r2, [r7, #14]
 8010570:	4619      	mov	r1, r3
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f001 fae9 	bl	8011b4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010578:	e085      	b.n	8010686 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	785a      	ldrb	r2, [r3, #1]
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	88db      	ldrh	r3, [r3, #6]
 8010588:	b2da      	uxtb	r2, r3
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010590:	6939      	ldr	r1, [r7, #16]
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	88db      	ldrh	r3, [r3, #6]
 8010596:	461a      	mov	r2, r3
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f001 fb02 	bl	8011ba2 <USBD_CtlPrepareRx>
      break;
 801059e:	e072      	b.n	8010686 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	683a      	ldr	r2, [r7, #0]
 80105aa:	7850      	ldrb	r0, [r2, #1]
 80105ac:	2200      	movs	r2, #0
 80105ae:	6839      	ldr	r1, [r7, #0]
 80105b0:	4798      	blx	r3
      break;
 80105b2:	e068      	b.n	8010686 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	785b      	ldrb	r3, [r3, #1]
 80105b8:	2b0b      	cmp	r3, #11
 80105ba:	d852      	bhi.n	8010662 <USBD_CDC_Setup+0x162>
 80105bc:	a201      	add	r2, pc, #4	; (adr r2, 80105c4 <USBD_CDC_Setup+0xc4>)
 80105be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105c2:	bf00      	nop
 80105c4:	080105f5 	.word	0x080105f5
 80105c8:	08010671 	.word	0x08010671
 80105cc:	08010663 	.word	0x08010663
 80105d0:	08010663 	.word	0x08010663
 80105d4:	08010663 	.word	0x08010663
 80105d8:	08010663 	.word	0x08010663
 80105dc:	08010663 	.word	0x08010663
 80105e0:	08010663 	.word	0x08010663
 80105e4:	08010663 	.word	0x08010663
 80105e8:	08010663 	.word	0x08010663
 80105ec:	0801061f 	.word	0x0801061f
 80105f0:	08010649 	.word	0x08010649
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	2b03      	cmp	r3, #3
 80105fe:	d107      	bne.n	8010610 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010600:	f107 030a 	add.w	r3, r7, #10
 8010604:	2202      	movs	r2, #2
 8010606:	4619      	mov	r1, r3
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f001 fa9e 	bl	8011b4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801060e:	e032      	b.n	8010676 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010610:	6839      	ldr	r1, [r7, #0]
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f001 fa28 	bl	8011a68 <USBD_CtlError>
            ret = USBD_FAIL;
 8010618:	2303      	movs	r3, #3
 801061a:	75fb      	strb	r3, [r7, #23]
          break;
 801061c:	e02b      	b.n	8010676 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010624:	b2db      	uxtb	r3, r3
 8010626:	2b03      	cmp	r3, #3
 8010628:	d107      	bne.n	801063a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801062a:	f107 030d 	add.w	r3, r7, #13
 801062e:	2201      	movs	r2, #1
 8010630:	4619      	mov	r1, r3
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f001 fa89 	bl	8011b4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010638:	e01d      	b.n	8010676 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801063a:	6839      	ldr	r1, [r7, #0]
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f001 fa13 	bl	8011a68 <USBD_CtlError>
            ret = USBD_FAIL;
 8010642:	2303      	movs	r3, #3
 8010644:	75fb      	strb	r3, [r7, #23]
          break;
 8010646:	e016      	b.n	8010676 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801064e:	b2db      	uxtb	r3, r3
 8010650:	2b03      	cmp	r3, #3
 8010652:	d00f      	beq.n	8010674 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8010654:	6839      	ldr	r1, [r7, #0]
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f001 fa06 	bl	8011a68 <USBD_CtlError>
            ret = USBD_FAIL;
 801065c:	2303      	movs	r3, #3
 801065e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010660:	e008      	b.n	8010674 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010662:	6839      	ldr	r1, [r7, #0]
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f001 f9ff 	bl	8011a68 <USBD_CtlError>
          ret = USBD_FAIL;
 801066a:	2303      	movs	r3, #3
 801066c:	75fb      	strb	r3, [r7, #23]
          break;
 801066e:	e002      	b.n	8010676 <USBD_CDC_Setup+0x176>
          break;
 8010670:	bf00      	nop
 8010672:	e008      	b.n	8010686 <USBD_CDC_Setup+0x186>
          break;
 8010674:	bf00      	nop
      }
      break;
 8010676:	e006      	b.n	8010686 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010678:	6839      	ldr	r1, [r7, #0]
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f001 f9f4 	bl	8011a68 <USBD_CtlError>
      ret = USBD_FAIL;
 8010680:	2303      	movs	r3, #3
 8010682:	75fb      	strb	r3, [r7, #23]
      break;
 8010684:	bf00      	nop
  }

  return (uint8_t)ret;
 8010686:	7dfb      	ldrb	r3, [r7, #23]
}
 8010688:	4618      	mov	r0, r3
 801068a:	3718      	adds	r7, #24
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b084      	sub	sp, #16
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	460b      	mov	r3, r1
 801069a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d101      	bne.n	80106b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80106ae:	2303      	movs	r3, #3
 80106b0:	e04f      	b.n	8010752 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80106ba:	78fa      	ldrb	r2, [r7, #3]
 80106bc:	6879      	ldr	r1, [r7, #4]
 80106be:	4613      	mov	r3, r2
 80106c0:	009b      	lsls	r3, r3, #2
 80106c2:	4413      	add	r3, r2
 80106c4:	009b      	lsls	r3, r3, #2
 80106c6:	440b      	add	r3, r1
 80106c8:	3318      	adds	r3, #24
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d029      	beq.n	8010724 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80106d0:	78fa      	ldrb	r2, [r7, #3]
 80106d2:	6879      	ldr	r1, [r7, #4]
 80106d4:	4613      	mov	r3, r2
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	4413      	add	r3, r2
 80106da:	009b      	lsls	r3, r3, #2
 80106dc:	440b      	add	r3, r1
 80106de:	3318      	adds	r3, #24
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	78f9      	ldrb	r1, [r7, #3]
 80106e4:	68f8      	ldr	r0, [r7, #12]
 80106e6:	460b      	mov	r3, r1
 80106e8:	00db      	lsls	r3, r3, #3
 80106ea:	1a5b      	subs	r3, r3, r1
 80106ec:	009b      	lsls	r3, r3, #2
 80106ee:	4403      	add	r3, r0
 80106f0:	3344      	adds	r3, #68	; 0x44
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80106f8:	fb03 f301 	mul.w	r3, r3, r1
 80106fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d110      	bne.n	8010724 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010702:	78fa      	ldrb	r2, [r7, #3]
 8010704:	6879      	ldr	r1, [r7, #4]
 8010706:	4613      	mov	r3, r2
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	4413      	add	r3, r2
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	440b      	add	r3, r1
 8010710:	3318      	adds	r3, #24
 8010712:	2200      	movs	r2, #0
 8010714:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010716:	78f9      	ldrb	r1, [r7, #3]
 8010718:	2300      	movs	r3, #0
 801071a:	2200      	movs	r2, #0
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f008 faae 	bl	8018c7e <USBD_LL_Transmit>
 8010722:	e015      	b.n	8010750 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	2200      	movs	r2, #0
 8010728:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010732:	691b      	ldr	r3, [r3, #16]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d00b      	beq.n	8010750 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801073e:	691b      	ldr	r3, [r3, #16]
 8010740:	68ba      	ldr	r2, [r7, #8]
 8010742:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010746:	68ba      	ldr	r2, [r7, #8]
 8010748:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801074c:	78fa      	ldrb	r2, [r7, #3]
 801074e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010750:	2300      	movs	r3, #0
}
 8010752:	4618      	mov	r0, r3
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b084      	sub	sp, #16
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
 8010762:	460b      	mov	r3, r1
 8010764:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801076c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010774:	2b00      	cmp	r3, #0
 8010776:	d101      	bne.n	801077c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010778:	2303      	movs	r3, #3
 801077a:	e015      	b.n	80107a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801077c:	78fb      	ldrb	r3, [r7, #3]
 801077e:	4619      	mov	r1, r3
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f008 fabe 	bl	8018d02 <USBD_LL_GetRxDataSize>
 8010786:	4602      	mov	r2, r0
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	68fa      	ldr	r2, [r7, #12]
 8010798:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801079c:	68fa      	ldr	r2, [r7, #12]
 801079e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80107a2:	4611      	mov	r1, r2
 80107a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80107a6:	2300      	movs	r3, #0
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3710      	adds	r7, #16
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}

080107b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d101      	bne.n	80107ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80107c6:	2303      	movs	r3, #3
 80107c8:	e01b      	b.n	8010802 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d015      	beq.n	8010800 <USBD_CDC_EP0_RxReady+0x50>
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80107da:	2bff      	cmp	r3, #255	; 0xff
 80107dc:	d010      	beq.n	8010800 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107e4:	689b      	ldr	r3, [r3, #8]
 80107e6:	68fa      	ldr	r2, [r7, #12]
 80107e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80107ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80107ee:	68fa      	ldr	r2, [r7, #12]
 80107f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80107f4:	b292      	uxth	r2, r2
 80107f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	22ff      	movs	r2, #255	; 0xff
 80107fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010800:	2300      	movs	r3, #0
}
 8010802:	4618      	mov	r0, r3
 8010804:	3710      	adds	r7, #16
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
	...

0801080c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2243      	movs	r2, #67	; 0x43
 8010818:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801081a:	4b03      	ldr	r3, [pc, #12]	; (8010828 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801081c:	4618      	mov	r0, r3
 801081e:	370c      	adds	r7, #12
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr
 8010828:	20000108 	.word	0x20000108

0801082c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2243      	movs	r2, #67	; 0x43
 8010838:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801083a:	4b03      	ldr	r3, [pc, #12]	; (8010848 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801083c:	4618      	mov	r0, r3
 801083e:	370c      	adds	r7, #12
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr
 8010848:	200000c4 	.word	0x200000c4

0801084c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2243      	movs	r2, #67	; 0x43
 8010858:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801085a:	4b03      	ldr	r3, [pc, #12]	; (8010868 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801085c:	4618      	mov	r0, r3
 801085e:	370c      	adds	r7, #12
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr
 8010868:	2000014c 	.word	0x2000014c

0801086c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	220a      	movs	r2, #10
 8010878:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801087a:	4b03      	ldr	r3, [pc, #12]	; (8010888 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801087c:	4618      	mov	r0, r3
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr
 8010888:	20000080 	.word	0x20000080

0801088c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801088c:	b480      	push	{r7}
 801088e:	b083      	sub	sp, #12
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d101      	bne.n	80108a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801089c:	2303      	movs	r3, #3
 801089e:	e004      	b.n	80108aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	683a      	ldr	r2, [r7, #0]
 80108a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80108a8:	2300      	movs	r3, #0
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	370c      	adds	r7, #12
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr

080108b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80108b6:	b480      	push	{r7}
 80108b8:	b087      	sub	sp, #28
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	60f8      	str	r0, [r7, #12]
 80108be:	60b9      	str	r1, [r7, #8]
 80108c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d101      	bne.n	80108d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80108d0:	2303      	movs	r3, #3
 80108d2:	e008      	b.n	80108e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	68ba      	ldr	r2, [r7, #8]
 80108d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80108e4:	2300      	movs	r3, #0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	371c      	adds	r7, #28
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80108f2:	b480      	push	{r7}
 80108f4:	b085      	sub	sp, #20
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
 80108fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010902:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d101      	bne.n	801090e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801090a:	2303      	movs	r3, #3
 801090c:	e004      	b.n	8010918 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010916:	2300      	movs	r3, #0
}
 8010918:	4618      	mov	r0, r3
 801091a:	3714      	adds	r7, #20
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010932:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801093a:	2b00      	cmp	r3, #0
 801093c:	d101      	bne.n	8010942 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801093e:	2303      	movs	r3, #3
 8010940:	e016      	b.n	8010970 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	7c1b      	ldrb	r3, [r3, #16]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d109      	bne.n	801095e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010954:	2101      	movs	r1, #1
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f008 f9b2 	bl	8018cc0 <USBD_LL_PrepareReceive>
 801095c:	e007      	b.n	801096e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010964:	2340      	movs	r3, #64	; 0x40
 8010966:	2101      	movs	r1, #1
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f008 f9a9 	bl	8018cc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801096e:	2300      	movs	r3, #0
}
 8010970:	4618      	mov	r0, r3
 8010972:	3710      	adds	r7, #16
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b086      	sub	sp, #24
 801097c:	af00      	add	r7, sp, #0
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	60b9      	str	r1, [r7, #8]
 8010982:	4613      	mov	r3, r2
 8010984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d101      	bne.n	8010990 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801098c:	2303      	movs	r3, #3
 801098e:	e01f      	b.n	80109d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2200      	movs	r2, #0
 8010994:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2200      	movs	r2, #0
 801099c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2200      	movs	r2, #0
 80109a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d003      	beq.n	80109b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	68ba      	ldr	r2, [r7, #8]
 80109b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2201      	movs	r2, #1
 80109ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	79fa      	ldrb	r2, [r7, #7]
 80109c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f008 f825 	bl	8018a14 <USBD_LL_Init>
 80109ca:	4603      	mov	r3, r0
 80109cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80109ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3718      	adds	r7, #24
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b084      	sub	sp, #16
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80109e2:	2300      	movs	r3, #0
 80109e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d101      	bne.n	80109f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80109ec:	2303      	movs	r3, #3
 80109ee:	e016      	b.n	8010a1e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	683a      	ldr	r2, [r7, #0]
 80109f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d00b      	beq.n	8010a1c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a0c:	f107 020e 	add.w	r2, r7, #14
 8010a10:	4610      	mov	r0, r2
 8010a12:	4798      	blx	r3
 8010a14:	4602      	mov	r2, r0
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3710      	adds	r7, #16
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}

08010a26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010a26:	b580      	push	{r7, lr}
 8010a28:	b082      	sub	sp, #8
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f008 f83c 	bl	8018aac <USBD_LL_Start>
 8010a34:	4603      	mov	r3, r0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3708      	adds	r7, #8
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010a3e:	b480      	push	{r7}
 8010a40:	b083      	sub	sp, #12
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010a46:	2300      	movs	r3, #0
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010a60:	2303      	movs	r3, #3
 8010a62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d009      	beq.n	8010a82 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	78fa      	ldrb	r2, [r7, #3]
 8010a78:	4611      	mov	r1, r2
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	4798      	blx	r3
 8010a7e:	4603      	mov	r3, r0
 8010a80:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3710      	adds	r7, #16
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	460b      	mov	r3, r1
 8010a96:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d007      	beq.n	8010ab2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	78fa      	ldrb	r2, [r7, #3]
 8010aac:	4611      	mov	r1, r2
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	4798      	blx	r3
  }

  return USBD_OK;
 8010ab2:	2300      	movs	r3, #0
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3708      	adds	r7, #8
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010acc:	6839      	ldr	r1, [r7, #0]
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f000 ff90 	bl	80119f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010af0:	f003 031f 	and.w	r3, r3, #31
 8010af4:	2b02      	cmp	r3, #2
 8010af6:	d01a      	beq.n	8010b2e <USBD_LL_SetupStage+0x72>
 8010af8:	2b02      	cmp	r3, #2
 8010afa:	d822      	bhi.n	8010b42 <USBD_LL_SetupStage+0x86>
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d002      	beq.n	8010b06 <USBD_LL_SetupStage+0x4a>
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d00a      	beq.n	8010b1a <USBD_LL_SetupStage+0x5e>
 8010b04:	e01d      	b.n	8010b42 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fa62 	bl	8010fd8 <USBD_StdDevReq>
 8010b14:	4603      	mov	r3, r0
 8010b16:	73fb      	strb	r3, [r7, #15]
      break;
 8010b18:	e020      	b.n	8010b5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b20:	4619      	mov	r1, r3
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fac6 	bl	80110b4 <USBD_StdItfReq>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8010b2c:	e016      	b.n	8010b5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b34:	4619      	mov	r1, r3
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 fb05 	bl	8011146 <USBD_StdEPReq>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8010b40:	e00c      	b.n	8010b5c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010b48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	4619      	mov	r1, r3
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f008 f80b 	bl	8018b6c <USBD_LL_StallEP>
 8010b56:	4603      	mov	r3, r0
 8010b58:	73fb      	strb	r3, [r7, #15]
      break;
 8010b5a:	bf00      	nop
  }

  return ret;
 8010b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b086      	sub	sp, #24
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	60f8      	str	r0, [r7, #12]
 8010b6e:	460b      	mov	r3, r1
 8010b70:	607a      	str	r2, [r7, #4]
 8010b72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010b74:	7afb      	ldrb	r3, [r7, #11]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d138      	bne.n	8010bec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010b80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010b88:	2b03      	cmp	r3, #3
 8010b8a:	d14a      	bne.n	8010c22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	689a      	ldr	r2, [r3, #8]
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	68db      	ldr	r3, [r3, #12]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d913      	bls.n	8010bc0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	689a      	ldr	r2, [r3, #8]
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	1ad2      	subs	r2, r2, r3
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	68da      	ldr	r2, [r3, #12]
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	bf28      	it	cs
 8010bb2:	4613      	movcs	r3, r2
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	6879      	ldr	r1, [r7, #4]
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	f001 f80f 	bl	8011bdc <USBD_CtlContinueRx>
 8010bbe:	e030      	b.n	8010c22 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	2b03      	cmp	r3, #3
 8010bca:	d10b      	bne.n	8010be4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bd2:	691b      	ldr	r3, [r3, #16]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d005      	beq.n	8010be4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010be4:	68f8      	ldr	r0, [r7, #12]
 8010be6:	f001 f80a 	bl	8011bfe <USBD_CtlSendStatus>
 8010bea:	e01a      	b.n	8010c22 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	2b03      	cmp	r3, #3
 8010bf6:	d114      	bne.n	8010c22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bfe:	699b      	ldr	r3, [r3, #24]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d00e      	beq.n	8010c22 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c0a:	699b      	ldr	r3, [r3, #24]
 8010c0c:	7afa      	ldrb	r2, [r7, #11]
 8010c0e:	4611      	mov	r1, r2
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	4798      	blx	r3
 8010c14:	4603      	mov	r3, r0
 8010c16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010c18:	7dfb      	ldrb	r3, [r7, #23]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d001      	beq.n	8010c22 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010c1e:	7dfb      	ldrb	r3, [r7, #23]
 8010c20:	e000      	b.n	8010c24 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010c22:	2300      	movs	r3, #0
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3718      	adds	r7, #24
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b086      	sub	sp, #24
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	60f8      	str	r0, [r7, #12]
 8010c34:	460b      	mov	r3, r1
 8010c36:	607a      	str	r2, [r7, #4]
 8010c38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010c3a:	7afb      	ldrb	r3, [r7, #11]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d16b      	bne.n	8010d18 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	3314      	adds	r3, #20
 8010c44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010c4c:	2b02      	cmp	r3, #2
 8010c4e:	d156      	bne.n	8010cfe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	689a      	ldr	r2, [r3, #8]
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	68db      	ldr	r3, [r3, #12]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d914      	bls.n	8010c86 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	689a      	ldr	r2, [r3, #8]
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	1ad2      	subs	r2, r2, r3
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	689b      	ldr	r3, [r3, #8]
 8010c6e:	461a      	mov	r2, r3
 8010c70:	6879      	ldr	r1, [r7, #4]
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	f000 ff84 	bl	8011b80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010c78:	2300      	movs	r3, #0
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	2100      	movs	r1, #0
 8010c7e:	68f8      	ldr	r0, [r7, #12]
 8010c80:	f008 f81e 	bl	8018cc0 <USBD_LL_PrepareReceive>
 8010c84:	e03b      	b.n	8010cfe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	68da      	ldr	r2, [r3, #12]
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	689b      	ldr	r3, [r3, #8]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d11c      	bne.n	8010ccc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	685a      	ldr	r2, [r3, #4]
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d316      	bcc.n	8010ccc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	685a      	ldr	r2, [r3, #4]
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d20f      	bcs.n	8010ccc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010cac:	2200      	movs	r2, #0
 8010cae:	2100      	movs	r1, #0
 8010cb0:	68f8      	ldr	r0, [r7, #12]
 8010cb2:	f000 ff65 	bl	8011b80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	2100      	movs	r1, #0
 8010cc4:	68f8      	ldr	r0, [r7, #12]
 8010cc6:	f007 fffb 	bl	8018cc0 <USBD_LL_PrepareReceive>
 8010cca:	e018      	b.n	8010cfe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	2b03      	cmp	r3, #3
 8010cd6:	d10b      	bne.n	8010cf0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d005      	beq.n	8010cf0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	68f8      	ldr	r0, [r7, #12]
 8010cee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010cf0:	2180      	movs	r1, #128	; 0x80
 8010cf2:	68f8      	ldr	r0, [r7, #12]
 8010cf4:	f007 ff3a 	bl	8018b6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010cf8:	68f8      	ldr	r0, [r7, #12]
 8010cfa:	f000 ff93 	bl	8011c24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010d04:	2b01      	cmp	r3, #1
 8010d06:	d122      	bne.n	8010d4e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	f7ff fe98 	bl	8010a3e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2200      	movs	r2, #0
 8010d12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010d16:	e01a      	b.n	8010d4e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	2b03      	cmp	r3, #3
 8010d22:	d114      	bne.n	8010d4e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d2a:	695b      	ldr	r3, [r3, #20]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00e      	beq.n	8010d4e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d36:	695b      	ldr	r3, [r3, #20]
 8010d38:	7afa      	ldrb	r2, [r7, #11]
 8010d3a:	4611      	mov	r1, r2
 8010d3c:	68f8      	ldr	r0, [r7, #12]
 8010d3e:	4798      	blx	r3
 8010d40:	4603      	mov	r3, r0
 8010d42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010d44:	7dfb      	ldrb	r3, [r7, #23]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d001      	beq.n	8010d4e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010d4a:	7dfb      	ldrb	r3, [r7, #23]
 8010d4c:	e000      	b.n	8010d50 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010d4e:	2300      	movs	r3, #0
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	3718      	adds	r7, #24
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2201      	movs	r2, #1
 8010d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2200      	movs	r2, #0
 8010d74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d101      	bne.n	8010d8c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010d88:	2303      	movs	r3, #3
 8010d8a:	e02f      	b.n	8010dec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d00f      	beq.n	8010db6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d009      	beq.n	8010db6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	6852      	ldr	r2, [r2, #4]
 8010dae:	b2d2      	uxtb	r2, r2
 8010db0:	4611      	mov	r1, r2
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010db6:	2340      	movs	r3, #64	; 0x40
 8010db8:	2200      	movs	r2, #0
 8010dba:	2100      	movs	r1, #0
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f007 fe90 	bl	8018ae2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2240      	movs	r2, #64	; 0x40
 8010dce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010dd2:	2340      	movs	r3, #64	; 0x40
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	2180      	movs	r1, #128	; 0x80
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f007 fe82 	bl	8018ae2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2201      	movs	r2, #1
 8010de2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2240      	movs	r2, #64	; 0x40
 8010de8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010dea:	2300      	movs	r3, #0
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3708      	adds	r7, #8
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	78fa      	ldrb	r2, [r7, #3]
 8010e04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010e06:	2300      	movs	r3, #0
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e22:	b2da      	uxtb	r2, r3
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2204      	movs	r2, #4
 8010e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010e32:	2300      	movs	r3, #0
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	370c      	adds	r7, #12
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr

08010e40 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	2b04      	cmp	r3, #4
 8010e52:	d106      	bne.n	8010e62 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010e5a:	b2da      	uxtb	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010e62:	2300      	movs	r3, #0
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d101      	bne.n	8010e86 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010e82:	2303      	movs	r3, #3
 8010e84:	e012      	b.n	8010eac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	d10b      	bne.n	8010eaa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e98:	69db      	ldr	r3, [r3, #28]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d005      	beq.n	8010eaa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ea4:	69db      	ldr	r3, [r3, #28]
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010eaa:	2300      	movs	r3, #0
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d101      	bne.n	8010ece <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010eca:	2303      	movs	r3, #3
 8010ecc:	e014      	b.n	8010ef8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ed4:	b2db      	uxtb	r3, r3
 8010ed6:	2b03      	cmp	r3, #3
 8010ed8:	d10d      	bne.n	8010ef6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ee0:	6a1b      	ldr	r3, [r3, #32]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d007      	beq.n	8010ef6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eec:	6a1b      	ldr	r3, [r3, #32]
 8010eee:	78fa      	ldrb	r2, [r7, #3]
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010ef6:	2300      	movs	r3, #0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3708      	adds	r7, #8
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	460b      	mov	r3, r1
 8010f0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d101      	bne.n	8010f1a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010f16:	2303      	movs	r3, #3
 8010f18:	e014      	b.n	8010f44 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	2b03      	cmp	r3, #3
 8010f24:	d10d      	bne.n	8010f42 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d007      	beq.n	8010f42 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f3a:	78fa      	ldrb	r2, [r7, #3]
 8010f3c:	4611      	mov	r1, r2
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010f42:	2300      	movs	r3, #0
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b083      	sub	sp, #12
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f54:	2300      	movs	r3, #0
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	370c      	adds	r7, #12
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr

08010f62 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b082      	sub	sp, #8
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2201      	movs	r2, #1
 8010f6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d009      	beq.n	8010f90 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	687a      	ldr	r2, [r7, #4]
 8010f86:	6852      	ldr	r2, [r2, #4]
 8010f88:	b2d2      	uxtb	r2, r2
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	4798      	blx	r3
  }

  return USBD_OK;
 8010f90:	2300      	movs	r3, #0
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3708      	adds	r7, #8
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010f9a:	b480      	push	{r7}
 8010f9c:	b087      	sub	sp, #28
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010fb8:	8a3b      	ldrh	r3, [r7, #16]
 8010fba:	021b      	lsls	r3, r3, #8
 8010fbc:	b21a      	sxth	r2, r3
 8010fbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010fc2:	4313      	orrs	r3, r2
 8010fc4:	b21b      	sxth	r3, r3
 8010fc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010fc8:	89fb      	ldrh	r3, [r7, #14]
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	371c      	adds	r7, #28
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr
	...

08010fd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010fee:	2b40      	cmp	r3, #64	; 0x40
 8010ff0:	d005      	beq.n	8010ffe <USBD_StdDevReq+0x26>
 8010ff2:	2b40      	cmp	r3, #64	; 0x40
 8010ff4:	d853      	bhi.n	801109e <USBD_StdDevReq+0xc6>
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00b      	beq.n	8011012 <USBD_StdDevReq+0x3a>
 8010ffa:	2b20      	cmp	r3, #32
 8010ffc:	d14f      	bne.n	801109e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011004:	689b      	ldr	r3, [r3, #8]
 8011006:	6839      	ldr	r1, [r7, #0]
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	4798      	blx	r3
 801100c:	4603      	mov	r3, r0
 801100e:	73fb      	strb	r3, [r7, #15]
      break;
 8011010:	e04a      	b.n	80110a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	785b      	ldrb	r3, [r3, #1]
 8011016:	2b09      	cmp	r3, #9
 8011018:	d83b      	bhi.n	8011092 <USBD_StdDevReq+0xba>
 801101a:	a201      	add	r2, pc, #4	; (adr r2, 8011020 <USBD_StdDevReq+0x48>)
 801101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011020:	08011075 	.word	0x08011075
 8011024:	08011089 	.word	0x08011089
 8011028:	08011093 	.word	0x08011093
 801102c:	0801107f 	.word	0x0801107f
 8011030:	08011093 	.word	0x08011093
 8011034:	08011053 	.word	0x08011053
 8011038:	08011049 	.word	0x08011049
 801103c:	08011093 	.word	0x08011093
 8011040:	0801106b 	.word	0x0801106b
 8011044:	0801105d 	.word	0x0801105d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011048:	6839      	ldr	r1, [r7, #0]
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 f9de 	bl	801140c <USBD_GetDescriptor>
          break;
 8011050:	e024      	b.n	801109c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011052:	6839      	ldr	r1, [r7, #0]
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 fb43 	bl	80116e0 <USBD_SetAddress>
          break;
 801105a:	e01f      	b.n	801109c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801105c:	6839      	ldr	r1, [r7, #0]
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 fb82 	bl	8011768 <USBD_SetConfig>
 8011064:	4603      	mov	r3, r0
 8011066:	73fb      	strb	r3, [r7, #15]
          break;
 8011068:	e018      	b.n	801109c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801106a:	6839      	ldr	r1, [r7, #0]
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f000 fc21 	bl	80118b4 <USBD_GetConfig>
          break;
 8011072:	e013      	b.n	801109c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011074:	6839      	ldr	r1, [r7, #0]
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f000 fc52 	bl	8011920 <USBD_GetStatus>
          break;
 801107c:	e00e      	b.n	801109c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801107e:	6839      	ldr	r1, [r7, #0]
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f000 fc81 	bl	8011988 <USBD_SetFeature>
          break;
 8011086:	e009      	b.n	801109c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011088:	6839      	ldr	r1, [r7, #0]
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 fc90 	bl	80119b0 <USBD_ClrFeature>
          break;
 8011090:	e004      	b.n	801109c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011092:	6839      	ldr	r1, [r7, #0]
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 fce7 	bl	8011a68 <USBD_CtlError>
          break;
 801109a:	bf00      	nop
      }
      break;
 801109c:	e004      	b.n	80110a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801109e:	6839      	ldr	r1, [r7, #0]
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 fce1 	bl	8011a68 <USBD_CtlError>
      break;
 80110a6:	bf00      	nop
  }

  return ret;
 80110a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop

080110b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
 80110bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110be:	2300      	movs	r3, #0
 80110c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110ca:	2b40      	cmp	r3, #64	; 0x40
 80110cc:	d005      	beq.n	80110da <USBD_StdItfReq+0x26>
 80110ce:	2b40      	cmp	r3, #64	; 0x40
 80110d0:	d82f      	bhi.n	8011132 <USBD_StdItfReq+0x7e>
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d001      	beq.n	80110da <USBD_StdItfReq+0x26>
 80110d6:	2b20      	cmp	r3, #32
 80110d8:	d12b      	bne.n	8011132 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	3b01      	subs	r3, #1
 80110e4:	2b02      	cmp	r3, #2
 80110e6:	d81d      	bhi.n	8011124 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	889b      	ldrh	r3, [r3, #4]
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d813      	bhi.n	801111a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110f8:	689b      	ldr	r3, [r3, #8]
 80110fa:	6839      	ldr	r1, [r7, #0]
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	4798      	blx	r3
 8011100:	4603      	mov	r3, r0
 8011102:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	88db      	ldrh	r3, [r3, #6]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d110      	bne.n	801112e <USBD_StdItfReq+0x7a>
 801110c:	7bfb      	ldrb	r3, [r7, #15]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d10d      	bne.n	801112e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 fd73 	bl	8011bfe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011118:	e009      	b.n	801112e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801111a:	6839      	ldr	r1, [r7, #0]
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f000 fca3 	bl	8011a68 <USBD_CtlError>
          break;
 8011122:	e004      	b.n	801112e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011124:	6839      	ldr	r1, [r7, #0]
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 fc9e 	bl	8011a68 <USBD_CtlError>
          break;
 801112c:	e000      	b.n	8011130 <USBD_StdItfReq+0x7c>
          break;
 801112e:	bf00      	nop
      }
      break;
 8011130:	e004      	b.n	801113c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8011132:	6839      	ldr	r1, [r7, #0]
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f000 fc97 	bl	8011a68 <USBD_CtlError>
      break;
 801113a:	bf00      	nop
  }

  return ret;
 801113c:	7bfb      	ldrb	r3, [r7, #15]
}
 801113e:	4618      	mov	r0, r3
 8011140:	3710      	adds	r7, #16
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}

08011146 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011146:	b580      	push	{r7, lr}
 8011148:	b084      	sub	sp, #16
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
 801114e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011150:	2300      	movs	r3, #0
 8011152:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	889b      	ldrh	r3, [r3, #4]
 8011158:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011162:	2b40      	cmp	r3, #64	; 0x40
 8011164:	d007      	beq.n	8011176 <USBD_StdEPReq+0x30>
 8011166:	2b40      	cmp	r3, #64	; 0x40
 8011168:	f200 8145 	bhi.w	80113f6 <USBD_StdEPReq+0x2b0>
 801116c:	2b00      	cmp	r3, #0
 801116e:	d00c      	beq.n	801118a <USBD_StdEPReq+0x44>
 8011170:	2b20      	cmp	r3, #32
 8011172:	f040 8140 	bne.w	80113f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801117c:	689b      	ldr	r3, [r3, #8]
 801117e:	6839      	ldr	r1, [r7, #0]
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	4798      	blx	r3
 8011184:	4603      	mov	r3, r0
 8011186:	73fb      	strb	r3, [r7, #15]
      break;
 8011188:	e13a      	b.n	8011400 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	785b      	ldrb	r3, [r3, #1]
 801118e:	2b03      	cmp	r3, #3
 8011190:	d007      	beq.n	80111a2 <USBD_StdEPReq+0x5c>
 8011192:	2b03      	cmp	r3, #3
 8011194:	f300 8129 	bgt.w	80113ea <USBD_StdEPReq+0x2a4>
 8011198:	2b00      	cmp	r3, #0
 801119a:	d07f      	beq.n	801129c <USBD_StdEPReq+0x156>
 801119c:	2b01      	cmp	r3, #1
 801119e:	d03c      	beq.n	801121a <USBD_StdEPReq+0xd4>
 80111a0:	e123      	b.n	80113ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	2b02      	cmp	r3, #2
 80111ac:	d002      	beq.n	80111b4 <USBD_StdEPReq+0x6e>
 80111ae:	2b03      	cmp	r3, #3
 80111b0:	d016      	beq.n	80111e0 <USBD_StdEPReq+0x9a>
 80111b2:	e02c      	b.n	801120e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111b4:	7bbb      	ldrb	r3, [r7, #14]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00d      	beq.n	80111d6 <USBD_StdEPReq+0x90>
 80111ba:	7bbb      	ldrb	r3, [r7, #14]
 80111bc:	2b80      	cmp	r3, #128	; 0x80
 80111be:	d00a      	beq.n	80111d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80111c0:	7bbb      	ldrb	r3, [r7, #14]
 80111c2:	4619      	mov	r1, r3
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f007 fcd1 	bl	8018b6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80111ca:	2180      	movs	r1, #128	; 0x80
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f007 fccd 	bl	8018b6c <USBD_LL_StallEP>
 80111d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80111d4:	e020      	b.n	8011218 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80111d6:	6839      	ldr	r1, [r7, #0]
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f000 fc45 	bl	8011a68 <USBD_CtlError>
              break;
 80111de:	e01b      	b.n	8011218 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	885b      	ldrh	r3, [r3, #2]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d10e      	bne.n	8011206 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80111e8:	7bbb      	ldrb	r3, [r7, #14]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00b      	beq.n	8011206 <USBD_StdEPReq+0xc0>
 80111ee:	7bbb      	ldrb	r3, [r7, #14]
 80111f0:	2b80      	cmp	r3, #128	; 0x80
 80111f2:	d008      	beq.n	8011206 <USBD_StdEPReq+0xc0>
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	88db      	ldrh	r3, [r3, #6]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d104      	bne.n	8011206 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80111fc:	7bbb      	ldrb	r3, [r7, #14]
 80111fe:	4619      	mov	r1, r3
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f007 fcb3 	bl	8018b6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 fcf9 	bl	8011bfe <USBD_CtlSendStatus>

              break;
 801120c:	e004      	b.n	8011218 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801120e:	6839      	ldr	r1, [r7, #0]
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f000 fc29 	bl	8011a68 <USBD_CtlError>
              break;
 8011216:	bf00      	nop
          }
          break;
 8011218:	e0ec      	b.n	80113f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011220:	b2db      	uxtb	r3, r3
 8011222:	2b02      	cmp	r3, #2
 8011224:	d002      	beq.n	801122c <USBD_StdEPReq+0xe6>
 8011226:	2b03      	cmp	r3, #3
 8011228:	d016      	beq.n	8011258 <USBD_StdEPReq+0x112>
 801122a:	e030      	b.n	801128e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801122c:	7bbb      	ldrb	r3, [r7, #14]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00d      	beq.n	801124e <USBD_StdEPReq+0x108>
 8011232:	7bbb      	ldrb	r3, [r7, #14]
 8011234:	2b80      	cmp	r3, #128	; 0x80
 8011236:	d00a      	beq.n	801124e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011238:	7bbb      	ldrb	r3, [r7, #14]
 801123a:	4619      	mov	r1, r3
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f007 fc95 	bl	8018b6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011242:	2180      	movs	r1, #128	; 0x80
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f007 fc91 	bl	8018b6c <USBD_LL_StallEP>
 801124a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801124c:	e025      	b.n	801129a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801124e:	6839      	ldr	r1, [r7, #0]
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f000 fc09 	bl	8011a68 <USBD_CtlError>
              break;
 8011256:	e020      	b.n	801129a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	885b      	ldrh	r3, [r3, #2]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d11b      	bne.n	8011298 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011260:	7bbb      	ldrb	r3, [r7, #14]
 8011262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011266:	2b00      	cmp	r3, #0
 8011268:	d004      	beq.n	8011274 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801126a:	7bbb      	ldrb	r3, [r7, #14]
 801126c:	4619      	mov	r1, r3
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f007 fc9b 	bl	8018baa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f000 fcc2 	bl	8011bfe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011280:	689b      	ldr	r3, [r3, #8]
 8011282:	6839      	ldr	r1, [r7, #0]
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	4798      	blx	r3
 8011288:	4603      	mov	r3, r0
 801128a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801128c:	e004      	b.n	8011298 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801128e:	6839      	ldr	r1, [r7, #0]
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 fbe9 	bl	8011a68 <USBD_CtlError>
              break;
 8011296:	e000      	b.n	801129a <USBD_StdEPReq+0x154>
              break;
 8011298:	bf00      	nop
          }
          break;
 801129a:	e0ab      	b.n	80113f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	2b02      	cmp	r3, #2
 80112a6:	d002      	beq.n	80112ae <USBD_StdEPReq+0x168>
 80112a8:	2b03      	cmp	r3, #3
 80112aa:	d032      	beq.n	8011312 <USBD_StdEPReq+0x1cc>
 80112ac:	e097      	b.n	80113de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80112ae:	7bbb      	ldrb	r3, [r7, #14]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d007      	beq.n	80112c4 <USBD_StdEPReq+0x17e>
 80112b4:	7bbb      	ldrb	r3, [r7, #14]
 80112b6:	2b80      	cmp	r3, #128	; 0x80
 80112b8:	d004      	beq.n	80112c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80112ba:	6839      	ldr	r1, [r7, #0]
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f000 fbd3 	bl	8011a68 <USBD_CtlError>
                break;
 80112c2:	e091      	b.n	80113e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	da0b      	bge.n	80112e4 <USBD_StdEPReq+0x19e>
 80112cc:	7bbb      	ldrb	r3, [r7, #14]
 80112ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80112d2:	4613      	mov	r3, r2
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	4413      	add	r3, r2
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	3310      	adds	r3, #16
 80112dc:	687a      	ldr	r2, [r7, #4]
 80112de:	4413      	add	r3, r2
 80112e0:	3304      	adds	r3, #4
 80112e2:	e00b      	b.n	80112fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80112e4:	7bbb      	ldrb	r3, [r7, #14]
 80112e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112ea:	4613      	mov	r3, r2
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	4413      	add	r3, r2
 80112f0:	009b      	lsls	r3, r3, #2
 80112f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	4413      	add	r3, r2
 80112fa:	3304      	adds	r3, #4
 80112fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2200      	movs	r2, #0
 8011302:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	2202      	movs	r2, #2
 8011308:	4619      	mov	r1, r3
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f000 fc1d 	bl	8011b4a <USBD_CtlSendData>
              break;
 8011310:	e06a      	b.n	80113e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011316:	2b00      	cmp	r3, #0
 8011318:	da11      	bge.n	801133e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801131a:	7bbb      	ldrb	r3, [r7, #14]
 801131c:	f003 020f 	and.w	r2, r3, #15
 8011320:	6879      	ldr	r1, [r7, #4]
 8011322:	4613      	mov	r3, r2
 8011324:	009b      	lsls	r3, r3, #2
 8011326:	4413      	add	r3, r2
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	440b      	add	r3, r1
 801132c:	3324      	adds	r3, #36	; 0x24
 801132e:	881b      	ldrh	r3, [r3, #0]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d117      	bne.n	8011364 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011334:	6839      	ldr	r1, [r7, #0]
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 fb96 	bl	8011a68 <USBD_CtlError>
                  break;
 801133c:	e054      	b.n	80113e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801133e:	7bbb      	ldrb	r3, [r7, #14]
 8011340:	f003 020f 	and.w	r2, r3, #15
 8011344:	6879      	ldr	r1, [r7, #4]
 8011346:	4613      	mov	r3, r2
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	4413      	add	r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	440b      	add	r3, r1
 8011350:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011354:	881b      	ldrh	r3, [r3, #0]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d104      	bne.n	8011364 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801135a:	6839      	ldr	r1, [r7, #0]
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 fb83 	bl	8011a68 <USBD_CtlError>
                  break;
 8011362:	e041      	b.n	80113e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011368:	2b00      	cmp	r3, #0
 801136a:	da0b      	bge.n	8011384 <USBD_StdEPReq+0x23e>
 801136c:	7bbb      	ldrb	r3, [r7, #14]
 801136e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011372:	4613      	mov	r3, r2
 8011374:	009b      	lsls	r3, r3, #2
 8011376:	4413      	add	r3, r2
 8011378:	009b      	lsls	r3, r3, #2
 801137a:	3310      	adds	r3, #16
 801137c:	687a      	ldr	r2, [r7, #4]
 801137e:	4413      	add	r3, r2
 8011380:	3304      	adds	r3, #4
 8011382:	e00b      	b.n	801139c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011384:	7bbb      	ldrb	r3, [r7, #14]
 8011386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801138a:	4613      	mov	r3, r2
 801138c:	009b      	lsls	r3, r3, #2
 801138e:	4413      	add	r3, r2
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	4413      	add	r3, r2
 801139a:	3304      	adds	r3, #4
 801139c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801139e:	7bbb      	ldrb	r3, [r7, #14]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d002      	beq.n	80113aa <USBD_StdEPReq+0x264>
 80113a4:	7bbb      	ldrb	r3, [r7, #14]
 80113a6:	2b80      	cmp	r3, #128	; 0x80
 80113a8:	d103      	bne.n	80113b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	2200      	movs	r2, #0
 80113ae:	601a      	str	r2, [r3, #0]
 80113b0:	e00e      	b.n	80113d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80113b2:	7bbb      	ldrb	r3, [r7, #14]
 80113b4:	4619      	mov	r1, r3
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f007 fc16 	bl	8018be8 <USBD_LL_IsStallEP>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d003      	beq.n	80113ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	2201      	movs	r2, #1
 80113c6:	601a      	str	r2, [r3, #0]
 80113c8:	e002      	b.n	80113d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	2200      	movs	r2, #0
 80113ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	2202      	movs	r2, #2
 80113d4:	4619      	mov	r1, r3
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f000 fbb7 	bl	8011b4a <USBD_CtlSendData>
              break;
 80113dc:	e004      	b.n	80113e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80113de:	6839      	ldr	r1, [r7, #0]
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f000 fb41 	bl	8011a68 <USBD_CtlError>
              break;
 80113e6:	bf00      	nop
          }
          break;
 80113e8:	e004      	b.n	80113f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80113ea:	6839      	ldr	r1, [r7, #0]
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f000 fb3b 	bl	8011a68 <USBD_CtlError>
          break;
 80113f2:	bf00      	nop
      }
      break;
 80113f4:	e004      	b.n	8011400 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80113f6:	6839      	ldr	r1, [r7, #0]
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f000 fb35 	bl	8011a68 <USBD_CtlError>
      break;
 80113fe:	bf00      	nop
  }

  return ret;
 8011400:	7bfb      	ldrb	r3, [r7, #15]
}
 8011402:	4618      	mov	r0, r3
 8011404:	3710      	adds	r7, #16
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}
	...

0801140c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011416:	2300      	movs	r3, #0
 8011418:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801141a:	2300      	movs	r3, #0
 801141c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801141e:	2300      	movs	r3, #0
 8011420:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	885b      	ldrh	r3, [r3, #2]
 8011426:	0a1b      	lsrs	r3, r3, #8
 8011428:	b29b      	uxth	r3, r3
 801142a:	3b01      	subs	r3, #1
 801142c:	2b06      	cmp	r3, #6
 801142e:	f200 8128 	bhi.w	8011682 <USBD_GetDescriptor+0x276>
 8011432:	a201      	add	r2, pc, #4	; (adr r2, 8011438 <USBD_GetDescriptor+0x2c>)
 8011434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011438:	08011455 	.word	0x08011455
 801143c:	0801146d 	.word	0x0801146d
 8011440:	080114ad 	.word	0x080114ad
 8011444:	08011683 	.word	0x08011683
 8011448:	08011683 	.word	0x08011683
 801144c:	08011623 	.word	0x08011623
 8011450:	0801164f 	.word	0x0801164f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	7c12      	ldrb	r2, [r2, #16]
 8011460:	f107 0108 	add.w	r1, r7, #8
 8011464:	4610      	mov	r0, r2
 8011466:	4798      	blx	r3
 8011468:	60f8      	str	r0, [r7, #12]
      break;
 801146a:	e112      	b.n	8011692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	7c1b      	ldrb	r3, [r3, #16]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d10d      	bne.n	8011490 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801147c:	f107 0208 	add.w	r2, r7, #8
 8011480:	4610      	mov	r0, r2
 8011482:	4798      	blx	r3
 8011484:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	3301      	adds	r3, #1
 801148a:	2202      	movs	r2, #2
 801148c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801148e:	e100      	b.n	8011692 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011498:	f107 0208 	add.w	r2, r7, #8
 801149c:	4610      	mov	r0, r2
 801149e:	4798      	blx	r3
 80114a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	3301      	adds	r3, #1
 80114a6:	2202      	movs	r2, #2
 80114a8:	701a      	strb	r2, [r3, #0]
      break;
 80114aa:	e0f2      	b.n	8011692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	885b      	ldrh	r3, [r3, #2]
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	2b05      	cmp	r3, #5
 80114b4:	f200 80ac 	bhi.w	8011610 <USBD_GetDescriptor+0x204>
 80114b8:	a201      	add	r2, pc, #4	; (adr r2, 80114c0 <USBD_GetDescriptor+0xb4>)
 80114ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114be:	bf00      	nop
 80114c0:	080114d9 	.word	0x080114d9
 80114c4:	0801150d 	.word	0x0801150d
 80114c8:	08011541 	.word	0x08011541
 80114cc:	08011575 	.word	0x08011575
 80114d0:	080115a9 	.word	0x080115a9
 80114d4:	080115dd 	.word	0x080115dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00b      	beq.n	80114fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114ea:	685b      	ldr	r3, [r3, #4]
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	7c12      	ldrb	r2, [r2, #16]
 80114f0:	f107 0108 	add.w	r1, r7, #8
 80114f4:	4610      	mov	r0, r2
 80114f6:	4798      	blx	r3
 80114f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114fa:	e091      	b.n	8011620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80114fc:	6839      	ldr	r1, [r7, #0]
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 fab2 	bl	8011a68 <USBD_CtlError>
            err++;
 8011504:	7afb      	ldrb	r3, [r7, #11]
 8011506:	3301      	adds	r3, #1
 8011508:	72fb      	strb	r3, [r7, #11]
          break;
 801150a:	e089      	b.n	8011620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011512:	689b      	ldr	r3, [r3, #8]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d00b      	beq.n	8011530 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801151e:	689b      	ldr	r3, [r3, #8]
 8011520:	687a      	ldr	r2, [r7, #4]
 8011522:	7c12      	ldrb	r2, [r2, #16]
 8011524:	f107 0108 	add.w	r1, r7, #8
 8011528:	4610      	mov	r0, r2
 801152a:	4798      	blx	r3
 801152c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801152e:	e077      	b.n	8011620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011530:	6839      	ldr	r1, [r7, #0]
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f000 fa98 	bl	8011a68 <USBD_CtlError>
            err++;
 8011538:	7afb      	ldrb	r3, [r7, #11]
 801153a:	3301      	adds	r3, #1
 801153c:	72fb      	strb	r3, [r7, #11]
          break;
 801153e:	e06f      	b.n	8011620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d00b      	beq.n	8011564 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	687a      	ldr	r2, [r7, #4]
 8011556:	7c12      	ldrb	r2, [r2, #16]
 8011558:	f107 0108 	add.w	r1, r7, #8
 801155c:	4610      	mov	r0, r2
 801155e:	4798      	blx	r3
 8011560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011562:	e05d      	b.n	8011620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011564:	6839      	ldr	r1, [r7, #0]
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 fa7e 	bl	8011a68 <USBD_CtlError>
            err++;
 801156c:	7afb      	ldrb	r3, [r7, #11]
 801156e:	3301      	adds	r3, #1
 8011570:	72fb      	strb	r3, [r7, #11]
          break;
 8011572:	e055      	b.n	8011620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801157a:	691b      	ldr	r3, [r3, #16]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d00b      	beq.n	8011598 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011586:	691b      	ldr	r3, [r3, #16]
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	7c12      	ldrb	r2, [r2, #16]
 801158c:	f107 0108 	add.w	r1, r7, #8
 8011590:	4610      	mov	r0, r2
 8011592:	4798      	blx	r3
 8011594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011596:	e043      	b.n	8011620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011598:	6839      	ldr	r1, [r7, #0]
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f000 fa64 	bl	8011a68 <USBD_CtlError>
            err++;
 80115a0:	7afb      	ldrb	r3, [r7, #11]
 80115a2:	3301      	adds	r3, #1
 80115a4:	72fb      	strb	r3, [r7, #11]
          break;
 80115a6:	e03b      	b.n	8011620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115ae:	695b      	ldr	r3, [r3, #20]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d00b      	beq.n	80115cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115ba:	695b      	ldr	r3, [r3, #20]
 80115bc:	687a      	ldr	r2, [r7, #4]
 80115be:	7c12      	ldrb	r2, [r2, #16]
 80115c0:	f107 0108 	add.w	r1, r7, #8
 80115c4:	4610      	mov	r0, r2
 80115c6:	4798      	blx	r3
 80115c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115ca:	e029      	b.n	8011620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80115cc:	6839      	ldr	r1, [r7, #0]
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f000 fa4a 	bl	8011a68 <USBD_CtlError>
            err++;
 80115d4:	7afb      	ldrb	r3, [r7, #11]
 80115d6:	3301      	adds	r3, #1
 80115d8:	72fb      	strb	r3, [r7, #11]
          break;
 80115da:	e021      	b.n	8011620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115e2:	699b      	ldr	r3, [r3, #24]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d00b      	beq.n	8011600 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115ee:	699b      	ldr	r3, [r3, #24]
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	7c12      	ldrb	r2, [r2, #16]
 80115f4:	f107 0108 	add.w	r1, r7, #8
 80115f8:	4610      	mov	r0, r2
 80115fa:	4798      	blx	r3
 80115fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115fe:	e00f      	b.n	8011620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011600:	6839      	ldr	r1, [r7, #0]
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 fa30 	bl	8011a68 <USBD_CtlError>
            err++;
 8011608:	7afb      	ldrb	r3, [r7, #11]
 801160a:	3301      	adds	r3, #1
 801160c:	72fb      	strb	r3, [r7, #11]
          break;
 801160e:	e007      	b.n	8011620 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011610:	6839      	ldr	r1, [r7, #0]
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f000 fa28 	bl	8011a68 <USBD_CtlError>
          err++;
 8011618:	7afb      	ldrb	r3, [r7, #11]
 801161a:	3301      	adds	r3, #1
 801161c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801161e:	bf00      	nop
      }
      break;
 8011620:	e037      	b.n	8011692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	7c1b      	ldrb	r3, [r3, #16]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d109      	bne.n	801163e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011632:	f107 0208 	add.w	r2, r7, #8
 8011636:	4610      	mov	r0, r2
 8011638:	4798      	blx	r3
 801163a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801163c:	e029      	b.n	8011692 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801163e:	6839      	ldr	r1, [r7, #0]
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f000 fa11 	bl	8011a68 <USBD_CtlError>
        err++;
 8011646:	7afb      	ldrb	r3, [r7, #11]
 8011648:	3301      	adds	r3, #1
 801164a:	72fb      	strb	r3, [r7, #11]
      break;
 801164c:	e021      	b.n	8011692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	7c1b      	ldrb	r3, [r3, #16]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d10d      	bne.n	8011672 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801165e:	f107 0208 	add.w	r2, r7, #8
 8011662:	4610      	mov	r0, r2
 8011664:	4798      	blx	r3
 8011666:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	3301      	adds	r3, #1
 801166c:	2207      	movs	r2, #7
 801166e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011670:	e00f      	b.n	8011692 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011672:	6839      	ldr	r1, [r7, #0]
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f000 f9f7 	bl	8011a68 <USBD_CtlError>
        err++;
 801167a:	7afb      	ldrb	r3, [r7, #11]
 801167c:	3301      	adds	r3, #1
 801167e:	72fb      	strb	r3, [r7, #11]
      break;
 8011680:	e007      	b.n	8011692 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011682:	6839      	ldr	r1, [r7, #0]
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 f9ef 	bl	8011a68 <USBD_CtlError>
      err++;
 801168a:	7afb      	ldrb	r3, [r7, #11]
 801168c:	3301      	adds	r3, #1
 801168e:	72fb      	strb	r3, [r7, #11]
      break;
 8011690:	bf00      	nop
  }

  if (err != 0U)
 8011692:	7afb      	ldrb	r3, [r7, #11]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d11e      	bne.n	80116d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	88db      	ldrh	r3, [r3, #6]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d016      	beq.n	80116ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80116a0:	893b      	ldrh	r3, [r7, #8]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00e      	beq.n	80116c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	88da      	ldrh	r2, [r3, #6]
 80116aa:	893b      	ldrh	r3, [r7, #8]
 80116ac:	4293      	cmp	r3, r2
 80116ae:	bf28      	it	cs
 80116b0:	4613      	movcs	r3, r2
 80116b2:	b29b      	uxth	r3, r3
 80116b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80116b6:	893b      	ldrh	r3, [r7, #8]
 80116b8:	461a      	mov	r2, r3
 80116ba:	68f9      	ldr	r1, [r7, #12]
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	f000 fa44 	bl	8011b4a <USBD_CtlSendData>
 80116c2:	e009      	b.n	80116d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80116c4:	6839      	ldr	r1, [r7, #0]
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f000 f9ce 	bl	8011a68 <USBD_CtlError>
 80116cc:	e004      	b.n	80116d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 fa95 	bl	8011bfe <USBD_CtlSendStatus>
 80116d4:	e000      	b.n	80116d8 <USBD_GetDescriptor+0x2cc>
    return;
 80116d6:	bf00      	nop
  }
}
 80116d8:	3710      	adds	r7, #16
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop

080116e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	889b      	ldrh	r3, [r3, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d131      	bne.n	8011756 <USBD_SetAddress+0x76>
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	88db      	ldrh	r3, [r3, #6]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d12d      	bne.n	8011756 <USBD_SetAddress+0x76>
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	885b      	ldrh	r3, [r3, #2]
 80116fe:	2b7f      	cmp	r3, #127	; 0x7f
 8011700:	d829      	bhi.n	8011756 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	885b      	ldrh	r3, [r3, #2]
 8011706:	b2db      	uxtb	r3, r3
 8011708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801170c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011714:	b2db      	uxtb	r3, r3
 8011716:	2b03      	cmp	r3, #3
 8011718:	d104      	bne.n	8011724 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801171a:	6839      	ldr	r1, [r7, #0]
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f000 f9a3 	bl	8011a68 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011722:	e01d      	b.n	8011760 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	7bfa      	ldrb	r2, [r7, #15]
 8011728:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801172c:	7bfb      	ldrb	r3, [r7, #15]
 801172e:	4619      	mov	r1, r3
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f007 fa85 	bl	8018c40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f000 fa61 	bl	8011bfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801173c:	7bfb      	ldrb	r3, [r7, #15]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d004      	beq.n	801174c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2202      	movs	r2, #2
 8011746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801174a:	e009      	b.n	8011760 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2201      	movs	r2, #1
 8011750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011754:	e004      	b.n	8011760 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011756:	6839      	ldr	r1, [r7, #0]
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f000 f985 	bl	8011a68 <USBD_CtlError>
  }
}
 801175e:	bf00      	nop
 8011760:	bf00      	nop
 8011762:	3710      	adds	r7, #16
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011772:	2300      	movs	r3, #0
 8011774:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	885b      	ldrh	r3, [r3, #2]
 801177a:	b2da      	uxtb	r2, r3
 801177c:	4b4c      	ldr	r3, [pc, #304]	; (80118b0 <USBD_SetConfig+0x148>)
 801177e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011780:	4b4b      	ldr	r3, [pc, #300]	; (80118b0 <USBD_SetConfig+0x148>)
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	2b01      	cmp	r3, #1
 8011786:	d905      	bls.n	8011794 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011788:	6839      	ldr	r1, [r7, #0]
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f000 f96c 	bl	8011a68 <USBD_CtlError>
    return USBD_FAIL;
 8011790:	2303      	movs	r3, #3
 8011792:	e088      	b.n	80118a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801179a:	b2db      	uxtb	r3, r3
 801179c:	2b02      	cmp	r3, #2
 801179e:	d002      	beq.n	80117a6 <USBD_SetConfig+0x3e>
 80117a0:	2b03      	cmp	r3, #3
 80117a2:	d025      	beq.n	80117f0 <USBD_SetConfig+0x88>
 80117a4:	e071      	b.n	801188a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80117a6:	4b42      	ldr	r3, [pc, #264]	; (80118b0 <USBD_SetConfig+0x148>)
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d01c      	beq.n	80117e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80117ae:	4b40      	ldr	r3, [pc, #256]	; (80118b0 <USBD_SetConfig+0x148>)
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	461a      	mov	r2, r3
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80117b8:	4b3d      	ldr	r3, [pc, #244]	; (80118b0 <USBD_SetConfig+0x148>)
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	4619      	mov	r1, r3
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f7ff f948 	bl	8010a54 <USBD_SetClassConfig>
 80117c4:	4603      	mov	r3, r0
 80117c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80117c8:	7bfb      	ldrb	r3, [r7, #15]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d004      	beq.n	80117d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80117ce:	6839      	ldr	r1, [r7, #0]
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f000 f949 	bl	8011a68 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80117d6:	e065      	b.n	80118a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f000 fa10 	bl	8011bfe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2203      	movs	r2, #3
 80117e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80117e6:	e05d      	b.n	80118a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f000 fa08 	bl	8011bfe <USBD_CtlSendStatus>
      break;
 80117ee:	e059      	b.n	80118a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80117f0:	4b2f      	ldr	r3, [pc, #188]	; (80118b0 <USBD_SetConfig+0x148>)
 80117f2:	781b      	ldrb	r3, [r3, #0]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d112      	bne.n	801181e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2202      	movs	r2, #2
 80117fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011800:	4b2b      	ldr	r3, [pc, #172]	; (80118b0 <USBD_SetConfig+0x148>)
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	461a      	mov	r2, r3
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801180a:	4b29      	ldr	r3, [pc, #164]	; (80118b0 <USBD_SetConfig+0x148>)
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	4619      	mov	r1, r3
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f7ff f93b 	bl	8010a8c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 f9f1 	bl	8011bfe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801181c:	e042      	b.n	80118a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801181e:	4b24      	ldr	r3, [pc, #144]	; (80118b0 <USBD_SetConfig+0x148>)
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	461a      	mov	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	429a      	cmp	r2, r3
 801182a:	d02a      	beq.n	8011882 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	b2db      	uxtb	r3, r3
 8011832:	4619      	mov	r1, r3
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f7ff f929 	bl	8010a8c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801183a:	4b1d      	ldr	r3, [pc, #116]	; (80118b0 <USBD_SetConfig+0x148>)
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	461a      	mov	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011844:	4b1a      	ldr	r3, [pc, #104]	; (80118b0 <USBD_SetConfig+0x148>)
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	4619      	mov	r1, r3
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f7ff f902 	bl	8010a54 <USBD_SetClassConfig>
 8011850:	4603      	mov	r3, r0
 8011852:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011854:	7bfb      	ldrb	r3, [r7, #15]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d00f      	beq.n	801187a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801185a:	6839      	ldr	r1, [r7, #0]
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f000 f903 	bl	8011a68 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	b2db      	uxtb	r3, r3
 8011868:	4619      	mov	r1, r3
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7ff f90e 	bl	8010a8c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2202      	movs	r2, #2
 8011874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011878:	e014      	b.n	80118a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f000 f9bf 	bl	8011bfe <USBD_CtlSendStatus>
      break;
 8011880:	e010      	b.n	80118a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f000 f9bb 	bl	8011bfe <USBD_CtlSendStatus>
      break;
 8011888:	e00c      	b.n	80118a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801188a:	6839      	ldr	r1, [r7, #0]
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f000 f8eb 	bl	8011a68 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011892:	4b07      	ldr	r3, [pc, #28]	; (80118b0 <USBD_SetConfig+0x148>)
 8011894:	781b      	ldrb	r3, [r3, #0]
 8011896:	4619      	mov	r1, r3
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f7ff f8f7 	bl	8010a8c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801189e:	2303      	movs	r3, #3
 80118a0:	73fb      	strb	r3, [r7, #15]
      break;
 80118a2:	bf00      	nop
  }

  return ret;
 80118a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	200007d9 	.word	0x200007d9

080118b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	88db      	ldrh	r3, [r3, #6]
 80118c2:	2b01      	cmp	r3, #1
 80118c4:	d004      	beq.n	80118d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80118c6:	6839      	ldr	r1, [r7, #0]
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f000 f8cd 	bl	8011a68 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80118ce:	e023      	b.n	8011918 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118d6:	b2db      	uxtb	r3, r3
 80118d8:	2b02      	cmp	r3, #2
 80118da:	dc02      	bgt.n	80118e2 <USBD_GetConfig+0x2e>
 80118dc:	2b00      	cmp	r3, #0
 80118de:	dc03      	bgt.n	80118e8 <USBD_GetConfig+0x34>
 80118e0:	e015      	b.n	801190e <USBD_GetConfig+0x5a>
 80118e2:	2b03      	cmp	r3, #3
 80118e4:	d00b      	beq.n	80118fe <USBD_GetConfig+0x4a>
 80118e6:	e012      	b.n	801190e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2200      	movs	r2, #0
 80118ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	3308      	adds	r3, #8
 80118f2:	2201      	movs	r2, #1
 80118f4:	4619      	mov	r1, r3
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 f927 	bl	8011b4a <USBD_CtlSendData>
        break;
 80118fc:	e00c      	b.n	8011918 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	3304      	adds	r3, #4
 8011902:	2201      	movs	r2, #1
 8011904:	4619      	mov	r1, r3
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 f91f 	bl	8011b4a <USBD_CtlSendData>
        break;
 801190c:	e004      	b.n	8011918 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801190e:	6839      	ldr	r1, [r7, #0]
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f000 f8a9 	bl	8011a68 <USBD_CtlError>
        break;
 8011916:	bf00      	nop
}
 8011918:	bf00      	nop
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011930:	b2db      	uxtb	r3, r3
 8011932:	3b01      	subs	r3, #1
 8011934:	2b02      	cmp	r3, #2
 8011936:	d81e      	bhi.n	8011976 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	88db      	ldrh	r3, [r3, #6]
 801193c:	2b02      	cmp	r3, #2
 801193e:	d004      	beq.n	801194a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011940:	6839      	ldr	r1, [r7, #0]
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f000 f890 	bl	8011a68 <USBD_CtlError>
        break;
 8011948:	e01a      	b.n	8011980 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2201      	movs	r2, #1
 801194e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011956:	2b00      	cmp	r3, #0
 8011958:	d005      	beq.n	8011966 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	68db      	ldr	r3, [r3, #12]
 801195e:	f043 0202 	orr.w	r2, r3, #2
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	330c      	adds	r3, #12
 801196a:	2202      	movs	r2, #2
 801196c:	4619      	mov	r1, r3
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f000 f8eb 	bl	8011b4a <USBD_CtlSendData>
      break;
 8011974:	e004      	b.n	8011980 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011976:	6839      	ldr	r1, [r7, #0]
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f000 f875 	bl	8011a68 <USBD_CtlError>
      break;
 801197e:	bf00      	nop
  }
}
 8011980:	bf00      	nop
 8011982:	3708      	adds	r7, #8
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}

08011988 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b082      	sub	sp, #8
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	885b      	ldrh	r3, [r3, #2]
 8011996:	2b01      	cmp	r3, #1
 8011998:	d106      	bne.n	80119a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2201      	movs	r2, #1
 801199e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 f92b 	bl	8011bfe <USBD_CtlSendStatus>
  }
}
 80119a8:	bf00      	nop
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119c0:	b2db      	uxtb	r3, r3
 80119c2:	3b01      	subs	r3, #1
 80119c4:	2b02      	cmp	r3, #2
 80119c6:	d80b      	bhi.n	80119e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	885b      	ldrh	r3, [r3, #2]
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d10c      	bne.n	80119ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2200      	movs	r2, #0
 80119d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f000 f910 	bl	8011bfe <USBD_CtlSendStatus>
      }
      break;
 80119de:	e004      	b.n	80119ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80119e0:	6839      	ldr	r1, [r7, #0]
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f000 f840 	bl	8011a68 <USBD_CtlError>
      break;
 80119e8:	e000      	b.n	80119ec <USBD_ClrFeature+0x3c>
      break;
 80119ea:	bf00      	nop
  }
}
 80119ec:	bf00      	nop
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	781a      	ldrb	r2, [r3, #0]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	781a      	ldrb	r2, [r3, #0]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011a1e:	68f8      	ldr	r0, [r7, #12]
 8011a20:	f7ff fabb 	bl	8010f9a <SWAPBYTE>
 8011a24:	4603      	mov	r3, r0
 8011a26:	461a      	mov	r2, r3
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	3301      	adds	r3, #1
 8011a30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	3301      	adds	r3, #1
 8011a36:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	f7ff faae 	bl	8010f9a <SWAPBYTE>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	461a      	mov	r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011a52:	68f8      	ldr	r0, [r7, #12]
 8011a54:	f7ff faa1 	bl	8010f9a <SWAPBYTE>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	80da      	strh	r2, [r3, #6]
}
 8011a60:	bf00      	nop
 8011a62:	3710      	adds	r7, #16
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a72:	2180      	movs	r1, #128	; 0x80
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f007 f879 	bl	8018b6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f007 f875 	bl	8018b6c <USBD_LL_StallEP>
}
 8011a82:	bf00      	nop
 8011a84:	3708      	adds	r7, #8
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}

08011a8a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011a8a:	b580      	push	{r7, lr}
 8011a8c:	b086      	sub	sp, #24
 8011a8e:	af00      	add	r7, sp, #0
 8011a90:	60f8      	str	r0, [r7, #12]
 8011a92:	60b9      	str	r1, [r7, #8]
 8011a94:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011a96:	2300      	movs	r3, #0
 8011a98:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d036      	beq.n	8011b0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011aa4:	6938      	ldr	r0, [r7, #16]
 8011aa6:	f000 f836 	bl	8011b16 <USBD_GetLen>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	3301      	adds	r3, #1
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	005b      	lsls	r3, r3, #1
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011ab8:	7dfb      	ldrb	r3, [r7, #23]
 8011aba:	68ba      	ldr	r2, [r7, #8]
 8011abc:	4413      	add	r3, r2
 8011abe:	687a      	ldr	r2, [r7, #4]
 8011ac0:	7812      	ldrb	r2, [r2, #0]
 8011ac2:	701a      	strb	r2, [r3, #0]
  idx++;
 8011ac4:	7dfb      	ldrb	r3, [r7, #23]
 8011ac6:	3301      	adds	r3, #1
 8011ac8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011aca:	7dfb      	ldrb	r3, [r7, #23]
 8011acc:	68ba      	ldr	r2, [r7, #8]
 8011ace:	4413      	add	r3, r2
 8011ad0:	2203      	movs	r2, #3
 8011ad2:	701a      	strb	r2, [r3, #0]
  idx++;
 8011ad4:	7dfb      	ldrb	r3, [r7, #23]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011ada:	e013      	b.n	8011b04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011adc:	7dfb      	ldrb	r3, [r7, #23]
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	693a      	ldr	r2, [r7, #16]
 8011ae4:	7812      	ldrb	r2, [r2, #0]
 8011ae6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	3301      	adds	r3, #1
 8011aec:	613b      	str	r3, [r7, #16]
    idx++;
 8011aee:	7dfb      	ldrb	r3, [r7, #23]
 8011af0:	3301      	adds	r3, #1
 8011af2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011af4:	7dfb      	ldrb	r3, [r7, #23]
 8011af6:	68ba      	ldr	r2, [r7, #8]
 8011af8:	4413      	add	r3, r2
 8011afa:	2200      	movs	r2, #0
 8011afc:	701a      	strb	r2, [r3, #0]
    idx++;
 8011afe:	7dfb      	ldrb	r3, [r7, #23]
 8011b00:	3301      	adds	r3, #1
 8011b02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d1e7      	bne.n	8011adc <USBD_GetString+0x52>
 8011b0c:	e000      	b.n	8011b10 <USBD_GetString+0x86>
    return;
 8011b0e:	bf00      	nop
  }
}
 8011b10:	3718      	adds	r7, #24
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}

08011b16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011b16:	b480      	push	{r7}
 8011b18:	b085      	sub	sp, #20
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011b26:	e005      	b.n	8011b34 <USBD_GetLen+0x1e>
  {
    len++;
 8011b28:	7bfb      	ldrb	r3, [r7, #15]
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	3301      	adds	r3, #1
 8011b32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d1f5      	bne.n	8011b28 <USBD_GetLen+0x12>
  }

  return len;
 8011b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3714      	adds	r7, #20
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr

08011b4a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011b4a:	b580      	push	{r7, lr}
 8011b4c:	b084      	sub	sp, #16
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	60f8      	str	r0, [r7, #12]
 8011b52:	60b9      	str	r1, [r7, #8]
 8011b54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	2202      	movs	r2, #2
 8011b5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	687a      	ldr	r2, [r7, #4]
 8011b68:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	68ba      	ldr	r2, [r7, #8]
 8011b6e:	2100      	movs	r1, #0
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f007 f884 	bl	8018c7e <USBD_LL_Transmit>

  return USBD_OK;
 8011b76:	2300      	movs	r3, #0
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3710      	adds	r7, #16
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}

08011b80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	60f8      	str	r0, [r7, #12]
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	68ba      	ldr	r2, [r7, #8]
 8011b90:	2100      	movs	r1, #0
 8011b92:	68f8      	ldr	r0, [r7, #12]
 8011b94:	f007 f873 	bl	8018c7e <USBD_LL_Transmit>

  return USBD_OK;
 8011b98:	2300      	movs	r3, #0
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3710      	adds	r7, #16
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}

08011ba2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011ba2:	b580      	push	{r7, lr}
 8011ba4:	b084      	sub	sp, #16
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	60f8      	str	r0, [r7, #12]
 8011baa:	60b9      	str	r1, [r7, #8]
 8011bac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2203      	movs	r2, #3
 8011bb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	687a      	ldr	r2, [r7, #4]
 8011bba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	68ba      	ldr	r2, [r7, #8]
 8011bca:	2100      	movs	r1, #0
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f007 f877 	bl	8018cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bd2:	2300      	movs	r3, #0
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3710      	adds	r7, #16
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	68ba      	ldr	r2, [r7, #8]
 8011bec:	2100      	movs	r1, #0
 8011bee:	68f8      	ldr	r0, [r7, #12]
 8011bf0:	f007 f866 	bl	8018cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bf4:	2300      	movs	r3, #0
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b082      	sub	sp, #8
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2204      	movs	r2, #4
 8011c0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011c0e:	2300      	movs	r3, #0
 8011c10:	2200      	movs	r2, #0
 8011c12:	2100      	movs	r1, #0
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f007 f832 	bl	8018c7e <USBD_LL_Transmit>

  return USBD_OK;
 8011c1a:	2300      	movs	r3, #0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3708      	adds	r7, #8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2205      	movs	r2, #5
 8011c30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c34:	2300      	movs	r3, #0
 8011c36:	2200      	movs	r2, #0
 8011c38:	2100      	movs	r1, #0
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f007 f840 	bl	8018cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c40:	2300      	movs	r3, #0
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3708      	adds	r7, #8
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
	...

08011c4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b084      	sub	sp, #16
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	4603      	mov	r3, r0
 8011c54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011c56:	79fb      	ldrb	r3, [r7, #7]
 8011c58:	4a08      	ldr	r2, [pc, #32]	; (8011c7c <disk_status+0x30>)
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	4413      	add	r3, r2
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	79fa      	ldrb	r2, [r7, #7]
 8011c64:	4905      	ldr	r1, [pc, #20]	; (8011c7c <disk_status+0x30>)
 8011c66:	440a      	add	r2, r1
 8011c68:	7a12      	ldrb	r2, [r2, #8]
 8011c6a:	4610      	mov	r0, r2
 8011c6c:	4798      	blx	r3
 8011c6e:	4603      	mov	r3, r0
 8011c70:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3710      	adds	r7, #16
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}
 8011c7c:	20000804 	.word	0x20000804

08011c80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	4603      	mov	r3, r0
 8011c88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011c8e:	79fb      	ldrb	r3, [r7, #7]
 8011c90:	4a0d      	ldr	r2, [pc, #52]	; (8011cc8 <disk_initialize+0x48>)
 8011c92:	5cd3      	ldrb	r3, [r2, r3]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d111      	bne.n	8011cbc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011c98:	79fb      	ldrb	r3, [r7, #7]
 8011c9a:	4a0b      	ldr	r2, [pc, #44]	; (8011cc8 <disk_initialize+0x48>)
 8011c9c:	2101      	movs	r1, #1
 8011c9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011ca0:	79fb      	ldrb	r3, [r7, #7]
 8011ca2:	4a09      	ldr	r2, [pc, #36]	; (8011cc8 <disk_initialize+0x48>)
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	4413      	add	r3, r2
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	79fa      	ldrb	r2, [r7, #7]
 8011cae:	4906      	ldr	r1, [pc, #24]	; (8011cc8 <disk_initialize+0x48>)
 8011cb0:	440a      	add	r2, r1
 8011cb2:	7a12      	ldrb	r2, [r2, #8]
 8011cb4:	4610      	mov	r0, r2
 8011cb6:	4798      	blx	r3
 8011cb8:	4603      	mov	r3, r0
 8011cba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3710      	adds	r7, #16
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	20000804 	.word	0x20000804

08011ccc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011ccc:	b590      	push	{r4, r7, lr}
 8011cce:	b087      	sub	sp, #28
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	60b9      	str	r1, [r7, #8]
 8011cd4:	607a      	str	r2, [r7, #4]
 8011cd6:	603b      	str	r3, [r7, #0]
 8011cd8:	4603      	mov	r3, r0
 8011cda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011cdc:	7bfb      	ldrb	r3, [r7, #15]
 8011cde:	4a0a      	ldr	r2, [pc, #40]	; (8011d08 <disk_read+0x3c>)
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	4413      	add	r3, r2
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	689c      	ldr	r4, [r3, #8]
 8011ce8:	7bfb      	ldrb	r3, [r7, #15]
 8011cea:	4a07      	ldr	r2, [pc, #28]	; (8011d08 <disk_read+0x3c>)
 8011cec:	4413      	add	r3, r2
 8011cee:	7a18      	ldrb	r0, [r3, #8]
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	68b9      	ldr	r1, [r7, #8]
 8011cf6:	47a0      	blx	r4
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	75fb      	strb	r3, [r7, #23]
  return res;
 8011cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	371c      	adds	r7, #28
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd90      	pop	{r4, r7, pc}
 8011d06:	bf00      	nop
 8011d08:	20000804 	.word	0x20000804

08011d0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011d0c:	b590      	push	{r4, r7, lr}
 8011d0e:	b087      	sub	sp, #28
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	60b9      	str	r1, [r7, #8]
 8011d14:	607a      	str	r2, [r7, #4]
 8011d16:	603b      	str	r3, [r7, #0]
 8011d18:	4603      	mov	r3, r0
 8011d1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011d1c:	7bfb      	ldrb	r3, [r7, #15]
 8011d1e:	4a0a      	ldr	r2, [pc, #40]	; (8011d48 <disk_write+0x3c>)
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	4413      	add	r3, r2
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	68dc      	ldr	r4, [r3, #12]
 8011d28:	7bfb      	ldrb	r3, [r7, #15]
 8011d2a:	4a07      	ldr	r2, [pc, #28]	; (8011d48 <disk_write+0x3c>)
 8011d2c:	4413      	add	r3, r2
 8011d2e:	7a18      	ldrb	r0, [r3, #8]
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	687a      	ldr	r2, [r7, #4]
 8011d34:	68b9      	ldr	r1, [r7, #8]
 8011d36:	47a0      	blx	r4
 8011d38:	4603      	mov	r3, r0
 8011d3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8011d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	371c      	adds	r7, #28
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd90      	pop	{r4, r7, pc}
 8011d46:	bf00      	nop
 8011d48:	20000804 	.word	0x20000804

08011d4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	4603      	mov	r3, r0
 8011d54:	603a      	str	r2, [r7, #0]
 8011d56:	71fb      	strb	r3, [r7, #7]
 8011d58:	460b      	mov	r3, r1
 8011d5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011d5c:	79fb      	ldrb	r3, [r7, #7]
 8011d5e:	4a09      	ldr	r2, [pc, #36]	; (8011d84 <disk_ioctl+0x38>)
 8011d60:	009b      	lsls	r3, r3, #2
 8011d62:	4413      	add	r3, r2
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	691b      	ldr	r3, [r3, #16]
 8011d68:	79fa      	ldrb	r2, [r7, #7]
 8011d6a:	4906      	ldr	r1, [pc, #24]	; (8011d84 <disk_ioctl+0x38>)
 8011d6c:	440a      	add	r2, r1
 8011d6e:	7a10      	ldrb	r0, [r2, #8]
 8011d70:	79b9      	ldrb	r1, [r7, #6]
 8011d72:	683a      	ldr	r2, [r7, #0]
 8011d74:	4798      	blx	r3
 8011d76:	4603      	mov	r3, r0
 8011d78:	73fb      	strb	r3, [r7, #15]
  return res;
 8011d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}
 8011d84:	20000804 	.word	0x20000804

08011d88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011d88:	b480      	push	{r7}
 8011d8a:	b085      	sub	sp, #20
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	3301      	adds	r3, #1
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011d98:	89fb      	ldrh	r3, [r7, #14]
 8011d9a:	021b      	lsls	r3, r3, #8
 8011d9c:	b21a      	sxth	r2, r3
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	b21b      	sxth	r3, r3
 8011da4:	4313      	orrs	r3, r2
 8011da6:	b21b      	sxth	r3, r3
 8011da8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011daa:	89fb      	ldrh	r3, [r7, #14]
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	3714      	adds	r7, #20
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr

08011db8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011db8:	b480      	push	{r7}
 8011dba:	b085      	sub	sp, #20
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	3303      	adds	r3, #3
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	021b      	lsls	r3, r3, #8
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	3202      	adds	r2, #2
 8011dd0:	7812      	ldrb	r2, [r2, #0]
 8011dd2:	4313      	orrs	r3, r2
 8011dd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	021b      	lsls	r3, r3, #8
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	3201      	adds	r2, #1
 8011dde:	7812      	ldrb	r2, [r2, #0]
 8011de0:	4313      	orrs	r3, r2
 8011de2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	021b      	lsls	r3, r3, #8
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	7812      	ldrb	r2, [r2, #0]
 8011dec:	4313      	orrs	r3, r2
 8011dee:	60fb      	str	r3, [r7, #12]
	return rv;
 8011df0:	68fb      	ldr	r3, [r7, #12]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3714      	adds	r7, #20
 8011df6:	46bd      	mov	sp, r7
 8011df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfc:	4770      	bx	lr

08011dfe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011dfe:	b480      	push	{r7}
 8011e00:	b083      	sub	sp, #12
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	6078      	str	r0, [r7, #4]
 8011e06:	460b      	mov	r3, r1
 8011e08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	1c5a      	adds	r2, r3, #1
 8011e0e:	607a      	str	r2, [r7, #4]
 8011e10:	887a      	ldrh	r2, [r7, #2]
 8011e12:	b2d2      	uxtb	r2, r2
 8011e14:	701a      	strb	r2, [r3, #0]
 8011e16:	887b      	ldrh	r3, [r7, #2]
 8011e18:	0a1b      	lsrs	r3, r3, #8
 8011e1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	1c5a      	adds	r2, r3, #1
 8011e20:	607a      	str	r2, [r7, #4]
 8011e22:	887a      	ldrh	r2, [r7, #2]
 8011e24:	b2d2      	uxtb	r2, r2
 8011e26:	701a      	strb	r2, [r3, #0]
}
 8011e28:	bf00      	nop
 8011e2a:	370c      	adds	r7, #12
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr

08011e34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	1c5a      	adds	r2, r3, #1
 8011e42:	607a      	str	r2, [r7, #4]
 8011e44:	683a      	ldr	r2, [r7, #0]
 8011e46:	b2d2      	uxtb	r2, r2
 8011e48:	701a      	strb	r2, [r3, #0]
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	0a1b      	lsrs	r3, r3, #8
 8011e4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	1c5a      	adds	r2, r3, #1
 8011e54:	607a      	str	r2, [r7, #4]
 8011e56:	683a      	ldr	r2, [r7, #0]
 8011e58:	b2d2      	uxtb	r2, r2
 8011e5a:	701a      	strb	r2, [r3, #0]
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	0a1b      	lsrs	r3, r3, #8
 8011e60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	1c5a      	adds	r2, r3, #1
 8011e66:	607a      	str	r2, [r7, #4]
 8011e68:	683a      	ldr	r2, [r7, #0]
 8011e6a:	b2d2      	uxtb	r2, r2
 8011e6c:	701a      	strb	r2, [r3, #0]
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	0a1b      	lsrs	r3, r3, #8
 8011e72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	1c5a      	adds	r2, r3, #1
 8011e78:	607a      	str	r2, [r7, #4]
 8011e7a:	683a      	ldr	r2, [r7, #0]
 8011e7c:	b2d2      	uxtb	r2, r2
 8011e7e:	701a      	strb	r2, [r3, #0]
}
 8011e80:	bf00      	nop
 8011e82:	370c      	adds	r7, #12
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr

08011e8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011e8c:	b480      	push	{r7}
 8011e8e:	b087      	sub	sp, #28
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d00d      	beq.n	8011ec2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011ea6:	693a      	ldr	r2, [r7, #16]
 8011ea8:	1c53      	adds	r3, r2, #1
 8011eaa:	613b      	str	r3, [r7, #16]
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	1c59      	adds	r1, r3, #1
 8011eb0:	6179      	str	r1, [r7, #20]
 8011eb2:	7812      	ldrb	r2, [r2, #0]
 8011eb4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	3b01      	subs	r3, #1
 8011eba:	607b      	str	r3, [r7, #4]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d1f1      	bne.n	8011ea6 <mem_cpy+0x1a>
	}
}
 8011ec2:	bf00      	nop
 8011ec4:	371c      	adds	r7, #28
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr

08011ece <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011ece:	b480      	push	{r7}
 8011ed0:	b087      	sub	sp, #28
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	60f8      	str	r0, [r7, #12]
 8011ed6:	60b9      	str	r1, [r7, #8]
 8011ed8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	1c5a      	adds	r2, r3, #1
 8011ee2:	617a      	str	r2, [r7, #20]
 8011ee4:	68ba      	ldr	r2, [r7, #8]
 8011ee6:	b2d2      	uxtb	r2, r2
 8011ee8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	3b01      	subs	r3, #1
 8011eee:	607b      	str	r3, [r7, #4]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d1f3      	bne.n	8011ede <mem_set+0x10>
}
 8011ef6:	bf00      	nop
 8011ef8:	bf00      	nop
 8011efa:	371c      	adds	r7, #28
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr

08011f04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011f04:	b480      	push	{r7}
 8011f06:	b089      	sub	sp, #36	; 0x24
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	61fb      	str	r3, [r7, #28]
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	1c5a      	adds	r2, r3, #1
 8011f20:	61fa      	str	r2, [r7, #28]
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	4619      	mov	r1, r3
 8011f26:	69bb      	ldr	r3, [r7, #24]
 8011f28:	1c5a      	adds	r2, r3, #1
 8011f2a:	61ba      	str	r2, [r7, #24]
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	1acb      	subs	r3, r1, r3
 8011f30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	3b01      	subs	r3, #1
 8011f36:	607b      	str	r3, [r7, #4]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d002      	beq.n	8011f44 <mem_cmp+0x40>
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d0eb      	beq.n	8011f1c <mem_cmp+0x18>

	return r;
 8011f44:	697b      	ldr	r3, [r7, #20]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3724      	adds	r7, #36	; 0x24
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr

08011f52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011f52:	b480      	push	{r7}
 8011f54:	b083      	sub	sp, #12
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	6078      	str	r0, [r7, #4]
 8011f5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011f5c:	e002      	b.n	8011f64 <chk_chr+0x12>
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	3301      	adds	r3, #1
 8011f62:	607b      	str	r3, [r7, #4]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d005      	beq.n	8011f78 <chk_chr+0x26>
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	461a      	mov	r2, r3
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	4293      	cmp	r3, r2
 8011f76:	d1f2      	bne.n	8011f5e <chk_chr+0xc>
	return *str;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	781b      	ldrb	r3, [r3, #0]
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	370c      	adds	r7, #12
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr

08011f88 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d009      	beq.n	8011faa <lock_fs+0x22>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f002 fcde 	bl	801495c <ff_req_grant>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d001      	beq.n	8011faa <lock_fs+0x22>
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	e000      	b.n	8011fac <lock_fs+0x24>
 8011faa:	2300      	movs	r3, #0
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	460b      	mov	r3, r1
 8011fbe:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00d      	beq.n	8011fe2 <unlock_fs+0x2e>
 8011fc6:	78fb      	ldrb	r3, [r7, #3]
 8011fc8:	2b0c      	cmp	r3, #12
 8011fca:	d00a      	beq.n	8011fe2 <unlock_fs+0x2e>
 8011fcc:	78fb      	ldrb	r3, [r7, #3]
 8011fce:	2b0b      	cmp	r3, #11
 8011fd0:	d007      	beq.n	8011fe2 <unlock_fs+0x2e>
 8011fd2:	78fb      	ldrb	r3, [r7, #3]
 8011fd4:	2b0f      	cmp	r3, #15
 8011fd6:	d004      	beq.n	8011fe2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	68db      	ldr	r3, [r3, #12]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f002 fcd2 	bl	8014986 <ff_rel_grant>
	}
}
 8011fe2:	bf00      	nop
 8011fe4:	3708      	adds	r7, #8
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
	...

08011fec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011fec:	b480      	push	{r7}
 8011fee:	b085      	sub	sp, #20
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	60bb      	str	r3, [r7, #8]
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	60fb      	str	r3, [r7, #12]
 8011ffe:	e029      	b.n	8012054 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012000:	4a27      	ldr	r2, [pc, #156]	; (80120a0 <chk_lock+0xb4>)
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	011b      	lsls	r3, r3, #4
 8012006:	4413      	add	r3, r2
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d01d      	beq.n	801204a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801200e:	4a24      	ldr	r2, [pc, #144]	; (80120a0 <chk_lock+0xb4>)
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	011b      	lsls	r3, r3, #4
 8012014:	4413      	add	r3, r2
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	429a      	cmp	r2, r3
 801201e:	d116      	bne.n	801204e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012020:	4a1f      	ldr	r2, [pc, #124]	; (80120a0 <chk_lock+0xb4>)
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	011b      	lsls	r3, r3, #4
 8012026:	4413      	add	r3, r2
 8012028:	3304      	adds	r3, #4
 801202a:	681a      	ldr	r2, [r3, #0]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012030:	429a      	cmp	r2, r3
 8012032:	d10c      	bne.n	801204e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012034:	4a1a      	ldr	r2, [pc, #104]	; (80120a0 <chk_lock+0xb4>)
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	011b      	lsls	r3, r3, #4
 801203a:	4413      	add	r3, r2
 801203c:	3308      	adds	r3, #8
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012044:	429a      	cmp	r2, r3
 8012046:	d102      	bne.n	801204e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012048:	e007      	b.n	801205a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801204a:	2301      	movs	r3, #1
 801204c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	3301      	adds	r3, #1
 8012052:	60fb      	str	r3, [r7, #12]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2b01      	cmp	r3, #1
 8012058:	d9d2      	bls.n	8012000 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2b02      	cmp	r3, #2
 801205e:	d109      	bne.n	8012074 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d102      	bne.n	801206c <chk_lock+0x80>
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	2b02      	cmp	r3, #2
 801206a:	d101      	bne.n	8012070 <chk_lock+0x84>
 801206c:	2300      	movs	r3, #0
 801206e:	e010      	b.n	8012092 <chk_lock+0xa6>
 8012070:	2312      	movs	r3, #18
 8012072:	e00e      	b.n	8012092 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d108      	bne.n	801208c <chk_lock+0xa0>
 801207a:	4a09      	ldr	r2, [pc, #36]	; (80120a0 <chk_lock+0xb4>)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	011b      	lsls	r3, r3, #4
 8012080:	4413      	add	r3, r2
 8012082:	330c      	adds	r3, #12
 8012084:	881b      	ldrh	r3, [r3, #0]
 8012086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801208a:	d101      	bne.n	8012090 <chk_lock+0xa4>
 801208c:	2310      	movs	r3, #16
 801208e:	e000      	b.n	8012092 <chk_lock+0xa6>
 8012090:	2300      	movs	r3, #0
}
 8012092:	4618      	mov	r0, r3
 8012094:	3714      	adds	r7, #20
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	200007e4 	.word	0x200007e4

080120a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80120aa:	2300      	movs	r3, #0
 80120ac:	607b      	str	r3, [r7, #4]
 80120ae:	e002      	b.n	80120b6 <enq_lock+0x12>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	3301      	adds	r3, #1
 80120b4:	607b      	str	r3, [r7, #4]
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d806      	bhi.n	80120ca <enq_lock+0x26>
 80120bc:	4a09      	ldr	r2, [pc, #36]	; (80120e4 <enq_lock+0x40>)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	011b      	lsls	r3, r3, #4
 80120c2:	4413      	add	r3, r2
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d1f2      	bne.n	80120b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2b02      	cmp	r3, #2
 80120ce:	bf14      	ite	ne
 80120d0:	2301      	movne	r3, #1
 80120d2:	2300      	moveq	r3, #0
 80120d4:	b2db      	uxtb	r3, r3
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	370c      	adds	r7, #12
 80120da:	46bd      	mov	sp, r7
 80120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e0:	4770      	bx	lr
 80120e2:	bf00      	nop
 80120e4:	200007e4 	.word	0x200007e4

080120e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b085      	sub	sp, #20
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80120f2:	2300      	movs	r3, #0
 80120f4:	60fb      	str	r3, [r7, #12]
 80120f6:	e01f      	b.n	8012138 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80120f8:	4a41      	ldr	r2, [pc, #260]	; (8012200 <inc_lock+0x118>)
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	011b      	lsls	r3, r3, #4
 80120fe:	4413      	add	r3, r2
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	429a      	cmp	r2, r3
 8012108:	d113      	bne.n	8012132 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801210a:	4a3d      	ldr	r2, [pc, #244]	; (8012200 <inc_lock+0x118>)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	011b      	lsls	r3, r3, #4
 8012110:	4413      	add	r3, r2
 8012112:	3304      	adds	r3, #4
 8012114:	681a      	ldr	r2, [r3, #0]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801211a:	429a      	cmp	r2, r3
 801211c:	d109      	bne.n	8012132 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801211e:	4a38      	ldr	r2, [pc, #224]	; (8012200 <inc_lock+0x118>)
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	011b      	lsls	r3, r3, #4
 8012124:	4413      	add	r3, r2
 8012126:	3308      	adds	r3, #8
 8012128:	681a      	ldr	r2, [r3, #0]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801212e:	429a      	cmp	r2, r3
 8012130:	d006      	beq.n	8012140 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	3301      	adds	r3, #1
 8012136:	60fb      	str	r3, [r7, #12]
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2b01      	cmp	r3, #1
 801213c:	d9dc      	bls.n	80120f8 <inc_lock+0x10>
 801213e:	e000      	b.n	8012142 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012140:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2b02      	cmp	r3, #2
 8012146:	d132      	bne.n	80121ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012148:	2300      	movs	r3, #0
 801214a:	60fb      	str	r3, [r7, #12]
 801214c:	e002      	b.n	8012154 <inc_lock+0x6c>
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	3301      	adds	r3, #1
 8012152:	60fb      	str	r3, [r7, #12]
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2b01      	cmp	r3, #1
 8012158:	d806      	bhi.n	8012168 <inc_lock+0x80>
 801215a:	4a29      	ldr	r2, [pc, #164]	; (8012200 <inc_lock+0x118>)
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	011b      	lsls	r3, r3, #4
 8012160:	4413      	add	r3, r2
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d1f2      	bne.n	801214e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b02      	cmp	r3, #2
 801216c:	d101      	bne.n	8012172 <inc_lock+0x8a>
 801216e:	2300      	movs	r3, #0
 8012170:	e040      	b.n	80121f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	4922      	ldr	r1, [pc, #136]	; (8012200 <inc_lock+0x118>)
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	011b      	lsls	r3, r3, #4
 801217c:	440b      	add	r3, r1
 801217e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	689a      	ldr	r2, [r3, #8]
 8012184:	491e      	ldr	r1, [pc, #120]	; (8012200 <inc_lock+0x118>)
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	011b      	lsls	r3, r3, #4
 801218a:	440b      	add	r3, r1
 801218c:	3304      	adds	r3, #4
 801218e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	695a      	ldr	r2, [r3, #20]
 8012194:	491a      	ldr	r1, [pc, #104]	; (8012200 <inc_lock+0x118>)
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	011b      	lsls	r3, r3, #4
 801219a:	440b      	add	r3, r1
 801219c:	3308      	adds	r3, #8
 801219e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80121a0:	4a17      	ldr	r2, [pc, #92]	; (8012200 <inc_lock+0x118>)
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	011b      	lsls	r3, r3, #4
 80121a6:	4413      	add	r3, r2
 80121a8:	330c      	adds	r3, #12
 80121aa:	2200      	movs	r2, #0
 80121ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d009      	beq.n	80121c8 <inc_lock+0xe0>
 80121b4:	4a12      	ldr	r2, [pc, #72]	; (8012200 <inc_lock+0x118>)
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	011b      	lsls	r3, r3, #4
 80121ba:	4413      	add	r3, r2
 80121bc:	330c      	adds	r3, #12
 80121be:	881b      	ldrh	r3, [r3, #0]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d001      	beq.n	80121c8 <inc_lock+0xe0>
 80121c4:	2300      	movs	r3, #0
 80121c6:	e015      	b.n	80121f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d108      	bne.n	80121e0 <inc_lock+0xf8>
 80121ce:	4a0c      	ldr	r2, [pc, #48]	; (8012200 <inc_lock+0x118>)
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	011b      	lsls	r3, r3, #4
 80121d4:	4413      	add	r3, r2
 80121d6:	330c      	adds	r3, #12
 80121d8:	881b      	ldrh	r3, [r3, #0]
 80121da:	3301      	adds	r3, #1
 80121dc:	b29a      	uxth	r2, r3
 80121de:	e001      	b.n	80121e4 <inc_lock+0xfc>
 80121e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80121e4:	4906      	ldr	r1, [pc, #24]	; (8012200 <inc_lock+0x118>)
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	011b      	lsls	r3, r3, #4
 80121ea:	440b      	add	r3, r1
 80121ec:	330c      	adds	r3, #12
 80121ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	3301      	adds	r3, #1
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3714      	adds	r7, #20
 80121f8:	46bd      	mov	sp, r7
 80121fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fe:	4770      	bx	lr
 8012200:	200007e4 	.word	0x200007e4

08012204 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012204:	b480      	push	{r7}
 8012206:	b085      	sub	sp, #20
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	3b01      	subs	r3, #1
 8012210:	607b      	str	r3, [r7, #4]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2b01      	cmp	r3, #1
 8012216:	d825      	bhi.n	8012264 <dec_lock+0x60>
		n = Files[i].ctr;
 8012218:	4a17      	ldr	r2, [pc, #92]	; (8012278 <dec_lock+0x74>)
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	011b      	lsls	r3, r3, #4
 801221e:	4413      	add	r3, r2
 8012220:	330c      	adds	r3, #12
 8012222:	881b      	ldrh	r3, [r3, #0]
 8012224:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012226:	89fb      	ldrh	r3, [r7, #14]
 8012228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801222c:	d101      	bne.n	8012232 <dec_lock+0x2e>
 801222e:	2300      	movs	r3, #0
 8012230:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012232:	89fb      	ldrh	r3, [r7, #14]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d002      	beq.n	801223e <dec_lock+0x3a>
 8012238:	89fb      	ldrh	r3, [r7, #14]
 801223a:	3b01      	subs	r3, #1
 801223c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801223e:	4a0e      	ldr	r2, [pc, #56]	; (8012278 <dec_lock+0x74>)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	011b      	lsls	r3, r3, #4
 8012244:	4413      	add	r3, r2
 8012246:	330c      	adds	r3, #12
 8012248:	89fa      	ldrh	r2, [r7, #14]
 801224a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801224c:	89fb      	ldrh	r3, [r7, #14]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d105      	bne.n	801225e <dec_lock+0x5a>
 8012252:	4a09      	ldr	r2, [pc, #36]	; (8012278 <dec_lock+0x74>)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	011b      	lsls	r3, r3, #4
 8012258:	4413      	add	r3, r2
 801225a:	2200      	movs	r2, #0
 801225c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801225e:	2300      	movs	r3, #0
 8012260:	737b      	strb	r3, [r7, #13]
 8012262:	e001      	b.n	8012268 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012264:	2302      	movs	r3, #2
 8012266:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012268:	7b7b      	ldrb	r3, [r7, #13]
}
 801226a:	4618      	mov	r0, r3
 801226c:	3714      	adds	r7, #20
 801226e:	46bd      	mov	sp, r7
 8012270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012274:	4770      	bx	lr
 8012276:	bf00      	nop
 8012278:	200007e4 	.word	0x200007e4

0801227c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801227c:	b480      	push	{r7}
 801227e:	b085      	sub	sp, #20
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012284:	2300      	movs	r3, #0
 8012286:	60fb      	str	r3, [r7, #12]
 8012288:	e010      	b.n	80122ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801228a:	4a0d      	ldr	r2, [pc, #52]	; (80122c0 <clear_lock+0x44>)
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	011b      	lsls	r3, r3, #4
 8012290:	4413      	add	r3, r2
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	687a      	ldr	r2, [r7, #4]
 8012296:	429a      	cmp	r2, r3
 8012298:	d105      	bne.n	80122a6 <clear_lock+0x2a>
 801229a:	4a09      	ldr	r2, [pc, #36]	; (80122c0 <clear_lock+0x44>)
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	011b      	lsls	r3, r3, #4
 80122a0:	4413      	add	r3, r2
 80122a2:	2200      	movs	r2, #0
 80122a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	3301      	adds	r3, #1
 80122aa:	60fb      	str	r3, [r7, #12]
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d9eb      	bls.n	801228a <clear_lock+0xe>
	}
}
 80122b2:	bf00      	nop
 80122b4:	bf00      	nop
 80122b6:	3714      	adds	r7, #20
 80122b8:	46bd      	mov	sp, r7
 80122ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122be:	4770      	bx	lr
 80122c0:	200007e4 	.word	0x200007e4

080122c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b086      	sub	sp, #24
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80122cc:	2300      	movs	r3, #0
 80122ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	78db      	ldrb	r3, [r3, #3]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d034      	beq.n	8012342 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	7858      	ldrb	r0, [r3, #1]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80122e8:	2301      	movs	r3, #1
 80122ea:	697a      	ldr	r2, [r7, #20]
 80122ec:	f7ff fd0e 	bl	8011d0c <disk_write>
 80122f0:	4603      	mov	r3, r0
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d002      	beq.n	80122fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80122f6:	2301      	movs	r3, #1
 80122f8:	73fb      	strb	r3, [r7, #15]
 80122fa:	e022      	b.n	8012342 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2200      	movs	r2, #0
 8012300:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012306:	697a      	ldr	r2, [r7, #20]
 8012308:	1ad2      	subs	r2, r2, r3
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	69db      	ldr	r3, [r3, #28]
 801230e:	429a      	cmp	r2, r3
 8012310:	d217      	bcs.n	8012342 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	789b      	ldrb	r3, [r3, #2]
 8012316:	613b      	str	r3, [r7, #16]
 8012318:	e010      	b.n	801233c <sync_window+0x78>
					wsect += fs->fsize;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	69db      	ldr	r3, [r3, #28]
 801231e:	697a      	ldr	r2, [r7, #20]
 8012320:	4413      	add	r3, r2
 8012322:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	7858      	ldrb	r0, [r3, #1]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801232e:	2301      	movs	r3, #1
 8012330:	697a      	ldr	r2, [r7, #20]
 8012332:	f7ff fceb 	bl	8011d0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	3b01      	subs	r3, #1
 801233a:	613b      	str	r3, [r7, #16]
 801233c:	693b      	ldr	r3, [r7, #16]
 801233e:	2b01      	cmp	r3, #1
 8012340:	d8eb      	bhi.n	801231a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012342:	7bfb      	ldrb	r3, [r7, #15]
}
 8012344:	4618      	mov	r0, r3
 8012346:	3718      	adds	r7, #24
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}

0801234c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012356:	2300      	movs	r3, #0
 8012358:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801235e:	683a      	ldr	r2, [r7, #0]
 8012360:	429a      	cmp	r2, r3
 8012362:	d01b      	beq.n	801239c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f7ff ffad 	bl	80122c4 <sync_window>
 801236a:	4603      	mov	r3, r0
 801236c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801236e:	7bfb      	ldrb	r3, [r7, #15]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d113      	bne.n	801239c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	7858      	ldrb	r0, [r3, #1]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801237e:	2301      	movs	r3, #1
 8012380:	683a      	ldr	r2, [r7, #0]
 8012382:	f7ff fca3 	bl	8011ccc <disk_read>
 8012386:	4603      	mov	r3, r0
 8012388:	2b00      	cmp	r3, #0
 801238a:	d004      	beq.n	8012396 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801238c:	f04f 33ff 	mov.w	r3, #4294967295
 8012390:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012392:	2301      	movs	r3, #1
 8012394:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	683a      	ldr	r2, [r7, #0]
 801239a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801239c:	7bfb      	ldrb	r3, [r7, #15]
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3710      	adds	r7, #16
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
	...

080123a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f7ff ff87 	bl	80122c4 <sync_window>
 80123b6:	4603      	mov	r3, r0
 80123b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80123ba:	7bfb      	ldrb	r3, [r7, #15]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d158      	bne.n	8012472 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	2b03      	cmp	r3, #3
 80123c6:	d148      	bne.n	801245a <sync_fs+0xb2>
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	791b      	ldrb	r3, [r3, #4]
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d144      	bne.n	801245a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	3334      	adds	r3, #52	; 0x34
 80123d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123d8:	2100      	movs	r1, #0
 80123da:	4618      	mov	r0, r3
 80123dc:	f7ff fd77 	bl	8011ece <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	3334      	adds	r3, #52	; 0x34
 80123e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80123e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7ff fd06 	bl	8011dfe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	3334      	adds	r3, #52	; 0x34
 80123f6:	4921      	ldr	r1, [pc, #132]	; (801247c <sync_fs+0xd4>)
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7ff fd1b 	bl	8011e34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	3334      	adds	r3, #52	; 0x34
 8012402:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012406:	491e      	ldr	r1, [pc, #120]	; (8012480 <sync_fs+0xd8>)
 8012408:	4618      	mov	r0, r3
 801240a:	f7ff fd13 	bl	8011e34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	3334      	adds	r3, #52	; 0x34
 8012412:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	695b      	ldr	r3, [r3, #20]
 801241a:	4619      	mov	r1, r3
 801241c:	4610      	mov	r0, r2
 801241e:	f7ff fd09 	bl	8011e34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	3334      	adds	r3, #52	; 0x34
 8012426:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	691b      	ldr	r3, [r3, #16]
 801242e:	4619      	mov	r1, r3
 8012430:	4610      	mov	r0, r2
 8012432:	f7ff fcff 	bl	8011e34 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6a1b      	ldr	r3, [r3, #32]
 801243a:	1c5a      	adds	r2, r3, #1
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	7858      	ldrb	r0, [r3, #1]
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801244e:	2301      	movs	r3, #1
 8012450:	f7ff fc5c 	bl	8011d0c <disk_write>
			fs->fsi_flag = 0;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2200      	movs	r2, #0
 8012458:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	785b      	ldrb	r3, [r3, #1]
 801245e:	2200      	movs	r2, #0
 8012460:	2100      	movs	r1, #0
 8012462:	4618      	mov	r0, r3
 8012464:	f7ff fc72 	bl	8011d4c <disk_ioctl>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d001      	beq.n	8012472 <sync_fs+0xca>
 801246e:	2301      	movs	r3, #1
 8012470:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012472:	7bfb      	ldrb	r3, [r7, #15]
}
 8012474:	4618      	mov	r0, r3
 8012476:	3710      	adds	r7, #16
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	41615252 	.word	0x41615252
 8012480:	61417272 	.word	0x61417272

08012484 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012484:	b480      	push	{r7}
 8012486:	b083      	sub	sp, #12
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	3b02      	subs	r3, #2
 8012492:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	699b      	ldr	r3, [r3, #24]
 8012498:	3b02      	subs	r3, #2
 801249a:	683a      	ldr	r2, [r7, #0]
 801249c:	429a      	cmp	r2, r3
 801249e:	d301      	bcc.n	80124a4 <clust2sect+0x20>
 80124a0:	2300      	movs	r3, #0
 80124a2:	e008      	b.n	80124b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	895b      	ldrh	r3, [r3, #10]
 80124a8:	461a      	mov	r2, r3
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	fb03 f202 	mul.w	r2, r3, r2
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b4:	4413      	add	r3, r2
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	370c      	adds	r7, #12
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b086      	sub	sp, #24
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
 80124ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	2b01      	cmp	r3, #1
 80124d6:	d904      	bls.n	80124e2 <get_fat+0x20>
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	699b      	ldr	r3, [r3, #24]
 80124dc:	683a      	ldr	r2, [r7, #0]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d302      	bcc.n	80124e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80124e2:	2301      	movs	r3, #1
 80124e4:	617b      	str	r3, [r7, #20]
 80124e6:	e08f      	b.n	8012608 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80124e8:	f04f 33ff 	mov.w	r3, #4294967295
 80124ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	2b03      	cmp	r3, #3
 80124f4:	d062      	beq.n	80125bc <get_fat+0xfa>
 80124f6:	2b03      	cmp	r3, #3
 80124f8:	dc7c      	bgt.n	80125f4 <get_fat+0x132>
 80124fa:	2b01      	cmp	r3, #1
 80124fc:	d002      	beq.n	8012504 <get_fat+0x42>
 80124fe:	2b02      	cmp	r3, #2
 8012500:	d042      	beq.n	8012588 <get_fat+0xc6>
 8012502:	e077      	b.n	80125f4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	60fb      	str	r3, [r7, #12]
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	085b      	lsrs	r3, r3, #1
 801250c:	68fa      	ldr	r2, [r7, #12]
 801250e:	4413      	add	r3, r2
 8012510:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	0a5b      	lsrs	r3, r3, #9
 801251a:	4413      	add	r3, r2
 801251c:	4619      	mov	r1, r3
 801251e:	6938      	ldr	r0, [r7, #16]
 8012520:	f7ff ff14 	bl	801234c <move_window>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d167      	bne.n	80125fa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	1c5a      	adds	r2, r3, #1
 801252e:	60fa      	str	r2, [r7, #12]
 8012530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012534:	693a      	ldr	r2, [r7, #16]
 8012536:	4413      	add	r3, r2
 8012538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801253c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	0a5b      	lsrs	r3, r3, #9
 8012546:	4413      	add	r3, r2
 8012548:	4619      	mov	r1, r3
 801254a:	6938      	ldr	r0, [r7, #16]
 801254c:	f7ff fefe 	bl	801234c <move_window>
 8012550:	4603      	mov	r3, r0
 8012552:	2b00      	cmp	r3, #0
 8012554:	d153      	bne.n	80125fe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801255c:	693a      	ldr	r2, [r7, #16]
 801255e:	4413      	add	r3, r2
 8012560:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012564:	021b      	lsls	r3, r3, #8
 8012566:	461a      	mov	r2, r3
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	4313      	orrs	r3, r2
 801256c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	f003 0301 	and.w	r3, r3, #1
 8012574:	2b00      	cmp	r3, #0
 8012576:	d002      	beq.n	801257e <get_fat+0xbc>
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	091b      	lsrs	r3, r3, #4
 801257c:	e002      	b.n	8012584 <get_fat+0xc2>
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012584:	617b      	str	r3, [r7, #20]
			break;
 8012586:	e03f      	b.n	8012608 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	0a1b      	lsrs	r3, r3, #8
 8012590:	4413      	add	r3, r2
 8012592:	4619      	mov	r1, r3
 8012594:	6938      	ldr	r0, [r7, #16]
 8012596:	f7ff fed9 	bl	801234c <move_window>
 801259a:	4603      	mov	r3, r0
 801259c:	2b00      	cmp	r3, #0
 801259e:	d130      	bne.n	8012602 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	005b      	lsls	r3, r3, #1
 80125aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80125ae:	4413      	add	r3, r2
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7ff fbe9 	bl	8011d88 <ld_word>
 80125b6:	4603      	mov	r3, r0
 80125b8:	617b      	str	r3, [r7, #20]
			break;
 80125ba:	e025      	b.n	8012608 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	09db      	lsrs	r3, r3, #7
 80125c4:	4413      	add	r3, r2
 80125c6:	4619      	mov	r1, r3
 80125c8:	6938      	ldr	r0, [r7, #16]
 80125ca:	f7ff febf 	bl	801234c <move_window>
 80125ce:	4603      	mov	r3, r0
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d118      	bne.n	8012606 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	009b      	lsls	r3, r3, #2
 80125de:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80125e2:	4413      	add	r3, r2
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7ff fbe7 	bl	8011db8 <ld_dword>
 80125ea:	4603      	mov	r3, r0
 80125ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80125f0:	617b      	str	r3, [r7, #20]
			break;
 80125f2:	e009      	b.n	8012608 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80125f4:	2301      	movs	r3, #1
 80125f6:	617b      	str	r3, [r7, #20]
 80125f8:	e006      	b.n	8012608 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80125fa:	bf00      	nop
 80125fc:	e004      	b.n	8012608 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80125fe:	bf00      	nop
 8012600:	e002      	b.n	8012608 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012602:	bf00      	nop
 8012604:	e000      	b.n	8012608 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012606:	bf00      	nop
		}
	}

	return val;
 8012608:	697b      	ldr	r3, [r7, #20]
}
 801260a:	4618      	mov	r0, r3
 801260c:	3718      	adds	r7, #24
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}

08012612 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012612:	b590      	push	{r4, r7, lr}
 8012614:	b089      	sub	sp, #36	; 0x24
 8012616:	af00      	add	r7, sp, #0
 8012618:	60f8      	str	r0, [r7, #12]
 801261a:	60b9      	str	r1, [r7, #8]
 801261c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801261e:	2302      	movs	r3, #2
 8012620:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	2b01      	cmp	r3, #1
 8012626:	f240 80d2 	bls.w	80127ce <put_fat+0x1bc>
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	699b      	ldr	r3, [r3, #24]
 801262e:	68ba      	ldr	r2, [r7, #8]
 8012630:	429a      	cmp	r2, r3
 8012632:	f080 80cc 	bcs.w	80127ce <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	781b      	ldrb	r3, [r3, #0]
 801263a:	2b03      	cmp	r3, #3
 801263c:	f000 8096 	beq.w	801276c <put_fat+0x15a>
 8012640:	2b03      	cmp	r3, #3
 8012642:	f300 80cd 	bgt.w	80127e0 <put_fat+0x1ce>
 8012646:	2b01      	cmp	r3, #1
 8012648:	d002      	beq.n	8012650 <put_fat+0x3e>
 801264a:	2b02      	cmp	r3, #2
 801264c:	d06e      	beq.n	801272c <put_fat+0x11a>
 801264e:	e0c7      	b.n	80127e0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	61bb      	str	r3, [r7, #24]
 8012654:	69bb      	ldr	r3, [r7, #24]
 8012656:	085b      	lsrs	r3, r3, #1
 8012658:	69ba      	ldr	r2, [r7, #24]
 801265a:	4413      	add	r3, r2
 801265c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012662:	69bb      	ldr	r3, [r7, #24]
 8012664:	0a5b      	lsrs	r3, r3, #9
 8012666:	4413      	add	r3, r2
 8012668:	4619      	mov	r1, r3
 801266a:	68f8      	ldr	r0, [r7, #12]
 801266c:	f7ff fe6e 	bl	801234c <move_window>
 8012670:	4603      	mov	r3, r0
 8012672:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012674:	7ffb      	ldrb	r3, [r7, #31]
 8012676:	2b00      	cmp	r3, #0
 8012678:	f040 80ab 	bne.w	80127d2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012682:	69bb      	ldr	r3, [r7, #24]
 8012684:	1c59      	adds	r1, r3, #1
 8012686:	61b9      	str	r1, [r7, #24]
 8012688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801268c:	4413      	add	r3, r2
 801268e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	f003 0301 	and.w	r3, r3, #1
 8012696:	2b00      	cmp	r3, #0
 8012698:	d00d      	beq.n	80126b6 <put_fat+0xa4>
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	b25b      	sxtb	r3, r3
 80126a0:	f003 030f 	and.w	r3, r3, #15
 80126a4:	b25a      	sxtb	r2, r3
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	011b      	lsls	r3, r3, #4
 80126ac:	b25b      	sxtb	r3, r3
 80126ae:	4313      	orrs	r3, r2
 80126b0:	b25b      	sxtb	r3, r3
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	e001      	b.n	80126ba <put_fat+0xa8>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	697a      	ldr	r2, [r7, #20]
 80126bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	2201      	movs	r2, #1
 80126c2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126c8:	69bb      	ldr	r3, [r7, #24]
 80126ca:	0a5b      	lsrs	r3, r3, #9
 80126cc:	4413      	add	r3, r2
 80126ce:	4619      	mov	r1, r3
 80126d0:	68f8      	ldr	r0, [r7, #12]
 80126d2:	f7ff fe3b 	bl	801234c <move_window>
 80126d6:	4603      	mov	r3, r0
 80126d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80126da:	7ffb      	ldrb	r3, [r7, #31]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d17a      	bne.n	80127d6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80126e6:	69bb      	ldr	r3, [r7, #24]
 80126e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126ec:	4413      	add	r3, r2
 80126ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	f003 0301 	and.w	r3, r3, #1
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d003      	beq.n	8012702 <put_fat+0xf0>
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	091b      	lsrs	r3, r3, #4
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	e00e      	b.n	8012720 <put_fat+0x10e>
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	781b      	ldrb	r3, [r3, #0]
 8012706:	b25b      	sxtb	r3, r3
 8012708:	f023 030f 	bic.w	r3, r3, #15
 801270c:	b25a      	sxtb	r2, r3
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	0a1b      	lsrs	r3, r3, #8
 8012712:	b25b      	sxtb	r3, r3
 8012714:	f003 030f 	and.w	r3, r3, #15
 8012718:	b25b      	sxtb	r3, r3
 801271a:	4313      	orrs	r3, r2
 801271c:	b25b      	sxtb	r3, r3
 801271e:	b2db      	uxtb	r3, r3
 8012720:	697a      	ldr	r2, [r7, #20]
 8012722:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2201      	movs	r2, #1
 8012728:	70da      	strb	r2, [r3, #3]
			break;
 801272a:	e059      	b.n	80127e0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	0a1b      	lsrs	r3, r3, #8
 8012734:	4413      	add	r3, r2
 8012736:	4619      	mov	r1, r3
 8012738:	68f8      	ldr	r0, [r7, #12]
 801273a:	f7ff fe07 	bl	801234c <move_window>
 801273e:	4603      	mov	r3, r0
 8012740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012742:	7ffb      	ldrb	r3, [r7, #31]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d148      	bne.n	80127da <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	005b      	lsls	r3, r3, #1
 8012752:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012756:	4413      	add	r3, r2
 8012758:	687a      	ldr	r2, [r7, #4]
 801275a:	b292      	uxth	r2, r2
 801275c:	4611      	mov	r1, r2
 801275e:	4618      	mov	r0, r3
 8012760:	f7ff fb4d 	bl	8011dfe <st_word>
			fs->wflag = 1;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	2201      	movs	r2, #1
 8012768:	70da      	strb	r2, [r3, #3]
			break;
 801276a:	e039      	b.n	80127e0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	09db      	lsrs	r3, r3, #7
 8012774:	4413      	add	r3, r2
 8012776:	4619      	mov	r1, r3
 8012778:	68f8      	ldr	r0, [r7, #12]
 801277a:	f7ff fde7 	bl	801234c <move_window>
 801277e:	4603      	mov	r3, r0
 8012780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012782:	7ffb      	ldrb	r3, [r7, #31]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d12a      	bne.n	80127de <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	009b      	lsls	r3, r3, #2
 8012798:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801279c:	4413      	add	r3, r2
 801279e:	4618      	mov	r0, r3
 80127a0:	f7ff fb0a 	bl	8011db8 <ld_dword>
 80127a4:	4603      	mov	r3, r0
 80127a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80127aa:	4323      	orrs	r3, r4
 80127ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	009b      	lsls	r3, r3, #2
 80127b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80127bc:	4413      	add	r3, r2
 80127be:	6879      	ldr	r1, [r7, #4]
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7ff fb37 	bl	8011e34 <st_dword>
			fs->wflag = 1;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2201      	movs	r2, #1
 80127ca:	70da      	strb	r2, [r3, #3]
			break;
 80127cc:	e008      	b.n	80127e0 <put_fat+0x1ce>
		}
	}
 80127ce:	bf00      	nop
 80127d0:	e006      	b.n	80127e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127d2:	bf00      	nop
 80127d4:	e004      	b.n	80127e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127d6:	bf00      	nop
 80127d8:	e002      	b.n	80127e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127da:	bf00      	nop
 80127dc:	e000      	b.n	80127e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127de:	bf00      	nop
	return res;
 80127e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3724      	adds	r7, #36	; 0x24
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd90      	pop	{r4, r7, pc}

080127ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80127ea:	b580      	push	{r7, lr}
 80127ec:	b088      	sub	sp, #32
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	60f8      	str	r0, [r7, #12]
 80127f2:	60b9      	str	r1, [r7, #8]
 80127f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80127f6:	2300      	movs	r3, #0
 80127f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	2b01      	cmp	r3, #1
 8012804:	d904      	bls.n	8012810 <remove_chain+0x26>
 8012806:	69bb      	ldr	r3, [r7, #24]
 8012808:	699b      	ldr	r3, [r3, #24]
 801280a:	68ba      	ldr	r2, [r7, #8]
 801280c:	429a      	cmp	r2, r3
 801280e:	d301      	bcc.n	8012814 <remove_chain+0x2a>
 8012810:	2302      	movs	r3, #2
 8012812:	e04b      	b.n	80128ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d00c      	beq.n	8012834 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801281a:	f04f 32ff 	mov.w	r2, #4294967295
 801281e:	6879      	ldr	r1, [r7, #4]
 8012820:	69b8      	ldr	r0, [r7, #24]
 8012822:	f7ff fef6 	bl	8012612 <put_fat>
 8012826:	4603      	mov	r3, r0
 8012828:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801282a:	7ffb      	ldrb	r3, [r7, #31]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d001      	beq.n	8012834 <remove_chain+0x4a>
 8012830:	7ffb      	ldrb	r3, [r7, #31]
 8012832:	e03b      	b.n	80128ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012834:	68b9      	ldr	r1, [r7, #8]
 8012836:	68f8      	ldr	r0, [r7, #12]
 8012838:	f7ff fe43 	bl	80124c2 <get_fat>
 801283c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d031      	beq.n	80128a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2b01      	cmp	r3, #1
 8012848:	d101      	bne.n	801284e <remove_chain+0x64>
 801284a:	2302      	movs	r3, #2
 801284c:	e02e      	b.n	80128ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012854:	d101      	bne.n	801285a <remove_chain+0x70>
 8012856:	2301      	movs	r3, #1
 8012858:	e028      	b.n	80128ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801285a:	2200      	movs	r2, #0
 801285c:	68b9      	ldr	r1, [r7, #8]
 801285e:	69b8      	ldr	r0, [r7, #24]
 8012860:	f7ff fed7 	bl	8012612 <put_fat>
 8012864:	4603      	mov	r3, r0
 8012866:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012868:	7ffb      	ldrb	r3, [r7, #31]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d001      	beq.n	8012872 <remove_chain+0x88>
 801286e:	7ffb      	ldrb	r3, [r7, #31]
 8012870:	e01c      	b.n	80128ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	695a      	ldr	r2, [r3, #20]
 8012876:	69bb      	ldr	r3, [r7, #24]
 8012878:	699b      	ldr	r3, [r3, #24]
 801287a:	3b02      	subs	r3, #2
 801287c:	429a      	cmp	r2, r3
 801287e:	d20b      	bcs.n	8012898 <remove_chain+0xae>
			fs->free_clst++;
 8012880:	69bb      	ldr	r3, [r7, #24]
 8012882:	695b      	ldr	r3, [r3, #20]
 8012884:	1c5a      	adds	r2, r3, #1
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801288a:	69bb      	ldr	r3, [r7, #24]
 801288c:	791b      	ldrb	r3, [r3, #4]
 801288e:	f043 0301 	orr.w	r3, r3, #1
 8012892:	b2da      	uxtb	r2, r3
 8012894:	69bb      	ldr	r3, [r7, #24]
 8012896:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801289c:	69bb      	ldr	r3, [r7, #24]
 801289e:	699b      	ldr	r3, [r3, #24]
 80128a0:	68ba      	ldr	r2, [r7, #8]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d3c6      	bcc.n	8012834 <remove_chain+0x4a>
 80128a6:	e000      	b.n	80128aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80128a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80128aa:	2300      	movs	r3, #0
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3720      	adds	r7, #32
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}

080128b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b088      	sub	sp, #32
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d10d      	bne.n	80128e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	691b      	ldr	r3, [r3, #16]
 80128ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80128d0:	69bb      	ldr	r3, [r7, #24]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d004      	beq.n	80128e0 <create_chain+0x2c>
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	699b      	ldr	r3, [r3, #24]
 80128da:	69ba      	ldr	r2, [r7, #24]
 80128dc:	429a      	cmp	r2, r3
 80128de:	d31b      	bcc.n	8012918 <create_chain+0x64>
 80128e0:	2301      	movs	r3, #1
 80128e2:	61bb      	str	r3, [r7, #24]
 80128e4:	e018      	b.n	8012918 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80128e6:	6839      	ldr	r1, [r7, #0]
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f7ff fdea 	bl	80124c2 <get_fat>
 80128ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d801      	bhi.n	80128fa <create_chain+0x46>
 80128f6:	2301      	movs	r3, #1
 80128f8:	e070      	b.n	80129dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012900:	d101      	bne.n	8012906 <create_chain+0x52>
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	e06a      	b.n	80129dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	699b      	ldr	r3, [r3, #24]
 801290a:	68fa      	ldr	r2, [r7, #12]
 801290c:	429a      	cmp	r2, r3
 801290e:	d201      	bcs.n	8012914 <create_chain+0x60>
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	e063      	b.n	80129dc <create_chain+0x128>
		scl = clst;
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012918:	69bb      	ldr	r3, [r7, #24]
 801291a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	3301      	adds	r3, #1
 8012920:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	699b      	ldr	r3, [r3, #24]
 8012926:	69fa      	ldr	r2, [r7, #28]
 8012928:	429a      	cmp	r2, r3
 801292a:	d307      	bcc.n	801293c <create_chain+0x88>
				ncl = 2;
 801292c:	2302      	movs	r3, #2
 801292e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012930:	69fa      	ldr	r2, [r7, #28]
 8012932:	69bb      	ldr	r3, [r7, #24]
 8012934:	429a      	cmp	r2, r3
 8012936:	d901      	bls.n	801293c <create_chain+0x88>
 8012938:	2300      	movs	r3, #0
 801293a:	e04f      	b.n	80129dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801293c:	69f9      	ldr	r1, [r7, #28]
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f7ff fdbf 	bl	80124c2 <get_fat>
 8012944:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d00e      	beq.n	801296a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2b01      	cmp	r3, #1
 8012950:	d003      	beq.n	801295a <create_chain+0xa6>
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012958:	d101      	bne.n	801295e <create_chain+0xaa>
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	e03e      	b.n	80129dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801295e:	69fa      	ldr	r2, [r7, #28]
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	429a      	cmp	r2, r3
 8012964:	d1da      	bne.n	801291c <create_chain+0x68>
 8012966:	2300      	movs	r3, #0
 8012968:	e038      	b.n	80129dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801296a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801296c:	f04f 32ff 	mov.w	r2, #4294967295
 8012970:	69f9      	ldr	r1, [r7, #28]
 8012972:	6938      	ldr	r0, [r7, #16]
 8012974:	f7ff fe4d 	bl	8012612 <put_fat>
 8012978:	4603      	mov	r3, r0
 801297a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801297c:	7dfb      	ldrb	r3, [r7, #23]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d109      	bne.n	8012996 <create_chain+0xe2>
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d006      	beq.n	8012996 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012988:	69fa      	ldr	r2, [r7, #28]
 801298a:	6839      	ldr	r1, [r7, #0]
 801298c:	6938      	ldr	r0, [r7, #16]
 801298e:	f7ff fe40 	bl	8012612 <put_fat>
 8012992:	4603      	mov	r3, r0
 8012994:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012996:	7dfb      	ldrb	r3, [r7, #23]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d116      	bne.n	80129ca <create_chain+0x116>
		fs->last_clst = ncl;
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	69fa      	ldr	r2, [r7, #28]
 80129a0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	695a      	ldr	r2, [r3, #20]
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	699b      	ldr	r3, [r3, #24]
 80129aa:	3b02      	subs	r3, #2
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d804      	bhi.n	80129ba <create_chain+0x106>
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	695b      	ldr	r3, [r3, #20]
 80129b4:	1e5a      	subs	r2, r3, #1
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	791b      	ldrb	r3, [r3, #4]
 80129be:	f043 0301 	orr.w	r3, r3, #1
 80129c2:	b2da      	uxtb	r2, r3
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	711a      	strb	r2, [r3, #4]
 80129c8:	e007      	b.n	80129da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80129ca:	7dfb      	ldrb	r3, [r7, #23]
 80129cc:	2b01      	cmp	r3, #1
 80129ce:	d102      	bne.n	80129d6 <create_chain+0x122>
 80129d0:	f04f 33ff 	mov.w	r3, #4294967295
 80129d4:	e000      	b.n	80129d8 <create_chain+0x124>
 80129d6:	2301      	movs	r3, #1
 80129d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80129da:	69fb      	ldr	r3, [r7, #28]
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3720      	adds	r7, #32
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80129e4:	b480      	push	{r7}
 80129e6:	b087      	sub	sp, #28
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f8:	3304      	adds	r3, #4
 80129fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	0a5b      	lsrs	r3, r3, #9
 8012a00:	68fa      	ldr	r2, [r7, #12]
 8012a02:	8952      	ldrh	r2, [r2, #10]
 8012a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	1d1a      	adds	r2, r3, #4
 8012a0e:	613a      	str	r2, [r7, #16]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d101      	bne.n	8012a1e <clmt_clust+0x3a>
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	e010      	b.n	8012a40 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012a1e:	697a      	ldr	r2, [r7, #20]
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d307      	bcc.n	8012a36 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	1ad3      	subs	r3, r2, r3
 8012a2c:	617b      	str	r3, [r7, #20]
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	3304      	adds	r3, #4
 8012a32:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012a34:	e7e9      	b.n	8012a0a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012a36:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	681a      	ldr	r2, [r3, #0]
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	4413      	add	r3, r2
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	371c      	adds	r7, #28
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr

08012a4c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b086      	sub	sp, #24
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012a62:	d204      	bcs.n	8012a6e <dir_sdi+0x22>
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	f003 031f 	and.w	r3, r3, #31
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d001      	beq.n	8012a72 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012a6e:	2302      	movs	r3, #2
 8012a70:	e063      	b.n	8012b3a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	683a      	ldr	r2, [r7, #0]
 8012a76:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	689b      	ldr	r3, [r3, #8]
 8012a7c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d106      	bne.n	8012a92 <dir_sdi+0x46>
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	2b02      	cmp	r3, #2
 8012a8a:	d902      	bls.n	8012a92 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a90:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d10c      	bne.n	8012ab2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	095b      	lsrs	r3, r3, #5
 8012a9c:	693a      	ldr	r2, [r7, #16]
 8012a9e:	8912      	ldrh	r2, [r2, #8]
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	d301      	bcc.n	8012aa8 <dir_sdi+0x5c>
 8012aa4:	2302      	movs	r3, #2
 8012aa6:	e048      	b.n	8012b3a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	61da      	str	r2, [r3, #28]
 8012ab0:	e029      	b.n	8012b06 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	895b      	ldrh	r3, [r3, #10]
 8012ab6:	025b      	lsls	r3, r3, #9
 8012ab8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012aba:	e019      	b.n	8012af0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6979      	ldr	r1, [r7, #20]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7ff fcfe 	bl	80124c2 <get_fat>
 8012ac6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ace:	d101      	bne.n	8012ad4 <dir_sdi+0x88>
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e032      	b.n	8012b3a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	2b01      	cmp	r3, #1
 8012ad8:	d904      	bls.n	8012ae4 <dir_sdi+0x98>
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	699b      	ldr	r3, [r3, #24]
 8012ade:	697a      	ldr	r2, [r7, #20]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d301      	bcc.n	8012ae8 <dir_sdi+0x9c>
 8012ae4:	2302      	movs	r3, #2
 8012ae6:	e028      	b.n	8012b3a <dir_sdi+0xee>
			ofs -= csz;
 8012ae8:	683a      	ldr	r2, [r7, #0]
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	1ad3      	subs	r3, r2, r3
 8012aee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012af0:	683a      	ldr	r2, [r7, #0]
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d2e1      	bcs.n	8012abc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012af8:	6979      	ldr	r1, [r7, #20]
 8012afa:	6938      	ldr	r0, [r7, #16]
 8012afc:	f7ff fcc2 	bl	8012484 <clust2sect>
 8012b00:	4602      	mov	r2, r0
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	697a      	ldr	r2, [r7, #20]
 8012b0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	69db      	ldr	r3, [r3, #28]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d101      	bne.n	8012b18 <dir_sdi+0xcc>
 8012b14:	2302      	movs	r3, #2
 8012b16:	e010      	b.n	8012b3a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	69da      	ldr	r2, [r3, #28]
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	0a5b      	lsrs	r3, r3, #9
 8012b20:	441a      	add	r2, r3
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b32:	441a      	add	r2, r3
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012b38:	2300      	movs	r3, #0
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3718      	adds	r7, #24
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}

08012b42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012b42:	b580      	push	{r7, lr}
 8012b44:	b086      	sub	sp, #24
 8012b46:	af00      	add	r7, sp, #0
 8012b48:	6078      	str	r0, [r7, #4]
 8012b4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	695b      	ldr	r3, [r3, #20]
 8012b56:	3320      	adds	r3, #32
 8012b58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	69db      	ldr	r3, [r3, #28]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d003      	beq.n	8012b6a <dir_next+0x28>
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012b68:	d301      	bcc.n	8012b6e <dir_next+0x2c>
 8012b6a:	2304      	movs	r3, #4
 8012b6c:	e0aa      	b.n	8012cc4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	f040 8098 	bne.w	8012caa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	69db      	ldr	r3, [r3, #28]
 8012b7e:	1c5a      	adds	r2, r3, #1
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	699b      	ldr	r3, [r3, #24]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d10b      	bne.n	8012ba4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	095b      	lsrs	r3, r3, #5
 8012b90:	68fa      	ldr	r2, [r7, #12]
 8012b92:	8912      	ldrh	r2, [r2, #8]
 8012b94:	4293      	cmp	r3, r2
 8012b96:	f0c0 8088 	bcc.w	8012caa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	61da      	str	r2, [r3, #28]
 8012ba0:	2304      	movs	r3, #4
 8012ba2:	e08f      	b.n	8012cc4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	0a5b      	lsrs	r3, r3, #9
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	8952      	ldrh	r2, [r2, #10]
 8012bac:	3a01      	subs	r2, #1
 8012bae:	4013      	ands	r3, r2
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d17a      	bne.n	8012caa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012bb4:	687a      	ldr	r2, [r7, #4]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	699b      	ldr	r3, [r3, #24]
 8012bba:	4619      	mov	r1, r3
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	f7ff fc80 	bl	80124c2 <get_fat>
 8012bc2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d801      	bhi.n	8012bce <dir_next+0x8c>
 8012bca:	2302      	movs	r3, #2
 8012bcc:	e07a      	b.n	8012cc4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012bce:	697b      	ldr	r3, [r7, #20]
 8012bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bd4:	d101      	bne.n	8012bda <dir_next+0x98>
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	e074      	b.n	8012cc4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	699b      	ldr	r3, [r3, #24]
 8012bde:	697a      	ldr	r2, [r7, #20]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d358      	bcc.n	8012c96 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d104      	bne.n	8012bf4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2200      	movs	r2, #0
 8012bee:	61da      	str	r2, [r3, #28]
 8012bf0:	2304      	movs	r3, #4
 8012bf2:	e067      	b.n	8012cc4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012bf4:	687a      	ldr	r2, [r7, #4]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	699b      	ldr	r3, [r3, #24]
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	4610      	mov	r0, r2
 8012bfe:	f7ff fe59 	bl	80128b4 <create_chain>
 8012c02:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d101      	bne.n	8012c0e <dir_next+0xcc>
 8012c0a:	2307      	movs	r3, #7
 8012c0c:	e05a      	b.n	8012cc4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	2b01      	cmp	r3, #1
 8012c12:	d101      	bne.n	8012c18 <dir_next+0xd6>
 8012c14:	2302      	movs	r3, #2
 8012c16:	e055      	b.n	8012cc4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c1e:	d101      	bne.n	8012c24 <dir_next+0xe2>
 8012c20:	2301      	movs	r3, #1
 8012c22:	e04f      	b.n	8012cc4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012c24:	68f8      	ldr	r0, [r7, #12]
 8012c26:	f7ff fb4d 	bl	80122c4 <sync_window>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d001      	beq.n	8012c34 <dir_next+0xf2>
 8012c30:	2301      	movs	r3, #1
 8012c32:	e047      	b.n	8012cc4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	3334      	adds	r3, #52	; 0x34
 8012c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c3c:	2100      	movs	r1, #0
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7ff f945 	bl	8011ece <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012c44:	2300      	movs	r3, #0
 8012c46:	613b      	str	r3, [r7, #16]
 8012c48:	6979      	ldr	r1, [r7, #20]
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f7ff fc1a 	bl	8012484 <clust2sect>
 8012c50:	4602      	mov	r2, r0
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	631a      	str	r2, [r3, #48]	; 0x30
 8012c56:	e012      	b.n	8012c7e <dir_next+0x13c>
						fs->wflag = 1;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012c5e:	68f8      	ldr	r0, [r7, #12]
 8012c60:	f7ff fb30 	bl	80122c4 <sync_window>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d001      	beq.n	8012c6e <dir_next+0x12c>
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	e02a      	b.n	8012cc4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	3301      	adds	r3, #1
 8012c72:	613b      	str	r3, [r7, #16]
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c78:	1c5a      	adds	r2, r3, #1
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	631a      	str	r2, [r3, #48]	; 0x30
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	895b      	ldrh	r3, [r3, #10]
 8012c82:	461a      	mov	r2, r3
 8012c84:	693b      	ldr	r3, [r7, #16]
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d3e6      	bcc.n	8012c58 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	1ad2      	subs	r2, r2, r3
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	697a      	ldr	r2, [r7, #20]
 8012c9a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012c9c:	6979      	ldr	r1, [r7, #20]
 8012c9e:	68f8      	ldr	r0, [r7, #12]
 8012ca0:	f7ff fbf0 	bl	8012484 <clust2sect>
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	68ba      	ldr	r2, [r7, #8]
 8012cae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012cb6:	68bb      	ldr	r3, [r7, #8]
 8012cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cbc:	441a      	add	r2, r3
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012cc2:	2300      	movs	r3, #0
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3718      	adds	r7, #24
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b086      	sub	sp, #24
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012cdc:	2100      	movs	r1, #0
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7ff feb4 	bl	8012a4c <dir_sdi>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012ce8:	7dfb      	ldrb	r3, [r7, #23]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d12b      	bne.n	8012d46 <dir_alloc+0x7a>
		n = 0;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	69db      	ldr	r3, [r3, #28]
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	68f8      	ldr	r0, [r7, #12]
 8012cfa:	f7ff fb27 	bl	801234c <move_window>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012d02:	7dfb      	ldrb	r3, [r7, #23]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d11d      	bne.n	8012d44 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6a1b      	ldr	r3, [r3, #32]
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	2be5      	cmp	r3, #229	; 0xe5
 8012d10:	d004      	beq.n	8012d1c <dir_alloc+0x50>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	6a1b      	ldr	r3, [r3, #32]
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d107      	bne.n	8012d2c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	3301      	adds	r3, #1
 8012d20:	613b      	str	r3, [r7, #16]
 8012d22:	693a      	ldr	r2, [r7, #16]
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d102      	bne.n	8012d30 <dir_alloc+0x64>
 8012d2a:	e00c      	b.n	8012d46 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012d30:	2101      	movs	r1, #1
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f7ff ff05 	bl	8012b42 <dir_next>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012d3c:	7dfb      	ldrb	r3, [r7, #23]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d0d7      	beq.n	8012cf2 <dir_alloc+0x26>
 8012d42:	e000      	b.n	8012d46 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012d44:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012d46:	7dfb      	ldrb	r3, [r7, #23]
 8012d48:	2b04      	cmp	r3, #4
 8012d4a:	d101      	bne.n	8012d50 <dir_alloc+0x84>
 8012d4c:	2307      	movs	r3, #7
 8012d4e:	75fb      	strb	r3, [r7, #23]
	return res;
 8012d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3718      	adds	r7, #24
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}

08012d5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012d5a:	b580      	push	{r7, lr}
 8012d5c:	b084      	sub	sp, #16
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	6078      	str	r0, [r7, #4]
 8012d62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	331a      	adds	r3, #26
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7ff f80d 	bl	8011d88 <ld_word>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	2b03      	cmp	r3, #3
 8012d78:	d109      	bne.n	8012d8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	3314      	adds	r3, #20
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7ff f802 	bl	8011d88 <ld_word>
 8012d84:	4603      	mov	r3, r0
 8012d86:	041b      	lsls	r3, r3, #16
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	4313      	orrs	r3, r2
 8012d8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3710      	adds	r7, #16
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}

08012d98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b084      	sub	sp, #16
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	60f8      	str	r0, [r7, #12]
 8012da0:	60b9      	str	r1, [r7, #8]
 8012da2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	331a      	adds	r3, #26
 8012da8:	687a      	ldr	r2, [r7, #4]
 8012daa:	b292      	uxth	r2, r2
 8012dac:	4611      	mov	r1, r2
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7ff f825 	bl	8011dfe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	2b03      	cmp	r3, #3
 8012dba:	d109      	bne.n	8012dd0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	f103 0214 	add.w	r2, r3, #20
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	0c1b      	lsrs	r3, r3, #16
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	4619      	mov	r1, r3
 8012dca:	4610      	mov	r0, r2
 8012dcc:	f7ff f817 	bl	8011dfe <st_word>
	}
}
 8012dd0:	bf00      	nop
 8012dd2:	3710      	adds	r7, #16
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}

08012dd8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b086      	sub	sp, #24
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012de2:	2304      	movs	r3, #4
 8012de4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012dec:	e03c      	b.n	8012e68 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	69db      	ldr	r3, [r3, #28]
 8012df2:	4619      	mov	r1, r3
 8012df4:	6938      	ldr	r0, [r7, #16]
 8012df6:	f7ff faa9 	bl	801234c <move_window>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012dfe:	7dfb      	ldrb	r3, [r7, #23]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d136      	bne.n	8012e72 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6a1b      	ldr	r3, [r3, #32]
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012e0c:	7bfb      	ldrb	r3, [r7, #15]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d102      	bne.n	8012e18 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012e12:	2304      	movs	r3, #4
 8012e14:	75fb      	strb	r3, [r7, #23]
 8012e16:	e031      	b.n	8012e7c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6a1b      	ldr	r3, [r3, #32]
 8012e1c:	330b      	adds	r3, #11
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e24:	73bb      	strb	r3, [r7, #14]
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	7bba      	ldrb	r2, [r7, #14]
 8012e2a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012e2c:	7bfb      	ldrb	r3, [r7, #15]
 8012e2e:	2be5      	cmp	r3, #229	; 0xe5
 8012e30:	d011      	beq.n	8012e56 <dir_read+0x7e>
 8012e32:	7bfb      	ldrb	r3, [r7, #15]
 8012e34:	2b2e      	cmp	r3, #46	; 0x2e
 8012e36:	d00e      	beq.n	8012e56 <dir_read+0x7e>
 8012e38:	7bbb      	ldrb	r3, [r7, #14]
 8012e3a:	2b0f      	cmp	r3, #15
 8012e3c:	d00b      	beq.n	8012e56 <dir_read+0x7e>
 8012e3e:	7bbb      	ldrb	r3, [r7, #14]
 8012e40:	f023 0320 	bic.w	r3, r3, #32
 8012e44:	2b08      	cmp	r3, #8
 8012e46:	bf0c      	ite	eq
 8012e48:	2301      	moveq	r3, #1
 8012e4a:	2300      	movne	r3, #0
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	461a      	mov	r2, r3
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	4293      	cmp	r3, r2
 8012e54:	d00f      	beq.n	8012e76 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012e56:	2100      	movs	r1, #0
 8012e58:	6878      	ldr	r0, [r7, #4]
 8012e5a:	f7ff fe72 	bl	8012b42 <dir_next>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012e62:	7dfb      	ldrb	r3, [r7, #23]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d108      	bne.n	8012e7a <dir_read+0xa2>
	while (dp->sect) {
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	69db      	ldr	r3, [r3, #28]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d1be      	bne.n	8012dee <dir_read+0x16>
 8012e70:	e004      	b.n	8012e7c <dir_read+0xa4>
		if (res != FR_OK) break;
 8012e72:	bf00      	nop
 8012e74:	e002      	b.n	8012e7c <dir_read+0xa4>
				break;
 8012e76:	bf00      	nop
 8012e78:	e000      	b.n	8012e7c <dir_read+0xa4>
		if (res != FR_OK) break;
 8012e7a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012e7c:	7dfb      	ldrb	r3, [r7, #23]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d002      	beq.n	8012e88 <dir_read+0xb0>
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2200      	movs	r2, #0
 8012e86:	61da      	str	r2, [r3, #28]
	return res;
 8012e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3718      	adds	r7, #24
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}

08012e92 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012e92:	b580      	push	{r7, lr}
 8012e94:	b086      	sub	sp, #24
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012ea0:	2100      	movs	r1, #0
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f7ff fdd2 	bl	8012a4c <dir_sdi>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012eac:	7dfb      	ldrb	r3, [r7, #23]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d001      	beq.n	8012eb6 <dir_find+0x24>
 8012eb2:	7dfb      	ldrb	r3, [r7, #23]
 8012eb4:	e03e      	b.n	8012f34 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	69db      	ldr	r3, [r3, #28]
 8012eba:	4619      	mov	r1, r3
 8012ebc:	6938      	ldr	r0, [r7, #16]
 8012ebe:	f7ff fa45 	bl	801234c <move_window>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012ec6:	7dfb      	ldrb	r3, [r7, #23]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d12f      	bne.n	8012f2c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	6a1b      	ldr	r3, [r3, #32]
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012ed4:	7bfb      	ldrb	r3, [r7, #15]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d102      	bne.n	8012ee0 <dir_find+0x4e>
 8012eda:	2304      	movs	r3, #4
 8012edc:	75fb      	strb	r3, [r7, #23]
 8012ede:	e028      	b.n	8012f32 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6a1b      	ldr	r3, [r3, #32]
 8012ee4:	330b      	adds	r3, #11
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012eec:	b2da      	uxtb	r2, r3
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6a1b      	ldr	r3, [r3, #32]
 8012ef6:	330b      	adds	r3, #11
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	f003 0308 	and.w	r3, r3, #8
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d10a      	bne.n	8012f18 <dir_find+0x86>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6a18      	ldr	r0, [r3, #32]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	3324      	adds	r3, #36	; 0x24
 8012f0a:	220b      	movs	r2, #11
 8012f0c:	4619      	mov	r1, r3
 8012f0e:	f7fe fff9 	bl	8011f04 <mem_cmp>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d00b      	beq.n	8012f30 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012f18:	2100      	movs	r1, #0
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f7ff fe11 	bl	8012b42 <dir_next>
 8012f20:	4603      	mov	r3, r0
 8012f22:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012f24:	7dfb      	ldrb	r3, [r7, #23]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d0c5      	beq.n	8012eb6 <dir_find+0x24>
 8012f2a:	e002      	b.n	8012f32 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012f2c:	bf00      	nop
 8012f2e:	e000      	b.n	8012f32 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012f30:	bf00      	nop

	return res;
 8012f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3718      	adds	r7, #24
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012f4a:	2101      	movs	r1, #1
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f7ff febd 	bl	8012ccc <dir_alloc>
 8012f52:	4603      	mov	r3, r0
 8012f54:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012f56:	7bfb      	ldrb	r3, [r7, #15]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d11c      	bne.n	8012f96 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	69db      	ldr	r3, [r3, #28]
 8012f60:	4619      	mov	r1, r3
 8012f62:	68b8      	ldr	r0, [r7, #8]
 8012f64:	f7ff f9f2 	bl	801234c <move_window>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012f6c:	7bfb      	ldrb	r3, [r7, #15]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d111      	bne.n	8012f96 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6a1b      	ldr	r3, [r3, #32]
 8012f76:	2220      	movs	r2, #32
 8012f78:	2100      	movs	r1, #0
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7fe ffa7 	bl	8011ece <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	6a18      	ldr	r0, [r3, #32]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	3324      	adds	r3, #36	; 0x24
 8012f88:	220b      	movs	r2, #11
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	f7fe ff7e 	bl	8011e8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	2201      	movs	r2, #1
 8012f94:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3710      	adds	r7, #16
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b086      	sub	sp, #24
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	2200      	movs	r2, #0
 8012fae:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	69db      	ldr	r3, [r3, #28]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d04e      	beq.n	8013056 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	613b      	str	r3, [r7, #16]
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012fc0:	e021      	b.n	8013006 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6a1a      	ldr	r2, [r3, #32]
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	1c59      	adds	r1, r3, #1
 8012fca:	6179      	str	r1, [r7, #20]
 8012fcc:	4413      	add	r3, r2
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012fd2:	7bfb      	ldrb	r3, [r7, #15]
 8012fd4:	2b20      	cmp	r3, #32
 8012fd6:	d100      	bne.n	8012fda <get_fileinfo+0x3a>
 8012fd8:	e015      	b.n	8013006 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012fda:	7bfb      	ldrb	r3, [r7, #15]
 8012fdc:	2b05      	cmp	r3, #5
 8012fde:	d101      	bne.n	8012fe4 <get_fileinfo+0x44>
 8012fe0:	23e5      	movs	r3, #229	; 0xe5
 8012fe2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	2b09      	cmp	r3, #9
 8012fe8:	d106      	bne.n	8012ff8 <get_fileinfo+0x58>
 8012fea:	693b      	ldr	r3, [r7, #16]
 8012fec:	1c5a      	adds	r2, r3, #1
 8012fee:	613a      	str	r2, [r7, #16]
 8012ff0:	683a      	ldr	r2, [r7, #0]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	222e      	movs	r2, #46	; 0x2e
 8012ff6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	1c5a      	adds	r2, r3, #1
 8012ffc:	613a      	str	r2, [r7, #16]
 8012ffe:	683a      	ldr	r2, [r7, #0]
 8013000:	4413      	add	r3, r2
 8013002:	7bfa      	ldrb	r2, [r7, #15]
 8013004:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	2b0a      	cmp	r3, #10
 801300a:	d9da      	bls.n	8012fc2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801300c:	683a      	ldr	r2, [r7, #0]
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	4413      	add	r3, r2
 8013012:	3309      	adds	r3, #9
 8013014:	2200      	movs	r2, #0
 8013016:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6a1b      	ldr	r3, [r3, #32]
 801301c:	7ada      	ldrb	r2, [r3, #11]
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6a1b      	ldr	r3, [r3, #32]
 8013026:	331c      	adds	r3, #28
 8013028:	4618      	mov	r0, r3
 801302a:	f7fe fec5 	bl	8011db8 <ld_dword>
 801302e:	4602      	mov	r2, r0
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6a1b      	ldr	r3, [r3, #32]
 8013038:	3316      	adds	r3, #22
 801303a:	4618      	mov	r0, r3
 801303c:	f7fe febc 	bl	8011db8 <ld_dword>
 8013040:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	b29a      	uxth	r2, r3
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	80da      	strh	r2, [r3, #6]
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	0c1b      	lsrs	r3, r3, #16
 801304e:	b29a      	uxth	r2, r3
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	809a      	strh	r2, [r3, #4]
 8013054:	e000      	b.n	8013058 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013056:	bf00      	nop
}
 8013058:	3718      	adds	r7, #24
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}
	...

08013060 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b088      	sub	sp, #32
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	60fb      	str	r3, [r7, #12]
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	3324      	adds	r3, #36	; 0x24
 8013074:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013076:	220b      	movs	r2, #11
 8013078:	2120      	movs	r1, #32
 801307a:	68b8      	ldr	r0, [r7, #8]
 801307c:	f7fe ff27 	bl	8011ece <mem_set>
	si = i = 0; ni = 8;
 8013080:	2300      	movs	r3, #0
 8013082:	613b      	str	r3, [r7, #16]
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	61fb      	str	r3, [r7, #28]
 8013088:	2308      	movs	r3, #8
 801308a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	1c5a      	adds	r2, r3, #1
 8013090:	61fa      	str	r2, [r7, #28]
 8013092:	68fa      	ldr	r2, [r7, #12]
 8013094:	4413      	add	r3, r2
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801309a:	7efb      	ldrb	r3, [r7, #27]
 801309c:	2b20      	cmp	r3, #32
 801309e:	d94e      	bls.n	801313e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80130a0:	7efb      	ldrb	r3, [r7, #27]
 80130a2:	2b2f      	cmp	r3, #47	; 0x2f
 80130a4:	d006      	beq.n	80130b4 <create_name+0x54>
 80130a6:	7efb      	ldrb	r3, [r7, #27]
 80130a8:	2b5c      	cmp	r3, #92	; 0x5c
 80130aa:	d110      	bne.n	80130ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80130ac:	e002      	b.n	80130b4 <create_name+0x54>
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	3301      	adds	r3, #1
 80130b2:	61fb      	str	r3, [r7, #28]
 80130b4:	68fa      	ldr	r2, [r7, #12]
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	4413      	add	r3, r2
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	2b2f      	cmp	r3, #47	; 0x2f
 80130be:	d0f6      	beq.n	80130ae <create_name+0x4e>
 80130c0:	68fa      	ldr	r2, [r7, #12]
 80130c2:	69fb      	ldr	r3, [r7, #28]
 80130c4:	4413      	add	r3, r2
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	2b5c      	cmp	r3, #92	; 0x5c
 80130ca:	d0f0      	beq.n	80130ae <create_name+0x4e>
			break;
 80130cc:	e038      	b.n	8013140 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80130ce:	7efb      	ldrb	r3, [r7, #27]
 80130d0:	2b2e      	cmp	r3, #46	; 0x2e
 80130d2:	d003      	beq.n	80130dc <create_name+0x7c>
 80130d4:	693a      	ldr	r2, [r7, #16]
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	429a      	cmp	r2, r3
 80130da:	d30c      	bcc.n	80130f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	2b0b      	cmp	r3, #11
 80130e0:	d002      	beq.n	80130e8 <create_name+0x88>
 80130e2:	7efb      	ldrb	r3, [r7, #27]
 80130e4:	2b2e      	cmp	r3, #46	; 0x2e
 80130e6:	d001      	beq.n	80130ec <create_name+0x8c>
 80130e8:	2306      	movs	r3, #6
 80130ea:	e044      	b.n	8013176 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80130ec:	2308      	movs	r3, #8
 80130ee:	613b      	str	r3, [r7, #16]
 80130f0:	230b      	movs	r3, #11
 80130f2:	617b      	str	r3, [r7, #20]
			continue;
 80130f4:	e022      	b.n	801313c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80130f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	da04      	bge.n	8013108 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80130fe:	7efb      	ldrb	r3, [r7, #27]
 8013100:	3b80      	subs	r3, #128	; 0x80
 8013102:	4a1f      	ldr	r2, [pc, #124]	; (8013180 <create_name+0x120>)
 8013104:	5cd3      	ldrb	r3, [r2, r3]
 8013106:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013108:	7efb      	ldrb	r3, [r7, #27]
 801310a:	4619      	mov	r1, r3
 801310c:	481d      	ldr	r0, [pc, #116]	; (8013184 <create_name+0x124>)
 801310e:	f7fe ff20 	bl	8011f52 <chk_chr>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d001      	beq.n	801311c <create_name+0xbc>
 8013118:	2306      	movs	r3, #6
 801311a:	e02c      	b.n	8013176 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801311c:	7efb      	ldrb	r3, [r7, #27]
 801311e:	2b60      	cmp	r3, #96	; 0x60
 8013120:	d905      	bls.n	801312e <create_name+0xce>
 8013122:	7efb      	ldrb	r3, [r7, #27]
 8013124:	2b7a      	cmp	r3, #122	; 0x7a
 8013126:	d802      	bhi.n	801312e <create_name+0xce>
 8013128:	7efb      	ldrb	r3, [r7, #27]
 801312a:	3b20      	subs	r3, #32
 801312c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	1c5a      	adds	r2, r3, #1
 8013132:	613a      	str	r2, [r7, #16]
 8013134:	68ba      	ldr	r2, [r7, #8]
 8013136:	4413      	add	r3, r2
 8013138:	7efa      	ldrb	r2, [r7, #27]
 801313a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801313c:	e7a6      	b.n	801308c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801313e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013140:	68fa      	ldr	r2, [r7, #12]
 8013142:	69fb      	ldr	r3, [r7, #28]
 8013144:	441a      	add	r2, r3
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d101      	bne.n	8013154 <create_name+0xf4>
 8013150:	2306      	movs	r3, #6
 8013152:	e010      	b.n	8013176 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	2be5      	cmp	r3, #229	; 0xe5
 801315a:	d102      	bne.n	8013162 <create_name+0x102>
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	2205      	movs	r2, #5
 8013160:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013162:	7efb      	ldrb	r3, [r7, #27]
 8013164:	2b20      	cmp	r3, #32
 8013166:	d801      	bhi.n	801316c <create_name+0x10c>
 8013168:	2204      	movs	r2, #4
 801316a:	e000      	b.n	801316e <create_name+0x10e>
 801316c:	2200      	movs	r2, #0
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	330b      	adds	r3, #11
 8013172:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013174:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013176:	4618      	mov	r0, r3
 8013178:	3720      	adds	r7, #32
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}
 801317e:	bf00      	nop
 8013180:	08020ee0 	.word	0x08020ee0
 8013184:	08020cf0 	.word	0x08020cf0

08013188 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b086      	sub	sp, #24
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801319c:	e002      	b.n	80131a4 <follow_path+0x1c>
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	3301      	adds	r3, #1
 80131a2:	603b      	str	r3, [r7, #0]
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	2b2f      	cmp	r3, #47	; 0x2f
 80131aa:	d0f8      	beq.n	801319e <follow_path+0x16>
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	2b5c      	cmp	r3, #92	; 0x5c
 80131b2:	d0f4      	beq.n	801319e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	2200      	movs	r2, #0
 80131b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	2b1f      	cmp	r3, #31
 80131c0:	d80a      	bhi.n	80131d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2280      	movs	r2, #128	; 0x80
 80131c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80131ca:	2100      	movs	r1, #0
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	f7ff fc3d 	bl	8012a4c <dir_sdi>
 80131d2:	4603      	mov	r3, r0
 80131d4:	75fb      	strb	r3, [r7, #23]
 80131d6:	e043      	b.n	8013260 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80131d8:	463b      	mov	r3, r7
 80131da:	4619      	mov	r1, r3
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f7ff ff3f 	bl	8013060 <create_name>
 80131e2:	4603      	mov	r3, r0
 80131e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80131e6:	7dfb      	ldrb	r3, [r7, #23]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d134      	bne.n	8013256 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f7ff fe50 	bl	8012e92 <dir_find>
 80131f2:	4603      	mov	r3, r0
 80131f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80131fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80131fe:	7dfb      	ldrb	r3, [r7, #23]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d00a      	beq.n	801321a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013204:	7dfb      	ldrb	r3, [r7, #23]
 8013206:	2b04      	cmp	r3, #4
 8013208:	d127      	bne.n	801325a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801320a:	7afb      	ldrb	r3, [r7, #11]
 801320c:	f003 0304 	and.w	r3, r3, #4
 8013210:	2b00      	cmp	r3, #0
 8013212:	d122      	bne.n	801325a <follow_path+0xd2>
 8013214:	2305      	movs	r3, #5
 8013216:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013218:	e01f      	b.n	801325a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801321a:	7afb      	ldrb	r3, [r7, #11]
 801321c:	f003 0304 	and.w	r3, r3, #4
 8013220:	2b00      	cmp	r3, #0
 8013222:	d11c      	bne.n	801325e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	799b      	ldrb	r3, [r3, #6]
 8013228:	f003 0310 	and.w	r3, r3, #16
 801322c:	2b00      	cmp	r3, #0
 801322e:	d102      	bne.n	8013236 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013230:	2305      	movs	r3, #5
 8013232:	75fb      	strb	r3, [r7, #23]
 8013234:	e014      	b.n	8013260 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	695b      	ldr	r3, [r3, #20]
 8013240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013244:	4413      	add	r3, r2
 8013246:	4619      	mov	r1, r3
 8013248:	68f8      	ldr	r0, [r7, #12]
 801324a:	f7ff fd86 	bl	8012d5a <ld_clust>
 801324e:	4602      	mov	r2, r0
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013254:	e7c0      	b.n	80131d8 <follow_path+0x50>
			if (res != FR_OK) break;
 8013256:	bf00      	nop
 8013258:	e002      	b.n	8013260 <follow_path+0xd8>
				break;
 801325a:	bf00      	nop
 801325c:	e000      	b.n	8013260 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801325e:	bf00      	nop
			}
		}
	}

	return res;
 8013260:	7dfb      	ldrb	r3, [r7, #23]
}
 8013262:	4618      	mov	r0, r3
 8013264:	3718      	adds	r7, #24
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}

0801326a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801326a:	b480      	push	{r7}
 801326c:	b087      	sub	sp, #28
 801326e:	af00      	add	r7, sp, #0
 8013270:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013272:	f04f 33ff 	mov.w	r3, #4294967295
 8013276:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d031      	beq.n	80132e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	617b      	str	r3, [r7, #20]
 8013286:	e002      	b.n	801328e <get_ldnumber+0x24>
 8013288:	697b      	ldr	r3, [r7, #20]
 801328a:	3301      	adds	r3, #1
 801328c:	617b      	str	r3, [r7, #20]
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	2b20      	cmp	r3, #32
 8013294:	d903      	bls.n	801329e <get_ldnumber+0x34>
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	2b3a      	cmp	r3, #58	; 0x3a
 801329c:	d1f4      	bne.n	8013288 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	2b3a      	cmp	r3, #58	; 0x3a
 80132a4:	d11c      	bne.n	80132e0 <get_ldnumber+0x76>
			tp = *path;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	1c5a      	adds	r2, r3, #1
 80132b0:	60fa      	str	r2, [r7, #12]
 80132b2:	781b      	ldrb	r3, [r3, #0]
 80132b4:	3b30      	subs	r3, #48	; 0x30
 80132b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	2b09      	cmp	r3, #9
 80132bc:	d80e      	bhi.n	80132dc <get_ldnumber+0x72>
 80132be:	68fa      	ldr	r2, [r7, #12]
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	429a      	cmp	r2, r3
 80132c4:	d10a      	bne.n	80132dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d107      	bne.n	80132dc <get_ldnumber+0x72>
					vol = (int)i;
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	3301      	adds	r3, #1
 80132d4:	617b      	str	r3, [r7, #20]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	697a      	ldr	r2, [r7, #20]
 80132da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	e002      	b.n	80132e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80132e0:	2300      	movs	r3, #0
 80132e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80132e4:	693b      	ldr	r3, [r7, #16]
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	371c      	adds	r7, #28
 80132ea:	46bd      	mov	sp, r7
 80132ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f0:	4770      	bx	lr
	...

080132f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b082      	sub	sp, #8
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2200      	movs	r2, #0
 8013302:	70da      	strb	r2, [r3, #3]
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f04f 32ff 	mov.w	r2, #4294967295
 801330a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801330c:	6839      	ldr	r1, [r7, #0]
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f7ff f81c 	bl	801234c <move_window>
 8013314:	4603      	mov	r3, r0
 8013316:	2b00      	cmp	r3, #0
 8013318:	d001      	beq.n	801331e <check_fs+0x2a>
 801331a:	2304      	movs	r3, #4
 801331c:	e038      	b.n	8013390 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	3334      	adds	r3, #52	; 0x34
 8013322:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013326:	4618      	mov	r0, r3
 8013328:	f7fe fd2e 	bl	8011d88 <ld_word>
 801332c:	4603      	mov	r3, r0
 801332e:	461a      	mov	r2, r3
 8013330:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013334:	429a      	cmp	r2, r3
 8013336:	d001      	beq.n	801333c <check_fs+0x48>
 8013338:	2303      	movs	r3, #3
 801333a:	e029      	b.n	8013390 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013342:	2be9      	cmp	r3, #233	; 0xe9
 8013344:	d009      	beq.n	801335a <check_fs+0x66>
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801334c:	2beb      	cmp	r3, #235	; 0xeb
 801334e:	d11e      	bne.n	801338e <check_fs+0x9a>
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013356:	2b90      	cmp	r3, #144	; 0x90
 8013358:	d119      	bne.n	801338e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	3334      	adds	r3, #52	; 0x34
 801335e:	3336      	adds	r3, #54	; 0x36
 8013360:	4618      	mov	r0, r3
 8013362:	f7fe fd29 	bl	8011db8 <ld_dword>
 8013366:	4603      	mov	r3, r0
 8013368:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801336c:	4a0a      	ldr	r2, [pc, #40]	; (8013398 <check_fs+0xa4>)
 801336e:	4293      	cmp	r3, r2
 8013370:	d101      	bne.n	8013376 <check_fs+0x82>
 8013372:	2300      	movs	r3, #0
 8013374:	e00c      	b.n	8013390 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	3334      	adds	r3, #52	; 0x34
 801337a:	3352      	adds	r3, #82	; 0x52
 801337c:	4618      	mov	r0, r3
 801337e:	f7fe fd1b 	bl	8011db8 <ld_dword>
 8013382:	4603      	mov	r3, r0
 8013384:	4a05      	ldr	r2, [pc, #20]	; (801339c <check_fs+0xa8>)
 8013386:	4293      	cmp	r3, r2
 8013388:	d101      	bne.n	801338e <check_fs+0x9a>
 801338a:	2300      	movs	r3, #0
 801338c:	e000      	b.n	8013390 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801338e:	2302      	movs	r3, #2
}
 8013390:	4618      	mov	r0, r3
 8013392:	3708      	adds	r7, #8
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	00544146 	.word	0x00544146
 801339c:	33544146 	.word	0x33544146

080133a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b096      	sub	sp, #88	; 0x58
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	60f8      	str	r0, [r7, #12]
 80133a8:	60b9      	str	r1, [r7, #8]
 80133aa:	4613      	mov	r3, r2
 80133ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	2200      	movs	r2, #0
 80133b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80133b4:	68f8      	ldr	r0, [r7, #12]
 80133b6:	f7ff ff58 	bl	801326a <get_ldnumber>
 80133ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80133bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133be:	2b00      	cmp	r3, #0
 80133c0:	da01      	bge.n	80133c6 <find_volume+0x26>
 80133c2:	230b      	movs	r3, #11
 80133c4:	e236      	b.n	8013834 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80133c6:	4aac      	ldr	r2, [pc, #688]	; (8013678 <find_volume+0x2d8>)
 80133c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80133d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d101      	bne.n	80133da <find_volume+0x3a>
 80133d6:	230c      	movs	r3, #12
 80133d8:	e22c      	b.n	8013834 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80133da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80133dc:	f7fe fdd4 	bl	8011f88 <lock_fs>
 80133e0:	4603      	mov	r3, r0
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d101      	bne.n	80133ea <find_volume+0x4a>
 80133e6:	230f      	movs	r3, #15
 80133e8:	e224      	b.n	8013834 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80133ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80133f0:	79fb      	ldrb	r3, [r7, #7]
 80133f2:	f023 0301 	bic.w	r3, r3, #1
 80133f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80133f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d01a      	beq.n	8013436 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013402:	785b      	ldrb	r3, [r3, #1]
 8013404:	4618      	mov	r0, r3
 8013406:	f7fe fc21 	bl	8011c4c <disk_status>
 801340a:	4603      	mov	r3, r0
 801340c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013414:	f003 0301 	and.w	r3, r3, #1
 8013418:	2b00      	cmp	r3, #0
 801341a:	d10c      	bne.n	8013436 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801341c:	79fb      	ldrb	r3, [r7, #7]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d007      	beq.n	8013432 <find_volume+0x92>
 8013422:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013426:	f003 0304 	and.w	r3, r3, #4
 801342a:	2b00      	cmp	r3, #0
 801342c:	d001      	beq.n	8013432 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801342e:	230a      	movs	r3, #10
 8013430:	e200      	b.n	8013834 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8013432:	2300      	movs	r3, #0
 8013434:	e1fe      	b.n	8013834 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013438:	2200      	movs	r2, #0
 801343a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801343c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801343e:	b2da      	uxtb	r2, r3
 8013440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013442:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013446:	785b      	ldrb	r3, [r3, #1]
 8013448:	4618      	mov	r0, r3
 801344a:	f7fe fc19 	bl	8011c80 <disk_initialize>
 801344e:	4603      	mov	r3, r0
 8013450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013458:	f003 0301 	and.w	r3, r3, #1
 801345c:	2b00      	cmp	r3, #0
 801345e:	d001      	beq.n	8013464 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013460:	2303      	movs	r3, #3
 8013462:	e1e7      	b.n	8013834 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013464:	79fb      	ldrb	r3, [r7, #7]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d007      	beq.n	801347a <find_volume+0xda>
 801346a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801346e:	f003 0304 	and.w	r3, r3, #4
 8013472:	2b00      	cmp	r3, #0
 8013474:	d001      	beq.n	801347a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8013476:	230a      	movs	r3, #10
 8013478:	e1dc      	b.n	8013834 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801347a:	2300      	movs	r3, #0
 801347c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801347e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013482:	f7ff ff37 	bl	80132f4 <check_fs>
 8013486:	4603      	mov	r3, r0
 8013488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801348c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013490:	2b02      	cmp	r3, #2
 8013492:	d14b      	bne.n	801352c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013494:	2300      	movs	r3, #0
 8013496:	643b      	str	r3, [r7, #64]	; 0x40
 8013498:	e01f      	b.n	80134da <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801349c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80134a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134a2:	011b      	lsls	r3, r3, #4
 80134a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80134a8:	4413      	add	r3, r2
 80134aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80134ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ae:	3304      	adds	r3, #4
 80134b0:	781b      	ldrb	r3, [r3, #0]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d006      	beq.n	80134c4 <find_volume+0x124>
 80134b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b8:	3308      	adds	r3, #8
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7fe fc7c 	bl	8011db8 <ld_dword>
 80134c0:	4602      	mov	r2, r0
 80134c2:	e000      	b.n	80134c6 <find_volume+0x126>
 80134c4:	2200      	movs	r2, #0
 80134c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134c8:	009b      	lsls	r3, r3, #2
 80134ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80134ce:	440b      	add	r3, r1
 80134d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80134d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134d6:	3301      	adds	r3, #1
 80134d8:	643b      	str	r3, [r7, #64]	; 0x40
 80134da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134dc:	2b03      	cmp	r3, #3
 80134de:	d9dc      	bls.n	801349a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80134e0:	2300      	movs	r3, #0
 80134e2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80134e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d002      	beq.n	80134f0 <find_volume+0x150>
 80134ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134ec:	3b01      	subs	r3, #1
 80134ee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80134f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134f2:	009b      	lsls	r3, r3, #2
 80134f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80134f8:	4413      	add	r3, r2
 80134fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80134fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013502:	2b00      	cmp	r3, #0
 8013504:	d005      	beq.n	8013512 <find_volume+0x172>
 8013506:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801350a:	f7ff fef3 	bl	80132f4 <check_fs>
 801350e:	4603      	mov	r3, r0
 8013510:	e000      	b.n	8013514 <find_volume+0x174>
 8013512:	2303      	movs	r3, #3
 8013514:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801351c:	2b01      	cmp	r3, #1
 801351e:	d905      	bls.n	801352c <find_volume+0x18c>
 8013520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013522:	3301      	adds	r3, #1
 8013524:	643b      	str	r3, [r7, #64]	; 0x40
 8013526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013528:	2b03      	cmp	r3, #3
 801352a:	d9e1      	bls.n	80134f0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801352c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013530:	2b04      	cmp	r3, #4
 8013532:	d101      	bne.n	8013538 <find_volume+0x198>
 8013534:	2301      	movs	r3, #1
 8013536:	e17d      	b.n	8013834 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801353c:	2b01      	cmp	r3, #1
 801353e:	d901      	bls.n	8013544 <find_volume+0x1a4>
 8013540:	230d      	movs	r3, #13
 8013542:	e177      	b.n	8013834 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013546:	3334      	adds	r3, #52	; 0x34
 8013548:	330b      	adds	r3, #11
 801354a:	4618      	mov	r0, r3
 801354c:	f7fe fc1c 	bl	8011d88 <ld_word>
 8013550:	4603      	mov	r3, r0
 8013552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013556:	d001      	beq.n	801355c <find_volume+0x1bc>
 8013558:	230d      	movs	r3, #13
 801355a:	e16b      	b.n	8013834 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801355e:	3334      	adds	r3, #52	; 0x34
 8013560:	3316      	adds	r3, #22
 8013562:	4618      	mov	r0, r3
 8013564:	f7fe fc10 	bl	8011d88 <ld_word>
 8013568:	4603      	mov	r3, r0
 801356a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801356c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801356e:	2b00      	cmp	r3, #0
 8013570:	d106      	bne.n	8013580 <find_volume+0x1e0>
 8013572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013574:	3334      	adds	r3, #52	; 0x34
 8013576:	3324      	adds	r3, #36	; 0x24
 8013578:	4618      	mov	r0, r3
 801357a:	f7fe fc1d 	bl	8011db8 <ld_dword>
 801357e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013584:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013588:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801358e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013592:	789b      	ldrb	r3, [r3, #2]
 8013594:	2b01      	cmp	r3, #1
 8013596:	d005      	beq.n	80135a4 <find_volume+0x204>
 8013598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801359a:	789b      	ldrb	r3, [r3, #2]
 801359c:	2b02      	cmp	r3, #2
 801359e:	d001      	beq.n	80135a4 <find_volume+0x204>
 80135a0:	230d      	movs	r3, #13
 80135a2:	e147      	b.n	8013834 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80135a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a6:	789b      	ldrb	r3, [r3, #2]
 80135a8:	461a      	mov	r2, r3
 80135aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135ac:	fb02 f303 	mul.w	r3, r2, r3
 80135b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80135b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80135b8:	b29a      	uxth	r2, r3
 80135ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80135be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135c0:	895b      	ldrh	r3, [r3, #10]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d008      	beq.n	80135d8 <find_volume+0x238>
 80135c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135c8:	895b      	ldrh	r3, [r3, #10]
 80135ca:	461a      	mov	r2, r3
 80135cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ce:	895b      	ldrh	r3, [r3, #10]
 80135d0:	3b01      	subs	r3, #1
 80135d2:	4013      	ands	r3, r2
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d001      	beq.n	80135dc <find_volume+0x23c>
 80135d8:	230d      	movs	r3, #13
 80135da:	e12b      	b.n	8013834 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80135dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135de:	3334      	adds	r3, #52	; 0x34
 80135e0:	3311      	adds	r3, #17
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7fe fbd0 	bl	8011d88 <ld_word>
 80135e8:	4603      	mov	r3, r0
 80135ea:	461a      	mov	r2, r3
 80135ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80135f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f2:	891b      	ldrh	r3, [r3, #8]
 80135f4:	f003 030f 	and.w	r3, r3, #15
 80135f8:	b29b      	uxth	r3, r3
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d001      	beq.n	8013602 <find_volume+0x262>
 80135fe:	230d      	movs	r3, #13
 8013600:	e118      	b.n	8013834 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013604:	3334      	adds	r3, #52	; 0x34
 8013606:	3313      	adds	r3, #19
 8013608:	4618      	mov	r0, r3
 801360a:	f7fe fbbd 	bl	8011d88 <ld_word>
 801360e:	4603      	mov	r3, r0
 8013610:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013614:	2b00      	cmp	r3, #0
 8013616:	d106      	bne.n	8013626 <find_volume+0x286>
 8013618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801361a:	3334      	adds	r3, #52	; 0x34
 801361c:	3320      	adds	r3, #32
 801361e:	4618      	mov	r0, r3
 8013620:	f7fe fbca 	bl	8011db8 <ld_dword>
 8013624:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013628:	3334      	adds	r3, #52	; 0x34
 801362a:	330e      	adds	r3, #14
 801362c:	4618      	mov	r0, r3
 801362e:	f7fe fbab 	bl	8011d88 <ld_word>
 8013632:	4603      	mov	r3, r0
 8013634:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013636:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013638:	2b00      	cmp	r3, #0
 801363a:	d101      	bne.n	8013640 <find_volume+0x2a0>
 801363c:	230d      	movs	r3, #13
 801363e:	e0f9      	b.n	8013834 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013640:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013644:	4413      	add	r3, r2
 8013646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013648:	8912      	ldrh	r2, [r2, #8]
 801364a:	0912      	lsrs	r2, r2, #4
 801364c:	b292      	uxth	r2, r2
 801364e:	4413      	add	r3, r2
 8013650:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013656:	429a      	cmp	r2, r3
 8013658:	d201      	bcs.n	801365e <find_volume+0x2be>
 801365a:	230d      	movs	r3, #13
 801365c:	e0ea      	b.n	8013834 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801365e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013662:	1ad3      	subs	r3, r2, r3
 8013664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013666:	8952      	ldrh	r2, [r2, #10]
 8013668:	fbb3 f3f2 	udiv	r3, r3, r2
 801366c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013670:	2b00      	cmp	r3, #0
 8013672:	d103      	bne.n	801367c <find_volume+0x2dc>
 8013674:	230d      	movs	r3, #13
 8013676:	e0dd      	b.n	8013834 <find_volume+0x494>
 8013678:	200007dc 	.word	0x200007dc
		fmt = FS_FAT32;
 801367c:	2303      	movs	r3, #3
 801367e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013684:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013688:	4293      	cmp	r3, r2
 801368a:	d802      	bhi.n	8013692 <find_volume+0x2f2>
 801368c:	2302      	movs	r3, #2
 801368e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013694:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013698:	4293      	cmp	r3, r2
 801369a:	d802      	bhi.n	80136a2 <find_volume+0x302>
 801369c:	2301      	movs	r3, #1
 801369e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80136a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a4:	1c9a      	adds	r2, r3, #2
 80136a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136a8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80136aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80136ae:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80136b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80136b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136b4:	441a      	add	r2, r3
 80136b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80136ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80136bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136be:	441a      	add	r2, r3
 80136c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80136c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80136c8:	2b03      	cmp	r3, #3
 80136ca:	d11e      	bne.n	801370a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80136cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ce:	3334      	adds	r3, #52	; 0x34
 80136d0:	332a      	adds	r3, #42	; 0x2a
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7fe fb58 	bl	8011d88 <ld_word>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d001      	beq.n	80136e2 <find_volume+0x342>
 80136de:	230d      	movs	r3, #13
 80136e0:	e0a8      	b.n	8013834 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80136e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136e4:	891b      	ldrh	r3, [r3, #8]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <find_volume+0x34e>
 80136ea:	230d      	movs	r3, #13
 80136ec:	e0a2      	b.n	8013834 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80136ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f0:	3334      	adds	r3, #52	; 0x34
 80136f2:	332c      	adds	r3, #44	; 0x2c
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7fe fb5f 	bl	8011db8 <ld_dword>
 80136fa:	4602      	mov	r2, r0
 80136fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136fe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013702:	699b      	ldr	r3, [r3, #24]
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	647b      	str	r3, [r7, #68]	; 0x44
 8013708:	e01f      	b.n	801374a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801370c:	891b      	ldrh	r3, [r3, #8]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d101      	bne.n	8013716 <find_volume+0x376>
 8013712:	230d      	movs	r3, #13
 8013714:	e08e      	b.n	8013834 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801371a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801371c:	441a      	add	r2, r3
 801371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013720:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013722:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013726:	2b02      	cmp	r3, #2
 8013728:	d103      	bne.n	8013732 <find_volume+0x392>
 801372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372c:	699b      	ldr	r3, [r3, #24]
 801372e:	005b      	lsls	r3, r3, #1
 8013730:	e00a      	b.n	8013748 <find_volume+0x3a8>
 8013732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013734:	699a      	ldr	r2, [r3, #24]
 8013736:	4613      	mov	r3, r2
 8013738:	005b      	lsls	r3, r3, #1
 801373a:	4413      	add	r3, r2
 801373c:	085a      	lsrs	r2, r3, #1
 801373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013740:	699b      	ldr	r3, [r3, #24]
 8013742:	f003 0301 	and.w	r3, r3, #1
 8013746:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013748:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801374c:	69da      	ldr	r2, [r3, #28]
 801374e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013750:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013754:	0a5b      	lsrs	r3, r3, #9
 8013756:	429a      	cmp	r2, r3
 8013758:	d201      	bcs.n	801375e <find_volume+0x3be>
 801375a:	230d      	movs	r3, #13
 801375c:	e06a      	b.n	8013834 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013760:	f04f 32ff 	mov.w	r2, #4294967295
 8013764:	615a      	str	r2, [r3, #20]
 8013766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013768:	695a      	ldr	r2, [r3, #20]
 801376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801376c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013770:	2280      	movs	r2, #128	; 0x80
 8013772:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013774:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013778:	2b03      	cmp	r3, #3
 801377a:	d149      	bne.n	8013810 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801377c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801377e:	3334      	adds	r3, #52	; 0x34
 8013780:	3330      	adds	r3, #48	; 0x30
 8013782:	4618      	mov	r0, r3
 8013784:	f7fe fb00 	bl	8011d88 <ld_word>
 8013788:	4603      	mov	r3, r0
 801378a:	2b01      	cmp	r3, #1
 801378c:	d140      	bne.n	8013810 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 801378e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013790:	3301      	adds	r3, #1
 8013792:	4619      	mov	r1, r3
 8013794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013796:	f7fe fdd9 	bl	801234c <move_window>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d137      	bne.n	8013810 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80137a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a2:	2200      	movs	r2, #0
 80137a4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80137a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a8:	3334      	adds	r3, #52	; 0x34
 80137aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7fe faea 	bl	8011d88 <ld_word>
 80137b4:	4603      	mov	r3, r0
 80137b6:	461a      	mov	r2, r3
 80137b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80137bc:	429a      	cmp	r2, r3
 80137be:	d127      	bne.n	8013810 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80137c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c2:	3334      	adds	r3, #52	; 0x34
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fe faf7 	bl	8011db8 <ld_dword>
 80137ca:	4603      	mov	r3, r0
 80137cc:	4a1b      	ldr	r2, [pc, #108]	; (801383c <find_volume+0x49c>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d11e      	bne.n	8013810 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80137d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d4:	3334      	adds	r3, #52	; 0x34
 80137d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80137da:	4618      	mov	r0, r3
 80137dc:	f7fe faec 	bl	8011db8 <ld_dword>
 80137e0:	4603      	mov	r3, r0
 80137e2:	4a17      	ldr	r2, [pc, #92]	; (8013840 <find_volume+0x4a0>)
 80137e4:	4293      	cmp	r3, r2
 80137e6:	d113      	bne.n	8013810 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80137e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ea:	3334      	adds	r3, #52	; 0x34
 80137ec:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80137f0:	4618      	mov	r0, r3
 80137f2:	f7fe fae1 	bl	8011db8 <ld_dword>
 80137f6:	4602      	mov	r2, r0
 80137f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fa:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80137fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fe:	3334      	adds	r3, #52	; 0x34
 8013800:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013804:	4618      	mov	r0, r3
 8013806:	f7fe fad7 	bl	8011db8 <ld_dword>
 801380a:	4602      	mov	r2, r0
 801380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013812:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013816:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013818:	4b0a      	ldr	r3, [pc, #40]	; (8013844 <find_volume+0x4a4>)
 801381a:	881b      	ldrh	r3, [r3, #0]
 801381c:	3301      	adds	r3, #1
 801381e:	b29a      	uxth	r2, r3
 8013820:	4b08      	ldr	r3, [pc, #32]	; (8013844 <find_volume+0x4a4>)
 8013822:	801a      	strh	r2, [r3, #0]
 8013824:	4b07      	ldr	r3, [pc, #28]	; (8013844 <find_volume+0x4a4>)
 8013826:	881a      	ldrh	r2, [r3, #0]
 8013828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801382a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801382c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801382e:	f7fe fd25 	bl	801227c <clear_lock>
#endif
	return FR_OK;
 8013832:	2300      	movs	r3, #0
}
 8013834:	4618      	mov	r0, r3
 8013836:	3758      	adds	r7, #88	; 0x58
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	41615252 	.word	0x41615252
 8013840:	61417272 	.word	0x61417272
 8013844:	200007e0 	.word	0x200007e0

08013848 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013852:	2309      	movs	r3, #9
 8013854:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d02e      	beq.n	80138ba <validate+0x72>
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d02a      	beq.n	80138ba <validate+0x72>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d025      	beq.n	80138ba <validate+0x72>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	889a      	ldrh	r2, [r3, #4]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	88db      	ldrh	r3, [r3, #6]
 8013878:	429a      	cmp	r2, r3
 801387a:	d11e      	bne.n	80138ba <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	4618      	mov	r0, r3
 8013882:	f7fe fb81 	bl	8011f88 <lock_fs>
 8013886:	4603      	mov	r3, r0
 8013888:	2b00      	cmp	r3, #0
 801388a:	d014      	beq.n	80138b6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	785b      	ldrb	r3, [r3, #1]
 8013892:	4618      	mov	r0, r3
 8013894:	f7fe f9da 	bl	8011c4c <disk_status>
 8013898:	4603      	mov	r3, r0
 801389a:	f003 0301 	and.w	r3, r3, #1
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d102      	bne.n	80138a8 <validate+0x60>
				res = FR_OK;
 80138a2:	2300      	movs	r3, #0
 80138a4:	73fb      	strb	r3, [r7, #15]
 80138a6:	e008      	b.n	80138ba <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	2100      	movs	r1, #0
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7fe fb80 	bl	8011fb4 <unlock_fs>
 80138b4:	e001      	b.n	80138ba <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80138b6:	230f      	movs	r3, #15
 80138b8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80138ba:	7bfb      	ldrb	r3, [r7, #15]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d102      	bne.n	80138c6 <validate+0x7e>
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	e000      	b.n	80138c8 <validate+0x80>
 80138c6:	2300      	movs	r3, #0
 80138c8:	683a      	ldr	r2, [r7, #0]
 80138ca:	6013      	str	r3, [r2, #0]
	return res;
 80138cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3710      	adds	r7, #16
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
	...

080138d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b088      	sub	sp, #32
 80138dc:	af00      	add	r7, sp, #0
 80138de:	60f8      	str	r0, [r7, #12]
 80138e0:	60b9      	str	r1, [r7, #8]
 80138e2:	4613      	mov	r3, r2
 80138e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80138ea:	f107 0310 	add.w	r3, r7, #16
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7ff fcbb 	bl	801326a <get_ldnumber>
 80138f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80138f6:	69fb      	ldr	r3, [r7, #28]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	da01      	bge.n	8013900 <f_mount+0x28>
 80138fc:	230b      	movs	r3, #11
 80138fe:	e048      	b.n	8013992 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013900:	4a26      	ldr	r2, [pc, #152]	; (801399c <f_mount+0xc4>)
 8013902:	69fb      	ldr	r3, [r7, #28]
 8013904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013908:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801390a:	69bb      	ldr	r3, [r7, #24]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d00f      	beq.n	8013930 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013910:	69b8      	ldr	r0, [r7, #24]
 8013912:	f7fe fcb3 	bl	801227c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	68db      	ldr	r3, [r3, #12]
 801391a:	4618      	mov	r0, r3
 801391c:	f001 f812 	bl	8014944 <ff_del_syncobj>
 8013920:	4603      	mov	r3, r0
 8013922:	2b00      	cmp	r3, #0
 8013924:	d101      	bne.n	801392a <f_mount+0x52>
 8013926:	2302      	movs	r3, #2
 8013928:	e033      	b.n	8013992 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	2200      	movs	r2, #0
 801392e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d00f      	beq.n	8013956 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	2200      	movs	r2, #0
 801393a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	b2da      	uxtb	r2, r3
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	330c      	adds	r3, #12
 8013944:	4619      	mov	r1, r3
 8013946:	4610      	mov	r0, r2
 8013948:	f000 ffe1 	bl	801490e <ff_cre_syncobj>
 801394c:	4603      	mov	r3, r0
 801394e:	2b00      	cmp	r3, #0
 8013950:	d101      	bne.n	8013956 <f_mount+0x7e>
 8013952:	2302      	movs	r3, #2
 8013954:	e01d      	b.n	8013992 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013956:	68fa      	ldr	r2, [r7, #12]
 8013958:	4910      	ldr	r1, [pc, #64]	; (801399c <f_mount+0xc4>)
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d002      	beq.n	801396c <f_mount+0x94>
 8013966:	79fb      	ldrb	r3, [r7, #7]
 8013968:	2b01      	cmp	r3, #1
 801396a:	d001      	beq.n	8013970 <f_mount+0x98>
 801396c:	2300      	movs	r3, #0
 801396e:	e010      	b.n	8013992 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013970:	f107 010c 	add.w	r1, r7, #12
 8013974:	f107 0308 	add.w	r3, r7, #8
 8013978:	2200      	movs	r2, #0
 801397a:	4618      	mov	r0, r3
 801397c:	f7ff fd10 	bl	80133a0 <find_volume>
 8013980:	4603      	mov	r3, r0
 8013982:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	7dfa      	ldrb	r2, [r7, #23]
 8013988:	4611      	mov	r1, r2
 801398a:	4618      	mov	r0, r3
 801398c:	f7fe fb12 	bl	8011fb4 <unlock_fs>
 8013990:	7dfb      	ldrb	r3, [r7, #23]
}
 8013992:	4618      	mov	r0, r3
 8013994:	3720      	adds	r7, #32
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
 801399a:	bf00      	nop
 801399c:	200007dc 	.word	0x200007dc

080139a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b098      	sub	sp, #96	; 0x60
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	60f8      	str	r0, [r7, #12]
 80139a8:	60b9      	str	r1, [r7, #8]
 80139aa:	4613      	mov	r3, r2
 80139ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d101      	bne.n	80139b8 <f_open+0x18>
 80139b4:	2309      	movs	r3, #9
 80139b6:	e1b4      	b.n	8013d22 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80139b8:	79fb      	ldrb	r3, [r7, #7]
 80139ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80139be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80139c0:	79fa      	ldrb	r2, [r7, #7]
 80139c2:	f107 0110 	add.w	r1, r7, #16
 80139c6:	f107 0308 	add.w	r3, r7, #8
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7ff fce8 	bl	80133a0 <find_volume>
 80139d0:	4603      	mov	r3, r0
 80139d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80139d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80139da:	2b00      	cmp	r3, #0
 80139dc:	f040 8191 	bne.w	8013d02 <f_open+0x362>
		dj.obj.fs = fs;
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80139e4:	68ba      	ldr	r2, [r7, #8]
 80139e6:	f107 0314 	add.w	r3, r7, #20
 80139ea:	4611      	mov	r1, r2
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7ff fbcb 	bl	8013188 <follow_path>
 80139f2:	4603      	mov	r3, r0
 80139f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80139f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d11a      	bne.n	8013a36 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013a00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013a04:	b25b      	sxtb	r3, r3
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	da03      	bge.n	8013a12 <f_open+0x72>
				res = FR_INVALID_NAME;
 8013a0a:	2306      	movs	r3, #6
 8013a0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013a10:	e011      	b.n	8013a36 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013a12:	79fb      	ldrb	r3, [r7, #7]
 8013a14:	f023 0301 	bic.w	r3, r3, #1
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	bf14      	ite	ne
 8013a1c:	2301      	movne	r3, #1
 8013a1e:	2300      	moveq	r3, #0
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	461a      	mov	r2, r3
 8013a24:	f107 0314 	add.w	r3, r7, #20
 8013a28:	4611      	mov	r1, r2
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7fe fade 	bl	8011fec <chk_lock>
 8013a30:	4603      	mov	r3, r0
 8013a32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013a36:	79fb      	ldrb	r3, [r7, #7]
 8013a38:	f003 031c 	and.w	r3, r3, #28
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d07f      	beq.n	8013b40 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013a40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d017      	beq.n	8013a78 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a4c:	2b04      	cmp	r3, #4
 8013a4e:	d10e      	bne.n	8013a6e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013a50:	f7fe fb28 	bl	80120a4 <enq_lock>
 8013a54:	4603      	mov	r3, r0
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d006      	beq.n	8013a68 <f_open+0xc8>
 8013a5a:	f107 0314 	add.w	r3, r7, #20
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7ff fa6c 	bl	8012f3c <dir_register>
 8013a64:	4603      	mov	r3, r0
 8013a66:	e000      	b.n	8013a6a <f_open+0xca>
 8013a68:	2312      	movs	r3, #18
 8013a6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013a6e:	79fb      	ldrb	r3, [r7, #7]
 8013a70:	f043 0308 	orr.w	r3, r3, #8
 8013a74:	71fb      	strb	r3, [r7, #7]
 8013a76:	e010      	b.n	8013a9a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013a78:	7ebb      	ldrb	r3, [r7, #26]
 8013a7a:	f003 0311 	and.w	r3, r3, #17
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d003      	beq.n	8013a8a <f_open+0xea>
					res = FR_DENIED;
 8013a82:	2307      	movs	r3, #7
 8013a84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013a88:	e007      	b.n	8013a9a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013a8a:	79fb      	ldrb	r3, [r7, #7]
 8013a8c:	f003 0304 	and.w	r3, r3, #4
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d002      	beq.n	8013a9a <f_open+0xfa>
 8013a94:	2308      	movs	r3, #8
 8013a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d168      	bne.n	8013b74 <f_open+0x1d4>
 8013aa2:	79fb      	ldrb	r3, [r7, #7]
 8013aa4:	f003 0308 	and.w	r3, r3, #8
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d063      	beq.n	8013b74 <f_open+0x1d4>
				dw = GET_FATTIME();
 8013aac:	f7fb ff2e 	bl	800f90c <get_fattime>
 8013ab0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ab4:	330e      	adds	r3, #14
 8013ab6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f7fe f9bb 	bl	8011e34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ac0:	3316      	adds	r3, #22
 8013ac2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7fe f9b5 	bl	8011e34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013acc:	330b      	adds	r3, #11
 8013ace:	2220      	movs	r2, #32
 8013ad0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ad6:	4611      	mov	r1, r2
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7ff f93e 	bl	8012d5a <ld_clust>
 8013ade:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7ff f956 	bl	8012d98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aee:	331c      	adds	r3, #28
 8013af0:	2100      	movs	r1, #0
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7fe f99e 	bl	8011e34 <st_dword>
					fs->wflag = 1;
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	2201      	movs	r2, #1
 8013afc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d037      	beq.n	8013b74 <f_open+0x1d4>
						dw = fs->winsect;
 8013b04:	693b      	ldr	r3, [r7, #16]
 8013b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b08:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013b0a:	f107 0314 	add.w	r3, r7, #20
 8013b0e:	2200      	movs	r2, #0
 8013b10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7fe fe69 	bl	80127ea <remove_chain>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d126      	bne.n	8013b74 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7fe fc0e 	bl	801234c <move_window>
 8013b30:	4603      	mov	r3, r0
 8013b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b3a:	3a01      	subs	r2, #1
 8013b3c:	611a      	str	r2, [r3, #16]
 8013b3e:	e019      	b.n	8013b74 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013b40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d115      	bne.n	8013b74 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013b48:	7ebb      	ldrb	r3, [r7, #26]
 8013b4a:	f003 0310 	and.w	r3, r3, #16
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d003      	beq.n	8013b5a <f_open+0x1ba>
					res = FR_NO_FILE;
 8013b52:	2304      	movs	r3, #4
 8013b54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013b58:	e00c      	b.n	8013b74 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013b5a:	79fb      	ldrb	r3, [r7, #7]
 8013b5c:	f003 0302 	and.w	r3, r3, #2
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d007      	beq.n	8013b74 <f_open+0x1d4>
 8013b64:	7ebb      	ldrb	r3, [r7, #26]
 8013b66:	f003 0301 	and.w	r3, r3, #1
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d002      	beq.n	8013b74 <f_open+0x1d4>
						res = FR_DENIED;
 8013b6e:	2307      	movs	r3, #7
 8013b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013b74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d128      	bne.n	8013bce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013b7c:	79fb      	ldrb	r3, [r7, #7]
 8013b7e:	f003 0308 	and.w	r3, r3, #8
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d003      	beq.n	8013b8e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013b86:	79fb      	ldrb	r3, [r7, #7]
 8013b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b8c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013b9c:	79fb      	ldrb	r3, [r7, #7]
 8013b9e:	f023 0301 	bic.w	r3, r3, #1
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	bf14      	ite	ne
 8013ba6:	2301      	movne	r3, #1
 8013ba8:	2300      	moveq	r3, #0
 8013baa:	b2db      	uxtb	r3, r3
 8013bac:	461a      	mov	r2, r3
 8013bae:	f107 0314 	add.w	r3, r7, #20
 8013bb2:	4611      	mov	r1, r2
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7fe fa97 	bl	80120e8 <inc_lock>
 8013bba:	4602      	mov	r2, r0
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	691b      	ldr	r3, [r3, #16]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d102      	bne.n	8013bce <f_open+0x22e>
 8013bc8:	2302      	movs	r3, #2
 8013bca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013bce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	f040 8095 	bne.w	8013d02 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bdc:	4611      	mov	r1, r2
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7ff f8bb 	bl	8012d5a <ld_clust>
 8013be4:	4602      	mov	r2, r0
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bec:	331c      	adds	r3, #28
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7fe f8e2 	bl	8011db8 <ld_dword>
 8013bf4:	4602      	mov	r2, r0
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013c00:	693a      	ldr	r2, [r7, #16]
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	88da      	ldrh	r2, [r3, #6]
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	79fa      	ldrb	r2, [r7, #7]
 8013c12:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2200      	movs	r2, #0
 8013c18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	2200      	movs	r2, #0
 8013c24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	3330      	adds	r3, #48	; 0x30
 8013c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c2e:	2100      	movs	r1, #0
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7fe f94c 	bl	8011ece <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013c36:	79fb      	ldrb	r3, [r7, #7]
 8013c38:	f003 0320 	and.w	r3, r3, #32
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d060      	beq.n	8013d02 <f_open+0x362>
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	68db      	ldr	r3, [r3, #12]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d05c      	beq.n	8013d02 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	68da      	ldr	r2, [r3, #12]
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	895b      	ldrh	r3, [r3, #10]
 8013c54:	025b      	lsls	r3, r3, #9
 8013c56:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	689b      	ldr	r3, [r3, #8]
 8013c5c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	68db      	ldr	r3, [r3, #12]
 8013c62:	657b      	str	r3, [r7, #84]	; 0x54
 8013c64:	e016      	b.n	8013c94 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fe fc29 	bl	80124c2 <get_fat>
 8013c70:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d802      	bhi.n	8013c7e <f_open+0x2de>
 8013c78:	2302      	movs	r3, #2
 8013c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c84:	d102      	bne.n	8013c8c <f_open+0x2ec>
 8013c86:	2301      	movs	r3, #1
 8013c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013c8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c90:	1ad3      	subs	r3, r2, r3
 8013c92:	657b      	str	r3, [r7, #84]	; 0x54
 8013c94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d103      	bne.n	8013ca4 <f_open+0x304>
 8013c9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d8e0      	bhi.n	8013c66 <f_open+0x2c6>
				}
				fp->clust = clst;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013ca8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d127      	bne.n	8013d02 <f_open+0x362>
 8013cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d022      	beq.n	8013d02 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7fe fbdf 	bl	8012484 <clust2sect>
 8013cc6:	6478      	str	r0, [r7, #68]	; 0x44
 8013cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d103      	bne.n	8013cd6 <f_open+0x336>
						res = FR_INT_ERR;
 8013cce:	2302      	movs	r3, #2
 8013cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013cd4:	e015      	b.n	8013d02 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cd8:	0a5a      	lsrs	r2, r3, #9
 8013cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cdc:	441a      	add	r2, r3
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	7858      	ldrb	r0, [r3, #1]
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	6a1a      	ldr	r2, [r3, #32]
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	f7fd ffeb 	bl	8011ccc <disk_read>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d002      	beq.n	8013d02 <f_open+0x362>
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013d02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d002      	beq.n	8013d10 <f_open+0x370>
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013d10:	693b      	ldr	r3, [r7, #16]
 8013d12:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8013d16:	4611      	mov	r1, r2
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7fe f94b 	bl	8011fb4 <unlock_fs>
 8013d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3760      	adds	r7, #96	; 0x60
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}

08013d2a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013d2a:	b580      	push	{r7, lr}
 8013d2c:	b08c      	sub	sp, #48	; 0x30
 8013d2e:	af00      	add	r7, sp, #0
 8013d30:	60f8      	str	r0, [r7, #12]
 8013d32:	60b9      	str	r1, [r7, #8]
 8013d34:	607a      	str	r2, [r7, #4]
 8013d36:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	2200      	movs	r2, #0
 8013d40:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	f107 0210 	add.w	r2, r7, #16
 8013d48:	4611      	mov	r1, r2
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7ff fd7c 	bl	8013848 <validate>
 8013d50:	4603      	mov	r3, r0
 8013d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d107      	bne.n	8013d6e <f_write+0x44>
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	7d5b      	ldrb	r3, [r3, #21]
 8013d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d009      	beq.n	8013d82 <f_write+0x58>
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013d74:	4611      	mov	r1, r2
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7fe f91c 	bl	8011fb4 <unlock_fs>
 8013d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d80:	e173      	b.n	801406a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	7d1b      	ldrb	r3, [r3, #20]
 8013d86:	f003 0302 	and.w	r3, r3, #2
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d106      	bne.n	8013d9c <f_write+0x72>
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	2107      	movs	r1, #7
 8013d92:	4618      	mov	r0, r3
 8013d94:	f7fe f90e 	bl	8011fb4 <unlock_fs>
 8013d98:	2307      	movs	r3, #7
 8013d9a:	e166      	b.n	801406a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	699a      	ldr	r2, [r3, #24]
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	441a      	add	r2, r3
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	699b      	ldr	r3, [r3, #24]
 8013da8:	429a      	cmp	r2, r3
 8013daa:	f080 814b 	bcs.w	8014044 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	699b      	ldr	r3, [r3, #24]
 8013db2:	43db      	mvns	r3, r3
 8013db4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013db6:	e145      	b.n	8014044 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	699b      	ldr	r3, [r3, #24]
 8013dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	f040 8101 	bne.w	8013fc8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	699b      	ldr	r3, [r3, #24]
 8013dca:	0a5b      	lsrs	r3, r3, #9
 8013dcc:	693a      	ldr	r2, [r7, #16]
 8013dce:	8952      	ldrh	r2, [r2, #10]
 8013dd0:	3a01      	subs	r2, #1
 8013dd2:	4013      	ands	r3, r2
 8013dd4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013dd6:	69bb      	ldr	r3, [r7, #24]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d14d      	bne.n	8013e78 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	699b      	ldr	r3, [r3, #24]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d10c      	bne.n	8013dfe <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	689b      	ldr	r3, [r3, #8]
 8013de8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d11a      	bne.n	8013e26 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2100      	movs	r1, #0
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7fe fd5d 	bl	80128b4 <create_chain>
 8013dfa:	62b8      	str	r0, [r7, #40]	; 0x28
 8013dfc:	e013      	b.n	8013e26 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d007      	beq.n	8013e16 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	699b      	ldr	r3, [r3, #24]
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	f7fe fde9 	bl	80129e4 <clmt_clust>
 8013e12:	62b8      	str	r0, [r7, #40]	; 0x28
 8013e14:	e007      	b.n	8013e26 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013e16:	68fa      	ldr	r2, [r7, #12]
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	69db      	ldr	r3, [r3, #28]
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	4610      	mov	r0, r2
 8013e20:	f7fe fd48 	bl	80128b4 <create_chain>
 8013e24:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f000 8110 	beq.w	801404e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e30:	2b01      	cmp	r3, #1
 8013e32:	d109      	bne.n	8013e48 <f_write+0x11e>
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	2202      	movs	r2, #2
 8013e38:	755a      	strb	r2, [r3, #21]
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	2102      	movs	r1, #2
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7fe f8b8 	bl	8011fb4 <unlock_fs>
 8013e44:	2302      	movs	r3, #2
 8013e46:	e110      	b.n	801406a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e4e:	d109      	bne.n	8013e64 <f_write+0x13a>
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2201      	movs	r2, #1
 8013e54:	755a      	strb	r2, [r3, #21]
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	2101      	movs	r1, #1
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7fe f8aa 	bl	8011fb4 <unlock_fs>
 8013e60:	2301      	movs	r3, #1
 8013e62:	e102      	b.n	801406a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e68:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	689b      	ldr	r3, [r3, #8]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d102      	bne.n	8013e78 <f_write+0x14e>
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e76:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	7d1b      	ldrb	r3, [r3, #20]
 8013e7c:	b25b      	sxtb	r3, r3
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	da1d      	bge.n	8013ebe <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	7858      	ldrb	r0, [r3, #1]
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	6a1a      	ldr	r2, [r3, #32]
 8013e90:	2301      	movs	r3, #1
 8013e92:	f7fd ff3b 	bl	8011d0c <disk_write>
 8013e96:	4603      	mov	r3, r0
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d009      	beq.n	8013eb0 <f_write+0x186>
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	755a      	strb	r2, [r3, #21]
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	2101      	movs	r1, #1
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7fe f884 	bl	8011fb4 <unlock_fs>
 8013eac:	2301      	movs	r3, #1
 8013eae:	e0dc      	b.n	801406a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	7d1b      	ldrb	r3, [r3, #20]
 8013eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013eb8:	b2da      	uxtb	r2, r3
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013ebe:	693a      	ldr	r2, [r7, #16]
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	69db      	ldr	r3, [r3, #28]
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	4610      	mov	r0, r2
 8013ec8:	f7fe fadc 	bl	8012484 <clust2sect>
 8013ecc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d109      	bne.n	8013ee8 <f_write+0x1be>
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	2202      	movs	r2, #2
 8013ed8:	755a      	strb	r2, [r3, #21]
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	2102      	movs	r1, #2
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7fe f868 	bl	8011fb4 <unlock_fs>
 8013ee4:	2302      	movs	r3, #2
 8013ee6:	e0c0      	b.n	801406a <f_write+0x340>
			sect += csect;
 8013ee8:	697a      	ldr	r2, [r7, #20]
 8013eea:	69bb      	ldr	r3, [r7, #24]
 8013eec:	4413      	add	r3, r2
 8013eee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	0a5b      	lsrs	r3, r3, #9
 8013ef4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013ef6:	6a3b      	ldr	r3, [r7, #32]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d041      	beq.n	8013f80 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013efc:	69ba      	ldr	r2, [r7, #24]
 8013efe:	6a3b      	ldr	r3, [r7, #32]
 8013f00:	4413      	add	r3, r2
 8013f02:	693a      	ldr	r2, [r7, #16]
 8013f04:	8952      	ldrh	r2, [r2, #10]
 8013f06:	4293      	cmp	r3, r2
 8013f08:	d905      	bls.n	8013f16 <f_write+0x1ec>
					cc = fs->csize - csect;
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	895b      	ldrh	r3, [r3, #10]
 8013f0e:	461a      	mov	r2, r3
 8013f10:	69bb      	ldr	r3, [r7, #24]
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	7858      	ldrb	r0, [r3, #1]
 8013f1a:	6a3b      	ldr	r3, [r7, #32]
 8013f1c:	697a      	ldr	r2, [r7, #20]
 8013f1e:	69f9      	ldr	r1, [r7, #28]
 8013f20:	f7fd fef4 	bl	8011d0c <disk_write>
 8013f24:	4603      	mov	r3, r0
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d009      	beq.n	8013f3e <f_write+0x214>
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	2201      	movs	r2, #1
 8013f2e:	755a      	strb	r2, [r3, #21]
 8013f30:	693b      	ldr	r3, [r7, #16]
 8013f32:	2101      	movs	r1, #1
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7fe f83d 	bl	8011fb4 <unlock_fs>
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e095      	b.n	801406a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6a1a      	ldr	r2, [r3, #32]
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	1ad3      	subs	r3, r2, r3
 8013f46:	6a3a      	ldr	r2, [r7, #32]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d915      	bls.n	8013f78 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	6a1a      	ldr	r2, [r3, #32]
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	1ad3      	subs	r3, r2, r3
 8013f5a:	025b      	lsls	r3, r3, #9
 8013f5c:	69fa      	ldr	r2, [r7, #28]
 8013f5e:	4413      	add	r3, r2
 8013f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f64:	4619      	mov	r1, r3
 8013f66:	f7fd ff91 	bl	8011e8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	7d1b      	ldrb	r3, [r3, #20]
 8013f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f72:	b2da      	uxtb	r2, r3
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013f78:	6a3b      	ldr	r3, [r7, #32]
 8013f7a:	025b      	lsls	r3, r3, #9
 8013f7c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013f7e:	e044      	b.n	801400a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	6a1b      	ldr	r3, [r3, #32]
 8013f84:	697a      	ldr	r2, [r7, #20]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d01b      	beq.n	8013fc2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	699a      	ldr	r2, [r3, #24]
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d215      	bcs.n	8013fc2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	7858      	ldrb	r0, [r3, #1]
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	697a      	ldr	r2, [r7, #20]
 8013fa4:	f7fd fe92 	bl	8011ccc <disk_read>
 8013fa8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d009      	beq.n	8013fc2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	2201      	movs	r2, #1
 8013fb2:	755a      	strb	r2, [r3, #21]
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	2101      	movs	r1, #1
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7fd fffb 	bl	8011fb4 <unlock_fs>
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	e053      	b.n	801406a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	697a      	ldr	r2, [r7, #20]
 8013fc6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	699b      	ldr	r3, [r3, #24]
 8013fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fd0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013fd4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d901      	bls.n	8013fe2 <f_write+0x2b8>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	699b      	ldr	r3, [r3, #24]
 8013fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ff0:	4413      	add	r3, r2
 8013ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ff4:	69f9      	ldr	r1, [r7, #28]
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f7fd ff48 	bl	8011e8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	7d1b      	ldrb	r3, [r3, #20]
 8014000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014004:	b2da      	uxtb	r2, r3
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801400a:	69fa      	ldr	r2, [r7, #28]
 801400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400e:	4413      	add	r3, r2
 8014010:	61fb      	str	r3, [r7, #28]
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	699a      	ldr	r2, [r3, #24]
 8014016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014018:	441a      	add	r2, r3
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	619a      	str	r2, [r3, #24]
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	68da      	ldr	r2, [r3, #12]
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	699b      	ldr	r3, [r3, #24]
 8014026:	429a      	cmp	r2, r3
 8014028:	bf38      	it	cc
 801402a:	461a      	movcc	r2, r3
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	60da      	str	r2, [r3, #12]
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	681a      	ldr	r2, [r3, #0]
 8014034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014036:	441a      	add	r2, r3
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	601a      	str	r2, [r3, #0]
 801403c:	687a      	ldr	r2, [r7, #4]
 801403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014040:	1ad3      	subs	r3, r2, r3
 8014042:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	f47f aeb6 	bne.w	8013db8 <f_write+0x8e>
 801404c:	e000      	b.n	8014050 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801404e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	7d1b      	ldrb	r3, [r3, #20]
 8014054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014058:	b2da      	uxtb	r2, r3
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	2100      	movs	r1, #0
 8014062:	4618      	mov	r0, r3
 8014064:	f7fd ffa6 	bl	8011fb4 <unlock_fs>
 8014068:	2300      	movs	r3, #0
}
 801406a:	4618      	mov	r0, r3
 801406c:	3730      	adds	r7, #48	; 0x30
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}

08014072 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014072:	b580      	push	{r7, lr}
 8014074:	b086      	sub	sp, #24
 8014076:	af00      	add	r7, sp, #0
 8014078:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f107 0208 	add.w	r2, r7, #8
 8014080:	4611      	mov	r1, r2
 8014082:	4618      	mov	r0, r3
 8014084:	f7ff fbe0 	bl	8013848 <validate>
 8014088:	4603      	mov	r3, r0
 801408a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801408c:	7dfb      	ldrb	r3, [r7, #23]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d16d      	bne.n	801416e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	7d1b      	ldrb	r3, [r3, #20]
 8014096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801409a:	2b00      	cmp	r3, #0
 801409c:	d067      	beq.n	801416e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	7d1b      	ldrb	r3, [r3, #20]
 80140a2:	b25b      	sxtb	r3, r3
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	da1a      	bge.n	80140de <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	7858      	ldrb	r0, [r3, #1]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	6a1a      	ldr	r2, [r3, #32]
 80140b6:	2301      	movs	r3, #1
 80140b8:	f7fd fe28 	bl	8011d0c <disk_write>
 80140bc:	4603      	mov	r3, r0
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d006      	beq.n	80140d0 <f_sync+0x5e>
 80140c2:	68bb      	ldr	r3, [r7, #8]
 80140c4:	2101      	movs	r1, #1
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7fd ff74 	bl	8011fb4 <unlock_fs>
 80140cc:	2301      	movs	r3, #1
 80140ce:	e055      	b.n	801417c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	7d1b      	ldrb	r3, [r3, #20]
 80140d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140d8:	b2da      	uxtb	r2, r3
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80140de:	f7fb fc15 	bl	800f90c <get_fattime>
 80140e2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80140e4:	68ba      	ldr	r2, [r7, #8]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ea:	4619      	mov	r1, r3
 80140ec:	4610      	mov	r0, r2
 80140ee:	f7fe f92d 	bl	801234c <move_window>
 80140f2:	4603      	mov	r3, r0
 80140f4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80140f6:	7dfb      	ldrb	r3, [r7, #23]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d138      	bne.n	801416e <f_sync+0xfc>
					dir = fp->dir_ptr;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014100:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	330b      	adds	r3, #11
 8014106:	781a      	ldrb	r2, [r3, #0]
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	330b      	adds	r3, #11
 801410c:	f042 0220 	orr.w	r2, r2, #32
 8014110:	b2d2      	uxtb	r2, r2
 8014112:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6818      	ldr	r0, [r3, #0]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	689b      	ldr	r3, [r3, #8]
 801411c:	461a      	mov	r2, r3
 801411e:	68f9      	ldr	r1, [r7, #12]
 8014120:	f7fe fe3a 	bl	8012d98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	f103 021c 	add.w	r2, r3, #28
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	68db      	ldr	r3, [r3, #12]
 801412e:	4619      	mov	r1, r3
 8014130:	4610      	mov	r0, r2
 8014132:	f7fd fe7f 	bl	8011e34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	3316      	adds	r3, #22
 801413a:	6939      	ldr	r1, [r7, #16]
 801413c:	4618      	mov	r0, r3
 801413e:	f7fd fe79 	bl	8011e34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	3312      	adds	r3, #18
 8014146:	2100      	movs	r1, #0
 8014148:	4618      	mov	r0, r3
 801414a:	f7fd fe58 	bl	8011dfe <st_word>
					fs->wflag = 1;
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	2201      	movs	r2, #1
 8014152:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014154:	68bb      	ldr	r3, [r7, #8]
 8014156:	4618      	mov	r0, r3
 8014158:	f7fe f926 	bl	80123a8 <sync_fs>
 801415c:	4603      	mov	r3, r0
 801415e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	7d1b      	ldrb	r3, [r3, #20]
 8014164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014168:	b2da      	uxtb	r2, r3
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	7dfa      	ldrb	r2, [r7, #23]
 8014172:	4611      	mov	r1, r2
 8014174:	4618      	mov	r0, r3
 8014176:	f7fd ff1d 	bl	8011fb4 <unlock_fs>
 801417a:	7dfb      	ldrb	r3, [r7, #23]
}
 801417c:	4618      	mov	r0, r3
 801417e:	3718      	adds	r7, #24
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b084      	sub	sp, #16
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f7ff ff70 	bl	8014072 <f_sync>
 8014192:	4603      	mov	r3, r0
 8014194:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014196:	7bfb      	ldrb	r3, [r7, #15]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d11d      	bne.n	80141d8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f107 0208 	add.w	r2, r7, #8
 80141a2:	4611      	mov	r1, r2
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7ff fb4f 	bl	8013848 <validate>
 80141aa:	4603      	mov	r3, r0
 80141ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80141ae:	7bfb      	ldrb	r3, [r7, #15]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d111      	bne.n	80141d8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	691b      	ldr	r3, [r3, #16]
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fe f823 	bl	8012204 <dec_lock>
 80141be:	4603      	mov	r3, r0
 80141c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80141c2:	7bfb      	ldrb	r3, [r7, #15]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d102      	bne.n	80141ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2200      	movs	r2, #0
 80141cc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	2100      	movs	r1, #0
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7fd feee 	bl	8011fb4 <unlock_fs>
#endif
		}
	}
	return res;
 80141d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3710      	adds	r7, #16
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}

080141e2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80141e2:	b580      	push	{r7, lr}
 80141e4:	b090      	sub	sp, #64	; 0x40
 80141e6:	af00      	add	r7, sp, #0
 80141e8:	6078      	str	r0, [r7, #4]
 80141ea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f107 0208 	add.w	r2, r7, #8
 80141f2:	4611      	mov	r1, r2
 80141f4:	4618      	mov	r0, r3
 80141f6:	f7ff fb27 	bl	8013848 <validate>
 80141fa:	4603      	mov	r3, r0
 80141fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014200:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014204:	2b00      	cmp	r3, #0
 8014206:	d103      	bne.n	8014210 <f_lseek+0x2e>
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	7d5b      	ldrb	r3, [r3, #21]
 801420c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014210:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014214:	2b00      	cmp	r3, #0
 8014216:	d009      	beq.n	801422c <f_lseek+0x4a>
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801421e:	4611      	mov	r1, r2
 8014220:	4618      	mov	r0, r3
 8014222:	f7fd fec7 	bl	8011fb4 <unlock_fs>
 8014226:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801422a:	e229      	b.n	8014680 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014230:	2b00      	cmp	r3, #0
 8014232:	f000 80ea 	beq.w	801440a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801423c:	d164      	bne.n	8014308 <f_lseek+0x126>
			tbl = fp->cltbl;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014242:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014246:	1d1a      	adds	r2, r3, #4
 8014248:	627a      	str	r2, [r7, #36]	; 0x24
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	617b      	str	r3, [r7, #20]
 801424e:	2302      	movs	r3, #2
 8014250:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	689b      	ldr	r3, [r3, #8]
 8014256:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425a:	2b00      	cmp	r3, #0
 801425c:	d044      	beq.n	80142e8 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014260:	613b      	str	r3, [r7, #16]
 8014262:	2300      	movs	r3, #0
 8014264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014268:	3302      	adds	r3, #2
 801426a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426e:	60fb      	str	r3, [r7, #12]
 8014270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014272:	3301      	adds	r3, #1
 8014274:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801427a:	4618      	mov	r0, r3
 801427c:	f7fe f921 	bl	80124c2 <get_fat>
 8014280:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014284:	2b01      	cmp	r3, #1
 8014286:	d809      	bhi.n	801429c <f_lseek+0xba>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2202      	movs	r2, #2
 801428c:	755a      	strb	r2, [r3, #21]
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	2102      	movs	r1, #2
 8014292:	4618      	mov	r0, r3
 8014294:	f7fd fe8e 	bl	8011fb4 <unlock_fs>
 8014298:	2302      	movs	r3, #2
 801429a:	e1f1      	b.n	8014680 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142a2:	d109      	bne.n	80142b8 <f_lseek+0xd6>
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2201      	movs	r2, #1
 80142a8:	755a      	strb	r2, [r3, #21]
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	2101      	movs	r1, #1
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7fd fe80 	bl	8011fb4 <unlock_fs>
 80142b4:	2301      	movs	r3, #1
 80142b6:	e1e3      	b.n	8014680 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	3301      	adds	r3, #1
 80142bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142be:	429a      	cmp	r2, r3
 80142c0:	d0d4      	beq.n	801426c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80142c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d809      	bhi.n	80142de <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80142ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142cc:	1d1a      	adds	r2, r3, #4
 80142ce:	627a      	str	r2, [r7, #36]	; 0x24
 80142d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142d2:	601a      	str	r2, [r3, #0]
 80142d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d6:	1d1a      	adds	r2, r3, #4
 80142d8:	627a      	str	r2, [r7, #36]	; 0x24
 80142da:	693a      	ldr	r2, [r7, #16]
 80142dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	699b      	ldr	r3, [r3, #24]
 80142e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142e4:	429a      	cmp	r2, r3
 80142e6:	d3ba      	bcc.n	801425e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142ee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80142f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d803      	bhi.n	8014300 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80142f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fa:	2200      	movs	r2, #0
 80142fc:	601a      	str	r2, [r3, #0]
 80142fe:	e1b6      	b.n	801466e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014300:	2311      	movs	r3, #17
 8014302:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014306:	e1b2      	b.n	801466e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	68db      	ldr	r3, [r3, #12]
 801430c:	683a      	ldr	r2, [r7, #0]
 801430e:	429a      	cmp	r2, r3
 8014310:	d902      	bls.n	8014318 <f_lseek+0x136>
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	68db      	ldr	r3, [r3, #12]
 8014316:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	683a      	ldr	r2, [r7, #0]
 801431c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	f000 81a4 	beq.w	801466e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	3b01      	subs	r3, #1
 801432a:	4619      	mov	r1, r3
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f7fe fb59 	bl	80129e4 <clmt_clust>
 8014332:	4602      	mov	r2, r0
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014338:	68ba      	ldr	r2, [r7, #8]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	69db      	ldr	r3, [r3, #28]
 801433e:	4619      	mov	r1, r3
 8014340:	4610      	mov	r0, r2
 8014342:	f7fe f89f 	bl	8012484 <clust2sect>
 8014346:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014348:	69bb      	ldr	r3, [r7, #24]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d109      	bne.n	8014362 <f_lseek+0x180>
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2202      	movs	r2, #2
 8014352:	755a      	strb	r2, [r3, #21]
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	2102      	movs	r1, #2
 8014358:	4618      	mov	r0, r3
 801435a:	f7fd fe2b 	bl	8011fb4 <unlock_fs>
 801435e:	2302      	movs	r3, #2
 8014360:	e18e      	b.n	8014680 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014362:	683b      	ldr	r3, [r7, #0]
 8014364:	3b01      	subs	r3, #1
 8014366:	0a5b      	lsrs	r3, r3, #9
 8014368:	68ba      	ldr	r2, [r7, #8]
 801436a:	8952      	ldrh	r2, [r2, #10]
 801436c:	3a01      	subs	r2, #1
 801436e:	4013      	ands	r3, r2
 8014370:	69ba      	ldr	r2, [r7, #24]
 8014372:	4413      	add	r3, r2
 8014374:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	699b      	ldr	r3, [r3, #24]
 801437a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801437e:	2b00      	cmp	r3, #0
 8014380:	f000 8175 	beq.w	801466e <f_lseek+0x48c>
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	6a1b      	ldr	r3, [r3, #32]
 8014388:	69ba      	ldr	r2, [r7, #24]
 801438a:	429a      	cmp	r2, r3
 801438c:	f000 816f 	beq.w	801466e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	7d1b      	ldrb	r3, [r3, #20]
 8014394:	b25b      	sxtb	r3, r3
 8014396:	2b00      	cmp	r3, #0
 8014398:	da1d      	bge.n	80143d6 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	7858      	ldrb	r0, [r3, #1]
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6a1a      	ldr	r2, [r3, #32]
 80143a8:	2301      	movs	r3, #1
 80143aa:	f7fd fcaf 	bl	8011d0c <disk_write>
 80143ae:	4603      	mov	r3, r0
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d009      	beq.n	80143c8 <f_lseek+0x1e6>
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2201      	movs	r2, #1
 80143b8:	755a      	strb	r2, [r3, #21]
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	2101      	movs	r1, #1
 80143be:	4618      	mov	r0, r3
 80143c0:	f7fd fdf8 	bl	8011fb4 <unlock_fs>
 80143c4:	2301      	movs	r3, #1
 80143c6:	e15b      	b.n	8014680 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	7d1b      	ldrb	r3, [r3, #20]
 80143cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143d0:	b2da      	uxtb	r2, r3
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	7858      	ldrb	r0, [r3, #1]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143e0:	2301      	movs	r3, #1
 80143e2:	69ba      	ldr	r2, [r7, #24]
 80143e4:	f7fd fc72 	bl	8011ccc <disk_read>
 80143e8:	4603      	mov	r3, r0
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d009      	beq.n	8014402 <f_lseek+0x220>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	2201      	movs	r2, #1
 80143f2:	755a      	strb	r2, [r3, #21]
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	2101      	movs	r1, #1
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7fd fddb 	bl	8011fb4 <unlock_fs>
 80143fe:	2301      	movs	r3, #1
 8014400:	e13e      	b.n	8014680 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	69ba      	ldr	r2, [r7, #24]
 8014406:	621a      	str	r2, [r3, #32]
 8014408:	e131      	b.n	801466e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	68db      	ldr	r3, [r3, #12]
 801440e:	683a      	ldr	r2, [r7, #0]
 8014410:	429a      	cmp	r2, r3
 8014412:	d908      	bls.n	8014426 <f_lseek+0x244>
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	7d1b      	ldrb	r3, [r3, #20]
 8014418:	f003 0302 	and.w	r3, r3, #2
 801441c:	2b00      	cmp	r3, #0
 801441e:	d102      	bne.n	8014426 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	68db      	ldr	r3, [r3, #12]
 8014424:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	699b      	ldr	r3, [r3, #24]
 801442a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801442c:	2300      	movs	r3, #0
 801442e:	637b      	str	r3, [r7, #52]	; 0x34
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014434:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	2b00      	cmp	r3, #0
 801443a:	f000 80c0 	beq.w	80145be <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	895b      	ldrh	r3, [r3, #10]
 8014442:	025b      	lsls	r3, r3, #9
 8014444:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014446:	6a3b      	ldr	r3, [r7, #32]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d01b      	beq.n	8014484 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	1e5a      	subs	r2, r3, #1
 8014450:	69fb      	ldr	r3, [r7, #28]
 8014452:	fbb2 f2f3 	udiv	r2, r2, r3
 8014456:	6a3b      	ldr	r3, [r7, #32]
 8014458:	1e59      	subs	r1, r3, #1
 801445a:	69fb      	ldr	r3, [r7, #28]
 801445c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014460:	429a      	cmp	r2, r3
 8014462:	d30f      	bcc.n	8014484 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014464:	6a3b      	ldr	r3, [r7, #32]
 8014466:	1e5a      	subs	r2, r3, #1
 8014468:	69fb      	ldr	r3, [r7, #28]
 801446a:	425b      	negs	r3, r3
 801446c:	401a      	ands	r2, r3
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	699b      	ldr	r3, [r3, #24]
 8014476:	683a      	ldr	r2, [r7, #0]
 8014478:	1ad3      	subs	r3, r2, r3
 801447a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	69db      	ldr	r3, [r3, #28]
 8014480:	63bb      	str	r3, [r7, #56]	; 0x38
 8014482:	e02c      	b.n	80144de <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	689b      	ldr	r3, [r3, #8]
 8014488:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801448c:	2b00      	cmp	r3, #0
 801448e:	d123      	bne.n	80144d8 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2100      	movs	r1, #0
 8014494:	4618      	mov	r0, r3
 8014496:	f7fe fa0d 	bl	80128b4 <create_chain>
 801449a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801449e:	2b01      	cmp	r3, #1
 80144a0:	d109      	bne.n	80144b6 <f_lseek+0x2d4>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2202      	movs	r2, #2
 80144a6:	755a      	strb	r2, [r3, #21]
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	2102      	movs	r1, #2
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fd fd81 	bl	8011fb4 <unlock_fs>
 80144b2:	2302      	movs	r3, #2
 80144b4:	e0e4      	b.n	8014680 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80144b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144bc:	d109      	bne.n	80144d2 <f_lseek+0x2f0>
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2201      	movs	r2, #1
 80144c2:	755a      	strb	r2, [r3, #21]
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	2101      	movs	r1, #1
 80144c8:	4618      	mov	r0, r3
 80144ca:	f7fd fd73 	bl	8011fb4 <unlock_fs>
 80144ce:	2301      	movs	r3, #1
 80144d0:	e0d6      	b.n	8014680 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144d6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144dc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80144de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d06c      	beq.n	80145be <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80144e4:	e044      	b.n	8014570 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80144e6:	683a      	ldr	r2, [r7, #0]
 80144e8:	69fb      	ldr	r3, [r7, #28]
 80144ea:	1ad3      	subs	r3, r2, r3
 80144ec:	603b      	str	r3, [r7, #0]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	699a      	ldr	r2, [r3, #24]
 80144f2:	69fb      	ldr	r3, [r7, #28]
 80144f4:	441a      	add	r2, r3
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	7d1b      	ldrb	r3, [r3, #20]
 80144fe:	f003 0302 	and.w	r3, r3, #2
 8014502:	2b00      	cmp	r3, #0
 8014504:	d00b      	beq.n	801451e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801450a:	4618      	mov	r0, r3
 801450c:	f7fe f9d2 	bl	80128b4 <create_chain>
 8014510:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014514:	2b00      	cmp	r3, #0
 8014516:	d108      	bne.n	801452a <f_lseek+0x348>
							ofs = 0; break;
 8014518:	2300      	movs	r3, #0
 801451a:	603b      	str	r3, [r7, #0]
 801451c:	e02c      	b.n	8014578 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014522:	4618      	mov	r0, r3
 8014524:	f7fd ffcd 	bl	80124c2 <get_fat>
 8014528:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014530:	d109      	bne.n	8014546 <f_lseek+0x364>
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2201      	movs	r2, #1
 8014536:	755a      	strb	r2, [r3, #21]
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	2101      	movs	r1, #1
 801453c:	4618      	mov	r0, r3
 801453e:	f7fd fd39 	bl	8011fb4 <unlock_fs>
 8014542:	2301      	movs	r3, #1
 8014544:	e09c      	b.n	8014680 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014548:	2b01      	cmp	r3, #1
 801454a:	d904      	bls.n	8014556 <f_lseek+0x374>
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	699b      	ldr	r3, [r3, #24]
 8014550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014552:	429a      	cmp	r2, r3
 8014554:	d309      	bcc.n	801456a <f_lseek+0x388>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2202      	movs	r2, #2
 801455a:	755a      	strb	r2, [r3, #21]
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	2102      	movs	r1, #2
 8014560:	4618      	mov	r0, r3
 8014562:	f7fd fd27 	bl	8011fb4 <unlock_fs>
 8014566:	2302      	movs	r3, #2
 8014568:	e08a      	b.n	8014680 <f_lseek+0x49e>
					fp->clust = clst;
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801456e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014570:	683a      	ldr	r2, [r7, #0]
 8014572:	69fb      	ldr	r3, [r7, #28]
 8014574:	429a      	cmp	r2, r3
 8014576:	d8b6      	bhi.n	80144e6 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	699a      	ldr	r2, [r3, #24]
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	441a      	add	r2, r3
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801458a:	2b00      	cmp	r3, #0
 801458c:	d017      	beq.n	80145be <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014592:	4618      	mov	r0, r3
 8014594:	f7fd ff76 	bl	8012484 <clust2sect>
 8014598:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801459c:	2b00      	cmp	r3, #0
 801459e:	d109      	bne.n	80145b4 <f_lseek+0x3d2>
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2202      	movs	r2, #2
 80145a4:	755a      	strb	r2, [r3, #21]
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	2102      	movs	r1, #2
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7fd fd02 	bl	8011fb4 <unlock_fs>
 80145b0:	2302      	movs	r3, #2
 80145b2:	e065      	b.n	8014680 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	0a5b      	lsrs	r3, r3, #9
 80145b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145ba:	4413      	add	r3, r2
 80145bc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	699a      	ldr	r2, [r3, #24]
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	68db      	ldr	r3, [r3, #12]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d90a      	bls.n	80145e0 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	699a      	ldr	r2, [r3, #24]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	7d1b      	ldrb	r3, [r3, #20]
 80145d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145da:	b2da      	uxtb	r2, r3
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	699b      	ldr	r3, [r3, #24]
 80145e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d040      	beq.n	801466e <f_lseek+0x48c>
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6a1b      	ldr	r3, [r3, #32]
 80145f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d03b      	beq.n	801466e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	7d1b      	ldrb	r3, [r3, #20]
 80145fa:	b25b      	sxtb	r3, r3
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	da1d      	bge.n	801463c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	7858      	ldrb	r0, [r3, #1]
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6a1a      	ldr	r2, [r3, #32]
 801460e:	2301      	movs	r3, #1
 8014610:	f7fd fb7c 	bl	8011d0c <disk_write>
 8014614:	4603      	mov	r3, r0
 8014616:	2b00      	cmp	r3, #0
 8014618:	d009      	beq.n	801462e <f_lseek+0x44c>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2201      	movs	r2, #1
 801461e:	755a      	strb	r2, [r3, #21]
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	2101      	movs	r1, #1
 8014624:	4618      	mov	r0, r3
 8014626:	f7fd fcc5 	bl	8011fb4 <unlock_fs>
 801462a:	2301      	movs	r3, #1
 801462c:	e028      	b.n	8014680 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	7d1b      	ldrb	r3, [r3, #20]
 8014632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014636:	b2da      	uxtb	r2, r3
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	7858      	ldrb	r0, [r3, #1]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014646:	2301      	movs	r3, #1
 8014648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801464a:	f7fd fb3f 	bl	8011ccc <disk_read>
 801464e:	4603      	mov	r3, r0
 8014650:	2b00      	cmp	r3, #0
 8014652:	d009      	beq.n	8014668 <f_lseek+0x486>
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2201      	movs	r2, #1
 8014658:	755a      	strb	r2, [r3, #21]
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	2101      	movs	r1, #1
 801465e:	4618      	mov	r0, r3
 8014660:	f7fd fca8 	bl	8011fb4 <unlock_fs>
 8014664:	2301      	movs	r3, #1
 8014666:	e00b      	b.n	8014680 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801466c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014674:	4611      	mov	r1, r2
 8014676:	4618      	mov	r0, r3
 8014678:	f7fd fc9c 	bl	8011fb4 <unlock_fs>
 801467c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014680:	4618      	mov	r0, r3
 8014682:	3740      	adds	r7, #64	; 0x40
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}

08014688 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b086      	sub	sp, #24
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d101      	bne.n	801469c <f_opendir+0x14>
 8014698:	2309      	movs	r3, #9
 801469a:	e06a      	b.n	8014772 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80146a0:	f107 010c 	add.w	r1, r7, #12
 80146a4:	463b      	mov	r3, r7
 80146a6:	2200      	movs	r2, #0
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7fe fe79 	bl	80133a0 <find_volume>
 80146ae:	4603      	mov	r3, r0
 80146b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80146b2:	7dfb      	ldrb	r3, [r7, #23]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d14f      	bne.n	8014758 <f_opendir+0xd0>
		obj->fs = fs;
 80146b8:	68fa      	ldr	r2, [r7, #12]
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	4619      	mov	r1, r3
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f7fe fd60 	bl	8013188 <follow_path>
 80146c8:	4603      	mov	r3, r0
 80146ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80146cc:	7dfb      	ldrb	r3, [r7, #23]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d13d      	bne.n	801474e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80146d8:	b25b      	sxtb	r3, r3
 80146da:	2b00      	cmp	r3, #0
 80146dc:	db12      	blt.n	8014704 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	799b      	ldrb	r3, [r3, #6]
 80146e2:	f003 0310 	and.w	r3, r3, #16
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d00a      	beq.n	8014700 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80146ea:	68fa      	ldr	r2, [r7, #12]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6a1b      	ldr	r3, [r3, #32]
 80146f0:	4619      	mov	r1, r3
 80146f2:	4610      	mov	r0, r2
 80146f4:	f7fe fb31 	bl	8012d5a <ld_clust>
 80146f8:	4602      	mov	r2, r0
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	609a      	str	r2, [r3, #8]
 80146fe:	e001      	b.n	8014704 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014700:	2305      	movs	r3, #5
 8014702:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8014704:	7dfb      	ldrb	r3, [r7, #23]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d121      	bne.n	801474e <f_opendir+0xc6>
				obj->id = fs->id;
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	88da      	ldrh	r2, [r3, #6]
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014712:	2100      	movs	r1, #0
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f7fe f999 	bl	8012a4c <dir_sdi>
 801471a:	4603      	mov	r3, r0
 801471c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801471e:	7dfb      	ldrb	r3, [r7, #23]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d114      	bne.n	801474e <f_opendir+0xc6>
					if (obj->sclust) {
 8014724:	693b      	ldr	r3, [r7, #16]
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d00d      	beq.n	8014748 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801472c:	2100      	movs	r1, #0
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f7fd fcda 	bl	80120e8 <inc_lock>
 8014734:	4602      	mov	r2, r0
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	691b      	ldr	r3, [r3, #16]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d105      	bne.n	801474e <f_opendir+0xc6>
 8014742:	2312      	movs	r3, #18
 8014744:	75fb      	strb	r3, [r7, #23]
 8014746:	e002      	b.n	801474e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	2200      	movs	r2, #0
 801474c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801474e:	7dfb      	ldrb	r3, [r7, #23]
 8014750:	2b04      	cmp	r3, #4
 8014752:	d101      	bne.n	8014758 <f_opendir+0xd0>
 8014754:	2305      	movs	r3, #5
 8014756:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014758:	7dfb      	ldrb	r3, [r7, #23]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d002      	beq.n	8014764 <f_opendir+0xdc>
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	2200      	movs	r2, #0
 8014762:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	7dfa      	ldrb	r2, [r7, #23]
 8014768:	4611      	mov	r1, r2
 801476a:	4618      	mov	r0, r3
 801476c:	f7fd fc22 	bl	8011fb4 <unlock_fs>
 8014770:	7dfb      	ldrb	r3, [r7, #23]
}
 8014772:	4618      	mov	r0, r3
 8014774:	3718      	adds	r7, #24
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}

0801477a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801477a:	b580      	push	{r7, lr}
 801477c:	b084      	sub	sp, #16
 801477e:	af00      	add	r7, sp, #0
 8014780:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	f107 0208 	add.w	r2, r7, #8
 8014788:	4611      	mov	r1, r2
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff f85c 	bl	8013848 <validate>
 8014790:	4603      	mov	r3, r0
 8014792:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014794:	7bfb      	ldrb	r3, [r7, #15]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d115      	bne.n	80147c6 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	691b      	ldr	r3, [r3, #16]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d006      	beq.n	80147b0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	691b      	ldr	r3, [r3, #16]
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7fd fd2c 	bl	8012204 <dec_lock>
 80147ac:	4603      	mov	r3, r0
 80147ae:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80147b0:	7bfb      	ldrb	r3, [r7, #15]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d102      	bne.n	80147bc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2200      	movs	r2, #0
 80147ba:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	2100      	movs	r1, #0
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7fd fbf7 	bl	8011fb4 <unlock_fs>
#endif
	}
	return res;
 80147c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	3710      	adds	r7, #16
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}

080147d0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b084      	sub	sp, #16
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	f107 0208 	add.w	r2, r7, #8
 80147e0:	4611      	mov	r1, r2
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7ff f830 	bl	8013848 <validate>
 80147e8:	4603      	mov	r3, r0
 80147ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80147ec:	7bfb      	ldrb	r3, [r7, #15]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d126      	bne.n	8014840 <f_readdir+0x70>
		if (!fno) {
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d106      	bne.n	8014806 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80147f8:	2100      	movs	r1, #0
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f7fe f926 	bl	8012a4c <dir_sdi>
 8014800:	4603      	mov	r3, r0
 8014802:	73fb      	strb	r3, [r7, #15]
 8014804:	e01c      	b.n	8014840 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014806:	2100      	movs	r1, #0
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f7fe fae5 	bl	8012dd8 <dir_read>
 801480e:	4603      	mov	r3, r0
 8014810:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014812:	7bfb      	ldrb	r3, [r7, #15]
 8014814:	2b04      	cmp	r3, #4
 8014816:	d101      	bne.n	801481c <f_readdir+0x4c>
 8014818:	2300      	movs	r3, #0
 801481a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801481c:	7bfb      	ldrb	r3, [r7, #15]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d10e      	bne.n	8014840 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014822:	6839      	ldr	r1, [r7, #0]
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f7fe fbbb 	bl	8012fa0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801482a:	2100      	movs	r1, #0
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f7fe f988 	bl	8012b42 <dir_next>
 8014832:	4603      	mov	r3, r0
 8014834:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014836:	7bfb      	ldrb	r3, [r7, #15]
 8014838:	2b04      	cmp	r3, #4
 801483a:	d101      	bne.n	8014840 <f_readdir+0x70>
 801483c:	2300      	movs	r3, #0
 801483e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	7bfa      	ldrb	r2, [r7, #15]
 8014844:	4611      	mov	r1, r2
 8014846:	4618      	mov	r0, r3
 8014848:	f7fd fbb4 	bl	8011fb4 <unlock_fs>
 801484c:	7bfb      	ldrb	r3, [r7, #15]
}
 801484e:	4618      	mov	r0, r3
 8014850:	3710      	adds	r7, #16
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}
	...

08014858 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014858:	b480      	push	{r7}
 801485a:	b087      	sub	sp, #28
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	4613      	mov	r3, r2
 8014864:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014866:	2301      	movs	r3, #1
 8014868:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801486a:	2300      	movs	r3, #0
 801486c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801486e:	4b1f      	ldr	r3, [pc, #124]	; (80148ec <FATFS_LinkDriverEx+0x94>)
 8014870:	7a5b      	ldrb	r3, [r3, #9]
 8014872:	b2db      	uxtb	r3, r3
 8014874:	2b00      	cmp	r3, #0
 8014876:	d131      	bne.n	80148dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014878:	4b1c      	ldr	r3, [pc, #112]	; (80148ec <FATFS_LinkDriverEx+0x94>)
 801487a:	7a5b      	ldrb	r3, [r3, #9]
 801487c:	b2db      	uxtb	r3, r3
 801487e:	461a      	mov	r2, r3
 8014880:	4b1a      	ldr	r3, [pc, #104]	; (80148ec <FATFS_LinkDriverEx+0x94>)
 8014882:	2100      	movs	r1, #0
 8014884:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014886:	4b19      	ldr	r3, [pc, #100]	; (80148ec <FATFS_LinkDriverEx+0x94>)
 8014888:	7a5b      	ldrb	r3, [r3, #9]
 801488a:	b2db      	uxtb	r3, r3
 801488c:	4a17      	ldr	r2, [pc, #92]	; (80148ec <FATFS_LinkDriverEx+0x94>)
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	4413      	add	r3, r2
 8014892:	68fa      	ldr	r2, [r7, #12]
 8014894:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014896:	4b15      	ldr	r3, [pc, #84]	; (80148ec <FATFS_LinkDriverEx+0x94>)
 8014898:	7a5b      	ldrb	r3, [r3, #9]
 801489a:	b2db      	uxtb	r3, r3
 801489c:	461a      	mov	r2, r3
 801489e:	4b13      	ldr	r3, [pc, #76]	; (80148ec <FATFS_LinkDriverEx+0x94>)
 80148a0:	4413      	add	r3, r2
 80148a2:	79fa      	ldrb	r2, [r7, #7]
 80148a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80148a6:	4b11      	ldr	r3, [pc, #68]	; (80148ec <FATFS_LinkDriverEx+0x94>)
 80148a8:	7a5b      	ldrb	r3, [r3, #9]
 80148aa:	b2db      	uxtb	r3, r3
 80148ac:	1c5a      	adds	r2, r3, #1
 80148ae:	b2d1      	uxtb	r1, r2
 80148b0:	4a0e      	ldr	r2, [pc, #56]	; (80148ec <FATFS_LinkDriverEx+0x94>)
 80148b2:	7251      	strb	r1, [r2, #9]
 80148b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80148b6:	7dbb      	ldrb	r3, [r7, #22]
 80148b8:	3330      	adds	r3, #48	; 0x30
 80148ba:	b2da      	uxtb	r2, r3
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	3301      	adds	r3, #1
 80148c4:	223a      	movs	r2, #58	; 0x3a
 80148c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	3302      	adds	r3, #2
 80148cc:	222f      	movs	r2, #47	; 0x2f
 80148ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	3303      	adds	r3, #3
 80148d4:	2200      	movs	r2, #0
 80148d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148d8:	2300      	movs	r3, #0
 80148da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80148de:	4618      	mov	r0, r3
 80148e0:	371c      	adds	r7, #28
 80148e2:	46bd      	mov	sp, r7
 80148e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e8:	4770      	bx	lr
 80148ea:	bf00      	nop
 80148ec:	20000804 	.word	0x20000804

080148f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b082      	sub	sp, #8
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80148fa:	2200      	movs	r2, #0
 80148fc:	6839      	ldr	r1, [r7, #0]
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f7ff ffaa 	bl	8014858 <FATFS_LinkDriverEx>
 8014904:	4603      	mov	r3, r0
}
 8014906:	4618      	mov	r0, r3
 8014908:	3708      	adds	r7, #8
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}

0801490e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801490e:	b580      	push	{r7, lr}
 8014910:	b084      	sub	sp, #16
 8014912:	af00      	add	r7, sp, #0
 8014914:	4603      	mov	r3, r0
 8014916:	6039      	str	r1, [r7, #0]
 8014918:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801491a:	2200      	movs	r2, #0
 801491c:	2101      	movs	r1, #1
 801491e:	2001      	movs	r0, #1
 8014920:	f000 f9e6 	bl	8014cf0 <osSemaphoreNew>
 8014924:	4602      	mov	r2, r0
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	2b00      	cmp	r3, #0
 8014930:	bf14      	ite	ne
 8014932:	2301      	movne	r3, #1
 8014934:	2300      	moveq	r3, #0
 8014936:	b2db      	uxtb	r3, r3
 8014938:	60fb      	str	r3, [r7, #12]

    return ret;
 801493a:	68fb      	ldr	r3, [r7, #12]
}
 801493c:	4618      	mov	r0, r3
 801493e:	3710      	adds	r7, #16
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}

08014944 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b082      	sub	sp, #8
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f000 faef 	bl	8014f30 <osSemaphoreDelete>
#endif
    return 1;
 8014952:	2301      	movs	r3, #1
}
 8014954:	4618      	mov	r0, r3
 8014956:	3708      	adds	r7, #8
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}

0801495c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014964:	2300      	movs	r3, #0
 8014966:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8014968:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f000 fa49 	bl	8014e04 <osSemaphoreAcquire>
 8014972:	4603      	mov	r3, r0
 8014974:	2b00      	cmp	r3, #0
 8014976:	d101      	bne.n	801497c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8014978:	2301      	movs	r3, #1
 801497a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801497c:	68fb      	ldr	r3, [r7, #12]
}
 801497e:	4618      	mov	r0, r3
 8014980:	3710      	adds	r7, #16
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}

08014986 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014986:	b580      	push	{r7, lr}
 8014988:	b082      	sub	sp, #8
 801498a:	af00      	add	r7, sp, #0
 801498c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f000 fa8a 	bl	8014ea8 <osSemaphoreRelease>
#endif
}
 8014994:	bf00      	nop
 8014996:	3708      	adds	r7, #8
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}

0801499c <__NVIC_SetPriority>:
{
 801499c:	b480      	push	{r7}
 801499e:	b083      	sub	sp, #12
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	4603      	mov	r3, r0
 80149a4:	6039      	str	r1, [r7, #0]
 80149a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80149a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	db0a      	blt.n	80149c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	b2da      	uxtb	r2, r3
 80149b4:	490c      	ldr	r1, [pc, #48]	; (80149e8 <__NVIC_SetPriority+0x4c>)
 80149b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149ba:	0112      	lsls	r2, r2, #4
 80149bc:	b2d2      	uxtb	r2, r2
 80149be:	440b      	add	r3, r1
 80149c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80149c4:	e00a      	b.n	80149dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	b2da      	uxtb	r2, r3
 80149ca:	4908      	ldr	r1, [pc, #32]	; (80149ec <__NVIC_SetPriority+0x50>)
 80149cc:	79fb      	ldrb	r3, [r7, #7]
 80149ce:	f003 030f 	and.w	r3, r3, #15
 80149d2:	3b04      	subs	r3, #4
 80149d4:	0112      	lsls	r2, r2, #4
 80149d6:	b2d2      	uxtb	r2, r2
 80149d8:	440b      	add	r3, r1
 80149da:	761a      	strb	r2, [r3, #24]
}
 80149dc:	bf00      	nop
 80149de:	370c      	adds	r7, #12
 80149e0:	46bd      	mov	sp, r7
 80149e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e6:	4770      	bx	lr
 80149e8:	e000e100 	.word	0xe000e100
 80149ec:	e000ed00 	.word	0xe000ed00

080149f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80149f0:	b580      	push	{r7, lr}
 80149f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80149f4:	4b05      	ldr	r3, [pc, #20]	; (8014a0c <SysTick_Handler+0x1c>)
 80149f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80149f8:	f002 fb74 	bl	80170e4 <xTaskGetSchedulerState>
 80149fc:	4603      	mov	r3, r0
 80149fe:	2b01      	cmp	r3, #1
 8014a00:	d001      	beq.n	8014a06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014a02:	f003 fa59 	bl	8017eb8 <xPortSysTickHandler>
  }
}
 8014a06:	bf00      	nop
 8014a08:	bd80      	pop	{r7, pc}
 8014a0a:	bf00      	nop
 8014a0c:	e000e010 	.word	0xe000e010

08014a10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014a10:	b580      	push	{r7, lr}
 8014a12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014a14:	2100      	movs	r1, #0
 8014a16:	f06f 0004 	mvn.w	r0, #4
 8014a1a:	f7ff ffbf 	bl	801499c <__NVIC_SetPriority>
#endif
}
 8014a1e:	bf00      	nop
 8014a20:	bd80      	pop	{r7, pc}
	...

08014a24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014a24:	b480      	push	{r7}
 8014a26:	b083      	sub	sp, #12
 8014a28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014a2a:	f3ef 8305 	mrs	r3, IPSR
 8014a2e:	603b      	str	r3, [r7, #0]
  return(result);
 8014a30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d003      	beq.n	8014a3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014a36:	f06f 0305 	mvn.w	r3, #5
 8014a3a:	607b      	str	r3, [r7, #4]
 8014a3c:	e00c      	b.n	8014a58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014a3e:	4b0a      	ldr	r3, [pc, #40]	; (8014a68 <osKernelInitialize+0x44>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d105      	bne.n	8014a52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014a46:	4b08      	ldr	r3, [pc, #32]	; (8014a68 <osKernelInitialize+0x44>)
 8014a48:	2201      	movs	r2, #1
 8014a4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	607b      	str	r3, [r7, #4]
 8014a50:	e002      	b.n	8014a58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014a52:	f04f 33ff 	mov.w	r3, #4294967295
 8014a56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014a58:	687b      	ldr	r3, [r7, #4]
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	370c      	adds	r7, #12
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a64:	4770      	bx	lr
 8014a66:	bf00      	nop
 8014a68:	20000810 	.word	0x20000810

08014a6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014a72:	f3ef 8305 	mrs	r3, IPSR
 8014a76:	603b      	str	r3, [r7, #0]
  return(result);
 8014a78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d003      	beq.n	8014a86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8014a7e:	f06f 0305 	mvn.w	r3, #5
 8014a82:	607b      	str	r3, [r7, #4]
 8014a84:	e010      	b.n	8014aa8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014a86:	4b0b      	ldr	r3, [pc, #44]	; (8014ab4 <osKernelStart+0x48>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	2b01      	cmp	r3, #1
 8014a8c:	d109      	bne.n	8014aa2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014a8e:	f7ff ffbf 	bl	8014a10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014a92:	4b08      	ldr	r3, [pc, #32]	; (8014ab4 <osKernelStart+0x48>)
 8014a94:	2202      	movs	r2, #2
 8014a96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014a98:	f001 feb8 	bl	801680c <vTaskStartScheduler>
      stat = osOK;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	607b      	str	r3, [r7, #4]
 8014aa0:	e002      	b.n	8014aa8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014aa8:	687b      	ldr	r3, [r7, #4]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3708      	adds	r7, #8
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	20000810 	.word	0x20000810

08014ab8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b08e      	sub	sp, #56	; 0x38
 8014abc:	af04      	add	r7, sp, #16
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ac8:	f3ef 8305 	mrs	r3, IPSR
 8014acc:	617b      	str	r3, [r7, #20]
  return(result);
 8014ace:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d17e      	bne.n	8014bd2 <osThreadNew+0x11a>
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d07b      	beq.n	8014bd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014ada:	2380      	movs	r3, #128	; 0x80
 8014adc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014ade:	2318      	movs	r3, #24
 8014ae0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8014ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8014aea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d045      	beq.n	8014b7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d002      	beq.n	8014b00 <osThreadNew+0x48>
        name = attr->name;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	699b      	ldr	r3, [r3, #24]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d002      	beq.n	8014b0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	699b      	ldr	r3, [r3, #24]
 8014b0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d008      	beq.n	8014b26 <osThreadNew+0x6e>
 8014b14:	69fb      	ldr	r3, [r7, #28]
 8014b16:	2b38      	cmp	r3, #56	; 0x38
 8014b18:	d805      	bhi.n	8014b26 <osThreadNew+0x6e>
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	685b      	ldr	r3, [r3, #4]
 8014b1e:	f003 0301 	and.w	r3, r3, #1
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d001      	beq.n	8014b2a <osThreadNew+0x72>
        return (NULL);
 8014b26:	2300      	movs	r3, #0
 8014b28:	e054      	b.n	8014bd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	695b      	ldr	r3, [r3, #20]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d003      	beq.n	8014b3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	695b      	ldr	r3, [r3, #20]
 8014b36:	089b      	lsrs	r3, r3, #2
 8014b38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d00e      	beq.n	8014b60 <osThreadNew+0xa8>
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	68db      	ldr	r3, [r3, #12]
 8014b46:	2bbb      	cmp	r3, #187	; 0xbb
 8014b48:	d90a      	bls.n	8014b60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d006      	beq.n	8014b60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	695b      	ldr	r3, [r3, #20]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d002      	beq.n	8014b60 <osThreadNew+0xa8>
        mem = 1;
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	61bb      	str	r3, [r7, #24]
 8014b5e:	e010      	b.n	8014b82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	689b      	ldr	r3, [r3, #8]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d10c      	bne.n	8014b82 <osThreadNew+0xca>
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d108      	bne.n	8014b82 <osThreadNew+0xca>
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	691b      	ldr	r3, [r3, #16]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d104      	bne.n	8014b82 <osThreadNew+0xca>
          mem = 0;
 8014b78:	2300      	movs	r3, #0
 8014b7a:	61bb      	str	r3, [r7, #24]
 8014b7c:	e001      	b.n	8014b82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014b82:	69bb      	ldr	r3, [r7, #24]
 8014b84:	2b01      	cmp	r3, #1
 8014b86:	d110      	bne.n	8014baa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014b8c:	687a      	ldr	r2, [r7, #4]
 8014b8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014b90:	9202      	str	r2, [sp, #8]
 8014b92:	9301      	str	r3, [sp, #4]
 8014b94:	69fb      	ldr	r3, [r7, #28]
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	6a3a      	ldr	r2, [r7, #32]
 8014b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b9e:	68f8      	ldr	r0, [r7, #12]
 8014ba0:	f001 fae0 	bl	8016164 <xTaskCreateStatic>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	613b      	str	r3, [r7, #16]
 8014ba8:	e013      	b.n	8014bd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d110      	bne.n	8014bd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014bb0:	6a3b      	ldr	r3, [r7, #32]
 8014bb2:	b29a      	uxth	r2, r3
 8014bb4:	f107 0310 	add.w	r3, r7, #16
 8014bb8:	9301      	str	r3, [sp, #4]
 8014bba:	69fb      	ldr	r3, [r7, #28]
 8014bbc:	9300      	str	r3, [sp, #0]
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014bc2:	68f8      	ldr	r0, [r7, #12]
 8014bc4:	f001 fb2b 	bl	801621e <xTaskCreate>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	2b01      	cmp	r3, #1
 8014bcc:	d001      	beq.n	8014bd2 <osThreadNew+0x11a>
            hTask = NULL;
 8014bce:	2300      	movs	r3, #0
 8014bd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014bd2:	693b      	ldr	r3, [r7, #16]
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3728      	adds	r7, #40	; 0x28
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}

08014bdc <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8014be2:	f002 fa6f 	bl	80170c4 <xTaskGetCurrentTaskHandle>
 8014be6:	6078      	str	r0, [r7, #4]

  return (id);
 8014be8:	687b      	ldr	r3, [r7, #4]
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3708      	adds	r7, #8
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
	...

08014bf4 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b086      	sub	sp, #24
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c00:	f3ef 8305 	mrs	r3, IPSR
 8014c04:	60fb      	str	r3, [r7, #12]
  return(result);
 8014c06:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d102      	bne.n	8014c12 <osThreadGetState+0x1e>
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d103      	bne.n	8014c1a <osThreadGetState+0x26>
    state = osThreadError;
 8014c12:	f04f 33ff 	mov.w	r3, #4294967295
 8014c16:	617b      	str	r3, [r7, #20]
 8014c18:	e022      	b.n	8014c60 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8014c1a:	6938      	ldr	r0, [r7, #16]
 8014c1c:	f001 fd00 	bl	8016620 <eTaskGetState>
 8014c20:	4603      	mov	r3, r0
 8014c22:	2b04      	cmp	r3, #4
 8014c24:	d818      	bhi.n	8014c58 <osThreadGetState+0x64>
 8014c26:	a201      	add	r2, pc, #4	; (adr r2, 8014c2c <osThreadGetState+0x38>)
 8014c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c2c:	08014c41 	.word	0x08014c41
 8014c30:	08014c47 	.word	0x08014c47
 8014c34:	08014c4d 	.word	0x08014c4d
 8014c38:	08014c4d 	.word	0x08014c4d
 8014c3c:	08014c53 	.word	0x08014c53
      case eRunning:   state = osThreadRunning;    break;
 8014c40:	2302      	movs	r3, #2
 8014c42:	617b      	str	r3, [r7, #20]
 8014c44:	e00c      	b.n	8014c60 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8014c46:	2301      	movs	r3, #1
 8014c48:	617b      	str	r3, [r7, #20]
 8014c4a:	e009      	b.n	8014c60 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8014c4c:	2303      	movs	r3, #3
 8014c4e:	617b      	str	r3, [r7, #20]
 8014c50:	e006      	b.n	8014c60 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8014c52:	2304      	movs	r3, #4
 8014c54:	617b      	str	r3, [r7, #20]
 8014c56:	e003      	b.n	8014c60 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8014c58:	f04f 33ff 	mov.w	r3, #4294967295
 8014c5c:	617b      	str	r3, [r7, #20]
 8014c5e:	bf00      	nop
    }
  }

  return (state);
 8014c60:	697b      	ldr	r3, [r7, #20]
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3718      	adds	r7, #24
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop

08014c6c <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b086      	sub	sp, #24
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c78:	f3ef 8305 	mrs	r3, IPSR
 8014c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8014c7e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d003      	beq.n	8014c8c <osThreadResume+0x20>
    stat = osErrorISR;
 8014c84:	f06f 0305 	mvn.w	r3, #5
 8014c88:	617b      	str	r3, [r7, #20]
 8014c8a:	e00b      	b.n	8014ca4 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8014c8c:	693b      	ldr	r3, [r7, #16]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d103      	bne.n	8014c9a <osThreadResume+0x2e>
    stat = osErrorParameter;
 8014c92:	f06f 0303 	mvn.w	r3, #3
 8014c96:	617b      	str	r3, [r7, #20]
 8014c98:	e004      	b.n	8014ca4 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8014c9e:	6938      	ldr	r0, [r7, #16]
 8014ca0:	f001 fd56 	bl	8016750 <vTaskResume>
  }

  return (stat);
 8014ca4:	697b      	ldr	r3, [r7, #20]
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3718      	adds	r7, #24
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}

08014cae <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8014cae:	b580      	push	{r7, lr}
 8014cb0:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8014cb2:	2000      	movs	r0, #0
 8014cb4:	f001 fc0e 	bl	80164d4 <vTaskDelete>
#endif
  for (;;);
 8014cb8:	e7fe      	b.n	8014cb8 <osThreadExit+0xa>

08014cba <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014cba:	b580      	push	{r7, lr}
 8014cbc:	b084      	sub	sp, #16
 8014cbe:	af00      	add	r7, sp, #0
 8014cc0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014cc2:	f3ef 8305 	mrs	r3, IPSR
 8014cc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8014cc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d003      	beq.n	8014cd6 <osDelay+0x1c>
    stat = osErrorISR;
 8014cce:	f06f 0305 	mvn.w	r3, #5
 8014cd2:	60fb      	str	r3, [r7, #12]
 8014cd4:	e007      	b.n	8014ce6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d002      	beq.n	8014ce6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f001 fc69 	bl	80165b8 <vTaskDelay>
    }
  }

  return (stat);
 8014ce6:	68fb      	ldr	r3, [r7, #12]
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3710      	adds	r7, #16
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}

08014cf0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b08a      	sub	sp, #40	; 0x28
 8014cf4:	af02      	add	r7, sp, #8
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	60b9      	str	r1, [r7, #8]
 8014cfa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d00:	f3ef 8305 	mrs	r3, IPSR
 8014d04:	613b      	str	r3, [r7, #16]
  return(result);
 8014d06:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d175      	bne.n	8014df8 <osSemaphoreNew+0x108>
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d072      	beq.n	8014df8 <osSemaphoreNew+0x108>
 8014d12:	68ba      	ldr	r2, [r7, #8]
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d86e      	bhi.n	8014df8 <osSemaphoreNew+0x108>
    mem = -1;
 8014d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d015      	beq.n	8014d52 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d006      	beq.n	8014d3c <osSemaphoreNew+0x4c>
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	68db      	ldr	r3, [r3, #12]
 8014d32:	2b4f      	cmp	r3, #79	; 0x4f
 8014d34:	d902      	bls.n	8014d3c <osSemaphoreNew+0x4c>
        mem = 1;
 8014d36:	2301      	movs	r3, #1
 8014d38:	61bb      	str	r3, [r7, #24]
 8014d3a:	e00c      	b.n	8014d56 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	689b      	ldr	r3, [r3, #8]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d108      	bne.n	8014d56 <osSemaphoreNew+0x66>
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	68db      	ldr	r3, [r3, #12]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d104      	bne.n	8014d56 <osSemaphoreNew+0x66>
          mem = 0;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	61bb      	str	r3, [r7, #24]
 8014d50:	e001      	b.n	8014d56 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8014d52:	2300      	movs	r3, #0
 8014d54:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8014d56:	69bb      	ldr	r3, [r7, #24]
 8014d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d5c:	d04c      	beq.n	8014df8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d128      	bne.n	8014db6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	2b01      	cmp	r3, #1
 8014d68:	d10a      	bne.n	8014d80 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	689b      	ldr	r3, [r3, #8]
 8014d6e:	2203      	movs	r2, #3
 8014d70:	9200      	str	r2, [sp, #0]
 8014d72:	2200      	movs	r2, #0
 8014d74:	2100      	movs	r1, #0
 8014d76:	2001      	movs	r0, #1
 8014d78:	f000 fa4e 	bl	8015218 <xQueueGenericCreateStatic>
 8014d7c:	61f8      	str	r0, [r7, #28]
 8014d7e:	e005      	b.n	8014d8c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8014d80:	2203      	movs	r2, #3
 8014d82:	2100      	movs	r1, #0
 8014d84:	2001      	movs	r0, #1
 8014d86:	f000 fabf 	bl	8015308 <xQueueGenericCreate>
 8014d8a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8014d8c:	69fb      	ldr	r3, [r7, #28]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d022      	beq.n	8014dd8 <osSemaphoreNew+0xe8>
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d01f      	beq.n	8014dd8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014d98:	2300      	movs	r3, #0
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	69f8      	ldr	r0, [r7, #28]
 8014da0:	f000 fb7a 	bl	8015498 <xQueueGenericSend>
 8014da4:	4603      	mov	r3, r0
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d016      	beq.n	8014dd8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8014daa:	69f8      	ldr	r0, [r7, #28]
 8014dac:	f001 f806 	bl	8015dbc <vQueueDelete>
            hSemaphore = NULL;
 8014db0:	2300      	movs	r3, #0
 8014db2:	61fb      	str	r3, [r7, #28]
 8014db4:	e010      	b.n	8014dd8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8014db6:	69bb      	ldr	r3, [r7, #24]
 8014db8:	2b01      	cmp	r3, #1
 8014dba:	d108      	bne.n	8014dce <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	689b      	ldr	r3, [r3, #8]
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	68b9      	ldr	r1, [r7, #8]
 8014dc4:	68f8      	ldr	r0, [r7, #12]
 8014dc6:	f000 fafc 	bl	80153c2 <xQueueCreateCountingSemaphoreStatic>
 8014dca:	61f8      	str	r0, [r7, #28]
 8014dcc:	e004      	b.n	8014dd8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014dce:	68b9      	ldr	r1, [r7, #8]
 8014dd0:	68f8      	ldr	r0, [r7, #12]
 8014dd2:	f000 fb2d 	bl	8015430 <xQueueCreateCountingSemaphore>
 8014dd6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014dd8:	69fb      	ldr	r3, [r7, #28]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00c      	beq.n	8014df8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d003      	beq.n	8014dec <osSemaphoreNew+0xfc>
          name = attr->name;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	617b      	str	r3, [r7, #20]
 8014dea:	e001      	b.n	8014df0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8014dec:	2300      	movs	r3, #0
 8014dee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014df0:	6979      	ldr	r1, [r7, #20]
 8014df2:	69f8      	ldr	r0, [r7, #28]
 8014df4:	f001 f92e 	bl	8016054 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014df8:	69fb      	ldr	r3, [r7, #28]
}
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	3720      	adds	r7, #32
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}
	...

08014e04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b086      	sub	sp, #24
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014e12:	2300      	movs	r3, #0
 8014e14:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d103      	bne.n	8014e24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014e1c:	f06f 0303 	mvn.w	r3, #3
 8014e20:	617b      	str	r3, [r7, #20]
 8014e22:	e039      	b.n	8014e98 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e24:	f3ef 8305 	mrs	r3, IPSR
 8014e28:	60fb      	str	r3, [r7, #12]
  return(result);
 8014e2a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d022      	beq.n	8014e76 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d003      	beq.n	8014e3e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014e36:	f06f 0303 	mvn.w	r3, #3
 8014e3a:	617b      	str	r3, [r7, #20]
 8014e3c:	e02c      	b.n	8014e98 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8014e42:	f107 0308 	add.w	r3, r7, #8
 8014e46:	461a      	mov	r2, r3
 8014e48:	2100      	movs	r1, #0
 8014e4a:	6938      	ldr	r0, [r7, #16]
 8014e4c:	f000 ff36 	bl	8015cbc <xQueueReceiveFromISR>
 8014e50:	4603      	mov	r3, r0
 8014e52:	2b01      	cmp	r3, #1
 8014e54:	d003      	beq.n	8014e5e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8014e56:	f06f 0302 	mvn.w	r3, #2
 8014e5a:	617b      	str	r3, [r7, #20]
 8014e5c:	e01c      	b.n	8014e98 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d019      	beq.n	8014e98 <osSemaphoreAcquire+0x94>
 8014e64:	4b0f      	ldr	r3, [pc, #60]	; (8014ea4 <osSemaphoreAcquire+0xa0>)
 8014e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e6a:	601a      	str	r2, [r3, #0]
 8014e6c:	f3bf 8f4f 	dsb	sy
 8014e70:	f3bf 8f6f 	isb	sy
 8014e74:	e010      	b.n	8014e98 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8014e76:	6839      	ldr	r1, [r7, #0]
 8014e78:	6938      	ldr	r0, [r7, #16]
 8014e7a:	f000 fe13 	bl	8015aa4 <xQueueSemaphoreTake>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	d009      	beq.n	8014e98 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d003      	beq.n	8014e92 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8014e8a:	f06f 0301 	mvn.w	r3, #1
 8014e8e:	617b      	str	r3, [r7, #20]
 8014e90:	e002      	b.n	8014e98 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8014e92:	f06f 0302 	mvn.w	r3, #2
 8014e96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8014e98:	697b      	ldr	r3, [r7, #20]
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3718      	adds	r7, #24
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	e000ed04 	.word	0xe000ed04

08014ea8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b086      	sub	sp, #24
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014eb8:	693b      	ldr	r3, [r7, #16]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d103      	bne.n	8014ec6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8014ebe:	f06f 0303 	mvn.w	r3, #3
 8014ec2:	617b      	str	r3, [r7, #20]
 8014ec4:	e02c      	b.n	8014f20 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ec6:	f3ef 8305 	mrs	r3, IPSR
 8014eca:	60fb      	str	r3, [r7, #12]
  return(result);
 8014ecc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d01a      	beq.n	8014f08 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014ed6:	f107 0308 	add.w	r3, r7, #8
 8014eda:	4619      	mov	r1, r3
 8014edc:	6938      	ldr	r0, [r7, #16]
 8014ede:	f000 fc74 	bl	80157ca <xQueueGiveFromISR>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	2b01      	cmp	r3, #1
 8014ee6:	d003      	beq.n	8014ef0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014ee8:	f06f 0302 	mvn.w	r3, #2
 8014eec:	617b      	str	r3, [r7, #20]
 8014eee:	e017      	b.n	8014f20 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d014      	beq.n	8014f20 <osSemaphoreRelease+0x78>
 8014ef6:	4b0d      	ldr	r3, [pc, #52]	; (8014f2c <osSemaphoreRelease+0x84>)
 8014ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014efc:	601a      	str	r2, [r3, #0]
 8014efe:	f3bf 8f4f 	dsb	sy
 8014f02:	f3bf 8f6f 	isb	sy
 8014f06:	e00b      	b.n	8014f20 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014f08:	2300      	movs	r3, #0
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	2100      	movs	r1, #0
 8014f0e:	6938      	ldr	r0, [r7, #16]
 8014f10:	f000 fac2 	bl	8015498 <xQueueGenericSend>
 8014f14:	4603      	mov	r3, r0
 8014f16:	2b01      	cmp	r3, #1
 8014f18:	d002      	beq.n	8014f20 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014f1a:	f06f 0302 	mvn.w	r3, #2
 8014f1e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8014f20:	697b      	ldr	r3, [r7, #20]
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3718      	adds	r7, #24
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	e000ed04 	.word	0xe000ed04

08014f30 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b086      	sub	sp, #24
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f3c:	f3ef 8305 	mrs	r3, IPSR
 8014f40:	60fb      	str	r3, [r7, #12]
  return(result);
 8014f42:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d003      	beq.n	8014f50 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8014f48:	f06f 0305 	mvn.w	r3, #5
 8014f4c:	617b      	str	r3, [r7, #20]
 8014f4e:	e00e      	b.n	8014f6e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d103      	bne.n	8014f5e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8014f56:	f06f 0303 	mvn.w	r3, #3
 8014f5a:	617b      	str	r3, [r7, #20]
 8014f5c:	e007      	b.n	8014f6e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8014f5e:	6938      	ldr	r0, [r7, #16]
 8014f60:	f001 f8a2 	bl	80160a8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8014f64:	2300      	movs	r3, #0
 8014f66:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8014f68:	6938      	ldr	r0, [r7, #16]
 8014f6a:	f000 ff27 	bl	8015dbc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8014f6e:	697b      	ldr	r3, [r7, #20]
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3718      	adds	r7, #24
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014f78:	b480      	push	{r7}
 8014f7a:	b085      	sub	sp, #20
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	4a07      	ldr	r2, [pc, #28]	; (8014fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8014f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	4a06      	ldr	r2, [pc, #24]	; (8014fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8014f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2280      	movs	r2, #128	; 0x80
 8014f94:	601a      	str	r2, [r3, #0]
}
 8014f96:	bf00      	nop
 8014f98:	3714      	adds	r7, #20
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa0:	4770      	bx	lr
 8014fa2:	bf00      	nop
 8014fa4:	20000814 	.word	0x20000814
 8014fa8:	200008d0 	.word	0x200008d0

08014fac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014fac:	b480      	push	{r7}
 8014fae:	b085      	sub	sp, #20
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	60f8      	str	r0, [r7, #12]
 8014fb4:	60b9      	str	r1, [r7, #8]
 8014fb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	4a07      	ldr	r2, [pc, #28]	; (8014fd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8014fbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014fbe:	68bb      	ldr	r3, [r7, #8]
 8014fc0:	4a06      	ldr	r2, [pc, #24]	; (8014fdc <vApplicationGetTimerTaskMemory+0x30>)
 8014fc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014fca:	601a      	str	r2, [r3, #0]
}
 8014fcc:	bf00      	nop
 8014fce:	3714      	adds	r7, #20
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr
 8014fd8:	20000ad0 	.word	0x20000ad0
 8014fdc:	20000b8c 	.word	0x20000b8c

08014fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f103 0208 	add.w	r2, r3, #8
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8014ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f103 0208 	add.w	r2, r3, #8
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f103 0208 	add.w	r2, r3, #8
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	2200      	movs	r2, #0
 8015012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015014:	bf00      	nop
 8015016:	370c      	adds	r7, #12
 8015018:	46bd      	mov	sp, r7
 801501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501e:	4770      	bx	lr

08015020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015020:	b480      	push	{r7}
 8015022:	b083      	sub	sp, #12
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2200      	movs	r2, #0
 801502c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801502e:	bf00      	nop
 8015030:	370c      	adds	r7, #12
 8015032:	46bd      	mov	sp, r7
 8015034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015038:	4770      	bx	lr

0801503a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801503a:	b480      	push	{r7}
 801503c:	b085      	sub	sp, #20
 801503e:	af00      	add	r7, sp, #0
 8015040:	6078      	str	r0, [r7, #4]
 8015042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	685b      	ldr	r3, [r3, #4]
 8015048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	68fa      	ldr	r2, [r7, #12]
 801504e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	689a      	ldr	r2, [r3, #8]
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	689b      	ldr	r3, [r3, #8]
 801505c:	683a      	ldr	r2, [r7, #0]
 801505e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	683a      	ldr	r2, [r7, #0]
 8015064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	687a      	ldr	r2, [r7, #4]
 801506a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	1c5a      	adds	r2, r3, #1
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	601a      	str	r2, [r3, #0]
}
 8015076:	bf00      	nop
 8015078:	3714      	adds	r7, #20
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr

08015082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015082:	b480      	push	{r7}
 8015084:	b085      	sub	sp, #20
 8015086:	af00      	add	r7, sp, #0
 8015088:	6078      	str	r0, [r7, #4]
 801508a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015092:	68bb      	ldr	r3, [r7, #8]
 8015094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015098:	d103      	bne.n	80150a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	691b      	ldr	r3, [r3, #16]
 801509e:	60fb      	str	r3, [r7, #12]
 80150a0:	e00c      	b.n	80150bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	3308      	adds	r3, #8
 80150a6:	60fb      	str	r3, [r7, #12]
 80150a8:	e002      	b.n	80150b0 <vListInsert+0x2e>
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	685b      	ldr	r3, [r3, #4]
 80150ae:	60fb      	str	r3, [r7, #12]
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	685b      	ldr	r3, [r3, #4]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	68ba      	ldr	r2, [r7, #8]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d2f6      	bcs.n	80150aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	685a      	ldr	r2, [r3, #4]
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	685b      	ldr	r3, [r3, #4]
 80150c8:	683a      	ldr	r2, [r7, #0]
 80150ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	68fa      	ldr	r2, [r7, #12]
 80150d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	683a      	ldr	r2, [r7, #0]
 80150d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	687a      	ldr	r2, [r7, #4]
 80150dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	1c5a      	adds	r2, r3, #1
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	601a      	str	r2, [r3, #0]
}
 80150e8:	bf00      	nop
 80150ea:	3714      	adds	r7, #20
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr

080150f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80150f4:	b480      	push	{r7}
 80150f6:	b085      	sub	sp, #20
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	691b      	ldr	r3, [r3, #16]
 8015100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	685b      	ldr	r3, [r3, #4]
 8015106:	687a      	ldr	r2, [r7, #4]
 8015108:	6892      	ldr	r2, [r2, #8]
 801510a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	689b      	ldr	r3, [r3, #8]
 8015110:	687a      	ldr	r2, [r7, #4]
 8015112:	6852      	ldr	r2, [r2, #4]
 8015114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	685b      	ldr	r3, [r3, #4]
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	429a      	cmp	r2, r3
 801511e:	d103      	bne.n	8015128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	689a      	ldr	r2, [r3, #8]
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2200      	movs	r2, #0
 801512c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	1e5a      	subs	r2, r3, #1
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	681b      	ldr	r3, [r3, #0]
}
 801513c:	4618      	mov	r0, r3
 801513e:	3714      	adds	r7, #20
 8015140:	46bd      	mov	sp, r7
 8015142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015146:	4770      	bx	lr

08015148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d10a      	bne.n	8015172 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015160:	f383 8811 	msr	BASEPRI, r3
 8015164:	f3bf 8f6f 	isb	sy
 8015168:	f3bf 8f4f 	dsb	sy
 801516c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801516e:	bf00      	nop
 8015170:	e7fe      	b.n	8015170 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015172:	f002 fe0f 	bl	8017d94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	681a      	ldr	r2, [r3, #0]
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801517e:	68f9      	ldr	r1, [r7, #12]
 8015180:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015182:	fb01 f303 	mul.w	r3, r1, r3
 8015186:	441a      	add	r2, r3
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	2200      	movs	r2, #0
 8015190:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	681a      	ldr	r2, [r3, #0]
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151a2:	3b01      	subs	r3, #1
 80151a4:	68f9      	ldr	r1, [r7, #12]
 80151a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80151a8:	fb01 f303 	mul.w	r3, r1, r3
 80151ac:	441a      	add	r2, r3
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	22ff      	movs	r2, #255	; 0xff
 80151b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	22ff      	movs	r2, #255	; 0xff
 80151be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d114      	bne.n	80151f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	691b      	ldr	r3, [r3, #16]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d01a      	beq.n	8015206 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	3310      	adds	r3, #16
 80151d4:	4618      	mov	r0, r3
 80151d6:	f001 fdb3 	bl	8016d40 <xTaskRemoveFromEventList>
 80151da:	4603      	mov	r3, r0
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d012      	beq.n	8015206 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80151e0:	4b0c      	ldr	r3, [pc, #48]	; (8015214 <xQueueGenericReset+0xcc>)
 80151e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151e6:	601a      	str	r2, [r3, #0]
 80151e8:	f3bf 8f4f 	dsb	sy
 80151ec:	f3bf 8f6f 	isb	sy
 80151f0:	e009      	b.n	8015206 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	3310      	adds	r3, #16
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7ff fef2 	bl	8014fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	3324      	adds	r3, #36	; 0x24
 8015200:	4618      	mov	r0, r3
 8015202:	f7ff feed 	bl	8014fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015206:	f002 fdf5 	bl	8017df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801520a:	2301      	movs	r3, #1
}
 801520c:	4618      	mov	r0, r3
 801520e:	3710      	adds	r7, #16
 8015210:	46bd      	mov	sp, r7
 8015212:	bd80      	pop	{r7, pc}
 8015214:	e000ed04 	.word	0xe000ed04

08015218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015218:	b580      	push	{r7, lr}
 801521a:	b08e      	sub	sp, #56	; 0x38
 801521c:	af02      	add	r7, sp, #8
 801521e:	60f8      	str	r0, [r7, #12]
 8015220:	60b9      	str	r1, [r7, #8]
 8015222:	607a      	str	r2, [r7, #4]
 8015224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d10a      	bne.n	8015242 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015230:	f383 8811 	msr	BASEPRI, r3
 8015234:	f3bf 8f6f 	isb	sy
 8015238:	f3bf 8f4f 	dsb	sy
 801523c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801523e:	bf00      	nop
 8015240:	e7fe      	b.n	8015240 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d10a      	bne.n	801525e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801524c:	f383 8811 	msr	BASEPRI, r3
 8015250:	f3bf 8f6f 	isb	sy
 8015254:	f3bf 8f4f 	dsb	sy
 8015258:	627b      	str	r3, [r7, #36]	; 0x24
}
 801525a:	bf00      	nop
 801525c:	e7fe      	b.n	801525c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d002      	beq.n	801526a <xQueueGenericCreateStatic+0x52>
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d001      	beq.n	801526e <xQueueGenericCreateStatic+0x56>
 801526a:	2301      	movs	r3, #1
 801526c:	e000      	b.n	8015270 <xQueueGenericCreateStatic+0x58>
 801526e:	2300      	movs	r3, #0
 8015270:	2b00      	cmp	r3, #0
 8015272:	d10a      	bne.n	801528a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015278:	f383 8811 	msr	BASEPRI, r3
 801527c:	f3bf 8f6f 	isb	sy
 8015280:	f3bf 8f4f 	dsb	sy
 8015284:	623b      	str	r3, [r7, #32]
}
 8015286:	bf00      	nop
 8015288:	e7fe      	b.n	8015288 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d102      	bne.n	8015296 <xQueueGenericCreateStatic+0x7e>
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d101      	bne.n	801529a <xQueueGenericCreateStatic+0x82>
 8015296:	2301      	movs	r3, #1
 8015298:	e000      	b.n	801529c <xQueueGenericCreateStatic+0x84>
 801529a:	2300      	movs	r3, #0
 801529c:	2b00      	cmp	r3, #0
 801529e:	d10a      	bne.n	80152b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80152a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152a4:	f383 8811 	msr	BASEPRI, r3
 80152a8:	f3bf 8f6f 	isb	sy
 80152ac:	f3bf 8f4f 	dsb	sy
 80152b0:	61fb      	str	r3, [r7, #28]
}
 80152b2:	bf00      	nop
 80152b4:	e7fe      	b.n	80152b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80152b6:	2350      	movs	r3, #80	; 0x50
 80152b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	2b50      	cmp	r3, #80	; 0x50
 80152be:	d00a      	beq.n	80152d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80152c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c4:	f383 8811 	msr	BASEPRI, r3
 80152c8:	f3bf 8f6f 	isb	sy
 80152cc:	f3bf 8f4f 	dsb	sy
 80152d0:	61bb      	str	r3, [r7, #24]
}
 80152d2:	bf00      	nop
 80152d4:	e7fe      	b.n	80152d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80152d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80152dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d00d      	beq.n	80152fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80152e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e4:	2201      	movs	r2, #1
 80152e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80152ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80152ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f0:	9300      	str	r3, [sp, #0]
 80152f2:	4613      	mov	r3, r2
 80152f4:	687a      	ldr	r2, [r7, #4]
 80152f6:	68b9      	ldr	r1, [r7, #8]
 80152f8:	68f8      	ldr	r0, [r7, #12]
 80152fa:	f000 f83f 	bl	801537c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80152fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015300:	4618      	mov	r0, r3
 8015302:	3730      	adds	r7, #48	; 0x30
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}

08015308 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015308:	b580      	push	{r7, lr}
 801530a:	b08a      	sub	sp, #40	; 0x28
 801530c:	af02      	add	r7, sp, #8
 801530e:	60f8      	str	r0, [r7, #12]
 8015310:	60b9      	str	r1, [r7, #8]
 8015312:	4613      	mov	r3, r2
 8015314:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d10a      	bne.n	8015332 <xQueueGenericCreate+0x2a>
	__asm volatile
 801531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015320:	f383 8811 	msr	BASEPRI, r3
 8015324:	f3bf 8f6f 	isb	sy
 8015328:	f3bf 8f4f 	dsb	sy
 801532c:	613b      	str	r3, [r7, #16]
}
 801532e:	bf00      	nop
 8015330:	e7fe      	b.n	8015330 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	68ba      	ldr	r2, [r7, #8]
 8015336:	fb02 f303 	mul.w	r3, r2, r3
 801533a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	3350      	adds	r3, #80	; 0x50
 8015340:	4618      	mov	r0, r3
 8015342:	f002 fe49 	bl	8017fd8 <pvPortMalloc>
 8015346:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015348:	69bb      	ldr	r3, [r7, #24]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d011      	beq.n	8015372 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801534e:	69bb      	ldr	r3, [r7, #24]
 8015350:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	3350      	adds	r3, #80	; 0x50
 8015356:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015358:	69bb      	ldr	r3, [r7, #24]
 801535a:	2200      	movs	r2, #0
 801535c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015360:	79fa      	ldrb	r2, [r7, #7]
 8015362:	69bb      	ldr	r3, [r7, #24]
 8015364:	9300      	str	r3, [sp, #0]
 8015366:	4613      	mov	r3, r2
 8015368:	697a      	ldr	r2, [r7, #20]
 801536a:	68b9      	ldr	r1, [r7, #8]
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f000 f805 	bl	801537c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015372:	69bb      	ldr	r3, [r7, #24]
	}
 8015374:	4618      	mov	r0, r3
 8015376:	3720      	adds	r7, #32
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	60f8      	str	r0, [r7, #12]
 8015384:	60b9      	str	r1, [r7, #8]
 8015386:	607a      	str	r2, [r7, #4]
 8015388:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d103      	bne.n	8015398 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015390:	69bb      	ldr	r3, [r7, #24]
 8015392:	69ba      	ldr	r2, [r7, #24]
 8015394:	601a      	str	r2, [r3, #0]
 8015396:	e002      	b.n	801539e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015398:	69bb      	ldr	r3, [r7, #24]
 801539a:	687a      	ldr	r2, [r7, #4]
 801539c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801539e:	69bb      	ldr	r3, [r7, #24]
 80153a0:	68fa      	ldr	r2, [r7, #12]
 80153a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80153a4:	69bb      	ldr	r3, [r7, #24]
 80153a6:	68ba      	ldr	r2, [r7, #8]
 80153a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80153aa:	2101      	movs	r1, #1
 80153ac:	69b8      	ldr	r0, [r7, #24]
 80153ae:	f7ff fecb 	bl	8015148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	78fa      	ldrb	r2, [r7, #3]
 80153b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80153ba:	bf00      	nop
 80153bc:	3710      	adds	r7, #16
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}

080153c2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80153c2:	b580      	push	{r7, lr}
 80153c4:	b08a      	sub	sp, #40	; 0x28
 80153c6:	af02      	add	r7, sp, #8
 80153c8:	60f8      	str	r0, [r7, #12]
 80153ca:	60b9      	str	r1, [r7, #8]
 80153cc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d10a      	bne.n	80153ea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80153d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d8:	f383 8811 	msr	BASEPRI, r3
 80153dc:	f3bf 8f6f 	isb	sy
 80153e0:	f3bf 8f4f 	dsb	sy
 80153e4:	61bb      	str	r3, [r7, #24]
}
 80153e6:	bf00      	nop
 80153e8:	e7fe      	b.n	80153e8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80153ea:	68ba      	ldr	r2, [r7, #8]
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d90a      	bls.n	8015408 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80153f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153f6:	f383 8811 	msr	BASEPRI, r3
 80153fa:	f3bf 8f6f 	isb	sy
 80153fe:	f3bf 8f4f 	dsb	sy
 8015402:	617b      	str	r3, [r7, #20]
}
 8015404:	bf00      	nop
 8015406:	e7fe      	b.n	8015406 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015408:	2302      	movs	r3, #2
 801540a:	9300      	str	r3, [sp, #0]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2200      	movs	r2, #0
 8015410:	2100      	movs	r1, #0
 8015412:	68f8      	ldr	r0, [r7, #12]
 8015414:	f7ff ff00 	bl	8015218 <xQueueGenericCreateStatic>
 8015418:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801541a:	69fb      	ldr	r3, [r7, #28]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d002      	beq.n	8015426 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	68ba      	ldr	r2, [r7, #8]
 8015424:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015426:	69fb      	ldr	r3, [r7, #28]
	}
 8015428:	4618      	mov	r0, r3
 801542a:	3720      	adds	r7, #32
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}

08015430 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015430:	b580      	push	{r7, lr}
 8015432:	b086      	sub	sp, #24
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d10a      	bne.n	8015456 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015444:	f383 8811 	msr	BASEPRI, r3
 8015448:	f3bf 8f6f 	isb	sy
 801544c:	f3bf 8f4f 	dsb	sy
 8015450:	613b      	str	r3, [r7, #16]
}
 8015452:	bf00      	nop
 8015454:	e7fe      	b.n	8015454 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015456:	683a      	ldr	r2, [r7, #0]
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	429a      	cmp	r2, r3
 801545c:	d90a      	bls.n	8015474 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015462:	f383 8811 	msr	BASEPRI, r3
 8015466:	f3bf 8f6f 	isb	sy
 801546a:	f3bf 8f4f 	dsb	sy
 801546e:	60fb      	str	r3, [r7, #12]
}
 8015470:	bf00      	nop
 8015472:	e7fe      	b.n	8015472 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015474:	2202      	movs	r2, #2
 8015476:	2100      	movs	r1, #0
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f7ff ff45 	bl	8015308 <xQueueGenericCreate>
 801547e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d002      	beq.n	801548c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	683a      	ldr	r2, [r7, #0]
 801548a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801548c:	697b      	ldr	r3, [r7, #20]
	}
 801548e:	4618      	mov	r0, r3
 8015490:	3718      	adds	r7, #24
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
	...

08015498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b08e      	sub	sp, #56	; 0x38
 801549c:	af00      	add	r7, sp, #0
 801549e:	60f8      	str	r0, [r7, #12]
 80154a0:	60b9      	str	r1, [r7, #8]
 80154a2:	607a      	str	r2, [r7, #4]
 80154a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80154a6:	2300      	movs	r3, #0
 80154a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80154ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d10a      	bne.n	80154ca <xQueueGenericSend+0x32>
	__asm volatile
 80154b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b8:	f383 8811 	msr	BASEPRI, r3
 80154bc:	f3bf 8f6f 	isb	sy
 80154c0:	f3bf 8f4f 	dsb	sy
 80154c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80154c6:	bf00      	nop
 80154c8:	e7fe      	b.n	80154c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80154ca:	68bb      	ldr	r3, [r7, #8]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d103      	bne.n	80154d8 <xQueueGenericSend+0x40>
 80154d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d101      	bne.n	80154dc <xQueueGenericSend+0x44>
 80154d8:	2301      	movs	r3, #1
 80154da:	e000      	b.n	80154de <xQueueGenericSend+0x46>
 80154dc:	2300      	movs	r3, #0
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d10a      	bne.n	80154f8 <xQueueGenericSend+0x60>
	__asm volatile
 80154e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154e6:	f383 8811 	msr	BASEPRI, r3
 80154ea:	f3bf 8f6f 	isb	sy
 80154ee:	f3bf 8f4f 	dsb	sy
 80154f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80154f4:	bf00      	nop
 80154f6:	e7fe      	b.n	80154f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	2b02      	cmp	r3, #2
 80154fc:	d103      	bne.n	8015506 <xQueueGenericSend+0x6e>
 80154fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015502:	2b01      	cmp	r3, #1
 8015504:	d101      	bne.n	801550a <xQueueGenericSend+0x72>
 8015506:	2301      	movs	r3, #1
 8015508:	e000      	b.n	801550c <xQueueGenericSend+0x74>
 801550a:	2300      	movs	r3, #0
 801550c:	2b00      	cmp	r3, #0
 801550e:	d10a      	bne.n	8015526 <xQueueGenericSend+0x8e>
	__asm volatile
 8015510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015514:	f383 8811 	msr	BASEPRI, r3
 8015518:	f3bf 8f6f 	isb	sy
 801551c:	f3bf 8f4f 	dsb	sy
 8015520:	623b      	str	r3, [r7, #32]
}
 8015522:	bf00      	nop
 8015524:	e7fe      	b.n	8015524 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015526:	f001 fddd 	bl	80170e4 <xTaskGetSchedulerState>
 801552a:	4603      	mov	r3, r0
 801552c:	2b00      	cmp	r3, #0
 801552e:	d102      	bne.n	8015536 <xQueueGenericSend+0x9e>
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d101      	bne.n	801553a <xQueueGenericSend+0xa2>
 8015536:	2301      	movs	r3, #1
 8015538:	e000      	b.n	801553c <xQueueGenericSend+0xa4>
 801553a:	2300      	movs	r3, #0
 801553c:	2b00      	cmp	r3, #0
 801553e:	d10a      	bne.n	8015556 <xQueueGenericSend+0xbe>
	__asm volatile
 8015540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015544:	f383 8811 	msr	BASEPRI, r3
 8015548:	f3bf 8f6f 	isb	sy
 801554c:	f3bf 8f4f 	dsb	sy
 8015550:	61fb      	str	r3, [r7, #28]
}
 8015552:	bf00      	nop
 8015554:	e7fe      	b.n	8015554 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015556:	f002 fc1d 	bl	8017d94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801555c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015562:	429a      	cmp	r2, r3
 8015564:	d302      	bcc.n	801556c <xQueueGenericSend+0xd4>
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	2b02      	cmp	r3, #2
 801556a:	d129      	bne.n	80155c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801556c:	683a      	ldr	r2, [r7, #0]
 801556e:	68b9      	ldr	r1, [r7, #8]
 8015570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015572:	f000 fc5e 	bl	8015e32 <prvCopyDataToQueue>
 8015576:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801557c:	2b00      	cmp	r3, #0
 801557e:	d010      	beq.n	80155a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015582:	3324      	adds	r3, #36	; 0x24
 8015584:	4618      	mov	r0, r3
 8015586:	f001 fbdb 	bl	8016d40 <xTaskRemoveFromEventList>
 801558a:	4603      	mov	r3, r0
 801558c:	2b00      	cmp	r3, #0
 801558e:	d013      	beq.n	80155b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015590:	4b3f      	ldr	r3, [pc, #252]	; (8015690 <xQueueGenericSend+0x1f8>)
 8015592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015596:	601a      	str	r2, [r3, #0]
 8015598:	f3bf 8f4f 	dsb	sy
 801559c:	f3bf 8f6f 	isb	sy
 80155a0:	e00a      	b.n	80155b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80155a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d007      	beq.n	80155b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80155a8:	4b39      	ldr	r3, [pc, #228]	; (8015690 <xQueueGenericSend+0x1f8>)
 80155aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155ae:	601a      	str	r2, [r3, #0]
 80155b0:	f3bf 8f4f 	dsb	sy
 80155b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80155b8:	f002 fc1c 	bl	8017df4 <vPortExitCritical>
				return pdPASS;
 80155bc:	2301      	movs	r3, #1
 80155be:	e063      	b.n	8015688 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d103      	bne.n	80155ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80155c6:	f002 fc15 	bl	8017df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80155ca:	2300      	movs	r3, #0
 80155cc:	e05c      	b.n	8015688 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80155ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d106      	bne.n	80155e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80155d4:	f107 0314 	add.w	r3, r7, #20
 80155d8:	4618      	mov	r0, r3
 80155da:	f001 fc15 	bl	8016e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80155de:	2301      	movs	r3, #1
 80155e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80155e2:	f002 fc07 	bl	8017df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80155e6:	f001 f981 	bl	80168ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80155ea:	f002 fbd3 	bl	8017d94 <vPortEnterCritical>
 80155ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80155f4:	b25b      	sxtb	r3, r3
 80155f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155fa:	d103      	bne.n	8015604 <xQueueGenericSend+0x16c>
 80155fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155fe:	2200      	movs	r2, #0
 8015600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801560a:	b25b      	sxtb	r3, r3
 801560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015610:	d103      	bne.n	801561a <xQueueGenericSend+0x182>
 8015612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015614:	2200      	movs	r2, #0
 8015616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801561a:	f002 fbeb 	bl	8017df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801561e:	1d3a      	adds	r2, r7, #4
 8015620:	f107 0314 	add.w	r3, r7, #20
 8015624:	4611      	mov	r1, r2
 8015626:	4618      	mov	r0, r3
 8015628:	f001 fc04 	bl	8016e34 <xTaskCheckForTimeOut>
 801562c:	4603      	mov	r3, r0
 801562e:	2b00      	cmp	r3, #0
 8015630:	d124      	bne.n	801567c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015634:	f000 fcf5 	bl	8016022 <prvIsQueueFull>
 8015638:	4603      	mov	r3, r0
 801563a:	2b00      	cmp	r3, #0
 801563c:	d018      	beq.n	8015670 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015640:	3310      	adds	r3, #16
 8015642:	687a      	ldr	r2, [r7, #4]
 8015644:	4611      	mov	r1, r2
 8015646:	4618      	mov	r0, r3
 8015648:	f001 fb2a 	bl	8016ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801564c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801564e:	f000 fc80 	bl	8015f52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015652:	f001 f959 	bl	8016908 <xTaskResumeAll>
 8015656:	4603      	mov	r3, r0
 8015658:	2b00      	cmp	r3, #0
 801565a:	f47f af7c 	bne.w	8015556 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801565e:	4b0c      	ldr	r3, [pc, #48]	; (8015690 <xQueueGenericSend+0x1f8>)
 8015660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015664:	601a      	str	r2, [r3, #0]
 8015666:	f3bf 8f4f 	dsb	sy
 801566a:	f3bf 8f6f 	isb	sy
 801566e:	e772      	b.n	8015556 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015672:	f000 fc6e 	bl	8015f52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015676:	f001 f947 	bl	8016908 <xTaskResumeAll>
 801567a:	e76c      	b.n	8015556 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801567c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801567e:	f000 fc68 	bl	8015f52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015682:	f001 f941 	bl	8016908 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015688:	4618      	mov	r0, r3
 801568a:	3738      	adds	r7, #56	; 0x38
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}
 8015690:	e000ed04 	.word	0xe000ed04

08015694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b090      	sub	sp, #64	; 0x40
 8015698:	af00      	add	r7, sp, #0
 801569a:	60f8      	str	r0, [r7, #12]
 801569c:	60b9      	str	r1, [r7, #8]
 801569e:	607a      	str	r2, [r7, #4]
 80156a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80156a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d10a      	bne.n	80156c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80156ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b0:	f383 8811 	msr	BASEPRI, r3
 80156b4:	f3bf 8f6f 	isb	sy
 80156b8:	f3bf 8f4f 	dsb	sy
 80156bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80156be:	bf00      	nop
 80156c0:	e7fe      	b.n	80156c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d103      	bne.n	80156d0 <xQueueGenericSendFromISR+0x3c>
 80156c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d101      	bne.n	80156d4 <xQueueGenericSendFromISR+0x40>
 80156d0:	2301      	movs	r3, #1
 80156d2:	e000      	b.n	80156d6 <xQueueGenericSendFromISR+0x42>
 80156d4:	2300      	movs	r3, #0
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d10a      	bne.n	80156f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80156da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156de:	f383 8811 	msr	BASEPRI, r3
 80156e2:	f3bf 8f6f 	isb	sy
 80156e6:	f3bf 8f4f 	dsb	sy
 80156ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80156ec:	bf00      	nop
 80156ee:	e7fe      	b.n	80156ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	2b02      	cmp	r3, #2
 80156f4:	d103      	bne.n	80156fe <xQueueGenericSendFromISR+0x6a>
 80156f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156fa:	2b01      	cmp	r3, #1
 80156fc:	d101      	bne.n	8015702 <xQueueGenericSendFromISR+0x6e>
 80156fe:	2301      	movs	r3, #1
 8015700:	e000      	b.n	8015704 <xQueueGenericSendFromISR+0x70>
 8015702:	2300      	movs	r3, #0
 8015704:	2b00      	cmp	r3, #0
 8015706:	d10a      	bne.n	801571e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801570c:	f383 8811 	msr	BASEPRI, r3
 8015710:	f3bf 8f6f 	isb	sy
 8015714:	f3bf 8f4f 	dsb	sy
 8015718:	623b      	str	r3, [r7, #32]
}
 801571a:	bf00      	nop
 801571c:	e7fe      	b.n	801571c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801571e:	f002 fc1b 	bl	8017f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015722:	f3ef 8211 	mrs	r2, BASEPRI
 8015726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801572a:	f383 8811 	msr	BASEPRI, r3
 801572e:	f3bf 8f6f 	isb	sy
 8015732:	f3bf 8f4f 	dsb	sy
 8015736:	61fa      	str	r2, [r7, #28]
 8015738:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801573a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801573c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015746:	429a      	cmp	r2, r3
 8015748:	d302      	bcc.n	8015750 <xQueueGenericSendFromISR+0xbc>
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	2b02      	cmp	r3, #2
 801574e:	d12f      	bne.n	80157b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801575e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015760:	683a      	ldr	r2, [r7, #0]
 8015762:	68b9      	ldr	r1, [r7, #8]
 8015764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015766:	f000 fb64 	bl	8015e32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801576a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015772:	d112      	bne.n	801579a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015778:	2b00      	cmp	r3, #0
 801577a:	d016      	beq.n	80157aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801577e:	3324      	adds	r3, #36	; 0x24
 8015780:	4618      	mov	r0, r3
 8015782:	f001 fadd 	bl	8016d40 <xTaskRemoveFromEventList>
 8015786:	4603      	mov	r3, r0
 8015788:	2b00      	cmp	r3, #0
 801578a:	d00e      	beq.n	80157aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d00b      	beq.n	80157aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2201      	movs	r2, #1
 8015796:	601a      	str	r2, [r3, #0]
 8015798:	e007      	b.n	80157aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801579a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801579e:	3301      	adds	r3, #1
 80157a0:	b2db      	uxtb	r3, r3
 80157a2:	b25a      	sxtb	r2, r3
 80157a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80157aa:	2301      	movs	r3, #1
 80157ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80157ae:	e001      	b.n	80157b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80157b0:	2300      	movs	r3, #0
 80157b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80157b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80157be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80157c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3740      	adds	r7, #64	; 0x40
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}

080157ca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80157ca:	b580      	push	{r7, lr}
 80157cc:	b08e      	sub	sp, #56	; 0x38
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	6078      	str	r0, [r7, #4]
 80157d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80157d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d10a      	bne.n	80157f4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80157de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157e2:	f383 8811 	msr	BASEPRI, r3
 80157e6:	f3bf 8f6f 	isb	sy
 80157ea:	f3bf 8f4f 	dsb	sy
 80157ee:	623b      	str	r3, [r7, #32]
}
 80157f0:	bf00      	nop
 80157f2:	e7fe      	b.n	80157f2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80157f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d00a      	beq.n	8015812 <xQueueGiveFromISR+0x48>
	__asm volatile
 80157fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015800:	f383 8811 	msr	BASEPRI, r3
 8015804:	f3bf 8f6f 	isb	sy
 8015808:	f3bf 8f4f 	dsb	sy
 801580c:	61fb      	str	r3, [r7, #28]
}
 801580e:	bf00      	nop
 8015810:	e7fe      	b.n	8015810 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d103      	bne.n	8015822 <xQueueGiveFromISR+0x58>
 801581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801581c:	689b      	ldr	r3, [r3, #8]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d101      	bne.n	8015826 <xQueueGiveFromISR+0x5c>
 8015822:	2301      	movs	r3, #1
 8015824:	e000      	b.n	8015828 <xQueueGiveFromISR+0x5e>
 8015826:	2300      	movs	r3, #0
 8015828:	2b00      	cmp	r3, #0
 801582a:	d10a      	bne.n	8015842 <xQueueGiveFromISR+0x78>
	__asm volatile
 801582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015830:	f383 8811 	msr	BASEPRI, r3
 8015834:	f3bf 8f6f 	isb	sy
 8015838:	f3bf 8f4f 	dsb	sy
 801583c:	61bb      	str	r3, [r7, #24]
}
 801583e:	bf00      	nop
 8015840:	e7fe      	b.n	8015840 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015842:	f002 fb89 	bl	8017f58 <vPortValidateInterruptPriority>
	__asm volatile
 8015846:	f3ef 8211 	mrs	r2, BASEPRI
 801584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801584e:	f383 8811 	msr	BASEPRI, r3
 8015852:	f3bf 8f6f 	isb	sy
 8015856:	f3bf 8f4f 	dsb	sy
 801585a:	617a      	str	r2, [r7, #20]
 801585c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801585e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015860:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015866:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801586a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801586c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801586e:	429a      	cmp	r2, r3
 8015870:	d22b      	bcs.n	80158ca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801587e:	1c5a      	adds	r2, r3, #1
 8015880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015882:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015884:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015888:	f1b3 3fff 	cmp.w	r3, #4294967295
 801588c:	d112      	bne.n	80158b4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015892:	2b00      	cmp	r3, #0
 8015894:	d016      	beq.n	80158c4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015898:	3324      	adds	r3, #36	; 0x24
 801589a:	4618      	mov	r0, r3
 801589c:	f001 fa50 	bl	8016d40 <xTaskRemoveFromEventList>
 80158a0:	4603      	mov	r3, r0
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d00e      	beq.n	80158c4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d00b      	beq.n	80158c4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	2201      	movs	r2, #1
 80158b0:	601a      	str	r2, [r3, #0]
 80158b2:	e007      	b.n	80158c4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80158b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158b8:	3301      	adds	r3, #1
 80158ba:	b2db      	uxtb	r3, r3
 80158bc:	b25a      	sxtb	r2, r3
 80158be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80158c4:	2301      	movs	r3, #1
 80158c6:	637b      	str	r3, [r7, #52]	; 0x34
 80158c8:	e001      	b.n	80158ce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80158ca:	2300      	movs	r3, #0
 80158cc:	637b      	str	r3, [r7, #52]	; 0x34
 80158ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	f383 8811 	msr	BASEPRI, r3
}
 80158d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80158da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3738      	adds	r7, #56	; 0x38
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}

080158e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b08c      	sub	sp, #48	; 0x30
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	60f8      	str	r0, [r7, #12]
 80158ec:	60b9      	str	r1, [r7, #8]
 80158ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80158f0:	2300      	movs	r3, #0
 80158f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80158f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d10a      	bne.n	8015914 <xQueueReceive+0x30>
	__asm volatile
 80158fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015902:	f383 8811 	msr	BASEPRI, r3
 8015906:	f3bf 8f6f 	isb	sy
 801590a:	f3bf 8f4f 	dsb	sy
 801590e:	623b      	str	r3, [r7, #32]
}
 8015910:	bf00      	nop
 8015912:	e7fe      	b.n	8015912 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d103      	bne.n	8015922 <xQueueReceive+0x3e>
 801591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801591e:	2b00      	cmp	r3, #0
 8015920:	d101      	bne.n	8015926 <xQueueReceive+0x42>
 8015922:	2301      	movs	r3, #1
 8015924:	e000      	b.n	8015928 <xQueueReceive+0x44>
 8015926:	2300      	movs	r3, #0
 8015928:	2b00      	cmp	r3, #0
 801592a:	d10a      	bne.n	8015942 <xQueueReceive+0x5e>
	__asm volatile
 801592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015930:	f383 8811 	msr	BASEPRI, r3
 8015934:	f3bf 8f6f 	isb	sy
 8015938:	f3bf 8f4f 	dsb	sy
 801593c:	61fb      	str	r3, [r7, #28]
}
 801593e:	bf00      	nop
 8015940:	e7fe      	b.n	8015940 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015942:	f001 fbcf 	bl	80170e4 <xTaskGetSchedulerState>
 8015946:	4603      	mov	r3, r0
 8015948:	2b00      	cmp	r3, #0
 801594a:	d102      	bne.n	8015952 <xQueueReceive+0x6e>
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d101      	bne.n	8015956 <xQueueReceive+0x72>
 8015952:	2301      	movs	r3, #1
 8015954:	e000      	b.n	8015958 <xQueueReceive+0x74>
 8015956:	2300      	movs	r3, #0
 8015958:	2b00      	cmp	r3, #0
 801595a:	d10a      	bne.n	8015972 <xQueueReceive+0x8e>
	__asm volatile
 801595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015960:	f383 8811 	msr	BASEPRI, r3
 8015964:	f3bf 8f6f 	isb	sy
 8015968:	f3bf 8f4f 	dsb	sy
 801596c:	61bb      	str	r3, [r7, #24]
}
 801596e:	bf00      	nop
 8015970:	e7fe      	b.n	8015970 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015972:	f002 fa0f 	bl	8017d94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801597a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801597e:	2b00      	cmp	r3, #0
 8015980:	d01f      	beq.n	80159c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015982:	68b9      	ldr	r1, [r7, #8]
 8015984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015986:	f000 fabe 	bl	8015f06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801598c:	1e5a      	subs	r2, r3, #1
 801598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015990:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015994:	691b      	ldr	r3, [r3, #16]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d00f      	beq.n	80159ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599c:	3310      	adds	r3, #16
 801599e:	4618      	mov	r0, r3
 80159a0:	f001 f9ce 	bl	8016d40 <xTaskRemoveFromEventList>
 80159a4:	4603      	mov	r3, r0
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d007      	beq.n	80159ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80159aa:	4b3d      	ldr	r3, [pc, #244]	; (8015aa0 <xQueueReceive+0x1bc>)
 80159ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159b0:	601a      	str	r2, [r3, #0]
 80159b2:	f3bf 8f4f 	dsb	sy
 80159b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80159ba:	f002 fa1b 	bl	8017df4 <vPortExitCritical>
				return pdPASS;
 80159be:	2301      	movs	r3, #1
 80159c0:	e069      	b.n	8015a96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d103      	bne.n	80159d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80159c8:	f002 fa14 	bl	8017df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80159cc:	2300      	movs	r3, #0
 80159ce:	e062      	b.n	8015a96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80159d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d106      	bne.n	80159e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80159d6:	f107 0310 	add.w	r3, r7, #16
 80159da:	4618      	mov	r0, r3
 80159dc:	f001 fa14 	bl	8016e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80159e0:	2301      	movs	r3, #1
 80159e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80159e4:	f002 fa06 	bl	8017df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80159e8:	f000 ff80 	bl	80168ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80159ec:	f002 f9d2 	bl	8017d94 <vPortEnterCritical>
 80159f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80159f6:	b25b      	sxtb	r3, r3
 80159f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159fc:	d103      	bne.n	8015a06 <xQueueReceive+0x122>
 80159fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a00:	2200      	movs	r2, #0
 8015a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a0c:	b25b      	sxtb	r3, r3
 8015a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a12:	d103      	bne.n	8015a1c <xQueueReceive+0x138>
 8015a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a16:	2200      	movs	r2, #0
 8015a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015a1c:	f002 f9ea 	bl	8017df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015a20:	1d3a      	adds	r2, r7, #4
 8015a22:	f107 0310 	add.w	r3, r7, #16
 8015a26:	4611      	mov	r1, r2
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f001 fa03 	bl	8016e34 <xTaskCheckForTimeOut>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d123      	bne.n	8015a7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a36:	f000 fade 	bl	8015ff6 <prvIsQueueEmpty>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d017      	beq.n	8015a70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a42:	3324      	adds	r3, #36	; 0x24
 8015a44:	687a      	ldr	r2, [r7, #4]
 8015a46:	4611      	mov	r1, r2
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f001 f929 	bl	8016ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a50:	f000 fa7f 	bl	8015f52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015a54:	f000 ff58 	bl	8016908 <xTaskResumeAll>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d189      	bne.n	8015972 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8015a5e:	4b10      	ldr	r3, [pc, #64]	; (8015aa0 <xQueueReceive+0x1bc>)
 8015a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a64:	601a      	str	r2, [r3, #0]
 8015a66:	f3bf 8f4f 	dsb	sy
 8015a6a:	f3bf 8f6f 	isb	sy
 8015a6e:	e780      	b.n	8015972 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a72:	f000 fa6e 	bl	8015f52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015a76:	f000 ff47 	bl	8016908 <xTaskResumeAll>
 8015a7a:	e77a      	b.n	8015972 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a7e:	f000 fa68 	bl	8015f52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a82:	f000 ff41 	bl	8016908 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a88:	f000 fab5 	bl	8015ff6 <prvIsQueueEmpty>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	f43f af6f 	beq.w	8015972 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015a94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	3730      	adds	r7, #48	; 0x30
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}
 8015a9e:	bf00      	nop
 8015aa0:	e000ed04 	.word	0xe000ed04

08015aa4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b08e      	sub	sp, #56	; 0x38
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d10a      	bne.n	8015ad6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ac4:	f383 8811 	msr	BASEPRI, r3
 8015ac8:	f3bf 8f6f 	isb	sy
 8015acc:	f3bf 8f4f 	dsb	sy
 8015ad0:	623b      	str	r3, [r7, #32]
}
 8015ad2:	bf00      	nop
 8015ad4:	e7fe      	b.n	8015ad4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d00a      	beq.n	8015af4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8015ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ae2:	f383 8811 	msr	BASEPRI, r3
 8015ae6:	f3bf 8f6f 	isb	sy
 8015aea:	f3bf 8f4f 	dsb	sy
 8015aee:	61fb      	str	r3, [r7, #28]
}
 8015af0:	bf00      	nop
 8015af2:	e7fe      	b.n	8015af2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015af4:	f001 faf6 	bl	80170e4 <xTaskGetSchedulerState>
 8015af8:	4603      	mov	r3, r0
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d102      	bne.n	8015b04 <xQueueSemaphoreTake+0x60>
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d101      	bne.n	8015b08 <xQueueSemaphoreTake+0x64>
 8015b04:	2301      	movs	r3, #1
 8015b06:	e000      	b.n	8015b0a <xQueueSemaphoreTake+0x66>
 8015b08:	2300      	movs	r3, #0
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d10a      	bne.n	8015b24 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8015b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b12:	f383 8811 	msr	BASEPRI, r3
 8015b16:	f3bf 8f6f 	isb	sy
 8015b1a:	f3bf 8f4f 	dsb	sy
 8015b1e:	61bb      	str	r3, [r7, #24]
}
 8015b20:	bf00      	nop
 8015b22:	e7fe      	b.n	8015b22 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015b24:	f002 f936 	bl	8017d94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b2c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d024      	beq.n	8015b7e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b36:	1e5a      	subs	r2, r3, #1
 8015b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d104      	bne.n	8015b4e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015b44:	f001 fc44 	bl	80173d0 <pvTaskIncrementMutexHeldCount>
 8015b48:	4602      	mov	r2, r0
 8015b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b4c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b50:	691b      	ldr	r3, [r3, #16]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d00f      	beq.n	8015b76 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b58:	3310      	adds	r3, #16
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f001 f8f0 	bl	8016d40 <xTaskRemoveFromEventList>
 8015b60:	4603      	mov	r3, r0
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d007      	beq.n	8015b76 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015b66:	4b54      	ldr	r3, [pc, #336]	; (8015cb8 <xQueueSemaphoreTake+0x214>)
 8015b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b6c:	601a      	str	r2, [r3, #0]
 8015b6e:	f3bf 8f4f 	dsb	sy
 8015b72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015b76:	f002 f93d 	bl	8017df4 <vPortExitCritical>
				return pdPASS;
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	e097      	b.n	8015cae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d111      	bne.n	8015ba8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d00a      	beq.n	8015ba0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8015b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b8e:	f383 8811 	msr	BASEPRI, r3
 8015b92:	f3bf 8f6f 	isb	sy
 8015b96:	f3bf 8f4f 	dsb	sy
 8015b9a:	617b      	str	r3, [r7, #20]
}
 8015b9c:	bf00      	nop
 8015b9e:	e7fe      	b.n	8015b9e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015ba0:	f002 f928 	bl	8017df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	e082      	b.n	8015cae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d106      	bne.n	8015bbc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015bae:	f107 030c 	add.w	r3, r7, #12
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	f001 f928 	bl	8016e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015bb8:	2301      	movs	r3, #1
 8015bba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015bbc:	f002 f91a 	bl	8017df4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015bc0:	f000 fe94 	bl	80168ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015bc4:	f002 f8e6 	bl	8017d94 <vPortEnterCritical>
 8015bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015bce:	b25b      	sxtb	r3, r3
 8015bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bd4:	d103      	bne.n	8015bde <xQueueSemaphoreTake+0x13a>
 8015bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd8:	2200      	movs	r2, #0
 8015bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015be4:	b25b      	sxtb	r3, r3
 8015be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bea:	d103      	bne.n	8015bf4 <xQueueSemaphoreTake+0x150>
 8015bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bee:	2200      	movs	r2, #0
 8015bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015bf4:	f002 f8fe 	bl	8017df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015bf8:	463a      	mov	r2, r7
 8015bfa:	f107 030c 	add.w	r3, r7, #12
 8015bfe:	4611      	mov	r1, r2
 8015c00:	4618      	mov	r0, r3
 8015c02:	f001 f917 	bl	8016e34 <xTaskCheckForTimeOut>
 8015c06:	4603      	mov	r3, r0
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d132      	bne.n	8015c72 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c0e:	f000 f9f2 	bl	8015ff6 <prvIsQueueEmpty>
 8015c12:	4603      	mov	r3, r0
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d026      	beq.n	8015c66 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d109      	bne.n	8015c34 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015c20:	f002 f8b8 	bl	8017d94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c26:	689b      	ldr	r3, [r3, #8]
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f001 fa79 	bl	8017120 <xTaskPriorityInherit>
 8015c2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015c30:	f002 f8e0 	bl	8017df4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c36:	3324      	adds	r3, #36	; 0x24
 8015c38:	683a      	ldr	r2, [r7, #0]
 8015c3a:	4611      	mov	r1, r2
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f001 f82f 	bl	8016ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c44:	f000 f985 	bl	8015f52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015c48:	f000 fe5e 	bl	8016908 <xTaskResumeAll>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	f47f af68 	bne.w	8015b24 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015c54:	4b18      	ldr	r3, [pc, #96]	; (8015cb8 <xQueueSemaphoreTake+0x214>)
 8015c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c5a:	601a      	str	r2, [r3, #0]
 8015c5c:	f3bf 8f4f 	dsb	sy
 8015c60:	f3bf 8f6f 	isb	sy
 8015c64:	e75e      	b.n	8015b24 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015c66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c68:	f000 f973 	bl	8015f52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015c6c:	f000 fe4c 	bl	8016908 <xTaskResumeAll>
 8015c70:	e758      	b.n	8015b24 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015c72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c74:	f000 f96d 	bl	8015f52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015c78:	f000 fe46 	bl	8016908 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c7e:	f000 f9ba 	bl	8015ff6 <prvIsQueueEmpty>
 8015c82:	4603      	mov	r3, r0
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	f43f af4d 	beq.w	8015b24 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d00d      	beq.n	8015cac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015c90:	f002 f880 	bl	8017d94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c96:	f000 f8b4 	bl	8015e02 <prvGetDisinheritPriorityAfterTimeout>
 8015c9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9e:	689b      	ldr	r3, [r3, #8]
 8015ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f001 fb12 	bl	80172cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015ca8:	f002 f8a4 	bl	8017df4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015cac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3738      	adds	r7, #56	; 0x38
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	e000ed04 	.word	0xe000ed04

08015cbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b08e      	sub	sp, #56	; 0x38
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	60f8      	str	r0, [r7, #12]
 8015cc4:	60b9      	str	r1, [r7, #8]
 8015cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d10a      	bne.n	8015ce8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cd6:	f383 8811 	msr	BASEPRI, r3
 8015cda:	f3bf 8f6f 	isb	sy
 8015cde:	f3bf 8f4f 	dsb	sy
 8015ce2:	623b      	str	r3, [r7, #32]
}
 8015ce4:	bf00      	nop
 8015ce6:	e7fe      	b.n	8015ce6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d103      	bne.n	8015cf6 <xQueueReceiveFromISR+0x3a>
 8015cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d101      	bne.n	8015cfa <xQueueReceiveFromISR+0x3e>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	e000      	b.n	8015cfc <xQueueReceiveFromISR+0x40>
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10a      	bne.n	8015d16 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d04:	f383 8811 	msr	BASEPRI, r3
 8015d08:	f3bf 8f6f 	isb	sy
 8015d0c:	f3bf 8f4f 	dsb	sy
 8015d10:	61fb      	str	r3, [r7, #28]
}
 8015d12:	bf00      	nop
 8015d14:	e7fe      	b.n	8015d14 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d16:	f002 f91f 	bl	8017f58 <vPortValidateInterruptPriority>
	__asm volatile
 8015d1a:	f3ef 8211 	mrs	r2, BASEPRI
 8015d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d22:	f383 8811 	msr	BASEPRI, r3
 8015d26:	f3bf 8f6f 	isb	sy
 8015d2a:	f3bf 8f4f 	dsb	sy
 8015d2e:	61ba      	str	r2, [r7, #24]
 8015d30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015d32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015d34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d02f      	beq.n	8015da2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015d4c:	68b9      	ldr	r1, [r7, #8]
 8015d4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d50:	f000 f8d9 	bl	8015f06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d56:	1e5a      	subs	r2, r3, #1
 8015d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015d5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d64:	d112      	bne.n	8015d8c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d68:	691b      	ldr	r3, [r3, #16]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d016      	beq.n	8015d9c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d70:	3310      	adds	r3, #16
 8015d72:	4618      	mov	r0, r3
 8015d74:	f000 ffe4 	bl	8016d40 <xTaskRemoveFromEventList>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d00e      	beq.n	8015d9c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d00b      	beq.n	8015d9c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2201      	movs	r2, #1
 8015d88:	601a      	str	r2, [r3, #0]
 8015d8a:	e007      	b.n	8015d9c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d90:	3301      	adds	r3, #1
 8015d92:	b2db      	uxtb	r3, r3
 8015d94:	b25a      	sxtb	r2, r3
 8015d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8015da0:	e001      	b.n	8015da6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015da2:	2300      	movs	r3, #0
 8015da4:	637b      	str	r3, [r7, #52]	; 0x34
 8015da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015da8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015daa:	693b      	ldr	r3, [r7, #16]
 8015dac:	f383 8811 	msr	BASEPRI, r3
}
 8015db0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	3738      	adds	r7, #56	; 0x38
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d10a      	bne.n	8015de4 <vQueueDelete+0x28>
	__asm volatile
 8015dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd2:	f383 8811 	msr	BASEPRI, r3
 8015dd6:	f3bf 8f6f 	isb	sy
 8015dda:	f3bf 8f4f 	dsb	sy
 8015dde:	60bb      	str	r3, [r7, #8]
}
 8015de0:	bf00      	nop
 8015de2:	e7fe      	b.n	8015de2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015de4:	68f8      	ldr	r0, [r7, #12]
 8015de6:	f000 f95f 	bl	80160a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d102      	bne.n	8015dfa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015df4:	68f8      	ldr	r0, [r7, #12]
 8015df6:	f002 f9bb 	bl	8018170 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015dfa:	bf00      	nop
 8015dfc:	3710      	adds	r7, #16
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}

08015e02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015e02:	b480      	push	{r7}
 8015e04:	b085      	sub	sp, #20
 8015e06:	af00      	add	r7, sp, #0
 8015e08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d006      	beq.n	8015e20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8015e1c:	60fb      	str	r3, [r7, #12]
 8015e1e:	e001      	b.n	8015e24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015e20:	2300      	movs	r3, #0
 8015e22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015e24:	68fb      	ldr	r3, [r7, #12]
	}
 8015e26:	4618      	mov	r0, r3
 8015e28:	3714      	adds	r7, #20
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e30:	4770      	bx	lr

08015e32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015e32:	b580      	push	{r7, lr}
 8015e34:	b086      	sub	sp, #24
 8015e36:	af00      	add	r7, sp, #0
 8015e38:	60f8      	str	r0, [r7, #12]
 8015e3a:	60b9      	str	r1, [r7, #8]
 8015e3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d10d      	bne.n	8015e6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d14d      	bne.n	8015ef4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	689b      	ldr	r3, [r3, #8]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f001 f9c7 	bl	80171f0 <xTaskPriorityDisinherit>
 8015e62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	2200      	movs	r2, #0
 8015e68:	609a      	str	r2, [r3, #8]
 8015e6a:	e043      	b.n	8015ef4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d119      	bne.n	8015ea6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	6858      	ldr	r0, [r3, #4]
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e7a:	461a      	mov	r2, r3
 8015e7c:	68b9      	ldr	r1, [r7, #8]
 8015e7e:	f004 f895 	bl	8019fac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	685a      	ldr	r2, [r3, #4]
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e8a:	441a      	add	r2, r3
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	685a      	ldr	r2, [r3, #4]
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	689b      	ldr	r3, [r3, #8]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d32b      	bcc.n	8015ef4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	681a      	ldr	r2, [r3, #0]
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	605a      	str	r2, [r3, #4]
 8015ea4:	e026      	b.n	8015ef4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	68d8      	ldr	r0, [r3, #12]
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eae:	461a      	mov	r2, r3
 8015eb0:	68b9      	ldr	r1, [r7, #8]
 8015eb2:	f004 f87b 	bl	8019fac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	68da      	ldr	r2, [r3, #12]
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ebe:	425b      	negs	r3, r3
 8015ec0:	441a      	add	r2, r3
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	68da      	ldr	r2, [r3, #12]
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d207      	bcs.n	8015ee2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	689a      	ldr	r2, [r3, #8]
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eda:	425b      	negs	r3, r3
 8015edc:	441a      	add	r2, r3
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2b02      	cmp	r3, #2
 8015ee6:	d105      	bne.n	8015ef4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ee8:	693b      	ldr	r3, [r7, #16]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d002      	beq.n	8015ef4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015eee:	693b      	ldr	r3, [r7, #16]
 8015ef0:	3b01      	subs	r3, #1
 8015ef2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	1c5a      	adds	r2, r3, #1
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015efc:	697b      	ldr	r3, [r7, #20]
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	3718      	adds	r7, #24
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}

08015f06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015f06:	b580      	push	{r7, lr}
 8015f08:	b082      	sub	sp, #8
 8015f0a:	af00      	add	r7, sp, #0
 8015f0c:	6078      	str	r0, [r7, #4]
 8015f0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d018      	beq.n	8015f4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	68da      	ldr	r2, [r3, #12]
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f20:	441a      	add	r2, r3
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	68da      	ldr	r2, [r3, #12]
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	689b      	ldr	r3, [r3, #8]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d303      	bcc.n	8015f3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681a      	ldr	r2, [r3, #0]
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	68d9      	ldr	r1, [r3, #12]
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f42:	461a      	mov	r2, r3
 8015f44:	6838      	ldr	r0, [r7, #0]
 8015f46:	f004 f831 	bl	8019fac <memcpy>
	}
}
 8015f4a:	bf00      	nop
 8015f4c:	3708      	adds	r7, #8
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}

08015f52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015f52:	b580      	push	{r7, lr}
 8015f54:	b084      	sub	sp, #16
 8015f56:	af00      	add	r7, sp, #0
 8015f58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015f5a:	f001 ff1b 	bl	8017d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015f64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015f66:	e011      	b.n	8015f8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d012      	beq.n	8015f96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	3324      	adds	r3, #36	; 0x24
 8015f74:	4618      	mov	r0, r3
 8015f76:	f000 fee3 	bl	8016d40 <xTaskRemoveFromEventList>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d001      	beq.n	8015f84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015f80:	f000 ffba 	bl	8016ef8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015f84:	7bfb      	ldrb	r3, [r7, #15]
 8015f86:	3b01      	subs	r3, #1
 8015f88:	b2db      	uxtb	r3, r3
 8015f8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	dce9      	bgt.n	8015f68 <prvUnlockQueue+0x16>
 8015f94:	e000      	b.n	8015f98 <prvUnlockQueue+0x46>
					break;
 8015f96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	22ff      	movs	r2, #255	; 0xff
 8015f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015fa0:	f001 ff28 	bl	8017df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015fa4:	f001 fef6 	bl	8017d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015fb0:	e011      	b.n	8015fd6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	691b      	ldr	r3, [r3, #16]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d012      	beq.n	8015fe0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	3310      	adds	r3, #16
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f000 febe 	bl	8016d40 <xTaskRemoveFromEventList>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d001      	beq.n	8015fce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015fca:	f000 ff95 	bl	8016ef8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015fce:	7bbb      	ldrb	r3, [r7, #14]
 8015fd0:	3b01      	subs	r3, #1
 8015fd2:	b2db      	uxtb	r3, r3
 8015fd4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015fd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	dce9      	bgt.n	8015fb2 <prvUnlockQueue+0x60>
 8015fde:	e000      	b.n	8015fe2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015fe0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	22ff      	movs	r2, #255	; 0xff
 8015fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015fea:	f001 ff03 	bl	8017df4 <vPortExitCritical>
}
 8015fee:	bf00      	nop
 8015ff0:	3710      	adds	r7, #16
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}

08015ff6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015ff6:	b580      	push	{r7, lr}
 8015ff8:	b084      	sub	sp, #16
 8015ffa:	af00      	add	r7, sp, #0
 8015ffc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015ffe:	f001 fec9 	bl	8017d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016006:	2b00      	cmp	r3, #0
 8016008:	d102      	bne.n	8016010 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801600a:	2301      	movs	r3, #1
 801600c:	60fb      	str	r3, [r7, #12]
 801600e:	e001      	b.n	8016014 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016010:	2300      	movs	r3, #0
 8016012:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016014:	f001 feee 	bl	8017df4 <vPortExitCritical>

	return xReturn;
 8016018:	68fb      	ldr	r3, [r7, #12]
}
 801601a:	4618      	mov	r0, r3
 801601c:	3710      	adds	r7, #16
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}

08016022 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016022:	b580      	push	{r7, lr}
 8016024:	b084      	sub	sp, #16
 8016026:	af00      	add	r7, sp, #0
 8016028:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801602a:	f001 feb3 	bl	8017d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016036:	429a      	cmp	r2, r3
 8016038:	d102      	bne.n	8016040 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801603a:	2301      	movs	r3, #1
 801603c:	60fb      	str	r3, [r7, #12]
 801603e:	e001      	b.n	8016044 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016040:	2300      	movs	r3, #0
 8016042:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016044:	f001 fed6 	bl	8017df4 <vPortExitCritical>

	return xReturn;
 8016048:	68fb      	ldr	r3, [r7, #12]
}
 801604a:	4618      	mov	r0, r3
 801604c:	3710      	adds	r7, #16
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}
	...

08016054 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016054:	b480      	push	{r7}
 8016056:	b085      	sub	sp, #20
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801605e:	2300      	movs	r3, #0
 8016060:	60fb      	str	r3, [r7, #12]
 8016062:	e014      	b.n	801608e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016064:	4a0f      	ldr	r2, [pc, #60]	; (80160a4 <vQueueAddToRegistry+0x50>)
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d10b      	bne.n	8016088 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016070:	490c      	ldr	r1, [pc, #48]	; (80160a4 <vQueueAddToRegistry+0x50>)
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	683a      	ldr	r2, [r7, #0]
 8016076:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801607a:	4a0a      	ldr	r2, [pc, #40]	; (80160a4 <vQueueAddToRegistry+0x50>)
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	00db      	lsls	r3, r3, #3
 8016080:	4413      	add	r3, r2
 8016082:	687a      	ldr	r2, [r7, #4]
 8016084:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016086:	e006      	b.n	8016096 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	3301      	adds	r3, #1
 801608c:	60fb      	str	r3, [r7, #12]
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	2b07      	cmp	r3, #7
 8016092:	d9e7      	bls.n	8016064 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016094:	bf00      	nop
 8016096:	bf00      	nop
 8016098:	3714      	adds	r7, #20
 801609a:	46bd      	mov	sp, r7
 801609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a0:	4770      	bx	lr
 80160a2:	bf00      	nop
 80160a4:	200074e4 	.word	0x200074e4

080160a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80160a8:	b480      	push	{r7}
 80160aa:	b085      	sub	sp, #20
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160b0:	2300      	movs	r3, #0
 80160b2:	60fb      	str	r3, [r7, #12]
 80160b4:	e016      	b.n	80160e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80160b6:	4a10      	ldr	r2, [pc, #64]	; (80160f8 <vQueueUnregisterQueue+0x50>)
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	00db      	lsls	r3, r3, #3
 80160bc:	4413      	add	r3, r2
 80160be:	685b      	ldr	r3, [r3, #4]
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d10b      	bne.n	80160de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80160c6:	4a0c      	ldr	r2, [pc, #48]	; (80160f8 <vQueueUnregisterQueue+0x50>)
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	2100      	movs	r1, #0
 80160cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80160d0:	4a09      	ldr	r2, [pc, #36]	; (80160f8 <vQueueUnregisterQueue+0x50>)
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	00db      	lsls	r3, r3, #3
 80160d6:	4413      	add	r3, r2
 80160d8:	2200      	movs	r2, #0
 80160da:	605a      	str	r2, [r3, #4]
				break;
 80160dc:	e006      	b.n	80160ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	3301      	adds	r3, #1
 80160e2:	60fb      	str	r3, [r7, #12]
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	2b07      	cmp	r3, #7
 80160e8:	d9e5      	bls.n	80160b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80160ea:	bf00      	nop
 80160ec:	bf00      	nop
 80160ee:	3714      	adds	r7, #20
 80160f0:	46bd      	mov	sp, r7
 80160f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f6:	4770      	bx	lr
 80160f8:	200074e4 	.word	0x200074e4

080160fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b086      	sub	sp, #24
 8016100:	af00      	add	r7, sp, #0
 8016102:	60f8      	str	r0, [r7, #12]
 8016104:	60b9      	str	r1, [r7, #8]
 8016106:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801610c:	f001 fe42 	bl	8017d94 <vPortEnterCritical>
 8016110:	697b      	ldr	r3, [r7, #20]
 8016112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016116:	b25b      	sxtb	r3, r3
 8016118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801611c:	d103      	bne.n	8016126 <vQueueWaitForMessageRestricted+0x2a>
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	2200      	movs	r2, #0
 8016122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016126:	697b      	ldr	r3, [r7, #20]
 8016128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801612c:	b25b      	sxtb	r3, r3
 801612e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016132:	d103      	bne.n	801613c <vQueueWaitForMessageRestricted+0x40>
 8016134:	697b      	ldr	r3, [r7, #20]
 8016136:	2200      	movs	r2, #0
 8016138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801613c:	f001 fe5a 	bl	8017df4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016140:	697b      	ldr	r3, [r7, #20]
 8016142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016144:	2b00      	cmp	r3, #0
 8016146:	d106      	bne.n	8016156 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016148:	697b      	ldr	r3, [r7, #20]
 801614a:	3324      	adds	r3, #36	; 0x24
 801614c:	687a      	ldr	r2, [r7, #4]
 801614e:	68b9      	ldr	r1, [r7, #8]
 8016150:	4618      	mov	r0, r3
 8016152:	f000 fdc9 	bl	8016ce8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016156:	6978      	ldr	r0, [r7, #20]
 8016158:	f7ff fefb 	bl	8015f52 <prvUnlockQueue>
	}
 801615c:	bf00      	nop
 801615e:	3718      	adds	r7, #24
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}

08016164 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016164:	b580      	push	{r7, lr}
 8016166:	b08e      	sub	sp, #56	; 0x38
 8016168:	af04      	add	r7, sp, #16
 801616a:	60f8      	str	r0, [r7, #12]
 801616c:	60b9      	str	r1, [r7, #8]
 801616e:	607a      	str	r2, [r7, #4]
 8016170:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016174:	2b00      	cmp	r3, #0
 8016176:	d10a      	bne.n	801618e <xTaskCreateStatic+0x2a>
	__asm volatile
 8016178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801617c:	f383 8811 	msr	BASEPRI, r3
 8016180:	f3bf 8f6f 	isb	sy
 8016184:	f3bf 8f4f 	dsb	sy
 8016188:	623b      	str	r3, [r7, #32]
}
 801618a:	bf00      	nop
 801618c:	e7fe      	b.n	801618c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016190:	2b00      	cmp	r3, #0
 8016192:	d10a      	bne.n	80161aa <xTaskCreateStatic+0x46>
	__asm volatile
 8016194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016198:	f383 8811 	msr	BASEPRI, r3
 801619c:	f3bf 8f6f 	isb	sy
 80161a0:	f3bf 8f4f 	dsb	sy
 80161a4:	61fb      	str	r3, [r7, #28]
}
 80161a6:	bf00      	nop
 80161a8:	e7fe      	b.n	80161a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80161aa:	23bc      	movs	r3, #188	; 0xbc
 80161ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80161ae:	693b      	ldr	r3, [r7, #16]
 80161b0:	2bbc      	cmp	r3, #188	; 0xbc
 80161b2:	d00a      	beq.n	80161ca <xTaskCreateStatic+0x66>
	__asm volatile
 80161b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b8:	f383 8811 	msr	BASEPRI, r3
 80161bc:	f3bf 8f6f 	isb	sy
 80161c0:	f3bf 8f4f 	dsb	sy
 80161c4:	61bb      	str	r3, [r7, #24]
}
 80161c6:	bf00      	nop
 80161c8:	e7fe      	b.n	80161c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80161ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80161cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d01e      	beq.n	8016210 <xTaskCreateStatic+0xac>
 80161d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d01b      	beq.n	8016210 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80161d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80161dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80161e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80161e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e4:	2202      	movs	r2, #2
 80161e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80161ea:	2300      	movs	r3, #0
 80161ec:	9303      	str	r3, [sp, #12]
 80161ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f0:	9302      	str	r3, [sp, #8]
 80161f2:	f107 0314 	add.w	r3, r7, #20
 80161f6:	9301      	str	r3, [sp, #4]
 80161f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161fa:	9300      	str	r3, [sp, #0]
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	68b9      	ldr	r1, [r7, #8]
 8016202:	68f8      	ldr	r0, [r7, #12]
 8016204:	f000 f850 	bl	80162a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801620a:	f000 f8f3 	bl	80163f4 <prvAddNewTaskToReadyList>
 801620e:	e001      	b.n	8016214 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016210:	2300      	movs	r3, #0
 8016212:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016214:	697b      	ldr	r3, [r7, #20]
	}
 8016216:	4618      	mov	r0, r3
 8016218:	3728      	adds	r7, #40	; 0x28
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}

0801621e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801621e:	b580      	push	{r7, lr}
 8016220:	b08c      	sub	sp, #48	; 0x30
 8016222:	af04      	add	r7, sp, #16
 8016224:	60f8      	str	r0, [r7, #12]
 8016226:	60b9      	str	r1, [r7, #8]
 8016228:	603b      	str	r3, [r7, #0]
 801622a:	4613      	mov	r3, r2
 801622c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801622e:	88fb      	ldrh	r3, [r7, #6]
 8016230:	009b      	lsls	r3, r3, #2
 8016232:	4618      	mov	r0, r3
 8016234:	f001 fed0 	bl	8017fd8 <pvPortMalloc>
 8016238:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d00e      	beq.n	801625e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016240:	20bc      	movs	r0, #188	; 0xbc
 8016242:	f001 fec9 	bl	8017fd8 <pvPortMalloc>
 8016246:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016248:	69fb      	ldr	r3, [r7, #28]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d003      	beq.n	8016256 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801624e:	69fb      	ldr	r3, [r7, #28]
 8016250:	697a      	ldr	r2, [r7, #20]
 8016252:	631a      	str	r2, [r3, #48]	; 0x30
 8016254:	e005      	b.n	8016262 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016256:	6978      	ldr	r0, [r7, #20]
 8016258:	f001 ff8a 	bl	8018170 <vPortFree>
 801625c:	e001      	b.n	8016262 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801625e:	2300      	movs	r3, #0
 8016260:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016262:	69fb      	ldr	r3, [r7, #28]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d017      	beq.n	8016298 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016268:	69fb      	ldr	r3, [r7, #28]
 801626a:	2200      	movs	r2, #0
 801626c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016270:	88fa      	ldrh	r2, [r7, #6]
 8016272:	2300      	movs	r3, #0
 8016274:	9303      	str	r3, [sp, #12]
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	9302      	str	r3, [sp, #8]
 801627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627c:	9301      	str	r3, [sp, #4]
 801627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016280:	9300      	str	r3, [sp, #0]
 8016282:	683b      	ldr	r3, [r7, #0]
 8016284:	68b9      	ldr	r1, [r7, #8]
 8016286:	68f8      	ldr	r0, [r7, #12]
 8016288:	f000 f80e 	bl	80162a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801628c:	69f8      	ldr	r0, [r7, #28]
 801628e:	f000 f8b1 	bl	80163f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016292:	2301      	movs	r3, #1
 8016294:	61bb      	str	r3, [r7, #24]
 8016296:	e002      	b.n	801629e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016298:	f04f 33ff 	mov.w	r3, #4294967295
 801629c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801629e:	69bb      	ldr	r3, [r7, #24]
	}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3720      	adds	r7, #32
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b088      	sub	sp, #32
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	60f8      	str	r0, [r7, #12]
 80162b0:	60b9      	str	r1, [r7, #8]
 80162b2:	607a      	str	r2, [r7, #4]
 80162b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80162b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	009b      	lsls	r3, r3, #2
 80162be:	461a      	mov	r2, r3
 80162c0:	21a5      	movs	r1, #165	; 0xa5
 80162c2:	f003 fe9b 	bl	8019ffc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80162c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80162d0:	3b01      	subs	r3, #1
 80162d2:	009b      	lsls	r3, r3, #2
 80162d4:	4413      	add	r3, r2
 80162d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80162d8:	69bb      	ldr	r3, [r7, #24]
 80162da:	f023 0307 	bic.w	r3, r3, #7
 80162de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80162e0:	69bb      	ldr	r3, [r7, #24]
 80162e2:	f003 0307 	and.w	r3, r3, #7
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d00a      	beq.n	8016300 <prvInitialiseNewTask+0x58>
	__asm volatile
 80162ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ee:	f383 8811 	msr	BASEPRI, r3
 80162f2:	f3bf 8f6f 	isb	sy
 80162f6:	f3bf 8f4f 	dsb	sy
 80162fa:	617b      	str	r3, [r7, #20]
}
 80162fc:	bf00      	nop
 80162fe:	e7fe      	b.n	80162fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d01f      	beq.n	8016346 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016306:	2300      	movs	r3, #0
 8016308:	61fb      	str	r3, [r7, #28]
 801630a:	e012      	b.n	8016332 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801630c:	68ba      	ldr	r2, [r7, #8]
 801630e:	69fb      	ldr	r3, [r7, #28]
 8016310:	4413      	add	r3, r2
 8016312:	7819      	ldrb	r1, [r3, #0]
 8016314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016316:	69fb      	ldr	r3, [r7, #28]
 8016318:	4413      	add	r3, r2
 801631a:	3334      	adds	r3, #52	; 0x34
 801631c:	460a      	mov	r2, r1
 801631e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016320:	68ba      	ldr	r2, [r7, #8]
 8016322:	69fb      	ldr	r3, [r7, #28]
 8016324:	4413      	add	r3, r2
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d006      	beq.n	801633a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801632c:	69fb      	ldr	r3, [r7, #28]
 801632e:	3301      	adds	r3, #1
 8016330:	61fb      	str	r3, [r7, #28]
 8016332:	69fb      	ldr	r3, [r7, #28]
 8016334:	2b0f      	cmp	r3, #15
 8016336:	d9e9      	bls.n	801630c <prvInitialiseNewTask+0x64>
 8016338:	e000      	b.n	801633c <prvInitialiseNewTask+0x94>
			{
				break;
 801633a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633e:	2200      	movs	r2, #0
 8016340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016344:	e003      	b.n	801634e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016348:	2200      	movs	r2, #0
 801634a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016350:	2b37      	cmp	r3, #55	; 0x37
 8016352:	d901      	bls.n	8016358 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016354:	2337      	movs	r3, #55	; 0x37
 8016356:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801635a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801635c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016362:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016366:	2200      	movs	r2, #0
 8016368:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801636c:	3304      	adds	r3, #4
 801636e:	4618      	mov	r0, r3
 8016370:	f7fe fe56 	bl	8015020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016376:	3318      	adds	r3, #24
 8016378:	4618      	mov	r0, r3
 801637a:	f7fe fe51 	bl	8015020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016382:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016386:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801638c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016392:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016396:	2200      	movs	r2, #0
 8016398:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639e:	2200      	movs	r2, #0
 80163a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80163a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a6:	3354      	adds	r3, #84	; 0x54
 80163a8:	2260      	movs	r2, #96	; 0x60
 80163aa:	2100      	movs	r1, #0
 80163ac:	4618      	mov	r0, r3
 80163ae:	f003 fe25 	bl	8019ffc <memset>
 80163b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b4:	4a0c      	ldr	r2, [pc, #48]	; (80163e8 <prvInitialiseNewTask+0x140>)
 80163b6:	659a      	str	r2, [r3, #88]	; 0x58
 80163b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ba:	4a0c      	ldr	r2, [pc, #48]	; (80163ec <prvInitialiseNewTask+0x144>)
 80163bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80163be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c0:	4a0b      	ldr	r2, [pc, #44]	; (80163f0 <prvInitialiseNewTask+0x148>)
 80163c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80163c4:	683a      	ldr	r2, [r7, #0]
 80163c6:	68f9      	ldr	r1, [r7, #12]
 80163c8:	69b8      	ldr	r0, [r7, #24]
 80163ca:	f001 fbb7 	bl	8017b3c <pxPortInitialiseStack>
 80163ce:	4602      	mov	r2, r0
 80163d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80163d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d002      	beq.n	80163e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80163da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80163e0:	bf00      	nop
 80163e2:	3720      	adds	r7, #32
 80163e4:	46bd      	mov	sp, r7
 80163e6:	bd80      	pop	{r7, pc}
 80163e8:	080210c4 	.word	0x080210c4
 80163ec:	080210e4 	.word	0x080210e4
 80163f0:	080210a4 	.word	0x080210a4

080163f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b082      	sub	sp, #8
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80163fc:	f001 fcca 	bl	8017d94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016400:	4b2d      	ldr	r3, [pc, #180]	; (80164b8 <prvAddNewTaskToReadyList+0xc4>)
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	3301      	adds	r3, #1
 8016406:	4a2c      	ldr	r2, [pc, #176]	; (80164b8 <prvAddNewTaskToReadyList+0xc4>)
 8016408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801640a:	4b2c      	ldr	r3, [pc, #176]	; (80164bc <prvAddNewTaskToReadyList+0xc8>)
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d109      	bne.n	8016426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016412:	4a2a      	ldr	r2, [pc, #168]	; (80164bc <prvAddNewTaskToReadyList+0xc8>)
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016418:	4b27      	ldr	r3, [pc, #156]	; (80164b8 <prvAddNewTaskToReadyList+0xc4>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	2b01      	cmp	r3, #1
 801641e:	d110      	bne.n	8016442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016420:	f000 fd8e 	bl	8016f40 <prvInitialiseTaskLists>
 8016424:	e00d      	b.n	8016442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016426:	4b26      	ldr	r3, [pc, #152]	; (80164c0 <prvAddNewTaskToReadyList+0xcc>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d109      	bne.n	8016442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801642e:	4b23      	ldr	r3, [pc, #140]	; (80164bc <prvAddNewTaskToReadyList+0xc8>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016438:	429a      	cmp	r2, r3
 801643a:	d802      	bhi.n	8016442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801643c:	4a1f      	ldr	r2, [pc, #124]	; (80164bc <prvAddNewTaskToReadyList+0xc8>)
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016442:	4b20      	ldr	r3, [pc, #128]	; (80164c4 <prvAddNewTaskToReadyList+0xd0>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	3301      	adds	r3, #1
 8016448:	4a1e      	ldr	r2, [pc, #120]	; (80164c4 <prvAddNewTaskToReadyList+0xd0>)
 801644a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801644c:	4b1d      	ldr	r3, [pc, #116]	; (80164c4 <prvAddNewTaskToReadyList+0xd0>)
 801644e:	681a      	ldr	r2, [r3, #0]
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016458:	4b1b      	ldr	r3, [pc, #108]	; (80164c8 <prvAddNewTaskToReadyList+0xd4>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	429a      	cmp	r2, r3
 801645e:	d903      	bls.n	8016468 <prvAddNewTaskToReadyList+0x74>
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016464:	4a18      	ldr	r2, [pc, #96]	; (80164c8 <prvAddNewTaskToReadyList+0xd4>)
 8016466:	6013      	str	r3, [r2, #0]
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801646c:	4613      	mov	r3, r2
 801646e:	009b      	lsls	r3, r3, #2
 8016470:	4413      	add	r3, r2
 8016472:	009b      	lsls	r3, r3, #2
 8016474:	4a15      	ldr	r2, [pc, #84]	; (80164cc <prvAddNewTaskToReadyList+0xd8>)
 8016476:	441a      	add	r2, r3
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	3304      	adds	r3, #4
 801647c:	4619      	mov	r1, r3
 801647e:	4610      	mov	r0, r2
 8016480:	f7fe fddb 	bl	801503a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016484:	f001 fcb6 	bl	8017df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016488:	4b0d      	ldr	r3, [pc, #52]	; (80164c0 <prvAddNewTaskToReadyList+0xcc>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d00e      	beq.n	80164ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016490:	4b0a      	ldr	r3, [pc, #40]	; (80164bc <prvAddNewTaskToReadyList+0xc8>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801649a:	429a      	cmp	r2, r3
 801649c:	d207      	bcs.n	80164ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801649e:	4b0c      	ldr	r3, [pc, #48]	; (80164d0 <prvAddNewTaskToReadyList+0xdc>)
 80164a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164a4:	601a      	str	r2, [r3, #0]
 80164a6:	f3bf 8f4f 	dsb	sy
 80164aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80164ae:	bf00      	nop
 80164b0:	3708      	adds	r7, #8
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd80      	pop	{r7, pc}
 80164b6:	bf00      	nop
 80164b8:	20001460 	.word	0x20001460
 80164bc:	20000f8c 	.word	0x20000f8c
 80164c0:	2000146c 	.word	0x2000146c
 80164c4:	2000147c 	.word	0x2000147c
 80164c8:	20001468 	.word	0x20001468
 80164cc:	20000f90 	.word	0x20000f90
 80164d0:	e000ed04 	.word	0xe000ed04

080164d4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b084      	sub	sp, #16
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80164dc:	f001 fc5a 	bl	8017d94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d102      	bne.n	80164ec <vTaskDelete+0x18>
 80164e6:	4b2c      	ldr	r3, [pc, #176]	; (8016598 <vTaskDelete+0xc4>)
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	e000      	b.n	80164ee <vTaskDelete+0x1a>
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	3304      	adds	r3, #4
 80164f4:	4618      	mov	r0, r3
 80164f6:	f7fe fdfd 	bl	80150f4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d004      	beq.n	801650c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	3318      	adds	r3, #24
 8016506:	4618      	mov	r0, r3
 8016508:	f7fe fdf4 	bl	80150f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801650c:	4b23      	ldr	r3, [pc, #140]	; (801659c <vTaskDelete+0xc8>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	3301      	adds	r3, #1
 8016512:	4a22      	ldr	r2, [pc, #136]	; (801659c <vTaskDelete+0xc8>)
 8016514:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8016516:	4b20      	ldr	r3, [pc, #128]	; (8016598 <vTaskDelete+0xc4>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	68fa      	ldr	r2, [r7, #12]
 801651c:	429a      	cmp	r2, r3
 801651e:	d10b      	bne.n	8016538 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	3304      	adds	r3, #4
 8016524:	4619      	mov	r1, r3
 8016526:	481e      	ldr	r0, [pc, #120]	; (80165a0 <vTaskDelete+0xcc>)
 8016528:	f7fe fd87 	bl	801503a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801652c:	4b1d      	ldr	r3, [pc, #116]	; (80165a4 <vTaskDelete+0xd0>)
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	3301      	adds	r3, #1
 8016532:	4a1c      	ldr	r2, [pc, #112]	; (80165a4 <vTaskDelete+0xd0>)
 8016534:	6013      	str	r3, [r2, #0]
 8016536:	e009      	b.n	801654c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8016538:	4b1b      	ldr	r3, [pc, #108]	; (80165a8 <vTaskDelete+0xd4>)
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	3b01      	subs	r3, #1
 801653e:	4a1a      	ldr	r2, [pc, #104]	; (80165a8 <vTaskDelete+0xd4>)
 8016540:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8016542:	68f8      	ldr	r0, [r7, #12]
 8016544:	f000 fd6a 	bl	801701c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8016548:	f000 fd9c 	bl	8017084 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801654c:	f001 fc52 	bl	8017df4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8016550:	4b16      	ldr	r3, [pc, #88]	; (80165ac <vTaskDelete+0xd8>)
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d01b      	beq.n	8016590 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8016558:	4b0f      	ldr	r3, [pc, #60]	; (8016598 <vTaskDelete+0xc4>)
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	68fa      	ldr	r2, [r7, #12]
 801655e:	429a      	cmp	r2, r3
 8016560:	d116      	bne.n	8016590 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8016562:	4b13      	ldr	r3, [pc, #76]	; (80165b0 <vTaskDelete+0xdc>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d00a      	beq.n	8016580 <vTaskDelete+0xac>
	__asm volatile
 801656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801656e:	f383 8811 	msr	BASEPRI, r3
 8016572:	f3bf 8f6f 	isb	sy
 8016576:	f3bf 8f4f 	dsb	sy
 801657a:	60bb      	str	r3, [r7, #8]
}
 801657c:	bf00      	nop
 801657e:	e7fe      	b.n	801657e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8016580:	4b0c      	ldr	r3, [pc, #48]	; (80165b4 <vTaskDelete+0xe0>)
 8016582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016586:	601a      	str	r2, [r3, #0]
 8016588:	f3bf 8f4f 	dsb	sy
 801658c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016590:	bf00      	nop
 8016592:	3710      	adds	r7, #16
 8016594:	46bd      	mov	sp, r7
 8016596:	bd80      	pop	{r7, pc}
 8016598:	20000f8c 	.word	0x20000f8c
 801659c:	2000147c 	.word	0x2000147c
 80165a0:	20001434 	.word	0x20001434
 80165a4:	20001448 	.word	0x20001448
 80165a8:	20001460 	.word	0x20001460
 80165ac:	2000146c 	.word	0x2000146c
 80165b0:	20001488 	.word	0x20001488
 80165b4:	e000ed04 	.word	0xe000ed04

080165b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b084      	sub	sp, #16
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80165c0:	2300      	movs	r3, #0
 80165c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d017      	beq.n	80165fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80165ca:	4b13      	ldr	r3, [pc, #76]	; (8016618 <vTaskDelay+0x60>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d00a      	beq.n	80165e8 <vTaskDelay+0x30>
	__asm volatile
 80165d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165d6:	f383 8811 	msr	BASEPRI, r3
 80165da:	f3bf 8f6f 	isb	sy
 80165de:	f3bf 8f4f 	dsb	sy
 80165e2:	60bb      	str	r3, [r7, #8]
}
 80165e4:	bf00      	nop
 80165e6:	e7fe      	b.n	80165e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80165e8:	f000 f980 	bl	80168ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80165ec:	2100      	movs	r1, #0
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f000 ff02 	bl	80173f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80165f4:	f000 f988 	bl	8016908 <xTaskResumeAll>
 80165f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d107      	bne.n	8016610 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016600:	4b06      	ldr	r3, [pc, #24]	; (801661c <vTaskDelay+0x64>)
 8016602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016606:	601a      	str	r2, [r3, #0]
 8016608:	f3bf 8f4f 	dsb	sy
 801660c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016610:	bf00      	nop
 8016612:	3710      	adds	r7, #16
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}
 8016618:	20001488 	.word	0x20001488
 801661c:	e000ed04 	.word	0xe000ed04

08016620 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8016620:	b580      	push	{r7, lr}
 8016622:	b088      	sub	sp, #32
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801662c:	69bb      	ldr	r3, [r7, #24]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d10a      	bne.n	8016648 <eTaskGetState+0x28>
	__asm volatile
 8016632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016636:	f383 8811 	msr	BASEPRI, r3
 801663a:	f3bf 8f6f 	isb	sy
 801663e:	f3bf 8f4f 	dsb	sy
 8016642:	60bb      	str	r3, [r7, #8]
}
 8016644:	bf00      	nop
 8016646:	e7fe      	b.n	8016646 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8016648:	4b23      	ldr	r3, [pc, #140]	; (80166d8 <eTaskGetState+0xb8>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	69ba      	ldr	r2, [r7, #24]
 801664e:	429a      	cmp	r2, r3
 8016650:	d102      	bne.n	8016658 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8016652:	2300      	movs	r3, #0
 8016654:	77fb      	strb	r3, [r7, #31]
 8016656:	e03a      	b.n	80166ce <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8016658:	f001 fb9c 	bl	8017d94 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801665c:	69bb      	ldr	r3, [r7, #24]
 801665e:	695b      	ldr	r3, [r3, #20]
 8016660:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8016662:	4b1e      	ldr	r3, [pc, #120]	; (80166dc <eTaskGetState+0xbc>)
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8016668:	4b1d      	ldr	r3, [pc, #116]	; (80166e0 <eTaskGetState+0xc0>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801666e:	f001 fbc1 	bl	8017df4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8016672:	697a      	ldr	r2, [r7, #20]
 8016674:	693b      	ldr	r3, [r7, #16]
 8016676:	429a      	cmp	r2, r3
 8016678:	d003      	beq.n	8016682 <eTaskGetState+0x62>
 801667a:	697a      	ldr	r2, [r7, #20]
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	429a      	cmp	r2, r3
 8016680:	d102      	bne.n	8016688 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8016682:	2302      	movs	r3, #2
 8016684:	77fb      	strb	r3, [r7, #31]
 8016686:	e022      	b.n	80166ce <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8016688:	697b      	ldr	r3, [r7, #20]
 801668a:	4a16      	ldr	r2, [pc, #88]	; (80166e4 <eTaskGetState+0xc4>)
 801668c:	4293      	cmp	r3, r2
 801668e:	d112      	bne.n	80166b6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8016690:	69bb      	ldr	r3, [r7, #24]
 8016692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016694:	2b00      	cmp	r3, #0
 8016696:	d10b      	bne.n	80166b0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8016698:	69bb      	ldr	r3, [r7, #24]
 801669a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801669e:	b2db      	uxtb	r3, r3
 80166a0:	2b01      	cmp	r3, #1
 80166a2:	d102      	bne.n	80166aa <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80166a4:	2302      	movs	r3, #2
 80166a6:	77fb      	strb	r3, [r7, #31]
 80166a8:	e011      	b.n	80166ce <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80166aa:	2303      	movs	r3, #3
 80166ac:	77fb      	strb	r3, [r7, #31]
 80166ae:	e00e      	b.n	80166ce <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80166b0:	2302      	movs	r3, #2
 80166b2:	77fb      	strb	r3, [r7, #31]
 80166b4:	e00b      	b.n	80166ce <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80166b6:	697b      	ldr	r3, [r7, #20]
 80166b8:	4a0b      	ldr	r2, [pc, #44]	; (80166e8 <eTaskGetState+0xc8>)
 80166ba:	4293      	cmp	r3, r2
 80166bc:	d002      	beq.n	80166c4 <eTaskGetState+0xa4>
 80166be:	697b      	ldr	r3, [r7, #20]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d102      	bne.n	80166ca <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80166c4:	2304      	movs	r3, #4
 80166c6:	77fb      	strb	r3, [r7, #31]
 80166c8:	e001      	b.n	80166ce <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80166ca:	2301      	movs	r3, #1
 80166cc:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80166ce:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80166d0:	4618      	mov	r0, r3
 80166d2:	3720      	adds	r7, #32
 80166d4:	46bd      	mov	sp, r7
 80166d6:	bd80      	pop	{r7, pc}
 80166d8:	20000f8c 	.word	0x20000f8c
 80166dc:	20001418 	.word	0x20001418
 80166e0:	2000141c 	.word	0x2000141c
 80166e4:	2000144c 	.word	0x2000144c
 80166e8:	20001434 	.word	0x20001434

080166ec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80166ec:	b480      	push	{r7}
 80166ee:	b087      	sub	sp, #28
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80166f4:	2300      	movs	r3, #0
 80166f6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d10a      	bne.n	8016718 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8016702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016706:	f383 8811 	msr	BASEPRI, r3
 801670a:	f3bf 8f6f 	isb	sy
 801670e:	f3bf 8f4f 	dsb	sy
 8016712:	60fb      	str	r3, [r7, #12]
}
 8016714:	bf00      	nop
 8016716:	e7fe      	b.n	8016716 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016718:	693b      	ldr	r3, [r7, #16]
 801671a:	695b      	ldr	r3, [r3, #20]
 801671c:	4a0a      	ldr	r2, [pc, #40]	; (8016748 <prvTaskIsTaskSuspended+0x5c>)
 801671e:	4293      	cmp	r3, r2
 8016720:	d10a      	bne.n	8016738 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016726:	4a09      	ldr	r2, [pc, #36]	; (801674c <prvTaskIsTaskSuspended+0x60>)
 8016728:	4293      	cmp	r3, r2
 801672a:	d005      	beq.n	8016738 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801672c:	693b      	ldr	r3, [r7, #16]
 801672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016730:	2b00      	cmp	r3, #0
 8016732:	d101      	bne.n	8016738 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8016734:	2301      	movs	r3, #1
 8016736:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016738:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801673a:	4618      	mov	r0, r3
 801673c:	371c      	adds	r7, #28
 801673e:	46bd      	mov	sp, r7
 8016740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016744:	4770      	bx	lr
 8016746:	bf00      	nop
 8016748:	2000144c 	.word	0x2000144c
 801674c:	20001420 	.word	0x20001420

08016750 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8016750:	b580      	push	{r7, lr}
 8016752:	b084      	sub	sp, #16
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d10a      	bne.n	8016778 <vTaskResume+0x28>
	__asm volatile
 8016762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016766:	f383 8811 	msr	BASEPRI, r3
 801676a:	f3bf 8f6f 	isb	sy
 801676e:	f3bf 8f4f 	dsb	sy
 8016772:	60bb      	str	r3, [r7, #8]
}
 8016774:	bf00      	nop
 8016776:	e7fe      	b.n	8016776 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8016778:	4b20      	ldr	r3, [pc, #128]	; (80167fc <vTaskResume+0xac>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	68fa      	ldr	r2, [r7, #12]
 801677e:	429a      	cmp	r2, r3
 8016780:	d038      	beq.n	80167f4 <vTaskResume+0xa4>
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d035      	beq.n	80167f4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8016788:	f001 fb04 	bl	8017d94 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801678c:	68f8      	ldr	r0, [r7, #12]
 801678e:	f7ff ffad 	bl	80166ec <prvTaskIsTaskSuspended>
 8016792:	4603      	mov	r3, r0
 8016794:	2b00      	cmp	r3, #0
 8016796:	d02b      	beq.n	80167f0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	3304      	adds	r3, #4
 801679c:	4618      	mov	r0, r3
 801679e:	f7fe fca9 	bl	80150f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167a6:	4b16      	ldr	r3, [pc, #88]	; (8016800 <vTaskResume+0xb0>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	429a      	cmp	r2, r3
 80167ac:	d903      	bls.n	80167b6 <vTaskResume+0x66>
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167b2:	4a13      	ldr	r2, [pc, #76]	; (8016800 <vTaskResume+0xb0>)
 80167b4:	6013      	str	r3, [r2, #0]
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167ba:	4613      	mov	r3, r2
 80167bc:	009b      	lsls	r3, r3, #2
 80167be:	4413      	add	r3, r2
 80167c0:	009b      	lsls	r3, r3, #2
 80167c2:	4a10      	ldr	r2, [pc, #64]	; (8016804 <vTaskResume+0xb4>)
 80167c4:	441a      	add	r2, r3
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	3304      	adds	r3, #4
 80167ca:	4619      	mov	r1, r3
 80167cc:	4610      	mov	r0, r2
 80167ce:	f7fe fc34 	bl	801503a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167d6:	4b09      	ldr	r3, [pc, #36]	; (80167fc <vTaskResume+0xac>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167dc:	429a      	cmp	r2, r3
 80167de:	d307      	bcc.n	80167f0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80167e0:	4b09      	ldr	r3, [pc, #36]	; (8016808 <vTaskResume+0xb8>)
 80167e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167e6:	601a      	str	r2, [r3, #0]
 80167e8:	f3bf 8f4f 	dsb	sy
 80167ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80167f0:	f001 fb00 	bl	8017df4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80167f4:	bf00      	nop
 80167f6:	3710      	adds	r7, #16
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}
 80167fc:	20000f8c 	.word	0x20000f8c
 8016800:	20001468 	.word	0x20001468
 8016804:	20000f90 	.word	0x20000f90
 8016808:	e000ed04 	.word	0xe000ed04

0801680c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b08a      	sub	sp, #40	; 0x28
 8016810:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016812:	2300      	movs	r3, #0
 8016814:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016816:	2300      	movs	r3, #0
 8016818:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801681a:	463a      	mov	r2, r7
 801681c:	1d39      	adds	r1, r7, #4
 801681e:	f107 0308 	add.w	r3, r7, #8
 8016822:	4618      	mov	r0, r3
 8016824:	f7fe fba8 	bl	8014f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016828:	6839      	ldr	r1, [r7, #0]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	68ba      	ldr	r2, [r7, #8]
 801682e:	9202      	str	r2, [sp, #8]
 8016830:	9301      	str	r3, [sp, #4]
 8016832:	2300      	movs	r3, #0
 8016834:	9300      	str	r3, [sp, #0]
 8016836:	2300      	movs	r3, #0
 8016838:	460a      	mov	r2, r1
 801683a:	4924      	ldr	r1, [pc, #144]	; (80168cc <vTaskStartScheduler+0xc0>)
 801683c:	4824      	ldr	r0, [pc, #144]	; (80168d0 <vTaskStartScheduler+0xc4>)
 801683e:	f7ff fc91 	bl	8016164 <xTaskCreateStatic>
 8016842:	4603      	mov	r3, r0
 8016844:	4a23      	ldr	r2, [pc, #140]	; (80168d4 <vTaskStartScheduler+0xc8>)
 8016846:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016848:	4b22      	ldr	r3, [pc, #136]	; (80168d4 <vTaskStartScheduler+0xc8>)
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d002      	beq.n	8016856 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016850:	2301      	movs	r3, #1
 8016852:	617b      	str	r3, [r7, #20]
 8016854:	e001      	b.n	801685a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016856:	2300      	movs	r3, #0
 8016858:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	2b01      	cmp	r3, #1
 801685e:	d102      	bne.n	8016866 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016860:	f000 fe1e 	bl	80174a0 <xTimerCreateTimerTask>
 8016864:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016866:	697b      	ldr	r3, [r7, #20]
 8016868:	2b01      	cmp	r3, #1
 801686a:	d11b      	bne.n	80168a4 <vTaskStartScheduler+0x98>
	__asm volatile
 801686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016870:	f383 8811 	msr	BASEPRI, r3
 8016874:	f3bf 8f6f 	isb	sy
 8016878:	f3bf 8f4f 	dsb	sy
 801687c:	613b      	str	r3, [r7, #16]
}
 801687e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016880:	4b15      	ldr	r3, [pc, #84]	; (80168d8 <vTaskStartScheduler+0xcc>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	3354      	adds	r3, #84	; 0x54
 8016886:	4a15      	ldr	r2, [pc, #84]	; (80168dc <vTaskStartScheduler+0xd0>)
 8016888:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801688a:	4b15      	ldr	r3, [pc, #84]	; (80168e0 <vTaskStartScheduler+0xd4>)
 801688c:	f04f 32ff 	mov.w	r2, #4294967295
 8016890:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016892:	4b14      	ldr	r3, [pc, #80]	; (80168e4 <vTaskStartScheduler+0xd8>)
 8016894:	2201      	movs	r2, #1
 8016896:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016898:	4b13      	ldr	r3, [pc, #76]	; (80168e8 <vTaskStartScheduler+0xdc>)
 801689a:	2200      	movs	r2, #0
 801689c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801689e:	f001 f9d7 	bl	8017c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80168a2:	e00e      	b.n	80168c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80168a4:	697b      	ldr	r3, [r7, #20]
 80168a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168aa:	d10a      	bne.n	80168c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80168ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168b0:	f383 8811 	msr	BASEPRI, r3
 80168b4:	f3bf 8f6f 	isb	sy
 80168b8:	f3bf 8f4f 	dsb	sy
 80168bc:	60fb      	str	r3, [r7, #12]
}
 80168be:	bf00      	nop
 80168c0:	e7fe      	b.n	80168c0 <vTaskStartScheduler+0xb4>
}
 80168c2:	bf00      	nop
 80168c4:	3718      	adds	r7, #24
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	08020d34 	.word	0x08020d34
 80168d0:	08016f11 	.word	0x08016f11
 80168d4:	20001484 	.word	0x20001484
 80168d8:	20000f8c 	.word	0x20000f8c
 80168dc:	20000200 	.word	0x20000200
 80168e0:	20001480 	.word	0x20001480
 80168e4:	2000146c 	.word	0x2000146c
 80168e8:	20001464 	.word	0x20001464

080168ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80168ec:	b480      	push	{r7}
 80168ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80168f0:	4b04      	ldr	r3, [pc, #16]	; (8016904 <vTaskSuspendAll+0x18>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	3301      	adds	r3, #1
 80168f6:	4a03      	ldr	r2, [pc, #12]	; (8016904 <vTaskSuspendAll+0x18>)
 80168f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80168fa:	bf00      	nop
 80168fc:	46bd      	mov	sp, r7
 80168fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016902:	4770      	bx	lr
 8016904:	20001488 	.word	0x20001488

08016908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b084      	sub	sp, #16
 801690c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801690e:	2300      	movs	r3, #0
 8016910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016912:	2300      	movs	r3, #0
 8016914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016916:	4b42      	ldr	r3, [pc, #264]	; (8016a20 <xTaskResumeAll+0x118>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d10a      	bne.n	8016934 <xTaskResumeAll+0x2c>
	__asm volatile
 801691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016922:	f383 8811 	msr	BASEPRI, r3
 8016926:	f3bf 8f6f 	isb	sy
 801692a:	f3bf 8f4f 	dsb	sy
 801692e:	603b      	str	r3, [r7, #0]
}
 8016930:	bf00      	nop
 8016932:	e7fe      	b.n	8016932 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016934:	f001 fa2e 	bl	8017d94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016938:	4b39      	ldr	r3, [pc, #228]	; (8016a20 <xTaskResumeAll+0x118>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	3b01      	subs	r3, #1
 801693e:	4a38      	ldr	r2, [pc, #224]	; (8016a20 <xTaskResumeAll+0x118>)
 8016940:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016942:	4b37      	ldr	r3, [pc, #220]	; (8016a20 <xTaskResumeAll+0x118>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d162      	bne.n	8016a10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801694a:	4b36      	ldr	r3, [pc, #216]	; (8016a24 <xTaskResumeAll+0x11c>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d05e      	beq.n	8016a10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016952:	e02f      	b.n	80169b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016954:	4b34      	ldr	r3, [pc, #208]	; (8016a28 <xTaskResumeAll+0x120>)
 8016956:	68db      	ldr	r3, [r3, #12]
 8016958:	68db      	ldr	r3, [r3, #12]
 801695a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	3318      	adds	r3, #24
 8016960:	4618      	mov	r0, r3
 8016962:	f7fe fbc7 	bl	80150f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	3304      	adds	r3, #4
 801696a:	4618      	mov	r0, r3
 801696c:	f7fe fbc2 	bl	80150f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016974:	4b2d      	ldr	r3, [pc, #180]	; (8016a2c <xTaskResumeAll+0x124>)
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	429a      	cmp	r2, r3
 801697a:	d903      	bls.n	8016984 <xTaskResumeAll+0x7c>
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016980:	4a2a      	ldr	r2, [pc, #168]	; (8016a2c <xTaskResumeAll+0x124>)
 8016982:	6013      	str	r3, [r2, #0]
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016988:	4613      	mov	r3, r2
 801698a:	009b      	lsls	r3, r3, #2
 801698c:	4413      	add	r3, r2
 801698e:	009b      	lsls	r3, r3, #2
 8016990:	4a27      	ldr	r2, [pc, #156]	; (8016a30 <xTaskResumeAll+0x128>)
 8016992:	441a      	add	r2, r3
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	3304      	adds	r3, #4
 8016998:	4619      	mov	r1, r3
 801699a:	4610      	mov	r0, r2
 801699c:	f7fe fb4d 	bl	801503a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169a4:	4b23      	ldr	r3, [pc, #140]	; (8016a34 <xTaskResumeAll+0x12c>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169aa:	429a      	cmp	r2, r3
 80169ac:	d302      	bcc.n	80169b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80169ae:	4b22      	ldr	r3, [pc, #136]	; (8016a38 <xTaskResumeAll+0x130>)
 80169b0:	2201      	movs	r2, #1
 80169b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80169b4:	4b1c      	ldr	r3, [pc, #112]	; (8016a28 <xTaskResumeAll+0x120>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d1cb      	bne.n	8016954 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d001      	beq.n	80169c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80169c2:	f000 fb5f 	bl	8017084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80169c6:	4b1d      	ldr	r3, [pc, #116]	; (8016a3c <xTaskResumeAll+0x134>)
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d010      	beq.n	80169f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80169d2:	f000 f847 	bl	8016a64 <xTaskIncrementTick>
 80169d6:	4603      	mov	r3, r0
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d002      	beq.n	80169e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80169dc:	4b16      	ldr	r3, [pc, #88]	; (8016a38 <xTaskResumeAll+0x130>)
 80169de:	2201      	movs	r2, #1
 80169e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	3b01      	subs	r3, #1
 80169e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d1f1      	bne.n	80169d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80169ee:	4b13      	ldr	r3, [pc, #76]	; (8016a3c <xTaskResumeAll+0x134>)
 80169f0:	2200      	movs	r2, #0
 80169f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80169f4:	4b10      	ldr	r3, [pc, #64]	; (8016a38 <xTaskResumeAll+0x130>)
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d009      	beq.n	8016a10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80169fc:	2301      	movs	r3, #1
 80169fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016a00:	4b0f      	ldr	r3, [pc, #60]	; (8016a40 <xTaskResumeAll+0x138>)
 8016a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a06:	601a      	str	r2, [r3, #0]
 8016a08:	f3bf 8f4f 	dsb	sy
 8016a0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016a10:	f001 f9f0 	bl	8017df4 <vPortExitCritical>

	return xAlreadyYielded;
 8016a14:	68bb      	ldr	r3, [r7, #8]
}
 8016a16:	4618      	mov	r0, r3
 8016a18:	3710      	adds	r7, #16
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bd80      	pop	{r7, pc}
 8016a1e:	bf00      	nop
 8016a20:	20001488 	.word	0x20001488
 8016a24:	20001460 	.word	0x20001460
 8016a28:	20001420 	.word	0x20001420
 8016a2c:	20001468 	.word	0x20001468
 8016a30:	20000f90 	.word	0x20000f90
 8016a34:	20000f8c 	.word	0x20000f8c
 8016a38:	20001474 	.word	0x20001474
 8016a3c:	20001470 	.word	0x20001470
 8016a40:	e000ed04 	.word	0xe000ed04

08016a44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016a44:	b480      	push	{r7}
 8016a46:	b083      	sub	sp, #12
 8016a48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016a4a:	4b05      	ldr	r3, [pc, #20]	; (8016a60 <xTaskGetTickCount+0x1c>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016a50:	687b      	ldr	r3, [r7, #4]
}
 8016a52:	4618      	mov	r0, r3
 8016a54:	370c      	adds	r7, #12
 8016a56:	46bd      	mov	sp, r7
 8016a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5c:	4770      	bx	lr
 8016a5e:	bf00      	nop
 8016a60:	20001464 	.word	0x20001464

08016a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b086      	sub	sp, #24
 8016a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a6e:	4b4f      	ldr	r3, [pc, #316]	; (8016bac <xTaskIncrementTick+0x148>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	f040 808f 	bne.w	8016b96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016a78:	4b4d      	ldr	r3, [pc, #308]	; (8016bb0 <xTaskIncrementTick+0x14c>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016a80:	4a4b      	ldr	r2, [pc, #300]	; (8016bb0 <xTaskIncrementTick+0x14c>)
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d120      	bne.n	8016ace <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016a8c:	4b49      	ldr	r3, [pc, #292]	; (8016bb4 <xTaskIncrementTick+0x150>)
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d00a      	beq.n	8016aac <xTaskIncrementTick+0x48>
	__asm volatile
 8016a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a9a:	f383 8811 	msr	BASEPRI, r3
 8016a9e:	f3bf 8f6f 	isb	sy
 8016aa2:	f3bf 8f4f 	dsb	sy
 8016aa6:	603b      	str	r3, [r7, #0]
}
 8016aa8:	bf00      	nop
 8016aaa:	e7fe      	b.n	8016aaa <xTaskIncrementTick+0x46>
 8016aac:	4b41      	ldr	r3, [pc, #260]	; (8016bb4 <xTaskIncrementTick+0x150>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	60fb      	str	r3, [r7, #12]
 8016ab2:	4b41      	ldr	r3, [pc, #260]	; (8016bb8 <xTaskIncrementTick+0x154>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	4a3f      	ldr	r2, [pc, #252]	; (8016bb4 <xTaskIncrementTick+0x150>)
 8016ab8:	6013      	str	r3, [r2, #0]
 8016aba:	4a3f      	ldr	r2, [pc, #252]	; (8016bb8 <xTaskIncrementTick+0x154>)
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	6013      	str	r3, [r2, #0]
 8016ac0:	4b3e      	ldr	r3, [pc, #248]	; (8016bbc <xTaskIncrementTick+0x158>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	3301      	adds	r3, #1
 8016ac6:	4a3d      	ldr	r2, [pc, #244]	; (8016bbc <xTaskIncrementTick+0x158>)
 8016ac8:	6013      	str	r3, [r2, #0]
 8016aca:	f000 fadb 	bl	8017084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016ace:	4b3c      	ldr	r3, [pc, #240]	; (8016bc0 <xTaskIncrementTick+0x15c>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	693a      	ldr	r2, [r7, #16]
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d349      	bcc.n	8016b6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016ad8:	4b36      	ldr	r3, [pc, #216]	; (8016bb4 <xTaskIncrementTick+0x150>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d104      	bne.n	8016aec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ae2:	4b37      	ldr	r3, [pc, #220]	; (8016bc0 <xTaskIncrementTick+0x15c>)
 8016ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ae8:	601a      	str	r2, [r3, #0]
					break;
 8016aea:	e03f      	b.n	8016b6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016aec:	4b31      	ldr	r3, [pc, #196]	; (8016bb4 <xTaskIncrementTick+0x150>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	68db      	ldr	r3, [r3, #12]
 8016af2:	68db      	ldr	r3, [r3, #12]
 8016af4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016af6:	68bb      	ldr	r3, [r7, #8]
 8016af8:	685b      	ldr	r3, [r3, #4]
 8016afa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016afc:	693a      	ldr	r2, [r7, #16]
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	429a      	cmp	r2, r3
 8016b02:	d203      	bcs.n	8016b0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016b04:	4a2e      	ldr	r2, [pc, #184]	; (8016bc0 <xTaskIncrementTick+0x15c>)
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016b0a:	e02f      	b.n	8016b6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	3304      	adds	r3, #4
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7fe faef 	bl	80150f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d004      	beq.n	8016b28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016b1e:	68bb      	ldr	r3, [r7, #8]
 8016b20:	3318      	adds	r3, #24
 8016b22:	4618      	mov	r0, r3
 8016b24:	f7fe fae6 	bl	80150f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b2c:	4b25      	ldr	r3, [pc, #148]	; (8016bc4 <xTaskIncrementTick+0x160>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d903      	bls.n	8016b3c <xTaskIncrementTick+0xd8>
 8016b34:	68bb      	ldr	r3, [r7, #8]
 8016b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b38:	4a22      	ldr	r2, [pc, #136]	; (8016bc4 <xTaskIncrementTick+0x160>)
 8016b3a:	6013      	str	r3, [r2, #0]
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b40:	4613      	mov	r3, r2
 8016b42:	009b      	lsls	r3, r3, #2
 8016b44:	4413      	add	r3, r2
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	4a1f      	ldr	r2, [pc, #124]	; (8016bc8 <xTaskIncrementTick+0x164>)
 8016b4a:	441a      	add	r2, r3
 8016b4c:	68bb      	ldr	r3, [r7, #8]
 8016b4e:	3304      	adds	r3, #4
 8016b50:	4619      	mov	r1, r3
 8016b52:	4610      	mov	r0, r2
 8016b54:	f7fe fa71 	bl	801503a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016b58:	68bb      	ldr	r3, [r7, #8]
 8016b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b5c:	4b1b      	ldr	r3, [pc, #108]	; (8016bcc <xTaskIncrementTick+0x168>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b62:	429a      	cmp	r2, r3
 8016b64:	d3b8      	bcc.n	8016ad8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016b66:	2301      	movs	r3, #1
 8016b68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016b6a:	e7b5      	b.n	8016ad8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016b6c:	4b17      	ldr	r3, [pc, #92]	; (8016bcc <xTaskIncrementTick+0x168>)
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b72:	4915      	ldr	r1, [pc, #84]	; (8016bc8 <xTaskIncrementTick+0x164>)
 8016b74:	4613      	mov	r3, r2
 8016b76:	009b      	lsls	r3, r3, #2
 8016b78:	4413      	add	r3, r2
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	440b      	add	r3, r1
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	2b01      	cmp	r3, #1
 8016b82:	d901      	bls.n	8016b88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8016b84:	2301      	movs	r3, #1
 8016b86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016b88:	4b11      	ldr	r3, [pc, #68]	; (8016bd0 <xTaskIncrementTick+0x16c>)
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d007      	beq.n	8016ba0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016b90:	2301      	movs	r3, #1
 8016b92:	617b      	str	r3, [r7, #20]
 8016b94:	e004      	b.n	8016ba0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016b96:	4b0f      	ldr	r3, [pc, #60]	; (8016bd4 <xTaskIncrementTick+0x170>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	3301      	adds	r3, #1
 8016b9c:	4a0d      	ldr	r2, [pc, #52]	; (8016bd4 <xTaskIncrementTick+0x170>)
 8016b9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016ba0:	697b      	ldr	r3, [r7, #20]
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3718      	adds	r7, #24
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}
 8016baa:	bf00      	nop
 8016bac:	20001488 	.word	0x20001488
 8016bb0:	20001464 	.word	0x20001464
 8016bb4:	20001418 	.word	0x20001418
 8016bb8:	2000141c 	.word	0x2000141c
 8016bbc:	20001478 	.word	0x20001478
 8016bc0:	20001480 	.word	0x20001480
 8016bc4:	20001468 	.word	0x20001468
 8016bc8:	20000f90 	.word	0x20000f90
 8016bcc:	20000f8c 	.word	0x20000f8c
 8016bd0:	20001474 	.word	0x20001474
 8016bd4:	20001470 	.word	0x20001470

08016bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b085      	sub	sp, #20
 8016bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016bde:	4b2a      	ldr	r3, [pc, #168]	; (8016c88 <vTaskSwitchContext+0xb0>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d003      	beq.n	8016bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016be6:	4b29      	ldr	r3, [pc, #164]	; (8016c8c <vTaskSwitchContext+0xb4>)
 8016be8:	2201      	movs	r2, #1
 8016bea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016bec:	e046      	b.n	8016c7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8016bee:	4b27      	ldr	r3, [pc, #156]	; (8016c8c <vTaskSwitchContext+0xb4>)
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bf4:	4b26      	ldr	r3, [pc, #152]	; (8016c90 <vTaskSwitchContext+0xb8>)
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	60fb      	str	r3, [r7, #12]
 8016bfa:	e010      	b.n	8016c1e <vTaskSwitchContext+0x46>
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d10a      	bne.n	8016c18 <vTaskSwitchContext+0x40>
	__asm volatile
 8016c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c06:	f383 8811 	msr	BASEPRI, r3
 8016c0a:	f3bf 8f6f 	isb	sy
 8016c0e:	f3bf 8f4f 	dsb	sy
 8016c12:	607b      	str	r3, [r7, #4]
}
 8016c14:	bf00      	nop
 8016c16:	e7fe      	b.n	8016c16 <vTaskSwitchContext+0x3e>
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	3b01      	subs	r3, #1
 8016c1c:	60fb      	str	r3, [r7, #12]
 8016c1e:	491d      	ldr	r1, [pc, #116]	; (8016c94 <vTaskSwitchContext+0xbc>)
 8016c20:	68fa      	ldr	r2, [r7, #12]
 8016c22:	4613      	mov	r3, r2
 8016c24:	009b      	lsls	r3, r3, #2
 8016c26:	4413      	add	r3, r2
 8016c28:	009b      	lsls	r3, r3, #2
 8016c2a:	440b      	add	r3, r1
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d0e4      	beq.n	8016bfc <vTaskSwitchContext+0x24>
 8016c32:	68fa      	ldr	r2, [r7, #12]
 8016c34:	4613      	mov	r3, r2
 8016c36:	009b      	lsls	r3, r3, #2
 8016c38:	4413      	add	r3, r2
 8016c3a:	009b      	lsls	r3, r3, #2
 8016c3c:	4a15      	ldr	r2, [pc, #84]	; (8016c94 <vTaskSwitchContext+0xbc>)
 8016c3e:	4413      	add	r3, r2
 8016c40:	60bb      	str	r3, [r7, #8]
 8016c42:	68bb      	ldr	r3, [r7, #8]
 8016c44:	685b      	ldr	r3, [r3, #4]
 8016c46:	685a      	ldr	r2, [r3, #4]
 8016c48:	68bb      	ldr	r3, [r7, #8]
 8016c4a:	605a      	str	r2, [r3, #4]
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	685a      	ldr	r2, [r3, #4]
 8016c50:	68bb      	ldr	r3, [r7, #8]
 8016c52:	3308      	adds	r3, #8
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d104      	bne.n	8016c62 <vTaskSwitchContext+0x8a>
 8016c58:	68bb      	ldr	r3, [r7, #8]
 8016c5a:	685b      	ldr	r3, [r3, #4]
 8016c5c:	685a      	ldr	r2, [r3, #4]
 8016c5e:	68bb      	ldr	r3, [r7, #8]
 8016c60:	605a      	str	r2, [r3, #4]
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	685b      	ldr	r3, [r3, #4]
 8016c66:	68db      	ldr	r3, [r3, #12]
 8016c68:	4a0b      	ldr	r2, [pc, #44]	; (8016c98 <vTaskSwitchContext+0xc0>)
 8016c6a:	6013      	str	r3, [r2, #0]
 8016c6c:	4a08      	ldr	r2, [pc, #32]	; (8016c90 <vTaskSwitchContext+0xb8>)
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016c72:	4b09      	ldr	r3, [pc, #36]	; (8016c98 <vTaskSwitchContext+0xc0>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	3354      	adds	r3, #84	; 0x54
 8016c78:	4a08      	ldr	r2, [pc, #32]	; (8016c9c <vTaskSwitchContext+0xc4>)
 8016c7a:	6013      	str	r3, [r2, #0]
}
 8016c7c:	bf00      	nop
 8016c7e:	3714      	adds	r7, #20
 8016c80:	46bd      	mov	sp, r7
 8016c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c86:	4770      	bx	lr
 8016c88:	20001488 	.word	0x20001488
 8016c8c:	20001474 	.word	0x20001474
 8016c90:	20001468 	.word	0x20001468
 8016c94:	20000f90 	.word	0x20000f90
 8016c98:	20000f8c 	.word	0x20000f8c
 8016c9c:	20000200 	.word	0x20000200

08016ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b084      	sub	sp, #16
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
 8016ca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d10a      	bne.n	8016cc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb4:	f383 8811 	msr	BASEPRI, r3
 8016cb8:	f3bf 8f6f 	isb	sy
 8016cbc:	f3bf 8f4f 	dsb	sy
 8016cc0:	60fb      	str	r3, [r7, #12]
}
 8016cc2:	bf00      	nop
 8016cc4:	e7fe      	b.n	8016cc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016cc6:	4b07      	ldr	r3, [pc, #28]	; (8016ce4 <vTaskPlaceOnEventList+0x44>)
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	3318      	adds	r3, #24
 8016ccc:	4619      	mov	r1, r3
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f7fe f9d7 	bl	8015082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016cd4:	2101      	movs	r1, #1
 8016cd6:	6838      	ldr	r0, [r7, #0]
 8016cd8:	f000 fb8e 	bl	80173f8 <prvAddCurrentTaskToDelayedList>
}
 8016cdc:	bf00      	nop
 8016cde:	3710      	adds	r7, #16
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	20000f8c 	.word	0x20000f8c

08016ce8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b086      	sub	sp, #24
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	60b9      	str	r1, [r7, #8]
 8016cf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d10a      	bne.n	8016d10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cfe:	f383 8811 	msr	BASEPRI, r3
 8016d02:	f3bf 8f6f 	isb	sy
 8016d06:	f3bf 8f4f 	dsb	sy
 8016d0a:	617b      	str	r3, [r7, #20]
}
 8016d0c:	bf00      	nop
 8016d0e:	e7fe      	b.n	8016d0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016d10:	4b0a      	ldr	r3, [pc, #40]	; (8016d3c <vTaskPlaceOnEventListRestricted+0x54>)
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	3318      	adds	r3, #24
 8016d16:	4619      	mov	r1, r3
 8016d18:	68f8      	ldr	r0, [r7, #12]
 8016d1a:	f7fe f98e 	bl	801503a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d002      	beq.n	8016d2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016d24:	f04f 33ff 	mov.w	r3, #4294967295
 8016d28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016d2a:	6879      	ldr	r1, [r7, #4]
 8016d2c:	68b8      	ldr	r0, [r7, #8]
 8016d2e:	f000 fb63 	bl	80173f8 <prvAddCurrentTaskToDelayedList>
	}
 8016d32:	bf00      	nop
 8016d34:	3718      	adds	r7, #24
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}
 8016d3a:	bf00      	nop
 8016d3c:	20000f8c 	.word	0x20000f8c

08016d40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b086      	sub	sp, #24
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	68db      	ldr	r3, [r3, #12]
 8016d4c:	68db      	ldr	r3, [r3, #12]
 8016d4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016d50:	693b      	ldr	r3, [r7, #16]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d10a      	bne.n	8016d6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d5a:	f383 8811 	msr	BASEPRI, r3
 8016d5e:	f3bf 8f6f 	isb	sy
 8016d62:	f3bf 8f4f 	dsb	sy
 8016d66:	60fb      	str	r3, [r7, #12]
}
 8016d68:	bf00      	nop
 8016d6a:	e7fe      	b.n	8016d6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016d6c:	693b      	ldr	r3, [r7, #16]
 8016d6e:	3318      	adds	r3, #24
 8016d70:	4618      	mov	r0, r3
 8016d72:	f7fe f9bf 	bl	80150f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d76:	4b1e      	ldr	r3, [pc, #120]	; (8016df0 <xTaskRemoveFromEventList+0xb0>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d11d      	bne.n	8016dba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016d7e:	693b      	ldr	r3, [r7, #16]
 8016d80:	3304      	adds	r3, #4
 8016d82:	4618      	mov	r0, r3
 8016d84:	f7fe f9b6 	bl	80150f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016d88:	693b      	ldr	r3, [r7, #16]
 8016d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d8c:	4b19      	ldr	r3, [pc, #100]	; (8016df4 <xTaskRemoveFromEventList+0xb4>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d903      	bls.n	8016d9c <xTaskRemoveFromEventList+0x5c>
 8016d94:	693b      	ldr	r3, [r7, #16]
 8016d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d98:	4a16      	ldr	r2, [pc, #88]	; (8016df4 <xTaskRemoveFromEventList+0xb4>)
 8016d9a:	6013      	str	r3, [r2, #0]
 8016d9c:	693b      	ldr	r3, [r7, #16]
 8016d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016da0:	4613      	mov	r3, r2
 8016da2:	009b      	lsls	r3, r3, #2
 8016da4:	4413      	add	r3, r2
 8016da6:	009b      	lsls	r3, r3, #2
 8016da8:	4a13      	ldr	r2, [pc, #76]	; (8016df8 <xTaskRemoveFromEventList+0xb8>)
 8016daa:	441a      	add	r2, r3
 8016dac:	693b      	ldr	r3, [r7, #16]
 8016dae:	3304      	adds	r3, #4
 8016db0:	4619      	mov	r1, r3
 8016db2:	4610      	mov	r0, r2
 8016db4:	f7fe f941 	bl	801503a <vListInsertEnd>
 8016db8:	e005      	b.n	8016dc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016dba:	693b      	ldr	r3, [r7, #16]
 8016dbc:	3318      	adds	r3, #24
 8016dbe:	4619      	mov	r1, r3
 8016dc0:	480e      	ldr	r0, [pc, #56]	; (8016dfc <xTaskRemoveFromEventList+0xbc>)
 8016dc2:	f7fe f93a 	bl	801503a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016dc6:	693b      	ldr	r3, [r7, #16]
 8016dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dca:	4b0d      	ldr	r3, [pc, #52]	; (8016e00 <xTaskRemoveFromEventList+0xc0>)
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d905      	bls.n	8016de0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016dd8:	4b0a      	ldr	r3, [pc, #40]	; (8016e04 <xTaskRemoveFromEventList+0xc4>)
 8016dda:	2201      	movs	r2, #1
 8016ddc:	601a      	str	r2, [r3, #0]
 8016dde:	e001      	b.n	8016de4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016de0:	2300      	movs	r3, #0
 8016de2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016de4:	697b      	ldr	r3, [r7, #20]
}
 8016de6:	4618      	mov	r0, r3
 8016de8:	3718      	adds	r7, #24
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd80      	pop	{r7, pc}
 8016dee:	bf00      	nop
 8016df0:	20001488 	.word	0x20001488
 8016df4:	20001468 	.word	0x20001468
 8016df8:	20000f90 	.word	0x20000f90
 8016dfc:	20001420 	.word	0x20001420
 8016e00:	20000f8c 	.word	0x20000f8c
 8016e04:	20001474 	.word	0x20001474

08016e08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016e08:	b480      	push	{r7}
 8016e0a:	b083      	sub	sp, #12
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016e10:	4b06      	ldr	r3, [pc, #24]	; (8016e2c <vTaskInternalSetTimeOutState+0x24>)
 8016e12:	681a      	ldr	r2, [r3, #0]
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016e18:	4b05      	ldr	r3, [pc, #20]	; (8016e30 <vTaskInternalSetTimeOutState+0x28>)
 8016e1a:	681a      	ldr	r2, [r3, #0]
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	605a      	str	r2, [r3, #4]
}
 8016e20:	bf00      	nop
 8016e22:	370c      	adds	r7, #12
 8016e24:	46bd      	mov	sp, r7
 8016e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2a:	4770      	bx	lr
 8016e2c:	20001478 	.word	0x20001478
 8016e30:	20001464 	.word	0x20001464

08016e34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b088      	sub	sp, #32
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d10a      	bne.n	8016e5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e48:	f383 8811 	msr	BASEPRI, r3
 8016e4c:	f3bf 8f6f 	isb	sy
 8016e50:	f3bf 8f4f 	dsb	sy
 8016e54:	613b      	str	r3, [r7, #16]
}
 8016e56:	bf00      	nop
 8016e58:	e7fe      	b.n	8016e58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d10a      	bne.n	8016e76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e64:	f383 8811 	msr	BASEPRI, r3
 8016e68:	f3bf 8f6f 	isb	sy
 8016e6c:	f3bf 8f4f 	dsb	sy
 8016e70:	60fb      	str	r3, [r7, #12]
}
 8016e72:	bf00      	nop
 8016e74:	e7fe      	b.n	8016e74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016e76:	f000 ff8d 	bl	8017d94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016e7a:	4b1d      	ldr	r3, [pc, #116]	; (8016ef0 <xTaskCheckForTimeOut+0xbc>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	69ba      	ldr	r2, [r7, #24]
 8016e86:	1ad3      	subs	r3, r2, r3
 8016e88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e92:	d102      	bne.n	8016e9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016e94:	2300      	movs	r3, #0
 8016e96:	61fb      	str	r3, [r7, #28]
 8016e98:	e023      	b.n	8016ee2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	681a      	ldr	r2, [r3, #0]
 8016e9e:	4b15      	ldr	r3, [pc, #84]	; (8016ef4 <xTaskCheckForTimeOut+0xc0>)
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	429a      	cmp	r2, r3
 8016ea4:	d007      	beq.n	8016eb6 <xTaskCheckForTimeOut+0x82>
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	685b      	ldr	r3, [r3, #4]
 8016eaa:	69ba      	ldr	r2, [r7, #24]
 8016eac:	429a      	cmp	r2, r3
 8016eae:	d302      	bcc.n	8016eb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	61fb      	str	r3, [r7, #28]
 8016eb4:	e015      	b.n	8016ee2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	697a      	ldr	r2, [r7, #20]
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d20b      	bcs.n	8016ed8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	697b      	ldr	r3, [r7, #20]
 8016ec6:	1ad2      	subs	r2, r2, r3
 8016ec8:	683b      	ldr	r3, [r7, #0]
 8016eca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016ecc:	6878      	ldr	r0, [r7, #4]
 8016ece:	f7ff ff9b 	bl	8016e08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	61fb      	str	r3, [r7, #28]
 8016ed6:	e004      	b.n	8016ee2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	2200      	movs	r2, #0
 8016edc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016ede:	2301      	movs	r3, #1
 8016ee0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016ee2:	f000 ff87 	bl	8017df4 <vPortExitCritical>

	return xReturn;
 8016ee6:	69fb      	ldr	r3, [r7, #28]
}
 8016ee8:	4618      	mov	r0, r3
 8016eea:	3720      	adds	r7, #32
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bd80      	pop	{r7, pc}
 8016ef0:	20001464 	.word	0x20001464
 8016ef4:	20001478 	.word	0x20001478

08016ef8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016ef8:	b480      	push	{r7}
 8016efa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016efc:	4b03      	ldr	r3, [pc, #12]	; (8016f0c <vTaskMissedYield+0x14>)
 8016efe:	2201      	movs	r2, #1
 8016f00:	601a      	str	r2, [r3, #0]
}
 8016f02:	bf00      	nop
 8016f04:	46bd      	mov	sp, r7
 8016f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0a:	4770      	bx	lr
 8016f0c:	20001474 	.word	0x20001474

08016f10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b082      	sub	sp, #8
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016f18:	f000 f852 	bl	8016fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016f1c:	4b06      	ldr	r3, [pc, #24]	; (8016f38 <prvIdleTask+0x28>)
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	d9f9      	bls.n	8016f18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016f24:	4b05      	ldr	r3, [pc, #20]	; (8016f3c <prvIdleTask+0x2c>)
 8016f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f2a:	601a      	str	r2, [r3, #0]
 8016f2c:	f3bf 8f4f 	dsb	sy
 8016f30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016f34:	e7f0      	b.n	8016f18 <prvIdleTask+0x8>
 8016f36:	bf00      	nop
 8016f38:	20000f90 	.word	0x20000f90
 8016f3c:	e000ed04 	.word	0xe000ed04

08016f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b082      	sub	sp, #8
 8016f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016f46:	2300      	movs	r3, #0
 8016f48:	607b      	str	r3, [r7, #4]
 8016f4a:	e00c      	b.n	8016f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016f4c:	687a      	ldr	r2, [r7, #4]
 8016f4e:	4613      	mov	r3, r2
 8016f50:	009b      	lsls	r3, r3, #2
 8016f52:	4413      	add	r3, r2
 8016f54:	009b      	lsls	r3, r3, #2
 8016f56:	4a12      	ldr	r2, [pc, #72]	; (8016fa0 <prvInitialiseTaskLists+0x60>)
 8016f58:	4413      	add	r3, r2
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f7fe f840 	bl	8014fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	3301      	adds	r3, #1
 8016f64:	607b      	str	r3, [r7, #4]
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	2b37      	cmp	r3, #55	; 0x37
 8016f6a:	d9ef      	bls.n	8016f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016f6c:	480d      	ldr	r0, [pc, #52]	; (8016fa4 <prvInitialiseTaskLists+0x64>)
 8016f6e:	f7fe f837 	bl	8014fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016f72:	480d      	ldr	r0, [pc, #52]	; (8016fa8 <prvInitialiseTaskLists+0x68>)
 8016f74:	f7fe f834 	bl	8014fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016f78:	480c      	ldr	r0, [pc, #48]	; (8016fac <prvInitialiseTaskLists+0x6c>)
 8016f7a:	f7fe f831 	bl	8014fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016f7e:	480c      	ldr	r0, [pc, #48]	; (8016fb0 <prvInitialiseTaskLists+0x70>)
 8016f80:	f7fe f82e 	bl	8014fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016f84:	480b      	ldr	r0, [pc, #44]	; (8016fb4 <prvInitialiseTaskLists+0x74>)
 8016f86:	f7fe f82b 	bl	8014fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016f8a:	4b0b      	ldr	r3, [pc, #44]	; (8016fb8 <prvInitialiseTaskLists+0x78>)
 8016f8c:	4a05      	ldr	r2, [pc, #20]	; (8016fa4 <prvInitialiseTaskLists+0x64>)
 8016f8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016f90:	4b0a      	ldr	r3, [pc, #40]	; (8016fbc <prvInitialiseTaskLists+0x7c>)
 8016f92:	4a05      	ldr	r2, [pc, #20]	; (8016fa8 <prvInitialiseTaskLists+0x68>)
 8016f94:	601a      	str	r2, [r3, #0]
}
 8016f96:	bf00      	nop
 8016f98:	3708      	adds	r7, #8
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}
 8016f9e:	bf00      	nop
 8016fa0:	20000f90 	.word	0x20000f90
 8016fa4:	200013f0 	.word	0x200013f0
 8016fa8:	20001404 	.word	0x20001404
 8016fac:	20001420 	.word	0x20001420
 8016fb0:	20001434 	.word	0x20001434
 8016fb4:	2000144c 	.word	0x2000144c
 8016fb8:	20001418 	.word	0x20001418
 8016fbc:	2000141c 	.word	0x2000141c

08016fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b082      	sub	sp, #8
 8016fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016fc6:	e019      	b.n	8016ffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016fc8:	f000 fee4 	bl	8017d94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016fcc:	4b10      	ldr	r3, [pc, #64]	; (8017010 <prvCheckTasksWaitingTermination+0x50>)
 8016fce:	68db      	ldr	r3, [r3, #12]
 8016fd0:	68db      	ldr	r3, [r3, #12]
 8016fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	3304      	adds	r3, #4
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7fe f88b 	bl	80150f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016fde:	4b0d      	ldr	r3, [pc, #52]	; (8017014 <prvCheckTasksWaitingTermination+0x54>)
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	3b01      	subs	r3, #1
 8016fe4:	4a0b      	ldr	r2, [pc, #44]	; (8017014 <prvCheckTasksWaitingTermination+0x54>)
 8016fe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016fe8:	4b0b      	ldr	r3, [pc, #44]	; (8017018 <prvCheckTasksWaitingTermination+0x58>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	3b01      	subs	r3, #1
 8016fee:	4a0a      	ldr	r2, [pc, #40]	; (8017018 <prvCheckTasksWaitingTermination+0x58>)
 8016ff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016ff2:	f000 feff 	bl	8017df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016ff6:	6878      	ldr	r0, [r7, #4]
 8016ff8:	f000 f810 	bl	801701c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016ffc:	4b06      	ldr	r3, [pc, #24]	; (8017018 <prvCheckTasksWaitingTermination+0x58>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d1e1      	bne.n	8016fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017004:	bf00      	nop
 8017006:	bf00      	nop
 8017008:	3708      	adds	r7, #8
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	20001434 	.word	0x20001434
 8017014:	20001460 	.word	0x20001460
 8017018:	20001448 	.word	0x20001448

0801701c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801701c:	b580      	push	{r7, lr}
 801701e:	b084      	sub	sp, #16
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	3354      	adds	r3, #84	; 0x54
 8017028:	4618      	mov	r0, r3
 801702a:	f003 ffaf 	bl	801af8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017034:	2b00      	cmp	r3, #0
 8017036:	d108      	bne.n	801704a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801703c:	4618      	mov	r0, r3
 801703e:	f001 f897 	bl	8018170 <vPortFree>
				vPortFree( pxTCB );
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f001 f894 	bl	8018170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017048:	e018      	b.n	801707c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017050:	2b01      	cmp	r3, #1
 8017052:	d103      	bne.n	801705c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017054:	6878      	ldr	r0, [r7, #4]
 8017056:	f001 f88b 	bl	8018170 <vPortFree>
	}
 801705a:	e00f      	b.n	801707c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017062:	2b02      	cmp	r3, #2
 8017064:	d00a      	beq.n	801707c <prvDeleteTCB+0x60>
	__asm volatile
 8017066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801706a:	f383 8811 	msr	BASEPRI, r3
 801706e:	f3bf 8f6f 	isb	sy
 8017072:	f3bf 8f4f 	dsb	sy
 8017076:	60fb      	str	r3, [r7, #12]
}
 8017078:	bf00      	nop
 801707a:	e7fe      	b.n	801707a <prvDeleteTCB+0x5e>
	}
 801707c:	bf00      	nop
 801707e:	3710      	adds	r7, #16
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}

08017084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017084:	b480      	push	{r7}
 8017086:	b083      	sub	sp, #12
 8017088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801708a:	4b0c      	ldr	r3, [pc, #48]	; (80170bc <prvResetNextTaskUnblockTime+0x38>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d104      	bne.n	801709e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017094:	4b0a      	ldr	r3, [pc, #40]	; (80170c0 <prvResetNextTaskUnblockTime+0x3c>)
 8017096:	f04f 32ff 	mov.w	r2, #4294967295
 801709a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801709c:	e008      	b.n	80170b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801709e:	4b07      	ldr	r3, [pc, #28]	; (80170bc <prvResetNextTaskUnblockTime+0x38>)
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	68db      	ldr	r3, [r3, #12]
 80170a4:	68db      	ldr	r3, [r3, #12]
 80170a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	685b      	ldr	r3, [r3, #4]
 80170ac:	4a04      	ldr	r2, [pc, #16]	; (80170c0 <prvResetNextTaskUnblockTime+0x3c>)
 80170ae:	6013      	str	r3, [r2, #0]
}
 80170b0:	bf00      	nop
 80170b2:	370c      	adds	r7, #12
 80170b4:	46bd      	mov	sp, r7
 80170b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ba:	4770      	bx	lr
 80170bc:	20001418 	.word	0x20001418
 80170c0:	20001480 	.word	0x20001480

080170c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80170c4:	b480      	push	{r7}
 80170c6:	b083      	sub	sp, #12
 80170c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80170ca:	4b05      	ldr	r3, [pc, #20]	; (80170e0 <xTaskGetCurrentTaskHandle+0x1c>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 80170d0:	687b      	ldr	r3, [r7, #4]
	}
 80170d2:	4618      	mov	r0, r3
 80170d4:	370c      	adds	r7, #12
 80170d6:	46bd      	mov	sp, r7
 80170d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170dc:	4770      	bx	lr
 80170de:	bf00      	nop
 80170e0:	20000f8c 	.word	0x20000f8c

080170e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80170e4:	b480      	push	{r7}
 80170e6:	b083      	sub	sp, #12
 80170e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80170ea:	4b0b      	ldr	r3, [pc, #44]	; (8017118 <xTaskGetSchedulerState+0x34>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d102      	bne.n	80170f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80170f2:	2301      	movs	r3, #1
 80170f4:	607b      	str	r3, [r7, #4]
 80170f6:	e008      	b.n	801710a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80170f8:	4b08      	ldr	r3, [pc, #32]	; (801711c <xTaskGetSchedulerState+0x38>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d102      	bne.n	8017106 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017100:	2302      	movs	r3, #2
 8017102:	607b      	str	r3, [r7, #4]
 8017104:	e001      	b.n	801710a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017106:	2300      	movs	r3, #0
 8017108:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801710a:	687b      	ldr	r3, [r7, #4]
	}
 801710c:	4618      	mov	r0, r3
 801710e:	370c      	adds	r7, #12
 8017110:	46bd      	mov	sp, r7
 8017112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017116:	4770      	bx	lr
 8017118:	2000146c 	.word	0x2000146c
 801711c:	20001488 	.word	0x20001488

08017120 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017120:	b580      	push	{r7, lr}
 8017122:	b084      	sub	sp, #16
 8017124:	af00      	add	r7, sp, #0
 8017126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801712c:	2300      	movs	r3, #0
 801712e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d051      	beq.n	80171da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017136:	68bb      	ldr	r3, [r7, #8]
 8017138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801713a:	4b2a      	ldr	r3, [pc, #168]	; (80171e4 <xTaskPriorityInherit+0xc4>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017140:	429a      	cmp	r2, r3
 8017142:	d241      	bcs.n	80171c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017144:	68bb      	ldr	r3, [r7, #8]
 8017146:	699b      	ldr	r3, [r3, #24]
 8017148:	2b00      	cmp	r3, #0
 801714a:	db06      	blt.n	801715a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801714c:	4b25      	ldr	r3, [pc, #148]	; (80171e4 <xTaskPriorityInherit+0xc4>)
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017152:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801715a:	68bb      	ldr	r3, [r7, #8]
 801715c:	6959      	ldr	r1, [r3, #20]
 801715e:	68bb      	ldr	r3, [r7, #8]
 8017160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017162:	4613      	mov	r3, r2
 8017164:	009b      	lsls	r3, r3, #2
 8017166:	4413      	add	r3, r2
 8017168:	009b      	lsls	r3, r3, #2
 801716a:	4a1f      	ldr	r2, [pc, #124]	; (80171e8 <xTaskPriorityInherit+0xc8>)
 801716c:	4413      	add	r3, r2
 801716e:	4299      	cmp	r1, r3
 8017170:	d122      	bne.n	80171b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017172:	68bb      	ldr	r3, [r7, #8]
 8017174:	3304      	adds	r3, #4
 8017176:	4618      	mov	r0, r3
 8017178:	f7fd ffbc 	bl	80150f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801717c:	4b19      	ldr	r3, [pc, #100]	; (80171e4 <xTaskPriorityInherit+0xc4>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017182:	68bb      	ldr	r3, [r7, #8]
 8017184:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017186:	68bb      	ldr	r3, [r7, #8]
 8017188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801718a:	4b18      	ldr	r3, [pc, #96]	; (80171ec <xTaskPriorityInherit+0xcc>)
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	429a      	cmp	r2, r3
 8017190:	d903      	bls.n	801719a <xTaskPriorityInherit+0x7a>
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017196:	4a15      	ldr	r2, [pc, #84]	; (80171ec <xTaskPriorityInherit+0xcc>)
 8017198:	6013      	str	r3, [r2, #0]
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801719e:	4613      	mov	r3, r2
 80171a0:	009b      	lsls	r3, r3, #2
 80171a2:	4413      	add	r3, r2
 80171a4:	009b      	lsls	r3, r3, #2
 80171a6:	4a10      	ldr	r2, [pc, #64]	; (80171e8 <xTaskPriorityInherit+0xc8>)
 80171a8:	441a      	add	r2, r3
 80171aa:	68bb      	ldr	r3, [r7, #8]
 80171ac:	3304      	adds	r3, #4
 80171ae:	4619      	mov	r1, r3
 80171b0:	4610      	mov	r0, r2
 80171b2:	f7fd ff42 	bl	801503a <vListInsertEnd>
 80171b6:	e004      	b.n	80171c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80171b8:	4b0a      	ldr	r3, [pc, #40]	; (80171e4 <xTaskPriorityInherit+0xc4>)
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171be:	68bb      	ldr	r3, [r7, #8]
 80171c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80171c2:	2301      	movs	r3, #1
 80171c4:	60fb      	str	r3, [r7, #12]
 80171c6:	e008      	b.n	80171da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80171c8:	68bb      	ldr	r3, [r7, #8]
 80171ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80171cc:	4b05      	ldr	r3, [pc, #20]	; (80171e4 <xTaskPriorityInherit+0xc4>)
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171d2:	429a      	cmp	r2, r3
 80171d4:	d201      	bcs.n	80171da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80171d6:	2301      	movs	r3, #1
 80171d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80171da:	68fb      	ldr	r3, [r7, #12]
	}
 80171dc:	4618      	mov	r0, r3
 80171de:	3710      	adds	r7, #16
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	20000f8c 	.word	0x20000f8c
 80171e8:	20000f90 	.word	0x20000f90
 80171ec:	20001468 	.word	0x20001468

080171f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b086      	sub	sp, #24
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80171fc:	2300      	movs	r3, #0
 80171fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d056      	beq.n	80172b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017206:	4b2e      	ldr	r3, [pc, #184]	; (80172c0 <xTaskPriorityDisinherit+0xd0>)
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	693a      	ldr	r2, [r7, #16]
 801720c:	429a      	cmp	r2, r3
 801720e:	d00a      	beq.n	8017226 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017214:	f383 8811 	msr	BASEPRI, r3
 8017218:	f3bf 8f6f 	isb	sy
 801721c:	f3bf 8f4f 	dsb	sy
 8017220:	60fb      	str	r3, [r7, #12]
}
 8017222:	bf00      	nop
 8017224:	e7fe      	b.n	8017224 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017226:	693b      	ldr	r3, [r7, #16]
 8017228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801722a:	2b00      	cmp	r3, #0
 801722c:	d10a      	bne.n	8017244 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017232:	f383 8811 	msr	BASEPRI, r3
 8017236:	f3bf 8f6f 	isb	sy
 801723a:	f3bf 8f4f 	dsb	sy
 801723e:	60bb      	str	r3, [r7, #8]
}
 8017240:	bf00      	nop
 8017242:	e7fe      	b.n	8017242 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017244:	693b      	ldr	r3, [r7, #16]
 8017246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017248:	1e5a      	subs	r2, r3, #1
 801724a:	693b      	ldr	r3, [r7, #16]
 801724c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017252:	693b      	ldr	r3, [r7, #16]
 8017254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017256:	429a      	cmp	r2, r3
 8017258:	d02c      	beq.n	80172b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801725a:	693b      	ldr	r3, [r7, #16]
 801725c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801725e:	2b00      	cmp	r3, #0
 8017260:	d128      	bne.n	80172b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	3304      	adds	r3, #4
 8017266:	4618      	mov	r0, r3
 8017268:	f7fd ff44 	bl	80150f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801726c:	693b      	ldr	r3, [r7, #16]
 801726e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017270:	693b      	ldr	r3, [r7, #16]
 8017272:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017274:	693b      	ldr	r3, [r7, #16]
 8017276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017278:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801727c:	693b      	ldr	r3, [r7, #16]
 801727e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017284:	4b0f      	ldr	r3, [pc, #60]	; (80172c4 <xTaskPriorityDisinherit+0xd4>)
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	429a      	cmp	r2, r3
 801728a:	d903      	bls.n	8017294 <xTaskPriorityDisinherit+0xa4>
 801728c:	693b      	ldr	r3, [r7, #16]
 801728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017290:	4a0c      	ldr	r2, [pc, #48]	; (80172c4 <xTaskPriorityDisinherit+0xd4>)
 8017292:	6013      	str	r3, [r2, #0]
 8017294:	693b      	ldr	r3, [r7, #16]
 8017296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017298:	4613      	mov	r3, r2
 801729a:	009b      	lsls	r3, r3, #2
 801729c:	4413      	add	r3, r2
 801729e:	009b      	lsls	r3, r3, #2
 80172a0:	4a09      	ldr	r2, [pc, #36]	; (80172c8 <xTaskPriorityDisinherit+0xd8>)
 80172a2:	441a      	add	r2, r3
 80172a4:	693b      	ldr	r3, [r7, #16]
 80172a6:	3304      	adds	r3, #4
 80172a8:	4619      	mov	r1, r3
 80172aa:	4610      	mov	r0, r2
 80172ac:	f7fd fec5 	bl	801503a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80172b0:	2301      	movs	r3, #1
 80172b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80172b4:	697b      	ldr	r3, [r7, #20]
	}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3718      	adds	r7, #24
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}
 80172be:	bf00      	nop
 80172c0:	20000f8c 	.word	0x20000f8c
 80172c4:	20001468 	.word	0x20001468
 80172c8:	20000f90 	.word	0x20000f90

080172cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b088      	sub	sp, #32
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
 80172d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80172da:	2301      	movs	r3, #1
 80172dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d06a      	beq.n	80173ba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80172e4:	69bb      	ldr	r3, [r7, #24]
 80172e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d10a      	bne.n	8017302 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80172ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172f0:	f383 8811 	msr	BASEPRI, r3
 80172f4:	f3bf 8f6f 	isb	sy
 80172f8:	f3bf 8f4f 	dsb	sy
 80172fc:	60fb      	str	r3, [r7, #12]
}
 80172fe:	bf00      	nop
 8017300:	e7fe      	b.n	8017300 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017302:	69bb      	ldr	r3, [r7, #24]
 8017304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017306:	683a      	ldr	r2, [r7, #0]
 8017308:	429a      	cmp	r2, r3
 801730a:	d902      	bls.n	8017312 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	61fb      	str	r3, [r7, #28]
 8017310:	e002      	b.n	8017318 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017312:	69bb      	ldr	r3, [r7, #24]
 8017314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017316:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017318:	69bb      	ldr	r3, [r7, #24]
 801731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801731c:	69fa      	ldr	r2, [r7, #28]
 801731e:	429a      	cmp	r2, r3
 8017320:	d04b      	beq.n	80173ba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017322:	69bb      	ldr	r3, [r7, #24]
 8017324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017326:	697a      	ldr	r2, [r7, #20]
 8017328:	429a      	cmp	r2, r3
 801732a:	d146      	bne.n	80173ba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801732c:	4b25      	ldr	r3, [pc, #148]	; (80173c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	69ba      	ldr	r2, [r7, #24]
 8017332:	429a      	cmp	r2, r3
 8017334:	d10a      	bne.n	801734c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801733a:	f383 8811 	msr	BASEPRI, r3
 801733e:	f3bf 8f6f 	isb	sy
 8017342:	f3bf 8f4f 	dsb	sy
 8017346:	60bb      	str	r3, [r7, #8]
}
 8017348:	bf00      	nop
 801734a:	e7fe      	b.n	801734a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801734c:	69bb      	ldr	r3, [r7, #24]
 801734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017350:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017352:	69bb      	ldr	r3, [r7, #24]
 8017354:	69fa      	ldr	r2, [r7, #28]
 8017356:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017358:	69bb      	ldr	r3, [r7, #24]
 801735a:	699b      	ldr	r3, [r3, #24]
 801735c:	2b00      	cmp	r3, #0
 801735e:	db04      	blt.n	801736a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017360:	69fb      	ldr	r3, [r7, #28]
 8017362:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017366:	69bb      	ldr	r3, [r7, #24]
 8017368:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801736a:	69bb      	ldr	r3, [r7, #24]
 801736c:	6959      	ldr	r1, [r3, #20]
 801736e:	693a      	ldr	r2, [r7, #16]
 8017370:	4613      	mov	r3, r2
 8017372:	009b      	lsls	r3, r3, #2
 8017374:	4413      	add	r3, r2
 8017376:	009b      	lsls	r3, r3, #2
 8017378:	4a13      	ldr	r2, [pc, #76]	; (80173c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801737a:	4413      	add	r3, r2
 801737c:	4299      	cmp	r1, r3
 801737e:	d11c      	bne.n	80173ba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017380:	69bb      	ldr	r3, [r7, #24]
 8017382:	3304      	adds	r3, #4
 8017384:	4618      	mov	r0, r3
 8017386:	f7fd feb5 	bl	80150f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801738a:	69bb      	ldr	r3, [r7, #24]
 801738c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801738e:	4b0f      	ldr	r3, [pc, #60]	; (80173cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	429a      	cmp	r2, r3
 8017394:	d903      	bls.n	801739e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017396:	69bb      	ldr	r3, [r7, #24]
 8017398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801739a:	4a0c      	ldr	r2, [pc, #48]	; (80173cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801739c:	6013      	str	r3, [r2, #0]
 801739e:	69bb      	ldr	r3, [r7, #24]
 80173a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173a2:	4613      	mov	r3, r2
 80173a4:	009b      	lsls	r3, r3, #2
 80173a6:	4413      	add	r3, r2
 80173a8:	009b      	lsls	r3, r3, #2
 80173aa:	4a07      	ldr	r2, [pc, #28]	; (80173c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80173ac:	441a      	add	r2, r3
 80173ae:	69bb      	ldr	r3, [r7, #24]
 80173b0:	3304      	adds	r3, #4
 80173b2:	4619      	mov	r1, r3
 80173b4:	4610      	mov	r0, r2
 80173b6:	f7fd fe40 	bl	801503a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80173ba:	bf00      	nop
 80173bc:	3720      	adds	r7, #32
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}
 80173c2:	bf00      	nop
 80173c4:	20000f8c 	.word	0x20000f8c
 80173c8:	20000f90 	.word	0x20000f90
 80173cc:	20001468 	.word	0x20001468

080173d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80173d0:	b480      	push	{r7}
 80173d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80173d4:	4b07      	ldr	r3, [pc, #28]	; (80173f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d004      	beq.n	80173e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80173dc:	4b05      	ldr	r3, [pc, #20]	; (80173f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80173e2:	3201      	adds	r2, #1
 80173e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80173e6:	4b03      	ldr	r3, [pc, #12]	; (80173f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80173e8:	681b      	ldr	r3, [r3, #0]
	}
 80173ea:	4618      	mov	r0, r3
 80173ec:	46bd      	mov	sp, r7
 80173ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f2:	4770      	bx	lr
 80173f4:	20000f8c 	.word	0x20000f8c

080173f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b084      	sub	sp, #16
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
 8017400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017402:	4b21      	ldr	r3, [pc, #132]	; (8017488 <prvAddCurrentTaskToDelayedList+0x90>)
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017408:	4b20      	ldr	r3, [pc, #128]	; (801748c <prvAddCurrentTaskToDelayedList+0x94>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	3304      	adds	r3, #4
 801740e:	4618      	mov	r0, r3
 8017410:	f7fd fe70 	bl	80150f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801741a:	d10a      	bne.n	8017432 <prvAddCurrentTaskToDelayedList+0x3a>
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d007      	beq.n	8017432 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017422:	4b1a      	ldr	r3, [pc, #104]	; (801748c <prvAddCurrentTaskToDelayedList+0x94>)
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	3304      	adds	r3, #4
 8017428:	4619      	mov	r1, r3
 801742a:	4819      	ldr	r0, [pc, #100]	; (8017490 <prvAddCurrentTaskToDelayedList+0x98>)
 801742c:	f7fd fe05 	bl	801503a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017430:	e026      	b.n	8017480 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017432:	68fa      	ldr	r2, [r7, #12]
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	4413      	add	r3, r2
 8017438:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801743a:	4b14      	ldr	r3, [pc, #80]	; (801748c <prvAddCurrentTaskToDelayedList+0x94>)
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	68ba      	ldr	r2, [r7, #8]
 8017440:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017442:	68ba      	ldr	r2, [r7, #8]
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	429a      	cmp	r2, r3
 8017448:	d209      	bcs.n	801745e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801744a:	4b12      	ldr	r3, [pc, #72]	; (8017494 <prvAddCurrentTaskToDelayedList+0x9c>)
 801744c:	681a      	ldr	r2, [r3, #0]
 801744e:	4b0f      	ldr	r3, [pc, #60]	; (801748c <prvAddCurrentTaskToDelayedList+0x94>)
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	3304      	adds	r3, #4
 8017454:	4619      	mov	r1, r3
 8017456:	4610      	mov	r0, r2
 8017458:	f7fd fe13 	bl	8015082 <vListInsert>
}
 801745c:	e010      	b.n	8017480 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801745e:	4b0e      	ldr	r3, [pc, #56]	; (8017498 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017460:	681a      	ldr	r2, [r3, #0]
 8017462:	4b0a      	ldr	r3, [pc, #40]	; (801748c <prvAddCurrentTaskToDelayedList+0x94>)
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	3304      	adds	r3, #4
 8017468:	4619      	mov	r1, r3
 801746a:	4610      	mov	r0, r2
 801746c:	f7fd fe09 	bl	8015082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017470:	4b0a      	ldr	r3, [pc, #40]	; (801749c <prvAddCurrentTaskToDelayedList+0xa4>)
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	68ba      	ldr	r2, [r7, #8]
 8017476:	429a      	cmp	r2, r3
 8017478:	d202      	bcs.n	8017480 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801747a:	4a08      	ldr	r2, [pc, #32]	; (801749c <prvAddCurrentTaskToDelayedList+0xa4>)
 801747c:	68bb      	ldr	r3, [r7, #8]
 801747e:	6013      	str	r3, [r2, #0]
}
 8017480:	bf00      	nop
 8017482:	3710      	adds	r7, #16
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}
 8017488:	20001464 	.word	0x20001464
 801748c:	20000f8c 	.word	0x20000f8c
 8017490:	2000144c 	.word	0x2000144c
 8017494:	2000141c 	.word	0x2000141c
 8017498:	20001418 	.word	0x20001418
 801749c:	20001480 	.word	0x20001480

080174a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b08a      	sub	sp, #40	; 0x28
 80174a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80174a6:	2300      	movs	r3, #0
 80174a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80174aa:	f000 fb07 	bl	8017abc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80174ae:	4b1c      	ldr	r3, [pc, #112]	; (8017520 <xTimerCreateTimerTask+0x80>)
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d021      	beq.n	80174fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80174b6:	2300      	movs	r3, #0
 80174b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80174ba:	2300      	movs	r3, #0
 80174bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80174be:	1d3a      	adds	r2, r7, #4
 80174c0:	f107 0108 	add.w	r1, r7, #8
 80174c4:	f107 030c 	add.w	r3, r7, #12
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7fd fd6f 	bl	8014fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80174ce:	6879      	ldr	r1, [r7, #4]
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	68fa      	ldr	r2, [r7, #12]
 80174d4:	9202      	str	r2, [sp, #8]
 80174d6:	9301      	str	r3, [sp, #4]
 80174d8:	2302      	movs	r3, #2
 80174da:	9300      	str	r3, [sp, #0]
 80174dc:	2300      	movs	r3, #0
 80174de:	460a      	mov	r2, r1
 80174e0:	4910      	ldr	r1, [pc, #64]	; (8017524 <xTimerCreateTimerTask+0x84>)
 80174e2:	4811      	ldr	r0, [pc, #68]	; (8017528 <xTimerCreateTimerTask+0x88>)
 80174e4:	f7fe fe3e 	bl	8016164 <xTaskCreateStatic>
 80174e8:	4603      	mov	r3, r0
 80174ea:	4a10      	ldr	r2, [pc, #64]	; (801752c <xTimerCreateTimerTask+0x8c>)
 80174ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80174ee:	4b0f      	ldr	r3, [pc, #60]	; (801752c <xTimerCreateTimerTask+0x8c>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d001      	beq.n	80174fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80174f6:	2301      	movs	r3, #1
 80174f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d10a      	bne.n	8017516 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017504:	f383 8811 	msr	BASEPRI, r3
 8017508:	f3bf 8f6f 	isb	sy
 801750c:	f3bf 8f4f 	dsb	sy
 8017510:	613b      	str	r3, [r7, #16]
}
 8017512:	bf00      	nop
 8017514:	e7fe      	b.n	8017514 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017516:	697b      	ldr	r3, [r7, #20]
}
 8017518:	4618      	mov	r0, r3
 801751a:	3718      	adds	r7, #24
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}
 8017520:	200014bc 	.word	0x200014bc
 8017524:	08020d3c 	.word	0x08020d3c
 8017528:	08017665 	.word	0x08017665
 801752c:	200014c0 	.word	0x200014c0

08017530 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b08a      	sub	sp, #40	; 0x28
 8017534:	af00      	add	r7, sp, #0
 8017536:	60f8      	str	r0, [r7, #12]
 8017538:	60b9      	str	r1, [r7, #8]
 801753a:	607a      	str	r2, [r7, #4]
 801753c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801753e:	2300      	movs	r3, #0
 8017540:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d10a      	bne.n	801755e <xTimerGenericCommand+0x2e>
	__asm volatile
 8017548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801754c:	f383 8811 	msr	BASEPRI, r3
 8017550:	f3bf 8f6f 	isb	sy
 8017554:	f3bf 8f4f 	dsb	sy
 8017558:	623b      	str	r3, [r7, #32]
}
 801755a:	bf00      	nop
 801755c:	e7fe      	b.n	801755c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801755e:	4b1a      	ldr	r3, [pc, #104]	; (80175c8 <xTimerGenericCommand+0x98>)
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d02a      	beq.n	80175bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017572:	68bb      	ldr	r3, [r7, #8]
 8017574:	2b05      	cmp	r3, #5
 8017576:	dc18      	bgt.n	80175aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017578:	f7ff fdb4 	bl	80170e4 <xTaskGetSchedulerState>
 801757c:	4603      	mov	r3, r0
 801757e:	2b02      	cmp	r3, #2
 8017580:	d109      	bne.n	8017596 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017582:	4b11      	ldr	r3, [pc, #68]	; (80175c8 <xTimerGenericCommand+0x98>)
 8017584:	6818      	ldr	r0, [r3, #0]
 8017586:	f107 0110 	add.w	r1, r7, #16
 801758a:	2300      	movs	r3, #0
 801758c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801758e:	f7fd ff83 	bl	8015498 <xQueueGenericSend>
 8017592:	6278      	str	r0, [r7, #36]	; 0x24
 8017594:	e012      	b.n	80175bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017596:	4b0c      	ldr	r3, [pc, #48]	; (80175c8 <xTimerGenericCommand+0x98>)
 8017598:	6818      	ldr	r0, [r3, #0]
 801759a:	f107 0110 	add.w	r1, r7, #16
 801759e:	2300      	movs	r3, #0
 80175a0:	2200      	movs	r2, #0
 80175a2:	f7fd ff79 	bl	8015498 <xQueueGenericSend>
 80175a6:	6278      	str	r0, [r7, #36]	; 0x24
 80175a8:	e008      	b.n	80175bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80175aa:	4b07      	ldr	r3, [pc, #28]	; (80175c8 <xTimerGenericCommand+0x98>)
 80175ac:	6818      	ldr	r0, [r3, #0]
 80175ae:	f107 0110 	add.w	r1, r7, #16
 80175b2:	2300      	movs	r3, #0
 80175b4:	683a      	ldr	r2, [r7, #0]
 80175b6:	f7fe f86d 	bl	8015694 <xQueueGenericSendFromISR>
 80175ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80175bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3728      	adds	r7, #40	; 0x28
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}
 80175c6:	bf00      	nop
 80175c8:	200014bc 	.word	0x200014bc

080175cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b088      	sub	sp, #32
 80175d0:	af02      	add	r7, sp, #8
 80175d2:	6078      	str	r0, [r7, #4]
 80175d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175d6:	4b22      	ldr	r3, [pc, #136]	; (8017660 <prvProcessExpiredTimer+0x94>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	68db      	ldr	r3, [r3, #12]
 80175de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80175e0:	697b      	ldr	r3, [r7, #20]
 80175e2:	3304      	adds	r3, #4
 80175e4:	4618      	mov	r0, r3
 80175e6:	f7fd fd85 	bl	80150f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80175ea:	697b      	ldr	r3, [r7, #20]
 80175ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175f0:	f003 0304 	and.w	r3, r3, #4
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d022      	beq.n	801763e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80175f8:	697b      	ldr	r3, [r7, #20]
 80175fa:	699a      	ldr	r2, [r3, #24]
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	18d1      	adds	r1, r2, r3
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	683a      	ldr	r2, [r7, #0]
 8017604:	6978      	ldr	r0, [r7, #20]
 8017606:	f000 f8d1 	bl	80177ac <prvInsertTimerInActiveList>
 801760a:	4603      	mov	r3, r0
 801760c:	2b00      	cmp	r3, #0
 801760e:	d01f      	beq.n	8017650 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017610:	2300      	movs	r3, #0
 8017612:	9300      	str	r3, [sp, #0]
 8017614:	2300      	movs	r3, #0
 8017616:	687a      	ldr	r2, [r7, #4]
 8017618:	2100      	movs	r1, #0
 801761a:	6978      	ldr	r0, [r7, #20]
 801761c:	f7ff ff88 	bl	8017530 <xTimerGenericCommand>
 8017620:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017622:	693b      	ldr	r3, [r7, #16]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d113      	bne.n	8017650 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801762c:	f383 8811 	msr	BASEPRI, r3
 8017630:	f3bf 8f6f 	isb	sy
 8017634:	f3bf 8f4f 	dsb	sy
 8017638:	60fb      	str	r3, [r7, #12]
}
 801763a:	bf00      	nop
 801763c:	e7fe      	b.n	801763c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801763e:	697b      	ldr	r3, [r7, #20]
 8017640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017644:	f023 0301 	bic.w	r3, r3, #1
 8017648:	b2da      	uxtb	r2, r3
 801764a:	697b      	ldr	r3, [r7, #20]
 801764c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	6a1b      	ldr	r3, [r3, #32]
 8017654:	6978      	ldr	r0, [r7, #20]
 8017656:	4798      	blx	r3
}
 8017658:	bf00      	nop
 801765a:	3718      	adds	r7, #24
 801765c:	46bd      	mov	sp, r7
 801765e:	bd80      	pop	{r7, pc}
 8017660:	200014b4 	.word	0x200014b4

08017664 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b084      	sub	sp, #16
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801766c:	f107 0308 	add.w	r3, r7, #8
 8017670:	4618      	mov	r0, r3
 8017672:	f000 f857 	bl	8017724 <prvGetNextExpireTime>
 8017676:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	4619      	mov	r1, r3
 801767c:	68f8      	ldr	r0, [r7, #12]
 801767e:	f000 f803 	bl	8017688 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017682:	f000 f8d5 	bl	8017830 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017686:	e7f1      	b.n	801766c <prvTimerTask+0x8>

08017688 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b084      	sub	sp, #16
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
 8017690:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017692:	f7ff f92b 	bl	80168ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017696:	f107 0308 	add.w	r3, r7, #8
 801769a:	4618      	mov	r0, r3
 801769c:	f000 f866 	bl	801776c <prvSampleTimeNow>
 80176a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d130      	bne.n	801770a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80176a8:	683b      	ldr	r3, [r7, #0]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d10a      	bne.n	80176c4 <prvProcessTimerOrBlockTask+0x3c>
 80176ae:	687a      	ldr	r2, [r7, #4]
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	429a      	cmp	r2, r3
 80176b4:	d806      	bhi.n	80176c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80176b6:	f7ff f927 	bl	8016908 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80176ba:	68f9      	ldr	r1, [r7, #12]
 80176bc:	6878      	ldr	r0, [r7, #4]
 80176be:	f7ff ff85 	bl	80175cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80176c2:	e024      	b.n	801770e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d008      	beq.n	80176dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80176ca:	4b13      	ldr	r3, [pc, #76]	; (8017718 <prvProcessTimerOrBlockTask+0x90>)
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d101      	bne.n	80176d8 <prvProcessTimerOrBlockTask+0x50>
 80176d4:	2301      	movs	r3, #1
 80176d6:	e000      	b.n	80176da <prvProcessTimerOrBlockTask+0x52>
 80176d8:	2300      	movs	r3, #0
 80176da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80176dc:	4b0f      	ldr	r3, [pc, #60]	; (801771c <prvProcessTimerOrBlockTask+0x94>)
 80176de:	6818      	ldr	r0, [r3, #0]
 80176e0:	687a      	ldr	r2, [r7, #4]
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	1ad3      	subs	r3, r2, r3
 80176e6:	683a      	ldr	r2, [r7, #0]
 80176e8:	4619      	mov	r1, r3
 80176ea:	f7fe fd07 	bl	80160fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80176ee:	f7ff f90b 	bl	8016908 <xTaskResumeAll>
 80176f2:	4603      	mov	r3, r0
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d10a      	bne.n	801770e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80176f8:	4b09      	ldr	r3, [pc, #36]	; (8017720 <prvProcessTimerOrBlockTask+0x98>)
 80176fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176fe:	601a      	str	r2, [r3, #0]
 8017700:	f3bf 8f4f 	dsb	sy
 8017704:	f3bf 8f6f 	isb	sy
}
 8017708:	e001      	b.n	801770e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801770a:	f7ff f8fd 	bl	8016908 <xTaskResumeAll>
}
 801770e:	bf00      	nop
 8017710:	3710      	adds	r7, #16
 8017712:	46bd      	mov	sp, r7
 8017714:	bd80      	pop	{r7, pc}
 8017716:	bf00      	nop
 8017718:	200014b8 	.word	0x200014b8
 801771c:	200014bc 	.word	0x200014bc
 8017720:	e000ed04 	.word	0xe000ed04

08017724 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017724:	b480      	push	{r7}
 8017726:	b085      	sub	sp, #20
 8017728:	af00      	add	r7, sp, #0
 801772a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801772c:	4b0e      	ldr	r3, [pc, #56]	; (8017768 <prvGetNextExpireTime+0x44>)
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d101      	bne.n	801773a <prvGetNextExpireTime+0x16>
 8017736:	2201      	movs	r2, #1
 8017738:	e000      	b.n	801773c <prvGetNextExpireTime+0x18>
 801773a:	2200      	movs	r2, #0
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d105      	bne.n	8017754 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017748:	4b07      	ldr	r3, [pc, #28]	; (8017768 <prvGetNextExpireTime+0x44>)
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	68db      	ldr	r3, [r3, #12]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	60fb      	str	r3, [r7, #12]
 8017752:	e001      	b.n	8017758 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017754:	2300      	movs	r3, #0
 8017756:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017758:	68fb      	ldr	r3, [r7, #12]
}
 801775a:	4618      	mov	r0, r3
 801775c:	3714      	adds	r7, #20
 801775e:	46bd      	mov	sp, r7
 8017760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017764:	4770      	bx	lr
 8017766:	bf00      	nop
 8017768:	200014b4 	.word	0x200014b4

0801776c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b084      	sub	sp, #16
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017774:	f7ff f966 	bl	8016a44 <xTaskGetTickCount>
 8017778:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801777a:	4b0b      	ldr	r3, [pc, #44]	; (80177a8 <prvSampleTimeNow+0x3c>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	68fa      	ldr	r2, [r7, #12]
 8017780:	429a      	cmp	r2, r3
 8017782:	d205      	bcs.n	8017790 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017784:	f000 f936 	bl	80179f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	2201      	movs	r2, #1
 801778c:	601a      	str	r2, [r3, #0]
 801778e:	e002      	b.n	8017796 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2200      	movs	r2, #0
 8017794:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017796:	4a04      	ldr	r2, [pc, #16]	; (80177a8 <prvSampleTimeNow+0x3c>)
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801779c:	68fb      	ldr	r3, [r7, #12]
}
 801779e:	4618      	mov	r0, r3
 80177a0:	3710      	adds	r7, #16
 80177a2:	46bd      	mov	sp, r7
 80177a4:	bd80      	pop	{r7, pc}
 80177a6:	bf00      	nop
 80177a8:	200014c4 	.word	0x200014c4

080177ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b086      	sub	sp, #24
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	60f8      	str	r0, [r7, #12]
 80177b4:	60b9      	str	r1, [r7, #8]
 80177b6:	607a      	str	r2, [r7, #4]
 80177b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80177ba:	2300      	movs	r3, #0
 80177bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	68ba      	ldr	r2, [r7, #8]
 80177c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	68fa      	ldr	r2, [r7, #12]
 80177c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80177ca:	68ba      	ldr	r2, [r7, #8]
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	429a      	cmp	r2, r3
 80177d0:	d812      	bhi.n	80177f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80177d2:	687a      	ldr	r2, [r7, #4]
 80177d4:	683b      	ldr	r3, [r7, #0]
 80177d6:	1ad2      	subs	r2, r2, r3
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	699b      	ldr	r3, [r3, #24]
 80177dc:	429a      	cmp	r2, r3
 80177de:	d302      	bcc.n	80177e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80177e0:	2301      	movs	r3, #1
 80177e2:	617b      	str	r3, [r7, #20]
 80177e4:	e01b      	b.n	801781e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80177e6:	4b10      	ldr	r3, [pc, #64]	; (8017828 <prvInsertTimerInActiveList+0x7c>)
 80177e8:	681a      	ldr	r2, [r3, #0]
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	3304      	adds	r3, #4
 80177ee:	4619      	mov	r1, r3
 80177f0:	4610      	mov	r0, r2
 80177f2:	f7fd fc46 	bl	8015082 <vListInsert>
 80177f6:	e012      	b.n	801781e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80177f8:	687a      	ldr	r2, [r7, #4]
 80177fa:	683b      	ldr	r3, [r7, #0]
 80177fc:	429a      	cmp	r2, r3
 80177fe:	d206      	bcs.n	801780e <prvInsertTimerInActiveList+0x62>
 8017800:	68ba      	ldr	r2, [r7, #8]
 8017802:	683b      	ldr	r3, [r7, #0]
 8017804:	429a      	cmp	r2, r3
 8017806:	d302      	bcc.n	801780e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017808:	2301      	movs	r3, #1
 801780a:	617b      	str	r3, [r7, #20]
 801780c:	e007      	b.n	801781e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801780e:	4b07      	ldr	r3, [pc, #28]	; (801782c <prvInsertTimerInActiveList+0x80>)
 8017810:	681a      	ldr	r2, [r3, #0]
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	3304      	adds	r3, #4
 8017816:	4619      	mov	r1, r3
 8017818:	4610      	mov	r0, r2
 801781a:	f7fd fc32 	bl	8015082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801781e:	697b      	ldr	r3, [r7, #20]
}
 8017820:	4618      	mov	r0, r3
 8017822:	3718      	adds	r7, #24
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}
 8017828:	200014b8 	.word	0x200014b8
 801782c:	200014b4 	.word	0x200014b4

08017830 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b08e      	sub	sp, #56	; 0x38
 8017834:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017836:	e0ca      	b.n	80179ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	2b00      	cmp	r3, #0
 801783c:	da18      	bge.n	8017870 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801783e:	1d3b      	adds	r3, r7, #4
 8017840:	3304      	adds	r3, #4
 8017842:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017846:	2b00      	cmp	r3, #0
 8017848:	d10a      	bne.n	8017860 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801784e:	f383 8811 	msr	BASEPRI, r3
 8017852:	f3bf 8f6f 	isb	sy
 8017856:	f3bf 8f4f 	dsb	sy
 801785a:	61fb      	str	r3, [r7, #28]
}
 801785c:	bf00      	nop
 801785e:	e7fe      	b.n	801785e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017866:	6850      	ldr	r0, [r2, #4]
 8017868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801786a:	6892      	ldr	r2, [r2, #8]
 801786c:	4611      	mov	r1, r2
 801786e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	2b00      	cmp	r3, #0
 8017874:	f2c0 80aa 	blt.w	80179cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801787e:	695b      	ldr	r3, [r3, #20]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d004      	beq.n	801788e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017886:	3304      	adds	r3, #4
 8017888:	4618      	mov	r0, r3
 801788a:	f7fd fc33 	bl	80150f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801788e:	463b      	mov	r3, r7
 8017890:	4618      	mov	r0, r3
 8017892:	f7ff ff6b 	bl	801776c <prvSampleTimeNow>
 8017896:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2b09      	cmp	r3, #9
 801789c:	f200 8097 	bhi.w	80179ce <prvProcessReceivedCommands+0x19e>
 80178a0:	a201      	add	r2, pc, #4	; (adr r2, 80178a8 <prvProcessReceivedCommands+0x78>)
 80178a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178a6:	bf00      	nop
 80178a8:	080178d1 	.word	0x080178d1
 80178ac:	080178d1 	.word	0x080178d1
 80178b0:	080178d1 	.word	0x080178d1
 80178b4:	08017945 	.word	0x08017945
 80178b8:	08017959 	.word	0x08017959
 80178bc:	080179a3 	.word	0x080179a3
 80178c0:	080178d1 	.word	0x080178d1
 80178c4:	080178d1 	.word	0x080178d1
 80178c8:	08017945 	.word	0x08017945
 80178cc:	08017959 	.word	0x08017959
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80178d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80178d6:	f043 0301 	orr.w	r3, r3, #1
 80178da:	b2da      	uxtb	r2, r3
 80178dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80178e2:	68ba      	ldr	r2, [r7, #8]
 80178e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e6:	699b      	ldr	r3, [r3, #24]
 80178e8:	18d1      	adds	r1, r2, r3
 80178ea:	68bb      	ldr	r3, [r7, #8]
 80178ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80178f0:	f7ff ff5c 	bl	80177ac <prvInsertTimerInActiveList>
 80178f4:	4603      	mov	r3, r0
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d069      	beq.n	80179ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80178fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178fc:	6a1b      	ldr	r3, [r3, #32]
 80178fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017900:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017908:	f003 0304 	and.w	r3, r3, #4
 801790c:	2b00      	cmp	r3, #0
 801790e:	d05e      	beq.n	80179ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017910:	68ba      	ldr	r2, [r7, #8]
 8017912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017914:	699b      	ldr	r3, [r3, #24]
 8017916:	441a      	add	r2, r3
 8017918:	2300      	movs	r3, #0
 801791a:	9300      	str	r3, [sp, #0]
 801791c:	2300      	movs	r3, #0
 801791e:	2100      	movs	r1, #0
 8017920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017922:	f7ff fe05 	bl	8017530 <xTimerGenericCommand>
 8017926:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017928:	6a3b      	ldr	r3, [r7, #32]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d14f      	bne.n	80179ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017932:	f383 8811 	msr	BASEPRI, r3
 8017936:	f3bf 8f6f 	isb	sy
 801793a:	f3bf 8f4f 	dsb	sy
 801793e:	61bb      	str	r3, [r7, #24]
}
 8017940:	bf00      	nop
 8017942:	e7fe      	b.n	8017942 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801794a:	f023 0301 	bic.w	r3, r3, #1
 801794e:	b2da      	uxtb	r2, r3
 8017950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017956:	e03a      	b.n	80179ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801795a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801795e:	f043 0301 	orr.w	r3, r3, #1
 8017962:	b2da      	uxtb	r2, r3
 8017964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801796a:	68ba      	ldr	r2, [r7, #8]
 801796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801796e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017972:	699b      	ldr	r3, [r3, #24]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d10a      	bne.n	801798e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801797c:	f383 8811 	msr	BASEPRI, r3
 8017980:	f3bf 8f6f 	isb	sy
 8017984:	f3bf 8f4f 	dsb	sy
 8017988:	617b      	str	r3, [r7, #20]
}
 801798a:	bf00      	nop
 801798c:	e7fe      	b.n	801798c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017990:	699a      	ldr	r2, [r3, #24]
 8017992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017994:	18d1      	adds	r1, r2, r3
 8017996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801799a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801799c:	f7ff ff06 	bl	80177ac <prvInsertTimerInActiveList>
					break;
 80179a0:	e015      	b.n	80179ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80179a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179a8:	f003 0302 	and.w	r3, r3, #2
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d103      	bne.n	80179b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80179b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179b2:	f000 fbdd 	bl	8018170 <vPortFree>
 80179b6:	e00a      	b.n	80179ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80179b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179be:	f023 0301 	bic.w	r3, r3, #1
 80179c2:	b2da      	uxtb	r2, r3
 80179c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80179ca:	e000      	b.n	80179ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80179cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80179ce:	4b08      	ldr	r3, [pc, #32]	; (80179f0 <prvProcessReceivedCommands+0x1c0>)
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	1d39      	adds	r1, r7, #4
 80179d4:	2200      	movs	r2, #0
 80179d6:	4618      	mov	r0, r3
 80179d8:	f7fd ff84 	bl	80158e4 <xQueueReceive>
 80179dc:	4603      	mov	r3, r0
 80179de:	2b00      	cmp	r3, #0
 80179e0:	f47f af2a 	bne.w	8017838 <prvProcessReceivedCommands+0x8>
	}
}
 80179e4:	bf00      	nop
 80179e6:	bf00      	nop
 80179e8:	3730      	adds	r7, #48	; 0x30
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}
 80179ee:	bf00      	nop
 80179f0:	200014bc 	.word	0x200014bc

080179f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b088      	sub	sp, #32
 80179f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80179fa:	e048      	b.n	8017a8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80179fc:	4b2d      	ldr	r3, [pc, #180]	; (8017ab4 <prvSwitchTimerLists+0xc0>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	68db      	ldr	r3, [r3, #12]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a06:	4b2b      	ldr	r3, [pc, #172]	; (8017ab4 <prvSwitchTimerLists+0xc0>)
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	68db      	ldr	r3, [r3, #12]
 8017a0c:	68db      	ldr	r3, [r3, #12]
 8017a0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	3304      	adds	r3, #4
 8017a14:	4618      	mov	r0, r3
 8017a16:	f7fd fb6d 	bl	80150f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	6a1b      	ldr	r3, [r3, #32]
 8017a1e:	68f8      	ldr	r0, [r7, #12]
 8017a20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017a28:	f003 0304 	and.w	r3, r3, #4
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d02e      	beq.n	8017a8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	699b      	ldr	r3, [r3, #24]
 8017a34:	693a      	ldr	r2, [r7, #16]
 8017a36:	4413      	add	r3, r2
 8017a38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017a3a:	68ba      	ldr	r2, [r7, #8]
 8017a3c:	693b      	ldr	r3, [r7, #16]
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	d90e      	bls.n	8017a60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	68ba      	ldr	r2, [r7, #8]
 8017a46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	68fa      	ldr	r2, [r7, #12]
 8017a4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017a4e:	4b19      	ldr	r3, [pc, #100]	; (8017ab4 <prvSwitchTimerLists+0xc0>)
 8017a50:	681a      	ldr	r2, [r3, #0]
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	3304      	adds	r3, #4
 8017a56:	4619      	mov	r1, r3
 8017a58:	4610      	mov	r0, r2
 8017a5a:	f7fd fb12 	bl	8015082 <vListInsert>
 8017a5e:	e016      	b.n	8017a8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017a60:	2300      	movs	r3, #0
 8017a62:	9300      	str	r3, [sp, #0]
 8017a64:	2300      	movs	r3, #0
 8017a66:	693a      	ldr	r2, [r7, #16]
 8017a68:	2100      	movs	r1, #0
 8017a6a:	68f8      	ldr	r0, [r7, #12]
 8017a6c:	f7ff fd60 	bl	8017530 <xTimerGenericCommand>
 8017a70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d10a      	bne.n	8017a8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a7c:	f383 8811 	msr	BASEPRI, r3
 8017a80:	f3bf 8f6f 	isb	sy
 8017a84:	f3bf 8f4f 	dsb	sy
 8017a88:	603b      	str	r3, [r7, #0]
}
 8017a8a:	bf00      	nop
 8017a8c:	e7fe      	b.n	8017a8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017a8e:	4b09      	ldr	r3, [pc, #36]	; (8017ab4 <prvSwitchTimerLists+0xc0>)
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d1b1      	bne.n	80179fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017a98:	4b06      	ldr	r3, [pc, #24]	; (8017ab4 <prvSwitchTimerLists+0xc0>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017a9e:	4b06      	ldr	r3, [pc, #24]	; (8017ab8 <prvSwitchTimerLists+0xc4>)
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	4a04      	ldr	r2, [pc, #16]	; (8017ab4 <prvSwitchTimerLists+0xc0>)
 8017aa4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017aa6:	4a04      	ldr	r2, [pc, #16]	; (8017ab8 <prvSwitchTimerLists+0xc4>)
 8017aa8:	697b      	ldr	r3, [r7, #20]
 8017aaa:	6013      	str	r3, [r2, #0]
}
 8017aac:	bf00      	nop
 8017aae:	3718      	adds	r7, #24
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	bd80      	pop	{r7, pc}
 8017ab4:	200014b4 	.word	0x200014b4
 8017ab8:	200014b8 	.word	0x200014b8

08017abc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b082      	sub	sp, #8
 8017ac0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017ac2:	f000 f967 	bl	8017d94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017ac6:	4b15      	ldr	r3, [pc, #84]	; (8017b1c <prvCheckForValidListAndQueue+0x60>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d120      	bne.n	8017b10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017ace:	4814      	ldr	r0, [pc, #80]	; (8017b20 <prvCheckForValidListAndQueue+0x64>)
 8017ad0:	f7fd fa86 	bl	8014fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017ad4:	4813      	ldr	r0, [pc, #76]	; (8017b24 <prvCheckForValidListAndQueue+0x68>)
 8017ad6:	f7fd fa83 	bl	8014fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017ada:	4b13      	ldr	r3, [pc, #76]	; (8017b28 <prvCheckForValidListAndQueue+0x6c>)
 8017adc:	4a10      	ldr	r2, [pc, #64]	; (8017b20 <prvCheckForValidListAndQueue+0x64>)
 8017ade:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017ae0:	4b12      	ldr	r3, [pc, #72]	; (8017b2c <prvCheckForValidListAndQueue+0x70>)
 8017ae2:	4a10      	ldr	r2, [pc, #64]	; (8017b24 <prvCheckForValidListAndQueue+0x68>)
 8017ae4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	9300      	str	r3, [sp, #0]
 8017aea:	4b11      	ldr	r3, [pc, #68]	; (8017b30 <prvCheckForValidListAndQueue+0x74>)
 8017aec:	4a11      	ldr	r2, [pc, #68]	; (8017b34 <prvCheckForValidListAndQueue+0x78>)
 8017aee:	2110      	movs	r1, #16
 8017af0:	200a      	movs	r0, #10
 8017af2:	f7fd fb91 	bl	8015218 <xQueueGenericCreateStatic>
 8017af6:	4603      	mov	r3, r0
 8017af8:	4a08      	ldr	r2, [pc, #32]	; (8017b1c <prvCheckForValidListAndQueue+0x60>)
 8017afa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017afc:	4b07      	ldr	r3, [pc, #28]	; (8017b1c <prvCheckForValidListAndQueue+0x60>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d005      	beq.n	8017b10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017b04:	4b05      	ldr	r3, [pc, #20]	; (8017b1c <prvCheckForValidListAndQueue+0x60>)
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	490b      	ldr	r1, [pc, #44]	; (8017b38 <prvCheckForValidListAndQueue+0x7c>)
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7fe faa2 	bl	8016054 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017b10:	f000 f970 	bl	8017df4 <vPortExitCritical>
}
 8017b14:	bf00      	nop
 8017b16:	46bd      	mov	sp, r7
 8017b18:	bd80      	pop	{r7, pc}
 8017b1a:	bf00      	nop
 8017b1c:	200014bc 	.word	0x200014bc
 8017b20:	2000148c 	.word	0x2000148c
 8017b24:	200014a0 	.word	0x200014a0
 8017b28:	200014b4 	.word	0x200014b4
 8017b2c:	200014b8 	.word	0x200014b8
 8017b30:	20001568 	.word	0x20001568
 8017b34:	200014c8 	.word	0x200014c8
 8017b38:	08020d44 	.word	0x08020d44

08017b3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017b3c:	b480      	push	{r7}
 8017b3e:	b085      	sub	sp, #20
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	60f8      	str	r0, [r7, #12]
 8017b44:	60b9      	str	r1, [r7, #8]
 8017b46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	3b04      	subs	r3, #4
 8017b4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	3b04      	subs	r3, #4
 8017b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017b5c:	68bb      	ldr	r3, [r7, #8]
 8017b5e:	f023 0201 	bic.w	r2, r3, #1
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	3b04      	subs	r3, #4
 8017b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017b6c:	4a0c      	ldr	r2, [pc, #48]	; (8017ba0 <pxPortInitialiseStack+0x64>)
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	3b14      	subs	r3, #20
 8017b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017b78:	687a      	ldr	r2, [r7, #4]
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	3b04      	subs	r3, #4
 8017b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	f06f 0202 	mvn.w	r2, #2
 8017b8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	3b20      	subs	r3, #32
 8017b90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017b92:	68fb      	ldr	r3, [r7, #12]
}
 8017b94:	4618      	mov	r0, r3
 8017b96:	3714      	adds	r7, #20
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9e:	4770      	bx	lr
 8017ba0:	08017ba5 	.word	0x08017ba5

08017ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017ba4:	b480      	push	{r7}
 8017ba6:	b085      	sub	sp, #20
 8017ba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017baa:	2300      	movs	r3, #0
 8017bac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017bae:	4b12      	ldr	r3, [pc, #72]	; (8017bf8 <prvTaskExitError+0x54>)
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bb6:	d00a      	beq.n	8017bce <prvTaskExitError+0x2a>
	__asm volatile
 8017bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bbc:	f383 8811 	msr	BASEPRI, r3
 8017bc0:	f3bf 8f6f 	isb	sy
 8017bc4:	f3bf 8f4f 	dsb	sy
 8017bc8:	60fb      	str	r3, [r7, #12]
}
 8017bca:	bf00      	nop
 8017bcc:	e7fe      	b.n	8017bcc <prvTaskExitError+0x28>
	__asm volatile
 8017bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bd2:	f383 8811 	msr	BASEPRI, r3
 8017bd6:	f3bf 8f6f 	isb	sy
 8017bda:	f3bf 8f4f 	dsb	sy
 8017bde:	60bb      	str	r3, [r7, #8]
}
 8017be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017be2:	bf00      	nop
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d0fc      	beq.n	8017be4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017bea:	bf00      	nop
 8017bec:	bf00      	nop
 8017bee:	3714      	adds	r7, #20
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf6:	4770      	bx	lr
 8017bf8:	20000190 	.word	0x20000190
 8017bfc:	00000000 	.word	0x00000000

08017c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017c00:	4b07      	ldr	r3, [pc, #28]	; (8017c20 <pxCurrentTCBConst2>)
 8017c02:	6819      	ldr	r1, [r3, #0]
 8017c04:	6808      	ldr	r0, [r1, #0]
 8017c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c0a:	f380 8809 	msr	PSP, r0
 8017c0e:	f3bf 8f6f 	isb	sy
 8017c12:	f04f 0000 	mov.w	r0, #0
 8017c16:	f380 8811 	msr	BASEPRI, r0
 8017c1a:	4770      	bx	lr
 8017c1c:	f3af 8000 	nop.w

08017c20 <pxCurrentTCBConst2>:
 8017c20:	20000f8c 	.word	0x20000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017c24:	bf00      	nop
 8017c26:	bf00      	nop

08017c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017c28:	4808      	ldr	r0, [pc, #32]	; (8017c4c <prvPortStartFirstTask+0x24>)
 8017c2a:	6800      	ldr	r0, [r0, #0]
 8017c2c:	6800      	ldr	r0, [r0, #0]
 8017c2e:	f380 8808 	msr	MSP, r0
 8017c32:	f04f 0000 	mov.w	r0, #0
 8017c36:	f380 8814 	msr	CONTROL, r0
 8017c3a:	b662      	cpsie	i
 8017c3c:	b661      	cpsie	f
 8017c3e:	f3bf 8f4f 	dsb	sy
 8017c42:	f3bf 8f6f 	isb	sy
 8017c46:	df00      	svc	0
 8017c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017c4a:	bf00      	nop
 8017c4c:	e000ed08 	.word	0xe000ed08

08017c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b086      	sub	sp, #24
 8017c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017c56:	4b46      	ldr	r3, [pc, #280]	; (8017d70 <xPortStartScheduler+0x120>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	4a46      	ldr	r2, [pc, #280]	; (8017d74 <xPortStartScheduler+0x124>)
 8017c5c:	4293      	cmp	r3, r2
 8017c5e:	d10a      	bne.n	8017c76 <xPortStartScheduler+0x26>
	__asm volatile
 8017c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c64:	f383 8811 	msr	BASEPRI, r3
 8017c68:	f3bf 8f6f 	isb	sy
 8017c6c:	f3bf 8f4f 	dsb	sy
 8017c70:	613b      	str	r3, [r7, #16]
}
 8017c72:	bf00      	nop
 8017c74:	e7fe      	b.n	8017c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017c76:	4b3e      	ldr	r3, [pc, #248]	; (8017d70 <xPortStartScheduler+0x120>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	4a3f      	ldr	r2, [pc, #252]	; (8017d78 <xPortStartScheduler+0x128>)
 8017c7c:	4293      	cmp	r3, r2
 8017c7e:	d10a      	bne.n	8017c96 <xPortStartScheduler+0x46>
	__asm volatile
 8017c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c84:	f383 8811 	msr	BASEPRI, r3
 8017c88:	f3bf 8f6f 	isb	sy
 8017c8c:	f3bf 8f4f 	dsb	sy
 8017c90:	60fb      	str	r3, [r7, #12]
}
 8017c92:	bf00      	nop
 8017c94:	e7fe      	b.n	8017c94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017c96:	4b39      	ldr	r3, [pc, #228]	; (8017d7c <xPortStartScheduler+0x12c>)
 8017c98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017c9a:	697b      	ldr	r3, [r7, #20]
 8017c9c:	781b      	ldrb	r3, [r3, #0]
 8017c9e:	b2db      	uxtb	r3, r3
 8017ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017ca2:	697b      	ldr	r3, [r7, #20]
 8017ca4:	22ff      	movs	r2, #255	; 0xff
 8017ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017ca8:	697b      	ldr	r3, [r7, #20]
 8017caa:	781b      	ldrb	r3, [r3, #0]
 8017cac:	b2db      	uxtb	r3, r3
 8017cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017cb0:	78fb      	ldrb	r3, [r7, #3]
 8017cb2:	b2db      	uxtb	r3, r3
 8017cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017cb8:	b2da      	uxtb	r2, r3
 8017cba:	4b31      	ldr	r3, [pc, #196]	; (8017d80 <xPortStartScheduler+0x130>)
 8017cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017cbe:	4b31      	ldr	r3, [pc, #196]	; (8017d84 <xPortStartScheduler+0x134>)
 8017cc0:	2207      	movs	r2, #7
 8017cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017cc4:	e009      	b.n	8017cda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017cc6:	4b2f      	ldr	r3, [pc, #188]	; (8017d84 <xPortStartScheduler+0x134>)
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	3b01      	subs	r3, #1
 8017ccc:	4a2d      	ldr	r2, [pc, #180]	; (8017d84 <xPortStartScheduler+0x134>)
 8017cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017cd0:	78fb      	ldrb	r3, [r7, #3]
 8017cd2:	b2db      	uxtb	r3, r3
 8017cd4:	005b      	lsls	r3, r3, #1
 8017cd6:	b2db      	uxtb	r3, r3
 8017cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017cda:	78fb      	ldrb	r3, [r7, #3]
 8017cdc:	b2db      	uxtb	r3, r3
 8017cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017ce2:	2b80      	cmp	r3, #128	; 0x80
 8017ce4:	d0ef      	beq.n	8017cc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017ce6:	4b27      	ldr	r3, [pc, #156]	; (8017d84 <xPortStartScheduler+0x134>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	f1c3 0307 	rsb	r3, r3, #7
 8017cee:	2b04      	cmp	r3, #4
 8017cf0:	d00a      	beq.n	8017d08 <xPortStartScheduler+0xb8>
	__asm volatile
 8017cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cf6:	f383 8811 	msr	BASEPRI, r3
 8017cfa:	f3bf 8f6f 	isb	sy
 8017cfe:	f3bf 8f4f 	dsb	sy
 8017d02:	60bb      	str	r3, [r7, #8]
}
 8017d04:	bf00      	nop
 8017d06:	e7fe      	b.n	8017d06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017d08:	4b1e      	ldr	r3, [pc, #120]	; (8017d84 <xPortStartScheduler+0x134>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	021b      	lsls	r3, r3, #8
 8017d0e:	4a1d      	ldr	r2, [pc, #116]	; (8017d84 <xPortStartScheduler+0x134>)
 8017d10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017d12:	4b1c      	ldr	r3, [pc, #112]	; (8017d84 <xPortStartScheduler+0x134>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017d1a:	4a1a      	ldr	r2, [pc, #104]	; (8017d84 <xPortStartScheduler+0x134>)
 8017d1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	b2da      	uxtb	r2, r3
 8017d22:	697b      	ldr	r3, [r7, #20]
 8017d24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017d26:	4b18      	ldr	r3, [pc, #96]	; (8017d88 <xPortStartScheduler+0x138>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	4a17      	ldr	r2, [pc, #92]	; (8017d88 <xPortStartScheduler+0x138>)
 8017d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017d32:	4b15      	ldr	r3, [pc, #84]	; (8017d88 <xPortStartScheduler+0x138>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	4a14      	ldr	r2, [pc, #80]	; (8017d88 <xPortStartScheduler+0x138>)
 8017d38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017d3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017d3e:	f000 f8dd 	bl	8017efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017d42:	4b12      	ldr	r3, [pc, #72]	; (8017d8c <xPortStartScheduler+0x13c>)
 8017d44:	2200      	movs	r2, #0
 8017d46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017d48:	f000 f8fc 	bl	8017f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017d4c:	4b10      	ldr	r3, [pc, #64]	; (8017d90 <xPortStartScheduler+0x140>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	4a0f      	ldr	r2, [pc, #60]	; (8017d90 <xPortStartScheduler+0x140>)
 8017d52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017d56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017d58:	f7ff ff66 	bl	8017c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017d5c:	f7fe ff3c 	bl	8016bd8 <vTaskSwitchContext>
	prvTaskExitError();
 8017d60:	f7ff ff20 	bl	8017ba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017d64:	2300      	movs	r3, #0
}
 8017d66:	4618      	mov	r0, r3
 8017d68:	3718      	adds	r7, #24
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bd80      	pop	{r7, pc}
 8017d6e:	bf00      	nop
 8017d70:	e000ed00 	.word	0xe000ed00
 8017d74:	410fc271 	.word	0x410fc271
 8017d78:	410fc270 	.word	0x410fc270
 8017d7c:	e000e400 	.word	0xe000e400
 8017d80:	200015b8 	.word	0x200015b8
 8017d84:	200015bc 	.word	0x200015bc
 8017d88:	e000ed20 	.word	0xe000ed20
 8017d8c:	20000190 	.word	0x20000190
 8017d90:	e000ef34 	.word	0xe000ef34

08017d94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017d94:	b480      	push	{r7}
 8017d96:	b083      	sub	sp, #12
 8017d98:	af00      	add	r7, sp, #0
	__asm volatile
 8017d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d9e:	f383 8811 	msr	BASEPRI, r3
 8017da2:	f3bf 8f6f 	isb	sy
 8017da6:	f3bf 8f4f 	dsb	sy
 8017daa:	607b      	str	r3, [r7, #4]
}
 8017dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017dae:	4b0f      	ldr	r3, [pc, #60]	; (8017dec <vPortEnterCritical+0x58>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	3301      	adds	r3, #1
 8017db4:	4a0d      	ldr	r2, [pc, #52]	; (8017dec <vPortEnterCritical+0x58>)
 8017db6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017db8:	4b0c      	ldr	r3, [pc, #48]	; (8017dec <vPortEnterCritical+0x58>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	2b01      	cmp	r3, #1
 8017dbe:	d10f      	bne.n	8017de0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017dc0:	4b0b      	ldr	r3, [pc, #44]	; (8017df0 <vPortEnterCritical+0x5c>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	b2db      	uxtb	r3, r3
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d00a      	beq.n	8017de0 <vPortEnterCritical+0x4c>
	__asm volatile
 8017dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dce:	f383 8811 	msr	BASEPRI, r3
 8017dd2:	f3bf 8f6f 	isb	sy
 8017dd6:	f3bf 8f4f 	dsb	sy
 8017dda:	603b      	str	r3, [r7, #0]
}
 8017ddc:	bf00      	nop
 8017dde:	e7fe      	b.n	8017dde <vPortEnterCritical+0x4a>
	}
}
 8017de0:	bf00      	nop
 8017de2:	370c      	adds	r7, #12
 8017de4:	46bd      	mov	sp, r7
 8017de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dea:	4770      	bx	lr
 8017dec:	20000190 	.word	0x20000190
 8017df0:	e000ed04 	.word	0xe000ed04

08017df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017df4:	b480      	push	{r7}
 8017df6:	b083      	sub	sp, #12
 8017df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017dfa:	4b12      	ldr	r3, [pc, #72]	; (8017e44 <vPortExitCritical+0x50>)
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d10a      	bne.n	8017e18 <vPortExitCritical+0x24>
	__asm volatile
 8017e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e06:	f383 8811 	msr	BASEPRI, r3
 8017e0a:	f3bf 8f6f 	isb	sy
 8017e0e:	f3bf 8f4f 	dsb	sy
 8017e12:	607b      	str	r3, [r7, #4]
}
 8017e14:	bf00      	nop
 8017e16:	e7fe      	b.n	8017e16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017e18:	4b0a      	ldr	r3, [pc, #40]	; (8017e44 <vPortExitCritical+0x50>)
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	3b01      	subs	r3, #1
 8017e1e:	4a09      	ldr	r2, [pc, #36]	; (8017e44 <vPortExitCritical+0x50>)
 8017e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017e22:	4b08      	ldr	r3, [pc, #32]	; (8017e44 <vPortExitCritical+0x50>)
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d105      	bne.n	8017e36 <vPortExitCritical+0x42>
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017e2e:	683b      	ldr	r3, [r7, #0]
 8017e30:	f383 8811 	msr	BASEPRI, r3
}
 8017e34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017e36:	bf00      	nop
 8017e38:	370c      	adds	r7, #12
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e40:	4770      	bx	lr
 8017e42:	bf00      	nop
 8017e44:	20000190 	.word	0x20000190
	...

08017e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017e50:	f3ef 8009 	mrs	r0, PSP
 8017e54:	f3bf 8f6f 	isb	sy
 8017e58:	4b15      	ldr	r3, [pc, #84]	; (8017eb0 <pxCurrentTCBConst>)
 8017e5a:	681a      	ldr	r2, [r3, #0]
 8017e5c:	f01e 0f10 	tst.w	lr, #16
 8017e60:	bf08      	it	eq
 8017e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e6a:	6010      	str	r0, [r2, #0]
 8017e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017e74:	f380 8811 	msr	BASEPRI, r0
 8017e78:	f3bf 8f4f 	dsb	sy
 8017e7c:	f3bf 8f6f 	isb	sy
 8017e80:	f7fe feaa 	bl	8016bd8 <vTaskSwitchContext>
 8017e84:	f04f 0000 	mov.w	r0, #0
 8017e88:	f380 8811 	msr	BASEPRI, r0
 8017e8c:	bc09      	pop	{r0, r3}
 8017e8e:	6819      	ldr	r1, [r3, #0]
 8017e90:	6808      	ldr	r0, [r1, #0]
 8017e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e96:	f01e 0f10 	tst.w	lr, #16
 8017e9a:	bf08      	it	eq
 8017e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017ea0:	f380 8809 	msr	PSP, r0
 8017ea4:	f3bf 8f6f 	isb	sy
 8017ea8:	4770      	bx	lr
 8017eaa:	bf00      	nop
 8017eac:	f3af 8000 	nop.w

08017eb0 <pxCurrentTCBConst>:
 8017eb0:	20000f8c 	.word	0x20000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017eb4:	bf00      	nop
 8017eb6:	bf00      	nop

08017eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b082      	sub	sp, #8
 8017ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8017ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ec2:	f383 8811 	msr	BASEPRI, r3
 8017ec6:	f3bf 8f6f 	isb	sy
 8017eca:	f3bf 8f4f 	dsb	sy
 8017ece:	607b      	str	r3, [r7, #4]
}
 8017ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017ed2:	f7fe fdc7 	bl	8016a64 <xTaskIncrementTick>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d003      	beq.n	8017ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017edc:	4b06      	ldr	r3, [pc, #24]	; (8017ef8 <xPortSysTickHandler+0x40>)
 8017ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ee2:	601a      	str	r2, [r3, #0]
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017ee8:	683b      	ldr	r3, [r7, #0]
 8017eea:	f383 8811 	msr	BASEPRI, r3
}
 8017eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017ef0:	bf00      	nop
 8017ef2:	3708      	adds	r7, #8
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}
 8017ef8:	e000ed04 	.word	0xe000ed04

08017efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017efc:	b480      	push	{r7}
 8017efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017f00:	4b0b      	ldr	r3, [pc, #44]	; (8017f30 <vPortSetupTimerInterrupt+0x34>)
 8017f02:	2200      	movs	r2, #0
 8017f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017f06:	4b0b      	ldr	r3, [pc, #44]	; (8017f34 <vPortSetupTimerInterrupt+0x38>)
 8017f08:	2200      	movs	r2, #0
 8017f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017f0c:	4b0a      	ldr	r3, [pc, #40]	; (8017f38 <vPortSetupTimerInterrupt+0x3c>)
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	4a0a      	ldr	r2, [pc, #40]	; (8017f3c <vPortSetupTimerInterrupt+0x40>)
 8017f12:	fba2 2303 	umull	r2, r3, r2, r3
 8017f16:	099b      	lsrs	r3, r3, #6
 8017f18:	4a09      	ldr	r2, [pc, #36]	; (8017f40 <vPortSetupTimerInterrupt+0x44>)
 8017f1a:	3b01      	subs	r3, #1
 8017f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017f1e:	4b04      	ldr	r3, [pc, #16]	; (8017f30 <vPortSetupTimerInterrupt+0x34>)
 8017f20:	2207      	movs	r2, #7
 8017f22:	601a      	str	r2, [r3, #0]
}
 8017f24:	bf00      	nop
 8017f26:	46bd      	mov	sp, r7
 8017f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2c:	4770      	bx	lr
 8017f2e:	bf00      	nop
 8017f30:	e000e010 	.word	0xe000e010
 8017f34:	e000e018 	.word	0xe000e018
 8017f38:	20000000 	.word	0x20000000
 8017f3c:	10624dd3 	.word	0x10624dd3
 8017f40:	e000e014 	.word	0xe000e014

08017f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017f54 <vPortEnableVFP+0x10>
 8017f48:	6801      	ldr	r1, [r0, #0]
 8017f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017f4e:	6001      	str	r1, [r0, #0]
 8017f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017f52:	bf00      	nop
 8017f54:	e000ed88 	.word	0xe000ed88

08017f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017f58:	b480      	push	{r7}
 8017f5a:	b085      	sub	sp, #20
 8017f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017f5e:	f3ef 8305 	mrs	r3, IPSR
 8017f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	2b0f      	cmp	r3, #15
 8017f68:	d914      	bls.n	8017f94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017f6a:	4a17      	ldr	r2, [pc, #92]	; (8017fc8 <vPortValidateInterruptPriority+0x70>)
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	4413      	add	r3, r2
 8017f70:	781b      	ldrb	r3, [r3, #0]
 8017f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017f74:	4b15      	ldr	r3, [pc, #84]	; (8017fcc <vPortValidateInterruptPriority+0x74>)
 8017f76:	781b      	ldrb	r3, [r3, #0]
 8017f78:	7afa      	ldrb	r2, [r7, #11]
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d20a      	bcs.n	8017f94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f82:	f383 8811 	msr	BASEPRI, r3
 8017f86:	f3bf 8f6f 	isb	sy
 8017f8a:	f3bf 8f4f 	dsb	sy
 8017f8e:	607b      	str	r3, [r7, #4]
}
 8017f90:	bf00      	nop
 8017f92:	e7fe      	b.n	8017f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017f94:	4b0e      	ldr	r3, [pc, #56]	; (8017fd0 <vPortValidateInterruptPriority+0x78>)
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017f9c:	4b0d      	ldr	r3, [pc, #52]	; (8017fd4 <vPortValidateInterruptPriority+0x7c>)
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d90a      	bls.n	8017fba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fa8:	f383 8811 	msr	BASEPRI, r3
 8017fac:	f3bf 8f6f 	isb	sy
 8017fb0:	f3bf 8f4f 	dsb	sy
 8017fb4:	603b      	str	r3, [r7, #0]
}
 8017fb6:	bf00      	nop
 8017fb8:	e7fe      	b.n	8017fb8 <vPortValidateInterruptPriority+0x60>
	}
 8017fba:	bf00      	nop
 8017fbc:	3714      	adds	r7, #20
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc4:	4770      	bx	lr
 8017fc6:	bf00      	nop
 8017fc8:	e000e3f0 	.word	0xe000e3f0
 8017fcc:	200015b8 	.word	0x200015b8
 8017fd0:	e000ed0c 	.word	0xe000ed0c
 8017fd4:	200015bc 	.word	0x200015bc

08017fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b08a      	sub	sp, #40	; 0x28
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017fe4:	f7fe fc82 	bl	80168ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017fe8:	4b5b      	ldr	r3, [pc, #364]	; (8018158 <pvPortMalloc+0x180>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d101      	bne.n	8017ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017ff0:	f000 f920 	bl	8018234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017ff4:	4b59      	ldr	r3, [pc, #356]	; (801815c <pvPortMalloc+0x184>)
 8017ff6:	681a      	ldr	r2, [r3, #0]
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	4013      	ands	r3, r2
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	f040 8093 	bne.w	8018128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d01d      	beq.n	8018044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018008:	2208      	movs	r2, #8
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	4413      	add	r3, r2
 801800e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	f003 0307 	and.w	r3, r3, #7
 8018016:	2b00      	cmp	r3, #0
 8018018:	d014      	beq.n	8018044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	f023 0307 	bic.w	r3, r3, #7
 8018020:	3308      	adds	r3, #8
 8018022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	f003 0307 	and.w	r3, r3, #7
 801802a:	2b00      	cmp	r3, #0
 801802c:	d00a      	beq.n	8018044 <pvPortMalloc+0x6c>
	__asm volatile
 801802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018032:	f383 8811 	msr	BASEPRI, r3
 8018036:	f3bf 8f6f 	isb	sy
 801803a:	f3bf 8f4f 	dsb	sy
 801803e:	617b      	str	r3, [r7, #20]
}
 8018040:	bf00      	nop
 8018042:	e7fe      	b.n	8018042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d06e      	beq.n	8018128 <pvPortMalloc+0x150>
 801804a:	4b45      	ldr	r3, [pc, #276]	; (8018160 <pvPortMalloc+0x188>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	687a      	ldr	r2, [r7, #4]
 8018050:	429a      	cmp	r2, r3
 8018052:	d869      	bhi.n	8018128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018054:	4b43      	ldr	r3, [pc, #268]	; (8018164 <pvPortMalloc+0x18c>)
 8018056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018058:	4b42      	ldr	r3, [pc, #264]	; (8018164 <pvPortMalloc+0x18c>)
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801805e:	e004      	b.n	801806a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806c:	685b      	ldr	r3, [r3, #4]
 801806e:	687a      	ldr	r2, [r7, #4]
 8018070:	429a      	cmp	r2, r3
 8018072:	d903      	bls.n	801807c <pvPortMalloc+0xa4>
 8018074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d1f1      	bne.n	8018060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801807c:	4b36      	ldr	r3, [pc, #216]	; (8018158 <pvPortMalloc+0x180>)
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018082:	429a      	cmp	r2, r3
 8018084:	d050      	beq.n	8018128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018086:	6a3b      	ldr	r3, [r7, #32]
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	2208      	movs	r2, #8
 801808c:	4413      	add	r3, r2
 801808e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018092:	681a      	ldr	r2, [r3, #0]
 8018094:	6a3b      	ldr	r3, [r7, #32]
 8018096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801809a:	685a      	ldr	r2, [r3, #4]
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	1ad2      	subs	r2, r2, r3
 80180a0:	2308      	movs	r3, #8
 80180a2:	005b      	lsls	r3, r3, #1
 80180a4:	429a      	cmp	r2, r3
 80180a6:	d91f      	bls.n	80180e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80180a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	4413      	add	r3, r2
 80180ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80180b0:	69bb      	ldr	r3, [r7, #24]
 80180b2:	f003 0307 	and.w	r3, r3, #7
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d00a      	beq.n	80180d0 <pvPortMalloc+0xf8>
	__asm volatile
 80180ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180be:	f383 8811 	msr	BASEPRI, r3
 80180c2:	f3bf 8f6f 	isb	sy
 80180c6:	f3bf 8f4f 	dsb	sy
 80180ca:	613b      	str	r3, [r7, #16]
}
 80180cc:	bf00      	nop
 80180ce:	e7fe      	b.n	80180ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80180d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d2:	685a      	ldr	r2, [r3, #4]
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	1ad2      	subs	r2, r2, r3
 80180d8:	69bb      	ldr	r3, [r7, #24]
 80180da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80180dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180de:	687a      	ldr	r2, [r7, #4]
 80180e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80180e2:	69b8      	ldr	r0, [r7, #24]
 80180e4:	f000 f908 	bl	80182f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80180e8:	4b1d      	ldr	r3, [pc, #116]	; (8018160 <pvPortMalloc+0x188>)
 80180ea:	681a      	ldr	r2, [r3, #0]
 80180ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ee:	685b      	ldr	r3, [r3, #4]
 80180f0:	1ad3      	subs	r3, r2, r3
 80180f2:	4a1b      	ldr	r2, [pc, #108]	; (8018160 <pvPortMalloc+0x188>)
 80180f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80180f6:	4b1a      	ldr	r3, [pc, #104]	; (8018160 <pvPortMalloc+0x188>)
 80180f8:	681a      	ldr	r2, [r3, #0]
 80180fa:	4b1b      	ldr	r3, [pc, #108]	; (8018168 <pvPortMalloc+0x190>)
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	429a      	cmp	r2, r3
 8018100:	d203      	bcs.n	801810a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018102:	4b17      	ldr	r3, [pc, #92]	; (8018160 <pvPortMalloc+0x188>)
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	4a18      	ldr	r2, [pc, #96]	; (8018168 <pvPortMalloc+0x190>)
 8018108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801810c:	685a      	ldr	r2, [r3, #4]
 801810e:	4b13      	ldr	r3, [pc, #76]	; (801815c <pvPortMalloc+0x184>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	431a      	orrs	r2, r3
 8018114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801811a:	2200      	movs	r2, #0
 801811c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801811e:	4b13      	ldr	r3, [pc, #76]	; (801816c <pvPortMalloc+0x194>)
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	3301      	adds	r3, #1
 8018124:	4a11      	ldr	r2, [pc, #68]	; (801816c <pvPortMalloc+0x194>)
 8018126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018128:	f7fe fbee 	bl	8016908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801812c:	69fb      	ldr	r3, [r7, #28]
 801812e:	f003 0307 	and.w	r3, r3, #7
 8018132:	2b00      	cmp	r3, #0
 8018134:	d00a      	beq.n	801814c <pvPortMalloc+0x174>
	__asm volatile
 8018136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801813a:	f383 8811 	msr	BASEPRI, r3
 801813e:	f3bf 8f6f 	isb	sy
 8018142:	f3bf 8f4f 	dsb	sy
 8018146:	60fb      	str	r3, [r7, #12]
}
 8018148:	bf00      	nop
 801814a:	e7fe      	b.n	801814a <pvPortMalloc+0x172>
	return pvReturn;
 801814c:	69fb      	ldr	r3, [r7, #28]
}
 801814e:	4618      	mov	r0, r3
 8018150:	3728      	adds	r7, #40	; 0x28
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}
 8018156:	bf00      	nop
 8018158:	20005c18 	.word	0x20005c18
 801815c:	20005c2c 	.word	0x20005c2c
 8018160:	20005c1c 	.word	0x20005c1c
 8018164:	20005c10 	.word	0x20005c10
 8018168:	20005c20 	.word	0x20005c20
 801816c:	20005c24 	.word	0x20005c24

08018170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b086      	sub	sp, #24
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d04d      	beq.n	801821e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018182:	2308      	movs	r3, #8
 8018184:	425b      	negs	r3, r3
 8018186:	697a      	ldr	r2, [r7, #20]
 8018188:	4413      	add	r3, r2
 801818a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801818c:	697b      	ldr	r3, [r7, #20]
 801818e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018190:	693b      	ldr	r3, [r7, #16]
 8018192:	685a      	ldr	r2, [r3, #4]
 8018194:	4b24      	ldr	r3, [pc, #144]	; (8018228 <vPortFree+0xb8>)
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	4013      	ands	r3, r2
 801819a:	2b00      	cmp	r3, #0
 801819c:	d10a      	bne.n	80181b4 <vPortFree+0x44>
	__asm volatile
 801819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181a2:	f383 8811 	msr	BASEPRI, r3
 80181a6:	f3bf 8f6f 	isb	sy
 80181aa:	f3bf 8f4f 	dsb	sy
 80181ae:	60fb      	str	r3, [r7, #12]
}
 80181b0:	bf00      	nop
 80181b2:	e7fe      	b.n	80181b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80181b4:	693b      	ldr	r3, [r7, #16]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d00a      	beq.n	80181d2 <vPortFree+0x62>
	__asm volatile
 80181bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181c0:	f383 8811 	msr	BASEPRI, r3
 80181c4:	f3bf 8f6f 	isb	sy
 80181c8:	f3bf 8f4f 	dsb	sy
 80181cc:	60bb      	str	r3, [r7, #8]
}
 80181ce:	bf00      	nop
 80181d0:	e7fe      	b.n	80181d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80181d2:	693b      	ldr	r3, [r7, #16]
 80181d4:	685a      	ldr	r2, [r3, #4]
 80181d6:	4b14      	ldr	r3, [pc, #80]	; (8018228 <vPortFree+0xb8>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	4013      	ands	r3, r2
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d01e      	beq.n	801821e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80181e0:	693b      	ldr	r3, [r7, #16]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d11a      	bne.n	801821e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80181e8:	693b      	ldr	r3, [r7, #16]
 80181ea:	685a      	ldr	r2, [r3, #4]
 80181ec:	4b0e      	ldr	r3, [pc, #56]	; (8018228 <vPortFree+0xb8>)
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	43db      	mvns	r3, r3
 80181f2:	401a      	ands	r2, r3
 80181f4:	693b      	ldr	r3, [r7, #16]
 80181f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80181f8:	f7fe fb78 	bl	80168ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80181fc:	693b      	ldr	r3, [r7, #16]
 80181fe:	685a      	ldr	r2, [r3, #4]
 8018200:	4b0a      	ldr	r3, [pc, #40]	; (801822c <vPortFree+0xbc>)
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	4413      	add	r3, r2
 8018206:	4a09      	ldr	r2, [pc, #36]	; (801822c <vPortFree+0xbc>)
 8018208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801820a:	6938      	ldr	r0, [r7, #16]
 801820c:	f000 f874 	bl	80182f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018210:	4b07      	ldr	r3, [pc, #28]	; (8018230 <vPortFree+0xc0>)
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	3301      	adds	r3, #1
 8018216:	4a06      	ldr	r2, [pc, #24]	; (8018230 <vPortFree+0xc0>)
 8018218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801821a:	f7fe fb75 	bl	8016908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801821e:	bf00      	nop
 8018220:	3718      	adds	r7, #24
 8018222:	46bd      	mov	sp, r7
 8018224:	bd80      	pop	{r7, pc}
 8018226:	bf00      	nop
 8018228:	20005c2c 	.word	0x20005c2c
 801822c:	20005c1c 	.word	0x20005c1c
 8018230:	20005c28 	.word	0x20005c28

08018234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018234:	b480      	push	{r7}
 8018236:	b085      	sub	sp, #20
 8018238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801823a:	f244 6350 	movw	r3, #18000	; 0x4650
 801823e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018240:	4b27      	ldr	r3, [pc, #156]	; (80182e0 <prvHeapInit+0xac>)
 8018242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	f003 0307 	and.w	r3, r3, #7
 801824a:	2b00      	cmp	r3, #0
 801824c:	d00c      	beq.n	8018268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	3307      	adds	r3, #7
 8018252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	f023 0307 	bic.w	r3, r3, #7
 801825a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801825c:	68ba      	ldr	r2, [r7, #8]
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	1ad3      	subs	r3, r2, r3
 8018262:	4a1f      	ldr	r2, [pc, #124]	; (80182e0 <prvHeapInit+0xac>)
 8018264:	4413      	add	r3, r2
 8018266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801826c:	4a1d      	ldr	r2, [pc, #116]	; (80182e4 <prvHeapInit+0xb0>)
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018272:	4b1c      	ldr	r3, [pc, #112]	; (80182e4 <prvHeapInit+0xb0>)
 8018274:	2200      	movs	r2, #0
 8018276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	68ba      	ldr	r2, [r7, #8]
 801827c:	4413      	add	r3, r2
 801827e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018280:	2208      	movs	r2, #8
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	1a9b      	subs	r3, r3, r2
 8018286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	f023 0307 	bic.w	r3, r3, #7
 801828e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	4a15      	ldr	r2, [pc, #84]	; (80182e8 <prvHeapInit+0xb4>)
 8018294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018296:	4b14      	ldr	r3, [pc, #80]	; (80182e8 <prvHeapInit+0xb4>)
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	2200      	movs	r2, #0
 801829c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801829e:	4b12      	ldr	r3, [pc, #72]	; (80182e8 <prvHeapInit+0xb4>)
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	2200      	movs	r2, #0
 80182a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80182aa:	683b      	ldr	r3, [r7, #0]
 80182ac:	68fa      	ldr	r2, [r7, #12]
 80182ae:	1ad2      	subs	r2, r2, r3
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80182b4:	4b0c      	ldr	r3, [pc, #48]	; (80182e8 <prvHeapInit+0xb4>)
 80182b6:	681a      	ldr	r2, [r3, #0]
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80182bc:	683b      	ldr	r3, [r7, #0]
 80182be:	685b      	ldr	r3, [r3, #4]
 80182c0:	4a0a      	ldr	r2, [pc, #40]	; (80182ec <prvHeapInit+0xb8>)
 80182c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80182c4:	683b      	ldr	r3, [r7, #0]
 80182c6:	685b      	ldr	r3, [r3, #4]
 80182c8:	4a09      	ldr	r2, [pc, #36]	; (80182f0 <prvHeapInit+0xbc>)
 80182ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80182cc:	4b09      	ldr	r3, [pc, #36]	; (80182f4 <prvHeapInit+0xc0>)
 80182ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80182d2:	601a      	str	r2, [r3, #0]
}
 80182d4:	bf00      	nop
 80182d6:	3714      	adds	r7, #20
 80182d8:	46bd      	mov	sp, r7
 80182da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182de:	4770      	bx	lr
 80182e0:	200015c0 	.word	0x200015c0
 80182e4:	20005c10 	.word	0x20005c10
 80182e8:	20005c18 	.word	0x20005c18
 80182ec:	20005c20 	.word	0x20005c20
 80182f0:	20005c1c 	.word	0x20005c1c
 80182f4:	20005c2c 	.word	0x20005c2c

080182f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80182f8:	b480      	push	{r7}
 80182fa:	b085      	sub	sp, #20
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018300:	4b28      	ldr	r3, [pc, #160]	; (80183a4 <prvInsertBlockIntoFreeList+0xac>)
 8018302:	60fb      	str	r3, [r7, #12]
 8018304:	e002      	b.n	801830c <prvInsertBlockIntoFreeList+0x14>
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	60fb      	str	r3, [r7, #12]
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	687a      	ldr	r2, [r7, #4]
 8018312:	429a      	cmp	r2, r3
 8018314:	d8f7      	bhi.n	8018306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	685b      	ldr	r3, [r3, #4]
 801831e:	68ba      	ldr	r2, [r7, #8]
 8018320:	4413      	add	r3, r2
 8018322:	687a      	ldr	r2, [r7, #4]
 8018324:	429a      	cmp	r2, r3
 8018326:	d108      	bne.n	801833a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	685a      	ldr	r2, [r3, #4]
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	685b      	ldr	r3, [r3, #4]
 8018330:	441a      	add	r2, r3
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	685b      	ldr	r3, [r3, #4]
 8018342:	68ba      	ldr	r2, [r7, #8]
 8018344:	441a      	add	r2, r3
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	429a      	cmp	r2, r3
 801834c:	d118      	bne.n	8018380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	681a      	ldr	r2, [r3, #0]
 8018352:	4b15      	ldr	r3, [pc, #84]	; (80183a8 <prvInsertBlockIntoFreeList+0xb0>)
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	429a      	cmp	r2, r3
 8018358:	d00d      	beq.n	8018376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	685a      	ldr	r2, [r3, #4]
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	685b      	ldr	r3, [r3, #4]
 8018364:	441a      	add	r2, r3
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	681a      	ldr	r2, [r3, #0]
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	601a      	str	r2, [r3, #0]
 8018374:	e008      	b.n	8018388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018376:	4b0c      	ldr	r3, [pc, #48]	; (80183a8 <prvInsertBlockIntoFreeList+0xb0>)
 8018378:	681a      	ldr	r2, [r3, #0]
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	601a      	str	r2, [r3, #0]
 801837e:	e003      	b.n	8018388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	681a      	ldr	r2, [r3, #0]
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018388:	68fa      	ldr	r2, [r7, #12]
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	429a      	cmp	r2, r3
 801838e:	d002      	beq.n	8018396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	687a      	ldr	r2, [r7, #4]
 8018394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018396:	bf00      	nop
 8018398:	3714      	adds	r7, #20
 801839a:	46bd      	mov	sp, r7
 801839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a0:	4770      	bx	lr
 80183a2:	bf00      	nop
 80183a4:	20005c10 	.word	0x20005c10
 80183a8:	20005c18 	.word	0x20005c18

080183ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80183b0:	2200      	movs	r2, #0
 80183b2:	4912      	ldr	r1, [pc, #72]	; (80183fc <MX_USB_DEVICE_Init+0x50>)
 80183b4:	4812      	ldr	r0, [pc, #72]	; (8018400 <MX_USB_DEVICE_Init+0x54>)
 80183b6:	f7f8 fadf 	bl	8010978 <USBD_Init>
 80183ba:	4603      	mov	r3, r0
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d001      	beq.n	80183c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80183c0:	f7ea fb04 	bl	80029cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80183c4:	490f      	ldr	r1, [pc, #60]	; (8018404 <MX_USB_DEVICE_Init+0x58>)
 80183c6:	480e      	ldr	r0, [pc, #56]	; (8018400 <MX_USB_DEVICE_Init+0x54>)
 80183c8:	f7f8 fb06 	bl	80109d8 <USBD_RegisterClass>
 80183cc:	4603      	mov	r3, r0
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d001      	beq.n	80183d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80183d2:	f7ea fafb 	bl	80029cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80183d6:	490c      	ldr	r1, [pc, #48]	; (8018408 <MX_USB_DEVICE_Init+0x5c>)
 80183d8:	4809      	ldr	r0, [pc, #36]	; (8018400 <MX_USB_DEVICE_Init+0x54>)
 80183da:	f7f8 fa57 	bl	801088c <USBD_CDC_RegisterInterface>
 80183de:	4603      	mov	r3, r0
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d001      	beq.n	80183e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80183e4:	f7ea faf2 	bl	80029cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80183e8:	4805      	ldr	r0, [pc, #20]	; (8018400 <MX_USB_DEVICE_Init+0x54>)
 80183ea:	f7f8 fb1c 	bl	8010a26 <USBD_Start>
 80183ee:	4603      	mov	r3, r0
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d001      	beq.n	80183f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80183f4:	f7ea faea 	bl	80029cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80183f8:	bf00      	nop
 80183fa:	bd80      	pop	{r7, pc}
 80183fc:	200001a8 	.word	0x200001a8
 8018400:	20007524 	.word	0x20007524
 8018404:	2000008c 	.word	0x2000008c
 8018408:	20000194 	.word	0x20000194

0801840c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018410:	2200      	movs	r2, #0
 8018412:	4905      	ldr	r1, [pc, #20]	; (8018428 <CDC_Init_FS+0x1c>)
 8018414:	4805      	ldr	r0, [pc, #20]	; (801842c <CDC_Init_FS+0x20>)
 8018416:	f7f8 fa4e 	bl	80108b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801841a:	4905      	ldr	r1, [pc, #20]	; (8018430 <CDC_Init_FS+0x24>)
 801841c:	4803      	ldr	r0, [pc, #12]	; (801842c <CDC_Init_FS+0x20>)
 801841e:	f7f8 fa68 	bl	80108f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018422:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018424:	4618      	mov	r0, r3
 8018426:	bd80      	pop	{r7, pc}
 8018428:	20007ff4 	.word	0x20007ff4
 801842c:	20007524 	.word	0x20007524
 8018430:	200077f4 	.word	0x200077f4

08018434 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018434:	b480      	push	{r7}
 8018436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018438:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801843a:	4618      	mov	r0, r3
 801843c:	46bd      	mov	sp, r7
 801843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018442:	4770      	bx	lr

08018444 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018444:	b480      	push	{r7}
 8018446:	b083      	sub	sp, #12
 8018448:	af00      	add	r7, sp, #0
 801844a:	4603      	mov	r3, r0
 801844c:	6039      	str	r1, [r7, #0]
 801844e:	71fb      	strb	r3, [r7, #7]
 8018450:	4613      	mov	r3, r2
 8018452:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018454:	79fb      	ldrb	r3, [r7, #7]
 8018456:	2b23      	cmp	r3, #35	; 0x23
 8018458:	d84a      	bhi.n	80184f0 <CDC_Control_FS+0xac>
 801845a:	a201      	add	r2, pc, #4	; (adr r2, 8018460 <CDC_Control_FS+0x1c>)
 801845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018460:	080184f1 	.word	0x080184f1
 8018464:	080184f1 	.word	0x080184f1
 8018468:	080184f1 	.word	0x080184f1
 801846c:	080184f1 	.word	0x080184f1
 8018470:	080184f1 	.word	0x080184f1
 8018474:	080184f1 	.word	0x080184f1
 8018478:	080184f1 	.word	0x080184f1
 801847c:	080184f1 	.word	0x080184f1
 8018480:	080184f1 	.word	0x080184f1
 8018484:	080184f1 	.word	0x080184f1
 8018488:	080184f1 	.word	0x080184f1
 801848c:	080184f1 	.word	0x080184f1
 8018490:	080184f1 	.word	0x080184f1
 8018494:	080184f1 	.word	0x080184f1
 8018498:	080184f1 	.word	0x080184f1
 801849c:	080184f1 	.word	0x080184f1
 80184a0:	080184f1 	.word	0x080184f1
 80184a4:	080184f1 	.word	0x080184f1
 80184a8:	080184f1 	.word	0x080184f1
 80184ac:	080184f1 	.word	0x080184f1
 80184b0:	080184f1 	.word	0x080184f1
 80184b4:	080184f1 	.word	0x080184f1
 80184b8:	080184f1 	.word	0x080184f1
 80184bc:	080184f1 	.word	0x080184f1
 80184c0:	080184f1 	.word	0x080184f1
 80184c4:	080184f1 	.word	0x080184f1
 80184c8:	080184f1 	.word	0x080184f1
 80184cc:	080184f1 	.word	0x080184f1
 80184d0:	080184f1 	.word	0x080184f1
 80184d4:	080184f1 	.word	0x080184f1
 80184d8:	080184f1 	.word	0x080184f1
 80184dc:	080184f1 	.word	0x080184f1
 80184e0:	080184f1 	.word	0x080184f1
 80184e4:	080184f1 	.word	0x080184f1
 80184e8:	080184f1 	.word	0x080184f1
 80184ec:	080184f1 	.word	0x080184f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80184f0:	bf00      	nop
  }

  return (USBD_OK);
 80184f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80184f4:	4618      	mov	r0, r3
 80184f6:	370c      	adds	r7, #12
 80184f8:	46bd      	mov	sp, r7
 80184fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184fe:	4770      	bx	lr

08018500 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b082      	sub	sp, #8
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
 8018508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801850a:	6879      	ldr	r1, [r7, #4]
 801850c:	4805      	ldr	r0, [pc, #20]	; (8018524 <CDC_Receive_FS+0x24>)
 801850e:	f7f8 f9f0 	bl	80108f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018512:	4804      	ldr	r0, [pc, #16]	; (8018524 <CDC_Receive_FS+0x24>)
 8018514:	f7f8 fa06 	bl	8010924 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018518:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801851a:	4618      	mov	r0, r3
 801851c:	3708      	adds	r7, #8
 801851e:	46bd      	mov	sp, r7
 8018520:	bd80      	pop	{r7, pc}
 8018522:	bf00      	nop
 8018524:	20007524 	.word	0x20007524

08018528 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018528:	b480      	push	{r7}
 801852a:	b087      	sub	sp, #28
 801852c:	af00      	add	r7, sp, #0
 801852e:	60f8      	str	r0, [r7, #12]
 8018530:	60b9      	str	r1, [r7, #8]
 8018532:	4613      	mov	r3, r2
 8018534:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018536:	2300      	movs	r3, #0
 8018538:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801853a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801853e:	4618      	mov	r0, r3
 8018540:	371c      	adds	r7, #28
 8018542:	46bd      	mov	sp, r7
 8018544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018548:	4770      	bx	lr
	...

0801854c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801854c:	b480      	push	{r7}
 801854e:	b083      	sub	sp, #12
 8018550:	af00      	add	r7, sp, #0
 8018552:	4603      	mov	r3, r0
 8018554:	6039      	str	r1, [r7, #0]
 8018556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018558:	683b      	ldr	r3, [r7, #0]
 801855a:	2212      	movs	r2, #18
 801855c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801855e:	4b03      	ldr	r3, [pc, #12]	; (801856c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018560:	4618      	mov	r0, r3
 8018562:	370c      	adds	r7, #12
 8018564:	46bd      	mov	sp, r7
 8018566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856a:	4770      	bx	lr
 801856c:	200001c4 	.word	0x200001c4

08018570 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018570:	b480      	push	{r7}
 8018572:	b083      	sub	sp, #12
 8018574:	af00      	add	r7, sp, #0
 8018576:	4603      	mov	r3, r0
 8018578:	6039      	str	r1, [r7, #0]
 801857a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	2204      	movs	r2, #4
 8018580:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018582:	4b03      	ldr	r3, [pc, #12]	; (8018590 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018584:	4618      	mov	r0, r3
 8018586:	370c      	adds	r7, #12
 8018588:	46bd      	mov	sp, r7
 801858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858e:	4770      	bx	lr
 8018590:	200001d8 	.word	0x200001d8

08018594 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b082      	sub	sp, #8
 8018598:	af00      	add	r7, sp, #0
 801859a:	4603      	mov	r3, r0
 801859c:	6039      	str	r1, [r7, #0]
 801859e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80185a0:	79fb      	ldrb	r3, [r7, #7]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d105      	bne.n	80185b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80185a6:	683a      	ldr	r2, [r7, #0]
 80185a8:	4907      	ldr	r1, [pc, #28]	; (80185c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80185aa:	4808      	ldr	r0, [pc, #32]	; (80185cc <USBD_FS_ProductStrDescriptor+0x38>)
 80185ac:	f7f9 fa6d 	bl	8011a8a <USBD_GetString>
 80185b0:	e004      	b.n	80185bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80185b2:	683a      	ldr	r2, [r7, #0]
 80185b4:	4904      	ldr	r1, [pc, #16]	; (80185c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80185b6:	4805      	ldr	r0, [pc, #20]	; (80185cc <USBD_FS_ProductStrDescriptor+0x38>)
 80185b8:	f7f9 fa67 	bl	8011a8a <USBD_GetString>
  }
  return USBD_StrDesc;
 80185bc:	4b02      	ldr	r3, [pc, #8]	; (80185c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80185be:	4618      	mov	r0, r3
 80185c0:	3708      	adds	r7, #8
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	bf00      	nop
 80185c8:	200087f4 	.word	0x200087f4
 80185cc:	08020d4c 	.word	0x08020d4c

080185d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b082      	sub	sp, #8
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	4603      	mov	r3, r0
 80185d8:	6039      	str	r1, [r7, #0]
 80185da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80185dc:	683a      	ldr	r2, [r7, #0]
 80185de:	4904      	ldr	r1, [pc, #16]	; (80185f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80185e0:	4804      	ldr	r0, [pc, #16]	; (80185f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80185e2:	f7f9 fa52 	bl	8011a8a <USBD_GetString>
  return USBD_StrDesc;
 80185e6:	4b02      	ldr	r3, [pc, #8]	; (80185f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80185e8:	4618      	mov	r0, r3
 80185ea:	3708      	adds	r7, #8
 80185ec:	46bd      	mov	sp, r7
 80185ee:	bd80      	pop	{r7, pc}
 80185f0:	200087f4 	.word	0x200087f4
 80185f4:	08020d64 	.word	0x08020d64

080185f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b082      	sub	sp, #8
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	4603      	mov	r3, r0
 8018600:	6039      	str	r1, [r7, #0]
 8018602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	221a      	movs	r2, #26
 8018608:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801860a:	f000 f843 	bl	8018694 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801860e:	4b02      	ldr	r3, [pc, #8]	; (8018618 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018610:	4618      	mov	r0, r3
 8018612:	3708      	adds	r7, #8
 8018614:	46bd      	mov	sp, r7
 8018616:	bd80      	pop	{r7, pc}
 8018618:	200001dc 	.word	0x200001dc

0801861c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b082      	sub	sp, #8
 8018620:	af00      	add	r7, sp, #0
 8018622:	4603      	mov	r3, r0
 8018624:	6039      	str	r1, [r7, #0]
 8018626:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018628:	79fb      	ldrb	r3, [r7, #7]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d105      	bne.n	801863a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801862e:	683a      	ldr	r2, [r7, #0]
 8018630:	4907      	ldr	r1, [pc, #28]	; (8018650 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018632:	4808      	ldr	r0, [pc, #32]	; (8018654 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018634:	f7f9 fa29 	bl	8011a8a <USBD_GetString>
 8018638:	e004      	b.n	8018644 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801863a:	683a      	ldr	r2, [r7, #0]
 801863c:	4904      	ldr	r1, [pc, #16]	; (8018650 <USBD_FS_ConfigStrDescriptor+0x34>)
 801863e:	4805      	ldr	r0, [pc, #20]	; (8018654 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018640:	f7f9 fa23 	bl	8011a8a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018644:	4b02      	ldr	r3, [pc, #8]	; (8018650 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018646:	4618      	mov	r0, r3
 8018648:	3708      	adds	r7, #8
 801864a:	46bd      	mov	sp, r7
 801864c:	bd80      	pop	{r7, pc}
 801864e:	bf00      	nop
 8018650:	200087f4 	.word	0x200087f4
 8018654:	08020d78 	.word	0x08020d78

08018658 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b082      	sub	sp, #8
 801865c:	af00      	add	r7, sp, #0
 801865e:	4603      	mov	r3, r0
 8018660:	6039      	str	r1, [r7, #0]
 8018662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018664:	79fb      	ldrb	r3, [r7, #7]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d105      	bne.n	8018676 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801866a:	683a      	ldr	r2, [r7, #0]
 801866c:	4907      	ldr	r1, [pc, #28]	; (801868c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801866e:	4808      	ldr	r0, [pc, #32]	; (8018690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018670:	f7f9 fa0b 	bl	8011a8a <USBD_GetString>
 8018674:	e004      	b.n	8018680 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018676:	683a      	ldr	r2, [r7, #0]
 8018678:	4904      	ldr	r1, [pc, #16]	; (801868c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801867a:	4805      	ldr	r0, [pc, #20]	; (8018690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801867c:	f7f9 fa05 	bl	8011a8a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018680:	4b02      	ldr	r3, [pc, #8]	; (801868c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018682:	4618      	mov	r0, r3
 8018684:	3708      	adds	r7, #8
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}
 801868a:	bf00      	nop
 801868c:	200087f4 	.word	0x200087f4
 8018690:	08020d84 	.word	0x08020d84

08018694 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b084      	sub	sp, #16
 8018698:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801869a:	4b0f      	ldr	r3, [pc, #60]	; (80186d8 <Get_SerialNum+0x44>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80186a0:	4b0e      	ldr	r3, [pc, #56]	; (80186dc <Get_SerialNum+0x48>)
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80186a6:	4b0e      	ldr	r3, [pc, #56]	; (80186e0 <Get_SerialNum+0x4c>)
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80186ac:	68fa      	ldr	r2, [r7, #12]
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	4413      	add	r3, r2
 80186b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d009      	beq.n	80186ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80186ba:	2208      	movs	r2, #8
 80186bc:	4909      	ldr	r1, [pc, #36]	; (80186e4 <Get_SerialNum+0x50>)
 80186be:	68f8      	ldr	r0, [r7, #12]
 80186c0:	f000 f814 	bl	80186ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80186c4:	2204      	movs	r2, #4
 80186c6:	4908      	ldr	r1, [pc, #32]	; (80186e8 <Get_SerialNum+0x54>)
 80186c8:	68b8      	ldr	r0, [r7, #8]
 80186ca:	f000 f80f 	bl	80186ec <IntToUnicode>
  }
}
 80186ce:	bf00      	nop
 80186d0:	3710      	adds	r7, #16
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bd80      	pop	{r7, pc}
 80186d6:	bf00      	nop
 80186d8:	1fff7a10 	.word	0x1fff7a10
 80186dc:	1fff7a14 	.word	0x1fff7a14
 80186e0:	1fff7a18 	.word	0x1fff7a18
 80186e4:	200001de 	.word	0x200001de
 80186e8:	200001ee 	.word	0x200001ee

080186ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80186ec:	b480      	push	{r7}
 80186ee:	b087      	sub	sp, #28
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	60f8      	str	r0, [r7, #12]
 80186f4:	60b9      	str	r1, [r7, #8]
 80186f6:	4613      	mov	r3, r2
 80186f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80186fa:	2300      	movs	r3, #0
 80186fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80186fe:	2300      	movs	r3, #0
 8018700:	75fb      	strb	r3, [r7, #23]
 8018702:	e027      	b.n	8018754 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	0f1b      	lsrs	r3, r3, #28
 8018708:	2b09      	cmp	r3, #9
 801870a:	d80b      	bhi.n	8018724 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	0f1b      	lsrs	r3, r3, #28
 8018710:	b2da      	uxtb	r2, r3
 8018712:	7dfb      	ldrb	r3, [r7, #23]
 8018714:	005b      	lsls	r3, r3, #1
 8018716:	4619      	mov	r1, r3
 8018718:	68bb      	ldr	r3, [r7, #8]
 801871a:	440b      	add	r3, r1
 801871c:	3230      	adds	r2, #48	; 0x30
 801871e:	b2d2      	uxtb	r2, r2
 8018720:	701a      	strb	r2, [r3, #0]
 8018722:	e00a      	b.n	801873a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	0f1b      	lsrs	r3, r3, #28
 8018728:	b2da      	uxtb	r2, r3
 801872a:	7dfb      	ldrb	r3, [r7, #23]
 801872c:	005b      	lsls	r3, r3, #1
 801872e:	4619      	mov	r1, r3
 8018730:	68bb      	ldr	r3, [r7, #8]
 8018732:	440b      	add	r3, r1
 8018734:	3237      	adds	r2, #55	; 0x37
 8018736:	b2d2      	uxtb	r2, r2
 8018738:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	011b      	lsls	r3, r3, #4
 801873e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018740:	7dfb      	ldrb	r3, [r7, #23]
 8018742:	005b      	lsls	r3, r3, #1
 8018744:	3301      	adds	r3, #1
 8018746:	68ba      	ldr	r2, [r7, #8]
 8018748:	4413      	add	r3, r2
 801874a:	2200      	movs	r2, #0
 801874c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801874e:	7dfb      	ldrb	r3, [r7, #23]
 8018750:	3301      	adds	r3, #1
 8018752:	75fb      	strb	r3, [r7, #23]
 8018754:	7dfa      	ldrb	r2, [r7, #23]
 8018756:	79fb      	ldrb	r3, [r7, #7]
 8018758:	429a      	cmp	r2, r3
 801875a:	d3d3      	bcc.n	8018704 <IntToUnicode+0x18>
  }
}
 801875c:	bf00      	nop
 801875e:	bf00      	nop
 8018760:	371c      	adds	r7, #28
 8018762:	46bd      	mov	sp, r7
 8018764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018768:	4770      	bx	lr
	...

0801876c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b08a      	sub	sp, #40	; 0x28
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018774:	f107 0314 	add.w	r3, r7, #20
 8018778:	2200      	movs	r2, #0
 801877a:	601a      	str	r2, [r3, #0]
 801877c:	605a      	str	r2, [r3, #4]
 801877e:	609a      	str	r2, [r3, #8]
 8018780:	60da      	str	r2, [r3, #12]
 8018782:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801878c:	d147      	bne.n	801881e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801878e:	2300      	movs	r3, #0
 8018790:	613b      	str	r3, [r7, #16]
 8018792:	4b25      	ldr	r3, [pc, #148]	; (8018828 <HAL_PCD_MspInit+0xbc>)
 8018794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018796:	4a24      	ldr	r2, [pc, #144]	; (8018828 <HAL_PCD_MspInit+0xbc>)
 8018798:	f043 0301 	orr.w	r3, r3, #1
 801879c:	6313      	str	r3, [r2, #48]	; 0x30
 801879e:	4b22      	ldr	r3, [pc, #136]	; (8018828 <HAL_PCD_MspInit+0xbc>)
 80187a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187a2:	f003 0301 	and.w	r3, r3, #1
 80187a6:	613b      	str	r3, [r7, #16]
 80187a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80187aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80187ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80187b0:	2300      	movs	r3, #0
 80187b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80187b4:	2300      	movs	r3, #0
 80187b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80187b8:	f107 0314 	add.w	r3, r7, #20
 80187bc:	4619      	mov	r1, r3
 80187be:	481b      	ldr	r0, [pc, #108]	; (801882c <HAL_PCD_MspInit+0xc0>)
 80187c0:	f7ef fa5e 	bl	8007c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80187c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80187c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80187ca:	2302      	movs	r3, #2
 80187cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80187ce:	2300      	movs	r3, #0
 80187d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80187d2:	2303      	movs	r3, #3
 80187d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80187d6:	230a      	movs	r3, #10
 80187d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80187da:	f107 0314 	add.w	r3, r7, #20
 80187de:	4619      	mov	r1, r3
 80187e0:	4812      	ldr	r0, [pc, #72]	; (801882c <HAL_PCD_MspInit+0xc0>)
 80187e2:	f7ef fa4d 	bl	8007c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80187e6:	4b10      	ldr	r3, [pc, #64]	; (8018828 <HAL_PCD_MspInit+0xbc>)
 80187e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187ea:	4a0f      	ldr	r2, [pc, #60]	; (8018828 <HAL_PCD_MspInit+0xbc>)
 80187ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187f0:	6353      	str	r3, [r2, #52]	; 0x34
 80187f2:	2300      	movs	r3, #0
 80187f4:	60fb      	str	r3, [r7, #12]
 80187f6:	4b0c      	ldr	r3, [pc, #48]	; (8018828 <HAL_PCD_MspInit+0xbc>)
 80187f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187fa:	4a0b      	ldr	r2, [pc, #44]	; (8018828 <HAL_PCD_MspInit+0xbc>)
 80187fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018800:	6453      	str	r3, [r2, #68]	; 0x44
 8018802:	4b09      	ldr	r3, [pc, #36]	; (8018828 <HAL_PCD_MspInit+0xbc>)
 8018804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801880a:	60fb      	str	r3, [r7, #12]
 801880c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801880e:	2200      	movs	r2, #0
 8018810:	2105      	movs	r1, #5
 8018812:	2043      	movs	r0, #67	; 0x43
 8018814:	f7ef f9fc 	bl	8007c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018818:	2043      	movs	r0, #67	; 0x43
 801881a:	f7ef fa15 	bl	8007c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801881e:	bf00      	nop
 8018820:	3728      	adds	r7, #40	; 0x28
 8018822:	46bd      	mov	sp, r7
 8018824:	bd80      	pop	{r7, pc}
 8018826:	bf00      	nop
 8018828:	40023800 	.word	0x40023800
 801882c:	40020000 	.word	0x40020000

08018830 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b082      	sub	sp, #8
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018844:	4619      	mov	r1, r3
 8018846:	4610      	mov	r0, r2
 8018848:	f7f8 f938 	bl	8010abc <USBD_LL_SetupStage>
}
 801884c:	bf00      	nop
 801884e:	3708      	adds	r7, #8
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b082      	sub	sp, #8
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
 801885c:	460b      	mov	r3, r1
 801885e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018866:	78fa      	ldrb	r2, [r7, #3]
 8018868:	6879      	ldr	r1, [r7, #4]
 801886a:	4613      	mov	r3, r2
 801886c:	00db      	lsls	r3, r3, #3
 801886e:	1a9b      	subs	r3, r3, r2
 8018870:	009b      	lsls	r3, r3, #2
 8018872:	440b      	add	r3, r1
 8018874:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018878:	681a      	ldr	r2, [r3, #0]
 801887a:	78fb      	ldrb	r3, [r7, #3]
 801887c:	4619      	mov	r1, r3
 801887e:	f7f8 f972 	bl	8010b66 <USBD_LL_DataOutStage>
}
 8018882:	bf00      	nop
 8018884:	3708      	adds	r7, #8
 8018886:	46bd      	mov	sp, r7
 8018888:	bd80      	pop	{r7, pc}

0801888a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801888a:	b580      	push	{r7, lr}
 801888c:	b082      	sub	sp, #8
 801888e:	af00      	add	r7, sp, #0
 8018890:	6078      	str	r0, [r7, #4]
 8018892:	460b      	mov	r3, r1
 8018894:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801889c:	78fa      	ldrb	r2, [r7, #3]
 801889e:	6879      	ldr	r1, [r7, #4]
 80188a0:	4613      	mov	r3, r2
 80188a2:	00db      	lsls	r3, r3, #3
 80188a4:	1a9b      	subs	r3, r3, r2
 80188a6:	009b      	lsls	r3, r3, #2
 80188a8:	440b      	add	r3, r1
 80188aa:	3348      	adds	r3, #72	; 0x48
 80188ac:	681a      	ldr	r2, [r3, #0]
 80188ae:	78fb      	ldrb	r3, [r7, #3]
 80188b0:	4619      	mov	r1, r3
 80188b2:	f7f8 f9bb 	bl	8010c2c <USBD_LL_DataInStage>
}
 80188b6:	bf00      	nop
 80188b8:	3708      	adds	r7, #8
 80188ba:	46bd      	mov	sp, r7
 80188bc:	bd80      	pop	{r7, pc}

080188be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188be:	b580      	push	{r7, lr}
 80188c0:	b082      	sub	sp, #8
 80188c2:	af00      	add	r7, sp, #0
 80188c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7f8 facf 	bl	8010e70 <USBD_LL_SOF>
}
 80188d2:	bf00      	nop
 80188d4:	3708      	adds	r7, #8
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}

080188da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188da:	b580      	push	{r7, lr}
 80188dc:	b084      	sub	sp, #16
 80188de:	af00      	add	r7, sp, #0
 80188e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80188e2:	2301      	movs	r3, #1
 80188e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	68db      	ldr	r3, [r3, #12]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d102      	bne.n	80188f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80188ee:	2300      	movs	r3, #0
 80188f0:	73fb      	strb	r3, [r7, #15]
 80188f2:	e008      	b.n	8018906 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	68db      	ldr	r3, [r3, #12]
 80188f8:	2b02      	cmp	r3, #2
 80188fa:	d102      	bne.n	8018902 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80188fc:	2301      	movs	r3, #1
 80188fe:	73fb      	strb	r3, [r7, #15]
 8018900:	e001      	b.n	8018906 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018902:	f7ea f863 	bl	80029cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801890c:	7bfa      	ldrb	r2, [r7, #15]
 801890e:	4611      	mov	r1, r2
 8018910:	4618      	mov	r0, r3
 8018912:	f7f8 fa6f 	bl	8010df4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801891c:	4618      	mov	r0, r3
 801891e:	f7f8 fa1b 	bl	8010d58 <USBD_LL_Reset>
}
 8018922:	bf00      	nop
 8018924:	3710      	adds	r7, #16
 8018926:	46bd      	mov	sp, r7
 8018928:	bd80      	pop	{r7, pc}
	...

0801892c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b082      	sub	sp, #8
 8018930:	af00      	add	r7, sp, #0
 8018932:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801893a:	4618      	mov	r0, r3
 801893c:	f7f8 fa6a 	bl	8010e14 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	687a      	ldr	r2, [r7, #4]
 801894c:	6812      	ldr	r2, [r2, #0]
 801894e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018952:	f043 0301 	orr.w	r3, r3, #1
 8018956:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	6a1b      	ldr	r3, [r3, #32]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d005      	beq.n	801896c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018960:	4b04      	ldr	r3, [pc, #16]	; (8018974 <HAL_PCD_SuspendCallback+0x48>)
 8018962:	691b      	ldr	r3, [r3, #16]
 8018964:	4a03      	ldr	r2, [pc, #12]	; (8018974 <HAL_PCD_SuspendCallback+0x48>)
 8018966:	f043 0306 	orr.w	r3, r3, #6
 801896a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801896c:	bf00      	nop
 801896e:	3708      	adds	r7, #8
 8018970:	46bd      	mov	sp, r7
 8018972:	bd80      	pop	{r7, pc}
 8018974:	e000ed00 	.word	0xe000ed00

08018978 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b082      	sub	sp, #8
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018986:	4618      	mov	r0, r3
 8018988:	f7f8 fa5a 	bl	8010e40 <USBD_LL_Resume>
}
 801898c:	bf00      	nop
 801898e:	3708      	adds	r7, #8
 8018990:	46bd      	mov	sp, r7
 8018992:	bd80      	pop	{r7, pc}

08018994 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b082      	sub	sp, #8
 8018998:	af00      	add	r7, sp, #0
 801899a:	6078      	str	r0, [r7, #4]
 801899c:	460b      	mov	r3, r1
 801899e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80189a6:	78fa      	ldrb	r2, [r7, #3]
 80189a8:	4611      	mov	r1, r2
 80189aa:	4618      	mov	r0, r3
 80189ac:	f7f8 faa8 	bl	8010f00 <USBD_LL_IsoOUTIncomplete>
}
 80189b0:	bf00      	nop
 80189b2:	3708      	adds	r7, #8
 80189b4:	46bd      	mov	sp, r7
 80189b6:	bd80      	pop	{r7, pc}

080189b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b082      	sub	sp, #8
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
 80189c0:	460b      	mov	r3, r1
 80189c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80189ca:	78fa      	ldrb	r2, [r7, #3]
 80189cc:	4611      	mov	r1, r2
 80189ce:	4618      	mov	r0, r3
 80189d0:	f7f8 fa70 	bl	8010eb4 <USBD_LL_IsoINIncomplete>
}
 80189d4:	bf00      	nop
 80189d6:	3708      	adds	r7, #8
 80189d8:	46bd      	mov	sp, r7
 80189da:	bd80      	pop	{r7, pc}

080189dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b082      	sub	sp, #8
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7f8 faae 	bl	8010f4c <USBD_LL_DevConnected>
}
 80189f0:	bf00      	nop
 80189f2:	3708      	adds	r7, #8
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}

080189f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b082      	sub	sp, #8
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018a06:	4618      	mov	r0, r3
 8018a08:	f7f8 faab 	bl	8010f62 <USBD_LL_DevDisconnected>
}
 8018a0c:	bf00      	nop
 8018a0e:	3708      	adds	r7, #8
 8018a10:	46bd      	mov	sp, r7
 8018a12:	bd80      	pop	{r7, pc}

08018a14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b082      	sub	sp, #8
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	781b      	ldrb	r3, [r3, #0]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d13c      	bne.n	8018a9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018a24:	4a20      	ldr	r2, [pc, #128]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	4a1e      	ldr	r2, [pc, #120]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018a34:	4b1c      	ldr	r3, [pc, #112]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018a3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018a3c:	4b1a      	ldr	r3, [pc, #104]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a3e:	2204      	movs	r2, #4
 8018a40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018a42:	4b19      	ldr	r3, [pc, #100]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a44:	2202      	movs	r2, #2
 8018a46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018a48:	4b17      	ldr	r3, [pc, #92]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a4a:	2200      	movs	r2, #0
 8018a4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018a4e:	4b16      	ldr	r3, [pc, #88]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a50:	2202      	movs	r2, #2
 8018a52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018a54:	4b14      	ldr	r3, [pc, #80]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a56:	2200      	movs	r2, #0
 8018a58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018a5a:	4b13      	ldr	r3, [pc, #76]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018a60:	4b11      	ldr	r3, [pc, #68]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a62:	2200      	movs	r2, #0
 8018a64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8018a66:	4b10      	ldr	r3, [pc, #64]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a68:	2201      	movs	r2, #1
 8018a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018a6c:	4b0e      	ldr	r3, [pc, #56]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a6e:	2200      	movs	r2, #0
 8018a70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018a72:	480d      	ldr	r0, [pc, #52]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a74:	f7f0 fbbc 	bl	80091f0 <HAL_PCD_Init>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d001      	beq.n	8018a82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018a7e:	f7e9 ffa5 	bl	80029cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018a82:	2180      	movs	r1, #128	; 0x80
 8018a84:	4808      	ldr	r0, [pc, #32]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a86:	f7f1 fd1a 	bl	800a4be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018a8a:	2240      	movs	r2, #64	; 0x40
 8018a8c:	2100      	movs	r1, #0
 8018a8e:	4806      	ldr	r0, [pc, #24]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a90:	f7f1 fcce 	bl	800a430 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018a94:	2280      	movs	r2, #128	; 0x80
 8018a96:	2101      	movs	r1, #1
 8018a98:	4803      	ldr	r0, [pc, #12]	; (8018aa8 <USBD_LL_Init+0x94>)
 8018a9a:	f7f1 fcc9 	bl	800a430 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018a9e:	2300      	movs	r3, #0
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3708      	adds	r7, #8
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}
 8018aa8:	200089f4 	.word	0x200089f4

08018aac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b084      	sub	sp, #16
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ab8:	2300      	movs	r3, #0
 8018aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f7f0 fcb1 	bl	800942a <HAL_PCD_Start>
 8018ac8:	4603      	mov	r3, r0
 8018aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018acc:	7bfb      	ldrb	r3, [r7, #15]
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f000 f942 	bl	8018d58 <USBD_Get_USB_Status>
 8018ad4:	4603      	mov	r3, r0
 8018ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ada:	4618      	mov	r0, r3
 8018adc:	3710      	adds	r7, #16
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	bd80      	pop	{r7, pc}

08018ae2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018ae2:	b580      	push	{r7, lr}
 8018ae4:	b084      	sub	sp, #16
 8018ae6:	af00      	add	r7, sp, #0
 8018ae8:	6078      	str	r0, [r7, #4]
 8018aea:	4608      	mov	r0, r1
 8018aec:	4611      	mov	r1, r2
 8018aee:	461a      	mov	r2, r3
 8018af0:	4603      	mov	r3, r0
 8018af2:	70fb      	strb	r3, [r7, #3]
 8018af4:	460b      	mov	r3, r1
 8018af6:	70bb      	strb	r3, [r7, #2]
 8018af8:	4613      	mov	r3, r2
 8018afa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018afc:	2300      	movs	r3, #0
 8018afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b00:	2300      	movs	r3, #0
 8018b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018b0a:	78bb      	ldrb	r3, [r7, #2]
 8018b0c:	883a      	ldrh	r2, [r7, #0]
 8018b0e:	78f9      	ldrb	r1, [r7, #3]
 8018b10:	f7f1 f895 	bl	8009c3e <HAL_PCD_EP_Open>
 8018b14:	4603      	mov	r3, r0
 8018b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b18:	7bfb      	ldrb	r3, [r7, #15]
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f000 f91c 	bl	8018d58 <USBD_Get_USB_Status>
 8018b20:	4603      	mov	r3, r0
 8018b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b26:	4618      	mov	r0, r3
 8018b28:	3710      	adds	r7, #16
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bd80      	pop	{r7, pc}

08018b2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b2e:	b580      	push	{r7, lr}
 8018b30:	b084      	sub	sp, #16
 8018b32:	af00      	add	r7, sp, #0
 8018b34:	6078      	str	r0, [r7, #4]
 8018b36:	460b      	mov	r3, r1
 8018b38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b3e:	2300      	movs	r3, #0
 8018b40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018b48:	78fa      	ldrb	r2, [r7, #3]
 8018b4a:	4611      	mov	r1, r2
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f7f1 f8de 	bl	8009d0e <HAL_PCD_EP_Close>
 8018b52:	4603      	mov	r3, r0
 8018b54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b56:	7bfb      	ldrb	r3, [r7, #15]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f000 f8fd 	bl	8018d58 <USBD_Get_USB_Status>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b64:	4618      	mov	r0, r3
 8018b66:	3710      	adds	r7, #16
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	bd80      	pop	{r7, pc}

08018b6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	b084      	sub	sp, #16
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	6078      	str	r0, [r7, #4]
 8018b74:	460b      	mov	r3, r1
 8018b76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b78:	2300      	movs	r3, #0
 8018b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018b86:	78fa      	ldrb	r2, [r7, #3]
 8018b88:	4611      	mov	r1, r2
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f7f1 f9b6 	bl	8009efc <HAL_PCD_EP_SetStall>
 8018b90:	4603      	mov	r3, r0
 8018b92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b94:	7bfb      	ldrb	r3, [r7, #15]
 8018b96:	4618      	mov	r0, r3
 8018b98:	f000 f8de 	bl	8018d58 <USBD_Get_USB_Status>
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}

08018baa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018baa:	b580      	push	{r7, lr}
 8018bac:	b084      	sub	sp, #16
 8018bae:	af00      	add	r7, sp, #0
 8018bb0:	6078      	str	r0, [r7, #4]
 8018bb2:	460b      	mov	r3, r1
 8018bb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018bba:	2300      	movs	r3, #0
 8018bbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018bc4:	78fa      	ldrb	r2, [r7, #3]
 8018bc6:	4611      	mov	r1, r2
 8018bc8:	4618      	mov	r0, r3
 8018bca:	f7f1 f9fb 	bl	8009fc4 <HAL_PCD_EP_ClrStall>
 8018bce:	4603      	mov	r3, r0
 8018bd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018bd2:	7bfb      	ldrb	r3, [r7, #15]
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f000 f8bf 	bl	8018d58 <USBD_Get_USB_Status>
 8018bda:	4603      	mov	r3, r0
 8018bdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018bde:	7bbb      	ldrb	r3, [r7, #14]
}
 8018be0:	4618      	mov	r0, r3
 8018be2:	3710      	adds	r7, #16
 8018be4:	46bd      	mov	sp, r7
 8018be6:	bd80      	pop	{r7, pc}

08018be8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018be8:	b480      	push	{r7}
 8018bea:	b085      	sub	sp, #20
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]
 8018bf0:	460b      	mov	r3, r1
 8018bf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018bfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	da0b      	bge.n	8018c1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018c04:	78fb      	ldrb	r3, [r7, #3]
 8018c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018c0a:	68f9      	ldr	r1, [r7, #12]
 8018c0c:	4613      	mov	r3, r2
 8018c0e:	00db      	lsls	r3, r3, #3
 8018c10:	1a9b      	subs	r3, r3, r2
 8018c12:	009b      	lsls	r3, r3, #2
 8018c14:	440b      	add	r3, r1
 8018c16:	333e      	adds	r3, #62	; 0x3e
 8018c18:	781b      	ldrb	r3, [r3, #0]
 8018c1a:	e00b      	b.n	8018c34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018c1c:	78fb      	ldrb	r3, [r7, #3]
 8018c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018c22:	68f9      	ldr	r1, [r7, #12]
 8018c24:	4613      	mov	r3, r2
 8018c26:	00db      	lsls	r3, r3, #3
 8018c28:	1a9b      	subs	r3, r3, r2
 8018c2a:	009b      	lsls	r3, r3, #2
 8018c2c:	440b      	add	r3, r1
 8018c2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018c32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018c34:	4618      	mov	r0, r3
 8018c36:	3714      	adds	r7, #20
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c3e:	4770      	bx	lr

08018c40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b084      	sub	sp, #16
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	6078      	str	r0, [r7, #4]
 8018c48:	460b      	mov	r3, r1
 8018c4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c50:	2300      	movs	r3, #0
 8018c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018c5a:	78fa      	ldrb	r2, [r7, #3]
 8018c5c:	4611      	mov	r1, r2
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f7f0 ffc8 	bl	8009bf4 <HAL_PCD_SetAddress>
 8018c64:	4603      	mov	r3, r0
 8018c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c68:	7bfb      	ldrb	r3, [r7, #15]
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f000 f874 	bl	8018d58 <USBD_Get_USB_Status>
 8018c70:	4603      	mov	r3, r0
 8018c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c76:	4618      	mov	r0, r3
 8018c78:	3710      	adds	r7, #16
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd80      	pop	{r7, pc}

08018c7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018c7e:	b580      	push	{r7, lr}
 8018c80:	b086      	sub	sp, #24
 8018c82:	af00      	add	r7, sp, #0
 8018c84:	60f8      	str	r0, [r7, #12]
 8018c86:	607a      	str	r2, [r7, #4]
 8018c88:	603b      	str	r3, [r7, #0]
 8018c8a:	460b      	mov	r3, r1
 8018c8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c8e:	2300      	movs	r3, #0
 8018c90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c92:	2300      	movs	r3, #0
 8018c94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018c9c:	7af9      	ldrb	r1, [r7, #11]
 8018c9e:	683b      	ldr	r3, [r7, #0]
 8018ca0:	687a      	ldr	r2, [r7, #4]
 8018ca2:	f7f1 f8e1 	bl	8009e68 <HAL_PCD_EP_Transmit>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018caa:	7dfb      	ldrb	r3, [r7, #23]
 8018cac:	4618      	mov	r0, r3
 8018cae:	f000 f853 	bl	8018d58 <USBD_Get_USB_Status>
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018cb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3718      	adds	r7, #24
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}

08018cc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b086      	sub	sp, #24
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	60f8      	str	r0, [r7, #12]
 8018cc8:	607a      	str	r2, [r7, #4]
 8018cca:	603b      	str	r3, [r7, #0]
 8018ccc:	460b      	mov	r3, r1
 8018cce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018cde:	7af9      	ldrb	r1, [r7, #11]
 8018ce0:	683b      	ldr	r3, [r7, #0]
 8018ce2:	687a      	ldr	r2, [r7, #4]
 8018ce4:	f7f1 f85d 	bl	8009da2 <HAL_PCD_EP_Receive>
 8018ce8:	4603      	mov	r3, r0
 8018cea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018cec:	7dfb      	ldrb	r3, [r7, #23]
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f000 f832 	bl	8018d58 <USBD_Get_USB_Status>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018cf8:	7dbb      	ldrb	r3, [r7, #22]
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3718      	adds	r7, #24
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bd80      	pop	{r7, pc}

08018d02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018d02:	b580      	push	{r7, lr}
 8018d04:	b082      	sub	sp, #8
 8018d06:	af00      	add	r7, sp, #0
 8018d08:	6078      	str	r0, [r7, #4]
 8018d0a:	460b      	mov	r3, r1
 8018d0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018d14:	78fa      	ldrb	r2, [r7, #3]
 8018d16:	4611      	mov	r1, r2
 8018d18:	4618      	mov	r0, r3
 8018d1a:	f7f1 f88d 	bl	8009e38 <HAL_PCD_EP_GetRxCount>
 8018d1e:	4603      	mov	r3, r0
}
 8018d20:	4618      	mov	r0, r3
 8018d22:	3708      	adds	r7, #8
 8018d24:	46bd      	mov	sp, r7
 8018d26:	bd80      	pop	{r7, pc}

08018d28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018d28:	b480      	push	{r7}
 8018d2a:	b083      	sub	sp, #12
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018d30:	4b03      	ldr	r3, [pc, #12]	; (8018d40 <USBD_static_malloc+0x18>)
}
 8018d32:	4618      	mov	r0, r3
 8018d34:	370c      	adds	r7, #12
 8018d36:	46bd      	mov	sp, r7
 8018d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d3c:	4770      	bx	lr
 8018d3e:	bf00      	nop
 8018d40:	20005c30 	.word	0x20005c30

08018d44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018d44:	b480      	push	{r7}
 8018d46:	b083      	sub	sp, #12
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]

}
 8018d4c:	bf00      	nop
 8018d4e:	370c      	adds	r7, #12
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr

08018d58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018d58:	b480      	push	{r7}
 8018d5a:	b085      	sub	sp, #20
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	4603      	mov	r3, r0
 8018d60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d62:	2300      	movs	r3, #0
 8018d64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018d66:	79fb      	ldrb	r3, [r7, #7]
 8018d68:	2b03      	cmp	r3, #3
 8018d6a:	d817      	bhi.n	8018d9c <USBD_Get_USB_Status+0x44>
 8018d6c:	a201      	add	r2, pc, #4	; (adr r2, 8018d74 <USBD_Get_USB_Status+0x1c>)
 8018d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d72:	bf00      	nop
 8018d74:	08018d85 	.word	0x08018d85
 8018d78:	08018d8b 	.word	0x08018d8b
 8018d7c:	08018d91 	.word	0x08018d91
 8018d80:	08018d97 	.word	0x08018d97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018d84:	2300      	movs	r3, #0
 8018d86:	73fb      	strb	r3, [r7, #15]
    break;
 8018d88:	e00b      	b.n	8018da2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018d8a:	2303      	movs	r3, #3
 8018d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8018d8e:	e008      	b.n	8018da2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018d90:	2301      	movs	r3, #1
 8018d92:	73fb      	strb	r3, [r7, #15]
    break;
 8018d94:	e005      	b.n	8018da2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018d96:	2303      	movs	r3, #3
 8018d98:	73fb      	strb	r3, [r7, #15]
    break;
 8018d9a:	e002      	b.n	8018da2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018d9c:	2303      	movs	r3, #3
 8018d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8018da0:	bf00      	nop
  }
  return usb_status;
 8018da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8018da4:	4618      	mov	r0, r3
 8018da6:	3714      	adds	r7, #20
 8018da8:	46bd      	mov	sp, r7
 8018daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dae:	4770      	bx	lr

08018db0 <__cxa_pure_virtual>:
 8018db0:	b508      	push	{r3, lr}
 8018db2:	f000 f80d 	bl	8018dd0 <_ZSt9terminatev>

08018db6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8018db6:	b508      	push	{r3, lr}
 8018db8:	4780      	blx	r0
 8018dba:	f000 ffc3 	bl	8019d44 <abort>
	...

08018dc0 <_ZSt13get_terminatev>:
 8018dc0:	4b02      	ldr	r3, [pc, #8]	; (8018dcc <_ZSt13get_terminatev+0xc>)
 8018dc2:	6818      	ldr	r0, [r3, #0]
 8018dc4:	f3bf 8f5b 	dmb	ish
 8018dc8:	4770      	bx	lr
 8018dca:	bf00      	nop
 8018dcc:	200001f8 	.word	0x200001f8

08018dd0 <_ZSt9terminatev>:
 8018dd0:	b508      	push	{r3, lr}
 8018dd2:	f7ff fff5 	bl	8018dc0 <_ZSt13get_terminatev>
 8018dd6:	f7ff ffee 	bl	8018db6 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08018ddc <pow>:
 8018ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018de0:	ec59 8b10 	vmov	r8, r9, d0
 8018de4:	ec57 6b11 	vmov	r6, r7, d1
 8018de8:	f000 f8a6 	bl	8018f38 <__ieee754_pow>
 8018dec:	4b4e      	ldr	r3, [pc, #312]	; (8018f28 <pow+0x14c>)
 8018dee:	f993 3000 	ldrsb.w	r3, [r3]
 8018df2:	3301      	adds	r3, #1
 8018df4:	ec55 4b10 	vmov	r4, r5, d0
 8018df8:	d015      	beq.n	8018e26 <pow+0x4a>
 8018dfa:	4632      	mov	r2, r6
 8018dfc:	463b      	mov	r3, r7
 8018dfe:	4630      	mov	r0, r6
 8018e00:	4639      	mov	r1, r7
 8018e02:	f7e7 fea3 	bl	8000b4c <__aeabi_dcmpun>
 8018e06:	b970      	cbnz	r0, 8018e26 <pow+0x4a>
 8018e08:	4642      	mov	r2, r8
 8018e0a:	464b      	mov	r3, r9
 8018e0c:	4640      	mov	r0, r8
 8018e0e:	4649      	mov	r1, r9
 8018e10:	f7e7 fe9c 	bl	8000b4c <__aeabi_dcmpun>
 8018e14:	2200      	movs	r2, #0
 8018e16:	2300      	movs	r3, #0
 8018e18:	b148      	cbz	r0, 8018e2e <pow+0x52>
 8018e1a:	4630      	mov	r0, r6
 8018e1c:	4639      	mov	r1, r7
 8018e1e:	f7e7 fe63 	bl	8000ae8 <__aeabi_dcmpeq>
 8018e22:	2800      	cmp	r0, #0
 8018e24:	d17d      	bne.n	8018f22 <pow+0x146>
 8018e26:	ec45 4b10 	vmov	d0, r4, r5
 8018e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e2e:	4640      	mov	r0, r8
 8018e30:	4649      	mov	r1, r9
 8018e32:	f7e7 fe59 	bl	8000ae8 <__aeabi_dcmpeq>
 8018e36:	b1e0      	cbz	r0, 8018e72 <pow+0x96>
 8018e38:	2200      	movs	r2, #0
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	4630      	mov	r0, r6
 8018e3e:	4639      	mov	r1, r7
 8018e40:	f7e7 fe52 	bl	8000ae8 <__aeabi_dcmpeq>
 8018e44:	2800      	cmp	r0, #0
 8018e46:	d16c      	bne.n	8018f22 <pow+0x146>
 8018e48:	ec47 6b10 	vmov	d0, r6, r7
 8018e4c:	f000 fe53 	bl	8019af6 <finite>
 8018e50:	2800      	cmp	r0, #0
 8018e52:	d0e8      	beq.n	8018e26 <pow+0x4a>
 8018e54:	2200      	movs	r2, #0
 8018e56:	2300      	movs	r3, #0
 8018e58:	4630      	mov	r0, r6
 8018e5a:	4639      	mov	r1, r7
 8018e5c:	f7e7 fe4e 	bl	8000afc <__aeabi_dcmplt>
 8018e60:	2800      	cmp	r0, #0
 8018e62:	d0e0      	beq.n	8018e26 <pow+0x4a>
 8018e64:	f000 ff76 	bl	8019d54 <__errno>
 8018e68:	2321      	movs	r3, #33	; 0x21
 8018e6a:	6003      	str	r3, [r0, #0]
 8018e6c:	2400      	movs	r4, #0
 8018e6e:	4d2f      	ldr	r5, [pc, #188]	; (8018f2c <pow+0x150>)
 8018e70:	e7d9      	b.n	8018e26 <pow+0x4a>
 8018e72:	ec45 4b10 	vmov	d0, r4, r5
 8018e76:	f000 fe3e 	bl	8019af6 <finite>
 8018e7a:	bbb8      	cbnz	r0, 8018eec <pow+0x110>
 8018e7c:	ec49 8b10 	vmov	d0, r8, r9
 8018e80:	f000 fe39 	bl	8019af6 <finite>
 8018e84:	b390      	cbz	r0, 8018eec <pow+0x110>
 8018e86:	ec47 6b10 	vmov	d0, r6, r7
 8018e8a:	f000 fe34 	bl	8019af6 <finite>
 8018e8e:	b368      	cbz	r0, 8018eec <pow+0x110>
 8018e90:	4622      	mov	r2, r4
 8018e92:	462b      	mov	r3, r5
 8018e94:	4620      	mov	r0, r4
 8018e96:	4629      	mov	r1, r5
 8018e98:	f7e7 fe58 	bl	8000b4c <__aeabi_dcmpun>
 8018e9c:	b160      	cbz	r0, 8018eb8 <pow+0xdc>
 8018e9e:	f000 ff59 	bl	8019d54 <__errno>
 8018ea2:	2321      	movs	r3, #33	; 0x21
 8018ea4:	6003      	str	r3, [r0, #0]
 8018ea6:	2200      	movs	r2, #0
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	4610      	mov	r0, r2
 8018eac:	4619      	mov	r1, r3
 8018eae:	f7e7 fcdd 	bl	800086c <__aeabi_ddiv>
 8018eb2:	4604      	mov	r4, r0
 8018eb4:	460d      	mov	r5, r1
 8018eb6:	e7b6      	b.n	8018e26 <pow+0x4a>
 8018eb8:	f000 ff4c 	bl	8019d54 <__errno>
 8018ebc:	2322      	movs	r3, #34	; 0x22
 8018ebe:	6003      	str	r3, [r0, #0]
 8018ec0:	2200      	movs	r2, #0
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	4640      	mov	r0, r8
 8018ec6:	4649      	mov	r1, r9
 8018ec8:	f7e7 fe18 	bl	8000afc <__aeabi_dcmplt>
 8018ecc:	2400      	movs	r4, #0
 8018ece:	b158      	cbz	r0, 8018ee8 <pow+0x10c>
 8018ed0:	ec47 6b10 	vmov	d0, r6, r7
 8018ed4:	f000 fe24 	bl	8019b20 <rint>
 8018ed8:	4632      	mov	r2, r6
 8018eda:	ec51 0b10 	vmov	r0, r1, d0
 8018ede:	463b      	mov	r3, r7
 8018ee0:	f7e7 fe02 	bl	8000ae8 <__aeabi_dcmpeq>
 8018ee4:	2800      	cmp	r0, #0
 8018ee6:	d0c2      	beq.n	8018e6e <pow+0x92>
 8018ee8:	4d11      	ldr	r5, [pc, #68]	; (8018f30 <pow+0x154>)
 8018eea:	e79c      	b.n	8018e26 <pow+0x4a>
 8018eec:	2200      	movs	r2, #0
 8018eee:	2300      	movs	r3, #0
 8018ef0:	4620      	mov	r0, r4
 8018ef2:	4629      	mov	r1, r5
 8018ef4:	f7e7 fdf8 	bl	8000ae8 <__aeabi_dcmpeq>
 8018ef8:	2800      	cmp	r0, #0
 8018efa:	d094      	beq.n	8018e26 <pow+0x4a>
 8018efc:	ec49 8b10 	vmov	d0, r8, r9
 8018f00:	f000 fdf9 	bl	8019af6 <finite>
 8018f04:	2800      	cmp	r0, #0
 8018f06:	d08e      	beq.n	8018e26 <pow+0x4a>
 8018f08:	ec47 6b10 	vmov	d0, r6, r7
 8018f0c:	f000 fdf3 	bl	8019af6 <finite>
 8018f10:	2800      	cmp	r0, #0
 8018f12:	d088      	beq.n	8018e26 <pow+0x4a>
 8018f14:	f000 ff1e 	bl	8019d54 <__errno>
 8018f18:	2322      	movs	r3, #34	; 0x22
 8018f1a:	6003      	str	r3, [r0, #0]
 8018f1c:	2400      	movs	r4, #0
 8018f1e:	2500      	movs	r5, #0
 8018f20:	e781      	b.n	8018e26 <pow+0x4a>
 8018f22:	4d04      	ldr	r5, [pc, #16]	; (8018f34 <pow+0x158>)
 8018f24:	2400      	movs	r4, #0
 8018f26:	e77e      	b.n	8018e26 <pow+0x4a>
 8018f28:	200001fc 	.word	0x200001fc
 8018f2c:	fff00000 	.word	0xfff00000
 8018f30:	7ff00000 	.word	0x7ff00000
 8018f34:	3ff00000 	.word	0x3ff00000

08018f38 <__ieee754_pow>:
 8018f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f3c:	ed2d 8b06 	vpush	{d8-d10}
 8018f40:	b08d      	sub	sp, #52	; 0x34
 8018f42:	ed8d 1b02 	vstr	d1, [sp, #8]
 8018f46:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8018f4a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8018f4e:	ea56 0100 	orrs.w	r1, r6, r0
 8018f52:	ec53 2b10 	vmov	r2, r3, d0
 8018f56:	f000 84d1 	beq.w	80198fc <__ieee754_pow+0x9c4>
 8018f5a:	497f      	ldr	r1, [pc, #508]	; (8019158 <__ieee754_pow+0x220>)
 8018f5c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8018f60:	428c      	cmp	r4, r1
 8018f62:	ee10 8a10 	vmov	r8, s0
 8018f66:	4699      	mov	r9, r3
 8018f68:	dc09      	bgt.n	8018f7e <__ieee754_pow+0x46>
 8018f6a:	d103      	bne.n	8018f74 <__ieee754_pow+0x3c>
 8018f6c:	b97a      	cbnz	r2, 8018f8e <__ieee754_pow+0x56>
 8018f6e:	42a6      	cmp	r6, r4
 8018f70:	dd02      	ble.n	8018f78 <__ieee754_pow+0x40>
 8018f72:	e00c      	b.n	8018f8e <__ieee754_pow+0x56>
 8018f74:	428e      	cmp	r6, r1
 8018f76:	dc02      	bgt.n	8018f7e <__ieee754_pow+0x46>
 8018f78:	428e      	cmp	r6, r1
 8018f7a:	d110      	bne.n	8018f9e <__ieee754_pow+0x66>
 8018f7c:	b178      	cbz	r0, 8018f9e <__ieee754_pow+0x66>
 8018f7e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018f82:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018f86:	ea54 0308 	orrs.w	r3, r4, r8
 8018f8a:	f000 84b7 	beq.w	80198fc <__ieee754_pow+0x9c4>
 8018f8e:	4873      	ldr	r0, [pc, #460]	; (801915c <__ieee754_pow+0x224>)
 8018f90:	b00d      	add	sp, #52	; 0x34
 8018f92:	ecbd 8b06 	vpop	{d8-d10}
 8018f96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f9a:	f000 bdb9 	b.w	8019b10 <nan>
 8018f9e:	f1b9 0f00 	cmp.w	r9, #0
 8018fa2:	da36      	bge.n	8019012 <__ieee754_pow+0xda>
 8018fa4:	496e      	ldr	r1, [pc, #440]	; (8019160 <__ieee754_pow+0x228>)
 8018fa6:	428e      	cmp	r6, r1
 8018fa8:	dc51      	bgt.n	801904e <__ieee754_pow+0x116>
 8018faa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8018fae:	428e      	cmp	r6, r1
 8018fb0:	f340 84af 	ble.w	8019912 <__ieee754_pow+0x9da>
 8018fb4:	1531      	asrs	r1, r6, #20
 8018fb6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018fba:	2914      	cmp	r1, #20
 8018fbc:	dd0f      	ble.n	8018fde <__ieee754_pow+0xa6>
 8018fbe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8018fc2:	fa20 fc01 	lsr.w	ip, r0, r1
 8018fc6:	fa0c f101 	lsl.w	r1, ip, r1
 8018fca:	4281      	cmp	r1, r0
 8018fcc:	f040 84a1 	bne.w	8019912 <__ieee754_pow+0x9da>
 8018fd0:	f00c 0c01 	and.w	ip, ip, #1
 8018fd4:	f1cc 0102 	rsb	r1, ip, #2
 8018fd8:	9100      	str	r1, [sp, #0]
 8018fda:	b180      	cbz	r0, 8018ffe <__ieee754_pow+0xc6>
 8018fdc:	e059      	b.n	8019092 <__ieee754_pow+0x15a>
 8018fde:	2800      	cmp	r0, #0
 8018fe0:	d155      	bne.n	801908e <__ieee754_pow+0x156>
 8018fe2:	f1c1 0114 	rsb	r1, r1, #20
 8018fe6:	fa46 fc01 	asr.w	ip, r6, r1
 8018fea:	fa0c f101 	lsl.w	r1, ip, r1
 8018fee:	42b1      	cmp	r1, r6
 8018ff0:	f040 848c 	bne.w	801990c <__ieee754_pow+0x9d4>
 8018ff4:	f00c 0c01 	and.w	ip, ip, #1
 8018ff8:	f1cc 0102 	rsb	r1, ip, #2
 8018ffc:	9100      	str	r1, [sp, #0]
 8018ffe:	4959      	ldr	r1, [pc, #356]	; (8019164 <__ieee754_pow+0x22c>)
 8019000:	428e      	cmp	r6, r1
 8019002:	d12d      	bne.n	8019060 <__ieee754_pow+0x128>
 8019004:	2f00      	cmp	r7, #0
 8019006:	da79      	bge.n	80190fc <__ieee754_pow+0x1c4>
 8019008:	4956      	ldr	r1, [pc, #344]	; (8019164 <__ieee754_pow+0x22c>)
 801900a:	2000      	movs	r0, #0
 801900c:	f7e7 fc2e 	bl	800086c <__aeabi_ddiv>
 8019010:	e016      	b.n	8019040 <__ieee754_pow+0x108>
 8019012:	2100      	movs	r1, #0
 8019014:	9100      	str	r1, [sp, #0]
 8019016:	2800      	cmp	r0, #0
 8019018:	d13b      	bne.n	8019092 <__ieee754_pow+0x15a>
 801901a:	494f      	ldr	r1, [pc, #316]	; (8019158 <__ieee754_pow+0x220>)
 801901c:	428e      	cmp	r6, r1
 801901e:	d1ee      	bne.n	8018ffe <__ieee754_pow+0xc6>
 8019020:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019024:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019028:	ea53 0308 	orrs.w	r3, r3, r8
 801902c:	f000 8466 	beq.w	80198fc <__ieee754_pow+0x9c4>
 8019030:	4b4d      	ldr	r3, [pc, #308]	; (8019168 <__ieee754_pow+0x230>)
 8019032:	429c      	cmp	r4, r3
 8019034:	dd0d      	ble.n	8019052 <__ieee754_pow+0x11a>
 8019036:	2f00      	cmp	r7, #0
 8019038:	f280 8464 	bge.w	8019904 <__ieee754_pow+0x9cc>
 801903c:	2000      	movs	r0, #0
 801903e:	2100      	movs	r1, #0
 8019040:	ec41 0b10 	vmov	d0, r0, r1
 8019044:	b00d      	add	sp, #52	; 0x34
 8019046:	ecbd 8b06 	vpop	{d8-d10}
 801904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801904e:	2102      	movs	r1, #2
 8019050:	e7e0      	b.n	8019014 <__ieee754_pow+0xdc>
 8019052:	2f00      	cmp	r7, #0
 8019054:	daf2      	bge.n	801903c <__ieee754_pow+0x104>
 8019056:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801905a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801905e:	e7ef      	b.n	8019040 <__ieee754_pow+0x108>
 8019060:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8019064:	d104      	bne.n	8019070 <__ieee754_pow+0x138>
 8019066:	4610      	mov	r0, r2
 8019068:	4619      	mov	r1, r3
 801906a:	f7e7 fad5 	bl	8000618 <__aeabi_dmul>
 801906e:	e7e7      	b.n	8019040 <__ieee754_pow+0x108>
 8019070:	493e      	ldr	r1, [pc, #248]	; (801916c <__ieee754_pow+0x234>)
 8019072:	428f      	cmp	r7, r1
 8019074:	d10d      	bne.n	8019092 <__ieee754_pow+0x15a>
 8019076:	f1b9 0f00 	cmp.w	r9, #0
 801907a:	db0a      	blt.n	8019092 <__ieee754_pow+0x15a>
 801907c:	ec43 2b10 	vmov	d0, r2, r3
 8019080:	b00d      	add	sp, #52	; 0x34
 8019082:	ecbd 8b06 	vpop	{d8-d10}
 8019086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801908a:	f000 bc77 	b.w	801997c <__ieee754_sqrt>
 801908e:	2100      	movs	r1, #0
 8019090:	9100      	str	r1, [sp, #0]
 8019092:	ec43 2b10 	vmov	d0, r2, r3
 8019096:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801909a:	f000 fd23 	bl	8019ae4 <fabs>
 801909e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80190a2:	ec51 0b10 	vmov	r0, r1, d0
 80190a6:	f1b8 0f00 	cmp.w	r8, #0
 80190aa:	d12a      	bne.n	8019102 <__ieee754_pow+0x1ca>
 80190ac:	b12c      	cbz	r4, 80190ba <__ieee754_pow+0x182>
 80190ae:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8019164 <__ieee754_pow+0x22c>
 80190b2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80190b6:	45e6      	cmp	lr, ip
 80190b8:	d123      	bne.n	8019102 <__ieee754_pow+0x1ca>
 80190ba:	2f00      	cmp	r7, #0
 80190bc:	da05      	bge.n	80190ca <__ieee754_pow+0x192>
 80190be:	4602      	mov	r2, r0
 80190c0:	460b      	mov	r3, r1
 80190c2:	2000      	movs	r0, #0
 80190c4:	4927      	ldr	r1, [pc, #156]	; (8019164 <__ieee754_pow+0x22c>)
 80190c6:	f7e7 fbd1 	bl	800086c <__aeabi_ddiv>
 80190ca:	f1b9 0f00 	cmp.w	r9, #0
 80190ce:	dab7      	bge.n	8019040 <__ieee754_pow+0x108>
 80190d0:	9b00      	ldr	r3, [sp, #0]
 80190d2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80190d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80190da:	4323      	orrs	r3, r4
 80190dc:	d108      	bne.n	80190f0 <__ieee754_pow+0x1b8>
 80190de:	4602      	mov	r2, r0
 80190e0:	460b      	mov	r3, r1
 80190e2:	4610      	mov	r0, r2
 80190e4:	4619      	mov	r1, r3
 80190e6:	f7e7 f8df 	bl	80002a8 <__aeabi_dsub>
 80190ea:	4602      	mov	r2, r0
 80190ec:	460b      	mov	r3, r1
 80190ee:	e78d      	b.n	801900c <__ieee754_pow+0xd4>
 80190f0:	9b00      	ldr	r3, [sp, #0]
 80190f2:	2b01      	cmp	r3, #1
 80190f4:	d1a4      	bne.n	8019040 <__ieee754_pow+0x108>
 80190f6:	4602      	mov	r2, r0
 80190f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80190fc:	4610      	mov	r0, r2
 80190fe:	4619      	mov	r1, r3
 8019100:	e79e      	b.n	8019040 <__ieee754_pow+0x108>
 8019102:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8019106:	f10c 35ff 	add.w	r5, ip, #4294967295
 801910a:	950a      	str	r5, [sp, #40]	; 0x28
 801910c:	9d00      	ldr	r5, [sp, #0]
 801910e:	46ac      	mov	ip, r5
 8019110:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019112:	ea5c 0505 	orrs.w	r5, ip, r5
 8019116:	d0e4      	beq.n	80190e2 <__ieee754_pow+0x1aa>
 8019118:	4b15      	ldr	r3, [pc, #84]	; (8019170 <__ieee754_pow+0x238>)
 801911a:	429e      	cmp	r6, r3
 801911c:	f340 80fc 	ble.w	8019318 <__ieee754_pow+0x3e0>
 8019120:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019124:	429e      	cmp	r6, r3
 8019126:	4b10      	ldr	r3, [pc, #64]	; (8019168 <__ieee754_pow+0x230>)
 8019128:	dd07      	ble.n	801913a <__ieee754_pow+0x202>
 801912a:	429c      	cmp	r4, r3
 801912c:	dc0a      	bgt.n	8019144 <__ieee754_pow+0x20c>
 801912e:	2f00      	cmp	r7, #0
 8019130:	da84      	bge.n	801903c <__ieee754_pow+0x104>
 8019132:	a307      	add	r3, pc, #28	; (adr r3, 8019150 <__ieee754_pow+0x218>)
 8019134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019138:	e795      	b.n	8019066 <__ieee754_pow+0x12e>
 801913a:	429c      	cmp	r4, r3
 801913c:	dbf7      	blt.n	801912e <__ieee754_pow+0x1f6>
 801913e:	4b09      	ldr	r3, [pc, #36]	; (8019164 <__ieee754_pow+0x22c>)
 8019140:	429c      	cmp	r4, r3
 8019142:	dd17      	ble.n	8019174 <__ieee754_pow+0x23c>
 8019144:	2f00      	cmp	r7, #0
 8019146:	dcf4      	bgt.n	8019132 <__ieee754_pow+0x1fa>
 8019148:	e778      	b.n	801903c <__ieee754_pow+0x104>
 801914a:	bf00      	nop
 801914c:	f3af 8000 	nop.w
 8019150:	8800759c 	.word	0x8800759c
 8019154:	7e37e43c 	.word	0x7e37e43c
 8019158:	7ff00000 	.word	0x7ff00000
 801915c:	080211cb 	.word	0x080211cb
 8019160:	433fffff 	.word	0x433fffff
 8019164:	3ff00000 	.word	0x3ff00000
 8019168:	3fefffff 	.word	0x3fefffff
 801916c:	3fe00000 	.word	0x3fe00000
 8019170:	41e00000 	.word	0x41e00000
 8019174:	4b64      	ldr	r3, [pc, #400]	; (8019308 <__ieee754_pow+0x3d0>)
 8019176:	2200      	movs	r2, #0
 8019178:	f7e7 f896 	bl	80002a8 <__aeabi_dsub>
 801917c:	a356      	add	r3, pc, #344	; (adr r3, 80192d8 <__ieee754_pow+0x3a0>)
 801917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019182:	4604      	mov	r4, r0
 8019184:	460d      	mov	r5, r1
 8019186:	f7e7 fa47 	bl	8000618 <__aeabi_dmul>
 801918a:	a355      	add	r3, pc, #340	; (adr r3, 80192e0 <__ieee754_pow+0x3a8>)
 801918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019190:	4606      	mov	r6, r0
 8019192:	460f      	mov	r7, r1
 8019194:	4620      	mov	r0, r4
 8019196:	4629      	mov	r1, r5
 8019198:	f7e7 fa3e 	bl	8000618 <__aeabi_dmul>
 801919c:	4b5b      	ldr	r3, [pc, #364]	; (801930c <__ieee754_pow+0x3d4>)
 801919e:	4682      	mov	sl, r0
 80191a0:	468b      	mov	fp, r1
 80191a2:	2200      	movs	r2, #0
 80191a4:	4620      	mov	r0, r4
 80191a6:	4629      	mov	r1, r5
 80191a8:	f7e7 fa36 	bl	8000618 <__aeabi_dmul>
 80191ac:	4602      	mov	r2, r0
 80191ae:	460b      	mov	r3, r1
 80191b0:	a14d      	add	r1, pc, #308	; (adr r1, 80192e8 <__ieee754_pow+0x3b0>)
 80191b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80191b6:	f7e7 f877 	bl	80002a8 <__aeabi_dsub>
 80191ba:	4622      	mov	r2, r4
 80191bc:	462b      	mov	r3, r5
 80191be:	f7e7 fa2b 	bl	8000618 <__aeabi_dmul>
 80191c2:	4602      	mov	r2, r0
 80191c4:	460b      	mov	r3, r1
 80191c6:	2000      	movs	r0, #0
 80191c8:	4951      	ldr	r1, [pc, #324]	; (8019310 <__ieee754_pow+0x3d8>)
 80191ca:	f7e7 f86d 	bl	80002a8 <__aeabi_dsub>
 80191ce:	4622      	mov	r2, r4
 80191d0:	4680      	mov	r8, r0
 80191d2:	4689      	mov	r9, r1
 80191d4:	462b      	mov	r3, r5
 80191d6:	4620      	mov	r0, r4
 80191d8:	4629      	mov	r1, r5
 80191da:	f7e7 fa1d 	bl	8000618 <__aeabi_dmul>
 80191de:	4602      	mov	r2, r0
 80191e0:	460b      	mov	r3, r1
 80191e2:	4640      	mov	r0, r8
 80191e4:	4649      	mov	r1, r9
 80191e6:	f7e7 fa17 	bl	8000618 <__aeabi_dmul>
 80191ea:	a341      	add	r3, pc, #260	; (adr r3, 80192f0 <__ieee754_pow+0x3b8>)
 80191ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191f0:	f7e7 fa12 	bl	8000618 <__aeabi_dmul>
 80191f4:	4602      	mov	r2, r0
 80191f6:	460b      	mov	r3, r1
 80191f8:	4650      	mov	r0, sl
 80191fa:	4659      	mov	r1, fp
 80191fc:	f7e7 f854 	bl	80002a8 <__aeabi_dsub>
 8019200:	4602      	mov	r2, r0
 8019202:	460b      	mov	r3, r1
 8019204:	4680      	mov	r8, r0
 8019206:	4689      	mov	r9, r1
 8019208:	4630      	mov	r0, r6
 801920a:	4639      	mov	r1, r7
 801920c:	f7e7 f84e 	bl	80002ac <__adddf3>
 8019210:	2400      	movs	r4, #0
 8019212:	4632      	mov	r2, r6
 8019214:	463b      	mov	r3, r7
 8019216:	4620      	mov	r0, r4
 8019218:	460d      	mov	r5, r1
 801921a:	f7e7 f845 	bl	80002a8 <__aeabi_dsub>
 801921e:	4602      	mov	r2, r0
 8019220:	460b      	mov	r3, r1
 8019222:	4640      	mov	r0, r8
 8019224:	4649      	mov	r1, r9
 8019226:	f7e7 f83f 	bl	80002a8 <__aeabi_dsub>
 801922a:	9b00      	ldr	r3, [sp, #0]
 801922c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801922e:	3b01      	subs	r3, #1
 8019230:	4313      	orrs	r3, r2
 8019232:	4682      	mov	sl, r0
 8019234:	468b      	mov	fp, r1
 8019236:	f040 81f1 	bne.w	801961c <__ieee754_pow+0x6e4>
 801923a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80192f8 <__ieee754_pow+0x3c0>
 801923e:	eeb0 8a47 	vmov.f32	s16, s14
 8019242:	eef0 8a67 	vmov.f32	s17, s15
 8019246:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801924a:	2600      	movs	r6, #0
 801924c:	4632      	mov	r2, r6
 801924e:	463b      	mov	r3, r7
 8019250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019254:	f7e7 f828 	bl	80002a8 <__aeabi_dsub>
 8019258:	4622      	mov	r2, r4
 801925a:	462b      	mov	r3, r5
 801925c:	f7e7 f9dc 	bl	8000618 <__aeabi_dmul>
 8019260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019264:	4680      	mov	r8, r0
 8019266:	4689      	mov	r9, r1
 8019268:	4650      	mov	r0, sl
 801926a:	4659      	mov	r1, fp
 801926c:	f7e7 f9d4 	bl	8000618 <__aeabi_dmul>
 8019270:	4602      	mov	r2, r0
 8019272:	460b      	mov	r3, r1
 8019274:	4640      	mov	r0, r8
 8019276:	4649      	mov	r1, r9
 8019278:	f7e7 f818 	bl	80002ac <__adddf3>
 801927c:	4632      	mov	r2, r6
 801927e:	463b      	mov	r3, r7
 8019280:	4680      	mov	r8, r0
 8019282:	4689      	mov	r9, r1
 8019284:	4620      	mov	r0, r4
 8019286:	4629      	mov	r1, r5
 8019288:	f7e7 f9c6 	bl	8000618 <__aeabi_dmul>
 801928c:	460b      	mov	r3, r1
 801928e:	4604      	mov	r4, r0
 8019290:	460d      	mov	r5, r1
 8019292:	4602      	mov	r2, r0
 8019294:	4649      	mov	r1, r9
 8019296:	4640      	mov	r0, r8
 8019298:	f7e7 f808 	bl	80002ac <__adddf3>
 801929c:	4b1d      	ldr	r3, [pc, #116]	; (8019314 <__ieee754_pow+0x3dc>)
 801929e:	4299      	cmp	r1, r3
 80192a0:	ec45 4b19 	vmov	d9, r4, r5
 80192a4:	4606      	mov	r6, r0
 80192a6:	460f      	mov	r7, r1
 80192a8:	468b      	mov	fp, r1
 80192aa:	f340 82fe 	ble.w	80198aa <__ieee754_pow+0x972>
 80192ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80192b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80192b6:	4303      	orrs	r3, r0
 80192b8:	f000 81f0 	beq.w	801969c <__ieee754_pow+0x764>
 80192bc:	a310      	add	r3, pc, #64	; (adr r3, 8019300 <__ieee754_pow+0x3c8>)
 80192be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192c2:	ec51 0b18 	vmov	r0, r1, d8
 80192c6:	f7e7 f9a7 	bl	8000618 <__aeabi_dmul>
 80192ca:	a30d      	add	r3, pc, #52	; (adr r3, 8019300 <__ieee754_pow+0x3c8>)
 80192cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192d0:	e6cb      	b.n	801906a <__ieee754_pow+0x132>
 80192d2:	bf00      	nop
 80192d4:	f3af 8000 	nop.w
 80192d8:	60000000 	.word	0x60000000
 80192dc:	3ff71547 	.word	0x3ff71547
 80192e0:	f85ddf44 	.word	0xf85ddf44
 80192e4:	3e54ae0b 	.word	0x3e54ae0b
 80192e8:	55555555 	.word	0x55555555
 80192ec:	3fd55555 	.word	0x3fd55555
 80192f0:	652b82fe 	.word	0x652b82fe
 80192f4:	3ff71547 	.word	0x3ff71547
 80192f8:	00000000 	.word	0x00000000
 80192fc:	bff00000 	.word	0xbff00000
 8019300:	8800759c 	.word	0x8800759c
 8019304:	7e37e43c 	.word	0x7e37e43c
 8019308:	3ff00000 	.word	0x3ff00000
 801930c:	3fd00000 	.word	0x3fd00000
 8019310:	3fe00000 	.word	0x3fe00000
 8019314:	408fffff 	.word	0x408fffff
 8019318:	4bd7      	ldr	r3, [pc, #860]	; (8019678 <__ieee754_pow+0x740>)
 801931a:	ea03 0309 	and.w	r3, r3, r9
 801931e:	2200      	movs	r2, #0
 8019320:	b92b      	cbnz	r3, 801932e <__ieee754_pow+0x3f6>
 8019322:	4bd6      	ldr	r3, [pc, #856]	; (801967c <__ieee754_pow+0x744>)
 8019324:	f7e7 f978 	bl	8000618 <__aeabi_dmul>
 8019328:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801932c:	460c      	mov	r4, r1
 801932e:	1523      	asrs	r3, r4, #20
 8019330:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019334:	4413      	add	r3, r2
 8019336:	9309      	str	r3, [sp, #36]	; 0x24
 8019338:	4bd1      	ldr	r3, [pc, #836]	; (8019680 <__ieee754_pow+0x748>)
 801933a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801933e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019342:	429c      	cmp	r4, r3
 8019344:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019348:	dd08      	ble.n	801935c <__ieee754_pow+0x424>
 801934a:	4bce      	ldr	r3, [pc, #824]	; (8019684 <__ieee754_pow+0x74c>)
 801934c:	429c      	cmp	r4, r3
 801934e:	f340 8163 	ble.w	8019618 <__ieee754_pow+0x6e0>
 8019352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019354:	3301      	adds	r3, #1
 8019356:	9309      	str	r3, [sp, #36]	; 0x24
 8019358:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801935c:	2400      	movs	r4, #0
 801935e:	00e3      	lsls	r3, r4, #3
 8019360:	930b      	str	r3, [sp, #44]	; 0x2c
 8019362:	4bc9      	ldr	r3, [pc, #804]	; (8019688 <__ieee754_pow+0x750>)
 8019364:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019368:	ed93 7b00 	vldr	d7, [r3]
 801936c:	4629      	mov	r1, r5
 801936e:	ec53 2b17 	vmov	r2, r3, d7
 8019372:	eeb0 8a47 	vmov.f32	s16, s14
 8019376:	eef0 8a67 	vmov.f32	s17, s15
 801937a:	4682      	mov	sl, r0
 801937c:	f7e6 ff94 	bl	80002a8 <__aeabi_dsub>
 8019380:	4652      	mov	r2, sl
 8019382:	4606      	mov	r6, r0
 8019384:	460f      	mov	r7, r1
 8019386:	462b      	mov	r3, r5
 8019388:	ec51 0b18 	vmov	r0, r1, d8
 801938c:	f7e6 ff8e 	bl	80002ac <__adddf3>
 8019390:	4602      	mov	r2, r0
 8019392:	460b      	mov	r3, r1
 8019394:	2000      	movs	r0, #0
 8019396:	49bd      	ldr	r1, [pc, #756]	; (801968c <__ieee754_pow+0x754>)
 8019398:	f7e7 fa68 	bl	800086c <__aeabi_ddiv>
 801939c:	ec41 0b19 	vmov	d9, r0, r1
 80193a0:	4602      	mov	r2, r0
 80193a2:	460b      	mov	r3, r1
 80193a4:	4630      	mov	r0, r6
 80193a6:	4639      	mov	r1, r7
 80193a8:	f7e7 f936 	bl	8000618 <__aeabi_dmul>
 80193ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80193b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80193b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80193b8:	2300      	movs	r3, #0
 80193ba:	9304      	str	r3, [sp, #16]
 80193bc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80193c0:	46ab      	mov	fp, r5
 80193c2:	106d      	asrs	r5, r5, #1
 80193c4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80193c8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80193cc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80193d0:	2200      	movs	r2, #0
 80193d2:	4640      	mov	r0, r8
 80193d4:	4649      	mov	r1, r9
 80193d6:	4614      	mov	r4, r2
 80193d8:	461d      	mov	r5, r3
 80193da:	f7e7 f91d 	bl	8000618 <__aeabi_dmul>
 80193de:	4602      	mov	r2, r0
 80193e0:	460b      	mov	r3, r1
 80193e2:	4630      	mov	r0, r6
 80193e4:	4639      	mov	r1, r7
 80193e6:	f7e6 ff5f 	bl	80002a8 <__aeabi_dsub>
 80193ea:	ec53 2b18 	vmov	r2, r3, d8
 80193ee:	4606      	mov	r6, r0
 80193f0:	460f      	mov	r7, r1
 80193f2:	4620      	mov	r0, r4
 80193f4:	4629      	mov	r1, r5
 80193f6:	f7e6 ff57 	bl	80002a8 <__aeabi_dsub>
 80193fa:	4602      	mov	r2, r0
 80193fc:	460b      	mov	r3, r1
 80193fe:	4650      	mov	r0, sl
 8019400:	4659      	mov	r1, fp
 8019402:	f7e6 ff51 	bl	80002a8 <__aeabi_dsub>
 8019406:	4642      	mov	r2, r8
 8019408:	464b      	mov	r3, r9
 801940a:	f7e7 f905 	bl	8000618 <__aeabi_dmul>
 801940e:	4602      	mov	r2, r0
 8019410:	460b      	mov	r3, r1
 8019412:	4630      	mov	r0, r6
 8019414:	4639      	mov	r1, r7
 8019416:	f7e6 ff47 	bl	80002a8 <__aeabi_dsub>
 801941a:	ec53 2b19 	vmov	r2, r3, d9
 801941e:	f7e7 f8fb 	bl	8000618 <__aeabi_dmul>
 8019422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019426:	ec41 0b18 	vmov	d8, r0, r1
 801942a:	4610      	mov	r0, r2
 801942c:	4619      	mov	r1, r3
 801942e:	f7e7 f8f3 	bl	8000618 <__aeabi_dmul>
 8019432:	a37d      	add	r3, pc, #500	; (adr r3, 8019628 <__ieee754_pow+0x6f0>)
 8019434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019438:	4604      	mov	r4, r0
 801943a:	460d      	mov	r5, r1
 801943c:	f7e7 f8ec 	bl	8000618 <__aeabi_dmul>
 8019440:	a37b      	add	r3, pc, #492	; (adr r3, 8019630 <__ieee754_pow+0x6f8>)
 8019442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019446:	f7e6 ff31 	bl	80002ac <__adddf3>
 801944a:	4622      	mov	r2, r4
 801944c:	462b      	mov	r3, r5
 801944e:	f7e7 f8e3 	bl	8000618 <__aeabi_dmul>
 8019452:	a379      	add	r3, pc, #484	; (adr r3, 8019638 <__ieee754_pow+0x700>)
 8019454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019458:	f7e6 ff28 	bl	80002ac <__adddf3>
 801945c:	4622      	mov	r2, r4
 801945e:	462b      	mov	r3, r5
 8019460:	f7e7 f8da 	bl	8000618 <__aeabi_dmul>
 8019464:	a376      	add	r3, pc, #472	; (adr r3, 8019640 <__ieee754_pow+0x708>)
 8019466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801946a:	f7e6 ff1f 	bl	80002ac <__adddf3>
 801946e:	4622      	mov	r2, r4
 8019470:	462b      	mov	r3, r5
 8019472:	f7e7 f8d1 	bl	8000618 <__aeabi_dmul>
 8019476:	a374      	add	r3, pc, #464	; (adr r3, 8019648 <__ieee754_pow+0x710>)
 8019478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801947c:	f7e6 ff16 	bl	80002ac <__adddf3>
 8019480:	4622      	mov	r2, r4
 8019482:	462b      	mov	r3, r5
 8019484:	f7e7 f8c8 	bl	8000618 <__aeabi_dmul>
 8019488:	a371      	add	r3, pc, #452	; (adr r3, 8019650 <__ieee754_pow+0x718>)
 801948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801948e:	f7e6 ff0d 	bl	80002ac <__adddf3>
 8019492:	4622      	mov	r2, r4
 8019494:	4606      	mov	r6, r0
 8019496:	460f      	mov	r7, r1
 8019498:	462b      	mov	r3, r5
 801949a:	4620      	mov	r0, r4
 801949c:	4629      	mov	r1, r5
 801949e:	f7e7 f8bb 	bl	8000618 <__aeabi_dmul>
 80194a2:	4602      	mov	r2, r0
 80194a4:	460b      	mov	r3, r1
 80194a6:	4630      	mov	r0, r6
 80194a8:	4639      	mov	r1, r7
 80194aa:	f7e7 f8b5 	bl	8000618 <__aeabi_dmul>
 80194ae:	4642      	mov	r2, r8
 80194b0:	4604      	mov	r4, r0
 80194b2:	460d      	mov	r5, r1
 80194b4:	464b      	mov	r3, r9
 80194b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80194ba:	f7e6 fef7 	bl	80002ac <__adddf3>
 80194be:	ec53 2b18 	vmov	r2, r3, d8
 80194c2:	f7e7 f8a9 	bl	8000618 <__aeabi_dmul>
 80194c6:	4622      	mov	r2, r4
 80194c8:	462b      	mov	r3, r5
 80194ca:	f7e6 feef 	bl	80002ac <__adddf3>
 80194ce:	4642      	mov	r2, r8
 80194d0:	4682      	mov	sl, r0
 80194d2:	468b      	mov	fp, r1
 80194d4:	464b      	mov	r3, r9
 80194d6:	4640      	mov	r0, r8
 80194d8:	4649      	mov	r1, r9
 80194da:	f7e7 f89d 	bl	8000618 <__aeabi_dmul>
 80194de:	4b6c      	ldr	r3, [pc, #432]	; (8019690 <__ieee754_pow+0x758>)
 80194e0:	2200      	movs	r2, #0
 80194e2:	4606      	mov	r6, r0
 80194e4:	460f      	mov	r7, r1
 80194e6:	f7e6 fee1 	bl	80002ac <__adddf3>
 80194ea:	4652      	mov	r2, sl
 80194ec:	465b      	mov	r3, fp
 80194ee:	f7e6 fedd 	bl	80002ac <__adddf3>
 80194f2:	9c04      	ldr	r4, [sp, #16]
 80194f4:	460d      	mov	r5, r1
 80194f6:	4622      	mov	r2, r4
 80194f8:	460b      	mov	r3, r1
 80194fa:	4640      	mov	r0, r8
 80194fc:	4649      	mov	r1, r9
 80194fe:	f7e7 f88b 	bl	8000618 <__aeabi_dmul>
 8019502:	4b63      	ldr	r3, [pc, #396]	; (8019690 <__ieee754_pow+0x758>)
 8019504:	4680      	mov	r8, r0
 8019506:	4689      	mov	r9, r1
 8019508:	2200      	movs	r2, #0
 801950a:	4620      	mov	r0, r4
 801950c:	4629      	mov	r1, r5
 801950e:	f7e6 fecb 	bl	80002a8 <__aeabi_dsub>
 8019512:	4632      	mov	r2, r6
 8019514:	463b      	mov	r3, r7
 8019516:	f7e6 fec7 	bl	80002a8 <__aeabi_dsub>
 801951a:	4602      	mov	r2, r0
 801951c:	460b      	mov	r3, r1
 801951e:	4650      	mov	r0, sl
 8019520:	4659      	mov	r1, fp
 8019522:	f7e6 fec1 	bl	80002a8 <__aeabi_dsub>
 8019526:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801952a:	f7e7 f875 	bl	8000618 <__aeabi_dmul>
 801952e:	4622      	mov	r2, r4
 8019530:	4606      	mov	r6, r0
 8019532:	460f      	mov	r7, r1
 8019534:	462b      	mov	r3, r5
 8019536:	ec51 0b18 	vmov	r0, r1, d8
 801953a:	f7e7 f86d 	bl	8000618 <__aeabi_dmul>
 801953e:	4602      	mov	r2, r0
 8019540:	460b      	mov	r3, r1
 8019542:	4630      	mov	r0, r6
 8019544:	4639      	mov	r1, r7
 8019546:	f7e6 feb1 	bl	80002ac <__adddf3>
 801954a:	4606      	mov	r6, r0
 801954c:	460f      	mov	r7, r1
 801954e:	4602      	mov	r2, r0
 8019550:	460b      	mov	r3, r1
 8019552:	4640      	mov	r0, r8
 8019554:	4649      	mov	r1, r9
 8019556:	f7e6 fea9 	bl	80002ac <__adddf3>
 801955a:	9c04      	ldr	r4, [sp, #16]
 801955c:	a33e      	add	r3, pc, #248	; (adr r3, 8019658 <__ieee754_pow+0x720>)
 801955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019562:	4620      	mov	r0, r4
 8019564:	460d      	mov	r5, r1
 8019566:	f7e7 f857 	bl	8000618 <__aeabi_dmul>
 801956a:	4642      	mov	r2, r8
 801956c:	ec41 0b18 	vmov	d8, r0, r1
 8019570:	464b      	mov	r3, r9
 8019572:	4620      	mov	r0, r4
 8019574:	4629      	mov	r1, r5
 8019576:	f7e6 fe97 	bl	80002a8 <__aeabi_dsub>
 801957a:	4602      	mov	r2, r0
 801957c:	460b      	mov	r3, r1
 801957e:	4630      	mov	r0, r6
 8019580:	4639      	mov	r1, r7
 8019582:	f7e6 fe91 	bl	80002a8 <__aeabi_dsub>
 8019586:	a336      	add	r3, pc, #216	; (adr r3, 8019660 <__ieee754_pow+0x728>)
 8019588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801958c:	f7e7 f844 	bl	8000618 <__aeabi_dmul>
 8019590:	a335      	add	r3, pc, #212	; (adr r3, 8019668 <__ieee754_pow+0x730>)
 8019592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019596:	4606      	mov	r6, r0
 8019598:	460f      	mov	r7, r1
 801959a:	4620      	mov	r0, r4
 801959c:	4629      	mov	r1, r5
 801959e:	f7e7 f83b 	bl	8000618 <__aeabi_dmul>
 80195a2:	4602      	mov	r2, r0
 80195a4:	460b      	mov	r3, r1
 80195a6:	4630      	mov	r0, r6
 80195a8:	4639      	mov	r1, r7
 80195aa:	f7e6 fe7f 	bl	80002ac <__adddf3>
 80195ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80195b0:	4b38      	ldr	r3, [pc, #224]	; (8019694 <__ieee754_pow+0x75c>)
 80195b2:	4413      	add	r3, r2
 80195b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195b8:	f7e6 fe78 	bl	80002ac <__adddf3>
 80195bc:	4682      	mov	sl, r0
 80195be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80195c0:	468b      	mov	fp, r1
 80195c2:	f7e6 ffbf 	bl	8000544 <__aeabi_i2d>
 80195c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80195c8:	4b33      	ldr	r3, [pc, #204]	; (8019698 <__ieee754_pow+0x760>)
 80195ca:	4413      	add	r3, r2
 80195cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80195d0:	4606      	mov	r6, r0
 80195d2:	460f      	mov	r7, r1
 80195d4:	4652      	mov	r2, sl
 80195d6:	465b      	mov	r3, fp
 80195d8:	ec51 0b18 	vmov	r0, r1, d8
 80195dc:	f7e6 fe66 	bl	80002ac <__adddf3>
 80195e0:	4642      	mov	r2, r8
 80195e2:	464b      	mov	r3, r9
 80195e4:	f7e6 fe62 	bl	80002ac <__adddf3>
 80195e8:	4632      	mov	r2, r6
 80195ea:	463b      	mov	r3, r7
 80195ec:	f7e6 fe5e 	bl	80002ac <__adddf3>
 80195f0:	9c04      	ldr	r4, [sp, #16]
 80195f2:	4632      	mov	r2, r6
 80195f4:	463b      	mov	r3, r7
 80195f6:	4620      	mov	r0, r4
 80195f8:	460d      	mov	r5, r1
 80195fa:	f7e6 fe55 	bl	80002a8 <__aeabi_dsub>
 80195fe:	4642      	mov	r2, r8
 8019600:	464b      	mov	r3, r9
 8019602:	f7e6 fe51 	bl	80002a8 <__aeabi_dsub>
 8019606:	ec53 2b18 	vmov	r2, r3, d8
 801960a:	f7e6 fe4d 	bl	80002a8 <__aeabi_dsub>
 801960e:	4602      	mov	r2, r0
 8019610:	460b      	mov	r3, r1
 8019612:	4650      	mov	r0, sl
 8019614:	4659      	mov	r1, fp
 8019616:	e606      	b.n	8019226 <__ieee754_pow+0x2ee>
 8019618:	2401      	movs	r4, #1
 801961a:	e6a0      	b.n	801935e <__ieee754_pow+0x426>
 801961c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019670 <__ieee754_pow+0x738>
 8019620:	e60d      	b.n	801923e <__ieee754_pow+0x306>
 8019622:	bf00      	nop
 8019624:	f3af 8000 	nop.w
 8019628:	4a454eef 	.word	0x4a454eef
 801962c:	3fca7e28 	.word	0x3fca7e28
 8019630:	93c9db65 	.word	0x93c9db65
 8019634:	3fcd864a 	.word	0x3fcd864a
 8019638:	a91d4101 	.word	0xa91d4101
 801963c:	3fd17460 	.word	0x3fd17460
 8019640:	518f264d 	.word	0x518f264d
 8019644:	3fd55555 	.word	0x3fd55555
 8019648:	db6fabff 	.word	0xdb6fabff
 801964c:	3fdb6db6 	.word	0x3fdb6db6
 8019650:	33333303 	.word	0x33333303
 8019654:	3fe33333 	.word	0x3fe33333
 8019658:	e0000000 	.word	0xe0000000
 801965c:	3feec709 	.word	0x3feec709
 8019660:	dc3a03fd 	.word	0xdc3a03fd
 8019664:	3feec709 	.word	0x3feec709
 8019668:	145b01f5 	.word	0x145b01f5
 801966c:	be3e2fe0 	.word	0xbe3e2fe0
 8019670:	00000000 	.word	0x00000000
 8019674:	3ff00000 	.word	0x3ff00000
 8019678:	7ff00000 	.word	0x7ff00000
 801967c:	43400000 	.word	0x43400000
 8019680:	0003988e 	.word	0x0003988e
 8019684:	000bb679 	.word	0x000bb679
 8019688:	08020f60 	.word	0x08020f60
 801968c:	3ff00000 	.word	0x3ff00000
 8019690:	40080000 	.word	0x40080000
 8019694:	08020f80 	.word	0x08020f80
 8019698:	08020f70 	.word	0x08020f70
 801969c:	a3b5      	add	r3, pc, #724	; (adr r3, 8019974 <__ieee754_pow+0xa3c>)
 801969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196a2:	4640      	mov	r0, r8
 80196a4:	4649      	mov	r1, r9
 80196a6:	f7e6 fe01 	bl	80002ac <__adddf3>
 80196aa:	4622      	mov	r2, r4
 80196ac:	ec41 0b1a 	vmov	d10, r0, r1
 80196b0:	462b      	mov	r3, r5
 80196b2:	4630      	mov	r0, r6
 80196b4:	4639      	mov	r1, r7
 80196b6:	f7e6 fdf7 	bl	80002a8 <__aeabi_dsub>
 80196ba:	4602      	mov	r2, r0
 80196bc:	460b      	mov	r3, r1
 80196be:	ec51 0b1a 	vmov	r0, r1, d10
 80196c2:	f7e7 fa39 	bl	8000b38 <__aeabi_dcmpgt>
 80196c6:	2800      	cmp	r0, #0
 80196c8:	f47f adf8 	bne.w	80192bc <__ieee754_pow+0x384>
 80196cc:	4aa4      	ldr	r2, [pc, #656]	; (8019960 <__ieee754_pow+0xa28>)
 80196ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80196d2:	4293      	cmp	r3, r2
 80196d4:	f340 810b 	ble.w	80198ee <__ieee754_pow+0x9b6>
 80196d8:	151b      	asrs	r3, r3, #20
 80196da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80196de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80196e2:	fa4a f303 	asr.w	r3, sl, r3
 80196e6:	445b      	add	r3, fp
 80196e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80196ec:	4e9d      	ldr	r6, [pc, #628]	; (8019964 <__ieee754_pow+0xa2c>)
 80196ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80196f2:	4116      	asrs	r6, r2
 80196f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80196f8:	2000      	movs	r0, #0
 80196fa:	ea23 0106 	bic.w	r1, r3, r6
 80196fe:	f1c2 0214 	rsb	r2, r2, #20
 8019702:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019706:	fa4a fa02 	asr.w	sl, sl, r2
 801970a:	f1bb 0f00 	cmp.w	fp, #0
 801970e:	4602      	mov	r2, r0
 8019710:	460b      	mov	r3, r1
 8019712:	4620      	mov	r0, r4
 8019714:	4629      	mov	r1, r5
 8019716:	bfb8      	it	lt
 8019718:	f1ca 0a00 	rsblt	sl, sl, #0
 801971c:	f7e6 fdc4 	bl	80002a8 <__aeabi_dsub>
 8019720:	ec41 0b19 	vmov	d9, r0, r1
 8019724:	4642      	mov	r2, r8
 8019726:	464b      	mov	r3, r9
 8019728:	ec51 0b19 	vmov	r0, r1, d9
 801972c:	f7e6 fdbe 	bl	80002ac <__adddf3>
 8019730:	2400      	movs	r4, #0
 8019732:	a379      	add	r3, pc, #484	; (adr r3, 8019918 <__ieee754_pow+0x9e0>)
 8019734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019738:	4620      	mov	r0, r4
 801973a:	460d      	mov	r5, r1
 801973c:	f7e6 ff6c 	bl	8000618 <__aeabi_dmul>
 8019740:	ec53 2b19 	vmov	r2, r3, d9
 8019744:	4606      	mov	r6, r0
 8019746:	460f      	mov	r7, r1
 8019748:	4620      	mov	r0, r4
 801974a:	4629      	mov	r1, r5
 801974c:	f7e6 fdac 	bl	80002a8 <__aeabi_dsub>
 8019750:	4602      	mov	r2, r0
 8019752:	460b      	mov	r3, r1
 8019754:	4640      	mov	r0, r8
 8019756:	4649      	mov	r1, r9
 8019758:	f7e6 fda6 	bl	80002a8 <__aeabi_dsub>
 801975c:	a370      	add	r3, pc, #448	; (adr r3, 8019920 <__ieee754_pow+0x9e8>)
 801975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019762:	f7e6 ff59 	bl	8000618 <__aeabi_dmul>
 8019766:	a370      	add	r3, pc, #448	; (adr r3, 8019928 <__ieee754_pow+0x9f0>)
 8019768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801976c:	4680      	mov	r8, r0
 801976e:	4689      	mov	r9, r1
 8019770:	4620      	mov	r0, r4
 8019772:	4629      	mov	r1, r5
 8019774:	f7e6 ff50 	bl	8000618 <__aeabi_dmul>
 8019778:	4602      	mov	r2, r0
 801977a:	460b      	mov	r3, r1
 801977c:	4640      	mov	r0, r8
 801977e:	4649      	mov	r1, r9
 8019780:	f7e6 fd94 	bl	80002ac <__adddf3>
 8019784:	4604      	mov	r4, r0
 8019786:	460d      	mov	r5, r1
 8019788:	4602      	mov	r2, r0
 801978a:	460b      	mov	r3, r1
 801978c:	4630      	mov	r0, r6
 801978e:	4639      	mov	r1, r7
 8019790:	f7e6 fd8c 	bl	80002ac <__adddf3>
 8019794:	4632      	mov	r2, r6
 8019796:	463b      	mov	r3, r7
 8019798:	4680      	mov	r8, r0
 801979a:	4689      	mov	r9, r1
 801979c:	f7e6 fd84 	bl	80002a8 <__aeabi_dsub>
 80197a0:	4602      	mov	r2, r0
 80197a2:	460b      	mov	r3, r1
 80197a4:	4620      	mov	r0, r4
 80197a6:	4629      	mov	r1, r5
 80197a8:	f7e6 fd7e 	bl	80002a8 <__aeabi_dsub>
 80197ac:	4642      	mov	r2, r8
 80197ae:	4606      	mov	r6, r0
 80197b0:	460f      	mov	r7, r1
 80197b2:	464b      	mov	r3, r9
 80197b4:	4640      	mov	r0, r8
 80197b6:	4649      	mov	r1, r9
 80197b8:	f7e6 ff2e 	bl	8000618 <__aeabi_dmul>
 80197bc:	a35c      	add	r3, pc, #368	; (adr r3, 8019930 <__ieee754_pow+0x9f8>)
 80197be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c2:	4604      	mov	r4, r0
 80197c4:	460d      	mov	r5, r1
 80197c6:	f7e6 ff27 	bl	8000618 <__aeabi_dmul>
 80197ca:	a35b      	add	r3, pc, #364	; (adr r3, 8019938 <__ieee754_pow+0xa00>)
 80197cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197d0:	f7e6 fd6a 	bl	80002a8 <__aeabi_dsub>
 80197d4:	4622      	mov	r2, r4
 80197d6:	462b      	mov	r3, r5
 80197d8:	f7e6 ff1e 	bl	8000618 <__aeabi_dmul>
 80197dc:	a358      	add	r3, pc, #352	; (adr r3, 8019940 <__ieee754_pow+0xa08>)
 80197de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e2:	f7e6 fd63 	bl	80002ac <__adddf3>
 80197e6:	4622      	mov	r2, r4
 80197e8:	462b      	mov	r3, r5
 80197ea:	f7e6 ff15 	bl	8000618 <__aeabi_dmul>
 80197ee:	a356      	add	r3, pc, #344	; (adr r3, 8019948 <__ieee754_pow+0xa10>)
 80197f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197f4:	f7e6 fd58 	bl	80002a8 <__aeabi_dsub>
 80197f8:	4622      	mov	r2, r4
 80197fa:	462b      	mov	r3, r5
 80197fc:	f7e6 ff0c 	bl	8000618 <__aeabi_dmul>
 8019800:	a353      	add	r3, pc, #332	; (adr r3, 8019950 <__ieee754_pow+0xa18>)
 8019802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019806:	f7e6 fd51 	bl	80002ac <__adddf3>
 801980a:	4622      	mov	r2, r4
 801980c:	462b      	mov	r3, r5
 801980e:	f7e6 ff03 	bl	8000618 <__aeabi_dmul>
 8019812:	4602      	mov	r2, r0
 8019814:	460b      	mov	r3, r1
 8019816:	4640      	mov	r0, r8
 8019818:	4649      	mov	r1, r9
 801981a:	f7e6 fd45 	bl	80002a8 <__aeabi_dsub>
 801981e:	4604      	mov	r4, r0
 8019820:	460d      	mov	r5, r1
 8019822:	4602      	mov	r2, r0
 8019824:	460b      	mov	r3, r1
 8019826:	4640      	mov	r0, r8
 8019828:	4649      	mov	r1, r9
 801982a:	f7e6 fef5 	bl	8000618 <__aeabi_dmul>
 801982e:	2200      	movs	r2, #0
 8019830:	ec41 0b19 	vmov	d9, r0, r1
 8019834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019838:	4620      	mov	r0, r4
 801983a:	4629      	mov	r1, r5
 801983c:	f7e6 fd34 	bl	80002a8 <__aeabi_dsub>
 8019840:	4602      	mov	r2, r0
 8019842:	460b      	mov	r3, r1
 8019844:	ec51 0b19 	vmov	r0, r1, d9
 8019848:	f7e7 f810 	bl	800086c <__aeabi_ddiv>
 801984c:	4632      	mov	r2, r6
 801984e:	4604      	mov	r4, r0
 8019850:	460d      	mov	r5, r1
 8019852:	463b      	mov	r3, r7
 8019854:	4640      	mov	r0, r8
 8019856:	4649      	mov	r1, r9
 8019858:	f7e6 fede 	bl	8000618 <__aeabi_dmul>
 801985c:	4632      	mov	r2, r6
 801985e:	463b      	mov	r3, r7
 8019860:	f7e6 fd24 	bl	80002ac <__adddf3>
 8019864:	4602      	mov	r2, r0
 8019866:	460b      	mov	r3, r1
 8019868:	4620      	mov	r0, r4
 801986a:	4629      	mov	r1, r5
 801986c:	f7e6 fd1c 	bl	80002a8 <__aeabi_dsub>
 8019870:	4642      	mov	r2, r8
 8019872:	464b      	mov	r3, r9
 8019874:	f7e6 fd18 	bl	80002a8 <__aeabi_dsub>
 8019878:	460b      	mov	r3, r1
 801987a:	4602      	mov	r2, r0
 801987c:	493a      	ldr	r1, [pc, #232]	; (8019968 <__ieee754_pow+0xa30>)
 801987e:	2000      	movs	r0, #0
 8019880:	f7e6 fd12 	bl	80002a8 <__aeabi_dsub>
 8019884:	e9cd 0100 	strd	r0, r1, [sp]
 8019888:	9b01      	ldr	r3, [sp, #4]
 801988a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801988e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019892:	da2f      	bge.n	80198f4 <__ieee754_pow+0x9bc>
 8019894:	4650      	mov	r0, sl
 8019896:	ed9d 0b00 	vldr	d0, [sp]
 801989a:	f000 f9cd 	bl	8019c38 <scalbn>
 801989e:	ec51 0b10 	vmov	r0, r1, d0
 80198a2:	ec53 2b18 	vmov	r2, r3, d8
 80198a6:	f7ff bbe0 	b.w	801906a <__ieee754_pow+0x132>
 80198aa:	4b30      	ldr	r3, [pc, #192]	; (801996c <__ieee754_pow+0xa34>)
 80198ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80198b0:	429e      	cmp	r6, r3
 80198b2:	f77f af0b 	ble.w	80196cc <__ieee754_pow+0x794>
 80198b6:	4b2e      	ldr	r3, [pc, #184]	; (8019970 <__ieee754_pow+0xa38>)
 80198b8:	440b      	add	r3, r1
 80198ba:	4303      	orrs	r3, r0
 80198bc:	d00b      	beq.n	80198d6 <__ieee754_pow+0x99e>
 80198be:	a326      	add	r3, pc, #152	; (adr r3, 8019958 <__ieee754_pow+0xa20>)
 80198c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198c4:	ec51 0b18 	vmov	r0, r1, d8
 80198c8:	f7e6 fea6 	bl	8000618 <__aeabi_dmul>
 80198cc:	a322      	add	r3, pc, #136	; (adr r3, 8019958 <__ieee754_pow+0xa20>)
 80198ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198d2:	f7ff bbca 	b.w	801906a <__ieee754_pow+0x132>
 80198d6:	4622      	mov	r2, r4
 80198d8:	462b      	mov	r3, r5
 80198da:	f7e6 fce5 	bl	80002a8 <__aeabi_dsub>
 80198de:	4642      	mov	r2, r8
 80198e0:	464b      	mov	r3, r9
 80198e2:	f7e7 f91f 	bl	8000b24 <__aeabi_dcmpge>
 80198e6:	2800      	cmp	r0, #0
 80198e8:	f43f aef0 	beq.w	80196cc <__ieee754_pow+0x794>
 80198ec:	e7e7      	b.n	80198be <__ieee754_pow+0x986>
 80198ee:	f04f 0a00 	mov.w	sl, #0
 80198f2:	e717      	b.n	8019724 <__ieee754_pow+0x7ec>
 80198f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80198f8:	4619      	mov	r1, r3
 80198fa:	e7d2      	b.n	80198a2 <__ieee754_pow+0x96a>
 80198fc:	491a      	ldr	r1, [pc, #104]	; (8019968 <__ieee754_pow+0xa30>)
 80198fe:	2000      	movs	r0, #0
 8019900:	f7ff bb9e 	b.w	8019040 <__ieee754_pow+0x108>
 8019904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019908:	f7ff bb9a 	b.w	8019040 <__ieee754_pow+0x108>
 801990c:	9000      	str	r0, [sp, #0]
 801990e:	f7ff bb76 	b.w	8018ffe <__ieee754_pow+0xc6>
 8019912:	2100      	movs	r1, #0
 8019914:	f7ff bb60 	b.w	8018fd8 <__ieee754_pow+0xa0>
 8019918:	00000000 	.word	0x00000000
 801991c:	3fe62e43 	.word	0x3fe62e43
 8019920:	fefa39ef 	.word	0xfefa39ef
 8019924:	3fe62e42 	.word	0x3fe62e42
 8019928:	0ca86c39 	.word	0x0ca86c39
 801992c:	be205c61 	.word	0xbe205c61
 8019930:	72bea4d0 	.word	0x72bea4d0
 8019934:	3e663769 	.word	0x3e663769
 8019938:	c5d26bf1 	.word	0xc5d26bf1
 801993c:	3ebbbd41 	.word	0x3ebbbd41
 8019940:	af25de2c 	.word	0xaf25de2c
 8019944:	3f11566a 	.word	0x3f11566a
 8019948:	16bebd93 	.word	0x16bebd93
 801994c:	3f66c16c 	.word	0x3f66c16c
 8019950:	5555553e 	.word	0x5555553e
 8019954:	3fc55555 	.word	0x3fc55555
 8019958:	c2f8f359 	.word	0xc2f8f359
 801995c:	01a56e1f 	.word	0x01a56e1f
 8019960:	3fe00000 	.word	0x3fe00000
 8019964:	000fffff 	.word	0x000fffff
 8019968:	3ff00000 	.word	0x3ff00000
 801996c:	4090cbff 	.word	0x4090cbff
 8019970:	3f6f3400 	.word	0x3f6f3400
 8019974:	652b82fe 	.word	0x652b82fe
 8019978:	3c971547 	.word	0x3c971547

0801997c <__ieee754_sqrt>:
 801997c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019980:	ec55 4b10 	vmov	r4, r5, d0
 8019984:	4e56      	ldr	r6, [pc, #344]	; (8019ae0 <__ieee754_sqrt+0x164>)
 8019986:	43ae      	bics	r6, r5
 8019988:	ee10 0a10 	vmov	r0, s0
 801998c:	ee10 3a10 	vmov	r3, s0
 8019990:	4629      	mov	r1, r5
 8019992:	462a      	mov	r2, r5
 8019994:	d110      	bne.n	80199b8 <__ieee754_sqrt+0x3c>
 8019996:	ee10 2a10 	vmov	r2, s0
 801999a:	462b      	mov	r3, r5
 801999c:	f7e6 fe3c 	bl	8000618 <__aeabi_dmul>
 80199a0:	4602      	mov	r2, r0
 80199a2:	460b      	mov	r3, r1
 80199a4:	4620      	mov	r0, r4
 80199a6:	4629      	mov	r1, r5
 80199a8:	f7e6 fc80 	bl	80002ac <__adddf3>
 80199ac:	4604      	mov	r4, r0
 80199ae:	460d      	mov	r5, r1
 80199b0:	ec45 4b10 	vmov	d0, r4, r5
 80199b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199b8:	2d00      	cmp	r5, #0
 80199ba:	dc10      	bgt.n	80199de <__ieee754_sqrt+0x62>
 80199bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80199c0:	4330      	orrs	r0, r6
 80199c2:	d0f5      	beq.n	80199b0 <__ieee754_sqrt+0x34>
 80199c4:	b15d      	cbz	r5, 80199de <__ieee754_sqrt+0x62>
 80199c6:	ee10 2a10 	vmov	r2, s0
 80199ca:	462b      	mov	r3, r5
 80199cc:	ee10 0a10 	vmov	r0, s0
 80199d0:	f7e6 fc6a 	bl	80002a8 <__aeabi_dsub>
 80199d4:	4602      	mov	r2, r0
 80199d6:	460b      	mov	r3, r1
 80199d8:	f7e6 ff48 	bl	800086c <__aeabi_ddiv>
 80199dc:	e7e6      	b.n	80199ac <__ieee754_sqrt+0x30>
 80199de:	1509      	asrs	r1, r1, #20
 80199e0:	d076      	beq.n	8019ad0 <__ieee754_sqrt+0x154>
 80199e2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80199e6:	07ce      	lsls	r6, r1, #31
 80199e8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80199ec:	bf5e      	ittt	pl
 80199ee:	0fda      	lsrpl	r2, r3, #31
 80199f0:	005b      	lslpl	r3, r3, #1
 80199f2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80199f6:	0fda      	lsrs	r2, r3, #31
 80199f8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80199fc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019a00:	2000      	movs	r0, #0
 8019a02:	106d      	asrs	r5, r5, #1
 8019a04:	005b      	lsls	r3, r3, #1
 8019a06:	f04f 0e16 	mov.w	lr, #22
 8019a0a:	4684      	mov	ip, r0
 8019a0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019a10:	eb0c 0401 	add.w	r4, ip, r1
 8019a14:	4294      	cmp	r4, r2
 8019a16:	bfde      	ittt	le
 8019a18:	1b12      	suble	r2, r2, r4
 8019a1a:	eb04 0c01 	addle.w	ip, r4, r1
 8019a1e:	1840      	addle	r0, r0, r1
 8019a20:	0052      	lsls	r2, r2, #1
 8019a22:	f1be 0e01 	subs.w	lr, lr, #1
 8019a26:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019a2a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019a2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019a32:	d1ed      	bne.n	8019a10 <__ieee754_sqrt+0x94>
 8019a34:	4671      	mov	r1, lr
 8019a36:	2720      	movs	r7, #32
 8019a38:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019a3c:	4562      	cmp	r2, ip
 8019a3e:	eb04 060e 	add.w	r6, r4, lr
 8019a42:	dc02      	bgt.n	8019a4a <__ieee754_sqrt+0xce>
 8019a44:	d113      	bne.n	8019a6e <__ieee754_sqrt+0xf2>
 8019a46:	429e      	cmp	r6, r3
 8019a48:	d811      	bhi.n	8019a6e <__ieee754_sqrt+0xf2>
 8019a4a:	2e00      	cmp	r6, #0
 8019a4c:	eb06 0e04 	add.w	lr, r6, r4
 8019a50:	da43      	bge.n	8019ada <__ieee754_sqrt+0x15e>
 8019a52:	f1be 0f00 	cmp.w	lr, #0
 8019a56:	db40      	blt.n	8019ada <__ieee754_sqrt+0x15e>
 8019a58:	f10c 0801 	add.w	r8, ip, #1
 8019a5c:	eba2 020c 	sub.w	r2, r2, ip
 8019a60:	429e      	cmp	r6, r3
 8019a62:	bf88      	it	hi
 8019a64:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019a68:	1b9b      	subs	r3, r3, r6
 8019a6a:	4421      	add	r1, r4
 8019a6c:	46c4      	mov	ip, r8
 8019a6e:	0052      	lsls	r2, r2, #1
 8019a70:	3f01      	subs	r7, #1
 8019a72:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019a76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019a7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019a7e:	d1dd      	bne.n	8019a3c <__ieee754_sqrt+0xc0>
 8019a80:	4313      	orrs	r3, r2
 8019a82:	d006      	beq.n	8019a92 <__ieee754_sqrt+0x116>
 8019a84:	1c4c      	adds	r4, r1, #1
 8019a86:	bf13      	iteet	ne
 8019a88:	3101      	addne	r1, #1
 8019a8a:	3001      	addeq	r0, #1
 8019a8c:	4639      	moveq	r1, r7
 8019a8e:	f021 0101 	bicne.w	r1, r1, #1
 8019a92:	1043      	asrs	r3, r0, #1
 8019a94:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019a98:	0849      	lsrs	r1, r1, #1
 8019a9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019a9e:	07c2      	lsls	r2, r0, #31
 8019aa0:	bf48      	it	mi
 8019aa2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8019aa6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8019aaa:	460c      	mov	r4, r1
 8019aac:	463d      	mov	r5, r7
 8019aae:	e77f      	b.n	80199b0 <__ieee754_sqrt+0x34>
 8019ab0:	0ada      	lsrs	r2, r3, #11
 8019ab2:	3815      	subs	r0, #21
 8019ab4:	055b      	lsls	r3, r3, #21
 8019ab6:	2a00      	cmp	r2, #0
 8019ab8:	d0fa      	beq.n	8019ab0 <__ieee754_sqrt+0x134>
 8019aba:	02d7      	lsls	r7, r2, #11
 8019abc:	d50a      	bpl.n	8019ad4 <__ieee754_sqrt+0x158>
 8019abe:	f1c1 0420 	rsb	r4, r1, #32
 8019ac2:	fa23 f404 	lsr.w	r4, r3, r4
 8019ac6:	1e4d      	subs	r5, r1, #1
 8019ac8:	408b      	lsls	r3, r1
 8019aca:	4322      	orrs	r2, r4
 8019acc:	1b41      	subs	r1, r0, r5
 8019ace:	e788      	b.n	80199e2 <__ieee754_sqrt+0x66>
 8019ad0:	4608      	mov	r0, r1
 8019ad2:	e7f0      	b.n	8019ab6 <__ieee754_sqrt+0x13a>
 8019ad4:	0052      	lsls	r2, r2, #1
 8019ad6:	3101      	adds	r1, #1
 8019ad8:	e7ef      	b.n	8019aba <__ieee754_sqrt+0x13e>
 8019ada:	46e0      	mov	r8, ip
 8019adc:	e7be      	b.n	8019a5c <__ieee754_sqrt+0xe0>
 8019ade:	bf00      	nop
 8019ae0:	7ff00000 	.word	0x7ff00000

08019ae4 <fabs>:
 8019ae4:	ec51 0b10 	vmov	r0, r1, d0
 8019ae8:	ee10 2a10 	vmov	r2, s0
 8019aec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019af0:	ec43 2b10 	vmov	d0, r2, r3
 8019af4:	4770      	bx	lr

08019af6 <finite>:
 8019af6:	b082      	sub	sp, #8
 8019af8:	ed8d 0b00 	vstr	d0, [sp]
 8019afc:	9801      	ldr	r0, [sp, #4]
 8019afe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019b02:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019b06:	0fc0      	lsrs	r0, r0, #31
 8019b08:	b002      	add	sp, #8
 8019b0a:	4770      	bx	lr
 8019b0c:	0000      	movs	r0, r0
	...

08019b10 <nan>:
 8019b10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019b18 <nan+0x8>
 8019b14:	4770      	bx	lr
 8019b16:	bf00      	nop
 8019b18:	00000000 	.word	0x00000000
 8019b1c:	7ff80000 	.word	0x7ff80000

08019b20 <rint>:
 8019b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019b22:	ec51 0b10 	vmov	r0, r1, d0
 8019b26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019b2a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8019b2e:	2e13      	cmp	r6, #19
 8019b30:	ee10 4a10 	vmov	r4, s0
 8019b34:	460b      	mov	r3, r1
 8019b36:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8019b3a:	dc58      	bgt.n	8019bee <rint+0xce>
 8019b3c:	2e00      	cmp	r6, #0
 8019b3e:	da2b      	bge.n	8019b98 <rint+0x78>
 8019b40:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019b44:	4302      	orrs	r2, r0
 8019b46:	d023      	beq.n	8019b90 <rint+0x70>
 8019b48:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8019b4c:	4302      	orrs	r2, r0
 8019b4e:	4254      	negs	r4, r2
 8019b50:	4314      	orrs	r4, r2
 8019b52:	0c4b      	lsrs	r3, r1, #17
 8019b54:	0b24      	lsrs	r4, r4, #12
 8019b56:	045b      	lsls	r3, r3, #17
 8019b58:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8019b5c:	ea44 0103 	orr.w	r1, r4, r3
 8019b60:	4b32      	ldr	r3, [pc, #200]	; (8019c2c <rint+0x10c>)
 8019b62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019b66:	e9d3 6700 	ldrd	r6, r7, [r3]
 8019b6a:	4602      	mov	r2, r0
 8019b6c:	460b      	mov	r3, r1
 8019b6e:	4630      	mov	r0, r6
 8019b70:	4639      	mov	r1, r7
 8019b72:	f7e6 fb9b 	bl	80002ac <__adddf3>
 8019b76:	e9cd 0100 	strd	r0, r1, [sp]
 8019b7a:	463b      	mov	r3, r7
 8019b7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b80:	4632      	mov	r2, r6
 8019b82:	f7e6 fb91 	bl	80002a8 <__aeabi_dsub>
 8019b86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019b8a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8019b8e:	4639      	mov	r1, r7
 8019b90:	ec41 0b10 	vmov	d0, r0, r1
 8019b94:	b003      	add	sp, #12
 8019b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b98:	4a25      	ldr	r2, [pc, #148]	; (8019c30 <rint+0x110>)
 8019b9a:	4132      	asrs	r2, r6
 8019b9c:	ea01 0702 	and.w	r7, r1, r2
 8019ba0:	4307      	orrs	r7, r0
 8019ba2:	d0f5      	beq.n	8019b90 <rint+0x70>
 8019ba4:	0851      	lsrs	r1, r2, #1
 8019ba6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8019baa:	4314      	orrs	r4, r2
 8019bac:	d00c      	beq.n	8019bc8 <rint+0xa8>
 8019bae:	ea23 0201 	bic.w	r2, r3, r1
 8019bb2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019bb6:	2e13      	cmp	r6, #19
 8019bb8:	fa43 f606 	asr.w	r6, r3, r6
 8019bbc:	bf0c      	ite	eq
 8019bbe:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019bc2:	2400      	movne	r4, #0
 8019bc4:	ea42 0306 	orr.w	r3, r2, r6
 8019bc8:	4918      	ldr	r1, [pc, #96]	; (8019c2c <rint+0x10c>)
 8019bca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8019bce:	4622      	mov	r2, r4
 8019bd0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019bd4:	4620      	mov	r0, r4
 8019bd6:	4629      	mov	r1, r5
 8019bd8:	f7e6 fb68 	bl	80002ac <__adddf3>
 8019bdc:	e9cd 0100 	strd	r0, r1, [sp]
 8019be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019be4:	4622      	mov	r2, r4
 8019be6:	462b      	mov	r3, r5
 8019be8:	f7e6 fb5e 	bl	80002a8 <__aeabi_dsub>
 8019bec:	e7d0      	b.n	8019b90 <rint+0x70>
 8019bee:	2e33      	cmp	r6, #51	; 0x33
 8019bf0:	dd07      	ble.n	8019c02 <rint+0xe2>
 8019bf2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019bf6:	d1cb      	bne.n	8019b90 <rint+0x70>
 8019bf8:	ee10 2a10 	vmov	r2, s0
 8019bfc:	f7e6 fb56 	bl	80002ac <__adddf3>
 8019c00:	e7c6      	b.n	8019b90 <rint+0x70>
 8019c02:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8019c06:	f04f 36ff 	mov.w	r6, #4294967295
 8019c0a:	40d6      	lsrs	r6, r2
 8019c0c:	4230      	tst	r0, r6
 8019c0e:	d0bf      	beq.n	8019b90 <rint+0x70>
 8019c10:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8019c14:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8019c18:	bf1f      	itttt	ne
 8019c1a:	ea24 0101 	bicne.w	r1, r4, r1
 8019c1e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8019c22:	fa44 f202 	asrne.w	r2, r4, r2
 8019c26:	ea41 0402 	orrne.w	r4, r1, r2
 8019c2a:	e7cd      	b.n	8019bc8 <rint+0xa8>
 8019c2c:	08020f90 	.word	0x08020f90
 8019c30:	000fffff 	.word	0x000fffff
 8019c34:	00000000 	.word	0x00000000

08019c38 <scalbn>:
 8019c38:	b570      	push	{r4, r5, r6, lr}
 8019c3a:	ec55 4b10 	vmov	r4, r5, d0
 8019c3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019c42:	4606      	mov	r6, r0
 8019c44:	462b      	mov	r3, r5
 8019c46:	b99a      	cbnz	r2, 8019c70 <scalbn+0x38>
 8019c48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019c4c:	4323      	orrs	r3, r4
 8019c4e:	d036      	beq.n	8019cbe <scalbn+0x86>
 8019c50:	4b39      	ldr	r3, [pc, #228]	; (8019d38 <scalbn+0x100>)
 8019c52:	4629      	mov	r1, r5
 8019c54:	ee10 0a10 	vmov	r0, s0
 8019c58:	2200      	movs	r2, #0
 8019c5a:	f7e6 fcdd 	bl	8000618 <__aeabi_dmul>
 8019c5e:	4b37      	ldr	r3, [pc, #220]	; (8019d3c <scalbn+0x104>)
 8019c60:	429e      	cmp	r6, r3
 8019c62:	4604      	mov	r4, r0
 8019c64:	460d      	mov	r5, r1
 8019c66:	da10      	bge.n	8019c8a <scalbn+0x52>
 8019c68:	a32b      	add	r3, pc, #172	; (adr r3, 8019d18 <scalbn+0xe0>)
 8019c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c6e:	e03a      	b.n	8019ce6 <scalbn+0xae>
 8019c70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019c74:	428a      	cmp	r2, r1
 8019c76:	d10c      	bne.n	8019c92 <scalbn+0x5a>
 8019c78:	ee10 2a10 	vmov	r2, s0
 8019c7c:	4620      	mov	r0, r4
 8019c7e:	4629      	mov	r1, r5
 8019c80:	f7e6 fb14 	bl	80002ac <__adddf3>
 8019c84:	4604      	mov	r4, r0
 8019c86:	460d      	mov	r5, r1
 8019c88:	e019      	b.n	8019cbe <scalbn+0x86>
 8019c8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019c8e:	460b      	mov	r3, r1
 8019c90:	3a36      	subs	r2, #54	; 0x36
 8019c92:	4432      	add	r2, r6
 8019c94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019c98:	428a      	cmp	r2, r1
 8019c9a:	dd08      	ble.n	8019cae <scalbn+0x76>
 8019c9c:	2d00      	cmp	r5, #0
 8019c9e:	a120      	add	r1, pc, #128	; (adr r1, 8019d20 <scalbn+0xe8>)
 8019ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ca4:	da1c      	bge.n	8019ce0 <scalbn+0xa8>
 8019ca6:	a120      	add	r1, pc, #128	; (adr r1, 8019d28 <scalbn+0xf0>)
 8019ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cac:	e018      	b.n	8019ce0 <scalbn+0xa8>
 8019cae:	2a00      	cmp	r2, #0
 8019cb0:	dd08      	ble.n	8019cc4 <scalbn+0x8c>
 8019cb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019cb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019cba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019cbe:	ec45 4b10 	vmov	d0, r4, r5
 8019cc2:	bd70      	pop	{r4, r5, r6, pc}
 8019cc4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019cc8:	da19      	bge.n	8019cfe <scalbn+0xc6>
 8019cca:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019cce:	429e      	cmp	r6, r3
 8019cd0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019cd4:	dd0a      	ble.n	8019cec <scalbn+0xb4>
 8019cd6:	a112      	add	r1, pc, #72	; (adr r1, 8019d20 <scalbn+0xe8>)
 8019cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d1e2      	bne.n	8019ca6 <scalbn+0x6e>
 8019ce0:	a30f      	add	r3, pc, #60	; (adr r3, 8019d20 <scalbn+0xe8>)
 8019ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ce6:	f7e6 fc97 	bl	8000618 <__aeabi_dmul>
 8019cea:	e7cb      	b.n	8019c84 <scalbn+0x4c>
 8019cec:	a10a      	add	r1, pc, #40	; (adr r1, 8019d18 <scalbn+0xe0>)
 8019cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d0b8      	beq.n	8019c68 <scalbn+0x30>
 8019cf6:	a10e      	add	r1, pc, #56	; (adr r1, 8019d30 <scalbn+0xf8>)
 8019cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cfc:	e7b4      	b.n	8019c68 <scalbn+0x30>
 8019cfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019d02:	3236      	adds	r2, #54	; 0x36
 8019d04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019d08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019d0c:	4620      	mov	r0, r4
 8019d0e:	4b0c      	ldr	r3, [pc, #48]	; (8019d40 <scalbn+0x108>)
 8019d10:	2200      	movs	r2, #0
 8019d12:	e7e8      	b.n	8019ce6 <scalbn+0xae>
 8019d14:	f3af 8000 	nop.w
 8019d18:	c2f8f359 	.word	0xc2f8f359
 8019d1c:	01a56e1f 	.word	0x01a56e1f
 8019d20:	8800759c 	.word	0x8800759c
 8019d24:	7e37e43c 	.word	0x7e37e43c
 8019d28:	8800759c 	.word	0x8800759c
 8019d2c:	fe37e43c 	.word	0xfe37e43c
 8019d30:	c2f8f359 	.word	0xc2f8f359
 8019d34:	81a56e1f 	.word	0x81a56e1f
 8019d38:	43500000 	.word	0x43500000
 8019d3c:	ffff3cb0 	.word	0xffff3cb0
 8019d40:	3c900000 	.word	0x3c900000

08019d44 <abort>:
 8019d44:	b508      	push	{r3, lr}
 8019d46:	2006      	movs	r0, #6
 8019d48:	f001 f9ba 	bl	801b0c0 <raise>
 8019d4c:	2001      	movs	r0, #1
 8019d4e:	f7e9 f9fd 	bl	800314c <_exit>
	...

08019d54 <__errno>:
 8019d54:	4b01      	ldr	r3, [pc, #4]	; (8019d5c <__errno+0x8>)
 8019d56:	6818      	ldr	r0, [r3, #0]
 8019d58:	4770      	bx	lr
 8019d5a:	bf00      	nop
 8019d5c:	20000200 	.word	0x20000200

08019d60 <std>:
 8019d60:	2300      	movs	r3, #0
 8019d62:	b510      	push	{r4, lr}
 8019d64:	4604      	mov	r4, r0
 8019d66:	e9c0 3300 	strd	r3, r3, [r0]
 8019d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019d6e:	6083      	str	r3, [r0, #8]
 8019d70:	8181      	strh	r1, [r0, #12]
 8019d72:	6643      	str	r3, [r0, #100]	; 0x64
 8019d74:	81c2      	strh	r2, [r0, #14]
 8019d76:	6183      	str	r3, [r0, #24]
 8019d78:	4619      	mov	r1, r3
 8019d7a:	2208      	movs	r2, #8
 8019d7c:	305c      	adds	r0, #92	; 0x5c
 8019d7e:	f000 f93d 	bl	8019ffc <memset>
 8019d82:	4b05      	ldr	r3, [pc, #20]	; (8019d98 <std+0x38>)
 8019d84:	6263      	str	r3, [r4, #36]	; 0x24
 8019d86:	4b05      	ldr	r3, [pc, #20]	; (8019d9c <std+0x3c>)
 8019d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8019d8a:	4b05      	ldr	r3, [pc, #20]	; (8019da0 <std+0x40>)
 8019d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019d8e:	4b05      	ldr	r3, [pc, #20]	; (8019da4 <std+0x44>)
 8019d90:	6224      	str	r4, [r4, #32]
 8019d92:	6323      	str	r3, [r4, #48]	; 0x30
 8019d94:	bd10      	pop	{r4, pc}
 8019d96:	bf00      	nop
 8019d98:	0801b191 	.word	0x0801b191
 8019d9c:	0801b1b7 	.word	0x0801b1b7
 8019da0:	0801b1ef 	.word	0x0801b1ef
 8019da4:	0801b213 	.word	0x0801b213

08019da8 <_cleanup_r>:
 8019da8:	4901      	ldr	r1, [pc, #4]	; (8019db0 <_cleanup_r+0x8>)
 8019daa:	f000 b8af 	b.w	8019f0c <_fwalk_reent>
 8019dae:	bf00      	nop
 8019db0:	0801d135 	.word	0x0801d135

08019db4 <__sfmoreglue>:
 8019db4:	b570      	push	{r4, r5, r6, lr}
 8019db6:	1e4a      	subs	r2, r1, #1
 8019db8:	2568      	movs	r5, #104	; 0x68
 8019dba:	4355      	muls	r5, r2
 8019dbc:	460e      	mov	r6, r1
 8019dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019dc2:	f000 f973 	bl	801a0ac <_malloc_r>
 8019dc6:	4604      	mov	r4, r0
 8019dc8:	b140      	cbz	r0, 8019ddc <__sfmoreglue+0x28>
 8019dca:	2100      	movs	r1, #0
 8019dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8019dd0:	300c      	adds	r0, #12
 8019dd2:	60a0      	str	r0, [r4, #8]
 8019dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019dd8:	f000 f910 	bl	8019ffc <memset>
 8019ddc:	4620      	mov	r0, r4
 8019dde:	bd70      	pop	{r4, r5, r6, pc}

08019de0 <__sfp_lock_acquire>:
 8019de0:	4801      	ldr	r0, [pc, #4]	; (8019de8 <__sfp_lock_acquire+0x8>)
 8019de2:	f000 b8d8 	b.w	8019f96 <__retarget_lock_acquire_recursive>
 8019de6:	bf00      	nop
 8019de8:	20008e04 	.word	0x20008e04

08019dec <__sfp_lock_release>:
 8019dec:	4801      	ldr	r0, [pc, #4]	; (8019df4 <__sfp_lock_release+0x8>)
 8019dee:	f000 b8d3 	b.w	8019f98 <__retarget_lock_release_recursive>
 8019df2:	bf00      	nop
 8019df4:	20008e04 	.word	0x20008e04

08019df8 <__sinit_lock_acquire>:
 8019df8:	4801      	ldr	r0, [pc, #4]	; (8019e00 <__sinit_lock_acquire+0x8>)
 8019dfa:	f000 b8cc 	b.w	8019f96 <__retarget_lock_acquire_recursive>
 8019dfe:	bf00      	nop
 8019e00:	20008dff 	.word	0x20008dff

08019e04 <__sinit_lock_release>:
 8019e04:	4801      	ldr	r0, [pc, #4]	; (8019e0c <__sinit_lock_release+0x8>)
 8019e06:	f000 b8c7 	b.w	8019f98 <__retarget_lock_release_recursive>
 8019e0a:	bf00      	nop
 8019e0c:	20008dff 	.word	0x20008dff

08019e10 <__sinit>:
 8019e10:	b510      	push	{r4, lr}
 8019e12:	4604      	mov	r4, r0
 8019e14:	f7ff fff0 	bl	8019df8 <__sinit_lock_acquire>
 8019e18:	69a3      	ldr	r3, [r4, #24]
 8019e1a:	b11b      	cbz	r3, 8019e24 <__sinit+0x14>
 8019e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e20:	f7ff bff0 	b.w	8019e04 <__sinit_lock_release>
 8019e24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019e28:	6523      	str	r3, [r4, #80]	; 0x50
 8019e2a:	4b13      	ldr	r3, [pc, #76]	; (8019e78 <__sinit+0x68>)
 8019e2c:	4a13      	ldr	r2, [pc, #76]	; (8019e7c <__sinit+0x6c>)
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	62a2      	str	r2, [r4, #40]	; 0x28
 8019e32:	42a3      	cmp	r3, r4
 8019e34:	bf04      	itt	eq
 8019e36:	2301      	moveq	r3, #1
 8019e38:	61a3      	streq	r3, [r4, #24]
 8019e3a:	4620      	mov	r0, r4
 8019e3c:	f000 f820 	bl	8019e80 <__sfp>
 8019e40:	6060      	str	r0, [r4, #4]
 8019e42:	4620      	mov	r0, r4
 8019e44:	f000 f81c 	bl	8019e80 <__sfp>
 8019e48:	60a0      	str	r0, [r4, #8]
 8019e4a:	4620      	mov	r0, r4
 8019e4c:	f000 f818 	bl	8019e80 <__sfp>
 8019e50:	2200      	movs	r2, #0
 8019e52:	60e0      	str	r0, [r4, #12]
 8019e54:	2104      	movs	r1, #4
 8019e56:	6860      	ldr	r0, [r4, #4]
 8019e58:	f7ff ff82 	bl	8019d60 <std>
 8019e5c:	68a0      	ldr	r0, [r4, #8]
 8019e5e:	2201      	movs	r2, #1
 8019e60:	2109      	movs	r1, #9
 8019e62:	f7ff ff7d 	bl	8019d60 <std>
 8019e66:	68e0      	ldr	r0, [r4, #12]
 8019e68:	2202      	movs	r2, #2
 8019e6a:	2112      	movs	r1, #18
 8019e6c:	f7ff ff78 	bl	8019d60 <std>
 8019e70:	2301      	movs	r3, #1
 8019e72:	61a3      	str	r3, [r4, #24]
 8019e74:	e7d2      	b.n	8019e1c <__sinit+0xc>
 8019e76:	bf00      	nop
 8019e78:	08021104 	.word	0x08021104
 8019e7c:	08019da9 	.word	0x08019da9

08019e80 <__sfp>:
 8019e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e82:	4607      	mov	r7, r0
 8019e84:	f7ff ffac 	bl	8019de0 <__sfp_lock_acquire>
 8019e88:	4b1e      	ldr	r3, [pc, #120]	; (8019f04 <__sfp+0x84>)
 8019e8a:	681e      	ldr	r6, [r3, #0]
 8019e8c:	69b3      	ldr	r3, [r6, #24]
 8019e8e:	b913      	cbnz	r3, 8019e96 <__sfp+0x16>
 8019e90:	4630      	mov	r0, r6
 8019e92:	f7ff ffbd 	bl	8019e10 <__sinit>
 8019e96:	3648      	adds	r6, #72	; 0x48
 8019e98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019e9c:	3b01      	subs	r3, #1
 8019e9e:	d503      	bpl.n	8019ea8 <__sfp+0x28>
 8019ea0:	6833      	ldr	r3, [r6, #0]
 8019ea2:	b30b      	cbz	r3, 8019ee8 <__sfp+0x68>
 8019ea4:	6836      	ldr	r6, [r6, #0]
 8019ea6:	e7f7      	b.n	8019e98 <__sfp+0x18>
 8019ea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019eac:	b9d5      	cbnz	r5, 8019ee4 <__sfp+0x64>
 8019eae:	4b16      	ldr	r3, [pc, #88]	; (8019f08 <__sfp+0x88>)
 8019eb0:	60e3      	str	r3, [r4, #12]
 8019eb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019eb6:	6665      	str	r5, [r4, #100]	; 0x64
 8019eb8:	f000 f86c 	bl	8019f94 <__retarget_lock_init_recursive>
 8019ebc:	f7ff ff96 	bl	8019dec <__sfp_lock_release>
 8019ec0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019ec4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019ec8:	6025      	str	r5, [r4, #0]
 8019eca:	61a5      	str	r5, [r4, #24]
 8019ecc:	2208      	movs	r2, #8
 8019ece:	4629      	mov	r1, r5
 8019ed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019ed4:	f000 f892 	bl	8019ffc <memset>
 8019ed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019edc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ee4:	3468      	adds	r4, #104	; 0x68
 8019ee6:	e7d9      	b.n	8019e9c <__sfp+0x1c>
 8019ee8:	2104      	movs	r1, #4
 8019eea:	4638      	mov	r0, r7
 8019eec:	f7ff ff62 	bl	8019db4 <__sfmoreglue>
 8019ef0:	4604      	mov	r4, r0
 8019ef2:	6030      	str	r0, [r6, #0]
 8019ef4:	2800      	cmp	r0, #0
 8019ef6:	d1d5      	bne.n	8019ea4 <__sfp+0x24>
 8019ef8:	f7ff ff78 	bl	8019dec <__sfp_lock_release>
 8019efc:	230c      	movs	r3, #12
 8019efe:	603b      	str	r3, [r7, #0]
 8019f00:	e7ee      	b.n	8019ee0 <__sfp+0x60>
 8019f02:	bf00      	nop
 8019f04:	08021104 	.word	0x08021104
 8019f08:	ffff0001 	.word	0xffff0001

08019f0c <_fwalk_reent>:
 8019f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f10:	4606      	mov	r6, r0
 8019f12:	4688      	mov	r8, r1
 8019f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019f18:	2700      	movs	r7, #0
 8019f1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019f1e:	f1b9 0901 	subs.w	r9, r9, #1
 8019f22:	d505      	bpl.n	8019f30 <_fwalk_reent+0x24>
 8019f24:	6824      	ldr	r4, [r4, #0]
 8019f26:	2c00      	cmp	r4, #0
 8019f28:	d1f7      	bne.n	8019f1a <_fwalk_reent+0xe>
 8019f2a:	4638      	mov	r0, r7
 8019f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f30:	89ab      	ldrh	r3, [r5, #12]
 8019f32:	2b01      	cmp	r3, #1
 8019f34:	d907      	bls.n	8019f46 <_fwalk_reent+0x3a>
 8019f36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019f3a:	3301      	adds	r3, #1
 8019f3c:	d003      	beq.n	8019f46 <_fwalk_reent+0x3a>
 8019f3e:	4629      	mov	r1, r5
 8019f40:	4630      	mov	r0, r6
 8019f42:	47c0      	blx	r8
 8019f44:	4307      	orrs	r7, r0
 8019f46:	3568      	adds	r5, #104	; 0x68
 8019f48:	e7e9      	b.n	8019f1e <_fwalk_reent+0x12>
	...

08019f4c <__libc_init_array>:
 8019f4c:	b570      	push	{r4, r5, r6, lr}
 8019f4e:	4d0d      	ldr	r5, [pc, #52]	; (8019f84 <__libc_init_array+0x38>)
 8019f50:	4c0d      	ldr	r4, [pc, #52]	; (8019f88 <__libc_init_array+0x3c>)
 8019f52:	1b64      	subs	r4, r4, r5
 8019f54:	10a4      	asrs	r4, r4, #2
 8019f56:	2600      	movs	r6, #0
 8019f58:	42a6      	cmp	r6, r4
 8019f5a:	d109      	bne.n	8019f70 <__libc_init_array+0x24>
 8019f5c:	4d0b      	ldr	r5, [pc, #44]	; (8019f8c <__libc_init_array+0x40>)
 8019f5e:	4c0c      	ldr	r4, [pc, #48]	; (8019f90 <__libc_init_array+0x44>)
 8019f60:	f005 f8c0 	bl	801f0e4 <_init>
 8019f64:	1b64      	subs	r4, r4, r5
 8019f66:	10a4      	asrs	r4, r4, #2
 8019f68:	2600      	movs	r6, #0
 8019f6a:	42a6      	cmp	r6, r4
 8019f6c:	d105      	bne.n	8019f7a <__libc_init_array+0x2e>
 8019f6e:	bd70      	pop	{r4, r5, r6, pc}
 8019f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f74:	4798      	blx	r3
 8019f76:	3601      	adds	r6, #1
 8019f78:	e7ee      	b.n	8019f58 <__libc_init_array+0xc>
 8019f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f7e:	4798      	blx	r3
 8019f80:	3601      	adds	r6, #1
 8019f82:	e7f2      	b.n	8019f6a <__libc_init_array+0x1e>
 8019f84:	08021470 	.word	0x08021470
 8019f88:	08021470 	.word	0x08021470
 8019f8c:	08021470 	.word	0x08021470
 8019f90:	08021478 	.word	0x08021478

08019f94 <__retarget_lock_init_recursive>:
 8019f94:	4770      	bx	lr

08019f96 <__retarget_lock_acquire_recursive>:
 8019f96:	4770      	bx	lr

08019f98 <__retarget_lock_release_recursive>:
 8019f98:	4770      	bx	lr
	...

08019f9c <malloc>:
 8019f9c:	4b02      	ldr	r3, [pc, #8]	; (8019fa8 <malloc+0xc>)
 8019f9e:	4601      	mov	r1, r0
 8019fa0:	6818      	ldr	r0, [r3, #0]
 8019fa2:	f000 b883 	b.w	801a0ac <_malloc_r>
 8019fa6:	bf00      	nop
 8019fa8:	20000200 	.word	0x20000200

08019fac <memcpy>:
 8019fac:	440a      	add	r2, r1
 8019fae:	4291      	cmp	r1, r2
 8019fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8019fb4:	d100      	bne.n	8019fb8 <memcpy+0xc>
 8019fb6:	4770      	bx	lr
 8019fb8:	b510      	push	{r4, lr}
 8019fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019fc2:	4291      	cmp	r1, r2
 8019fc4:	d1f9      	bne.n	8019fba <memcpy+0xe>
 8019fc6:	bd10      	pop	{r4, pc}

08019fc8 <memmove>:
 8019fc8:	4288      	cmp	r0, r1
 8019fca:	b510      	push	{r4, lr}
 8019fcc:	eb01 0402 	add.w	r4, r1, r2
 8019fd0:	d902      	bls.n	8019fd8 <memmove+0x10>
 8019fd2:	4284      	cmp	r4, r0
 8019fd4:	4623      	mov	r3, r4
 8019fd6:	d807      	bhi.n	8019fe8 <memmove+0x20>
 8019fd8:	1e43      	subs	r3, r0, #1
 8019fda:	42a1      	cmp	r1, r4
 8019fdc:	d008      	beq.n	8019ff0 <memmove+0x28>
 8019fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019fe6:	e7f8      	b.n	8019fda <memmove+0x12>
 8019fe8:	4402      	add	r2, r0
 8019fea:	4601      	mov	r1, r0
 8019fec:	428a      	cmp	r2, r1
 8019fee:	d100      	bne.n	8019ff2 <memmove+0x2a>
 8019ff0:	bd10      	pop	{r4, pc}
 8019ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019ffa:	e7f7      	b.n	8019fec <memmove+0x24>

08019ffc <memset>:
 8019ffc:	4402      	add	r2, r0
 8019ffe:	4603      	mov	r3, r0
 801a000:	4293      	cmp	r3, r2
 801a002:	d100      	bne.n	801a006 <memset+0xa>
 801a004:	4770      	bx	lr
 801a006:	f803 1b01 	strb.w	r1, [r3], #1
 801a00a:	e7f9      	b.n	801a000 <memset+0x4>

0801a00c <_free_r>:
 801a00c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a00e:	2900      	cmp	r1, #0
 801a010:	d048      	beq.n	801a0a4 <_free_r+0x98>
 801a012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a016:	9001      	str	r0, [sp, #4]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	f1a1 0404 	sub.w	r4, r1, #4
 801a01e:	bfb8      	it	lt
 801a020:	18e4      	addlt	r4, r4, r3
 801a022:	f003 fcd1 	bl	801d9c8 <__malloc_lock>
 801a026:	4a20      	ldr	r2, [pc, #128]	; (801a0a8 <_free_r+0x9c>)
 801a028:	9801      	ldr	r0, [sp, #4]
 801a02a:	6813      	ldr	r3, [r2, #0]
 801a02c:	4615      	mov	r5, r2
 801a02e:	b933      	cbnz	r3, 801a03e <_free_r+0x32>
 801a030:	6063      	str	r3, [r4, #4]
 801a032:	6014      	str	r4, [r2, #0]
 801a034:	b003      	add	sp, #12
 801a036:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a03a:	f003 bccb 	b.w	801d9d4 <__malloc_unlock>
 801a03e:	42a3      	cmp	r3, r4
 801a040:	d90b      	bls.n	801a05a <_free_r+0x4e>
 801a042:	6821      	ldr	r1, [r4, #0]
 801a044:	1862      	adds	r2, r4, r1
 801a046:	4293      	cmp	r3, r2
 801a048:	bf04      	itt	eq
 801a04a:	681a      	ldreq	r2, [r3, #0]
 801a04c:	685b      	ldreq	r3, [r3, #4]
 801a04e:	6063      	str	r3, [r4, #4]
 801a050:	bf04      	itt	eq
 801a052:	1852      	addeq	r2, r2, r1
 801a054:	6022      	streq	r2, [r4, #0]
 801a056:	602c      	str	r4, [r5, #0]
 801a058:	e7ec      	b.n	801a034 <_free_r+0x28>
 801a05a:	461a      	mov	r2, r3
 801a05c:	685b      	ldr	r3, [r3, #4]
 801a05e:	b10b      	cbz	r3, 801a064 <_free_r+0x58>
 801a060:	42a3      	cmp	r3, r4
 801a062:	d9fa      	bls.n	801a05a <_free_r+0x4e>
 801a064:	6811      	ldr	r1, [r2, #0]
 801a066:	1855      	adds	r5, r2, r1
 801a068:	42a5      	cmp	r5, r4
 801a06a:	d10b      	bne.n	801a084 <_free_r+0x78>
 801a06c:	6824      	ldr	r4, [r4, #0]
 801a06e:	4421      	add	r1, r4
 801a070:	1854      	adds	r4, r2, r1
 801a072:	42a3      	cmp	r3, r4
 801a074:	6011      	str	r1, [r2, #0]
 801a076:	d1dd      	bne.n	801a034 <_free_r+0x28>
 801a078:	681c      	ldr	r4, [r3, #0]
 801a07a:	685b      	ldr	r3, [r3, #4]
 801a07c:	6053      	str	r3, [r2, #4]
 801a07e:	4421      	add	r1, r4
 801a080:	6011      	str	r1, [r2, #0]
 801a082:	e7d7      	b.n	801a034 <_free_r+0x28>
 801a084:	d902      	bls.n	801a08c <_free_r+0x80>
 801a086:	230c      	movs	r3, #12
 801a088:	6003      	str	r3, [r0, #0]
 801a08a:	e7d3      	b.n	801a034 <_free_r+0x28>
 801a08c:	6825      	ldr	r5, [r4, #0]
 801a08e:	1961      	adds	r1, r4, r5
 801a090:	428b      	cmp	r3, r1
 801a092:	bf04      	itt	eq
 801a094:	6819      	ldreq	r1, [r3, #0]
 801a096:	685b      	ldreq	r3, [r3, #4]
 801a098:	6063      	str	r3, [r4, #4]
 801a09a:	bf04      	itt	eq
 801a09c:	1949      	addeq	r1, r1, r5
 801a09e:	6021      	streq	r1, [r4, #0]
 801a0a0:	6054      	str	r4, [r2, #4]
 801a0a2:	e7c7      	b.n	801a034 <_free_r+0x28>
 801a0a4:	b003      	add	sp, #12
 801a0a6:	bd30      	pop	{r4, r5, pc}
 801a0a8:	20005e50 	.word	0x20005e50

0801a0ac <_malloc_r>:
 801a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0ae:	1ccd      	adds	r5, r1, #3
 801a0b0:	f025 0503 	bic.w	r5, r5, #3
 801a0b4:	3508      	adds	r5, #8
 801a0b6:	2d0c      	cmp	r5, #12
 801a0b8:	bf38      	it	cc
 801a0ba:	250c      	movcc	r5, #12
 801a0bc:	2d00      	cmp	r5, #0
 801a0be:	4606      	mov	r6, r0
 801a0c0:	db01      	blt.n	801a0c6 <_malloc_r+0x1a>
 801a0c2:	42a9      	cmp	r1, r5
 801a0c4:	d903      	bls.n	801a0ce <_malloc_r+0x22>
 801a0c6:	230c      	movs	r3, #12
 801a0c8:	6033      	str	r3, [r6, #0]
 801a0ca:	2000      	movs	r0, #0
 801a0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0ce:	f003 fc7b 	bl	801d9c8 <__malloc_lock>
 801a0d2:	4921      	ldr	r1, [pc, #132]	; (801a158 <_malloc_r+0xac>)
 801a0d4:	680a      	ldr	r2, [r1, #0]
 801a0d6:	4614      	mov	r4, r2
 801a0d8:	b99c      	cbnz	r4, 801a102 <_malloc_r+0x56>
 801a0da:	4f20      	ldr	r7, [pc, #128]	; (801a15c <_malloc_r+0xb0>)
 801a0dc:	683b      	ldr	r3, [r7, #0]
 801a0de:	b923      	cbnz	r3, 801a0ea <_malloc_r+0x3e>
 801a0e0:	4621      	mov	r1, r4
 801a0e2:	4630      	mov	r0, r6
 801a0e4:	f000 ffae 	bl	801b044 <_sbrk_r>
 801a0e8:	6038      	str	r0, [r7, #0]
 801a0ea:	4629      	mov	r1, r5
 801a0ec:	4630      	mov	r0, r6
 801a0ee:	f000 ffa9 	bl	801b044 <_sbrk_r>
 801a0f2:	1c43      	adds	r3, r0, #1
 801a0f4:	d123      	bne.n	801a13e <_malloc_r+0x92>
 801a0f6:	230c      	movs	r3, #12
 801a0f8:	6033      	str	r3, [r6, #0]
 801a0fa:	4630      	mov	r0, r6
 801a0fc:	f003 fc6a 	bl	801d9d4 <__malloc_unlock>
 801a100:	e7e3      	b.n	801a0ca <_malloc_r+0x1e>
 801a102:	6823      	ldr	r3, [r4, #0]
 801a104:	1b5b      	subs	r3, r3, r5
 801a106:	d417      	bmi.n	801a138 <_malloc_r+0x8c>
 801a108:	2b0b      	cmp	r3, #11
 801a10a:	d903      	bls.n	801a114 <_malloc_r+0x68>
 801a10c:	6023      	str	r3, [r4, #0]
 801a10e:	441c      	add	r4, r3
 801a110:	6025      	str	r5, [r4, #0]
 801a112:	e004      	b.n	801a11e <_malloc_r+0x72>
 801a114:	6863      	ldr	r3, [r4, #4]
 801a116:	42a2      	cmp	r2, r4
 801a118:	bf0c      	ite	eq
 801a11a:	600b      	streq	r3, [r1, #0]
 801a11c:	6053      	strne	r3, [r2, #4]
 801a11e:	4630      	mov	r0, r6
 801a120:	f003 fc58 	bl	801d9d4 <__malloc_unlock>
 801a124:	f104 000b 	add.w	r0, r4, #11
 801a128:	1d23      	adds	r3, r4, #4
 801a12a:	f020 0007 	bic.w	r0, r0, #7
 801a12e:	1ac2      	subs	r2, r0, r3
 801a130:	d0cc      	beq.n	801a0cc <_malloc_r+0x20>
 801a132:	1a1b      	subs	r3, r3, r0
 801a134:	50a3      	str	r3, [r4, r2]
 801a136:	e7c9      	b.n	801a0cc <_malloc_r+0x20>
 801a138:	4622      	mov	r2, r4
 801a13a:	6864      	ldr	r4, [r4, #4]
 801a13c:	e7cc      	b.n	801a0d8 <_malloc_r+0x2c>
 801a13e:	1cc4      	adds	r4, r0, #3
 801a140:	f024 0403 	bic.w	r4, r4, #3
 801a144:	42a0      	cmp	r0, r4
 801a146:	d0e3      	beq.n	801a110 <_malloc_r+0x64>
 801a148:	1a21      	subs	r1, r4, r0
 801a14a:	4630      	mov	r0, r6
 801a14c:	f000 ff7a 	bl	801b044 <_sbrk_r>
 801a150:	3001      	adds	r0, #1
 801a152:	d1dd      	bne.n	801a110 <_malloc_r+0x64>
 801a154:	e7cf      	b.n	801a0f6 <_malloc_r+0x4a>
 801a156:	bf00      	nop
 801a158:	20005e50 	.word	0x20005e50
 801a15c:	20005e54 	.word	0x20005e54

0801a160 <__cvt>:
 801a160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a164:	ec55 4b10 	vmov	r4, r5, d0
 801a168:	2d00      	cmp	r5, #0
 801a16a:	460e      	mov	r6, r1
 801a16c:	4619      	mov	r1, r3
 801a16e:	462b      	mov	r3, r5
 801a170:	bfbb      	ittet	lt
 801a172:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a176:	461d      	movlt	r5, r3
 801a178:	2300      	movge	r3, #0
 801a17a:	232d      	movlt	r3, #45	; 0x2d
 801a17c:	700b      	strb	r3, [r1, #0]
 801a17e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a180:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a184:	4691      	mov	r9, r2
 801a186:	f023 0820 	bic.w	r8, r3, #32
 801a18a:	bfbc      	itt	lt
 801a18c:	4622      	movlt	r2, r4
 801a18e:	4614      	movlt	r4, r2
 801a190:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a194:	d005      	beq.n	801a1a2 <__cvt+0x42>
 801a196:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a19a:	d100      	bne.n	801a19e <__cvt+0x3e>
 801a19c:	3601      	adds	r6, #1
 801a19e:	2102      	movs	r1, #2
 801a1a0:	e000      	b.n	801a1a4 <__cvt+0x44>
 801a1a2:	2103      	movs	r1, #3
 801a1a4:	ab03      	add	r3, sp, #12
 801a1a6:	9301      	str	r3, [sp, #4]
 801a1a8:	ab02      	add	r3, sp, #8
 801a1aa:	9300      	str	r3, [sp, #0]
 801a1ac:	ec45 4b10 	vmov	d0, r4, r5
 801a1b0:	4653      	mov	r3, sl
 801a1b2:	4632      	mov	r2, r6
 801a1b4:	f002 f94c 	bl	801c450 <_dtoa_r>
 801a1b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a1bc:	4607      	mov	r7, r0
 801a1be:	d102      	bne.n	801a1c6 <__cvt+0x66>
 801a1c0:	f019 0f01 	tst.w	r9, #1
 801a1c4:	d022      	beq.n	801a20c <__cvt+0xac>
 801a1c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a1ca:	eb07 0906 	add.w	r9, r7, r6
 801a1ce:	d110      	bne.n	801a1f2 <__cvt+0x92>
 801a1d0:	783b      	ldrb	r3, [r7, #0]
 801a1d2:	2b30      	cmp	r3, #48	; 0x30
 801a1d4:	d10a      	bne.n	801a1ec <__cvt+0x8c>
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	2300      	movs	r3, #0
 801a1da:	4620      	mov	r0, r4
 801a1dc:	4629      	mov	r1, r5
 801a1de:	f7e6 fc83 	bl	8000ae8 <__aeabi_dcmpeq>
 801a1e2:	b918      	cbnz	r0, 801a1ec <__cvt+0x8c>
 801a1e4:	f1c6 0601 	rsb	r6, r6, #1
 801a1e8:	f8ca 6000 	str.w	r6, [sl]
 801a1ec:	f8da 3000 	ldr.w	r3, [sl]
 801a1f0:	4499      	add	r9, r3
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	4620      	mov	r0, r4
 801a1f8:	4629      	mov	r1, r5
 801a1fa:	f7e6 fc75 	bl	8000ae8 <__aeabi_dcmpeq>
 801a1fe:	b108      	cbz	r0, 801a204 <__cvt+0xa4>
 801a200:	f8cd 900c 	str.w	r9, [sp, #12]
 801a204:	2230      	movs	r2, #48	; 0x30
 801a206:	9b03      	ldr	r3, [sp, #12]
 801a208:	454b      	cmp	r3, r9
 801a20a:	d307      	bcc.n	801a21c <__cvt+0xbc>
 801a20c:	9b03      	ldr	r3, [sp, #12]
 801a20e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a210:	1bdb      	subs	r3, r3, r7
 801a212:	4638      	mov	r0, r7
 801a214:	6013      	str	r3, [r2, #0]
 801a216:	b004      	add	sp, #16
 801a218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a21c:	1c59      	adds	r1, r3, #1
 801a21e:	9103      	str	r1, [sp, #12]
 801a220:	701a      	strb	r2, [r3, #0]
 801a222:	e7f0      	b.n	801a206 <__cvt+0xa6>

0801a224 <__exponent>:
 801a224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a226:	4603      	mov	r3, r0
 801a228:	2900      	cmp	r1, #0
 801a22a:	bfb8      	it	lt
 801a22c:	4249      	neglt	r1, r1
 801a22e:	f803 2b02 	strb.w	r2, [r3], #2
 801a232:	bfb4      	ite	lt
 801a234:	222d      	movlt	r2, #45	; 0x2d
 801a236:	222b      	movge	r2, #43	; 0x2b
 801a238:	2909      	cmp	r1, #9
 801a23a:	7042      	strb	r2, [r0, #1]
 801a23c:	dd2a      	ble.n	801a294 <__exponent+0x70>
 801a23e:	f10d 0407 	add.w	r4, sp, #7
 801a242:	46a4      	mov	ip, r4
 801a244:	270a      	movs	r7, #10
 801a246:	46a6      	mov	lr, r4
 801a248:	460a      	mov	r2, r1
 801a24a:	fb91 f6f7 	sdiv	r6, r1, r7
 801a24e:	fb07 1516 	mls	r5, r7, r6, r1
 801a252:	3530      	adds	r5, #48	; 0x30
 801a254:	2a63      	cmp	r2, #99	; 0x63
 801a256:	f104 34ff 	add.w	r4, r4, #4294967295
 801a25a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a25e:	4631      	mov	r1, r6
 801a260:	dcf1      	bgt.n	801a246 <__exponent+0x22>
 801a262:	3130      	adds	r1, #48	; 0x30
 801a264:	f1ae 0502 	sub.w	r5, lr, #2
 801a268:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a26c:	1c44      	adds	r4, r0, #1
 801a26e:	4629      	mov	r1, r5
 801a270:	4561      	cmp	r1, ip
 801a272:	d30a      	bcc.n	801a28a <__exponent+0x66>
 801a274:	f10d 0209 	add.w	r2, sp, #9
 801a278:	eba2 020e 	sub.w	r2, r2, lr
 801a27c:	4565      	cmp	r5, ip
 801a27e:	bf88      	it	hi
 801a280:	2200      	movhi	r2, #0
 801a282:	4413      	add	r3, r2
 801a284:	1a18      	subs	r0, r3, r0
 801a286:	b003      	add	sp, #12
 801a288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a28a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a28e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a292:	e7ed      	b.n	801a270 <__exponent+0x4c>
 801a294:	2330      	movs	r3, #48	; 0x30
 801a296:	3130      	adds	r1, #48	; 0x30
 801a298:	7083      	strb	r3, [r0, #2]
 801a29a:	70c1      	strb	r1, [r0, #3]
 801a29c:	1d03      	adds	r3, r0, #4
 801a29e:	e7f1      	b.n	801a284 <__exponent+0x60>

0801a2a0 <_printf_float>:
 801a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2a4:	ed2d 8b02 	vpush	{d8}
 801a2a8:	b08d      	sub	sp, #52	; 0x34
 801a2aa:	460c      	mov	r4, r1
 801a2ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a2b0:	4616      	mov	r6, r2
 801a2b2:	461f      	mov	r7, r3
 801a2b4:	4605      	mov	r5, r0
 801a2b6:	f003 fafb 	bl	801d8b0 <_localeconv_r>
 801a2ba:	f8d0 a000 	ldr.w	sl, [r0]
 801a2be:	4650      	mov	r0, sl
 801a2c0:	f7e5 ff96 	bl	80001f0 <strlen>
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	930a      	str	r3, [sp, #40]	; 0x28
 801a2c8:	6823      	ldr	r3, [r4, #0]
 801a2ca:	9305      	str	r3, [sp, #20]
 801a2cc:	f8d8 3000 	ldr.w	r3, [r8]
 801a2d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a2d4:	3307      	adds	r3, #7
 801a2d6:	f023 0307 	bic.w	r3, r3, #7
 801a2da:	f103 0208 	add.w	r2, r3, #8
 801a2de:	f8c8 2000 	str.w	r2, [r8]
 801a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a2ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a2ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a2f2:	9307      	str	r3, [sp, #28]
 801a2f4:	f8cd 8018 	str.w	r8, [sp, #24]
 801a2f8:	ee08 0a10 	vmov	s16, r0
 801a2fc:	4b9f      	ldr	r3, [pc, #636]	; (801a57c <_printf_float+0x2dc>)
 801a2fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a302:	f04f 32ff 	mov.w	r2, #4294967295
 801a306:	f7e6 fc21 	bl	8000b4c <__aeabi_dcmpun>
 801a30a:	bb88      	cbnz	r0, 801a370 <_printf_float+0xd0>
 801a30c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a310:	4b9a      	ldr	r3, [pc, #616]	; (801a57c <_printf_float+0x2dc>)
 801a312:	f04f 32ff 	mov.w	r2, #4294967295
 801a316:	f7e6 fbfb 	bl	8000b10 <__aeabi_dcmple>
 801a31a:	bb48      	cbnz	r0, 801a370 <_printf_float+0xd0>
 801a31c:	2200      	movs	r2, #0
 801a31e:	2300      	movs	r3, #0
 801a320:	4640      	mov	r0, r8
 801a322:	4649      	mov	r1, r9
 801a324:	f7e6 fbea 	bl	8000afc <__aeabi_dcmplt>
 801a328:	b110      	cbz	r0, 801a330 <_printf_float+0x90>
 801a32a:	232d      	movs	r3, #45	; 0x2d
 801a32c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a330:	4b93      	ldr	r3, [pc, #588]	; (801a580 <_printf_float+0x2e0>)
 801a332:	4894      	ldr	r0, [pc, #592]	; (801a584 <_printf_float+0x2e4>)
 801a334:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a338:	bf94      	ite	ls
 801a33a:	4698      	movls	r8, r3
 801a33c:	4680      	movhi	r8, r0
 801a33e:	2303      	movs	r3, #3
 801a340:	6123      	str	r3, [r4, #16]
 801a342:	9b05      	ldr	r3, [sp, #20]
 801a344:	f023 0204 	bic.w	r2, r3, #4
 801a348:	6022      	str	r2, [r4, #0]
 801a34a:	f04f 0900 	mov.w	r9, #0
 801a34e:	9700      	str	r7, [sp, #0]
 801a350:	4633      	mov	r3, r6
 801a352:	aa0b      	add	r2, sp, #44	; 0x2c
 801a354:	4621      	mov	r1, r4
 801a356:	4628      	mov	r0, r5
 801a358:	f000 f9d8 	bl	801a70c <_printf_common>
 801a35c:	3001      	adds	r0, #1
 801a35e:	f040 8090 	bne.w	801a482 <_printf_float+0x1e2>
 801a362:	f04f 30ff 	mov.w	r0, #4294967295
 801a366:	b00d      	add	sp, #52	; 0x34
 801a368:	ecbd 8b02 	vpop	{d8}
 801a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a370:	4642      	mov	r2, r8
 801a372:	464b      	mov	r3, r9
 801a374:	4640      	mov	r0, r8
 801a376:	4649      	mov	r1, r9
 801a378:	f7e6 fbe8 	bl	8000b4c <__aeabi_dcmpun>
 801a37c:	b140      	cbz	r0, 801a390 <_printf_float+0xf0>
 801a37e:	464b      	mov	r3, r9
 801a380:	2b00      	cmp	r3, #0
 801a382:	bfbc      	itt	lt
 801a384:	232d      	movlt	r3, #45	; 0x2d
 801a386:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a38a:	487f      	ldr	r0, [pc, #508]	; (801a588 <_printf_float+0x2e8>)
 801a38c:	4b7f      	ldr	r3, [pc, #508]	; (801a58c <_printf_float+0x2ec>)
 801a38e:	e7d1      	b.n	801a334 <_printf_float+0x94>
 801a390:	6863      	ldr	r3, [r4, #4]
 801a392:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a396:	9206      	str	r2, [sp, #24]
 801a398:	1c5a      	adds	r2, r3, #1
 801a39a:	d13f      	bne.n	801a41c <_printf_float+0x17c>
 801a39c:	2306      	movs	r3, #6
 801a39e:	6063      	str	r3, [r4, #4]
 801a3a0:	9b05      	ldr	r3, [sp, #20]
 801a3a2:	6861      	ldr	r1, [r4, #4]
 801a3a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	9303      	str	r3, [sp, #12]
 801a3ac:	ab0a      	add	r3, sp, #40	; 0x28
 801a3ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a3b2:	ab09      	add	r3, sp, #36	; 0x24
 801a3b4:	ec49 8b10 	vmov	d0, r8, r9
 801a3b8:	9300      	str	r3, [sp, #0]
 801a3ba:	6022      	str	r2, [r4, #0]
 801a3bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a3c0:	4628      	mov	r0, r5
 801a3c2:	f7ff fecd 	bl	801a160 <__cvt>
 801a3c6:	9b06      	ldr	r3, [sp, #24]
 801a3c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a3ca:	2b47      	cmp	r3, #71	; 0x47
 801a3cc:	4680      	mov	r8, r0
 801a3ce:	d108      	bne.n	801a3e2 <_printf_float+0x142>
 801a3d0:	1cc8      	adds	r0, r1, #3
 801a3d2:	db02      	blt.n	801a3da <_printf_float+0x13a>
 801a3d4:	6863      	ldr	r3, [r4, #4]
 801a3d6:	4299      	cmp	r1, r3
 801a3d8:	dd41      	ble.n	801a45e <_printf_float+0x1be>
 801a3da:	f1ab 0b02 	sub.w	fp, fp, #2
 801a3de:	fa5f fb8b 	uxtb.w	fp, fp
 801a3e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a3e6:	d820      	bhi.n	801a42a <_printf_float+0x18a>
 801a3e8:	3901      	subs	r1, #1
 801a3ea:	465a      	mov	r2, fp
 801a3ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a3f0:	9109      	str	r1, [sp, #36]	; 0x24
 801a3f2:	f7ff ff17 	bl	801a224 <__exponent>
 801a3f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3f8:	1813      	adds	r3, r2, r0
 801a3fa:	2a01      	cmp	r2, #1
 801a3fc:	4681      	mov	r9, r0
 801a3fe:	6123      	str	r3, [r4, #16]
 801a400:	dc02      	bgt.n	801a408 <_printf_float+0x168>
 801a402:	6822      	ldr	r2, [r4, #0]
 801a404:	07d2      	lsls	r2, r2, #31
 801a406:	d501      	bpl.n	801a40c <_printf_float+0x16c>
 801a408:	3301      	adds	r3, #1
 801a40a:	6123      	str	r3, [r4, #16]
 801a40c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a410:	2b00      	cmp	r3, #0
 801a412:	d09c      	beq.n	801a34e <_printf_float+0xae>
 801a414:	232d      	movs	r3, #45	; 0x2d
 801a416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a41a:	e798      	b.n	801a34e <_printf_float+0xae>
 801a41c:	9a06      	ldr	r2, [sp, #24]
 801a41e:	2a47      	cmp	r2, #71	; 0x47
 801a420:	d1be      	bne.n	801a3a0 <_printf_float+0x100>
 801a422:	2b00      	cmp	r3, #0
 801a424:	d1bc      	bne.n	801a3a0 <_printf_float+0x100>
 801a426:	2301      	movs	r3, #1
 801a428:	e7b9      	b.n	801a39e <_printf_float+0xfe>
 801a42a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a42e:	d118      	bne.n	801a462 <_printf_float+0x1c2>
 801a430:	2900      	cmp	r1, #0
 801a432:	6863      	ldr	r3, [r4, #4]
 801a434:	dd0b      	ble.n	801a44e <_printf_float+0x1ae>
 801a436:	6121      	str	r1, [r4, #16]
 801a438:	b913      	cbnz	r3, 801a440 <_printf_float+0x1a0>
 801a43a:	6822      	ldr	r2, [r4, #0]
 801a43c:	07d0      	lsls	r0, r2, #31
 801a43e:	d502      	bpl.n	801a446 <_printf_float+0x1a6>
 801a440:	3301      	adds	r3, #1
 801a442:	440b      	add	r3, r1
 801a444:	6123      	str	r3, [r4, #16]
 801a446:	65a1      	str	r1, [r4, #88]	; 0x58
 801a448:	f04f 0900 	mov.w	r9, #0
 801a44c:	e7de      	b.n	801a40c <_printf_float+0x16c>
 801a44e:	b913      	cbnz	r3, 801a456 <_printf_float+0x1b6>
 801a450:	6822      	ldr	r2, [r4, #0]
 801a452:	07d2      	lsls	r2, r2, #31
 801a454:	d501      	bpl.n	801a45a <_printf_float+0x1ba>
 801a456:	3302      	adds	r3, #2
 801a458:	e7f4      	b.n	801a444 <_printf_float+0x1a4>
 801a45a:	2301      	movs	r3, #1
 801a45c:	e7f2      	b.n	801a444 <_printf_float+0x1a4>
 801a45e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a464:	4299      	cmp	r1, r3
 801a466:	db05      	blt.n	801a474 <_printf_float+0x1d4>
 801a468:	6823      	ldr	r3, [r4, #0]
 801a46a:	6121      	str	r1, [r4, #16]
 801a46c:	07d8      	lsls	r0, r3, #31
 801a46e:	d5ea      	bpl.n	801a446 <_printf_float+0x1a6>
 801a470:	1c4b      	adds	r3, r1, #1
 801a472:	e7e7      	b.n	801a444 <_printf_float+0x1a4>
 801a474:	2900      	cmp	r1, #0
 801a476:	bfd4      	ite	le
 801a478:	f1c1 0202 	rsble	r2, r1, #2
 801a47c:	2201      	movgt	r2, #1
 801a47e:	4413      	add	r3, r2
 801a480:	e7e0      	b.n	801a444 <_printf_float+0x1a4>
 801a482:	6823      	ldr	r3, [r4, #0]
 801a484:	055a      	lsls	r2, r3, #21
 801a486:	d407      	bmi.n	801a498 <_printf_float+0x1f8>
 801a488:	6923      	ldr	r3, [r4, #16]
 801a48a:	4642      	mov	r2, r8
 801a48c:	4631      	mov	r1, r6
 801a48e:	4628      	mov	r0, r5
 801a490:	47b8      	blx	r7
 801a492:	3001      	adds	r0, #1
 801a494:	d12c      	bne.n	801a4f0 <_printf_float+0x250>
 801a496:	e764      	b.n	801a362 <_printf_float+0xc2>
 801a498:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a49c:	f240 80e0 	bls.w	801a660 <_printf_float+0x3c0>
 801a4a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	f7e6 fb1e 	bl	8000ae8 <__aeabi_dcmpeq>
 801a4ac:	2800      	cmp	r0, #0
 801a4ae:	d034      	beq.n	801a51a <_printf_float+0x27a>
 801a4b0:	4a37      	ldr	r2, [pc, #220]	; (801a590 <_printf_float+0x2f0>)
 801a4b2:	2301      	movs	r3, #1
 801a4b4:	4631      	mov	r1, r6
 801a4b6:	4628      	mov	r0, r5
 801a4b8:	47b8      	blx	r7
 801a4ba:	3001      	adds	r0, #1
 801a4bc:	f43f af51 	beq.w	801a362 <_printf_float+0xc2>
 801a4c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a4c4:	429a      	cmp	r2, r3
 801a4c6:	db02      	blt.n	801a4ce <_printf_float+0x22e>
 801a4c8:	6823      	ldr	r3, [r4, #0]
 801a4ca:	07d8      	lsls	r0, r3, #31
 801a4cc:	d510      	bpl.n	801a4f0 <_printf_float+0x250>
 801a4ce:	ee18 3a10 	vmov	r3, s16
 801a4d2:	4652      	mov	r2, sl
 801a4d4:	4631      	mov	r1, r6
 801a4d6:	4628      	mov	r0, r5
 801a4d8:	47b8      	blx	r7
 801a4da:	3001      	adds	r0, #1
 801a4dc:	f43f af41 	beq.w	801a362 <_printf_float+0xc2>
 801a4e0:	f04f 0800 	mov.w	r8, #0
 801a4e4:	f104 091a 	add.w	r9, r4, #26
 801a4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4ea:	3b01      	subs	r3, #1
 801a4ec:	4543      	cmp	r3, r8
 801a4ee:	dc09      	bgt.n	801a504 <_printf_float+0x264>
 801a4f0:	6823      	ldr	r3, [r4, #0]
 801a4f2:	079b      	lsls	r3, r3, #30
 801a4f4:	f100 8105 	bmi.w	801a702 <_printf_float+0x462>
 801a4f8:	68e0      	ldr	r0, [r4, #12]
 801a4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4fc:	4298      	cmp	r0, r3
 801a4fe:	bfb8      	it	lt
 801a500:	4618      	movlt	r0, r3
 801a502:	e730      	b.n	801a366 <_printf_float+0xc6>
 801a504:	2301      	movs	r3, #1
 801a506:	464a      	mov	r2, r9
 801a508:	4631      	mov	r1, r6
 801a50a:	4628      	mov	r0, r5
 801a50c:	47b8      	blx	r7
 801a50e:	3001      	adds	r0, #1
 801a510:	f43f af27 	beq.w	801a362 <_printf_float+0xc2>
 801a514:	f108 0801 	add.w	r8, r8, #1
 801a518:	e7e6      	b.n	801a4e8 <_printf_float+0x248>
 801a51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	dc39      	bgt.n	801a594 <_printf_float+0x2f4>
 801a520:	4a1b      	ldr	r2, [pc, #108]	; (801a590 <_printf_float+0x2f0>)
 801a522:	2301      	movs	r3, #1
 801a524:	4631      	mov	r1, r6
 801a526:	4628      	mov	r0, r5
 801a528:	47b8      	blx	r7
 801a52a:	3001      	adds	r0, #1
 801a52c:	f43f af19 	beq.w	801a362 <_printf_float+0xc2>
 801a530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a534:	4313      	orrs	r3, r2
 801a536:	d102      	bne.n	801a53e <_printf_float+0x29e>
 801a538:	6823      	ldr	r3, [r4, #0]
 801a53a:	07d9      	lsls	r1, r3, #31
 801a53c:	d5d8      	bpl.n	801a4f0 <_printf_float+0x250>
 801a53e:	ee18 3a10 	vmov	r3, s16
 801a542:	4652      	mov	r2, sl
 801a544:	4631      	mov	r1, r6
 801a546:	4628      	mov	r0, r5
 801a548:	47b8      	blx	r7
 801a54a:	3001      	adds	r0, #1
 801a54c:	f43f af09 	beq.w	801a362 <_printf_float+0xc2>
 801a550:	f04f 0900 	mov.w	r9, #0
 801a554:	f104 0a1a 	add.w	sl, r4, #26
 801a558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a55a:	425b      	negs	r3, r3
 801a55c:	454b      	cmp	r3, r9
 801a55e:	dc01      	bgt.n	801a564 <_printf_float+0x2c4>
 801a560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a562:	e792      	b.n	801a48a <_printf_float+0x1ea>
 801a564:	2301      	movs	r3, #1
 801a566:	4652      	mov	r2, sl
 801a568:	4631      	mov	r1, r6
 801a56a:	4628      	mov	r0, r5
 801a56c:	47b8      	blx	r7
 801a56e:	3001      	adds	r0, #1
 801a570:	f43f aef7 	beq.w	801a362 <_printf_float+0xc2>
 801a574:	f109 0901 	add.w	r9, r9, #1
 801a578:	e7ee      	b.n	801a558 <_printf_float+0x2b8>
 801a57a:	bf00      	nop
 801a57c:	7fefffff 	.word	0x7fefffff
 801a580:	08021108 	.word	0x08021108
 801a584:	0802110c 	.word	0x0802110c
 801a588:	08021114 	.word	0x08021114
 801a58c:	08021110 	.word	0x08021110
 801a590:	08021451 	.word	0x08021451
 801a594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a598:	429a      	cmp	r2, r3
 801a59a:	bfa8      	it	ge
 801a59c:	461a      	movge	r2, r3
 801a59e:	2a00      	cmp	r2, #0
 801a5a0:	4691      	mov	r9, r2
 801a5a2:	dc37      	bgt.n	801a614 <_printf_float+0x374>
 801a5a4:	f04f 0b00 	mov.w	fp, #0
 801a5a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a5ac:	f104 021a 	add.w	r2, r4, #26
 801a5b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a5b2:	9305      	str	r3, [sp, #20]
 801a5b4:	eba3 0309 	sub.w	r3, r3, r9
 801a5b8:	455b      	cmp	r3, fp
 801a5ba:	dc33      	bgt.n	801a624 <_printf_float+0x384>
 801a5bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a5c0:	429a      	cmp	r2, r3
 801a5c2:	db3b      	blt.n	801a63c <_printf_float+0x39c>
 801a5c4:	6823      	ldr	r3, [r4, #0]
 801a5c6:	07da      	lsls	r2, r3, #31
 801a5c8:	d438      	bmi.n	801a63c <_printf_float+0x39c>
 801a5ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a5cc:	9b05      	ldr	r3, [sp, #20]
 801a5ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a5d0:	1ad3      	subs	r3, r2, r3
 801a5d2:	eba2 0901 	sub.w	r9, r2, r1
 801a5d6:	4599      	cmp	r9, r3
 801a5d8:	bfa8      	it	ge
 801a5da:	4699      	movge	r9, r3
 801a5dc:	f1b9 0f00 	cmp.w	r9, #0
 801a5e0:	dc35      	bgt.n	801a64e <_printf_float+0x3ae>
 801a5e2:	f04f 0800 	mov.w	r8, #0
 801a5e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a5ea:	f104 0a1a 	add.w	sl, r4, #26
 801a5ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a5f2:	1a9b      	subs	r3, r3, r2
 801a5f4:	eba3 0309 	sub.w	r3, r3, r9
 801a5f8:	4543      	cmp	r3, r8
 801a5fa:	f77f af79 	ble.w	801a4f0 <_printf_float+0x250>
 801a5fe:	2301      	movs	r3, #1
 801a600:	4652      	mov	r2, sl
 801a602:	4631      	mov	r1, r6
 801a604:	4628      	mov	r0, r5
 801a606:	47b8      	blx	r7
 801a608:	3001      	adds	r0, #1
 801a60a:	f43f aeaa 	beq.w	801a362 <_printf_float+0xc2>
 801a60e:	f108 0801 	add.w	r8, r8, #1
 801a612:	e7ec      	b.n	801a5ee <_printf_float+0x34e>
 801a614:	4613      	mov	r3, r2
 801a616:	4631      	mov	r1, r6
 801a618:	4642      	mov	r2, r8
 801a61a:	4628      	mov	r0, r5
 801a61c:	47b8      	blx	r7
 801a61e:	3001      	adds	r0, #1
 801a620:	d1c0      	bne.n	801a5a4 <_printf_float+0x304>
 801a622:	e69e      	b.n	801a362 <_printf_float+0xc2>
 801a624:	2301      	movs	r3, #1
 801a626:	4631      	mov	r1, r6
 801a628:	4628      	mov	r0, r5
 801a62a:	9205      	str	r2, [sp, #20]
 801a62c:	47b8      	blx	r7
 801a62e:	3001      	adds	r0, #1
 801a630:	f43f ae97 	beq.w	801a362 <_printf_float+0xc2>
 801a634:	9a05      	ldr	r2, [sp, #20]
 801a636:	f10b 0b01 	add.w	fp, fp, #1
 801a63a:	e7b9      	b.n	801a5b0 <_printf_float+0x310>
 801a63c:	ee18 3a10 	vmov	r3, s16
 801a640:	4652      	mov	r2, sl
 801a642:	4631      	mov	r1, r6
 801a644:	4628      	mov	r0, r5
 801a646:	47b8      	blx	r7
 801a648:	3001      	adds	r0, #1
 801a64a:	d1be      	bne.n	801a5ca <_printf_float+0x32a>
 801a64c:	e689      	b.n	801a362 <_printf_float+0xc2>
 801a64e:	9a05      	ldr	r2, [sp, #20]
 801a650:	464b      	mov	r3, r9
 801a652:	4442      	add	r2, r8
 801a654:	4631      	mov	r1, r6
 801a656:	4628      	mov	r0, r5
 801a658:	47b8      	blx	r7
 801a65a:	3001      	adds	r0, #1
 801a65c:	d1c1      	bne.n	801a5e2 <_printf_float+0x342>
 801a65e:	e680      	b.n	801a362 <_printf_float+0xc2>
 801a660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a662:	2a01      	cmp	r2, #1
 801a664:	dc01      	bgt.n	801a66a <_printf_float+0x3ca>
 801a666:	07db      	lsls	r3, r3, #31
 801a668:	d538      	bpl.n	801a6dc <_printf_float+0x43c>
 801a66a:	2301      	movs	r3, #1
 801a66c:	4642      	mov	r2, r8
 801a66e:	4631      	mov	r1, r6
 801a670:	4628      	mov	r0, r5
 801a672:	47b8      	blx	r7
 801a674:	3001      	adds	r0, #1
 801a676:	f43f ae74 	beq.w	801a362 <_printf_float+0xc2>
 801a67a:	ee18 3a10 	vmov	r3, s16
 801a67e:	4652      	mov	r2, sl
 801a680:	4631      	mov	r1, r6
 801a682:	4628      	mov	r0, r5
 801a684:	47b8      	blx	r7
 801a686:	3001      	adds	r0, #1
 801a688:	f43f ae6b 	beq.w	801a362 <_printf_float+0xc2>
 801a68c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a690:	2200      	movs	r2, #0
 801a692:	2300      	movs	r3, #0
 801a694:	f7e6 fa28 	bl	8000ae8 <__aeabi_dcmpeq>
 801a698:	b9d8      	cbnz	r0, 801a6d2 <_printf_float+0x432>
 801a69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a69c:	f108 0201 	add.w	r2, r8, #1
 801a6a0:	3b01      	subs	r3, #1
 801a6a2:	4631      	mov	r1, r6
 801a6a4:	4628      	mov	r0, r5
 801a6a6:	47b8      	blx	r7
 801a6a8:	3001      	adds	r0, #1
 801a6aa:	d10e      	bne.n	801a6ca <_printf_float+0x42a>
 801a6ac:	e659      	b.n	801a362 <_printf_float+0xc2>
 801a6ae:	2301      	movs	r3, #1
 801a6b0:	4652      	mov	r2, sl
 801a6b2:	4631      	mov	r1, r6
 801a6b4:	4628      	mov	r0, r5
 801a6b6:	47b8      	blx	r7
 801a6b8:	3001      	adds	r0, #1
 801a6ba:	f43f ae52 	beq.w	801a362 <_printf_float+0xc2>
 801a6be:	f108 0801 	add.w	r8, r8, #1
 801a6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6c4:	3b01      	subs	r3, #1
 801a6c6:	4543      	cmp	r3, r8
 801a6c8:	dcf1      	bgt.n	801a6ae <_printf_float+0x40e>
 801a6ca:	464b      	mov	r3, r9
 801a6cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a6d0:	e6dc      	b.n	801a48c <_printf_float+0x1ec>
 801a6d2:	f04f 0800 	mov.w	r8, #0
 801a6d6:	f104 0a1a 	add.w	sl, r4, #26
 801a6da:	e7f2      	b.n	801a6c2 <_printf_float+0x422>
 801a6dc:	2301      	movs	r3, #1
 801a6de:	4642      	mov	r2, r8
 801a6e0:	e7df      	b.n	801a6a2 <_printf_float+0x402>
 801a6e2:	2301      	movs	r3, #1
 801a6e4:	464a      	mov	r2, r9
 801a6e6:	4631      	mov	r1, r6
 801a6e8:	4628      	mov	r0, r5
 801a6ea:	47b8      	blx	r7
 801a6ec:	3001      	adds	r0, #1
 801a6ee:	f43f ae38 	beq.w	801a362 <_printf_float+0xc2>
 801a6f2:	f108 0801 	add.w	r8, r8, #1
 801a6f6:	68e3      	ldr	r3, [r4, #12]
 801a6f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a6fa:	1a5b      	subs	r3, r3, r1
 801a6fc:	4543      	cmp	r3, r8
 801a6fe:	dcf0      	bgt.n	801a6e2 <_printf_float+0x442>
 801a700:	e6fa      	b.n	801a4f8 <_printf_float+0x258>
 801a702:	f04f 0800 	mov.w	r8, #0
 801a706:	f104 0919 	add.w	r9, r4, #25
 801a70a:	e7f4      	b.n	801a6f6 <_printf_float+0x456>

0801a70c <_printf_common>:
 801a70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a710:	4616      	mov	r6, r2
 801a712:	4699      	mov	r9, r3
 801a714:	688a      	ldr	r2, [r1, #8]
 801a716:	690b      	ldr	r3, [r1, #16]
 801a718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a71c:	4293      	cmp	r3, r2
 801a71e:	bfb8      	it	lt
 801a720:	4613      	movlt	r3, r2
 801a722:	6033      	str	r3, [r6, #0]
 801a724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a728:	4607      	mov	r7, r0
 801a72a:	460c      	mov	r4, r1
 801a72c:	b10a      	cbz	r2, 801a732 <_printf_common+0x26>
 801a72e:	3301      	adds	r3, #1
 801a730:	6033      	str	r3, [r6, #0]
 801a732:	6823      	ldr	r3, [r4, #0]
 801a734:	0699      	lsls	r1, r3, #26
 801a736:	bf42      	ittt	mi
 801a738:	6833      	ldrmi	r3, [r6, #0]
 801a73a:	3302      	addmi	r3, #2
 801a73c:	6033      	strmi	r3, [r6, #0]
 801a73e:	6825      	ldr	r5, [r4, #0]
 801a740:	f015 0506 	ands.w	r5, r5, #6
 801a744:	d106      	bne.n	801a754 <_printf_common+0x48>
 801a746:	f104 0a19 	add.w	sl, r4, #25
 801a74a:	68e3      	ldr	r3, [r4, #12]
 801a74c:	6832      	ldr	r2, [r6, #0]
 801a74e:	1a9b      	subs	r3, r3, r2
 801a750:	42ab      	cmp	r3, r5
 801a752:	dc26      	bgt.n	801a7a2 <_printf_common+0x96>
 801a754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a758:	1e13      	subs	r3, r2, #0
 801a75a:	6822      	ldr	r2, [r4, #0]
 801a75c:	bf18      	it	ne
 801a75e:	2301      	movne	r3, #1
 801a760:	0692      	lsls	r2, r2, #26
 801a762:	d42b      	bmi.n	801a7bc <_printf_common+0xb0>
 801a764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a768:	4649      	mov	r1, r9
 801a76a:	4638      	mov	r0, r7
 801a76c:	47c0      	blx	r8
 801a76e:	3001      	adds	r0, #1
 801a770:	d01e      	beq.n	801a7b0 <_printf_common+0xa4>
 801a772:	6823      	ldr	r3, [r4, #0]
 801a774:	68e5      	ldr	r5, [r4, #12]
 801a776:	6832      	ldr	r2, [r6, #0]
 801a778:	f003 0306 	and.w	r3, r3, #6
 801a77c:	2b04      	cmp	r3, #4
 801a77e:	bf08      	it	eq
 801a780:	1aad      	subeq	r5, r5, r2
 801a782:	68a3      	ldr	r3, [r4, #8]
 801a784:	6922      	ldr	r2, [r4, #16]
 801a786:	bf0c      	ite	eq
 801a788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a78c:	2500      	movne	r5, #0
 801a78e:	4293      	cmp	r3, r2
 801a790:	bfc4      	itt	gt
 801a792:	1a9b      	subgt	r3, r3, r2
 801a794:	18ed      	addgt	r5, r5, r3
 801a796:	2600      	movs	r6, #0
 801a798:	341a      	adds	r4, #26
 801a79a:	42b5      	cmp	r5, r6
 801a79c:	d11a      	bne.n	801a7d4 <_printf_common+0xc8>
 801a79e:	2000      	movs	r0, #0
 801a7a0:	e008      	b.n	801a7b4 <_printf_common+0xa8>
 801a7a2:	2301      	movs	r3, #1
 801a7a4:	4652      	mov	r2, sl
 801a7a6:	4649      	mov	r1, r9
 801a7a8:	4638      	mov	r0, r7
 801a7aa:	47c0      	blx	r8
 801a7ac:	3001      	adds	r0, #1
 801a7ae:	d103      	bne.n	801a7b8 <_printf_common+0xac>
 801a7b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7b8:	3501      	adds	r5, #1
 801a7ba:	e7c6      	b.n	801a74a <_printf_common+0x3e>
 801a7bc:	18e1      	adds	r1, r4, r3
 801a7be:	1c5a      	adds	r2, r3, #1
 801a7c0:	2030      	movs	r0, #48	; 0x30
 801a7c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a7c6:	4422      	add	r2, r4
 801a7c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a7cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a7d0:	3302      	adds	r3, #2
 801a7d2:	e7c7      	b.n	801a764 <_printf_common+0x58>
 801a7d4:	2301      	movs	r3, #1
 801a7d6:	4622      	mov	r2, r4
 801a7d8:	4649      	mov	r1, r9
 801a7da:	4638      	mov	r0, r7
 801a7dc:	47c0      	blx	r8
 801a7de:	3001      	adds	r0, #1
 801a7e0:	d0e6      	beq.n	801a7b0 <_printf_common+0xa4>
 801a7e2:	3601      	adds	r6, #1
 801a7e4:	e7d9      	b.n	801a79a <_printf_common+0x8e>
	...

0801a7e8 <_printf_i>:
 801a7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a7ec:	460c      	mov	r4, r1
 801a7ee:	4691      	mov	r9, r2
 801a7f0:	7e27      	ldrb	r7, [r4, #24]
 801a7f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a7f4:	2f78      	cmp	r7, #120	; 0x78
 801a7f6:	4680      	mov	r8, r0
 801a7f8:	469a      	mov	sl, r3
 801a7fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a7fe:	d807      	bhi.n	801a810 <_printf_i+0x28>
 801a800:	2f62      	cmp	r7, #98	; 0x62
 801a802:	d80a      	bhi.n	801a81a <_printf_i+0x32>
 801a804:	2f00      	cmp	r7, #0
 801a806:	f000 80d8 	beq.w	801a9ba <_printf_i+0x1d2>
 801a80a:	2f58      	cmp	r7, #88	; 0x58
 801a80c:	f000 80a3 	beq.w	801a956 <_printf_i+0x16e>
 801a810:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a818:	e03a      	b.n	801a890 <_printf_i+0xa8>
 801a81a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a81e:	2b15      	cmp	r3, #21
 801a820:	d8f6      	bhi.n	801a810 <_printf_i+0x28>
 801a822:	a001      	add	r0, pc, #4	; (adr r0, 801a828 <_printf_i+0x40>)
 801a824:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a828:	0801a881 	.word	0x0801a881
 801a82c:	0801a895 	.word	0x0801a895
 801a830:	0801a811 	.word	0x0801a811
 801a834:	0801a811 	.word	0x0801a811
 801a838:	0801a811 	.word	0x0801a811
 801a83c:	0801a811 	.word	0x0801a811
 801a840:	0801a895 	.word	0x0801a895
 801a844:	0801a811 	.word	0x0801a811
 801a848:	0801a811 	.word	0x0801a811
 801a84c:	0801a811 	.word	0x0801a811
 801a850:	0801a811 	.word	0x0801a811
 801a854:	0801a9a1 	.word	0x0801a9a1
 801a858:	0801a8c5 	.word	0x0801a8c5
 801a85c:	0801a983 	.word	0x0801a983
 801a860:	0801a811 	.word	0x0801a811
 801a864:	0801a811 	.word	0x0801a811
 801a868:	0801a9c3 	.word	0x0801a9c3
 801a86c:	0801a811 	.word	0x0801a811
 801a870:	0801a8c5 	.word	0x0801a8c5
 801a874:	0801a811 	.word	0x0801a811
 801a878:	0801a811 	.word	0x0801a811
 801a87c:	0801a98b 	.word	0x0801a98b
 801a880:	680b      	ldr	r3, [r1, #0]
 801a882:	1d1a      	adds	r2, r3, #4
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	600a      	str	r2, [r1, #0]
 801a888:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a88c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a890:	2301      	movs	r3, #1
 801a892:	e0a3      	b.n	801a9dc <_printf_i+0x1f4>
 801a894:	6825      	ldr	r5, [r4, #0]
 801a896:	6808      	ldr	r0, [r1, #0]
 801a898:	062e      	lsls	r6, r5, #24
 801a89a:	f100 0304 	add.w	r3, r0, #4
 801a89e:	d50a      	bpl.n	801a8b6 <_printf_i+0xce>
 801a8a0:	6805      	ldr	r5, [r0, #0]
 801a8a2:	600b      	str	r3, [r1, #0]
 801a8a4:	2d00      	cmp	r5, #0
 801a8a6:	da03      	bge.n	801a8b0 <_printf_i+0xc8>
 801a8a8:	232d      	movs	r3, #45	; 0x2d
 801a8aa:	426d      	negs	r5, r5
 801a8ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a8b0:	485e      	ldr	r0, [pc, #376]	; (801aa2c <_printf_i+0x244>)
 801a8b2:	230a      	movs	r3, #10
 801a8b4:	e019      	b.n	801a8ea <_printf_i+0x102>
 801a8b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a8ba:	6805      	ldr	r5, [r0, #0]
 801a8bc:	600b      	str	r3, [r1, #0]
 801a8be:	bf18      	it	ne
 801a8c0:	b22d      	sxthne	r5, r5
 801a8c2:	e7ef      	b.n	801a8a4 <_printf_i+0xbc>
 801a8c4:	680b      	ldr	r3, [r1, #0]
 801a8c6:	6825      	ldr	r5, [r4, #0]
 801a8c8:	1d18      	adds	r0, r3, #4
 801a8ca:	6008      	str	r0, [r1, #0]
 801a8cc:	0628      	lsls	r0, r5, #24
 801a8ce:	d501      	bpl.n	801a8d4 <_printf_i+0xec>
 801a8d0:	681d      	ldr	r5, [r3, #0]
 801a8d2:	e002      	b.n	801a8da <_printf_i+0xf2>
 801a8d4:	0669      	lsls	r1, r5, #25
 801a8d6:	d5fb      	bpl.n	801a8d0 <_printf_i+0xe8>
 801a8d8:	881d      	ldrh	r5, [r3, #0]
 801a8da:	4854      	ldr	r0, [pc, #336]	; (801aa2c <_printf_i+0x244>)
 801a8dc:	2f6f      	cmp	r7, #111	; 0x6f
 801a8de:	bf0c      	ite	eq
 801a8e0:	2308      	moveq	r3, #8
 801a8e2:	230a      	movne	r3, #10
 801a8e4:	2100      	movs	r1, #0
 801a8e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a8ea:	6866      	ldr	r6, [r4, #4]
 801a8ec:	60a6      	str	r6, [r4, #8]
 801a8ee:	2e00      	cmp	r6, #0
 801a8f0:	bfa2      	ittt	ge
 801a8f2:	6821      	ldrge	r1, [r4, #0]
 801a8f4:	f021 0104 	bicge.w	r1, r1, #4
 801a8f8:	6021      	strge	r1, [r4, #0]
 801a8fa:	b90d      	cbnz	r5, 801a900 <_printf_i+0x118>
 801a8fc:	2e00      	cmp	r6, #0
 801a8fe:	d04d      	beq.n	801a99c <_printf_i+0x1b4>
 801a900:	4616      	mov	r6, r2
 801a902:	fbb5 f1f3 	udiv	r1, r5, r3
 801a906:	fb03 5711 	mls	r7, r3, r1, r5
 801a90a:	5dc7      	ldrb	r7, [r0, r7]
 801a90c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a910:	462f      	mov	r7, r5
 801a912:	42bb      	cmp	r3, r7
 801a914:	460d      	mov	r5, r1
 801a916:	d9f4      	bls.n	801a902 <_printf_i+0x11a>
 801a918:	2b08      	cmp	r3, #8
 801a91a:	d10b      	bne.n	801a934 <_printf_i+0x14c>
 801a91c:	6823      	ldr	r3, [r4, #0]
 801a91e:	07df      	lsls	r7, r3, #31
 801a920:	d508      	bpl.n	801a934 <_printf_i+0x14c>
 801a922:	6923      	ldr	r3, [r4, #16]
 801a924:	6861      	ldr	r1, [r4, #4]
 801a926:	4299      	cmp	r1, r3
 801a928:	bfde      	ittt	le
 801a92a:	2330      	movle	r3, #48	; 0x30
 801a92c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a930:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a934:	1b92      	subs	r2, r2, r6
 801a936:	6122      	str	r2, [r4, #16]
 801a938:	f8cd a000 	str.w	sl, [sp]
 801a93c:	464b      	mov	r3, r9
 801a93e:	aa03      	add	r2, sp, #12
 801a940:	4621      	mov	r1, r4
 801a942:	4640      	mov	r0, r8
 801a944:	f7ff fee2 	bl	801a70c <_printf_common>
 801a948:	3001      	adds	r0, #1
 801a94a:	d14c      	bne.n	801a9e6 <_printf_i+0x1fe>
 801a94c:	f04f 30ff 	mov.w	r0, #4294967295
 801a950:	b004      	add	sp, #16
 801a952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a956:	4835      	ldr	r0, [pc, #212]	; (801aa2c <_printf_i+0x244>)
 801a958:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a95c:	6823      	ldr	r3, [r4, #0]
 801a95e:	680e      	ldr	r6, [r1, #0]
 801a960:	061f      	lsls	r7, r3, #24
 801a962:	f856 5b04 	ldr.w	r5, [r6], #4
 801a966:	600e      	str	r6, [r1, #0]
 801a968:	d514      	bpl.n	801a994 <_printf_i+0x1ac>
 801a96a:	07d9      	lsls	r1, r3, #31
 801a96c:	bf44      	itt	mi
 801a96e:	f043 0320 	orrmi.w	r3, r3, #32
 801a972:	6023      	strmi	r3, [r4, #0]
 801a974:	b91d      	cbnz	r5, 801a97e <_printf_i+0x196>
 801a976:	6823      	ldr	r3, [r4, #0]
 801a978:	f023 0320 	bic.w	r3, r3, #32
 801a97c:	6023      	str	r3, [r4, #0]
 801a97e:	2310      	movs	r3, #16
 801a980:	e7b0      	b.n	801a8e4 <_printf_i+0xfc>
 801a982:	6823      	ldr	r3, [r4, #0]
 801a984:	f043 0320 	orr.w	r3, r3, #32
 801a988:	6023      	str	r3, [r4, #0]
 801a98a:	2378      	movs	r3, #120	; 0x78
 801a98c:	4828      	ldr	r0, [pc, #160]	; (801aa30 <_printf_i+0x248>)
 801a98e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a992:	e7e3      	b.n	801a95c <_printf_i+0x174>
 801a994:	065e      	lsls	r6, r3, #25
 801a996:	bf48      	it	mi
 801a998:	b2ad      	uxthmi	r5, r5
 801a99a:	e7e6      	b.n	801a96a <_printf_i+0x182>
 801a99c:	4616      	mov	r6, r2
 801a99e:	e7bb      	b.n	801a918 <_printf_i+0x130>
 801a9a0:	680b      	ldr	r3, [r1, #0]
 801a9a2:	6826      	ldr	r6, [r4, #0]
 801a9a4:	6960      	ldr	r0, [r4, #20]
 801a9a6:	1d1d      	adds	r5, r3, #4
 801a9a8:	600d      	str	r5, [r1, #0]
 801a9aa:	0635      	lsls	r5, r6, #24
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	d501      	bpl.n	801a9b4 <_printf_i+0x1cc>
 801a9b0:	6018      	str	r0, [r3, #0]
 801a9b2:	e002      	b.n	801a9ba <_printf_i+0x1d2>
 801a9b4:	0671      	lsls	r1, r6, #25
 801a9b6:	d5fb      	bpl.n	801a9b0 <_printf_i+0x1c8>
 801a9b8:	8018      	strh	r0, [r3, #0]
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	6123      	str	r3, [r4, #16]
 801a9be:	4616      	mov	r6, r2
 801a9c0:	e7ba      	b.n	801a938 <_printf_i+0x150>
 801a9c2:	680b      	ldr	r3, [r1, #0]
 801a9c4:	1d1a      	adds	r2, r3, #4
 801a9c6:	600a      	str	r2, [r1, #0]
 801a9c8:	681e      	ldr	r6, [r3, #0]
 801a9ca:	6862      	ldr	r2, [r4, #4]
 801a9cc:	2100      	movs	r1, #0
 801a9ce:	4630      	mov	r0, r6
 801a9d0:	f7e5 fc16 	bl	8000200 <memchr>
 801a9d4:	b108      	cbz	r0, 801a9da <_printf_i+0x1f2>
 801a9d6:	1b80      	subs	r0, r0, r6
 801a9d8:	6060      	str	r0, [r4, #4]
 801a9da:	6863      	ldr	r3, [r4, #4]
 801a9dc:	6123      	str	r3, [r4, #16]
 801a9de:	2300      	movs	r3, #0
 801a9e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a9e4:	e7a8      	b.n	801a938 <_printf_i+0x150>
 801a9e6:	6923      	ldr	r3, [r4, #16]
 801a9e8:	4632      	mov	r2, r6
 801a9ea:	4649      	mov	r1, r9
 801a9ec:	4640      	mov	r0, r8
 801a9ee:	47d0      	blx	sl
 801a9f0:	3001      	adds	r0, #1
 801a9f2:	d0ab      	beq.n	801a94c <_printf_i+0x164>
 801a9f4:	6823      	ldr	r3, [r4, #0]
 801a9f6:	079b      	lsls	r3, r3, #30
 801a9f8:	d413      	bmi.n	801aa22 <_printf_i+0x23a>
 801a9fa:	68e0      	ldr	r0, [r4, #12]
 801a9fc:	9b03      	ldr	r3, [sp, #12]
 801a9fe:	4298      	cmp	r0, r3
 801aa00:	bfb8      	it	lt
 801aa02:	4618      	movlt	r0, r3
 801aa04:	e7a4      	b.n	801a950 <_printf_i+0x168>
 801aa06:	2301      	movs	r3, #1
 801aa08:	4632      	mov	r2, r6
 801aa0a:	4649      	mov	r1, r9
 801aa0c:	4640      	mov	r0, r8
 801aa0e:	47d0      	blx	sl
 801aa10:	3001      	adds	r0, #1
 801aa12:	d09b      	beq.n	801a94c <_printf_i+0x164>
 801aa14:	3501      	adds	r5, #1
 801aa16:	68e3      	ldr	r3, [r4, #12]
 801aa18:	9903      	ldr	r1, [sp, #12]
 801aa1a:	1a5b      	subs	r3, r3, r1
 801aa1c:	42ab      	cmp	r3, r5
 801aa1e:	dcf2      	bgt.n	801aa06 <_printf_i+0x21e>
 801aa20:	e7eb      	b.n	801a9fa <_printf_i+0x212>
 801aa22:	2500      	movs	r5, #0
 801aa24:	f104 0619 	add.w	r6, r4, #25
 801aa28:	e7f5      	b.n	801aa16 <_printf_i+0x22e>
 801aa2a:	bf00      	nop
 801aa2c:	08021118 	.word	0x08021118
 801aa30:	08021129 	.word	0x08021129

0801aa34 <_scanf_float>:
 801aa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa38:	b087      	sub	sp, #28
 801aa3a:	4617      	mov	r7, r2
 801aa3c:	9303      	str	r3, [sp, #12]
 801aa3e:	688b      	ldr	r3, [r1, #8]
 801aa40:	1e5a      	subs	r2, r3, #1
 801aa42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801aa46:	bf83      	ittte	hi
 801aa48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801aa4c:	195b      	addhi	r3, r3, r5
 801aa4e:	9302      	strhi	r3, [sp, #8]
 801aa50:	2300      	movls	r3, #0
 801aa52:	bf86      	itte	hi
 801aa54:	f240 135d 	movwhi	r3, #349	; 0x15d
 801aa58:	608b      	strhi	r3, [r1, #8]
 801aa5a:	9302      	strls	r3, [sp, #8]
 801aa5c:	680b      	ldr	r3, [r1, #0]
 801aa5e:	468b      	mov	fp, r1
 801aa60:	2500      	movs	r5, #0
 801aa62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801aa66:	f84b 3b1c 	str.w	r3, [fp], #28
 801aa6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801aa6e:	4680      	mov	r8, r0
 801aa70:	460c      	mov	r4, r1
 801aa72:	465e      	mov	r6, fp
 801aa74:	46aa      	mov	sl, r5
 801aa76:	46a9      	mov	r9, r5
 801aa78:	9501      	str	r5, [sp, #4]
 801aa7a:	68a2      	ldr	r2, [r4, #8]
 801aa7c:	b152      	cbz	r2, 801aa94 <_scanf_float+0x60>
 801aa7e:	683b      	ldr	r3, [r7, #0]
 801aa80:	781b      	ldrb	r3, [r3, #0]
 801aa82:	2b4e      	cmp	r3, #78	; 0x4e
 801aa84:	d864      	bhi.n	801ab50 <_scanf_float+0x11c>
 801aa86:	2b40      	cmp	r3, #64	; 0x40
 801aa88:	d83c      	bhi.n	801ab04 <_scanf_float+0xd0>
 801aa8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801aa8e:	b2c8      	uxtb	r0, r1
 801aa90:	280e      	cmp	r0, #14
 801aa92:	d93a      	bls.n	801ab0a <_scanf_float+0xd6>
 801aa94:	f1b9 0f00 	cmp.w	r9, #0
 801aa98:	d003      	beq.n	801aaa2 <_scanf_float+0x6e>
 801aa9a:	6823      	ldr	r3, [r4, #0]
 801aa9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801aaa0:	6023      	str	r3, [r4, #0]
 801aaa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aaa6:	f1ba 0f01 	cmp.w	sl, #1
 801aaaa:	f200 8113 	bhi.w	801acd4 <_scanf_float+0x2a0>
 801aaae:	455e      	cmp	r6, fp
 801aab0:	f200 8105 	bhi.w	801acbe <_scanf_float+0x28a>
 801aab4:	2501      	movs	r5, #1
 801aab6:	4628      	mov	r0, r5
 801aab8:	b007      	add	sp, #28
 801aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801aac2:	2a0d      	cmp	r2, #13
 801aac4:	d8e6      	bhi.n	801aa94 <_scanf_float+0x60>
 801aac6:	a101      	add	r1, pc, #4	; (adr r1, 801aacc <_scanf_float+0x98>)
 801aac8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801aacc:	0801ac0b 	.word	0x0801ac0b
 801aad0:	0801aa95 	.word	0x0801aa95
 801aad4:	0801aa95 	.word	0x0801aa95
 801aad8:	0801aa95 	.word	0x0801aa95
 801aadc:	0801ac6b 	.word	0x0801ac6b
 801aae0:	0801ac43 	.word	0x0801ac43
 801aae4:	0801aa95 	.word	0x0801aa95
 801aae8:	0801aa95 	.word	0x0801aa95
 801aaec:	0801ac19 	.word	0x0801ac19
 801aaf0:	0801aa95 	.word	0x0801aa95
 801aaf4:	0801aa95 	.word	0x0801aa95
 801aaf8:	0801aa95 	.word	0x0801aa95
 801aafc:	0801aa95 	.word	0x0801aa95
 801ab00:	0801abd1 	.word	0x0801abd1
 801ab04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801ab08:	e7db      	b.n	801aac2 <_scanf_float+0x8e>
 801ab0a:	290e      	cmp	r1, #14
 801ab0c:	d8c2      	bhi.n	801aa94 <_scanf_float+0x60>
 801ab0e:	a001      	add	r0, pc, #4	; (adr r0, 801ab14 <_scanf_float+0xe0>)
 801ab10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ab14:	0801abc3 	.word	0x0801abc3
 801ab18:	0801aa95 	.word	0x0801aa95
 801ab1c:	0801abc3 	.word	0x0801abc3
 801ab20:	0801ac57 	.word	0x0801ac57
 801ab24:	0801aa95 	.word	0x0801aa95
 801ab28:	0801ab71 	.word	0x0801ab71
 801ab2c:	0801abad 	.word	0x0801abad
 801ab30:	0801abad 	.word	0x0801abad
 801ab34:	0801abad 	.word	0x0801abad
 801ab38:	0801abad 	.word	0x0801abad
 801ab3c:	0801abad 	.word	0x0801abad
 801ab40:	0801abad 	.word	0x0801abad
 801ab44:	0801abad 	.word	0x0801abad
 801ab48:	0801abad 	.word	0x0801abad
 801ab4c:	0801abad 	.word	0x0801abad
 801ab50:	2b6e      	cmp	r3, #110	; 0x6e
 801ab52:	d809      	bhi.n	801ab68 <_scanf_float+0x134>
 801ab54:	2b60      	cmp	r3, #96	; 0x60
 801ab56:	d8b2      	bhi.n	801aabe <_scanf_float+0x8a>
 801ab58:	2b54      	cmp	r3, #84	; 0x54
 801ab5a:	d077      	beq.n	801ac4c <_scanf_float+0x218>
 801ab5c:	2b59      	cmp	r3, #89	; 0x59
 801ab5e:	d199      	bne.n	801aa94 <_scanf_float+0x60>
 801ab60:	2d07      	cmp	r5, #7
 801ab62:	d197      	bne.n	801aa94 <_scanf_float+0x60>
 801ab64:	2508      	movs	r5, #8
 801ab66:	e029      	b.n	801abbc <_scanf_float+0x188>
 801ab68:	2b74      	cmp	r3, #116	; 0x74
 801ab6a:	d06f      	beq.n	801ac4c <_scanf_float+0x218>
 801ab6c:	2b79      	cmp	r3, #121	; 0x79
 801ab6e:	e7f6      	b.n	801ab5e <_scanf_float+0x12a>
 801ab70:	6821      	ldr	r1, [r4, #0]
 801ab72:	05c8      	lsls	r0, r1, #23
 801ab74:	d51a      	bpl.n	801abac <_scanf_float+0x178>
 801ab76:	9b02      	ldr	r3, [sp, #8]
 801ab78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801ab7c:	6021      	str	r1, [r4, #0]
 801ab7e:	f109 0901 	add.w	r9, r9, #1
 801ab82:	b11b      	cbz	r3, 801ab8c <_scanf_float+0x158>
 801ab84:	3b01      	subs	r3, #1
 801ab86:	3201      	adds	r2, #1
 801ab88:	9302      	str	r3, [sp, #8]
 801ab8a:	60a2      	str	r2, [r4, #8]
 801ab8c:	68a3      	ldr	r3, [r4, #8]
 801ab8e:	3b01      	subs	r3, #1
 801ab90:	60a3      	str	r3, [r4, #8]
 801ab92:	6923      	ldr	r3, [r4, #16]
 801ab94:	3301      	adds	r3, #1
 801ab96:	6123      	str	r3, [r4, #16]
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	3b01      	subs	r3, #1
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	607b      	str	r3, [r7, #4]
 801aba0:	f340 8084 	ble.w	801acac <_scanf_float+0x278>
 801aba4:	683b      	ldr	r3, [r7, #0]
 801aba6:	3301      	adds	r3, #1
 801aba8:	603b      	str	r3, [r7, #0]
 801abaa:	e766      	b.n	801aa7a <_scanf_float+0x46>
 801abac:	eb1a 0f05 	cmn.w	sl, r5
 801abb0:	f47f af70 	bne.w	801aa94 <_scanf_float+0x60>
 801abb4:	6822      	ldr	r2, [r4, #0]
 801abb6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801abba:	6022      	str	r2, [r4, #0]
 801abbc:	f806 3b01 	strb.w	r3, [r6], #1
 801abc0:	e7e4      	b.n	801ab8c <_scanf_float+0x158>
 801abc2:	6822      	ldr	r2, [r4, #0]
 801abc4:	0610      	lsls	r0, r2, #24
 801abc6:	f57f af65 	bpl.w	801aa94 <_scanf_float+0x60>
 801abca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801abce:	e7f4      	b.n	801abba <_scanf_float+0x186>
 801abd0:	f1ba 0f00 	cmp.w	sl, #0
 801abd4:	d10e      	bne.n	801abf4 <_scanf_float+0x1c0>
 801abd6:	f1b9 0f00 	cmp.w	r9, #0
 801abda:	d10e      	bne.n	801abfa <_scanf_float+0x1c6>
 801abdc:	6822      	ldr	r2, [r4, #0]
 801abde:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801abe2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801abe6:	d108      	bne.n	801abfa <_scanf_float+0x1c6>
 801abe8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801abec:	6022      	str	r2, [r4, #0]
 801abee:	f04f 0a01 	mov.w	sl, #1
 801abf2:	e7e3      	b.n	801abbc <_scanf_float+0x188>
 801abf4:	f1ba 0f02 	cmp.w	sl, #2
 801abf8:	d055      	beq.n	801aca6 <_scanf_float+0x272>
 801abfa:	2d01      	cmp	r5, #1
 801abfc:	d002      	beq.n	801ac04 <_scanf_float+0x1d0>
 801abfe:	2d04      	cmp	r5, #4
 801ac00:	f47f af48 	bne.w	801aa94 <_scanf_float+0x60>
 801ac04:	3501      	adds	r5, #1
 801ac06:	b2ed      	uxtb	r5, r5
 801ac08:	e7d8      	b.n	801abbc <_scanf_float+0x188>
 801ac0a:	f1ba 0f01 	cmp.w	sl, #1
 801ac0e:	f47f af41 	bne.w	801aa94 <_scanf_float+0x60>
 801ac12:	f04f 0a02 	mov.w	sl, #2
 801ac16:	e7d1      	b.n	801abbc <_scanf_float+0x188>
 801ac18:	b97d      	cbnz	r5, 801ac3a <_scanf_float+0x206>
 801ac1a:	f1b9 0f00 	cmp.w	r9, #0
 801ac1e:	f47f af3c 	bne.w	801aa9a <_scanf_float+0x66>
 801ac22:	6822      	ldr	r2, [r4, #0]
 801ac24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ac28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ac2c:	f47f af39 	bne.w	801aaa2 <_scanf_float+0x6e>
 801ac30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ac34:	6022      	str	r2, [r4, #0]
 801ac36:	2501      	movs	r5, #1
 801ac38:	e7c0      	b.n	801abbc <_scanf_float+0x188>
 801ac3a:	2d03      	cmp	r5, #3
 801ac3c:	d0e2      	beq.n	801ac04 <_scanf_float+0x1d0>
 801ac3e:	2d05      	cmp	r5, #5
 801ac40:	e7de      	b.n	801ac00 <_scanf_float+0x1cc>
 801ac42:	2d02      	cmp	r5, #2
 801ac44:	f47f af26 	bne.w	801aa94 <_scanf_float+0x60>
 801ac48:	2503      	movs	r5, #3
 801ac4a:	e7b7      	b.n	801abbc <_scanf_float+0x188>
 801ac4c:	2d06      	cmp	r5, #6
 801ac4e:	f47f af21 	bne.w	801aa94 <_scanf_float+0x60>
 801ac52:	2507      	movs	r5, #7
 801ac54:	e7b2      	b.n	801abbc <_scanf_float+0x188>
 801ac56:	6822      	ldr	r2, [r4, #0]
 801ac58:	0591      	lsls	r1, r2, #22
 801ac5a:	f57f af1b 	bpl.w	801aa94 <_scanf_float+0x60>
 801ac5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801ac62:	6022      	str	r2, [r4, #0]
 801ac64:	f8cd 9004 	str.w	r9, [sp, #4]
 801ac68:	e7a8      	b.n	801abbc <_scanf_float+0x188>
 801ac6a:	6822      	ldr	r2, [r4, #0]
 801ac6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801ac70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801ac74:	d006      	beq.n	801ac84 <_scanf_float+0x250>
 801ac76:	0550      	lsls	r0, r2, #21
 801ac78:	f57f af0c 	bpl.w	801aa94 <_scanf_float+0x60>
 801ac7c:	f1b9 0f00 	cmp.w	r9, #0
 801ac80:	f43f af0f 	beq.w	801aaa2 <_scanf_float+0x6e>
 801ac84:	0591      	lsls	r1, r2, #22
 801ac86:	bf58      	it	pl
 801ac88:	9901      	ldrpl	r1, [sp, #4]
 801ac8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ac8e:	bf58      	it	pl
 801ac90:	eba9 0101 	subpl.w	r1, r9, r1
 801ac94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801ac98:	bf58      	it	pl
 801ac9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801ac9e:	6022      	str	r2, [r4, #0]
 801aca0:	f04f 0900 	mov.w	r9, #0
 801aca4:	e78a      	b.n	801abbc <_scanf_float+0x188>
 801aca6:	f04f 0a03 	mov.w	sl, #3
 801acaa:	e787      	b.n	801abbc <_scanf_float+0x188>
 801acac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801acb0:	4639      	mov	r1, r7
 801acb2:	4640      	mov	r0, r8
 801acb4:	4798      	blx	r3
 801acb6:	2800      	cmp	r0, #0
 801acb8:	f43f aedf 	beq.w	801aa7a <_scanf_float+0x46>
 801acbc:	e6ea      	b.n	801aa94 <_scanf_float+0x60>
 801acbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801acc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801acc6:	463a      	mov	r2, r7
 801acc8:	4640      	mov	r0, r8
 801acca:	4798      	blx	r3
 801accc:	6923      	ldr	r3, [r4, #16]
 801acce:	3b01      	subs	r3, #1
 801acd0:	6123      	str	r3, [r4, #16]
 801acd2:	e6ec      	b.n	801aaae <_scanf_float+0x7a>
 801acd4:	1e6b      	subs	r3, r5, #1
 801acd6:	2b06      	cmp	r3, #6
 801acd8:	d825      	bhi.n	801ad26 <_scanf_float+0x2f2>
 801acda:	2d02      	cmp	r5, #2
 801acdc:	d836      	bhi.n	801ad4c <_scanf_float+0x318>
 801acde:	455e      	cmp	r6, fp
 801ace0:	f67f aee8 	bls.w	801aab4 <_scanf_float+0x80>
 801ace4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ace8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801acec:	463a      	mov	r2, r7
 801acee:	4640      	mov	r0, r8
 801acf0:	4798      	blx	r3
 801acf2:	6923      	ldr	r3, [r4, #16]
 801acf4:	3b01      	subs	r3, #1
 801acf6:	6123      	str	r3, [r4, #16]
 801acf8:	e7f1      	b.n	801acde <_scanf_float+0x2aa>
 801acfa:	9802      	ldr	r0, [sp, #8]
 801acfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ad00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801ad04:	9002      	str	r0, [sp, #8]
 801ad06:	463a      	mov	r2, r7
 801ad08:	4640      	mov	r0, r8
 801ad0a:	4798      	blx	r3
 801ad0c:	6923      	ldr	r3, [r4, #16]
 801ad0e:	3b01      	subs	r3, #1
 801ad10:	6123      	str	r3, [r4, #16]
 801ad12:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ad16:	fa5f fa8a 	uxtb.w	sl, sl
 801ad1a:	f1ba 0f02 	cmp.w	sl, #2
 801ad1e:	d1ec      	bne.n	801acfa <_scanf_float+0x2c6>
 801ad20:	3d03      	subs	r5, #3
 801ad22:	b2ed      	uxtb	r5, r5
 801ad24:	1b76      	subs	r6, r6, r5
 801ad26:	6823      	ldr	r3, [r4, #0]
 801ad28:	05da      	lsls	r2, r3, #23
 801ad2a:	d52f      	bpl.n	801ad8c <_scanf_float+0x358>
 801ad2c:	055b      	lsls	r3, r3, #21
 801ad2e:	d510      	bpl.n	801ad52 <_scanf_float+0x31e>
 801ad30:	455e      	cmp	r6, fp
 801ad32:	f67f aebf 	bls.w	801aab4 <_scanf_float+0x80>
 801ad36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ad3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ad3e:	463a      	mov	r2, r7
 801ad40:	4640      	mov	r0, r8
 801ad42:	4798      	blx	r3
 801ad44:	6923      	ldr	r3, [r4, #16]
 801ad46:	3b01      	subs	r3, #1
 801ad48:	6123      	str	r3, [r4, #16]
 801ad4a:	e7f1      	b.n	801ad30 <_scanf_float+0x2fc>
 801ad4c:	46aa      	mov	sl, r5
 801ad4e:	9602      	str	r6, [sp, #8]
 801ad50:	e7df      	b.n	801ad12 <_scanf_float+0x2de>
 801ad52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ad56:	6923      	ldr	r3, [r4, #16]
 801ad58:	2965      	cmp	r1, #101	; 0x65
 801ad5a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ad5e:	f106 35ff 	add.w	r5, r6, #4294967295
 801ad62:	6123      	str	r3, [r4, #16]
 801ad64:	d00c      	beq.n	801ad80 <_scanf_float+0x34c>
 801ad66:	2945      	cmp	r1, #69	; 0x45
 801ad68:	d00a      	beq.n	801ad80 <_scanf_float+0x34c>
 801ad6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ad6e:	463a      	mov	r2, r7
 801ad70:	4640      	mov	r0, r8
 801ad72:	4798      	blx	r3
 801ad74:	6923      	ldr	r3, [r4, #16]
 801ad76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ad7a:	3b01      	subs	r3, #1
 801ad7c:	1eb5      	subs	r5, r6, #2
 801ad7e:	6123      	str	r3, [r4, #16]
 801ad80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ad84:	463a      	mov	r2, r7
 801ad86:	4640      	mov	r0, r8
 801ad88:	4798      	blx	r3
 801ad8a:	462e      	mov	r6, r5
 801ad8c:	6825      	ldr	r5, [r4, #0]
 801ad8e:	f015 0510 	ands.w	r5, r5, #16
 801ad92:	d158      	bne.n	801ae46 <_scanf_float+0x412>
 801ad94:	7035      	strb	r5, [r6, #0]
 801ad96:	6823      	ldr	r3, [r4, #0]
 801ad98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ad9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ada0:	d11c      	bne.n	801addc <_scanf_float+0x3a8>
 801ada2:	9b01      	ldr	r3, [sp, #4]
 801ada4:	454b      	cmp	r3, r9
 801ada6:	eba3 0209 	sub.w	r2, r3, r9
 801adaa:	d124      	bne.n	801adf6 <_scanf_float+0x3c2>
 801adac:	2200      	movs	r2, #0
 801adae:	4659      	mov	r1, fp
 801adb0:	4640      	mov	r0, r8
 801adb2:	f001 f873 	bl	801be9c <_strtod_r>
 801adb6:	9b03      	ldr	r3, [sp, #12]
 801adb8:	6821      	ldr	r1, [r4, #0]
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	f011 0f02 	tst.w	r1, #2
 801adc0:	ec57 6b10 	vmov	r6, r7, d0
 801adc4:	f103 0204 	add.w	r2, r3, #4
 801adc8:	d020      	beq.n	801ae0c <_scanf_float+0x3d8>
 801adca:	9903      	ldr	r1, [sp, #12]
 801adcc:	600a      	str	r2, [r1, #0]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	e9c3 6700 	strd	r6, r7, [r3]
 801add4:	68e3      	ldr	r3, [r4, #12]
 801add6:	3301      	adds	r3, #1
 801add8:	60e3      	str	r3, [r4, #12]
 801adda:	e66c      	b.n	801aab6 <_scanf_float+0x82>
 801addc:	9b04      	ldr	r3, [sp, #16]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d0e4      	beq.n	801adac <_scanf_float+0x378>
 801ade2:	9905      	ldr	r1, [sp, #20]
 801ade4:	230a      	movs	r3, #10
 801ade6:	462a      	mov	r2, r5
 801ade8:	3101      	adds	r1, #1
 801adea:	4640      	mov	r0, r8
 801adec:	f001 f8e0 	bl	801bfb0 <_strtol_r>
 801adf0:	9b04      	ldr	r3, [sp, #16]
 801adf2:	9e05      	ldr	r6, [sp, #20]
 801adf4:	1ac2      	subs	r2, r0, r3
 801adf6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801adfa:	429e      	cmp	r6, r3
 801adfc:	bf28      	it	cs
 801adfe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ae02:	4912      	ldr	r1, [pc, #72]	; (801ae4c <_scanf_float+0x418>)
 801ae04:	4630      	mov	r0, r6
 801ae06:	f000 f977 	bl	801b0f8 <siprintf>
 801ae0a:	e7cf      	b.n	801adac <_scanf_float+0x378>
 801ae0c:	f011 0f04 	tst.w	r1, #4
 801ae10:	9903      	ldr	r1, [sp, #12]
 801ae12:	600a      	str	r2, [r1, #0]
 801ae14:	d1db      	bne.n	801adce <_scanf_float+0x39a>
 801ae16:	f8d3 8000 	ldr.w	r8, [r3]
 801ae1a:	ee10 2a10 	vmov	r2, s0
 801ae1e:	ee10 0a10 	vmov	r0, s0
 801ae22:	463b      	mov	r3, r7
 801ae24:	4639      	mov	r1, r7
 801ae26:	f7e5 fe91 	bl	8000b4c <__aeabi_dcmpun>
 801ae2a:	b128      	cbz	r0, 801ae38 <_scanf_float+0x404>
 801ae2c:	4808      	ldr	r0, [pc, #32]	; (801ae50 <_scanf_float+0x41c>)
 801ae2e:	f000 f919 	bl	801b064 <nanf>
 801ae32:	ed88 0a00 	vstr	s0, [r8]
 801ae36:	e7cd      	b.n	801add4 <_scanf_float+0x3a0>
 801ae38:	4630      	mov	r0, r6
 801ae3a:	4639      	mov	r1, r7
 801ae3c:	f7e5 fee4 	bl	8000c08 <__aeabi_d2f>
 801ae40:	f8c8 0000 	str.w	r0, [r8]
 801ae44:	e7c6      	b.n	801add4 <_scanf_float+0x3a0>
 801ae46:	2500      	movs	r5, #0
 801ae48:	e635      	b.n	801aab6 <_scanf_float+0x82>
 801ae4a:	bf00      	nop
 801ae4c:	0802113a 	.word	0x0802113a
 801ae50:	080211cb 	.word	0x080211cb

0801ae54 <iprintf>:
 801ae54:	b40f      	push	{r0, r1, r2, r3}
 801ae56:	4b0a      	ldr	r3, [pc, #40]	; (801ae80 <iprintf+0x2c>)
 801ae58:	b513      	push	{r0, r1, r4, lr}
 801ae5a:	681c      	ldr	r4, [r3, #0]
 801ae5c:	b124      	cbz	r4, 801ae68 <iprintf+0x14>
 801ae5e:	69a3      	ldr	r3, [r4, #24]
 801ae60:	b913      	cbnz	r3, 801ae68 <iprintf+0x14>
 801ae62:	4620      	mov	r0, r4
 801ae64:	f7fe ffd4 	bl	8019e10 <__sinit>
 801ae68:	ab05      	add	r3, sp, #20
 801ae6a:	9a04      	ldr	r2, [sp, #16]
 801ae6c:	68a1      	ldr	r1, [r4, #8]
 801ae6e:	9301      	str	r3, [sp, #4]
 801ae70:	4620      	mov	r0, r4
 801ae72:	f003 fdfd 	bl	801ea70 <_vfiprintf_r>
 801ae76:	b002      	add	sp, #8
 801ae78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae7c:	b004      	add	sp, #16
 801ae7e:	4770      	bx	lr
 801ae80:	20000200 	.word	0x20000200

0801ae84 <_puts_r>:
 801ae84:	b570      	push	{r4, r5, r6, lr}
 801ae86:	460e      	mov	r6, r1
 801ae88:	4605      	mov	r5, r0
 801ae8a:	b118      	cbz	r0, 801ae94 <_puts_r+0x10>
 801ae8c:	6983      	ldr	r3, [r0, #24]
 801ae8e:	b90b      	cbnz	r3, 801ae94 <_puts_r+0x10>
 801ae90:	f7fe ffbe 	bl	8019e10 <__sinit>
 801ae94:	69ab      	ldr	r3, [r5, #24]
 801ae96:	68ac      	ldr	r4, [r5, #8]
 801ae98:	b913      	cbnz	r3, 801aea0 <_puts_r+0x1c>
 801ae9a:	4628      	mov	r0, r5
 801ae9c:	f7fe ffb8 	bl	8019e10 <__sinit>
 801aea0:	4b2c      	ldr	r3, [pc, #176]	; (801af54 <_puts_r+0xd0>)
 801aea2:	429c      	cmp	r4, r3
 801aea4:	d120      	bne.n	801aee8 <_puts_r+0x64>
 801aea6:	686c      	ldr	r4, [r5, #4]
 801aea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aeaa:	07db      	lsls	r3, r3, #31
 801aeac:	d405      	bmi.n	801aeba <_puts_r+0x36>
 801aeae:	89a3      	ldrh	r3, [r4, #12]
 801aeb0:	0598      	lsls	r0, r3, #22
 801aeb2:	d402      	bmi.n	801aeba <_puts_r+0x36>
 801aeb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aeb6:	f7ff f86e 	bl	8019f96 <__retarget_lock_acquire_recursive>
 801aeba:	89a3      	ldrh	r3, [r4, #12]
 801aebc:	0719      	lsls	r1, r3, #28
 801aebe:	d51d      	bpl.n	801aefc <_puts_r+0x78>
 801aec0:	6923      	ldr	r3, [r4, #16]
 801aec2:	b1db      	cbz	r3, 801aefc <_puts_r+0x78>
 801aec4:	3e01      	subs	r6, #1
 801aec6:	68a3      	ldr	r3, [r4, #8]
 801aec8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801aecc:	3b01      	subs	r3, #1
 801aece:	60a3      	str	r3, [r4, #8]
 801aed0:	bb39      	cbnz	r1, 801af22 <_puts_r+0x9e>
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	da38      	bge.n	801af48 <_puts_r+0xc4>
 801aed6:	4622      	mov	r2, r4
 801aed8:	210a      	movs	r1, #10
 801aeda:	4628      	mov	r0, r5
 801aedc:	f001 f92c 	bl	801c138 <__swbuf_r>
 801aee0:	3001      	adds	r0, #1
 801aee2:	d011      	beq.n	801af08 <_puts_r+0x84>
 801aee4:	250a      	movs	r5, #10
 801aee6:	e011      	b.n	801af0c <_puts_r+0x88>
 801aee8:	4b1b      	ldr	r3, [pc, #108]	; (801af58 <_puts_r+0xd4>)
 801aeea:	429c      	cmp	r4, r3
 801aeec:	d101      	bne.n	801aef2 <_puts_r+0x6e>
 801aeee:	68ac      	ldr	r4, [r5, #8]
 801aef0:	e7da      	b.n	801aea8 <_puts_r+0x24>
 801aef2:	4b1a      	ldr	r3, [pc, #104]	; (801af5c <_puts_r+0xd8>)
 801aef4:	429c      	cmp	r4, r3
 801aef6:	bf08      	it	eq
 801aef8:	68ec      	ldreq	r4, [r5, #12]
 801aefa:	e7d5      	b.n	801aea8 <_puts_r+0x24>
 801aefc:	4621      	mov	r1, r4
 801aefe:	4628      	mov	r0, r5
 801af00:	f001 f97e 	bl	801c200 <__swsetup_r>
 801af04:	2800      	cmp	r0, #0
 801af06:	d0dd      	beq.n	801aec4 <_puts_r+0x40>
 801af08:	f04f 35ff 	mov.w	r5, #4294967295
 801af0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801af0e:	07da      	lsls	r2, r3, #31
 801af10:	d405      	bmi.n	801af1e <_puts_r+0x9a>
 801af12:	89a3      	ldrh	r3, [r4, #12]
 801af14:	059b      	lsls	r3, r3, #22
 801af16:	d402      	bmi.n	801af1e <_puts_r+0x9a>
 801af18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801af1a:	f7ff f83d 	bl	8019f98 <__retarget_lock_release_recursive>
 801af1e:	4628      	mov	r0, r5
 801af20:	bd70      	pop	{r4, r5, r6, pc}
 801af22:	2b00      	cmp	r3, #0
 801af24:	da04      	bge.n	801af30 <_puts_r+0xac>
 801af26:	69a2      	ldr	r2, [r4, #24]
 801af28:	429a      	cmp	r2, r3
 801af2a:	dc06      	bgt.n	801af3a <_puts_r+0xb6>
 801af2c:	290a      	cmp	r1, #10
 801af2e:	d004      	beq.n	801af3a <_puts_r+0xb6>
 801af30:	6823      	ldr	r3, [r4, #0]
 801af32:	1c5a      	adds	r2, r3, #1
 801af34:	6022      	str	r2, [r4, #0]
 801af36:	7019      	strb	r1, [r3, #0]
 801af38:	e7c5      	b.n	801aec6 <_puts_r+0x42>
 801af3a:	4622      	mov	r2, r4
 801af3c:	4628      	mov	r0, r5
 801af3e:	f001 f8fb 	bl	801c138 <__swbuf_r>
 801af42:	3001      	adds	r0, #1
 801af44:	d1bf      	bne.n	801aec6 <_puts_r+0x42>
 801af46:	e7df      	b.n	801af08 <_puts_r+0x84>
 801af48:	6823      	ldr	r3, [r4, #0]
 801af4a:	250a      	movs	r5, #10
 801af4c:	1c5a      	adds	r2, r3, #1
 801af4e:	6022      	str	r2, [r4, #0]
 801af50:	701d      	strb	r5, [r3, #0]
 801af52:	e7db      	b.n	801af0c <_puts_r+0x88>
 801af54:	080210c4 	.word	0x080210c4
 801af58:	080210e4 	.word	0x080210e4
 801af5c:	080210a4 	.word	0x080210a4

0801af60 <puts>:
 801af60:	4b02      	ldr	r3, [pc, #8]	; (801af6c <puts+0xc>)
 801af62:	4601      	mov	r1, r0
 801af64:	6818      	ldr	r0, [r3, #0]
 801af66:	f7ff bf8d 	b.w	801ae84 <_puts_r>
 801af6a:	bf00      	nop
 801af6c:	20000200 	.word	0x20000200

0801af70 <cleanup_glue>:
 801af70:	b538      	push	{r3, r4, r5, lr}
 801af72:	460c      	mov	r4, r1
 801af74:	6809      	ldr	r1, [r1, #0]
 801af76:	4605      	mov	r5, r0
 801af78:	b109      	cbz	r1, 801af7e <cleanup_glue+0xe>
 801af7a:	f7ff fff9 	bl	801af70 <cleanup_glue>
 801af7e:	4621      	mov	r1, r4
 801af80:	4628      	mov	r0, r5
 801af82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af86:	f7ff b841 	b.w	801a00c <_free_r>
	...

0801af8c <_reclaim_reent>:
 801af8c:	4b2c      	ldr	r3, [pc, #176]	; (801b040 <_reclaim_reent+0xb4>)
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	4283      	cmp	r3, r0
 801af92:	b570      	push	{r4, r5, r6, lr}
 801af94:	4604      	mov	r4, r0
 801af96:	d051      	beq.n	801b03c <_reclaim_reent+0xb0>
 801af98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801af9a:	b143      	cbz	r3, 801afae <_reclaim_reent+0x22>
 801af9c:	68db      	ldr	r3, [r3, #12]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d14a      	bne.n	801b038 <_reclaim_reent+0xac>
 801afa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afa4:	6819      	ldr	r1, [r3, #0]
 801afa6:	b111      	cbz	r1, 801afae <_reclaim_reent+0x22>
 801afa8:	4620      	mov	r0, r4
 801afaa:	f7ff f82f 	bl	801a00c <_free_r>
 801afae:	6961      	ldr	r1, [r4, #20]
 801afb0:	b111      	cbz	r1, 801afb8 <_reclaim_reent+0x2c>
 801afb2:	4620      	mov	r0, r4
 801afb4:	f7ff f82a 	bl	801a00c <_free_r>
 801afb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801afba:	b111      	cbz	r1, 801afc2 <_reclaim_reent+0x36>
 801afbc:	4620      	mov	r0, r4
 801afbe:	f7ff f825 	bl	801a00c <_free_r>
 801afc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801afc4:	b111      	cbz	r1, 801afcc <_reclaim_reent+0x40>
 801afc6:	4620      	mov	r0, r4
 801afc8:	f7ff f820 	bl	801a00c <_free_r>
 801afcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801afce:	b111      	cbz	r1, 801afd6 <_reclaim_reent+0x4a>
 801afd0:	4620      	mov	r0, r4
 801afd2:	f7ff f81b 	bl	801a00c <_free_r>
 801afd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801afd8:	b111      	cbz	r1, 801afe0 <_reclaim_reent+0x54>
 801afda:	4620      	mov	r0, r4
 801afdc:	f7ff f816 	bl	801a00c <_free_r>
 801afe0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801afe2:	b111      	cbz	r1, 801afea <_reclaim_reent+0x5e>
 801afe4:	4620      	mov	r0, r4
 801afe6:	f7ff f811 	bl	801a00c <_free_r>
 801afea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801afec:	b111      	cbz	r1, 801aff4 <_reclaim_reent+0x68>
 801afee:	4620      	mov	r0, r4
 801aff0:	f7ff f80c 	bl	801a00c <_free_r>
 801aff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aff6:	b111      	cbz	r1, 801affe <_reclaim_reent+0x72>
 801aff8:	4620      	mov	r0, r4
 801affa:	f7ff f807 	bl	801a00c <_free_r>
 801affe:	69a3      	ldr	r3, [r4, #24]
 801b000:	b1e3      	cbz	r3, 801b03c <_reclaim_reent+0xb0>
 801b002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b004:	4620      	mov	r0, r4
 801b006:	4798      	blx	r3
 801b008:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b00a:	b1b9      	cbz	r1, 801b03c <_reclaim_reent+0xb0>
 801b00c:	4620      	mov	r0, r4
 801b00e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b012:	f7ff bfad 	b.w	801af70 <cleanup_glue>
 801b016:	5949      	ldr	r1, [r1, r5]
 801b018:	b941      	cbnz	r1, 801b02c <_reclaim_reent+0xa0>
 801b01a:	3504      	adds	r5, #4
 801b01c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b01e:	2d80      	cmp	r5, #128	; 0x80
 801b020:	68d9      	ldr	r1, [r3, #12]
 801b022:	d1f8      	bne.n	801b016 <_reclaim_reent+0x8a>
 801b024:	4620      	mov	r0, r4
 801b026:	f7fe fff1 	bl	801a00c <_free_r>
 801b02a:	e7ba      	b.n	801afa2 <_reclaim_reent+0x16>
 801b02c:	680e      	ldr	r6, [r1, #0]
 801b02e:	4620      	mov	r0, r4
 801b030:	f7fe ffec 	bl	801a00c <_free_r>
 801b034:	4631      	mov	r1, r6
 801b036:	e7ef      	b.n	801b018 <_reclaim_reent+0x8c>
 801b038:	2500      	movs	r5, #0
 801b03a:	e7ef      	b.n	801b01c <_reclaim_reent+0x90>
 801b03c:	bd70      	pop	{r4, r5, r6, pc}
 801b03e:	bf00      	nop
 801b040:	20000200 	.word	0x20000200

0801b044 <_sbrk_r>:
 801b044:	b538      	push	{r3, r4, r5, lr}
 801b046:	4d06      	ldr	r5, [pc, #24]	; (801b060 <_sbrk_r+0x1c>)
 801b048:	2300      	movs	r3, #0
 801b04a:	4604      	mov	r4, r0
 801b04c:	4608      	mov	r0, r1
 801b04e:	602b      	str	r3, [r5, #0]
 801b050:	f7e8 f8f4 	bl	800323c <_sbrk>
 801b054:	1c43      	adds	r3, r0, #1
 801b056:	d102      	bne.n	801b05e <_sbrk_r+0x1a>
 801b058:	682b      	ldr	r3, [r5, #0]
 801b05a:	b103      	cbz	r3, 801b05e <_sbrk_r+0x1a>
 801b05c:	6023      	str	r3, [r4, #0]
 801b05e:	bd38      	pop	{r3, r4, r5, pc}
 801b060:	20008e08 	.word	0x20008e08

0801b064 <nanf>:
 801b064:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b06c <nanf+0x8>
 801b068:	4770      	bx	lr
 801b06a:	bf00      	nop
 801b06c:	7fc00000 	.word	0x7fc00000

0801b070 <_raise_r>:
 801b070:	291f      	cmp	r1, #31
 801b072:	b538      	push	{r3, r4, r5, lr}
 801b074:	4604      	mov	r4, r0
 801b076:	460d      	mov	r5, r1
 801b078:	d904      	bls.n	801b084 <_raise_r+0x14>
 801b07a:	2316      	movs	r3, #22
 801b07c:	6003      	str	r3, [r0, #0]
 801b07e:	f04f 30ff 	mov.w	r0, #4294967295
 801b082:	bd38      	pop	{r3, r4, r5, pc}
 801b084:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b086:	b112      	cbz	r2, 801b08e <_raise_r+0x1e>
 801b088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b08c:	b94b      	cbnz	r3, 801b0a2 <_raise_r+0x32>
 801b08e:	4620      	mov	r0, r4
 801b090:	f000 f830 	bl	801b0f4 <_getpid_r>
 801b094:	462a      	mov	r2, r5
 801b096:	4601      	mov	r1, r0
 801b098:	4620      	mov	r0, r4
 801b09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b09e:	f000 b817 	b.w	801b0d0 <_kill_r>
 801b0a2:	2b01      	cmp	r3, #1
 801b0a4:	d00a      	beq.n	801b0bc <_raise_r+0x4c>
 801b0a6:	1c59      	adds	r1, r3, #1
 801b0a8:	d103      	bne.n	801b0b2 <_raise_r+0x42>
 801b0aa:	2316      	movs	r3, #22
 801b0ac:	6003      	str	r3, [r0, #0]
 801b0ae:	2001      	movs	r0, #1
 801b0b0:	e7e7      	b.n	801b082 <_raise_r+0x12>
 801b0b2:	2400      	movs	r4, #0
 801b0b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b0b8:	4628      	mov	r0, r5
 801b0ba:	4798      	blx	r3
 801b0bc:	2000      	movs	r0, #0
 801b0be:	e7e0      	b.n	801b082 <_raise_r+0x12>

0801b0c0 <raise>:
 801b0c0:	4b02      	ldr	r3, [pc, #8]	; (801b0cc <raise+0xc>)
 801b0c2:	4601      	mov	r1, r0
 801b0c4:	6818      	ldr	r0, [r3, #0]
 801b0c6:	f7ff bfd3 	b.w	801b070 <_raise_r>
 801b0ca:	bf00      	nop
 801b0cc:	20000200 	.word	0x20000200

0801b0d0 <_kill_r>:
 801b0d0:	b538      	push	{r3, r4, r5, lr}
 801b0d2:	4d07      	ldr	r5, [pc, #28]	; (801b0f0 <_kill_r+0x20>)
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	4604      	mov	r4, r0
 801b0d8:	4608      	mov	r0, r1
 801b0da:	4611      	mov	r1, r2
 801b0dc:	602b      	str	r3, [r5, #0]
 801b0de:	f7e8 f825 	bl	800312c <_kill>
 801b0e2:	1c43      	adds	r3, r0, #1
 801b0e4:	d102      	bne.n	801b0ec <_kill_r+0x1c>
 801b0e6:	682b      	ldr	r3, [r5, #0]
 801b0e8:	b103      	cbz	r3, 801b0ec <_kill_r+0x1c>
 801b0ea:	6023      	str	r3, [r4, #0]
 801b0ec:	bd38      	pop	{r3, r4, r5, pc}
 801b0ee:	bf00      	nop
 801b0f0:	20008e08 	.word	0x20008e08

0801b0f4 <_getpid_r>:
 801b0f4:	f7e8 b812 	b.w	800311c <_getpid>

0801b0f8 <siprintf>:
 801b0f8:	b40e      	push	{r1, r2, r3}
 801b0fa:	b500      	push	{lr}
 801b0fc:	b09c      	sub	sp, #112	; 0x70
 801b0fe:	ab1d      	add	r3, sp, #116	; 0x74
 801b100:	9002      	str	r0, [sp, #8]
 801b102:	9006      	str	r0, [sp, #24]
 801b104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b108:	4809      	ldr	r0, [pc, #36]	; (801b130 <siprintf+0x38>)
 801b10a:	9107      	str	r1, [sp, #28]
 801b10c:	9104      	str	r1, [sp, #16]
 801b10e:	4909      	ldr	r1, [pc, #36]	; (801b134 <siprintf+0x3c>)
 801b110:	f853 2b04 	ldr.w	r2, [r3], #4
 801b114:	9105      	str	r1, [sp, #20]
 801b116:	6800      	ldr	r0, [r0, #0]
 801b118:	9301      	str	r3, [sp, #4]
 801b11a:	a902      	add	r1, sp, #8
 801b11c:	f003 f9ac 	bl	801e478 <_svfiprintf_r>
 801b120:	9b02      	ldr	r3, [sp, #8]
 801b122:	2200      	movs	r2, #0
 801b124:	701a      	strb	r2, [r3, #0]
 801b126:	b01c      	add	sp, #112	; 0x70
 801b128:	f85d eb04 	ldr.w	lr, [sp], #4
 801b12c:	b003      	add	sp, #12
 801b12e:	4770      	bx	lr
 801b130:	20000200 	.word	0x20000200
 801b134:	ffff0208 	.word	0xffff0208

0801b138 <siscanf>:
 801b138:	b40e      	push	{r1, r2, r3}
 801b13a:	b510      	push	{r4, lr}
 801b13c:	b09f      	sub	sp, #124	; 0x7c
 801b13e:	ac21      	add	r4, sp, #132	; 0x84
 801b140:	f44f 7101 	mov.w	r1, #516	; 0x204
 801b144:	f854 2b04 	ldr.w	r2, [r4], #4
 801b148:	9201      	str	r2, [sp, #4]
 801b14a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b14e:	9004      	str	r0, [sp, #16]
 801b150:	9008      	str	r0, [sp, #32]
 801b152:	f7e5 f84d 	bl	80001f0 <strlen>
 801b156:	4b0c      	ldr	r3, [pc, #48]	; (801b188 <siscanf+0x50>)
 801b158:	9005      	str	r0, [sp, #20]
 801b15a:	9009      	str	r0, [sp, #36]	; 0x24
 801b15c:	930d      	str	r3, [sp, #52]	; 0x34
 801b15e:	480b      	ldr	r0, [pc, #44]	; (801b18c <siscanf+0x54>)
 801b160:	9a01      	ldr	r2, [sp, #4]
 801b162:	6800      	ldr	r0, [r0, #0]
 801b164:	9403      	str	r4, [sp, #12]
 801b166:	2300      	movs	r3, #0
 801b168:	9311      	str	r3, [sp, #68]	; 0x44
 801b16a:	9316      	str	r3, [sp, #88]	; 0x58
 801b16c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b170:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b174:	a904      	add	r1, sp, #16
 801b176:	4623      	mov	r3, r4
 801b178:	f003 fad8 	bl	801e72c <__ssvfiscanf_r>
 801b17c:	b01f      	add	sp, #124	; 0x7c
 801b17e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b182:	b003      	add	sp, #12
 801b184:	4770      	bx	lr
 801b186:	bf00      	nop
 801b188:	0801b1b3 	.word	0x0801b1b3
 801b18c:	20000200 	.word	0x20000200

0801b190 <__sread>:
 801b190:	b510      	push	{r4, lr}
 801b192:	460c      	mov	r4, r1
 801b194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b198:	f003 fee6 	bl	801ef68 <_read_r>
 801b19c:	2800      	cmp	r0, #0
 801b19e:	bfab      	itete	ge
 801b1a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b1a2:	89a3      	ldrhlt	r3, [r4, #12]
 801b1a4:	181b      	addge	r3, r3, r0
 801b1a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b1aa:	bfac      	ite	ge
 801b1ac:	6563      	strge	r3, [r4, #84]	; 0x54
 801b1ae:	81a3      	strhlt	r3, [r4, #12]
 801b1b0:	bd10      	pop	{r4, pc}

0801b1b2 <__seofread>:
 801b1b2:	2000      	movs	r0, #0
 801b1b4:	4770      	bx	lr

0801b1b6 <__swrite>:
 801b1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1ba:	461f      	mov	r7, r3
 801b1bc:	898b      	ldrh	r3, [r1, #12]
 801b1be:	05db      	lsls	r3, r3, #23
 801b1c0:	4605      	mov	r5, r0
 801b1c2:	460c      	mov	r4, r1
 801b1c4:	4616      	mov	r6, r2
 801b1c6:	d505      	bpl.n	801b1d4 <__swrite+0x1e>
 801b1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1cc:	2302      	movs	r3, #2
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	f002 fb72 	bl	801d8b8 <_lseek_r>
 801b1d4:	89a3      	ldrh	r3, [r4, #12]
 801b1d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b1da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b1de:	81a3      	strh	r3, [r4, #12]
 801b1e0:	4632      	mov	r2, r6
 801b1e2:	463b      	mov	r3, r7
 801b1e4:	4628      	mov	r0, r5
 801b1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b1ea:	f000 bff7 	b.w	801c1dc <_write_r>

0801b1ee <__sseek>:
 801b1ee:	b510      	push	{r4, lr}
 801b1f0:	460c      	mov	r4, r1
 801b1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1f6:	f002 fb5f 	bl	801d8b8 <_lseek_r>
 801b1fa:	1c43      	adds	r3, r0, #1
 801b1fc:	89a3      	ldrh	r3, [r4, #12]
 801b1fe:	bf15      	itete	ne
 801b200:	6560      	strne	r0, [r4, #84]	; 0x54
 801b202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b20a:	81a3      	strheq	r3, [r4, #12]
 801b20c:	bf18      	it	ne
 801b20e:	81a3      	strhne	r3, [r4, #12]
 801b210:	bd10      	pop	{r4, pc}

0801b212 <__sclose>:
 801b212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b216:	f001 b87f 	b.w	801c318 <_close_r>

0801b21a <strcpy>:
 801b21a:	4603      	mov	r3, r0
 801b21c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b220:	f803 2b01 	strb.w	r2, [r3], #1
 801b224:	2a00      	cmp	r2, #0
 801b226:	d1f9      	bne.n	801b21c <strcpy+0x2>
 801b228:	4770      	bx	lr

0801b22a <strncmp>:
 801b22a:	b510      	push	{r4, lr}
 801b22c:	b16a      	cbz	r2, 801b24a <strncmp+0x20>
 801b22e:	3901      	subs	r1, #1
 801b230:	1884      	adds	r4, r0, r2
 801b232:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b236:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b23a:	4293      	cmp	r3, r2
 801b23c:	d103      	bne.n	801b246 <strncmp+0x1c>
 801b23e:	42a0      	cmp	r0, r4
 801b240:	d001      	beq.n	801b246 <strncmp+0x1c>
 801b242:	2b00      	cmp	r3, #0
 801b244:	d1f5      	bne.n	801b232 <strncmp+0x8>
 801b246:	1a98      	subs	r0, r3, r2
 801b248:	bd10      	pop	{r4, pc}
 801b24a:	4610      	mov	r0, r2
 801b24c:	e7fc      	b.n	801b248 <strncmp+0x1e>

0801b24e <sulp>:
 801b24e:	b570      	push	{r4, r5, r6, lr}
 801b250:	4604      	mov	r4, r0
 801b252:	460d      	mov	r5, r1
 801b254:	ec45 4b10 	vmov	d0, r4, r5
 801b258:	4616      	mov	r6, r2
 801b25a:	f002 ff2d 	bl	801e0b8 <__ulp>
 801b25e:	ec51 0b10 	vmov	r0, r1, d0
 801b262:	b17e      	cbz	r6, 801b284 <sulp+0x36>
 801b264:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b268:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	dd09      	ble.n	801b284 <sulp+0x36>
 801b270:	051b      	lsls	r3, r3, #20
 801b272:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b276:	2400      	movs	r4, #0
 801b278:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b27c:	4622      	mov	r2, r4
 801b27e:	462b      	mov	r3, r5
 801b280:	f7e5 f9ca 	bl	8000618 <__aeabi_dmul>
 801b284:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b288 <_strtod_l>:
 801b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b28c:	b0a3      	sub	sp, #140	; 0x8c
 801b28e:	461f      	mov	r7, r3
 801b290:	2300      	movs	r3, #0
 801b292:	931e      	str	r3, [sp, #120]	; 0x78
 801b294:	4ba4      	ldr	r3, [pc, #656]	; (801b528 <_strtod_l+0x2a0>)
 801b296:	9219      	str	r2, [sp, #100]	; 0x64
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	9307      	str	r3, [sp, #28]
 801b29c:	4604      	mov	r4, r0
 801b29e:	4618      	mov	r0, r3
 801b2a0:	4688      	mov	r8, r1
 801b2a2:	f7e4 ffa5 	bl	80001f0 <strlen>
 801b2a6:	f04f 0a00 	mov.w	sl, #0
 801b2aa:	4605      	mov	r5, r0
 801b2ac:	f04f 0b00 	mov.w	fp, #0
 801b2b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b2b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b2b6:	781a      	ldrb	r2, [r3, #0]
 801b2b8:	2a2b      	cmp	r2, #43	; 0x2b
 801b2ba:	d04c      	beq.n	801b356 <_strtod_l+0xce>
 801b2bc:	d839      	bhi.n	801b332 <_strtod_l+0xaa>
 801b2be:	2a0d      	cmp	r2, #13
 801b2c0:	d832      	bhi.n	801b328 <_strtod_l+0xa0>
 801b2c2:	2a08      	cmp	r2, #8
 801b2c4:	d832      	bhi.n	801b32c <_strtod_l+0xa4>
 801b2c6:	2a00      	cmp	r2, #0
 801b2c8:	d03c      	beq.n	801b344 <_strtod_l+0xbc>
 801b2ca:	2300      	movs	r3, #0
 801b2cc:	930e      	str	r3, [sp, #56]	; 0x38
 801b2ce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b2d0:	7833      	ldrb	r3, [r6, #0]
 801b2d2:	2b30      	cmp	r3, #48	; 0x30
 801b2d4:	f040 80b4 	bne.w	801b440 <_strtod_l+0x1b8>
 801b2d8:	7873      	ldrb	r3, [r6, #1]
 801b2da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b2de:	2b58      	cmp	r3, #88	; 0x58
 801b2e0:	d16c      	bne.n	801b3bc <_strtod_l+0x134>
 801b2e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2e4:	9301      	str	r3, [sp, #4]
 801b2e6:	ab1e      	add	r3, sp, #120	; 0x78
 801b2e8:	9702      	str	r7, [sp, #8]
 801b2ea:	9300      	str	r3, [sp, #0]
 801b2ec:	4a8f      	ldr	r2, [pc, #572]	; (801b52c <_strtod_l+0x2a4>)
 801b2ee:	ab1f      	add	r3, sp, #124	; 0x7c
 801b2f0:	a91d      	add	r1, sp, #116	; 0x74
 801b2f2:	4620      	mov	r0, r4
 801b2f4:	f001 ffd4 	bl	801d2a0 <__gethex>
 801b2f8:	f010 0707 	ands.w	r7, r0, #7
 801b2fc:	4605      	mov	r5, r0
 801b2fe:	d005      	beq.n	801b30c <_strtod_l+0x84>
 801b300:	2f06      	cmp	r7, #6
 801b302:	d12a      	bne.n	801b35a <_strtod_l+0xd2>
 801b304:	3601      	adds	r6, #1
 801b306:	2300      	movs	r3, #0
 801b308:	961d      	str	r6, [sp, #116]	; 0x74
 801b30a:	930e      	str	r3, [sp, #56]	; 0x38
 801b30c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b30e:	2b00      	cmp	r3, #0
 801b310:	f040 8596 	bne.w	801be40 <_strtod_l+0xbb8>
 801b314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b316:	b1db      	cbz	r3, 801b350 <_strtod_l+0xc8>
 801b318:	4652      	mov	r2, sl
 801b31a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b31e:	ec43 2b10 	vmov	d0, r2, r3
 801b322:	b023      	add	sp, #140	; 0x8c
 801b324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b328:	2a20      	cmp	r2, #32
 801b32a:	d1ce      	bne.n	801b2ca <_strtod_l+0x42>
 801b32c:	3301      	adds	r3, #1
 801b32e:	931d      	str	r3, [sp, #116]	; 0x74
 801b330:	e7c0      	b.n	801b2b4 <_strtod_l+0x2c>
 801b332:	2a2d      	cmp	r2, #45	; 0x2d
 801b334:	d1c9      	bne.n	801b2ca <_strtod_l+0x42>
 801b336:	2201      	movs	r2, #1
 801b338:	920e      	str	r2, [sp, #56]	; 0x38
 801b33a:	1c5a      	adds	r2, r3, #1
 801b33c:	921d      	str	r2, [sp, #116]	; 0x74
 801b33e:	785b      	ldrb	r3, [r3, #1]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d1c4      	bne.n	801b2ce <_strtod_l+0x46>
 801b344:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b346:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	f040 8576 	bne.w	801be3c <_strtod_l+0xbb4>
 801b350:	4652      	mov	r2, sl
 801b352:	465b      	mov	r3, fp
 801b354:	e7e3      	b.n	801b31e <_strtod_l+0x96>
 801b356:	2200      	movs	r2, #0
 801b358:	e7ee      	b.n	801b338 <_strtod_l+0xb0>
 801b35a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b35c:	b13a      	cbz	r2, 801b36e <_strtod_l+0xe6>
 801b35e:	2135      	movs	r1, #53	; 0x35
 801b360:	a820      	add	r0, sp, #128	; 0x80
 801b362:	f002 ffb4 	bl	801e2ce <__copybits>
 801b366:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b368:	4620      	mov	r0, r4
 801b36a:	f002 fb79 	bl	801da60 <_Bfree>
 801b36e:	3f01      	subs	r7, #1
 801b370:	2f05      	cmp	r7, #5
 801b372:	d807      	bhi.n	801b384 <_strtod_l+0xfc>
 801b374:	e8df f007 	tbb	[pc, r7]
 801b378:	1d180b0e 	.word	0x1d180b0e
 801b37c:	030e      	.short	0x030e
 801b37e:	f04f 0b00 	mov.w	fp, #0
 801b382:	46da      	mov	sl, fp
 801b384:	0728      	lsls	r0, r5, #28
 801b386:	d5c1      	bpl.n	801b30c <_strtod_l+0x84>
 801b388:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b38c:	e7be      	b.n	801b30c <_strtod_l+0x84>
 801b38e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801b392:	e7f7      	b.n	801b384 <_strtod_l+0xfc>
 801b394:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801b398:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b39a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b39e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b3a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b3a6:	e7ed      	b.n	801b384 <_strtod_l+0xfc>
 801b3a8:	f8df b184 	ldr.w	fp, [pc, #388]	; 801b530 <_strtod_l+0x2a8>
 801b3ac:	f04f 0a00 	mov.w	sl, #0
 801b3b0:	e7e8      	b.n	801b384 <_strtod_l+0xfc>
 801b3b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b3b6:	f04f 3aff 	mov.w	sl, #4294967295
 801b3ba:	e7e3      	b.n	801b384 <_strtod_l+0xfc>
 801b3bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b3be:	1c5a      	adds	r2, r3, #1
 801b3c0:	921d      	str	r2, [sp, #116]	; 0x74
 801b3c2:	785b      	ldrb	r3, [r3, #1]
 801b3c4:	2b30      	cmp	r3, #48	; 0x30
 801b3c6:	d0f9      	beq.n	801b3bc <_strtod_l+0x134>
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d09f      	beq.n	801b30c <_strtod_l+0x84>
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	f04f 0900 	mov.w	r9, #0
 801b3d2:	9304      	str	r3, [sp, #16]
 801b3d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b3d6:	930a      	str	r3, [sp, #40]	; 0x28
 801b3d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b3dc:	464f      	mov	r7, r9
 801b3de:	220a      	movs	r2, #10
 801b3e0:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b3e2:	7806      	ldrb	r6, [r0, #0]
 801b3e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b3e8:	b2d9      	uxtb	r1, r3
 801b3ea:	2909      	cmp	r1, #9
 801b3ec:	d92a      	bls.n	801b444 <_strtod_l+0x1bc>
 801b3ee:	9907      	ldr	r1, [sp, #28]
 801b3f0:	462a      	mov	r2, r5
 801b3f2:	f7ff ff1a 	bl	801b22a <strncmp>
 801b3f6:	b398      	cbz	r0, 801b460 <_strtod_l+0x1d8>
 801b3f8:	2000      	movs	r0, #0
 801b3fa:	4633      	mov	r3, r6
 801b3fc:	463d      	mov	r5, r7
 801b3fe:	9007      	str	r0, [sp, #28]
 801b400:	4602      	mov	r2, r0
 801b402:	2b65      	cmp	r3, #101	; 0x65
 801b404:	d001      	beq.n	801b40a <_strtod_l+0x182>
 801b406:	2b45      	cmp	r3, #69	; 0x45
 801b408:	d118      	bne.n	801b43c <_strtod_l+0x1b4>
 801b40a:	b91d      	cbnz	r5, 801b414 <_strtod_l+0x18c>
 801b40c:	9b04      	ldr	r3, [sp, #16]
 801b40e:	4303      	orrs	r3, r0
 801b410:	d098      	beq.n	801b344 <_strtod_l+0xbc>
 801b412:	2500      	movs	r5, #0
 801b414:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801b418:	f108 0301 	add.w	r3, r8, #1
 801b41c:	931d      	str	r3, [sp, #116]	; 0x74
 801b41e:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b422:	2b2b      	cmp	r3, #43	; 0x2b
 801b424:	d075      	beq.n	801b512 <_strtod_l+0x28a>
 801b426:	2b2d      	cmp	r3, #45	; 0x2d
 801b428:	d07b      	beq.n	801b522 <_strtod_l+0x29a>
 801b42a:	f04f 0c00 	mov.w	ip, #0
 801b42e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b432:	2909      	cmp	r1, #9
 801b434:	f240 8082 	bls.w	801b53c <_strtod_l+0x2b4>
 801b438:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b43c:	2600      	movs	r6, #0
 801b43e:	e09d      	b.n	801b57c <_strtod_l+0x2f4>
 801b440:	2300      	movs	r3, #0
 801b442:	e7c4      	b.n	801b3ce <_strtod_l+0x146>
 801b444:	2f08      	cmp	r7, #8
 801b446:	bfd8      	it	le
 801b448:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801b44a:	f100 0001 	add.w	r0, r0, #1
 801b44e:	bfda      	itte	le
 801b450:	fb02 3301 	mlale	r3, r2, r1, r3
 801b454:	9309      	strle	r3, [sp, #36]	; 0x24
 801b456:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b45a:	3701      	adds	r7, #1
 801b45c:	901d      	str	r0, [sp, #116]	; 0x74
 801b45e:	e7bf      	b.n	801b3e0 <_strtod_l+0x158>
 801b460:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b462:	195a      	adds	r2, r3, r5
 801b464:	921d      	str	r2, [sp, #116]	; 0x74
 801b466:	5d5b      	ldrb	r3, [r3, r5]
 801b468:	2f00      	cmp	r7, #0
 801b46a:	d037      	beq.n	801b4dc <_strtod_l+0x254>
 801b46c:	9007      	str	r0, [sp, #28]
 801b46e:	463d      	mov	r5, r7
 801b470:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b474:	2a09      	cmp	r2, #9
 801b476:	d912      	bls.n	801b49e <_strtod_l+0x216>
 801b478:	2201      	movs	r2, #1
 801b47a:	e7c2      	b.n	801b402 <_strtod_l+0x17a>
 801b47c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b47e:	1c5a      	adds	r2, r3, #1
 801b480:	921d      	str	r2, [sp, #116]	; 0x74
 801b482:	785b      	ldrb	r3, [r3, #1]
 801b484:	3001      	adds	r0, #1
 801b486:	2b30      	cmp	r3, #48	; 0x30
 801b488:	d0f8      	beq.n	801b47c <_strtod_l+0x1f4>
 801b48a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801b48e:	2a08      	cmp	r2, #8
 801b490:	f200 84db 	bhi.w	801be4a <_strtod_l+0xbc2>
 801b494:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b496:	9007      	str	r0, [sp, #28]
 801b498:	2000      	movs	r0, #0
 801b49a:	920a      	str	r2, [sp, #40]	; 0x28
 801b49c:	4605      	mov	r5, r0
 801b49e:	3b30      	subs	r3, #48	; 0x30
 801b4a0:	f100 0201 	add.w	r2, r0, #1
 801b4a4:	d014      	beq.n	801b4d0 <_strtod_l+0x248>
 801b4a6:	9907      	ldr	r1, [sp, #28]
 801b4a8:	4411      	add	r1, r2
 801b4aa:	9107      	str	r1, [sp, #28]
 801b4ac:	462a      	mov	r2, r5
 801b4ae:	eb00 0e05 	add.w	lr, r0, r5
 801b4b2:	210a      	movs	r1, #10
 801b4b4:	4572      	cmp	r2, lr
 801b4b6:	d113      	bne.n	801b4e0 <_strtod_l+0x258>
 801b4b8:	182a      	adds	r2, r5, r0
 801b4ba:	2a08      	cmp	r2, #8
 801b4bc:	f105 0501 	add.w	r5, r5, #1
 801b4c0:	4405      	add	r5, r0
 801b4c2:	dc1c      	bgt.n	801b4fe <_strtod_l+0x276>
 801b4c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b4c6:	220a      	movs	r2, #10
 801b4c8:	fb02 3301 	mla	r3, r2, r1, r3
 801b4cc:	9309      	str	r3, [sp, #36]	; 0x24
 801b4ce:	2200      	movs	r2, #0
 801b4d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b4d2:	1c59      	adds	r1, r3, #1
 801b4d4:	911d      	str	r1, [sp, #116]	; 0x74
 801b4d6:	785b      	ldrb	r3, [r3, #1]
 801b4d8:	4610      	mov	r0, r2
 801b4da:	e7c9      	b.n	801b470 <_strtod_l+0x1e8>
 801b4dc:	4638      	mov	r0, r7
 801b4de:	e7d2      	b.n	801b486 <_strtod_l+0x1fe>
 801b4e0:	2a08      	cmp	r2, #8
 801b4e2:	dc04      	bgt.n	801b4ee <_strtod_l+0x266>
 801b4e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b4e6:	434e      	muls	r6, r1
 801b4e8:	9609      	str	r6, [sp, #36]	; 0x24
 801b4ea:	3201      	adds	r2, #1
 801b4ec:	e7e2      	b.n	801b4b4 <_strtod_l+0x22c>
 801b4ee:	f102 0c01 	add.w	ip, r2, #1
 801b4f2:	f1bc 0f10 	cmp.w	ip, #16
 801b4f6:	bfd8      	it	le
 801b4f8:	fb01 f909 	mulle.w	r9, r1, r9
 801b4fc:	e7f5      	b.n	801b4ea <_strtod_l+0x262>
 801b4fe:	2d10      	cmp	r5, #16
 801b500:	bfdc      	itt	le
 801b502:	220a      	movle	r2, #10
 801b504:	fb02 3909 	mlale	r9, r2, r9, r3
 801b508:	e7e1      	b.n	801b4ce <_strtod_l+0x246>
 801b50a:	2300      	movs	r3, #0
 801b50c:	9307      	str	r3, [sp, #28]
 801b50e:	2201      	movs	r2, #1
 801b510:	e77c      	b.n	801b40c <_strtod_l+0x184>
 801b512:	f04f 0c00 	mov.w	ip, #0
 801b516:	f108 0302 	add.w	r3, r8, #2
 801b51a:	931d      	str	r3, [sp, #116]	; 0x74
 801b51c:	f898 3002 	ldrb.w	r3, [r8, #2]
 801b520:	e785      	b.n	801b42e <_strtod_l+0x1a6>
 801b522:	f04f 0c01 	mov.w	ip, #1
 801b526:	e7f6      	b.n	801b516 <_strtod_l+0x28e>
 801b528:	080212cc 	.word	0x080212cc
 801b52c:	08021140 	.word	0x08021140
 801b530:	7ff00000 	.word	0x7ff00000
 801b534:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b536:	1c59      	adds	r1, r3, #1
 801b538:	911d      	str	r1, [sp, #116]	; 0x74
 801b53a:	785b      	ldrb	r3, [r3, #1]
 801b53c:	2b30      	cmp	r3, #48	; 0x30
 801b53e:	d0f9      	beq.n	801b534 <_strtod_l+0x2ac>
 801b540:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801b544:	2908      	cmp	r1, #8
 801b546:	f63f af79 	bhi.w	801b43c <_strtod_l+0x1b4>
 801b54a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801b54e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b550:	9308      	str	r3, [sp, #32]
 801b552:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b554:	1c59      	adds	r1, r3, #1
 801b556:	911d      	str	r1, [sp, #116]	; 0x74
 801b558:	785b      	ldrb	r3, [r3, #1]
 801b55a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801b55e:	2e09      	cmp	r6, #9
 801b560:	d937      	bls.n	801b5d2 <_strtod_l+0x34a>
 801b562:	9e08      	ldr	r6, [sp, #32]
 801b564:	1b89      	subs	r1, r1, r6
 801b566:	2908      	cmp	r1, #8
 801b568:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b56c:	dc02      	bgt.n	801b574 <_strtod_l+0x2ec>
 801b56e:	4576      	cmp	r6, lr
 801b570:	bfa8      	it	ge
 801b572:	4676      	movge	r6, lr
 801b574:	f1bc 0f00 	cmp.w	ip, #0
 801b578:	d000      	beq.n	801b57c <_strtod_l+0x2f4>
 801b57a:	4276      	negs	r6, r6
 801b57c:	2d00      	cmp	r5, #0
 801b57e:	d14f      	bne.n	801b620 <_strtod_l+0x398>
 801b580:	9904      	ldr	r1, [sp, #16]
 801b582:	4301      	orrs	r1, r0
 801b584:	f47f aec2 	bne.w	801b30c <_strtod_l+0x84>
 801b588:	2a00      	cmp	r2, #0
 801b58a:	f47f aedb 	bne.w	801b344 <_strtod_l+0xbc>
 801b58e:	2b69      	cmp	r3, #105	; 0x69
 801b590:	d027      	beq.n	801b5e2 <_strtod_l+0x35a>
 801b592:	dc24      	bgt.n	801b5de <_strtod_l+0x356>
 801b594:	2b49      	cmp	r3, #73	; 0x49
 801b596:	d024      	beq.n	801b5e2 <_strtod_l+0x35a>
 801b598:	2b4e      	cmp	r3, #78	; 0x4e
 801b59a:	f47f aed3 	bne.w	801b344 <_strtod_l+0xbc>
 801b59e:	499e      	ldr	r1, [pc, #632]	; (801b818 <_strtod_l+0x590>)
 801b5a0:	a81d      	add	r0, sp, #116	; 0x74
 801b5a2:	f002 f8d5 	bl	801d750 <__match>
 801b5a6:	2800      	cmp	r0, #0
 801b5a8:	f43f aecc 	beq.w	801b344 <_strtod_l+0xbc>
 801b5ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b5ae:	781b      	ldrb	r3, [r3, #0]
 801b5b0:	2b28      	cmp	r3, #40	; 0x28
 801b5b2:	d12d      	bne.n	801b610 <_strtod_l+0x388>
 801b5b4:	4999      	ldr	r1, [pc, #612]	; (801b81c <_strtod_l+0x594>)
 801b5b6:	aa20      	add	r2, sp, #128	; 0x80
 801b5b8:	a81d      	add	r0, sp, #116	; 0x74
 801b5ba:	f002 f8dd 	bl	801d778 <__hexnan>
 801b5be:	2805      	cmp	r0, #5
 801b5c0:	d126      	bne.n	801b610 <_strtod_l+0x388>
 801b5c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b5c4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801b5c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b5cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b5d0:	e69c      	b.n	801b30c <_strtod_l+0x84>
 801b5d2:	210a      	movs	r1, #10
 801b5d4:	fb01 3e0e 	mla	lr, r1, lr, r3
 801b5d8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b5dc:	e7b9      	b.n	801b552 <_strtod_l+0x2ca>
 801b5de:	2b6e      	cmp	r3, #110	; 0x6e
 801b5e0:	e7db      	b.n	801b59a <_strtod_l+0x312>
 801b5e2:	498f      	ldr	r1, [pc, #572]	; (801b820 <_strtod_l+0x598>)
 801b5e4:	a81d      	add	r0, sp, #116	; 0x74
 801b5e6:	f002 f8b3 	bl	801d750 <__match>
 801b5ea:	2800      	cmp	r0, #0
 801b5ec:	f43f aeaa 	beq.w	801b344 <_strtod_l+0xbc>
 801b5f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b5f2:	498c      	ldr	r1, [pc, #560]	; (801b824 <_strtod_l+0x59c>)
 801b5f4:	3b01      	subs	r3, #1
 801b5f6:	a81d      	add	r0, sp, #116	; 0x74
 801b5f8:	931d      	str	r3, [sp, #116]	; 0x74
 801b5fa:	f002 f8a9 	bl	801d750 <__match>
 801b5fe:	b910      	cbnz	r0, 801b606 <_strtod_l+0x37e>
 801b600:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b602:	3301      	adds	r3, #1
 801b604:	931d      	str	r3, [sp, #116]	; 0x74
 801b606:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801b834 <_strtod_l+0x5ac>
 801b60a:	f04f 0a00 	mov.w	sl, #0
 801b60e:	e67d      	b.n	801b30c <_strtod_l+0x84>
 801b610:	4885      	ldr	r0, [pc, #532]	; (801b828 <_strtod_l+0x5a0>)
 801b612:	f7fe fa7d 	bl	8019b10 <nan>
 801b616:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b61a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801b61e:	e675      	b.n	801b30c <_strtod_l+0x84>
 801b620:	9b07      	ldr	r3, [sp, #28]
 801b622:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b624:	1af3      	subs	r3, r6, r3
 801b626:	2f00      	cmp	r7, #0
 801b628:	bf08      	it	eq
 801b62a:	462f      	moveq	r7, r5
 801b62c:	2d10      	cmp	r5, #16
 801b62e:	9308      	str	r3, [sp, #32]
 801b630:	46a8      	mov	r8, r5
 801b632:	bfa8      	it	ge
 801b634:	f04f 0810 	movge.w	r8, #16
 801b638:	f7e4 ff74 	bl	8000524 <__aeabi_ui2d>
 801b63c:	2d09      	cmp	r5, #9
 801b63e:	4682      	mov	sl, r0
 801b640:	468b      	mov	fp, r1
 801b642:	dd13      	ble.n	801b66c <_strtod_l+0x3e4>
 801b644:	4b79      	ldr	r3, [pc, #484]	; (801b82c <_strtod_l+0x5a4>)
 801b646:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b64a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b64e:	f7e4 ffe3 	bl	8000618 <__aeabi_dmul>
 801b652:	4682      	mov	sl, r0
 801b654:	4648      	mov	r0, r9
 801b656:	468b      	mov	fp, r1
 801b658:	f7e4 ff64 	bl	8000524 <__aeabi_ui2d>
 801b65c:	4602      	mov	r2, r0
 801b65e:	460b      	mov	r3, r1
 801b660:	4650      	mov	r0, sl
 801b662:	4659      	mov	r1, fp
 801b664:	f7e4 fe22 	bl	80002ac <__adddf3>
 801b668:	4682      	mov	sl, r0
 801b66a:	468b      	mov	fp, r1
 801b66c:	2d0f      	cmp	r5, #15
 801b66e:	dc38      	bgt.n	801b6e2 <_strtod_l+0x45a>
 801b670:	9b08      	ldr	r3, [sp, #32]
 801b672:	2b00      	cmp	r3, #0
 801b674:	f43f ae4a 	beq.w	801b30c <_strtod_l+0x84>
 801b678:	dd24      	ble.n	801b6c4 <_strtod_l+0x43c>
 801b67a:	2b16      	cmp	r3, #22
 801b67c:	dc0b      	bgt.n	801b696 <_strtod_l+0x40e>
 801b67e:	4d6b      	ldr	r5, [pc, #428]	; (801b82c <_strtod_l+0x5a4>)
 801b680:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801b684:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b688:	4652      	mov	r2, sl
 801b68a:	465b      	mov	r3, fp
 801b68c:	f7e4 ffc4 	bl	8000618 <__aeabi_dmul>
 801b690:	4682      	mov	sl, r0
 801b692:	468b      	mov	fp, r1
 801b694:	e63a      	b.n	801b30c <_strtod_l+0x84>
 801b696:	9a08      	ldr	r2, [sp, #32]
 801b698:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b69c:	4293      	cmp	r3, r2
 801b69e:	db20      	blt.n	801b6e2 <_strtod_l+0x45a>
 801b6a0:	4c62      	ldr	r4, [pc, #392]	; (801b82c <_strtod_l+0x5a4>)
 801b6a2:	f1c5 050f 	rsb	r5, r5, #15
 801b6a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b6aa:	4652      	mov	r2, sl
 801b6ac:	465b      	mov	r3, fp
 801b6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6b2:	f7e4 ffb1 	bl	8000618 <__aeabi_dmul>
 801b6b6:	9b08      	ldr	r3, [sp, #32]
 801b6b8:	1b5d      	subs	r5, r3, r5
 801b6ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b6be:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b6c2:	e7e3      	b.n	801b68c <_strtod_l+0x404>
 801b6c4:	9b08      	ldr	r3, [sp, #32]
 801b6c6:	3316      	adds	r3, #22
 801b6c8:	db0b      	blt.n	801b6e2 <_strtod_l+0x45a>
 801b6ca:	9b07      	ldr	r3, [sp, #28]
 801b6cc:	4a57      	ldr	r2, [pc, #348]	; (801b82c <_strtod_l+0x5a4>)
 801b6ce:	1b9e      	subs	r6, r3, r6
 801b6d0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b6d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b6d8:	4650      	mov	r0, sl
 801b6da:	4659      	mov	r1, fp
 801b6dc:	f7e5 f8c6 	bl	800086c <__aeabi_ddiv>
 801b6e0:	e7d6      	b.n	801b690 <_strtod_l+0x408>
 801b6e2:	9b08      	ldr	r3, [sp, #32]
 801b6e4:	eba5 0808 	sub.w	r8, r5, r8
 801b6e8:	4498      	add	r8, r3
 801b6ea:	f1b8 0f00 	cmp.w	r8, #0
 801b6ee:	dd71      	ble.n	801b7d4 <_strtod_l+0x54c>
 801b6f0:	f018 030f 	ands.w	r3, r8, #15
 801b6f4:	d00a      	beq.n	801b70c <_strtod_l+0x484>
 801b6f6:	494d      	ldr	r1, [pc, #308]	; (801b82c <_strtod_l+0x5a4>)
 801b6f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b6fc:	4652      	mov	r2, sl
 801b6fe:	465b      	mov	r3, fp
 801b700:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b704:	f7e4 ff88 	bl	8000618 <__aeabi_dmul>
 801b708:	4682      	mov	sl, r0
 801b70a:	468b      	mov	fp, r1
 801b70c:	f038 080f 	bics.w	r8, r8, #15
 801b710:	d04d      	beq.n	801b7ae <_strtod_l+0x526>
 801b712:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b716:	dd22      	ble.n	801b75e <_strtod_l+0x4d6>
 801b718:	2500      	movs	r5, #0
 801b71a:	462e      	mov	r6, r5
 801b71c:	9509      	str	r5, [sp, #36]	; 0x24
 801b71e:	9507      	str	r5, [sp, #28]
 801b720:	2322      	movs	r3, #34	; 0x22
 801b722:	f8df b110 	ldr.w	fp, [pc, #272]	; 801b834 <_strtod_l+0x5ac>
 801b726:	6023      	str	r3, [r4, #0]
 801b728:	f04f 0a00 	mov.w	sl, #0
 801b72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b72e:	2b00      	cmp	r3, #0
 801b730:	f43f adec 	beq.w	801b30c <_strtod_l+0x84>
 801b734:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b736:	4620      	mov	r0, r4
 801b738:	f002 f992 	bl	801da60 <_Bfree>
 801b73c:	9907      	ldr	r1, [sp, #28]
 801b73e:	4620      	mov	r0, r4
 801b740:	f002 f98e 	bl	801da60 <_Bfree>
 801b744:	4631      	mov	r1, r6
 801b746:	4620      	mov	r0, r4
 801b748:	f002 f98a 	bl	801da60 <_Bfree>
 801b74c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b74e:	4620      	mov	r0, r4
 801b750:	f002 f986 	bl	801da60 <_Bfree>
 801b754:	4629      	mov	r1, r5
 801b756:	4620      	mov	r0, r4
 801b758:	f002 f982 	bl	801da60 <_Bfree>
 801b75c:	e5d6      	b.n	801b30c <_strtod_l+0x84>
 801b75e:	2300      	movs	r3, #0
 801b760:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b764:	4650      	mov	r0, sl
 801b766:	4659      	mov	r1, fp
 801b768:	4699      	mov	r9, r3
 801b76a:	f1b8 0f01 	cmp.w	r8, #1
 801b76e:	dc21      	bgt.n	801b7b4 <_strtod_l+0x52c>
 801b770:	b10b      	cbz	r3, 801b776 <_strtod_l+0x4ee>
 801b772:	4682      	mov	sl, r0
 801b774:	468b      	mov	fp, r1
 801b776:	4b2e      	ldr	r3, [pc, #184]	; (801b830 <_strtod_l+0x5a8>)
 801b778:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b77c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b780:	4652      	mov	r2, sl
 801b782:	465b      	mov	r3, fp
 801b784:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b788:	f7e4 ff46 	bl	8000618 <__aeabi_dmul>
 801b78c:	4b29      	ldr	r3, [pc, #164]	; (801b834 <_strtod_l+0x5ac>)
 801b78e:	460a      	mov	r2, r1
 801b790:	400b      	ands	r3, r1
 801b792:	4929      	ldr	r1, [pc, #164]	; (801b838 <_strtod_l+0x5b0>)
 801b794:	428b      	cmp	r3, r1
 801b796:	4682      	mov	sl, r0
 801b798:	d8be      	bhi.n	801b718 <_strtod_l+0x490>
 801b79a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b79e:	428b      	cmp	r3, r1
 801b7a0:	bf86      	itte	hi
 801b7a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801b83c <_strtod_l+0x5b4>
 801b7a6:	f04f 3aff 	movhi.w	sl, #4294967295
 801b7aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b7ae:	2300      	movs	r3, #0
 801b7b0:	9304      	str	r3, [sp, #16]
 801b7b2:	e081      	b.n	801b8b8 <_strtod_l+0x630>
 801b7b4:	f018 0f01 	tst.w	r8, #1
 801b7b8:	d007      	beq.n	801b7ca <_strtod_l+0x542>
 801b7ba:	4b1d      	ldr	r3, [pc, #116]	; (801b830 <_strtod_l+0x5a8>)
 801b7bc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7c4:	f7e4 ff28 	bl	8000618 <__aeabi_dmul>
 801b7c8:	2301      	movs	r3, #1
 801b7ca:	f109 0901 	add.w	r9, r9, #1
 801b7ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b7d2:	e7ca      	b.n	801b76a <_strtod_l+0x4e2>
 801b7d4:	d0eb      	beq.n	801b7ae <_strtod_l+0x526>
 801b7d6:	f1c8 0800 	rsb	r8, r8, #0
 801b7da:	f018 020f 	ands.w	r2, r8, #15
 801b7de:	d00a      	beq.n	801b7f6 <_strtod_l+0x56e>
 801b7e0:	4b12      	ldr	r3, [pc, #72]	; (801b82c <_strtod_l+0x5a4>)
 801b7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b7e6:	4650      	mov	r0, sl
 801b7e8:	4659      	mov	r1, fp
 801b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7ee:	f7e5 f83d 	bl	800086c <__aeabi_ddiv>
 801b7f2:	4682      	mov	sl, r0
 801b7f4:	468b      	mov	fp, r1
 801b7f6:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b7fa:	d0d8      	beq.n	801b7ae <_strtod_l+0x526>
 801b7fc:	f1b8 0f1f 	cmp.w	r8, #31
 801b800:	dd1e      	ble.n	801b840 <_strtod_l+0x5b8>
 801b802:	2500      	movs	r5, #0
 801b804:	462e      	mov	r6, r5
 801b806:	9509      	str	r5, [sp, #36]	; 0x24
 801b808:	9507      	str	r5, [sp, #28]
 801b80a:	2322      	movs	r3, #34	; 0x22
 801b80c:	f04f 0a00 	mov.w	sl, #0
 801b810:	f04f 0b00 	mov.w	fp, #0
 801b814:	6023      	str	r3, [r4, #0]
 801b816:	e789      	b.n	801b72c <_strtod_l+0x4a4>
 801b818:	08021115 	.word	0x08021115
 801b81c:	08021154 	.word	0x08021154
 801b820:	0802110d 	.word	0x0802110d
 801b824:	080211cf 	.word	0x080211cf
 801b828:	080211cb 	.word	0x080211cb
 801b82c:	08021368 	.word	0x08021368
 801b830:	08021340 	.word	0x08021340
 801b834:	7ff00000 	.word	0x7ff00000
 801b838:	7ca00000 	.word	0x7ca00000
 801b83c:	7fefffff 	.word	0x7fefffff
 801b840:	f018 0310 	ands.w	r3, r8, #16
 801b844:	bf18      	it	ne
 801b846:	236a      	movne	r3, #106	; 0x6a
 801b848:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801bc00 <_strtod_l+0x978>
 801b84c:	9304      	str	r3, [sp, #16]
 801b84e:	4650      	mov	r0, sl
 801b850:	4659      	mov	r1, fp
 801b852:	2300      	movs	r3, #0
 801b854:	f018 0f01 	tst.w	r8, #1
 801b858:	d004      	beq.n	801b864 <_strtod_l+0x5dc>
 801b85a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b85e:	f7e4 fedb 	bl	8000618 <__aeabi_dmul>
 801b862:	2301      	movs	r3, #1
 801b864:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b868:	f109 0908 	add.w	r9, r9, #8
 801b86c:	d1f2      	bne.n	801b854 <_strtod_l+0x5cc>
 801b86e:	b10b      	cbz	r3, 801b874 <_strtod_l+0x5ec>
 801b870:	4682      	mov	sl, r0
 801b872:	468b      	mov	fp, r1
 801b874:	9b04      	ldr	r3, [sp, #16]
 801b876:	b1bb      	cbz	r3, 801b8a8 <_strtod_l+0x620>
 801b878:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b87c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b880:	2b00      	cmp	r3, #0
 801b882:	4659      	mov	r1, fp
 801b884:	dd10      	ble.n	801b8a8 <_strtod_l+0x620>
 801b886:	2b1f      	cmp	r3, #31
 801b888:	f340 8128 	ble.w	801badc <_strtod_l+0x854>
 801b88c:	2b34      	cmp	r3, #52	; 0x34
 801b88e:	bfde      	ittt	le
 801b890:	3b20      	suble	r3, #32
 801b892:	f04f 32ff 	movle.w	r2, #4294967295
 801b896:	fa02 f303 	lslle.w	r3, r2, r3
 801b89a:	f04f 0a00 	mov.w	sl, #0
 801b89e:	bfcc      	ite	gt
 801b8a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b8a4:	ea03 0b01 	andle.w	fp, r3, r1
 801b8a8:	2200      	movs	r2, #0
 801b8aa:	2300      	movs	r3, #0
 801b8ac:	4650      	mov	r0, sl
 801b8ae:	4659      	mov	r1, fp
 801b8b0:	f7e5 f91a 	bl	8000ae8 <__aeabi_dcmpeq>
 801b8b4:	2800      	cmp	r0, #0
 801b8b6:	d1a4      	bne.n	801b802 <_strtod_l+0x57a>
 801b8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8ba:	9300      	str	r3, [sp, #0]
 801b8bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b8be:	462b      	mov	r3, r5
 801b8c0:	463a      	mov	r2, r7
 801b8c2:	4620      	mov	r0, r4
 801b8c4:	f002 f938 	bl	801db38 <__s2b>
 801b8c8:	9009      	str	r0, [sp, #36]	; 0x24
 801b8ca:	2800      	cmp	r0, #0
 801b8cc:	f43f af24 	beq.w	801b718 <_strtod_l+0x490>
 801b8d0:	9b07      	ldr	r3, [sp, #28]
 801b8d2:	1b9e      	subs	r6, r3, r6
 801b8d4:	9b08      	ldr	r3, [sp, #32]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	bfb4      	ite	lt
 801b8da:	4633      	movlt	r3, r6
 801b8dc:	2300      	movge	r3, #0
 801b8de:	9310      	str	r3, [sp, #64]	; 0x40
 801b8e0:	9b08      	ldr	r3, [sp, #32]
 801b8e2:	2500      	movs	r5, #0
 801b8e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8e8:	9318      	str	r3, [sp, #96]	; 0x60
 801b8ea:	462e      	mov	r6, r5
 801b8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8ee:	4620      	mov	r0, r4
 801b8f0:	6859      	ldr	r1, [r3, #4]
 801b8f2:	f002 f875 	bl	801d9e0 <_Balloc>
 801b8f6:	9007      	str	r0, [sp, #28]
 801b8f8:	2800      	cmp	r0, #0
 801b8fa:	f43f af11 	beq.w	801b720 <_strtod_l+0x498>
 801b8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b900:	691a      	ldr	r2, [r3, #16]
 801b902:	3202      	adds	r2, #2
 801b904:	f103 010c 	add.w	r1, r3, #12
 801b908:	0092      	lsls	r2, r2, #2
 801b90a:	300c      	adds	r0, #12
 801b90c:	f7fe fb4e 	bl	8019fac <memcpy>
 801b910:	ec4b ab10 	vmov	d0, sl, fp
 801b914:	aa20      	add	r2, sp, #128	; 0x80
 801b916:	a91f      	add	r1, sp, #124	; 0x7c
 801b918:	4620      	mov	r0, r4
 801b91a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b91e:	f002 fc47 	bl	801e1b0 <__d2b>
 801b922:	901e      	str	r0, [sp, #120]	; 0x78
 801b924:	2800      	cmp	r0, #0
 801b926:	f43f aefb 	beq.w	801b720 <_strtod_l+0x498>
 801b92a:	2101      	movs	r1, #1
 801b92c:	4620      	mov	r0, r4
 801b92e:	f002 f99d 	bl	801dc6c <__i2b>
 801b932:	4606      	mov	r6, r0
 801b934:	2800      	cmp	r0, #0
 801b936:	f43f aef3 	beq.w	801b720 <_strtod_l+0x498>
 801b93a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b93c:	9904      	ldr	r1, [sp, #16]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	bfab      	itete	ge
 801b942:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801b944:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801b946:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801b948:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801b94c:	bfac      	ite	ge
 801b94e:	eb03 0902 	addge.w	r9, r3, r2
 801b952:	1ad7      	sublt	r7, r2, r3
 801b954:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b956:	eba3 0801 	sub.w	r8, r3, r1
 801b95a:	4490      	add	r8, r2
 801b95c:	4ba3      	ldr	r3, [pc, #652]	; (801bbec <_strtod_l+0x964>)
 801b95e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b962:	4598      	cmp	r8, r3
 801b964:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b968:	f280 80cc 	bge.w	801bb04 <_strtod_l+0x87c>
 801b96c:	eba3 0308 	sub.w	r3, r3, r8
 801b970:	2b1f      	cmp	r3, #31
 801b972:	eba2 0203 	sub.w	r2, r2, r3
 801b976:	f04f 0101 	mov.w	r1, #1
 801b97a:	f300 80b6 	bgt.w	801baea <_strtod_l+0x862>
 801b97e:	fa01 f303 	lsl.w	r3, r1, r3
 801b982:	9311      	str	r3, [sp, #68]	; 0x44
 801b984:	2300      	movs	r3, #0
 801b986:	930c      	str	r3, [sp, #48]	; 0x30
 801b988:	eb09 0802 	add.w	r8, r9, r2
 801b98c:	9b04      	ldr	r3, [sp, #16]
 801b98e:	45c1      	cmp	r9, r8
 801b990:	4417      	add	r7, r2
 801b992:	441f      	add	r7, r3
 801b994:	464b      	mov	r3, r9
 801b996:	bfa8      	it	ge
 801b998:	4643      	movge	r3, r8
 801b99a:	42bb      	cmp	r3, r7
 801b99c:	bfa8      	it	ge
 801b99e:	463b      	movge	r3, r7
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	bfc2      	ittt	gt
 801b9a4:	eba8 0803 	subgt.w	r8, r8, r3
 801b9a8:	1aff      	subgt	r7, r7, r3
 801b9aa:	eba9 0903 	subgt.w	r9, r9, r3
 801b9ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	dd17      	ble.n	801b9e4 <_strtod_l+0x75c>
 801b9b4:	4631      	mov	r1, r6
 801b9b6:	461a      	mov	r2, r3
 801b9b8:	4620      	mov	r0, r4
 801b9ba:	f002 fa13 	bl	801dde4 <__pow5mult>
 801b9be:	4606      	mov	r6, r0
 801b9c0:	2800      	cmp	r0, #0
 801b9c2:	f43f aead 	beq.w	801b720 <_strtod_l+0x498>
 801b9c6:	4601      	mov	r1, r0
 801b9c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b9ca:	4620      	mov	r0, r4
 801b9cc:	f002 f964 	bl	801dc98 <__multiply>
 801b9d0:	900f      	str	r0, [sp, #60]	; 0x3c
 801b9d2:	2800      	cmp	r0, #0
 801b9d4:	f43f aea4 	beq.w	801b720 <_strtod_l+0x498>
 801b9d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b9da:	4620      	mov	r0, r4
 801b9dc:	f002 f840 	bl	801da60 <_Bfree>
 801b9e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b9e2:	931e      	str	r3, [sp, #120]	; 0x78
 801b9e4:	f1b8 0f00 	cmp.w	r8, #0
 801b9e8:	f300 8091 	bgt.w	801bb0e <_strtod_l+0x886>
 801b9ec:	9b08      	ldr	r3, [sp, #32]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	dd08      	ble.n	801ba04 <_strtod_l+0x77c>
 801b9f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b9f4:	9907      	ldr	r1, [sp, #28]
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	f002 f9f4 	bl	801dde4 <__pow5mult>
 801b9fc:	9007      	str	r0, [sp, #28]
 801b9fe:	2800      	cmp	r0, #0
 801ba00:	f43f ae8e 	beq.w	801b720 <_strtod_l+0x498>
 801ba04:	2f00      	cmp	r7, #0
 801ba06:	dd08      	ble.n	801ba1a <_strtod_l+0x792>
 801ba08:	9907      	ldr	r1, [sp, #28]
 801ba0a:	463a      	mov	r2, r7
 801ba0c:	4620      	mov	r0, r4
 801ba0e:	f002 fa43 	bl	801de98 <__lshift>
 801ba12:	9007      	str	r0, [sp, #28]
 801ba14:	2800      	cmp	r0, #0
 801ba16:	f43f ae83 	beq.w	801b720 <_strtod_l+0x498>
 801ba1a:	f1b9 0f00 	cmp.w	r9, #0
 801ba1e:	dd08      	ble.n	801ba32 <_strtod_l+0x7aa>
 801ba20:	4631      	mov	r1, r6
 801ba22:	464a      	mov	r2, r9
 801ba24:	4620      	mov	r0, r4
 801ba26:	f002 fa37 	bl	801de98 <__lshift>
 801ba2a:	4606      	mov	r6, r0
 801ba2c:	2800      	cmp	r0, #0
 801ba2e:	f43f ae77 	beq.w	801b720 <_strtod_l+0x498>
 801ba32:	9a07      	ldr	r2, [sp, #28]
 801ba34:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ba36:	4620      	mov	r0, r4
 801ba38:	f002 fab6 	bl	801dfa8 <__mdiff>
 801ba3c:	4605      	mov	r5, r0
 801ba3e:	2800      	cmp	r0, #0
 801ba40:	f43f ae6e 	beq.w	801b720 <_strtod_l+0x498>
 801ba44:	68c3      	ldr	r3, [r0, #12]
 801ba46:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba48:	2300      	movs	r3, #0
 801ba4a:	60c3      	str	r3, [r0, #12]
 801ba4c:	4631      	mov	r1, r6
 801ba4e:	f002 fa8f 	bl	801df70 <__mcmp>
 801ba52:	2800      	cmp	r0, #0
 801ba54:	da65      	bge.n	801bb22 <_strtod_l+0x89a>
 801ba56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ba58:	ea53 030a 	orrs.w	r3, r3, sl
 801ba5c:	f040 8087 	bne.w	801bb6e <_strtod_l+0x8e6>
 801ba60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	f040 8082 	bne.w	801bb6e <_strtod_l+0x8e6>
 801ba6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ba6e:	0d1b      	lsrs	r3, r3, #20
 801ba70:	051b      	lsls	r3, r3, #20
 801ba72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ba76:	d97a      	bls.n	801bb6e <_strtod_l+0x8e6>
 801ba78:	696b      	ldr	r3, [r5, #20]
 801ba7a:	b913      	cbnz	r3, 801ba82 <_strtod_l+0x7fa>
 801ba7c:	692b      	ldr	r3, [r5, #16]
 801ba7e:	2b01      	cmp	r3, #1
 801ba80:	dd75      	ble.n	801bb6e <_strtod_l+0x8e6>
 801ba82:	4629      	mov	r1, r5
 801ba84:	2201      	movs	r2, #1
 801ba86:	4620      	mov	r0, r4
 801ba88:	f002 fa06 	bl	801de98 <__lshift>
 801ba8c:	4631      	mov	r1, r6
 801ba8e:	4605      	mov	r5, r0
 801ba90:	f002 fa6e 	bl	801df70 <__mcmp>
 801ba94:	2800      	cmp	r0, #0
 801ba96:	dd6a      	ble.n	801bb6e <_strtod_l+0x8e6>
 801ba98:	9904      	ldr	r1, [sp, #16]
 801ba9a:	4a55      	ldr	r2, [pc, #340]	; (801bbf0 <_strtod_l+0x968>)
 801ba9c:	465b      	mov	r3, fp
 801ba9e:	2900      	cmp	r1, #0
 801baa0:	f000 8085 	beq.w	801bbae <_strtod_l+0x926>
 801baa4:	ea02 010b 	and.w	r1, r2, fp
 801baa8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801baac:	dc7f      	bgt.n	801bbae <_strtod_l+0x926>
 801baae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801bab2:	f77f aeaa 	ble.w	801b80a <_strtod_l+0x582>
 801bab6:	4a4f      	ldr	r2, [pc, #316]	; (801bbf4 <_strtod_l+0x96c>)
 801bab8:	2300      	movs	r3, #0
 801baba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801babe:	4650      	mov	r0, sl
 801bac0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801bac4:	4659      	mov	r1, fp
 801bac6:	f7e4 fda7 	bl	8000618 <__aeabi_dmul>
 801baca:	460b      	mov	r3, r1
 801bacc:	4303      	orrs	r3, r0
 801bace:	bf08      	it	eq
 801bad0:	2322      	moveq	r3, #34	; 0x22
 801bad2:	4682      	mov	sl, r0
 801bad4:	468b      	mov	fp, r1
 801bad6:	bf08      	it	eq
 801bad8:	6023      	streq	r3, [r4, #0]
 801bada:	e62b      	b.n	801b734 <_strtod_l+0x4ac>
 801badc:	f04f 32ff 	mov.w	r2, #4294967295
 801bae0:	fa02 f303 	lsl.w	r3, r2, r3
 801bae4:	ea03 0a0a 	and.w	sl, r3, sl
 801bae8:	e6de      	b.n	801b8a8 <_strtod_l+0x620>
 801baea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801baee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801baf2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801baf6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801bafa:	fa01 f308 	lsl.w	r3, r1, r8
 801bafe:	930c      	str	r3, [sp, #48]	; 0x30
 801bb00:	9111      	str	r1, [sp, #68]	; 0x44
 801bb02:	e741      	b.n	801b988 <_strtod_l+0x700>
 801bb04:	2300      	movs	r3, #0
 801bb06:	930c      	str	r3, [sp, #48]	; 0x30
 801bb08:	2301      	movs	r3, #1
 801bb0a:	9311      	str	r3, [sp, #68]	; 0x44
 801bb0c:	e73c      	b.n	801b988 <_strtod_l+0x700>
 801bb0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bb10:	4642      	mov	r2, r8
 801bb12:	4620      	mov	r0, r4
 801bb14:	f002 f9c0 	bl	801de98 <__lshift>
 801bb18:	901e      	str	r0, [sp, #120]	; 0x78
 801bb1a:	2800      	cmp	r0, #0
 801bb1c:	f47f af66 	bne.w	801b9ec <_strtod_l+0x764>
 801bb20:	e5fe      	b.n	801b720 <_strtod_l+0x498>
 801bb22:	465f      	mov	r7, fp
 801bb24:	d16e      	bne.n	801bc04 <_strtod_l+0x97c>
 801bb26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bb28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bb2c:	b342      	cbz	r2, 801bb80 <_strtod_l+0x8f8>
 801bb2e:	4a32      	ldr	r2, [pc, #200]	; (801bbf8 <_strtod_l+0x970>)
 801bb30:	4293      	cmp	r3, r2
 801bb32:	d128      	bne.n	801bb86 <_strtod_l+0x8fe>
 801bb34:	9b04      	ldr	r3, [sp, #16]
 801bb36:	4650      	mov	r0, sl
 801bb38:	b1eb      	cbz	r3, 801bb76 <_strtod_l+0x8ee>
 801bb3a:	4a2d      	ldr	r2, [pc, #180]	; (801bbf0 <_strtod_l+0x968>)
 801bb3c:	403a      	ands	r2, r7
 801bb3e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801bb42:	f04f 31ff 	mov.w	r1, #4294967295
 801bb46:	d819      	bhi.n	801bb7c <_strtod_l+0x8f4>
 801bb48:	0d12      	lsrs	r2, r2, #20
 801bb4a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801bb4e:	fa01 f303 	lsl.w	r3, r1, r3
 801bb52:	4298      	cmp	r0, r3
 801bb54:	d117      	bne.n	801bb86 <_strtod_l+0x8fe>
 801bb56:	4b29      	ldr	r3, [pc, #164]	; (801bbfc <_strtod_l+0x974>)
 801bb58:	429f      	cmp	r7, r3
 801bb5a:	d102      	bne.n	801bb62 <_strtod_l+0x8da>
 801bb5c:	3001      	adds	r0, #1
 801bb5e:	f43f addf 	beq.w	801b720 <_strtod_l+0x498>
 801bb62:	4b23      	ldr	r3, [pc, #140]	; (801bbf0 <_strtod_l+0x968>)
 801bb64:	403b      	ands	r3, r7
 801bb66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801bb6a:	f04f 0a00 	mov.w	sl, #0
 801bb6e:	9b04      	ldr	r3, [sp, #16]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d1a0      	bne.n	801bab6 <_strtod_l+0x82e>
 801bb74:	e5de      	b.n	801b734 <_strtod_l+0x4ac>
 801bb76:	f04f 33ff 	mov.w	r3, #4294967295
 801bb7a:	e7ea      	b.n	801bb52 <_strtod_l+0x8ca>
 801bb7c:	460b      	mov	r3, r1
 801bb7e:	e7e8      	b.n	801bb52 <_strtod_l+0x8ca>
 801bb80:	ea53 030a 	orrs.w	r3, r3, sl
 801bb84:	d088      	beq.n	801ba98 <_strtod_l+0x810>
 801bb86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb88:	b1db      	cbz	r3, 801bbc2 <_strtod_l+0x93a>
 801bb8a:	423b      	tst	r3, r7
 801bb8c:	d0ef      	beq.n	801bb6e <_strtod_l+0x8e6>
 801bb8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb90:	9a04      	ldr	r2, [sp, #16]
 801bb92:	4650      	mov	r0, sl
 801bb94:	4659      	mov	r1, fp
 801bb96:	b1c3      	cbz	r3, 801bbca <_strtod_l+0x942>
 801bb98:	f7ff fb59 	bl	801b24e <sulp>
 801bb9c:	4602      	mov	r2, r0
 801bb9e:	460b      	mov	r3, r1
 801bba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bba4:	f7e4 fb82 	bl	80002ac <__adddf3>
 801bba8:	4682      	mov	sl, r0
 801bbaa:	468b      	mov	fp, r1
 801bbac:	e7df      	b.n	801bb6e <_strtod_l+0x8e6>
 801bbae:	4013      	ands	r3, r2
 801bbb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bbb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801bbb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801bbbc:	f04f 3aff 	mov.w	sl, #4294967295
 801bbc0:	e7d5      	b.n	801bb6e <_strtod_l+0x8e6>
 801bbc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bbc4:	ea13 0f0a 	tst.w	r3, sl
 801bbc8:	e7e0      	b.n	801bb8c <_strtod_l+0x904>
 801bbca:	f7ff fb40 	bl	801b24e <sulp>
 801bbce:	4602      	mov	r2, r0
 801bbd0:	460b      	mov	r3, r1
 801bbd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bbd6:	f7e4 fb67 	bl	80002a8 <__aeabi_dsub>
 801bbda:	2200      	movs	r2, #0
 801bbdc:	2300      	movs	r3, #0
 801bbde:	4682      	mov	sl, r0
 801bbe0:	468b      	mov	fp, r1
 801bbe2:	f7e4 ff81 	bl	8000ae8 <__aeabi_dcmpeq>
 801bbe6:	2800      	cmp	r0, #0
 801bbe8:	d0c1      	beq.n	801bb6e <_strtod_l+0x8e6>
 801bbea:	e60e      	b.n	801b80a <_strtod_l+0x582>
 801bbec:	fffffc02 	.word	0xfffffc02
 801bbf0:	7ff00000 	.word	0x7ff00000
 801bbf4:	39500000 	.word	0x39500000
 801bbf8:	000fffff 	.word	0x000fffff
 801bbfc:	7fefffff 	.word	0x7fefffff
 801bc00:	08021168 	.word	0x08021168
 801bc04:	4631      	mov	r1, r6
 801bc06:	4628      	mov	r0, r5
 801bc08:	f002 fb2e 	bl	801e268 <__ratio>
 801bc0c:	ec59 8b10 	vmov	r8, r9, d0
 801bc10:	ee10 0a10 	vmov	r0, s0
 801bc14:	2200      	movs	r2, #0
 801bc16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bc1a:	4649      	mov	r1, r9
 801bc1c:	f7e4 ff78 	bl	8000b10 <__aeabi_dcmple>
 801bc20:	2800      	cmp	r0, #0
 801bc22:	d07c      	beq.n	801bd1e <_strtod_l+0xa96>
 801bc24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d04c      	beq.n	801bcc4 <_strtod_l+0xa3c>
 801bc2a:	4b95      	ldr	r3, [pc, #596]	; (801be80 <_strtod_l+0xbf8>)
 801bc2c:	2200      	movs	r2, #0
 801bc2e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801bc32:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801be80 <_strtod_l+0xbf8>
 801bc36:	f04f 0800 	mov.w	r8, #0
 801bc3a:	4b92      	ldr	r3, [pc, #584]	; (801be84 <_strtod_l+0xbfc>)
 801bc3c:	403b      	ands	r3, r7
 801bc3e:	9311      	str	r3, [sp, #68]	; 0x44
 801bc40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bc42:	4b91      	ldr	r3, [pc, #580]	; (801be88 <_strtod_l+0xc00>)
 801bc44:	429a      	cmp	r2, r3
 801bc46:	f040 80b2 	bne.w	801bdae <_strtod_l+0xb26>
 801bc4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bc4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bc52:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801bc56:	ec4b ab10 	vmov	d0, sl, fp
 801bc5a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801bc5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801bc62:	f002 fa29 	bl	801e0b8 <__ulp>
 801bc66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bc6a:	ec53 2b10 	vmov	r2, r3, d0
 801bc6e:	f7e4 fcd3 	bl	8000618 <__aeabi_dmul>
 801bc72:	4652      	mov	r2, sl
 801bc74:	465b      	mov	r3, fp
 801bc76:	f7e4 fb19 	bl	80002ac <__adddf3>
 801bc7a:	460b      	mov	r3, r1
 801bc7c:	4981      	ldr	r1, [pc, #516]	; (801be84 <_strtod_l+0xbfc>)
 801bc7e:	4a83      	ldr	r2, [pc, #524]	; (801be8c <_strtod_l+0xc04>)
 801bc80:	4019      	ands	r1, r3
 801bc82:	4291      	cmp	r1, r2
 801bc84:	4682      	mov	sl, r0
 801bc86:	d95e      	bls.n	801bd46 <_strtod_l+0xabe>
 801bc88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc8a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801bc8e:	4293      	cmp	r3, r2
 801bc90:	d103      	bne.n	801bc9a <_strtod_l+0xa12>
 801bc92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc94:	3301      	adds	r3, #1
 801bc96:	f43f ad43 	beq.w	801b720 <_strtod_l+0x498>
 801bc9a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801be98 <_strtod_l+0xc10>
 801bc9e:	f04f 3aff 	mov.w	sl, #4294967295
 801bca2:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bca4:	4620      	mov	r0, r4
 801bca6:	f001 fedb 	bl	801da60 <_Bfree>
 801bcaa:	9907      	ldr	r1, [sp, #28]
 801bcac:	4620      	mov	r0, r4
 801bcae:	f001 fed7 	bl	801da60 <_Bfree>
 801bcb2:	4631      	mov	r1, r6
 801bcb4:	4620      	mov	r0, r4
 801bcb6:	f001 fed3 	bl	801da60 <_Bfree>
 801bcba:	4629      	mov	r1, r5
 801bcbc:	4620      	mov	r0, r4
 801bcbe:	f001 fecf 	bl	801da60 <_Bfree>
 801bcc2:	e613      	b.n	801b8ec <_strtod_l+0x664>
 801bcc4:	f1ba 0f00 	cmp.w	sl, #0
 801bcc8:	d11b      	bne.n	801bd02 <_strtod_l+0xa7a>
 801bcca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bcce:	b9f3      	cbnz	r3, 801bd0e <_strtod_l+0xa86>
 801bcd0:	4b6b      	ldr	r3, [pc, #428]	; (801be80 <_strtod_l+0xbf8>)
 801bcd2:	2200      	movs	r2, #0
 801bcd4:	4640      	mov	r0, r8
 801bcd6:	4649      	mov	r1, r9
 801bcd8:	f7e4 ff10 	bl	8000afc <__aeabi_dcmplt>
 801bcdc:	b9d0      	cbnz	r0, 801bd14 <_strtod_l+0xa8c>
 801bcde:	4640      	mov	r0, r8
 801bce0:	4649      	mov	r1, r9
 801bce2:	4b6b      	ldr	r3, [pc, #428]	; (801be90 <_strtod_l+0xc08>)
 801bce4:	2200      	movs	r2, #0
 801bce6:	f7e4 fc97 	bl	8000618 <__aeabi_dmul>
 801bcea:	4680      	mov	r8, r0
 801bcec:	4689      	mov	r9, r1
 801bcee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801bcf2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801bcf6:	931b      	str	r3, [sp, #108]	; 0x6c
 801bcf8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801bcfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801bd00:	e79b      	b.n	801bc3a <_strtod_l+0x9b2>
 801bd02:	f1ba 0f01 	cmp.w	sl, #1
 801bd06:	d102      	bne.n	801bd0e <_strtod_l+0xa86>
 801bd08:	2f00      	cmp	r7, #0
 801bd0a:	f43f ad7e 	beq.w	801b80a <_strtod_l+0x582>
 801bd0e:	4b61      	ldr	r3, [pc, #388]	; (801be94 <_strtod_l+0xc0c>)
 801bd10:	2200      	movs	r2, #0
 801bd12:	e78c      	b.n	801bc2e <_strtod_l+0x9a6>
 801bd14:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801be90 <_strtod_l+0xc08>
 801bd18:	f04f 0800 	mov.w	r8, #0
 801bd1c:	e7e7      	b.n	801bcee <_strtod_l+0xa66>
 801bd1e:	4b5c      	ldr	r3, [pc, #368]	; (801be90 <_strtod_l+0xc08>)
 801bd20:	4640      	mov	r0, r8
 801bd22:	4649      	mov	r1, r9
 801bd24:	2200      	movs	r2, #0
 801bd26:	f7e4 fc77 	bl	8000618 <__aeabi_dmul>
 801bd2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd2c:	4680      	mov	r8, r0
 801bd2e:	4689      	mov	r9, r1
 801bd30:	b933      	cbnz	r3, 801bd40 <_strtod_l+0xab8>
 801bd32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bd36:	9012      	str	r0, [sp, #72]	; 0x48
 801bd38:	9313      	str	r3, [sp, #76]	; 0x4c
 801bd3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801bd3e:	e7dd      	b.n	801bcfc <_strtod_l+0xa74>
 801bd40:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801bd44:	e7f9      	b.n	801bd3a <_strtod_l+0xab2>
 801bd46:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801bd4a:	9b04      	ldr	r3, [sp, #16]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d1a8      	bne.n	801bca2 <_strtod_l+0xa1a>
 801bd50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bd54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bd56:	0d1b      	lsrs	r3, r3, #20
 801bd58:	051b      	lsls	r3, r3, #20
 801bd5a:	429a      	cmp	r2, r3
 801bd5c:	d1a1      	bne.n	801bca2 <_strtod_l+0xa1a>
 801bd5e:	4640      	mov	r0, r8
 801bd60:	4649      	mov	r1, r9
 801bd62:	f7e4 ffb9 	bl	8000cd8 <__aeabi_d2lz>
 801bd66:	f7e4 fc29 	bl	80005bc <__aeabi_l2d>
 801bd6a:	4602      	mov	r2, r0
 801bd6c:	460b      	mov	r3, r1
 801bd6e:	4640      	mov	r0, r8
 801bd70:	4649      	mov	r1, r9
 801bd72:	f7e4 fa99 	bl	80002a8 <__aeabi_dsub>
 801bd76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bd78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bd7c:	ea43 030a 	orr.w	r3, r3, sl
 801bd80:	4313      	orrs	r3, r2
 801bd82:	4680      	mov	r8, r0
 801bd84:	4689      	mov	r9, r1
 801bd86:	d053      	beq.n	801be30 <_strtod_l+0xba8>
 801bd88:	a335      	add	r3, pc, #212	; (adr r3, 801be60 <_strtod_l+0xbd8>)
 801bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd8e:	f7e4 feb5 	bl	8000afc <__aeabi_dcmplt>
 801bd92:	2800      	cmp	r0, #0
 801bd94:	f47f acce 	bne.w	801b734 <_strtod_l+0x4ac>
 801bd98:	a333      	add	r3, pc, #204	; (adr r3, 801be68 <_strtod_l+0xbe0>)
 801bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd9e:	4640      	mov	r0, r8
 801bda0:	4649      	mov	r1, r9
 801bda2:	f7e4 fec9 	bl	8000b38 <__aeabi_dcmpgt>
 801bda6:	2800      	cmp	r0, #0
 801bda8:	f43f af7b 	beq.w	801bca2 <_strtod_l+0xa1a>
 801bdac:	e4c2      	b.n	801b734 <_strtod_l+0x4ac>
 801bdae:	9b04      	ldr	r3, [sp, #16]
 801bdb0:	b333      	cbz	r3, 801be00 <_strtod_l+0xb78>
 801bdb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bdb4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801bdb8:	d822      	bhi.n	801be00 <_strtod_l+0xb78>
 801bdba:	a32d      	add	r3, pc, #180	; (adr r3, 801be70 <_strtod_l+0xbe8>)
 801bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdc0:	4640      	mov	r0, r8
 801bdc2:	4649      	mov	r1, r9
 801bdc4:	f7e4 fea4 	bl	8000b10 <__aeabi_dcmple>
 801bdc8:	b1a0      	cbz	r0, 801bdf4 <_strtod_l+0xb6c>
 801bdca:	4649      	mov	r1, r9
 801bdcc:	4640      	mov	r0, r8
 801bdce:	f7e4 fefb 	bl	8000bc8 <__aeabi_d2uiz>
 801bdd2:	2801      	cmp	r0, #1
 801bdd4:	bf38      	it	cc
 801bdd6:	2001      	movcc	r0, #1
 801bdd8:	f7e4 fba4 	bl	8000524 <__aeabi_ui2d>
 801bddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bdde:	4680      	mov	r8, r0
 801bde0:	4689      	mov	r9, r1
 801bde2:	bb13      	cbnz	r3, 801be2a <_strtod_l+0xba2>
 801bde4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bde8:	9014      	str	r0, [sp, #80]	; 0x50
 801bdea:	9315      	str	r3, [sp, #84]	; 0x54
 801bdec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801bdf0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801bdf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bdf6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bdf8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801bdfc:	1a9b      	subs	r3, r3, r2
 801bdfe:	930d      	str	r3, [sp, #52]	; 0x34
 801be00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801be04:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801be08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801be0c:	f002 f954 	bl	801e0b8 <__ulp>
 801be10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801be14:	ec53 2b10 	vmov	r2, r3, d0
 801be18:	f7e4 fbfe 	bl	8000618 <__aeabi_dmul>
 801be1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801be20:	f7e4 fa44 	bl	80002ac <__adddf3>
 801be24:	4682      	mov	sl, r0
 801be26:	468b      	mov	fp, r1
 801be28:	e78f      	b.n	801bd4a <_strtod_l+0xac2>
 801be2a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801be2e:	e7dd      	b.n	801bdec <_strtod_l+0xb64>
 801be30:	a311      	add	r3, pc, #68	; (adr r3, 801be78 <_strtod_l+0xbf0>)
 801be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be36:	f7e4 fe61 	bl	8000afc <__aeabi_dcmplt>
 801be3a:	e7b4      	b.n	801bda6 <_strtod_l+0xb1e>
 801be3c:	2300      	movs	r3, #0
 801be3e:	930e      	str	r3, [sp, #56]	; 0x38
 801be40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801be42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801be44:	6013      	str	r3, [r2, #0]
 801be46:	f7ff ba65 	b.w	801b314 <_strtod_l+0x8c>
 801be4a:	2b65      	cmp	r3, #101	; 0x65
 801be4c:	f43f ab5d 	beq.w	801b50a <_strtod_l+0x282>
 801be50:	2b45      	cmp	r3, #69	; 0x45
 801be52:	f43f ab5a 	beq.w	801b50a <_strtod_l+0x282>
 801be56:	2201      	movs	r2, #1
 801be58:	f7ff bb92 	b.w	801b580 <_strtod_l+0x2f8>
 801be5c:	f3af 8000 	nop.w
 801be60:	94a03595 	.word	0x94a03595
 801be64:	3fdfffff 	.word	0x3fdfffff
 801be68:	35afe535 	.word	0x35afe535
 801be6c:	3fe00000 	.word	0x3fe00000
 801be70:	ffc00000 	.word	0xffc00000
 801be74:	41dfffff 	.word	0x41dfffff
 801be78:	94a03595 	.word	0x94a03595
 801be7c:	3fcfffff 	.word	0x3fcfffff
 801be80:	3ff00000 	.word	0x3ff00000
 801be84:	7ff00000 	.word	0x7ff00000
 801be88:	7fe00000 	.word	0x7fe00000
 801be8c:	7c9fffff 	.word	0x7c9fffff
 801be90:	3fe00000 	.word	0x3fe00000
 801be94:	bff00000 	.word	0xbff00000
 801be98:	7fefffff 	.word	0x7fefffff

0801be9c <_strtod_r>:
 801be9c:	4b01      	ldr	r3, [pc, #4]	; (801bea4 <_strtod_r+0x8>)
 801be9e:	f7ff b9f3 	b.w	801b288 <_strtod_l>
 801bea2:	bf00      	nop
 801bea4:	20000268 	.word	0x20000268

0801bea8 <_strtol_l.isra.0>:
 801bea8:	2b01      	cmp	r3, #1
 801beaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801beae:	d001      	beq.n	801beb4 <_strtol_l.isra.0+0xc>
 801beb0:	2b24      	cmp	r3, #36	; 0x24
 801beb2:	d906      	bls.n	801bec2 <_strtol_l.isra.0+0x1a>
 801beb4:	f7fd ff4e 	bl	8019d54 <__errno>
 801beb8:	2316      	movs	r3, #22
 801beba:	6003      	str	r3, [r0, #0]
 801bebc:	2000      	movs	r0, #0
 801bebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bec2:	4f3a      	ldr	r7, [pc, #232]	; (801bfac <_strtol_l.isra.0+0x104>)
 801bec4:	468e      	mov	lr, r1
 801bec6:	4676      	mov	r6, lr
 801bec8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801becc:	5de5      	ldrb	r5, [r4, r7]
 801bece:	f015 0508 	ands.w	r5, r5, #8
 801bed2:	d1f8      	bne.n	801bec6 <_strtol_l.isra.0+0x1e>
 801bed4:	2c2d      	cmp	r4, #45	; 0x2d
 801bed6:	d134      	bne.n	801bf42 <_strtol_l.isra.0+0x9a>
 801bed8:	f89e 4000 	ldrb.w	r4, [lr]
 801bedc:	f04f 0801 	mov.w	r8, #1
 801bee0:	f106 0e02 	add.w	lr, r6, #2
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	d05c      	beq.n	801bfa2 <_strtol_l.isra.0+0xfa>
 801bee8:	2b10      	cmp	r3, #16
 801beea:	d10c      	bne.n	801bf06 <_strtol_l.isra.0+0x5e>
 801beec:	2c30      	cmp	r4, #48	; 0x30
 801beee:	d10a      	bne.n	801bf06 <_strtol_l.isra.0+0x5e>
 801bef0:	f89e 4000 	ldrb.w	r4, [lr]
 801bef4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801bef8:	2c58      	cmp	r4, #88	; 0x58
 801befa:	d14d      	bne.n	801bf98 <_strtol_l.isra.0+0xf0>
 801befc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801bf00:	2310      	movs	r3, #16
 801bf02:	f10e 0e02 	add.w	lr, lr, #2
 801bf06:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801bf0a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bf0e:	2600      	movs	r6, #0
 801bf10:	fbbc f9f3 	udiv	r9, ip, r3
 801bf14:	4635      	mov	r5, r6
 801bf16:	fb03 ca19 	mls	sl, r3, r9, ip
 801bf1a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801bf1e:	2f09      	cmp	r7, #9
 801bf20:	d818      	bhi.n	801bf54 <_strtol_l.isra.0+0xac>
 801bf22:	463c      	mov	r4, r7
 801bf24:	42a3      	cmp	r3, r4
 801bf26:	dd24      	ble.n	801bf72 <_strtol_l.isra.0+0xca>
 801bf28:	2e00      	cmp	r6, #0
 801bf2a:	db1f      	blt.n	801bf6c <_strtol_l.isra.0+0xc4>
 801bf2c:	45a9      	cmp	r9, r5
 801bf2e:	d31d      	bcc.n	801bf6c <_strtol_l.isra.0+0xc4>
 801bf30:	d101      	bne.n	801bf36 <_strtol_l.isra.0+0x8e>
 801bf32:	45a2      	cmp	sl, r4
 801bf34:	db1a      	blt.n	801bf6c <_strtol_l.isra.0+0xc4>
 801bf36:	fb05 4503 	mla	r5, r5, r3, r4
 801bf3a:	2601      	movs	r6, #1
 801bf3c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801bf40:	e7eb      	b.n	801bf1a <_strtol_l.isra.0+0x72>
 801bf42:	2c2b      	cmp	r4, #43	; 0x2b
 801bf44:	bf08      	it	eq
 801bf46:	f89e 4000 	ldrbeq.w	r4, [lr]
 801bf4a:	46a8      	mov	r8, r5
 801bf4c:	bf08      	it	eq
 801bf4e:	f106 0e02 	addeq.w	lr, r6, #2
 801bf52:	e7c7      	b.n	801bee4 <_strtol_l.isra.0+0x3c>
 801bf54:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801bf58:	2f19      	cmp	r7, #25
 801bf5a:	d801      	bhi.n	801bf60 <_strtol_l.isra.0+0xb8>
 801bf5c:	3c37      	subs	r4, #55	; 0x37
 801bf5e:	e7e1      	b.n	801bf24 <_strtol_l.isra.0+0x7c>
 801bf60:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801bf64:	2f19      	cmp	r7, #25
 801bf66:	d804      	bhi.n	801bf72 <_strtol_l.isra.0+0xca>
 801bf68:	3c57      	subs	r4, #87	; 0x57
 801bf6a:	e7db      	b.n	801bf24 <_strtol_l.isra.0+0x7c>
 801bf6c:	f04f 36ff 	mov.w	r6, #4294967295
 801bf70:	e7e4      	b.n	801bf3c <_strtol_l.isra.0+0x94>
 801bf72:	2e00      	cmp	r6, #0
 801bf74:	da05      	bge.n	801bf82 <_strtol_l.isra.0+0xda>
 801bf76:	2322      	movs	r3, #34	; 0x22
 801bf78:	6003      	str	r3, [r0, #0]
 801bf7a:	4665      	mov	r5, ip
 801bf7c:	b942      	cbnz	r2, 801bf90 <_strtol_l.isra.0+0xe8>
 801bf7e:	4628      	mov	r0, r5
 801bf80:	e79d      	b.n	801bebe <_strtol_l.isra.0+0x16>
 801bf82:	f1b8 0f00 	cmp.w	r8, #0
 801bf86:	d000      	beq.n	801bf8a <_strtol_l.isra.0+0xe2>
 801bf88:	426d      	negs	r5, r5
 801bf8a:	2a00      	cmp	r2, #0
 801bf8c:	d0f7      	beq.n	801bf7e <_strtol_l.isra.0+0xd6>
 801bf8e:	b10e      	cbz	r6, 801bf94 <_strtol_l.isra.0+0xec>
 801bf90:	f10e 31ff 	add.w	r1, lr, #4294967295
 801bf94:	6011      	str	r1, [r2, #0]
 801bf96:	e7f2      	b.n	801bf7e <_strtol_l.isra.0+0xd6>
 801bf98:	2430      	movs	r4, #48	; 0x30
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d1b3      	bne.n	801bf06 <_strtol_l.isra.0+0x5e>
 801bf9e:	2308      	movs	r3, #8
 801bfa0:	e7b1      	b.n	801bf06 <_strtol_l.isra.0+0x5e>
 801bfa2:	2c30      	cmp	r4, #48	; 0x30
 801bfa4:	d0a4      	beq.n	801bef0 <_strtol_l.isra.0+0x48>
 801bfa6:	230a      	movs	r3, #10
 801bfa8:	e7ad      	b.n	801bf06 <_strtol_l.isra.0+0x5e>
 801bfaa:	bf00      	nop
 801bfac:	08020fa1 	.word	0x08020fa1

0801bfb0 <_strtol_r>:
 801bfb0:	f7ff bf7a 	b.w	801bea8 <_strtol_l.isra.0>

0801bfb4 <strtol>:
 801bfb4:	4613      	mov	r3, r2
 801bfb6:	460a      	mov	r2, r1
 801bfb8:	4601      	mov	r1, r0
 801bfba:	4802      	ldr	r0, [pc, #8]	; (801bfc4 <strtol+0x10>)
 801bfbc:	6800      	ldr	r0, [r0, #0]
 801bfbe:	f7ff bf73 	b.w	801bea8 <_strtol_l.isra.0>
 801bfc2:	bf00      	nop
 801bfc4:	20000200 	.word	0x20000200

0801bfc8 <_strtoul_l.isra.0>:
 801bfc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bfcc:	4e3b      	ldr	r6, [pc, #236]	; (801c0bc <_strtoul_l.isra.0+0xf4>)
 801bfce:	4686      	mov	lr, r0
 801bfd0:	468c      	mov	ip, r1
 801bfd2:	4660      	mov	r0, ip
 801bfd4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801bfd8:	5da5      	ldrb	r5, [r4, r6]
 801bfda:	f015 0508 	ands.w	r5, r5, #8
 801bfde:	d1f8      	bne.n	801bfd2 <_strtoul_l.isra.0+0xa>
 801bfe0:	2c2d      	cmp	r4, #45	; 0x2d
 801bfe2:	d134      	bne.n	801c04e <_strtoul_l.isra.0+0x86>
 801bfe4:	f89c 4000 	ldrb.w	r4, [ip]
 801bfe8:	f04f 0801 	mov.w	r8, #1
 801bfec:	f100 0c02 	add.w	ip, r0, #2
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d05e      	beq.n	801c0b2 <_strtoul_l.isra.0+0xea>
 801bff4:	2b10      	cmp	r3, #16
 801bff6:	d10c      	bne.n	801c012 <_strtoul_l.isra.0+0x4a>
 801bff8:	2c30      	cmp	r4, #48	; 0x30
 801bffa:	d10a      	bne.n	801c012 <_strtoul_l.isra.0+0x4a>
 801bffc:	f89c 0000 	ldrb.w	r0, [ip]
 801c000:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c004:	2858      	cmp	r0, #88	; 0x58
 801c006:	d14f      	bne.n	801c0a8 <_strtoul_l.isra.0+0xe0>
 801c008:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801c00c:	2310      	movs	r3, #16
 801c00e:	f10c 0c02 	add.w	ip, ip, #2
 801c012:	f04f 37ff 	mov.w	r7, #4294967295
 801c016:	2500      	movs	r5, #0
 801c018:	fbb7 f7f3 	udiv	r7, r7, r3
 801c01c:	fb03 f907 	mul.w	r9, r3, r7
 801c020:	ea6f 0909 	mvn.w	r9, r9
 801c024:	4628      	mov	r0, r5
 801c026:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801c02a:	2e09      	cmp	r6, #9
 801c02c:	d818      	bhi.n	801c060 <_strtoul_l.isra.0+0x98>
 801c02e:	4634      	mov	r4, r6
 801c030:	42a3      	cmp	r3, r4
 801c032:	dd24      	ble.n	801c07e <_strtoul_l.isra.0+0xb6>
 801c034:	2d00      	cmp	r5, #0
 801c036:	db1f      	blt.n	801c078 <_strtoul_l.isra.0+0xb0>
 801c038:	4287      	cmp	r7, r0
 801c03a:	d31d      	bcc.n	801c078 <_strtoul_l.isra.0+0xb0>
 801c03c:	d101      	bne.n	801c042 <_strtoul_l.isra.0+0x7a>
 801c03e:	45a1      	cmp	r9, r4
 801c040:	db1a      	blt.n	801c078 <_strtoul_l.isra.0+0xb0>
 801c042:	fb00 4003 	mla	r0, r0, r3, r4
 801c046:	2501      	movs	r5, #1
 801c048:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c04c:	e7eb      	b.n	801c026 <_strtoul_l.isra.0+0x5e>
 801c04e:	2c2b      	cmp	r4, #43	; 0x2b
 801c050:	bf08      	it	eq
 801c052:	f89c 4000 	ldrbeq.w	r4, [ip]
 801c056:	46a8      	mov	r8, r5
 801c058:	bf08      	it	eq
 801c05a:	f100 0c02 	addeq.w	ip, r0, #2
 801c05e:	e7c7      	b.n	801bff0 <_strtoul_l.isra.0+0x28>
 801c060:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801c064:	2e19      	cmp	r6, #25
 801c066:	d801      	bhi.n	801c06c <_strtoul_l.isra.0+0xa4>
 801c068:	3c37      	subs	r4, #55	; 0x37
 801c06a:	e7e1      	b.n	801c030 <_strtoul_l.isra.0+0x68>
 801c06c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801c070:	2e19      	cmp	r6, #25
 801c072:	d804      	bhi.n	801c07e <_strtoul_l.isra.0+0xb6>
 801c074:	3c57      	subs	r4, #87	; 0x57
 801c076:	e7db      	b.n	801c030 <_strtoul_l.isra.0+0x68>
 801c078:	f04f 35ff 	mov.w	r5, #4294967295
 801c07c:	e7e4      	b.n	801c048 <_strtoul_l.isra.0+0x80>
 801c07e:	2d00      	cmp	r5, #0
 801c080:	da07      	bge.n	801c092 <_strtoul_l.isra.0+0xca>
 801c082:	2322      	movs	r3, #34	; 0x22
 801c084:	f8ce 3000 	str.w	r3, [lr]
 801c088:	f04f 30ff 	mov.w	r0, #4294967295
 801c08c:	b942      	cbnz	r2, 801c0a0 <_strtoul_l.isra.0+0xd8>
 801c08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c092:	f1b8 0f00 	cmp.w	r8, #0
 801c096:	d000      	beq.n	801c09a <_strtoul_l.isra.0+0xd2>
 801c098:	4240      	negs	r0, r0
 801c09a:	2a00      	cmp	r2, #0
 801c09c:	d0f7      	beq.n	801c08e <_strtoul_l.isra.0+0xc6>
 801c09e:	b10d      	cbz	r5, 801c0a4 <_strtoul_l.isra.0+0xdc>
 801c0a0:	f10c 31ff 	add.w	r1, ip, #4294967295
 801c0a4:	6011      	str	r1, [r2, #0]
 801c0a6:	e7f2      	b.n	801c08e <_strtoul_l.isra.0+0xc6>
 801c0a8:	2430      	movs	r4, #48	; 0x30
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d1b1      	bne.n	801c012 <_strtoul_l.isra.0+0x4a>
 801c0ae:	2308      	movs	r3, #8
 801c0b0:	e7af      	b.n	801c012 <_strtoul_l.isra.0+0x4a>
 801c0b2:	2c30      	cmp	r4, #48	; 0x30
 801c0b4:	d0a2      	beq.n	801bffc <_strtoul_l.isra.0+0x34>
 801c0b6:	230a      	movs	r3, #10
 801c0b8:	e7ab      	b.n	801c012 <_strtoul_l.isra.0+0x4a>
 801c0ba:	bf00      	nop
 801c0bc:	08020fa1 	.word	0x08020fa1

0801c0c0 <_strtoul_r>:
 801c0c0:	f7ff bf82 	b.w	801bfc8 <_strtoul_l.isra.0>

0801c0c4 <_vsniprintf_r>:
 801c0c4:	b530      	push	{r4, r5, lr}
 801c0c6:	1e14      	subs	r4, r2, #0
 801c0c8:	4605      	mov	r5, r0
 801c0ca:	b09b      	sub	sp, #108	; 0x6c
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	da05      	bge.n	801c0dc <_vsniprintf_r+0x18>
 801c0d0:	238b      	movs	r3, #139	; 0x8b
 801c0d2:	602b      	str	r3, [r5, #0]
 801c0d4:	f04f 30ff 	mov.w	r0, #4294967295
 801c0d8:	b01b      	add	sp, #108	; 0x6c
 801c0da:	bd30      	pop	{r4, r5, pc}
 801c0dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c0e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c0e4:	bf14      	ite	ne
 801c0e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c0ea:	4623      	moveq	r3, r4
 801c0ec:	9302      	str	r3, [sp, #8]
 801c0ee:	9305      	str	r3, [sp, #20]
 801c0f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c0f4:	9100      	str	r1, [sp, #0]
 801c0f6:	9104      	str	r1, [sp, #16]
 801c0f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c0fc:	4602      	mov	r2, r0
 801c0fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c100:	4669      	mov	r1, sp
 801c102:	4628      	mov	r0, r5
 801c104:	f002 f9b8 	bl	801e478 <_svfiprintf_r>
 801c108:	1c43      	adds	r3, r0, #1
 801c10a:	bfbc      	itt	lt
 801c10c:	238b      	movlt	r3, #139	; 0x8b
 801c10e:	602b      	strlt	r3, [r5, #0]
 801c110:	2c00      	cmp	r4, #0
 801c112:	d0e1      	beq.n	801c0d8 <_vsniprintf_r+0x14>
 801c114:	9b00      	ldr	r3, [sp, #0]
 801c116:	2200      	movs	r2, #0
 801c118:	701a      	strb	r2, [r3, #0]
 801c11a:	e7dd      	b.n	801c0d8 <_vsniprintf_r+0x14>

0801c11c <vsniprintf>:
 801c11c:	b507      	push	{r0, r1, r2, lr}
 801c11e:	9300      	str	r3, [sp, #0]
 801c120:	4613      	mov	r3, r2
 801c122:	460a      	mov	r2, r1
 801c124:	4601      	mov	r1, r0
 801c126:	4803      	ldr	r0, [pc, #12]	; (801c134 <vsniprintf+0x18>)
 801c128:	6800      	ldr	r0, [r0, #0]
 801c12a:	f7ff ffcb 	bl	801c0c4 <_vsniprintf_r>
 801c12e:	b003      	add	sp, #12
 801c130:	f85d fb04 	ldr.w	pc, [sp], #4
 801c134:	20000200 	.word	0x20000200

0801c138 <__swbuf_r>:
 801c138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c13a:	460e      	mov	r6, r1
 801c13c:	4614      	mov	r4, r2
 801c13e:	4605      	mov	r5, r0
 801c140:	b118      	cbz	r0, 801c14a <__swbuf_r+0x12>
 801c142:	6983      	ldr	r3, [r0, #24]
 801c144:	b90b      	cbnz	r3, 801c14a <__swbuf_r+0x12>
 801c146:	f7fd fe63 	bl	8019e10 <__sinit>
 801c14a:	4b21      	ldr	r3, [pc, #132]	; (801c1d0 <__swbuf_r+0x98>)
 801c14c:	429c      	cmp	r4, r3
 801c14e:	d12b      	bne.n	801c1a8 <__swbuf_r+0x70>
 801c150:	686c      	ldr	r4, [r5, #4]
 801c152:	69a3      	ldr	r3, [r4, #24]
 801c154:	60a3      	str	r3, [r4, #8]
 801c156:	89a3      	ldrh	r3, [r4, #12]
 801c158:	071a      	lsls	r2, r3, #28
 801c15a:	d52f      	bpl.n	801c1bc <__swbuf_r+0x84>
 801c15c:	6923      	ldr	r3, [r4, #16]
 801c15e:	b36b      	cbz	r3, 801c1bc <__swbuf_r+0x84>
 801c160:	6923      	ldr	r3, [r4, #16]
 801c162:	6820      	ldr	r0, [r4, #0]
 801c164:	1ac0      	subs	r0, r0, r3
 801c166:	6963      	ldr	r3, [r4, #20]
 801c168:	b2f6      	uxtb	r6, r6
 801c16a:	4283      	cmp	r3, r0
 801c16c:	4637      	mov	r7, r6
 801c16e:	dc04      	bgt.n	801c17a <__swbuf_r+0x42>
 801c170:	4621      	mov	r1, r4
 801c172:	4628      	mov	r0, r5
 801c174:	f000 ffde 	bl	801d134 <_fflush_r>
 801c178:	bb30      	cbnz	r0, 801c1c8 <__swbuf_r+0x90>
 801c17a:	68a3      	ldr	r3, [r4, #8]
 801c17c:	3b01      	subs	r3, #1
 801c17e:	60a3      	str	r3, [r4, #8]
 801c180:	6823      	ldr	r3, [r4, #0]
 801c182:	1c5a      	adds	r2, r3, #1
 801c184:	6022      	str	r2, [r4, #0]
 801c186:	701e      	strb	r6, [r3, #0]
 801c188:	6963      	ldr	r3, [r4, #20]
 801c18a:	3001      	adds	r0, #1
 801c18c:	4283      	cmp	r3, r0
 801c18e:	d004      	beq.n	801c19a <__swbuf_r+0x62>
 801c190:	89a3      	ldrh	r3, [r4, #12]
 801c192:	07db      	lsls	r3, r3, #31
 801c194:	d506      	bpl.n	801c1a4 <__swbuf_r+0x6c>
 801c196:	2e0a      	cmp	r6, #10
 801c198:	d104      	bne.n	801c1a4 <__swbuf_r+0x6c>
 801c19a:	4621      	mov	r1, r4
 801c19c:	4628      	mov	r0, r5
 801c19e:	f000 ffc9 	bl	801d134 <_fflush_r>
 801c1a2:	b988      	cbnz	r0, 801c1c8 <__swbuf_r+0x90>
 801c1a4:	4638      	mov	r0, r7
 801c1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1a8:	4b0a      	ldr	r3, [pc, #40]	; (801c1d4 <__swbuf_r+0x9c>)
 801c1aa:	429c      	cmp	r4, r3
 801c1ac:	d101      	bne.n	801c1b2 <__swbuf_r+0x7a>
 801c1ae:	68ac      	ldr	r4, [r5, #8]
 801c1b0:	e7cf      	b.n	801c152 <__swbuf_r+0x1a>
 801c1b2:	4b09      	ldr	r3, [pc, #36]	; (801c1d8 <__swbuf_r+0xa0>)
 801c1b4:	429c      	cmp	r4, r3
 801c1b6:	bf08      	it	eq
 801c1b8:	68ec      	ldreq	r4, [r5, #12]
 801c1ba:	e7ca      	b.n	801c152 <__swbuf_r+0x1a>
 801c1bc:	4621      	mov	r1, r4
 801c1be:	4628      	mov	r0, r5
 801c1c0:	f000 f81e 	bl	801c200 <__swsetup_r>
 801c1c4:	2800      	cmp	r0, #0
 801c1c6:	d0cb      	beq.n	801c160 <__swbuf_r+0x28>
 801c1c8:	f04f 37ff 	mov.w	r7, #4294967295
 801c1cc:	e7ea      	b.n	801c1a4 <__swbuf_r+0x6c>
 801c1ce:	bf00      	nop
 801c1d0:	080210c4 	.word	0x080210c4
 801c1d4:	080210e4 	.word	0x080210e4
 801c1d8:	080210a4 	.word	0x080210a4

0801c1dc <_write_r>:
 801c1dc:	b538      	push	{r3, r4, r5, lr}
 801c1de:	4d07      	ldr	r5, [pc, #28]	; (801c1fc <_write_r+0x20>)
 801c1e0:	4604      	mov	r4, r0
 801c1e2:	4608      	mov	r0, r1
 801c1e4:	4611      	mov	r1, r2
 801c1e6:	2200      	movs	r2, #0
 801c1e8:	602a      	str	r2, [r5, #0]
 801c1ea:	461a      	mov	r2, r3
 801c1ec:	f7e6 ffd5 	bl	800319a <_write>
 801c1f0:	1c43      	adds	r3, r0, #1
 801c1f2:	d102      	bne.n	801c1fa <_write_r+0x1e>
 801c1f4:	682b      	ldr	r3, [r5, #0]
 801c1f6:	b103      	cbz	r3, 801c1fa <_write_r+0x1e>
 801c1f8:	6023      	str	r3, [r4, #0]
 801c1fa:	bd38      	pop	{r3, r4, r5, pc}
 801c1fc:	20008e08 	.word	0x20008e08

0801c200 <__swsetup_r>:
 801c200:	4b32      	ldr	r3, [pc, #200]	; (801c2cc <__swsetup_r+0xcc>)
 801c202:	b570      	push	{r4, r5, r6, lr}
 801c204:	681d      	ldr	r5, [r3, #0]
 801c206:	4606      	mov	r6, r0
 801c208:	460c      	mov	r4, r1
 801c20a:	b125      	cbz	r5, 801c216 <__swsetup_r+0x16>
 801c20c:	69ab      	ldr	r3, [r5, #24]
 801c20e:	b913      	cbnz	r3, 801c216 <__swsetup_r+0x16>
 801c210:	4628      	mov	r0, r5
 801c212:	f7fd fdfd 	bl	8019e10 <__sinit>
 801c216:	4b2e      	ldr	r3, [pc, #184]	; (801c2d0 <__swsetup_r+0xd0>)
 801c218:	429c      	cmp	r4, r3
 801c21a:	d10f      	bne.n	801c23c <__swsetup_r+0x3c>
 801c21c:	686c      	ldr	r4, [r5, #4]
 801c21e:	89a3      	ldrh	r3, [r4, #12]
 801c220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c224:	0719      	lsls	r1, r3, #28
 801c226:	d42c      	bmi.n	801c282 <__swsetup_r+0x82>
 801c228:	06dd      	lsls	r5, r3, #27
 801c22a:	d411      	bmi.n	801c250 <__swsetup_r+0x50>
 801c22c:	2309      	movs	r3, #9
 801c22e:	6033      	str	r3, [r6, #0]
 801c230:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c234:	81a3      	strh	r3, [r4, #12]
 801c236:	f04f 30ff 	mov.w	r0, #4294967295
 801c23a:	e03e      	b.n	801c2ba <__swsetup_r+0xba>
 801c23c:	4b25      	ldr	r3, [pc, #148]	; (801c2d4 <__swsetup_r+0xd4>)
 801c23e:	429c      	cmp	r4, r3
 801c240:	d101      	bne.n	801c246 <__swsetup_r+0x46>
 801c242:	68ac      	ldr	r4, [r5, #8]
 801c244:	e7eb      	b.n	801c21e <__swsetup_r+0x1e>
 801c246:	4b24      	ldr	r3, [pc, #144]	; (801c2d8 <__swsetup_r+0xd8>)
 801c248:	429c      	cmp	r4, r3
 801c24a:	bf08      	it	eq
 801c24c:	68ec      	ldreq	r4, [r5, #12]
 801c24e:	e7e6      	b.n	801c21e <__swsetup_r+0x1e>
 801c250:	0758      	lsls	r0, r3, #29
 801c252:	d512      	bpl.n	801c27a <__swsetup_r+0x7a>
 801c254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c256:	b141      	cbz	r1, 801c26a <__swsetup_r+0x6a>
 801c258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c25c:	4299      	cmp	r1, r3
 801c25e:	d002      	beq.n	801c266 <__swsetup_r+0x66>
 801c260:	4630      	mov	r0, r6
 801c262:	f7fd fed3 	bl	801a00c <_free_r>
 801c266:	2300      	movs	r3, #0
 801c268:	6363      	str	r3, [r4, #52]	; 0x34
 801c26a:	89a3      	ldrh	r3, [r4, #12]
 801c26c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c270:	81a3      	strh	r3, [r4, #12]
 801c272:	2300      	movs	r3, #0
 801c274:	6063      	str	r3, [r4, #4]
 801c276:	6923      	ldr	r3, [r4, #16]
 801c278:	6023      	str	r3, [r4, #0]
 801c27a:	89a3      	ldrh	r3, [r4, #12]
 801c27c:	f043 0308 	orr.w	r3, r3, #8
 801c280:	81a3      	strh	r3, [r4, #12]
 801c282:	6923      	ldr	r3, [r4, #16]
 801c284:	b94b      	cbnz	r3, 801c29a <__swsetup_r+0x9a>
 801c286:	89a3      	ldrh	r3, [r4, #12]
 801c288:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c290:	d003      	beq.n	801c29a <__swsetup_r+0x9a>
 801c292:	4621      	mov	r1, r4
 801c294:	4630      	mov	r0, r6
 801c296:	f001 fb45 	bl	801d924 <__smakebuf_r>
 801c29a:	89a0      	ldrh	r0, [r4, #12]
 801c29c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c2a0:	f010 0301 	ands.w	r3, r0, #1
 801c2a4:	d00a      	beq.n	801c2bc <__swsetup_r+0xbc>
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	60a3      	str	r3, [r4, #8]
 801c2aa:	6963      	ldr	r3, [r4, #20]
 801c2ac:	425b      	negs	r3, r3
 801c2ae:	61a3      	str	r3, [r4, #24]
 801c2b0:	6923      	ldr	r3, [r4, #16]
 801c2b2:	b943      	cbnz	r3, 801c2c6 <__swsetup_r+0xc6>
 801c2b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c2b8:	d1ba      	bne.n	801c230 <__swsetup_r+0x30>
 801c2ba:	bd70      	pop	{r4, r5, r6, pc}
 801c2bc:	0781      	lsls	r1, r0, #30
 801c2be:	bf58      	it	pl
 801c2c0:	6963      	ldrpl	r3, [r4, #20]
 801c2c2:	60a3      	str	r3, [r4, #8]
 801c2c4:	e7f4      	b.n	801c2b0 <__swsetup_r+0xb0>
 801c2c6:	2000      	movs	r0, #0
 801c2c8:	e7f7      	b.n	801c2ba <__swsetup_r+0xba>
 801c2ca:	bf00      	nop
 801c2cc:	20000200 	.word	0x20000200
 801c2d0:	080210c4 	.word	0x080210c4
 801c2d4:	080210e4 	.word	0x080210e4
 801c2d8:	080210a4 	.word	0x080210a4

0801c2dc <__assert_func>:
 801c2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c2de:	4614      	mov	r4, r2
 801c2e0:	461a      	mov	r2, r3
 801c2e2:	4b09      	ldr	r3, [pc, #36]	; (801c308 <__assert_func+0x2c>)
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	4605      	mov	r5, r0
 801c2e8:	68d8      	ldr	r0, [r3, #12]
 801c2ea:	b14c      	cbz	r4, 801c300 <__assert_func+0x24>
 801c2ec:	4b07      	ldr	r3, [pc, #28]	; (801c30c <__assert_func+0x30>)
 801c2ee:	9100      	str	r1, [sp, #0]
 801c2f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c2f4:	4906      	ldr	r1, [pc, #24]	; (801c310 <__assert_func+0x34>)
 801c2f6:	462b      	mov	r3, r5
 801c2f8:	f000 ff58 	bl	801d1ac <fiprintf>
 801c2fc:	f7fd fd22 	bl	8019d44 <abort>
 801c300:	4b04      	ldr	r3, [pc, #16]	; (801c314 <__assert_func+0x38>)
 801c302:	461c      	mov	r4, r3
 801c304:	e7f3      	b.n	801c2ee <__assert_func+0x12>
 801c306:	bf00      	nop
 801c308:	20000200 	.word	0x20000200
 801c30c:	08021190 	.word	0x08021190
 801c310:	0802119d 	.word	0x0802119d
 801c314:	080211cb 	.word	0x080211cb

0801c318 <_close_r>:
 801c318:	b538      	push	{r3, r4, r5, lr}
 801c31a:	4d06      	ldr	r5, [pc, #24]	; (801c334 <_close_r+0x1c>)
 801c31c:	2300      	movs	r3, #0
 801c31e:	4604      	mov	r4, r0
 801c320:	4608      	mov	r0, r1
 801c322:	602b      	str	r3, [r5, #0]
 801c324:	f7e6 ff55 	bl	80031d2 <_close>
 801c328:	1c43      	adds	r3, r0, #1
 801c32a:	d102      	bne.n	801c332 <_close_r+0x1a>
 801c32c:	682b      	ldr	r3, [r5, #0]
 801c32e:	b103      	cbz	r3, 801c332 <_close_r+0x1a>
 801c330:	6023      	str	r3, [r4, #0]
 801c332:	bd38      	pop	{r3, r4, r5, pc}
 801c334:	20008e08 	.word	0x20008e08

0801c338 <quorem>:
 801c338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c33c:	6903      	ldr	r3, [r0, #16]
 801c33e:	690c      	ldr	r4, [r1, #16]
 801c340:	42a3      	cmp	r3, r4
 801c342:	4607      	mov	r7, r0
 801c344:	f2c0 8081 	blt.w	801c44a <quorem+0x112>
 801c348:	3c01      	subs	r4, #1
 801c34a:	f101 0814 	add.w	r8, r1, #20
 801c34e:	f100 0514 	add.w	r5, r0, #20
 801c352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c356:	9301      	str	r3, [sp, #4]
 801c358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c35c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c360:	3301      	adds	r3, #1
 801c362:	429a      	cmp	r2, r3
 801c364:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c36c:	fbb2 f6f3 	udiv	r6, r2, r3
 801c370:	d331      	bcc.n	801c3d6 <quorem+0x9e>
 801c372:	f04f 0e00 	mov.w	lr, #0
 801c376:	4640      	mov	r0, r8
 801c378:	46ac      	mov	ip, r5
 801c37a:	46f2      	mov	sl, lr
 801c37c:	f850 2b04 	ldr.w	r2, [r0], #4
 801c380:	b293      	uxth	r3, r2
 801c382:	fb06 e303 	mla	r3, r6, r3, lr
 801c386:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c38a:	b29b      	uxth	r3, r3
 801c38c:	ebaa 0303 	sub.w	r3, sl, r3
 801c390:	0c12      	lsrs	r2, r2, #16
 801c392:	f8dc a000 	ldr.w	sl, [ip]
 801c396:	fb06 e202 	mla	r2, r6, r2, lr
 801c39a:	fa13 f38a 	uxtah	r3, r3, sl
 801c39e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c3a2:	fa1f fa82 	uxth.w	sl, r2
 801c3a6:	f8dc 2000 	ldr.w	r2, [ip]
 801c3aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c3ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c3b2:	b29b      	uxth	r3, r3
 801c3b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c3b8:	4581      	cmp	r9, r0
 801c3ba:	f84c 3b04 	str.w	r3, [ip], #4
 801c3be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c3c2:	d2db      	bcs.n	801c37c <quorem+0x44>
 801c3c4:	f855 300b 	ldr.w	r3, [r5, fp]
 801c3c8:	b92b      	cbnz	r3, 801c3d6 <quorem+0x9e>
 801c3ca:	9b01      	ldr	r3, [sp, #4]
 801c3cc:	3b04      	subs	r3, #4
 801c3ce:	429d      	cmp	r5, r3
 801c3d0:	461a      	mov	r2, r3
 801c3d2:	d32e      	bcc.n	801c432 <quorem+0xfa>
 801c3d4:	613c      	str	r4, [r7, #16]
 801c3d6:	4638      	mov	r0, r7
 801c3d8:	f001 fdca 	bl	801df70 <__mcmp>
 801c3dc:	2800      	cmp	r0, #0
 801c3de:	db24      	blt.n	801c42a <quorem+0xf2>
 801c3e0:	3601      	adds	r6, #1
 801c3e2:	4628      	mov	r0, r5
 801c3e4:	f04f 0c00 	mov.w	ip, #0
 801c3e8:	f858 2b04 	ldr.w	r2, [r8], #4
 801c3ec:	f8d0 e000 	ldr.w	lr, [r0]
 801c3f0:	b293      	uxth	r3, r2
 801c3f2:	ebac 0303 	sub.w	r3, ip, r3
 801c3f6:	0c12      	lsrs	r2, r2, #16
 801c3f8:	fa13 f38e 	uxtah	r3, r3, lr
 801c3fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c404:	b29b      	uxth	r3, r3
 801c406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c40a:	45c1      	cmp	r9, r8
 801c40c:	f840 3b04 	str.w	r3, [r0], #4
 801c410:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c414:	d2e8      	bcs.n	801c3e8 <quorem+0xb0>
 801c416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c41a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c41e:	b922      	cbnz	r2, 801c42a <quorem+0xf2>
 801c420:	3b04      	subs	r3, #4
 801c422:	429d      	cmp	r5, r3
 801c424:	461a      	mov	r2, r3
 801c426:	d30a      	bcc.n	801c43e <quorem+0x106>
 801c428:	613c      	str	r4, [r7, #16]
 801c42a:	4630      	mov	r0, r6
 801c42c:	b003      	add	sp, #12
 801c42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c432:	6812      	ldr	r2, [r2, #0]
 801c434:	3b04      	subs	r3, #4
 801c436:	2a00      	cmp	r2, #0
 801c438:	d1cc      	bne.n	801c3d4 <quorem+0x9c>
 801c43a:	3c01      	subs	r4, #1
 801c43c:	e7c7      	b.n	801c3ce <quorem+0x96>
 801c43e:	6812      	ldr	r2, [r2, #0]
 801c440:	3b04      	subs	r3, #4
 801c442:	2a00      	cmp	r2, #0
 801c444:	d1f0      	bne.n	801c428 <quorem+0xf0>
 801c446:	3c01      	subs	r4, #1
 801c448:	e7eb      	b.n	801c422 <quorem+0xea>
 801c44a:	2000      	movs	r0, #0
 801c44c:	e7ee      	b.n	801c42c <quorem+0xf4>
	...

0801c450 <_dtoa_r>:
 801c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c454:	ed2d 8b02 	vpush	{d8}
 801c458:	ec57 6b10 	vmov	r6, r7, d0
 801c45c:	b095      	sub	sp, #84	; 0x54
 801c45e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c464:	9105      	str	r1, [sp, #20]
 801c466:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801c46a:	4604      	mov	r4, r0
 801c46c:	9209      	str	r2, [sp, #36]	; 0x24
 801c46e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c470:	b975      	cbnz	r5, 801c490 <_dtoa_r+0x40>
 801c472:	2010      	movs	r0, #16
 801c474:	f7fd fd92 	bl	8019f9c <malloc>
 801c478:	4602      	mov	r2, r0
 801c47a:	6260      	str	r0, [r4, #36]	; 0x24
 801c47c:	b920      	cbnz	r0, 801c488 <_dtoa_r+0x38>
 801c47e:	4bb2      	ldr	r3, [pc, #712]	; (801c748 <_dtoa_r+0x2f8>)
 801c480:	21ea      	movs	r1, #234	; 0xea
 801c482:	48b2      	ldr	r0, [pc, #712]	; (801c74c <_dtoa_r+0x2fc>)
 801c484:	f7ff ff2a 	bl	801c2dc <__assert_func>
 801c488:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c48c:	6005      	str	r5, [r0, #0]
 801c48e:	60c5      	str	r5, [r0, #12]
 801c490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c492:	6819      	ldr	r1, [r3, #0]
 801c494:	b151      	cbz	r1, 801c4ac <_dtoa_r+0x5c>
 801c496:	685a      	ldr	r2, [r3, #4]
 801c498:	604a      	str	r2, [r1, #4]
 801c49a:	2301      	movs	r3, #1
 801c49c:	4093      	lsls	r3, r2
 801c49e:	608b      	str	r3, [r1, #8]
 801c4a0:	4620      	mov	r0, r4
 801c4a2:	f001 fadd 	bl	801da60 <_Bfree>
 801c4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c4a8:	2200      	movs	r2, #0
 801c4aa:	601a      	str	r2, [r3, #0]
 801c4ac:	1e3b      	subs	r3, r7, #0
 801c4ae:	bfb9      	ittee	lt
 801c4b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c4b4:	9303      	strlt	r3, [sp, #12]
 801c4b6:	2300      	movge	r3, #0
 801c4b8:	f8c8 3000 	strge.w	r3, [r8]
 801c4bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801c4c0:	4ba3      	ldr	r3, [pc, #652]	; (801c750 <_dtoa_r+0x300>)
 801c4c2:	bfbc      	itt	lt
 801c4c4:	2201      	movlt	r2, #1
 801c4c6:	f8c8 2000 	strlt.w	r2, [r8]
 801c4ca:	ea33 0309 	bics.w	r3, r3, r9
 801c4ce:	d11b      	bne.n	801c508 <_dtoa_r+0xb8>
 801c4d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c4d2:	f242 730f 	movw	r3, #9999	; 0x270f
 801c4d6:	6013      	str	r3, [r2, #0]
 801c4d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c4dc:	4333      	orrs	r3, r6
 801c4de:	f000 857a 	beq.w	801cfd6 <_dtoa_r+0xb86>
 801c4e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c4e4:	b963      	cbnz	r3, 801c500 <_dtoa_r+0xb0>
 801c4e6:	4b9b      	ldr	r3, [pc, #620]	; (801c754 <_dtoa_r+0x304>)
 801c4e8:	e024      	b.n	801c534 <_dtoa_r+0xe4>
 801c4ea:	4b9b      	ldr	r3, [pc, #620]	; (801c758 <_dtoa_r+0x308>)
 801c4ec:	9300      	str	r3, [sp, #0]
 801c4ee:	3308      	adds	r3, #8
 801c4f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c4f2:	6013      	str	r3, [r2, #0]
 801c4f4:	9800      	ldr	r0, [sp, #0]
 801c4f6:	b015      	add	sp, #84	; 0x54
 801c4f8:	ecbd 8b02 	vpop	{d8}
 801c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c500:	4b94      	ldr	r3, [pc, #592]	; (801c754 <_dtoa_r+0x304>)
 801c502:	9300      	str	r3, [sp, #0]
 801c504:	3303      	adds	r3, #3
 801c506:	e7f3      	b.n	801c4f0 <_dtoa_r+0xa0>
 801c508:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c50c:	2200      	movs	r2, #0
 801c50e:	ec51 0b17 	vmov	r0, r1, d7
 801c512:	2300      	movs	r3, #0
 801c514:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c518:	f7e4 fae6 	bl	8000ae8 <__aeabi_dcmpeq>
 801c51c:	4680      	mov	r8, r0
 801c51e:	b158      	cbz	r0, 801c538 <_dtoa_r+0xe8>
 801c520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c522:	2301      	movs	r3, #1
 801c524:	6013      	str	r3, [r2, #0]
 801c526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c528:	2b00      	cmp	r3, #0
 801c52a:	f000 8551 	beq.w	801cfd0 <_dtoa_r+0xb80>
 801c52e:	488b      	ldr	r0, [pc, #556]	; (801c75c <_dtoa_r+0x30c>)
 801c530:	6018      	str	r0, [r3, #0]
 801c532:	1e43      	subs	r3, r0, #1
 801c534:	9300      	str	r3, [sp, #0]
 801c536:	e7dd      	b.n	801c4f4 <_dtoa_r+0xa4>
 801c538:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c53c:	aa12      	add	r2, sp, #72	; 0x48
 801c53e:	a913      	add	r1, sp, #76	; 0x4c
 801c540:	4620      	mov	r0, r4
 801c542:	f001 fe35 	bl	801e1b0 <__d2b>
 801c546:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c54a:	4683      	mov	fp, r0
 801c54c:	2d00      	cmp	r5, #0
 801c54e:	d07c      	beq.n	801c64a <_dtoa_r+0x1fa>
 801c550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c552:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801c556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c55a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801c55e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c562:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c56a:	4b7d      	ldr	r3, [pc, #500]	; (801c760 <_dtoa_r+0x310>)
 801c56c:	2200      	movs	r2, #0
 801c56e:	4630      	mov	r0, r6
 801c570:	4639      	mov	r1, r7
 801c572:	f7e3 fe99 	bl	80002a8 <__aeabi_dsub>
 801c576:	a36e      	add	r3, pc, #440	; (adr r3, 801c730 <_dtoa_r+0x2e0>)
 801c578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c57c:	f7e4 f84c 	bl	8000618 <__aeabi_dmul>
 801c580:	a36d      	add	r3, pc, #436	; (adr r3, 801c738 <_dtoa_r+0x2e8>)
 801c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c586:	f7e3 fe91 	bl	80002ac <__adddf3>
 801c58a:	4606      	mov	r6, r0
 801c58c:	4628      	mov	r0, r5
 801c58e:	460f      	mov	r7, r1
 801c590:	f7e3 ffd8 	bl	8000544 <__aeabi_i2d>
 801c594:	a36a      	add	r3, pc, #424	; (adr r3, 801c740 <_dtoa_r+0x2f0>)
 801c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c59a:	f7e4 f83d 	bl	8000618 <__aeabi_dmul>
 801c59e:	4602      	mov	r2, r0
 801c5a0:	460b      	mov	r3, r1
 801c5a2:	4630      	mov	r0, r6
 801c5a4:	4639      	mov	r1, r7
 801c5a6:	f7e3 fe81 	bl	80002ac <__adddf3>
 801c5aa:	4606      	mov	r6, r0
 801c5ac:	460f      	mov	r7, r1
 801c5ae:	f7e4 fae3 	bl	8000b78 <__aeabi_d2iz>
 801c5b2:	2200      	movs	r2, #0
 801c5b4:	4682      	mov	sl, r0
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	4630      	mov	r0, r6
 801c5ba:	4639      	mov	r1, r7
 801c5bc:	f7e4 fa9e 	bl	8000afc <__aeabi_dcmplt>
 801c5c0:	b148      	cbz	r0, 801c5d6 <_dtoa_r+0x186>
 801c5c2:	4650      	mov	r0, sl
 801c5c4:	f7e3 ffbe 	bl	8000544 <__aeabi_i2d>
 801c5c8:	4632      	mov	r2, r6
 801c5ca:	463b      	mov	r3, r7
 801c5cc:	f7e4 fa8c 	bl	8000ae8 <__aeabi_dcmpeq>
 801c5d0:	b908      	cbnz	r0, 801c5d6 <_dtoa_r+0x186>
 801c5d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c5d6:	f1ba 0f16 	cmp.w	sl, #22
 801c5da:	d854      	bhi.n	801c686 <_dtoa_r+0x236>
 801c5dc:	4b61      	ldr	r3, [pc, #388]	; (801c764 <_dtoa_r+0x314>)
 801c5de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c5ea:	f7e4 fa87 	bl	8000afc <__aeabi_dcmplt>
 801c5ee:	2800      	cmp	r0, #0
 801c5f0:	d04b      	beq.n	801c68a <_dtoa_r+0x23a>
 801c5f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c5f6:	2300      	movs	r3, #0
 801c5f8:	930e      	str	r3, [sp, #56]	; 0x38
 801c5fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c5fc:	1b5d      	subs	r5, r3, r5
 801c5fe:	1e6b      	subs	r3, r5, #1
 801c600:	9304      	str	r3, [sp, #16]
 801c602:	bf43      	ittte	mi
 801c604:	2300      	movmi	r3, #0
 801c606:	f1c5 0801 	rsbmi	r8, r5, #1
 801c60a:	9304      	strmi	r3, [sp, #16]
 801c60c:	f04f 0800 	movpl.w	r8, #0
 801c610:	f1ba 0f00 	cmp.w	sl, #0
 801c614:	db3b      	blt.n	801c68e <_dtoa_r+0x23e>
 801c616:	9b04      	ldr	r3, [sp, #16]
 801c618:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801c61c:	4453      	add	r3, sl
 801c61e:	9304      	str	r3, [sp, #16]
 801c620:	2300      	movs	r3, #0
 801c622:	9306      	str	r3, [sp, #24]
 801c624:	9b05      	ldr	r3, [sp, #20]
 801c626:	2b09      	cmp	r3, #9
 801c628:	d869      	bhi.n	801c6fe <_dtoa_r+0x2ae>
 801c62a:	2b05      	cmp	r3, #5
 801c62c:	bfc4      	itt	gt
 801c62e:	3b04      	subgt	r3, #4
 801c630:	9305      	strgt	r3, [sp, #20]
 801c632:	9b05      	ldr	r3, [sp, #20]
 801c634:	f1a3 0302 	sub.w	r3, r3, #2
 801c638:	bfcc      	ite	gt
 801c63a:	2500      	movgt	r5, #0
 801c63c:	2501      	movle	r5, #1
 801c63e:	2b03      	cmp	r3, #3
 801c640:	d869      	bhi.n	801c716 <_dtoa_r+0x2c6>
 801c642:	e8df f003 	tbb	[pc, r3]
 801c646:	4e2c      	.short	0x4e2c
 801c648:	5a4c      	.short	0x5a4c
 801c64a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801c64e:	441d      	add	r5, r3
 801c650:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c654:	2b20      	cmp	r3, #32
 801c656:	bfc1      	itttt	gt
 801c658:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c65c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c660:	fa09 f303 	lslgt.w	r3, r9, r3
 801c664:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c668:	bfda      	itte	le
 801c66a:	f1c3 0320 	rsble	r3, r3, #32
 801c66e:	fa06 f003 	lslle.w	r0, r6, r3
 801c672:	4318      	orrgt	r0, r3
 801c674:	f7e3 ff56 	bl	8000524 <__aeabi_ui2d>
 801c678:	2301      	movs	r3, #1
 801c67a:	4606      	mov	r6, r0
 801c67c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c680:	3d01      	subs	r5, #1
 801c682:	9310      	str	r3, [sp, #64]	; 0x40
 801c684:	e771      	b.n	801c56a <_dtoa_r+0x11a>
 801c686:	2301      	movs	r3, #1
 801c688:	e7b6      	b.n	801c5f8 <_dtoa_r+0x1a8>
 801c68a:	900e      	str	r0, [sp, #56]	; 0x38
 801c68c:	e7b5      	b.n	801c5fa <_dtoa_r+0x1aa>
 801c68e:	f1ca 0300 	rsb	r3, sl, #0
 801c692:	9306      	str	r3, [sp, #24]
 801c694:	2300      	movs	r3, #0
 801c696:	eba8 080a 	sub.w	r8, r8, sl
 801c69a:	930d      	str	r3, [sp, #52]	; 0x34
 801c69c:	e7c2      	b.n	801c624 <_dtoa_r+0x1d4>
 801c69e:	2300      	movs	r3, #0
 801c6a0:	9308      	str	r3, [sp, #32]
 801c6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	dc39      	bgt.n	801c71c <_dtoa_r+0x2cc>
 801c6a8:	f04f 0901 	mov.w	r9, #1
 801c6ac:	f8cd 9004 	str.w	r9, [sp, #4]
 801c6b0:	464b      	mov	r3, r9
 801c6b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c6b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c6b8:	2200      	movs	r2, #0
 801c6ba:	6042      	str	r2, [r0, #4]
 801c6bc:	2204      	movs	r2, #4
 801c6be:	f102 0614 	add.w	r6, r2, #20
 801c6c2:	429e      	cmp	r6, r3
 801c6c4:	6841      	ldr	r1, [r0, #4]
 801c6c6:	d92f      	bls.n	801c728 <_dtoa_r+0x2d8>
 801c6c8:	4620      	mov	r0, r4
 801c6ca:	f001 f989 	bl	801d9e0 <_Balloc>
 801c6ce:	9000      	str	r0, [sp, #0]
 801c6d0:	2800      	cmp	r0, #0
 801c6d2:	d14b      	bne.n	801c76c <_dtoa_r+0x31c>
 801c6d4:	4b24      	ldr	r3, [pc, #144]	; (801c768 <_dtoa_r+0x318>)
 801c6d6:	4602      	mov	r2, r0
 801c6d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c6dc:	e6d1      	b.n	801c482 <_dtoa_r+0x32>
 801c6de:	2301      	movs	r3, #1
 801c6e0:	e7de      	b.n	801c6a0 <_dtoa_r+0x250>
 801c6e2:	2300      	movs	r3, #0
 801c6e4:	9308      	str	r3, [sp, #32]
 801c6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6e8:	eb0a 0903 	add.w	r9, sl, r3
 801c6ec:	f109 0301 	add.w	r3, r9, #1
 801c6f0:	2b01      	cmp	r3, #1
 801c6f2:	9301      	str	r3, [sp, #4]
 801c6f4:	bfb8      	it	lt
 801c6f6:	2301      	movlt	r3, #1
 801c6f8:	e7dd      	b.n	801c6b6 <_dtoa_r+0x266>
 801c6fa:	2301      	movs	r3, #1
 801c6fc:	e7f2      	b.n	801c6e4 <_dtoa_r+0x294>
 801c6fe:	2501      	movs	r5, #1
 801c700:	2300      	movs	r3, #0
 801c702:	9305      	str	r3, [sp, #20]
 801c704:	9508      	str	r5, [sp, #32]
 801c706:	f04f 39ff 	mov.w	r9, #4294967295
 801c70a:	2200      	movs	r2, #0
 801c70c:	f8cd 9004 	str.w	r9, [sp, #4]
 801c710:	2312      	movs	r3, #18
 801c712:	9209      	str	r2, [sp, #36]	; 0x24
 801c714:	e7cf      	b.n	801c6b6 <_dtoa_r+0x266>
 801c716:	2301      	movs	r3, #1
 801c718:	9308      	str	r3, [sp, #32]
 801c71a:	e7f4      	b.n	801c706 <_dtoa_r+0x2b6>
 801c71c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c720:	f8cd 9004 	str.w	r9, [sp, #4]
 801c724:	464b      	mov	r3, r9
 801c726:	e7c6      	b.n	801c6b6 <_dtoa_r+0x266>
 801c728:	3101      	adds	r1, #1
 801c72a:	6041      	str	r1, [r0, #4]
 801c72c:	0052      	lsls	r2, r2, #1
 801c72e:	e7c6      	b.n	801c6be <_dtoa_r+0x26e>
 801c730:	636f4361 	.word	0x636f4361
 801c734:	3fd287a7 	.word	0x3fd287a7
 801c738:	8b60c8b3 	.word	0x8b60c8b3
 801c73c:	3fc68a28 	.word	0x3fc68a28
 801c740:	509f79fb 	.word	0x509f79fb
 801c744:	3fd34413 	.word	0x3fd34413
 801c748:	080211d9 	.word	0x080211d9
 801c74c:	080211f0 	.word	0x080211f0
 801c750:	7ff00000 	.word	0x7ff00000
 801c754:	080211d5 	.word	0x080211d5
 801c758:	080211cc 	.word	0x080211cc
 801c75c:	08021452 	.word	0x08021452
 801c760:	3ff80000 	.word	0x3ff80000
 801c764:	08021368 	.word	0x08021368
 801c768:	0802124f 	.word	0x0802124f
 801c76c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c76e:	9a00      	ldr	r2, [sp, #0]
 801c770:	601a      	str	r2, [r3, #0]
 801c772:	9b01      	ldr	r3, [sp, #4]
 801c774:	2b0e      	cmp	r3, #14
 801c776:	f200 80ad 	bhi.w	801c8d4 <_dtoa_r+0x484>
 801c77a:	2d00      	cmp	r5, #0
 801c77c:	f000 80aa 	beq.w	801c8d4 <_dtoa_r+0x484>
 801c780:	f1ba 0f00 	cmp.w	sl, #0
 801c784:	dd36      	ble.n	801c7f4 <_dtoa_r+0x3a4>
 801c786:	4ac3      	ldr	r2, [pc, #780]	; (801ca94 <_dtoa_r+0x644>)
 801c788:	f00a 030f 	and.w	r3, sl, #15
 801c78c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c790:	ed93 7b00 	vldr	d7, [r3]
 801c794:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801c798:	ea4f 172a 	mov.w	r7, sl, asr #4
 801c79c:	eeb0 8a47 	vmov.f32	s16, s14
 801c7a0:	eef0 8a67 	vmov.f32	s17, s15
 801c7a4:	d016      	beq.n	801c7d4 <_dtoa_r+0x384>
 801c7a6:	4bbc      	ldr	r3, [pc, #752]	; (801ca98 <_dtoa_r+0x648>)
 801c7a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c7ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c7b0:	f7e4 f85c 	bl	800086c <__aeabi_ddiv>
 801c7b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c7b8:	f007 070f 	and.w	r7, r7, #15
 801c7bc:	2503      	movs	r5, #3
 801c7be:	4eb6      	ldr	r6, [pc, #728]	; (801ca98 <_dtoa_r+0x648>)
 801c7c0:	b957      	cbnz	r7, 801c7d8 <_dtoa_r+0x388>
 801c7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c7c6:	ec53 2b18 	vmov	r2, r3, d8
 801c7ca:	f7e4 f84f 	bl	800086c <__aeabi_ddiv>
 801c7ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c7d2:	e029      	b.n	801c828 <_dtoa_r+0x3d8>
 801c7d4:	2502      	movs	r5, #2
 801c7d6:	e7f2      	b.n	801c7be <_dtoa_r+0x36e>
 801c7d8:	07f9      	lsls	r1, r7, #31
 801c7da:	d508      	bpl.n	801c7ee <_dtoa_r+0x39e>
 801c7dc:	ec51 0b18 	vmov	r0, r1, d8
 801c7e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c7e4:	f7e3 ff18 	bl	8000618 <__aeabi_dmul>
 801c7e8:	ec41 0b18 	vmov	d8, r0, r1
 801c7ec:	3501      	adds	r5, #1
 801c7ee:	107f      	asrs	r7, r7, #1
 801c7f0:	3608      	adds	r6, #8
 801c7f2:	e7e5      	b.n	801c7c0 <_dtoa_r+0x370>
 801c7f4:	f000 80a6 	beq.w	801c944 <_dtoa_r+0x4f4>
 801c7f8:	f1ca 0600 	rsb	r6, sl, #0
 801c7fc:	4ba5      	ldr	r3, [pc, #660]	; (801ca94 <_dtoa_r+0x644>)
 801c7fe:	4fa6      	ldr	r7, [pc, #664]	; (801ca98 <_dtoa_r+0x648>)
 801c800:	f006 020f 	and.w	r2, r6, #15
 801c804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c80c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c810:	f7e3 ff02 	bl	8000618 <__aeabi_dmul>
 801c814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c818:	1136      	asrs	r6, r6, #4
 801c81a:	2300      	movs	r3, #0
 801c81c:	2502      	movs	r5, #2
 801c81e:	2e00      	cmp	r6, #0
 801c820:	f040 8085 	bne.w	801c92e <_dtoa_r+0x4de>
 801c824:	2b00      	cmp	r3, #0
 801c826:	d1d2      	bne.n	801c7ce <_dtoa_r+0x37e>
 801c828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	f000 808c 	beq.w	801c948 <_dtoa_r+0x4f8>
 801c830:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c834:	4b99      	ldr	r3, [pc, #612]	; (801ca9c <_dtoa_r+0x64c>)
 801c836:	2200      	movs	r2, #0
 801c838:	4630      	mov	r0, r6
 801c83a:	4639      	mov	r1, r7
 801c83c:	f7e4 f95e 	bl	8000afc <__aeabi_dcmplt>
 801c840:	2800      	cmp	r0, #0
 801c842:	f000 8081 	beq.w	801c948 <_dtoa_r+0x4f8>
 801c846:	9b01      	ldr	r3, [sp, #4]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d07d      	beq.n	801c948 <_dtoa_r+0x4f8>
 801c84c:	f1b9 0f00 	cmp.w	r9, #0
 801c850:	dd3c      	ble.n	801c8cc <_dtoa_r+0x47c>
 801c852:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c856:	9307      	str	r3, [sp, #28]
 801c858:	2200      	movs	r2, #0
 801c85a:	4b91      	ldr	r3, [pc, #580]	; (801caa0 <_dtoa_r+0x650>)
 801c85c:	4630      	mov	r0, r6
 801c85e:	4639      	mov	r1, r7
 801c860:	f7e3 feda 	bl	8000618 <__aeabi_dmul>
 801c864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c868:	3501      	adds	r5, #1
 801c86a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801c86e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c872:	4628      	mov	r0, r5
 801c874:	f7e3 fe66 	bl	8000544 <__aeabi_i2d>
 801c878:	4632      	mov	r2, r6
 801c87a:	463b      	mov	r3, r7
 801c87c:	f7e3 fecc 	bl	8000618 <__aeabi_dmul>
 801c880:	4b88      	ldr	r3, [pc, #544]	; (801caa4 <_dtoa_r+0x654>)
 801c882:	2200      	movs	r2, #0
 801c884:	f7e3 fd12 	bl	80002ac <__adddf3>
 801c888:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c88c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c890:	9303      	str	r3, [sp, #12]
 801c892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c894:	2b00      	cmp	r3, #0
 801c896:	d15c      	bne.n	801c952 <_dtoa_r+0x502>
 801c898:	4b83      	ldr	r3, [pc, #524]	; (801caa8 <_dtoa_r+0x658>)
 801c89a:	2200      	movs	r2, #0
 801c89c:	4630      	mov	r0, r6
 801c89e:	4639      	mov	r1, r7
 801c8a0:	f7e3 fd02 	bl	80002a8 <__aeabi_dsub>
 801c8a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c8a8:	4606      	mov	r6, r0
 801c8aa:	460f      	mov	r7, r1
 801c8ac:	f7e4 f944 	bl	8000b38 <__aeabi_dcmpgt>
 801c8b0:	2800      	cmp	r0, #0
 801c8b2:	f040 8296 	bne.w	801cde2 <_dtoa_r+0x992>
 801c8b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c8ba:	4630      	mov	r0, r6
 801c8bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c8c0:	4639      	mov	r1, r7
 801c8c2:	f7e4 f91b 	bl	8000afc <__aeabi_dcmplt>
 801c8c6:	2800      	cmp	r0, #0
 801c8c8:	f040 8288 	bne.w	801cddc <_dtoa_r+0x98c>
 801c8cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c8d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c8d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	f2c0 8158 	blt.w	801cb8c <_dtoa_r+0x73c>
 801c8dc:	f1ba 0f0e 	cmp.w	sl, #14
 801c8e0:	f300 8154 	bgt.w	801cb8c <_dtoa_r+0x73c>
 801c8e4:	4b6b      	ldr	r3, [pc, #428]	; (801ca94 <_dtoa_r+0x644>)
 801c8e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c8ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	f280 80e3 	bge.w	801cabc <_dtoa_r+0x66c>
 801c8f6:	9b01      	ldr	r3, [sp, #4]
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	f300 80df 	bgt.w	801cabc <_dtoa_r+0x66c>
 801c8fe:	f040 826d 	bne.w	801cddc <_dtoa_r+0x98c>
 801c902:	4b69      	ldr	r3, [pc, #420]	; (801caa8 <_dtoa_r+0x658>)
 801c904:	2200      	movs	r2, #0
 801c906:	4640      	mov	r0, r8
 801c908:	4649      	mov	r1, r9
 801c90a:	f7e3 fe85 	bl	8000618 <__aeabi_dmul>
 801c90e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c912:	f7e4 f907 	bl	8000b24 <__aeabi_dcmpge>
 801c916:	9e01      	ldr	r6, [sp, #4]
 801c918:	4637      	mov	r7, r6
 801c91a:	2800      	cmp	r0, #0
 801c91c:	f040 8243 	bne.w	801cda6 <_dtoa_r+0x956>
 801c920:	9d00      	ldr	r5, [sp, #0]
 801c922:	2331      	movs	r3, #49	; 0x31
 801c924:	f805 3b01 	strb.w	r3, [r5], #1
 801c928:	f10a 0a01 	add.w	sl, sl, #1
 801c92c:	e23f      	b.n	801cdae <_dtoa_r+0x95e>
 801c92e:	07f2      	lsls	r2, r6, #31
 801c930:	d505      	bpl.n	801c93e <_dtoa_r+0x4ee>
 801c932:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c936:	f7e3 fe6f 	bl	8000618 <__aeabi_dmul>
 801c93a:	3501      	adds	r5, #1
 801c93c:	2301      	movs	r3, #1
 801c93e:	1076      	asrs	r6, r6, #1
 801c940:	3708      	adds	r7, #8
 801c942:	e76c      	b.n	801c81e <_dtoa_r+0x3ce>
 801c944:	2502      	movs	r5, #2
 801c946:	e76f      	b.n	801c828 <_dtoa_r+0x3d8>
 801c948:	9b01      	ldr	r3, [sp, #4]
 801c94a:	f8cd a01c 	str.w	sl, [sp, #28]
 801c94e:	930c      	str	r3, [sp, #48]	; 0x30
 801c950:	e78d      	b.n	801c86e <_dtoa_r+0x41e>
 801c952:	9900      	ldr	r1, [sp, #0]
 801c954:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c958:	4b4e      	ldr	r3, [pc, #312]	; (801ca94 <_dtoa_r+0x644>)
 801c95a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c95e:	4401      	add	r1, r0
 801c960:	9102      	str	r1, [sp, #8]
 801c962:	9908      	ldr	r1, [sp, #32]
 801c964:	eeb0 8a47 	vmov.f32	s16, s14
 801c968:	eef0 8a67 	vmov.f32	s17, s15
 801c96c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c970:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c974:	2900      	cmp	r1, #0
 801c976:	d045      	beq.n	801ca04 <_dtoa_r+0x5b4>
 801c978:	494c      	ldr	r1, [pc, #304]	; (801caac <_dtoa_r+0x65c>)
 801c97a:	2000      	movs	r0, #0
 801c97c:	f7e3 ff76 	bl	800086c <__aeabi_ddiv>
 801c980:	ec53 2b18 	vmov	r2, r3, d8
 801c984:	f7e3 fc90 	bl	80002a8 <__aeabi_dsub>
 801c988:	9d00      	ldr	r5, [sp, #0]
 801c98a:	ec41 0b18 	vmov	d8, r0, r1
 801c98e:	4639      	mov	r1, r7
 801c990:	4630      	mov	r0, r6
 801c992:	f7e4 f8f1 	bl	8000b78 <__aeabi_d2iz>
 801c996:	900c      	str	r0, [sp, #48]	; 0x30
 801c998:	f7e3 fdd4 	bl	8000544 <__aeabi_i2d>
 801c99c:	4602      	mov	r2, r0
 801c99e:	460b      	mov	r3, r1
 801c9a0:	4630      	mov	r0, r6
 801c9a2:	4639      	mov	r1, r7
 801c9a4:	f7e3 fc80 	bl	80002a8 <__aeabi_dsub>
 801c9a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9aa:	3330      	adds	r3, #48	; 0x30
 801c9ac:	f805 3b01 	strb.w	r3, [r5], #1
 801c9b0:	ec53 2b18 	vmov	r2, r3, d8
 801c9b4:	4606      	mov	r6, r0
 801c9b6:	460f      	mov	r7, r1
 801c9b8:	f7e4 f8a0 	bl	8000afc <__aeabi_dcmplt>
 801c9bc:	2800      	cmp	r0, #0
 801c9be:	d165      	bne.n	801ca8c <_dtoa_r+0x63c>
 801c9c0:	4632      	mov	r2, r6
 801c9c2:	463b      	mov	r3, r7
 801c9c4:	4935      	ldr	r1, [pc, #212]	; (801ca9c <_dtoa_r+0x64c>)
 801c9c6:	2000      	movs	r0, #0
 801c9c8:	f7e3 fc6e 	bl	80002a8 <__aeabi_dsub>
 801c9cc:	ec53 2b18 	vmov	r2, r3, d8
 801c9d0:	f7e4 f894 	bl	8000afc <__aeabi_dcmplt>
 801c9d4:	2800      	cmp	r0, #0
 801c9d6:	f040 80b9 	bne.w	801cb4c <_dtoa_r+0x6fc>
 801c9da:	9b02      	ldr	r3, [sp, #8]
 801c9dc:	429d      	cmp	r5, r3
 801c9de:	f43f af75 	beq.w	801c8cc <_dtoa_r+0x47c>
 801c9e2:	4b2f      	ldr	r3, [pc, #188]	; (801caa0 <_dtoa_r+0x650>)
 801c9e4:	ec51 0b18 	vmov	r0, r1, d8
 801c9e8:	2200      	movs	r2, #0
 801c9ea:	f7e3 fe15 	bl	8000618 <__aeabi_dmul>
 801c9ee:	4b2c      	ldr	r3, [pc, #176]	; (801caa0 <_dtoa_r+0x650>)
 801c9f0:	ec41 0b18 	vmov	d8, r0, r1
 801c9f4:	2200      	movs	r2, #0
 801c9f6:	4630      	mov	r0, r6
 801c9f8:	4639      	mov	r1, r7
 801c9fa:	f7e3 fe0d 	bl	8000618 <__aeabi_dmul>
 801c9fe:	4606      	mov	r6, r0
 801ca00:	460f      	mov	r7, r1
 801ca02:	e7c4      	b.n	801c98e <_dtoa_r+0x53e>
 801ca04:	ec51 0b17 	vmov	r0, r1, d7
 801ca08:	f7e3 fe06 	bl	8000618 <__aeabi_dmul>
 801ca0c:	9b02      	ldr	r3, [sp, #8]
 801ca0e:	9d00      	ldr	r5, [sp, #0]
 801ca10:	930c      	str	r3, [sp, #48]	; 0x30
 801ca12:	ec41 0b18 	vmov	d8, r0, r1
 801ca16:	4639      	mov	r1, r7
 801ca18:	4630      	mov	r0, r6
 801ca1a:	f7e4 f8ad 	bl	8000b78 <__aeabi_d2iz>
 801ca1e:	9011      	str	r0, [sp, #68]	; 0x44
 801ca20:	f7e3 fd90 	bl	8000544 <__aeabi_i2d>
 801ca24:	4602      	mov	r2, r0
 801ca26:	460b      	mov	r3, r1
 801ca28:	4630      	mov	r0, r6
 801ca2a:	4639      	mov	r1, r7
 801ca2c:	f7e3 fc3c 	bl	80002a8 <__aeabi_dsub>
 801ca30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ca32:	3330      	adds	r3, #48	; 0x30
 801ca34:	f805 3b01 	strb.w	r3, [r5], #1
 801ca38:	9b02      	ldr	r3, [sp, #8]
 801ca3a:	429d      	cmp	r5, r3
 801ca3c:	4606      	mov	r6, r0
 801ca3e:	460f      	mov	r7, r1
 801ca40:	f04f 0200 	mov.w	r2, #0
 801ca44:	d134      	bne.n	801cab0 <_dtoa_r+0x660>
 801ca46:	4b19      	ldr	r3, [pc, #100]	; (801caac <_dtoa_r+0x65c>)
 801ca48:	ec51 0b18 	vmov	r0, r1, d8
 801ca4c:	f7e3 fc2e 	bl	80002ac <__adddf3>
 801ca50:	4602      	mov	r2, r0
 801ca52:	460b      	mov	r3, r1
 801ca54:	4630      	mov	r0, r6
 801ca56:	4639      	mov	r1, r7
 801ca58:	f7e4 f86e 	bl	8000b38 <__aeabi_dcmpgt>
 801ca5c:	2800      	cmp	r0, #0
 801ca5e:	d175      	bne.n	801cb4c <_dtoa_r+0x6fc>
 801ca60:	ec53 2b18 	vmov	r2, r3, d8
 801ca64:	4911      	ldr	r1, [pc, #68]	; (801caac <_dtoa_r+0x65c>)
 801ca66:	2000      	movs	r0, #0
 801ca68:	f7e3 fc1e 	bl	80002a8 <__aeabi_dsub>
 801ca6c:	4602      	mov	r2, r0
 801ca6e:	460b      	mov	r3, r1
 801ca70:	4630      	mov	r0, r6
 801ca72:	4639      	mov	r1, r7
 801ca74:	f7e4 f842 	bl	8000afc <__aeabi_dcmplt>
 801ca78:	2800      	cmp	r0, #0
 801ca7a:	f43f af27 	beq.w	801c8cc <_dtoa_r+0x47c>
 801ca7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ca80:	1e6b      	subs	r3, r5, #1
 801ca82:	930c      	str	r3, [sp, #48]	; 0x30
 801ca84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ca88:	2b30      	cmp	r3, #48	; 0x30
 801ca8a:	d0f8      	beq.n	801ca7e <_dtoa_r+0x62e>
 801ca8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ca90:	e04a      	b.n	801cb28 <_dtoa_r+0x6d8>
 801ca92:	bf00      	nop
 801ca94:	08021368 	.word	0x08021368
 801ca98:	08021340 	.word	0x08021340
 801ca9c:	3ff00000 	.word	0x3ff00000
 801caa0:	40240000 	.word	0x40240000
 801caa4:	401c0000 	.word	0x401c0000
 801caa8:	40140000 	.word	0x40140000
 801caac:	3fe00000 	.word	0x3fe00000
 801cab0:	4baf      	ldr	r3, [pc, #700]	; (801cd70 <_dtoa_r+0x920>)
 801cab2:	f7e3 fdb1 	bl	8000618 <__aeabi_dmul>
 801cab6:	4606      	mov	r6, r0
 801cab8:	460f      	mov	r7, r1
 801caba:	e7ac      	b.n	801ca16 <_dtoa_r+0x5c6>
 801cabc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801cac0:	9d00      	ldr	r5, [sp, #0]
 801cac2:	4642      	mov	r2, r8
 801cac4:	464b      	mov	r3, r9
 801cac6:	4630      	mov	r0, r6
 801cac8:	4639      	mov	r1, r7
 801caca:	f7e3 fecf 	bl	800086c <__aeabi_ddiv>
 801cace:	f7e4 f853 	bl	8000b78 <__aeabi_d2iz>
 801cad2:	9002      	str	r0, [sp, #8]
 801cad4:	f7e3 fd36 	bl	8000544 <__aeabi_i2d>
 801cad8:	4642      	mov	r2, r8
 801cada:	464b      	mov	r3, r9
 801cadc:	f7e3 fd9c 	bl	8000618 <__aeabi_dmul>
 801cae0:	4602      	mov	r2, r0
 801cae2:	460b      	mov	r3, r1
 801cae4:	4630      	mov	r0, r6
 801cae6:	4639      	mov	r1, r7
 801cae8:	f7e3 fbde 	bl	80002a8 <__aeabi_dsub>
 801caec:	9e02      	ldr	r6, [sp, #8]
 801caee:	9f01      	ldr	r7, [sp, #4]
 801caf0:	3630      	adds	r6, #48	; 0x30
 801caf2:	f805 6b01 	strb.w	r6, [r5], #1
 801caf6:	9e00      	ldr	r6, [sp, #0]
 801caf8:	1bae      	subs	r6, r5, r6
 801cafa:	42b7      	cmp	r7, r6
 801cafc:	4602      	mov	r2, r0
 801cafe:	460b      	mov	r3, r1
 801cb00:	d137      	bne.n	801cb72 <_dtoa_r+0x722>
 801cb02:	f7e3 fbd3 	bl	80002ac <__adddf3>
 801cb06:	4642      	mov	r2, r8
 801cb08:	464b      	mov	r3, r9
 801cb0a:	4606      	mov	r6, r0
 801cb0c:	460f      	mov	r7, r1
 801cb0e:	f7e4 f813 	bl	8000b38 <__aeabi_dcmpgt>
 801cb12:	b9c8      	cbnz	r0, 801cb48 <_dtoa_r+0x6f8>
 801cb14:	4642      	mov	r2, r8
 801cb16:	464b      	mov	r3, r9
 801cb18:	4630      	mov	r0, r6
 801cb1a:	4639      	mov	r1, r7
 801cb1c:	f7e3 ffe4 	bl	8000ae8 <__aeabi_dcmpeq>
 801cb20:	b110      	cbz	r0, 801cb28 <_dtoa_r+0x6d8>
 801cb22:	9b02      	ldr	r3, [sp, #8]
 801cb24:	07d9      	lsls	r1, r3, #31
 801cb26:	d40f      	bmi.n	801cb48 <_dtoa_r+0x6f8>
 801cb28:	4620      	mov	r0, r4
 801cb2a:	4659      	mov	r1, fp
 801cb2c:	f000 ff98 	bl	801da60 <_Bfree>
 801cb30:	2300      	movs	r3, #0
 801cb32:	702b      	strb	r3, [r5, #0]
 801cb34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cb36:	f10a 0001 	add.w	r0, sl, #1
 801cb3a:	6018      	str	r0, [r3, #0]
 801cb3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	f43f acd8 	beq.w	801c4f4 <_dtoa_r+0xa4>
 801cb44:	601d      	str	r5, [r3, #0]
 801cb46:	e4d5      	b.n	801c4f4 <_dtoa_r+0xa4>
 801cb48:	f8cd a01c 	str.w	sl, [sp, #28]
 801cb4c:	462b      	mov	r3, r5
 801cb4e:	461d      	mov	r5, r3
 801cb50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cb54:	2a39      	cmp	r2, #57	; 0x39
 801cb56:	d108      	bne.n	801cb6a <_dtoa_r+0x71a>
 801cb58:	9a00      	ldr	r2, [sp, #0]
 801cb5a:	429a      	cmp	r2, r3
 801cb5c:	d1f7      	bne.n	801cb4e <_dtoa_r+0x6fe>
 801cb5e:	9a07      	ldr	r2, [sp, #28]
 801cb60:	9900      	ldr	r1, [sp, #0]
 801cb62:	3201      	adds	r2, #1
 801cb64:	9207      	str	r2, [sp, #28]
 801cb66:	2230      	movs	r2, #48	; 0x30
 801cb68:	700a      	strb	r2, [r1, #0]
 801cb6a:	781a      	ldrb	r2, [r3, #0]
 801cb6c:	3201      	adds	r2, #1
 801cb6e:	701a      	strb	r2, [r3, #0]
 801cb70:	e78c      	b.n	801ca8c <_dtoa_r+0x63c>
 801cb72:	4b7f      	ldr	r3, [pc, #508]	; (801cd70 <_dtoa_r+0x920>)
 801cb74:	2200      	movs	r2, #0
 801cb76:	f7e3 fd4f 	bl	8000618 <__aeabi_dmul>
 801cb7a:	2200      	movs	r2, #0
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	4606      	mov	r6, r0
 801cb80:	460f      	mov	r7, r1
 801cb82:	f7e3 ffb1 	bl	8000ae8 <__aeabi_dcmpeq>
 801cb86:	2800      	cmp	r0, #0
 801cb88:	d09b      	beq.n	801cac2 <_dtoa_r+0x672>
 801cb8a:	e7cd      	b.n	801cb28 <_dtoa_r+0x6d8>
 801cb8c:	9a08      	ldr	r2, [sp, #32]
 801cb8e:	2a00      	cmp	r2, #0
 801cb90:	f000 80c4 	beq.w	801cd1c <_dtoa_r+0x8cc>
 801cb94:	9a05      	ldr	r2, [sp, #20]
 801cb96:	2a01      	cmp	r2, #1
 801cb98:	f300 80a8 	bgt.w	801ccec <_dtoa_r+0x89c>
 801cb9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb9e:	2a00      	cmp	r2, #0
 801cba0:	f000 80a0 	beq.w	801cce4 <_dtoa_r+0x894>
 801cba4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801cba8:	9e06      	ldr	r6, [sp, #24]
 801cbaa:	4645      	mov	r5, r8
 801cbac:	9a04      	ldr	r2, [sp, #16]
 801cbae:	2101      	movs	r1, #1
 801cbb0:	441a      	add	r2, r3
 801cbb2:	4620      	mov	r0, r4
 801cbb4:	4498      	add	r8, r3
 801cbb6:	9204      	str	r2, [sp, #16]
 801cbb8:	f001 f858 	bl	801dc6c <__i2b>
 801cbbc:	4607      	mov	r7, r0
 801cbbe:	2d00      	cmp	r5, #0
 801cbc0:	dd0b      	ble.n	801cbda <_dtoa_r+0x78a>
 801cbc2:	9b04      	ldr	r3, [sp, #16]
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	dd08      	ble.n	801cbda <_dtoa_r+0x78a>
 801cbc8:	42ab      	cmp	r3, r5
 801cbca:	9a04      	ldr	r2, [sp, #16]
 801cbcc:	bfa8      	it	ge
 801cbce:	462b      	movge	r3, r5
 801cbd0:	eba8 0803 	sub.w	r8, r8, r3
 801cbd4:	1aed      	subs	r5, r5, r3
 801cbd6:	1ad3      	subs	r3, r2, r3
 801cbd8:	9304      	str	r3, [sp, #16]
 801cbda:	9b06      	ldr	r3, [sp, #24]
 801cbdc:	b1fb      	cbz	r3, 801cc1e <_dtoa_r+0x7ce>
 801cbde:	9b08      	ldr	r3, [sp, #32]
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	f000 809f 	beq.w	801cd24 <_dtoa_r+0x8d4>
 801cbe6:	2e00      	cmp	r6, #0
 801cbe8:	dd11      	ble.n	801cc0e <_dtoa_r+0x7be>
 801cbea:	4639      	mov	r1, r7
 801cbec:	4632      	mov	r2, r6
 801cbee:	4620      	mov	r0, r4
 801cbf0:	f001 f8f8 	bl	801dde4 <__pow5mult>
 801cbf4:	465a      	mov	r2, fp
 801cbf6:	4601      	mov	r1, r0
 801cbf8:	4607      	mov	r7, r0
 801cbfa:	4620      	mov	r0, r4
 801cbfc:	f001 f84c 	bl	801dc98 <__multiply>
 801cc00:	4659      	mov	r1, fp
 801cc02:	9007      	str	r0, [sp, #28]
 801cc04:	4620      	mov	r0, r4
 801cc06:	f000 ff2b 	bl	801da60 <_Bfree>
 801cc0a:	9b07      	ldr	r3, [sp, #28]
 801cc0c:	469b      	mov	fp, r3
 801cc0e:	9b06      	ldr	r3, [sp, #24]
 801cc10:	1b9a      	subs	r2, r3, r6
 801cc12:	d004      	beq.n	801cc1e <_dtoa_r+0x7ce>
 801cc14:	4659      	mov	r1, fp
 801cc16:	4620      	mov	r0, r4
 801cc18:	f001 f8e4 	bl	801dde4 <__pow5mult>
 801cc1c:	4683      	mov	fp, r0
 801cc1e:	2101      	movs	r1, #1
 801cc20:	4620      	mov	r0, r4
 801cc22:	f001 f823 	bl	801dc6c <__i2b>
 801cc26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	4606      	mov	r6, r0
 801cc2c:	dd7c      	ble.n	801cd28 <_dtoa_r+0x8d8>
 801cc2e:	461a      	mov	r2, r3
 801cc30:	4601      	mov	r1, r0
 801cc32:	4620      	mov	r0, r4
 801cc34:	f001 f8d6 	bl	801dde4 <__pow5mult>
 801cc38:	9b05      	ldr	r3, [sp, #20]
 801cc3a:	2b01      	cmp	r3, #1
 801cc3c:	4606      	mov	r6, r0
 801cc3e:	dd76      	ble.n	801cd2e <_dtoa_r+0x8de>
 801cc40:	2300      	movs	r3, #0
 801cc42:	9306      	str	r3, [sp, #24]
 801cc44:	6933      	ldr	r3, [r6, #16]
 801cc46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801cc4a:	6918      	ldr	r0, [r3, #16]
 801cc4c:	f000 ffbe 	bl	801dbcc <__hi0bits>
 801cc50:	f1c0 0020 	rsb	r0, r0, #32
 801cc54:	9b04      	ldr	r3, [sp, #16]
 801cc56:	4418      	add	r0, r3
 801cc58:	f010 001f 	ands.w	r0, r0, #31
 801cc5c:	f000 8086 	beq.w	801cd6c <_dtoa_r+0x91c>
 801cc60:	f1c0 0320 	rsb	r3, r0, #32
 801cc64:	2b04      	cmp	r3, #4
 801cc66:	dd7f      	ble.n	801cd68 <_dtoa_r+0x918>
 801cc68:	f1c0 001c 	rsb	r0, r0, #28
 801cc6c:	9b04      	ldr	r3, [sp, #16]
 801cc6e:	4403      	add	r3, r0
 801cc70:	4480      	add	r8, r0
 801cc72:	4405      	add	r5, r0
 801cc74:	9304      	str	r3, [sp, #16]
 801cc76:	f1b8 0f00 	cmp.w	r8, #0
 801cc7a:	dd05      	ble.n	801cc88 <_dtoa_r+0x838>
 801cc7c:	4659      	mov	r1, fp
 801cc7e:	4642      	mov	r2, r8
 801cc80:	4620      	mov	r0, r4
 801cc82:	f001 f909 	bl	801de98 <__lshift>
 801cc86:	4683      	mov	fp, r0
 801cc88:	9b04      	ldr	r3, [sp, #16]
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	dd05      	ble.n	801cc9a <_dtoa_r+0x84a>
 801cc8e:	4631      	mov	r1, r6
 801cc90:	461a      	mov	r2, r3
 801cc92:	4620      	mov	r0, r4
 801cc94:	f001 f900 	bl	801de98 <__lshift>
 801cc98:	4606      	mov	r6, r0
 801cc9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d069      	beq.n	801cd74 <_dtoa_r+0x924>
 801cca0:	4631      	mov	r1, r6
 801cca2:	4658      	mov	r0, fp
 801cca4:	f001 f964 	bl	801df70 <__mcmp>
 801cca8:	2800      	cmp	r0, #0
 801ccaa:	da63      	bge.n	801cd74 <_dtoa_r+0x924>
 801ccac:	2300      	movs	r3, #0
 801ccae:	4659      	mov	r1, fp
 801ccb0:	220a      	movs	r2, #10
 801ccb2:	4620      	mov	r0, r4
 801ccb4:	f000 fef6 	bl	801daa4 <__multadd>
 801ccb8:	9b08      	ldr	r3, [sp, #32]
 801ccba:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ccbe:	4683      	mov	fp, r0
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	f000 818f 	beq.w	801cfe4 <_dtoa_r+0xb94>
 801ccc6:	4639      	mov	r1, r7
 801ccc8:	2300      	movs	r3, #0
 801ccca:	220a      	movs	r2, #10
 801cccc:	4620      	mov	r0, r4
 801ccce:	f000 fee9 	bl	801daa4 <__multadd>
 801ccd2:	f1b9 0f00 	cmp.w	r9, #0
 801ccd6:	4607      	mov	r7, r0
 801ccd8:	f300 808e 	bgt.w	801cdf8 <_dtoa_r+0x9a8>
 801ccdc:	9b05      	ldr	r3, [sp, #20]
 801ccde:	2b02      	cmp	r3, #2
 801cce0:	dc50      	bgt.n	801cd84 <_dtoa_r+0x934>
 801cce2:	e089      	b.n	801cdf8 <_dtoa_r+0x9a8>
 801cce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cce6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ccea:	e75d      	b.n	801cba8 <_dtoa_r+0x758>
 801ccec:	9b01      	ldr	r3, [sp, #4]
 801ccee:	1e5e      	subs	r6, r3, #1
 801ccf0:	9b06      	ldr	r3, [sp, #24]
 801ccf2:	42b3      	cmp	r3, r6
 801ccf4:	bfbf      	itttt	lt
 801ccf6:	9b06      	ldrlt	r3, [sp, #24]
 801ccf8:	9606      	strlt	r6, [sp, #24]
 801ccfa:	1af2      	sublt	r2, r6, r3
 801ccfc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801ccfe:	bfb6      	itet	lt
 801cd00:	189b      	addlt	r3, r3, r2
 801cd02:	1b9e      	subge	r6, r3, r6
 801cd04:	930d      	strlt	r3, [sp, #52]	; 0x34
 801cd06:	9b01      	ldr	r3, [sp, #4]
 801cd08:	bfb8      	it	lt
 801cd0a:	2600      	movlt	r6, #0
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	bfb5      	itete	lt
 801cd10:	eba8 0503 	sublt.w	r5, r8, r3
 801cd14:	9b01      	ldrge	r3, [sp, #4]
 801cd16:	2300      	movlt	r3, #0
 801cd18:	4645      	movge	r5, r8
 801cd1a:	e747      	b.n	801cbac <_dtoa_r+0x75c>
 801cd1c:	9e06      	ldr	r6, [sp, #24]
 801cd1e:	9f08      	ldr	r7, [sp, #32]
 801cd20:	4645      	mov	r5, r8
 801cd22:	e74c      	b.n	801cbbe <_dtoa_r+0x76e>
 801cd24:	9a06      	ldr	r2, [sp, #24]
 801cd26:	e775      	b.n	801cc14 <_dtoa_r+0x7c4>
 801cd28:	9b05      	ldr	r3, [sp, #20]
 801cd2a:	2b01      	cmp	r3, #1
 801cd2c:	dc18      	bgt.n	801cd60 <_dtoa_r+0x910>
 801cd2e:	9b02      	ldr	r3, [sp, #8]
 801cd30:	b9b3      	cbnz	r3, 801cd60 <_dtoa_r+0x910>
 801cd32:	9b03      	ldr	r3, [sp, #12]
 801cd34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cd38:	b9a3      	cbnz	r3, 801cd64 <_dtoa_r+0x914>
 801cd3a:	9b03      	ldr	r3, [sp, #12]
 801cd3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cd40:	0d1b      	lsrs	r3, r3, #20
 801cd42:	051b      	lsls	r3, r3, #20
 801cd44:	b12b      	cbz	r3, 801cd52 <_dtoa_r+0x902>
 801cd46:	9b04      	ldr	r3, [sp, #16]
 801cd48:	3301      	adds	r3, #1
 801cd4a:	9304      	str	r3, [sp, #16]
 801cd4c:	f108 0801 	add.w	r8, r8, #1
 801cd50:	2301      	movs	r3, #1
 801cd52:	9306      	str	r3, [sp, #24]
 801cd54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	f47f af74 	bne.w	801cc44 <_dtoa_r+0x7f4>
 801cd5c:	2001      	movs	r0, #1
 801cd5e:	e779      	b.n	801cc54 <_dtoa_r+0x804>
 801cd60:	2300      	movs	r3, #0
 801cd62:	e7f6      	b.n	801cd52 <_dtoa_r+0x902>
 801cd64:	9b02      	ldr	r3, [sp, #8]
 801cd66:	e7f4      	b.n	801cd52 <_dtoa_r+0x902>
 801cd68:	d085      	beq.n	801cc76 <_dtoa_r+0x826>
 801cd6a:	4618      	mov	r0, r3
 801cd6c:	301c      	adds	r0, #28
 801cd6e:	e77d      	b.n	801cc6c <_dtoa_r+0x81c>
 801cd70:	40240000 	.word	0x40240000
 801cd74:	9b01      	ldr	r3, [sp, #4]
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	dc38      	bgt.n	801cdec <_dtoa_r+0x99c>
 801cd7a:	9b05      	ldr	r3, [sp, #20]
 801cd7c:	2b02      	cmp	r3, #2
 801cd7e:	dd35      	ble.n	801cdec <_dtoa_r+0x99c>
 801cd80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cd84:	f1b9 0f00 	cmp.w	r9, #0
 801cd88:	d10d      	bne.n	801cda6 <_dtoa_r+0x956>
 801cd8a:	4631      	mov	r1, r6
 801cd8c:	464b      	mov	r3, r9
 801cd8e:	2205      	movs	r2, #5
 801cd90:	4620      	mov	r0, r4
 801cd92:	f000 fe87 	bl	801daa4 <__multadd>
 801cd96:	4601      	mov	r1, r0
 801cd98:	4606      	mov	r6, r0
 801cd9a:	4658      	mov	r0, fp
 801cd9c:	f001 f8e8 	bl	801df70 <__mcmp>
 801cda0:	2800      	cmp	r0, #0
 801cda2:	f73f adbd 	bgt.w	801c920 <_dtoa_r+0x4d0>
 801cda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cda8:	9d00      	ldr	r5, [sp, #0]
 801cdaa:	ea6f 0a03 	mvn.w	sl, r3
 801cdae:	f04f 0800 	mov.w	r8, #0
 801cdb2:	4631      	mov	r1, r6
 801cdb4:	4620      	mov	r0, r4
 801cdb6:	f000 fe53 	bl	801da60 <_Bfree>
 801cdba:	2f00      	cmp	r7, #0
 801cdbc:	f43f aeb4 	beq.w	801cb28 <_dtoa_r+0x6d8>
 801cdc0:	f1b8 0f00 	cmp.w	r8, #0
 801cdc4:	d005      	beq.n	801cdd2 <_dtoa_r+0x982>
 801cdc6:	45b8      	cmp	r8, r7
 801cdc8:	d003      	beq.n	801cdd2 <_dtoa_r+0x982>
 801cdca:	4641      	mov	r1, r8
 801cdcc:	4620      	mov	r0, r4
 801cdce:	f000 fe47 	bl	801da60 <_Bfree>
 801cdd2:	4639      	mov	r1, r7
 801cdd4:	4620      	mov	r0, r4
 801cdd6:	f000 fe43 	bl	801da60 <_Bfree>
 801cdda:	e6a5      	b.n	801cb28 <_dtoa_r+0x6d8>
 801cddc:	2600      	movs	r6, #0
 801cdde:	4637      	mov	r7, r6
 801cde0:	e7e1      	b.n	801cda6 <_dtoa_r+0x956>
 801cde2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801cde4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801cde8:	4637      	mov	r7, r6
 801cdea:	e599      	b.n	801c920 <_dtoa_r+0x4d0>
 801cdec:	9b08      	ldr	r3, [sp, #32]
 801cdee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	f000 80fd 	beq.w	801cff2 <_dtoa_r+0xba2>
 801cdf8:	2d00      	cmp	r5, #0
 801cdfa:	dd05      	ble.n	801ce08 <_dtoa_r+0x9b8>
 801cdfc:	4639      	mov	r1, r7
 801cdfe:	462a      	mov	r2, r5
 801ce00:	4620      	mov	r0, r4
 801ce02:	f001 f849 	bl	801de98 <__lshift>
 801ce06:	4607      	mov	r7, r0
 801ce08:	9b06      	ldr	r3, [sp, #24]
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d05c      	beq.n	801cec8 <_dtoa_r+0xa78>
 801ce0e:	6879      	ldr	r1, [r7, #4]
 801ce10:	4620      	mov	r0, r4
 801ce12:	f000 fde5 	bl	801d9e0 <_Balloc>
 801ce16:	4605      	mov	r5, r0
 801ce18:	b928      	cbnz	r0, 801ce26 <_dtoa_r+0x9d6>
 801ce1a:	4b80      	ldr	r3, [pc, #512]	; (801d01c <_dtoa_r+0xbcc>)
 801ce1c:	4602      	mov	r2, r0
 801ce1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ce22:	f7ff bb2e 	b.w	801c482 <_dtoa_r+0x32>
 801ce26:	693a      	ldr	r2, [r7, #16]
 801ce28:	3202      	adds	r2, #2
 801ce2a:	0092      	lsls	r2, r2, #2
 801ce2c:	f107 010c 	add.w	r1, r7, #12
 801ce30:	300c      	adds	r0, #12
 801ce32:	f7fd f8bb 	bl	8019fac <memcpy>
 801ce36:	2201      	movs	r2, #1
 801ce38:	4629      	mov	r1, r5
 801ce3a:	4620      	mov	r0, r4
 801ce3c:	f001 f82c 	bl	801de98 <__lshift>
 801ce40:	9b00      	ldr	r3, [sp, #0]
 801ce42:	3301      	adds	r3, #1
 801ce44:	9301      	str	r3, [sp, #4]
 801ce46:	9b00      	ldr	r3, [sp, #0]
 801ce48:	444b      	add	r3, r9
 801ce4a:	9307      	str	r3, [sp, #28]
 801ce4c:	9b02      	ldr	r3, [sp, #8]
 801ce4e:	f003 0301 	and.w	r3, r3, #1
 801ce52:	46b8      	mov	r8, r7
 801ce54:	9306      	str	r3, [sp, #24]
 801ce56:	4607      	mov	r7, r0
 801ce58:	9b01      	ldr	r3, [sp, #4]
 801ce5a:	4631      	mov	r1, r6
 801ce5c:	3b01      	subs	r3, #1
 801ce5e:	4658      	mov	r0, fp
 801ce60:	9302      	str	r3, [sp, #8]
 801ce62:	f7ff fa69 	bl	801c338 <quorem>
 801ce66:	4603      	mov	r3, r0
 801ce68:	3330      	adds	r3, #48	; 0x30
 801ce6a:	9004      	str	r0, [sp, #16]
 801ce6c:	4641      	mov	r1, r8
 801ce6e:	4658      	mov	r0, fp
 801ce70:	9308      	str	r3, [sp, #32]
 801ce72:	f001 f87d 	bl	801df70 <__mcmp>
 801ce76:	463a      	mov	r2, r7
 801ce78:	4681      	mov	r9, r0
 801ce7a:	4631      	mov	r1, r6
 801ce7c:	4620      	mov	r0, r4
 801ce7e:	f001 f893 	bl	801dfa8 <__mdiff>
 801ce82:	68c2      	ldr	r2, [r0, #12]
 801ce84:	9b08      	ldr	r3, [sp, #32]
 801ce86:	4605      	mov	r5, r0
 801ce88:	bb02      	cbnz	r2, 801cecc <_dtoa_r+0xa7c>
 801ce8a:	4601      	mov	r1, r0
 801ce8c:	4658      	mov	r0, fp
 801ce8e:	f001 f86f 	bl	801df70 <__mcmp>
 801ce92:	9b08      	ldr	r3, [sp, #32]
 801ce94:	4602      	mov	r2, r0
 801ce96:	4629      	mov	r1, r5
 801ce98:	4620      	mov	r0, r4
 801ce9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ce9e:	f000 fddf 	bl	801da60 <_Bfree>
 801cea2:	9b05      	ldr	r3, [sp, #20]
 801cea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cea6:	9d01      	ldr	r5, [sp, #4]
 801cea8:	ea43 0102 	orr.w	r1, r3, r2
 801ceac:	9b06      	ldr	r3, [sp, #24]
 801ceae:	430b      	orrs	r3, r1
 801ceb0:	9b08      	ldr	r3, [sp, #32]
 801ceb2:	d10d      	bne.n	801ced0 <_dtoa_r+0xa80>
 801ceb4:	2b39      	cmp	r3, #57	; 0x39
 801ceb6:	d029      	beq.n	801cf0c <_dtoa_r+0xabc>
 801ceb8:	f1b9 0f00 	cmp.w	r9, #0
 801cebc:	dd01      	ble.n	801cec2 <_dtoa_r+0xa72>
 801cebe:	9b04      	ldr	r3, [sp, #16]
 801cec0:	3331      	adds	r3, #49	; 0x31
 801cec2:	9a02      	ldr	r2, [sp, #8]
 801cec4:	7013      	strb	r3, [r2, #0]
 801cec6:	e774      	b.n	801cdb2 <_dtoa_r+0x962>
 801cec8:	4638      	mov	r0, r7
 801ceca:	e7b9      	b.n	801ce40 <_dtoa_r+0x9f0>
 801cecc:	2201      	movs	r2, #1
 801cece:	e7e2      	b.n	801ce96 <_dtoa_r+0xa46>
 801ced0:	f1b9 0f00 	cmp.w	r9, #0
 801ced4:	db06      	blt.n	801cee4 <_dtoa_r+0xa94>
 801ced6:	9905      	ldr	r1, [sp, #20]
 801ced8:	ea41 0909 	orr.w	r9, r1, r9
 801cedc:	9906      	ldr	r1, [sp, #24]
 801cede:	ea59 0101 	orrs.w	r1, r9, r1
 801cee2:	d120      	bne.n	801cf26 <_dtoa_r+0xad6>
 801cee4:	2a00      	cmp	r2, #0
 801cee6:	ddec      	ble.n	801cec2 <_dtoa_r+0xa72>
 801cee8:	4659      	mov	r1, fp
 801ceea:	2201      	movs	r2, #1
 801ceec:	4620      	mov	r0, r4
 801ceee:	9301      	str	r3, [sp, #4]
 801cef0:	f000 ffd2 	bl	801de98 <__lshift>
 801cef4:	4631      	mov	r1, r6
 801cef6:	4683      	mov	fp, r0
 801cef8:	f001 f83a 	bl	801df70 <__mcmp>
 801cefc:	2800      	cmp	r0, #0
 801cefe:	9b01      	ldr	r3, [sp, #4]
 801cf00:	dc02      	bgt.n	801cf08 <_dtoa_r+0xab8>
 801cf02:	d1de      	bne.n	801cec2 <_dtoa_r+0xa72>
 801cf04:	07da      	lsls	r2, r3, #31
 801cf06:	d5dc      	bpl.n	801cec2 <_dtoa_r+0xa72>
 801cf08:	2b39      	cmp	r3, #57	; 0x39
 801cf0a:	d1d8      	bne.n	801cebe <_dtoa_r+0xa6e>
 801cf0c:	9a02      	ldr	r2, [sp, #8]
 801cf0e:	2339      	movs	r3, #57	; 0x39
 801cf10:	7013      	strb	r3, [r2, #0]
 801cf12:	462b      	mov	r3, r5
 801cf14:	461d      	mov	r5, r3
 801cf16:	3b01      	subs	r3, #1
 801cf18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801cf1c:	2a39      	cmp	r2, #57	; 0x39
 801cf1e:	d050      	beq.n	801cfc2 <_dtoa_r+0xb72>
 801cf20:	3201      	adds	r2, #1
 801cf22:	701a      	strb	r2, [r3, #0]
 801cf24:	e745      	b.n	801cdb2 <_dtoa_r+0x962>
 801cf26:	2a00      	cmp	r2, #0
 801cf28:	dd03      	ble.n	801cf32 <_dtoa_r+0xae2>
 801cf2a:	2b39      	cmp	r3, #57	; 0x39
 801cf2c:	d0ee      	beq.n	801cf0c <_dtoa_r+0xabc>
 801cf2e:	3301      	adds	r3, #1
 801cf30:	e7c7      	b.n	801cec2 <_dtoa_r+0xa72>
 801cf32:	9a01      	ldr	r2, [sp, #4]
 801cf34:	9907      	ldr	r1, [sp, #28]
 801cf36:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cf3a:	428a      	cmp	r2, r1
 801cf3c:	d02a      	beq.n	801cf94 <_dtoa_r+0xb44>
 801cf3e:	4659      	mov	r1, fp
 801cf40:	2300      	movs	r3, #0
 801cf42:	220a      	movs	r2, #10
 801cf44:	4620      	mov	r0, r4
 801cf46:	f000 fdad 	bl	801daa4 <__multadd>
 801cf4a:	45b8      	cmp	r8, r7
 801cf4c:	4683      	mov	fp, r0
 801cf4e:	f04f 0300 	mov.w	r3, #0
 801cf52:	f04f 020a 	mov.w	r2, #10
 801cf56:	4641      	mov	r1, r8
 801cf58:	4620      	mov	r0, r4
 801cf5a:	d107      	bne.n	801cf6c <_dtoa_r+0xb1c>
 801cf5c:	f000 fda2 	bl	801daa4 <__multadd>
 801cf60:	4680      	mov	r8, r0
 801cf62:	4607      	mov	r7, r0
 801cf64:	9b01      	ldr	r3, [sp, #4]
 801cf66:	3301      	adds	r3, #1
 801cf68:	9301      	str	r3, [sp, #4]
 801cf6a:	e775      	b.n	801ce58 <_dtoa_r+0xa08>
 801cf6c:	f000 fd9a 	bl	801daa4 <__multadd>
 801cf70:	4639      	mov	r1, r7
 801cf72:	4680      	mov	r8, r0
 801cf74:	2300      	movs	r3, #0
 801cf76:	220a      	movs	r2, #10
 801cf78:	4620      	mov	r0, r4
 801cf7a:	f000 fd93 	bl	801daa4 <__multadd>
 801cf7e:	4607      	mov	r7, r0
 801cf80:	e7f0      	b.n	801cf64 <_dtoa_r+0xb14>
 801cf82:	f1b9 0f00 	cmp.w	r9, #0
 801cf86:	9a00      	ldr	r2, [sp, #0]
 801cf88:	bfcc      	ite	gt
 801cf8a:	464d      	movgt	r5, r9
 801cf8c:	2501      	movle	r5, #1
 801cf8e:	4415      	add	r5, r2
 801cf90:	f04f 0800 	mov.w	r8, #0
 801cf94:	4659      	mov	r1, fp
 801cf96:	2201      	movs	r2, #1
 801cf98:	4620      	mov	r0, r4
 801cf9a:	9301      	str	r3, [sp, #4]
 801cf9c:	f000 ff7c 	bl	801de98 <__lshift>
 801cfa0:	4631      	mov	r1, r6
 801cfa2:	4683      	mov	fp, r0
 801cfa4:	f000 ffe4 	bl	801df70 <__mcmp>
 801cfa8:	2800      	cmp	r0, #0
 801cfaa:	dcb2      	bgt.n	801cf12 <_dtoa_r+0xac2>
 801cfac:	d102      	bne.n	801cfb4 <_dtoa_r+0xb64>
 801cfae:	9b01      	ldr	r3, [sp, #4]
 801cfb0:	07db      	lsls	r3, r3, #31
 801cfb2:	d4ae      	bmi.n	801cf12 <_dtoa_r+0xac2>
 801cfb4:	462b      	mov	r3, r5
 801cfb6:	461d      	mov	r5, r3
 801cfb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cfbc:	2a30      	cmp	r2, #48	; 0x30
 801cfbe:	d0fa      	beq.n	801cfb6 <_dtoa_r+0xb66>
 801cfc0:	e6f7      	b.n	801cdb2 <_dtoa_r+0x962>
 801cfc2:	9a00      	ldr	r2, [sp, #0]
 801cfc4:	429a      	cmp	r2, r3
 801cfc6:	d1a5      	bne.n	801cf14 <_dtoa_r+0xac4>
 801cfc8:	f10a 0a01 	add.w	sl, sl, #1
 801cfcc:	2331      	movs	r3, #49	; 0x31
 801cfce:	e779      	b.n	801cec4 <_dtoa_r+0xa74>
 801cfd0:	4b13      	ldr	r3, [pc, #76]	; (801d020 <_dtoa_r+0xbd0>)
 801cfd2:	f7ff baaf 	b.w	801c534 <_dtoa_r+0xe4>
 801cfd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	f47f aa86 	bne.w	801c4ea <_dtoa_r+0x9a>
 801cfde:	4b11      	ldr	r3, [pc, #68]	; (801d024 <_dtoa_r+0xbd4>)
 801cfe0:	f7ff baa8 	b.w	801c534 <_dtoa_r+0xe4>
 801cfe4:	f1b9 0f00 	cmp.w	r9, #0
 801cfe8:	dc03      	bgt.n	801cff2 <_dtoa_r+0xba2>
 801cfea:	9b05      	ldr	r3, [sp, #20]
 801cfec:	2b02      	cmp	r3, #2
 801cfee:	f73f aec9 	bgt.w	801cd84 <_dtoa_r+0x934>
 801cff2:	9d00      	ldr	r5, [sp, #0]
 801cff4:	4631      	mov	r1, r6
 801cff6:	4658      	mov	r0, fp
 801cff8:	f7ff f99e 	bl	801c338 <quorem>
 801cffc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d000:	f805 3b01 	strb.w	r3, [r5], #1
 801d004:	9a00      	ldr	r2, [sp, #0]
 801d006:	1aaa      	subs	r2, r5, r2
 801d008:	4591      	cmp	r9, r2
 801d00a:	ddba      	ble.n	801cf82 <_dtoa_r+0xb32>
 801d00c:	4659      	mov	r1, fp
 801d00e:	2300      	movs	r3, #0
 801d010:	220a      	movs	r2, #10
 801d012:	4620      	mov	r0, r4
 801d014:	f000 fd46 	bl	801daa4 <__multadd>
 801d018:	4683      	mov	fp, r0
 801d01a:	e7eb      	b.n	801cff4 <_dtoa_r+0xba4>
 801d01c:	0802124f 	.word	0x0802124f
 801d020:	08021451 	.word	0x08021451
 801d024:	080211cc 	.word	0x080211cc

0801d028 <__sflush_r>:
 801d028:	898a      	ldrh	r2, [r1, #12]
 801d02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d02e:	4605      	mov	r5, r0
 801d030:	0710      	lsls	r0, r2, #28
 801d032:	460c      	mov	r4, r1
 801d034:	d458      	bmi.n	801d0e8 <__sflush_r+0xc0>
 801d036:	684b      	ldr	r3, [r1, #4]
 801d038:	2b00      	cmp	r3, #0
 801d03a:	dc05      	bgt.n	801d048 <__sflush_r+0x20>
 801d03c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d03e:	2b00      	cmp	r3, #0
 801d040:	dc02      	bgt.n	801d048 <__sflush_r+0x20>
 801d042:	2000      	movs	r0, #0
 801d044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d04a:	2e00      	cmp	r6, #0
 801d04c:	d0f9      	beq.n	801d042 <__sflush_r+0x1a>
 801d04e:	2300      	movs	r3, #0
 801d050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d054:	682f      	ldr	r7, [r5, #0]
 801d056:	602b      	str	r3, [r5, #0]
 801d058:	d032      	beq.n	801d0c0 <__sflush_r+0x98>
 801d05a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d05c:	89a3      	ldrh	r3, [r4, #12]
 801d05e:	075a      	lsls	r2, r3, #29
 801d060:	d505      	bpl.n	801d06e <__sflush_r+0x46>
 801d062:	6863      	ldr	r3, [r4, #4]
 801d064:	1ac0      	subs	r0, r0, r3
 801d066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d068:	b10b      	cbz	r3, 801d06e <__sflush_r+0x46>
 801d06a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d06c:	1ac0      	subs	r0, r0, r3
 801d06e:	2300      	movs	r3, #0
 801d070:	4602      	mov	r2, r0
 801d072:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d074:	6a21      	ldr	r1, [r4, #32]
 801d076:	4628      	mov	r0, r5
 801d078:	47b0      	blx	r6
 801d07a:	1c43      	adds	r3, r0, #1
 801d07c:	89a3      	ldrh	r3, [r4, #12]
 801d07e:	d106      	bne.n	801d08e <__sflush_r+0x66>
 801d080:	6829      	ldr	r1, [r5, #0]
 801d082:	291d      	cmp	r1, #29
 801d084:	d82c      	bhi.n	801d0e0 <__sflush_r+0xb8>
 801d086:	4a2a      	ldr	r2, [pc, #168]	; (801d130 <__sflush_r+0x108>)
 801d088:	40ca      	lsrs	r2, r1
 801d08a:	07d6      	lsls	r6, r2, #31
 801d08c:	d528      	bpl.n	801d0e0 <__sflush_r+0xb8>
 801d08e:	2200      	movs	r2, #0
 801d090:	6062      	str	r2, [r4, #4]
 801d092:	04d9      	lsls	r1, r3, #19
 801d094:	6922      	ldr	r2, [r4, #16]
 801d096:	6022      	str	r2, [r4, #0]
 801d098:	d504      	bpl.n	801d0a4 <__sflush_r+0x7c>
 801d09a:	1c42      	adds	r2, r0, #1
 801d09c:	d101      	bne.n	801d0a2 <__sflush_r+0x7a>
 801d09e:	682b      	ldr	r3, [r5, #0]
 801d0a0:	b903      	cbnz	r3, 801d0a4 <__sflush_r+0x7c>
 801d0a2:	6560      	str	r0, [r4, #84]	; 0x54
 801d0a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d0a6:	602f      	str	r7, [r5, #0]
 801d0a8:	2900      	cmp	r1, #0
 801d0aa:	d0ca      	beq.n	801d042 <__sflush_r+0x1a>
 801d0ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d0b0:	4299      	cmp	r1, r3
 801d0b2:	d002      	beq.n	801d0ba <__sflush_r+0x92>
 801d0b4:	4628      	mov	r0, r5
 801d0b6:	f7fc ffa9 	bl	801a00c <_free_r>
 801d0ba:	2000      	movs	r0, #0
 801d0bc:	6360      	str	r0, [r4, #52]	; 0x34
 801d0be:	e7c1      	b.n	801d044 <__sflush_r+0x1c>
 801d0c0:	6a21      	ldr	r1, [r4, #32]
 801d0c2:	2301      	movs	r3, #1
 801d0c4:	4628      	mov	r0, r5
 801d0c6:	47b0      	blx	r6
 801d0c8:	1c41      	adds	r1, r0, #1
 801d0ca:	d1c7      	bne.n	801d05c <__sflush_r+0x34>
 801d0cc:	682b      	ldr	r3, [r5, #0]
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	d0c4      	beq.n	801d05c <__sflush_r+0x34>
 801d0d2:	2b1d      	cmp	r3, #29
 801d0d4:	d001      	beq.n	801d0da <__sflush_r+0xb2>
 801d0d6:	2b16      	cmp	r3, #22
 801d0d8:	d101      	bne.n	801d0de <__sflush_r+0xb6>
 801d0da:	602f      	str	r7, [r5, #0]
 801d0dc:	e7b1      	b.n	801d042 <__sflush_r+0x1a>
 801d0de:	89a3      	ldrh	r3, [r4, #12]
 801d0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d0e4:	81a3      	strh	r3, [r4, #12]
 801d0e6:	e7ad      	b.n	801d044 <__sflush_r+0x1c>
 801d0e8:	690f      	ldr	r7, [r1, #16]
 801d0ea:	2f00      	cmp	r7, #0
 801d0ec:	d0a9      	beq.n	801d042 <__sflush_r+0x1a>
 801d0ee:	0793      	lsls	r3, r2, #30
 801d0f0:	680e      	ldr	r6, [r1, #0]
 801d0f2:	bf08      	it	eq
 801d0f4:	694b      	ldreq	r3, [r1, #20]
 801d0f6:	600f      	str	r7, [r1, #0]
 801d0f8:	bf18      	it	ne
 801d0fa:	2300      	movne	r3, #0
 801d0fc:	eba6 0807 	sub.w	r8, r6, r7
 801d100:	608b      	str	r3, [r1, #8]
 801d102:	f1b8 0f00 	cmp.w	r8, #0
 801d106:	dd9c      	ble.n	801d042 <__sflush_r+0x1a>
 801d108:	6a21      	ldr	r1, [r4, #32]
 801d10a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d10c:	4643      	mov	r3, r8
 801d10e:	463a      	mov	r2, r7
 801d110:	4628      	mov	r0, r5
 801d112:	47b0      	blx	r6
 801d114:	2800      	cmp	r0, #0
 801d116:	dc06      	bgt.n	801d126 <__sflush_r+0xfe>
 801d118:	89a3      	ldrh	r3, [r4, #12]
 801d11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d11e:	81a3      	strh	r3, [r4, #12]
 801d120:	f04f 30ff 	mov.w	r0, #4294967295
 801d124:	e78e      	b.n	801d044 <__sflush_r+0x1c>
 801d126:	4407      	add	r7, r0
 801d128:	eba8 0800 	sub.w	r8, r8, r0
 801d12c:	e7e9      	b.n	801d102 <__sflush_r+0xda>
 801d12e:	bf00      	nop
 801d130:	20400001 	.word	0x20400001

0801d134 <_fflush_r>:
 801d134:	b538      	push	{r3, r4, r5, lr}
 801d136:	690b      	ldr	r3, [r1, #16]
 801d138:	4605      	mov	r5, r0
 801d13a:	460c      	mov	r4, r1
 801d13c:	b913      	cbnz	r3, 801d144 <_fflush_r+0x10>
 801d13e:	2500      	movs	r5, #0
 801d140:	4628      	mov	r0, r5
 801d142:	bd38      	pop	{r3, r4, r5, pc}
 801d144:	b118      	cbz	r0, 801d14e <_fflush_r+0x1a>
 801d146:	6983      	ldr	r3, [r0, #24]
 801d148:	b90b      	cbnz	r3, 801d14e <_fflush_r+0x1a>
 801d14a:	f7fc fe61 	bl	8019e10 <__sinit>
 801d14e:	4b14      	ldr	r3, [pc, #80]	; (801d1a0 <_fflush_r+0x6c>)
 801d150:	429c      	cmp	r4, r3
 801d152:	d11b      	bne.n	801d18c <_fflush_r+0x58>
 801d154:	686c      	ldr	r4, [r5, #4]
 801d156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d0ef      	beq.n	801d13e <_fflush_r+0xa>
 801d15e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d160:	07d0      	lsls	r0, r2, #31
 801d162:	d404      	bmi.n	801d16e <_fflush_r+0x3a>
 801d164:	0599      	lsls	r1, r3, #22
 801d166:	d402      	bmi.n	801d16e <_fflush_r+0x3a>
 801d168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d16a:	f7fc ff14 	bl	8019f96 <__retarget_lock_acquire_recursive>
 801d16e:	4628      	mov	r0, r5
 801d170:	4621      	mov	r1, r4
 801d172:	f7ff ff59 	bl	801d028 <__sflush_r>
 801d176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d178:	07da      	lsls	r2, r3, #31
 801d17a:	4605      	mov	r5, r0
 801d17c:	d4e0      	bmi.n	801d140 <_fflush_r+0xc>
 801d17e:	89a3      	ldrh	r3, [r4, #12]
 801d180:	059b      	lsls	r3, r3, #22
 801d182:	d4dd      	bmi.n	801d140 <_fflush_r+0xc>
 801d184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d186:	f7fc ff07 	bl	8019f98 <__retarget_lock_release_recursive>
 801d18a:	e7d9      	b.n	801d140 <_fflush_r+0xc>
 801d18c:	4b05      	ldr	r3, [pc, #20]	; (801d1a4 <_fflush_r+0x70>)
 801d18e:	429c      	cmp	r4, r3
 801d190:	d101      	bne.n	801d196 <_fflush_r+0x62>
 801d192:	68ac      	ldr	r4, [r5, #8]
 801d194:	e7df      	b.n	801d156 <_fflush_r+0x22>
 801d196:	4b04      	ldr	r3, [pc, #16]	; (801d1a8 <_fflush_r+0x74>)
 801d198:	429c      	cmp	r4, r3
 801d19a:	bf08      	it	eq
 801d19c:	68ec      	ldreq	r4, [r5, #12]
 801d19e:	e7da      	b.n	801d156 <_fflush_r+0x22>
 801d1a0:	080210c4 	.word	0x080210c4
 801d1a4:	080210e4 	.word	0x080210e4
 801d1a8:	080210a4 	.word	0x080210a4

0801d1ac <fiprintf>:
 801d1ac:	b40e      	push	{r1, r2, r3}
 801d1ae:	b503      	push	{r0, r1, lr}
 801d1b0:	4601      	mov	r1, r0
 801d1b2:	ab03      	add	r3, sp, #12
 801d1b4:	4805      	ldr	r0, [pc, #20]	; (801d1cc <fiprintf+0x20>)
 801d1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1ba:	6800      	ldr	r0, [r0, #0]
 801d1bc:	9301      	str	r3, [sp, #4]
 801d1be:	f001 fc57 	bl	801ea70 <_vfiprintf_r>
 801d1c2:	b002      	add	sp, #8
 801d1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1c8:	b003      	add	sp, #12
 801d1ca:	4770      	bx	lr
 801d1cc:	20000200 	.word	0x20000200

0801d1d0 <rshift>:
 801d1d0:	6903      	ldr	r3, [r0, #16]
 801d1d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d1d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d1da:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d1de:	f100 0414 	add.w	r4, r0, #20
 801d1e2:	dd45      	ble.n	801d270 <rshift+0xa0>
 801d1e4:	f011 011f 	ands.w	r1, r1, #31
 801d1e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d1ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d1f0:	d10c      	bne.n	801d20c <rshift+0x3c>
 801d1f2:	f100 0710 	add.w	r7, r0, #16
 801d1f6:	4629      	mov	r1, r5
 801d1f8:	42b1      	cmp	r1, r6
 801d1fa:	d334      	bcc.n	801d266 <rshift+0x96>
 801d1fc:	1a9b      	subs	r3, r3, r2
 801d1fe:	009b      	lsls	r3, r3, #2
 801d200:	1eea      	subs	r2, r5, #3
 801d202:	4296      	cmp	r6, r2
 801d204:	bf38      	it	cc
 801d206:	2300      	movcc	r3, #0
 801d208:	4423      	add	r3, r4
 801d20a:	e015      	b.n	801d238 <rshift+0x68>
 801d20c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d210:	f1c1 0820 	rsb	r8, r1, #32
 801d214:	40cf      	lsrs	r7, r1
 801d216:	f105 0e04 	add.w	lr, r5, #4
 801d21a:	46a1      	mov	r9, r4
 801d21c:	4576      	cmp	r6, lr
 801d21e:	46f4      	mov	ip, lr
 801d220:	d815      	bhi.n	801d24e <rshift+0x7e>
 801d222:	1a9b      	subs	r3, r3, r2
 801d224:	009a      	lsls	r2, r3, #2
 801d226:	3a04      	subs	r2, #4
 801d228:	3501      	adds	r5, #1
 801d22a:	42ae      	cmp	r6, r5
 801d22c:	bf38      	it	cc
 801d22e:	2200      	movcc	r2, #0
 801d230:	18a3      	adds	r3, r4, r2
 801d232:	50a7      	str	r7, [r4, r2]
 801d234:	b107      	cbz	r7, 801d238 <rshift+0x68>
 801d236:	3304      	adds	r3, #4
 801d238:	1b1a      	subs	r2, r3, r4
 801d23a:	42a3      	cmp	r3, r4
 801d23c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d240:	bf08      	it	eq
 801d242:	2300      	moveq	r3, #0
 801d244:	6102      	str	r2, [r0, #16]
 801d246:	bf08      	it	eq
 801d248:	6143      	streq	r3, [r0, #20]
 801d24a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d24e:	f8dc c000 	ldr.w	ip, [ip]
 801d252:	fa0c fc08 	lsl.w	ip, ip, r8
 801d256:	ea4c 0707 	orr.w	r7, ip, r7
 801d25a:	f849 7b04 	str.w	r7, [r9], #4
 801d25e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d262:	40cf      	lsrs	r7, r1
 801d264:	e7da      	b.n	801d21c <rshift+0x4c>
 801d266:	f851 cb04 	ldr.w	ip, [r1], #4
 801d26a:	f847 cf04 	str.w	ip, [r7, #4]!
 801d26e:	e7c3      	b.n	801d1f8 <rshift+0x28>
 801d270:	4623      	mov	r3, r4
 801d272:	e7e1      	b.n	801d238 <rshift+0x68>

0801d274 <__hexdig_fun>:
 801d274:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d278:	2b09      	cmp	r3, #9
 801d27a:	d802      	bhi.n	801d282 <__hexdig_fun+0xe>
 801d27c:	3820      	subs	r0, #32
 801d27e:	b2c0      	uxtb	r0, r0
 801d280:	4770      	bx	lr
 801d282:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d286:	2b05      	cmp	r3, #5
 801d288:	d801      	bhi.n	801d28e <__hexdig_fun+0x1a>
 801d28a:	3847      	subs	r0, #71	; 0x47
 801d28c:	e7f7      	b.n	801d27e <__hexdig_fun+0xa>
 801d28e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d292:	2b05      	cmp	r3, #5
 801d294:	d801      	bhi.n	801d29a <__hexdig_fun+0x26>
 801d296:	3827      	subs	r0, #39	; 0x27
 801d298:	e7f1      	b.n	801d27e <__hexdig_fun+0xa>
 801d29a:	2000      	movs	r0, #0
 801d29c:	4770      	bx	lr
	...

0801d2a0 <__gethex>:
 801d2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2a4:	ed2d 8b02 	vpush	{d8}
 801d2a8:	b089      	sub	sp, #36	; 0x24
 801d2aa:	ee08 0a10 	vmov	s16, r0
 801d2ae:	9304      	str	r3, [sp, #16]
 801d2b0:	4bbc      	ldr	r3, [pc, #752]	; (801d5a4 <__gethex+0x304>)
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	9301      	str	r3, [sp, #4]
 801d2b6:	4618      	mov	r0, r3
 801d2b8:	468b      	mov	fp, r1
 801d2ba:	4690      	mov	r8, r2
 801d2bc:	f7e2 ff98 	bl	80001f0 <strlen>
 801d2c0:	9b01      	ldr	r3, [sp, #4]
 801d2c2:	f8db 2000 	ldr.w	r2, [fp]
 801d2c6:	4403      	add	r3, r0
 801d2c8:	4682      	mov	sl, r0
 801d2ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d2ce:	9305      	str	r3, [sp, #20]
 801d2d0:	1c93      	adds	r3, r2, #2
 801d2d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d2d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d2da:	32fe      	adds	r2, #254	; 0xfe
 801d2dc:	18d1      	adds	r1, r2, r3
 801d2de:	461f      	mov	r7, r3
 801d2e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d2e4:	9100      	str	r1, [sp, #0]
 801d2e6:	2830      	cmp	r0, #48	; 0x30
 801d2e8:	d0f8      	beq.n	801d2dc <__gethex+0x3c>
 801d2ea:	f7ff ffc3 	bl	801d274 <__hexdig_fun>
 801d2ee:	4604      	mov	r4, r0
 801d2f0:	2800      	cmp	r0, #0
 801d2f2:	d13a      	bne.n	801d36a <__gethex+0xca>
 801d2f4:	9901      	ldr	r1, [sp, #4]
 801d2f6:	4652      	mov	r2, sl
 801d2f8:	4638      	mov	r0, r7
 801d2fa:	f7fd ff96 	bl	801b22a <strncmp>
 801d2fe:	4605      	mov	r5, r0
 801d300:	2800      	cmp	r0, #0
 801d302:	d168      	bne.n	801d3d6 <__gethex+0x136>
 801d304:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d308:	eb07 060a 	add.w	r6, r7, sl
 801d30c:	f7ff ffb2 	bl	801d274 <__hexdig_fun>
 801d310:	2800      	cmp	r0, #0
 801d312:	d062      	beq.n	801d3da <__gethex+0x13a>
 801d314:	4633      	mov	r3, r6
 801d316:	7818      	ldrb	r0, [r3, #0]
 801d318:	2830      	cmp	r0, #48	; 0x30
 801d31a:	461f      	mov	r7, r3
 801d31c:	f103 0301 	add.w	r3, r3, #1
 801d320:	d0f9      	beq.n	801d316 <__gethex+0x76>
 801d322:	f7ff ffa7 	bl	801d274 <__hexdig_fun>
 801d326:	2301      	movs	r3, #1
 801d328:	fab0 f480 	clz	r4, r0
 801d32c:	0964      	lsrs	r4, r4, #5
 801d32e:	4635      	mov	r5, r6
 801d330:	9300      	str	r3, [sp, #0]
 801d332:	463a      	mov	r2, r7
 801d334:	4616      	mov	r6, r2
 801d336:	3201      	adds	r2, #1
 801d338:	7830      	ldrb	r0, [r6, #0]
 801d33a:	f7ff ff9b 	bl	801d274 <__hexdig_fun>
 801d33e:	2800      	cmp	r0, #0
 801d340:	d1f8      	bne.n	801d334 <__gethex+0x94>
 801d342:	9901      	ldr	r1, [sp, #4]
 801d344:	4652      	mov	r2, sl
 801d346:	4630      	mov	r0, r6
 801d348:	f7fd ff6f 	bl	801b22a <strncmp>
 801d34c:	b980      	cbnz	r0, 801d370 <__gethex+0xd0>
 801d34e:	b94d      	cbnz	r5, 801d364 <__gethex+0xc4>
 801d350:	eb06 050a 	add.w	r5, r6, sl
 801d354:	462a      	mov	r2, r5
 801d356:	4616      	mov	r6, r2
 801d358:	3201      	adds	r2, #1
 801d35a:	7830      	ldrb	r0, [r6, #0]
 801d35c:	f7ff ff8a 	bl	801d274 <__hexdig_fun>
 801d360:	2800      	cmp	r0, #0
 801d362:	d1f8      	bne.n	801d356 <__gethex+0xb6>
 801d364:	1bad      	subs	r5, r5, r6
 801d366:	00ad      	lsls	r5, r5, #2
 801d368:	e004      	b.n	801d374 <__gethex+0xd4>
 801d36a:	2400      	movs	r4, #0
 801d36c:	4625      	mov	r5, r4
 801d36e:	e7e0      	b.n	801d332 <__gethex+0x92>
 801d370:	2d00      	cmp	r5, #0
 801d372:	d1f7      	bne.n	801d364 <__gethex+0xc4>
 801d374:	7833      	ldrb	r3, [r6, #0]
 801d376:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d37a:	2b50      	cmp	r3, #80	; 0x50
 801d37c:	d13b      	bne.n	801d3f6 <__gethex+0x156>
 801d37e:	7873      	ldrb	r3, [r6, #1]
 801d380:	2b2b      	cmp	r3, #43	; 0x2b
 801d382:	d02c      	beq.n	801d3de <__gethex+0x13e>
 801d384:	2b2d      	cmp	r3, #45	; 0x2d
 801d386:	d02e      	beq.n	801d3e6 <__gethex+0x146>
 801d388:	1c71      	adds	r1, r6, #1
 801d38a:	f04f 0900 	mov.w	r9, #0
 801d38e:	7808      	ldrb	r0, [r1, #0]
 801d390:	f7ff ff70 	bl	801d274 <__hexdig_fun>
 801d394:	1e43      	subs	r3, r0, #1
 801d396:	b2db      	uxtb	r3, r3
 801d398:	2b18      	cmp	r3, #24
 801d39a:	d82c      	bhi.n	801d3f6 <__gethex+0x156>
 801d39c:	f1a0 0210 	sub.w	r2, r0, #16
 801d3a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d3a4:	f7ff ff66 	bl	801d274 <__hexdig_fun>
 801d3a8:	1e43      	subs	r3, r0, #1
 801d3aa:	b2db      	uxtb	r3, r3
 801d3ac:	2b18      	cmp	r3, #24
 801d3ae:	d91d      	bls.n	801d3ec <__gethex+0x14c>
 801d3b0:	f1b9 0f00 	cmp.w	r9, #0
 801d3b4:	d000      	beq.n	801d3b8 <__gethex+0x118>
 801d3b6:	4252      	negs	r2, r2
 801d3b8:	4415      	add	r5, r2
 801d3ba:	f8cb 1000 	str.w	r1, [fp]
 801d3be:	b1e4      	cbz	r4, 801d3fa <__gethex+0x15a>
 801d3c0:	9b00      	ldr	r3, [sp, #0]
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	bf14      	ite	ne
 801d3c6:	2700      	movne	r7, #0
 801d3c8:	2706      	moveq	r7, #6
 801d3ca:	4638      	mov	r0, r7
 801d3cc:	b009      	add	sp, #36	; 0x24
 801d3ce:	ecbd 8b02 	vpop	{d8}
 801d3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3d6:	463e      	mov	r6, r7
 801d3d8:	4625      	mov	r5, r4
 801d3da:	2401      	movs	r4, #1
 801d3dc:	e7ca      	b.n	801d374 <__gethex+0xd4>
 801d3de:	f04f 0900 	mov.w	r9, #0
 801d3e2:	1cb1      	adds	r1, r6, #2
 801d3e4:	e7d3      	b.n	801d38e <__gethex+0xee>
 801d3e6:	f04f 0901 	mov.w	r9, #1
 801d3ea:	e7fa      	b.n	801d3e2 <__gethex+0x142>
 801d3ec:	230a      	movs	r3, #10
 801d3ee:	fb03 0202 	mla	r2, r3, r2, r0
 801d3f2:	3a10      	subs	r2, #16
 801d3f4:	e7d4      	b.n	801d3a0 <__gethex+0x100>
 801d3f6:	4631      	mov	r1, r6
 801d3f8:	e7df      	b.n	801d3ba <__gethex+0x11a>
 801d3fa:	1bf3      	subs	r3, r6, r7
 801d3fc:	3b01      	subs	r3, #1
 801d3fe:	4621      	mov	r1, r4
 801d400:	2b07      	cmp	r3, #7
 801d402:	dc0b      	bgt.n	801d41c <__gethex+0x17c>
 801d404:	ee18 0a10 	vmov	r0, s16
 801d408:	f000 faea 	bl	801d9e0 <_Balloc>
 801d40c:	4604      	mov	r4, r0
 801d40e:	b940      	cbnz	r0, 801d422 <__gethex+0x182>
 801d410:	4b65      	ldr	r3, [pc, #404]	; (801d5a8 <__gethex+0x308>)
 801d412:	4602      	mov	r2, r0
 801d414:	21de      	movs	r1, #222	; 0xde
 801d416:	4865      	ldr	r0, [pc, #404]	; (801d5ac <__gethex+0x30c>)
 801d418:	f7fe ff60 	bl	801c2dc <__assert_func>
 801d41c:	3101      	adds	r1, #1
 801d41e:	105b      	asrs	r3, r3, #1
 801d420:	e7ee      	b.n	801d400 <__gethex+0x160>
 801d422:	f100 0914 	add.w	r9, r0, #20
 801d426:	f04f 0b00 	mov.w	fp, #0
 801d42a:	f1ca 0301 	rsb	r3, sl, #1
 801d42e:	f8cd 9008 	str.w	r9, [sp, #8]
 801d432:	f8cd b000 	str.w	fp, [sp]
 801d436:	9306      	str	r3, [sp, #24]
 801d438:	42b7      	cmp	r7, r6
 801d43a:	d340      	bcc.n	801d4be <__gethex+0x21e>
 801d43c:	9802      	ldr	r0, [sp, #8]
 801d43e:	9b00      	ldr	r3, [sp, #0]
 801d440:	f840 3b04 	str.w	r3, [r0], #4
 801d444:	eba0 0009 	sub.w	r0, r0, r9
 801d448:	1080      	asrs	r0, r0, #2
 801d44a:	0146      	lsls	r6, r0, #5
 801d44c:	6120      	str	r0, [r4, #16]
 801d44e:	4618      	mov	r0, r3
 801d450:	f000 fbbc 	bl	801dbcc <__hi0bits>
 801d454:	1a30      	subs	r0, r6, r0
 801d456:	f8d8 6000 	ldr.w	r6, [r8]
 801d45a:	42b0      	cmp	r0, r6
 801d45c:	dd63      	ble.n	801d526 <__gethex+0x286>
 801d45e:	1b87      	subs	r7, r0, r6
 801d460:	4639      	mov	r1, r7
 801d462:	4620      	mov	r0, r4
 801d464:	f000 ff56 	bl	801e314 <__any_on>
 801d468:	4682      	mov	sl, r0
 801d46a:	b1a8      	cbz	r0, 801d498 <__gethex+0x1f8>
 801d46c:	1e7b      	subs	r3, r7, #1
 801d46e:	1159      	asrs	r1, r3, #5
 801d470:	f003 021f 	and.w	r2, r3, #31
 801d474:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d478:	f04f 0a01 	mov.w	sl, #1
 801d47c:	fa0a f202 	lsl.w	r2, sl, r2
 801d480:	420a      	tst	r2, r1
 801d482:	d009      	beq.n	801d498 <__gethex+0x1f8>
 801d484:	4553      	cmp	r3, sl
 801d486:	dd05      	ble.n	801d494 <__gethex+0x1f4>
 801d488:	1eb9      	subs	r1, r7, #2
 801d48a:	4620      	mov	r0, r4
 801d48c:	f000 ff42 	bl	801e314 <__any_on>
 801d490:	2800      	cmp	r0, #0
 801d492:	d145      	bne.n	801d520 <__gethex+0x280>
 801d494:	f04f 0a02 	mov.w	sl, #2
 801d498:	4639      	mov	r1, r7
 801d49a:	4620      	mov	r0, r4
 801d49c:	f7ff fe98 	bl	801d1d0 <rshift>
 801d4a0:	443d      	add	r5, r7
 801d4a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d4a6:	42ab      	cmp	r3, r5
 801d4a8:	da4c      	bge.n	801d544 <__gethex+0x2a4>
 801d4aa:	ee18 0a10 	vmov	r0, s16
 801d4ae:	4621      	mov	r1, r4
 801d4b0:	f000 fad6 	bl	801da60 <_Bfree>
 801d4b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d4b6:	2300      	movs	r3, #0
 801d4b8:	6013      	str	r3, [r2, #0]
 801d4ba:	27a3      	movs	r7, #163	; 0xa3
 801d4bc:	e785      	b.n	801d3ca <__gethex+0x12a>
 801d4be:	1e73      	subs	r3, r6, #1
 801d4c0:	9a05      	ldr	r2, [sp, #20]
 801d4c2:	9303      	str	r3, [sp, #12]
 801d4c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d4c8:	4293      	cmp	r3, r2
 801d4ca:	d019      	beq.n	801d500 <__gethex+0x260>
 801d4cc:	f1bb 0f20 	cmp.w	fp, #32
 801d4d0:	d107      	bne.n	801d4e2 <__gethex+0x242>
 801d4d2:	9b02      	ldr	r3, [sp, #8]
 801d4d4:	9a00      	ldr	r2, [sp, #0]
 801d4d6:	f843 2b04 	str.w	r2, [r3], #4
 801d4da:	9302      	str	r3, [sp, #8]
 801d4dc:	2300      	movs	r3, #0
 801d4de:	9300      	str	r3, [sp, #0]
 801d4e0:	469b      	mov	fp, r3
 801d4e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d4e6:	f7ff fec5 	bl	801d274 <__hexdig_fun>
 801d4ea:	9b00      	ldr	r3, [sp, #0]
 801d4ec:	f000 000f 	and.w	r0, r0, #15
 801d4f0:	fa00 f00b 	lsl.w	r0, r0, fp
 801d4f4:	4303      	orrs	r3, r0
 801d4f6:	9300      	str	r3, [sp, #0]
 801d4f8:	f10b 0b04 	add.w	fp, fp, #4
 801d4fc:	9b03      	ldr	r3, [sp, #12]
 801d4fe:	e00d      	b.n	801d51c <__gethex+0x27c>
 801d500:	9b03      	ldr	r3, [sp, #12]
 801d502:	9a06      	ldr	r2, [sp, #24]
 801d504:	4413      	add	r3, r2
 801d506:	42bb      	cmp	r3, r7
 801d508:	d3e0      	bcc.n	801d4cc <__gethex+0x22c>
 801d50a:	4618      	mov	r0, r3
 801d50c:	9901      	ldr	r1, [sp, #4]
 801d50e:	9307      	str	r3, [sp, #28]
 801d510:	4652      	mov	r2, sl
 801d512:	f7fd fe8a 	bl	801b22a <strncmp>
 801d516:	9b07      	ldr	r3, [sp, #28]
 801d518:	2800      	cmp	r0, #0
 801d51a:	d1d7      	bne.n	801d4cc <__gethex+0x22c>
 801d51c:	461e      	mov	r6, r3
 801d51e:	e78b      	b.n	801d438 <__gethex+0x198>
 801d520:	f04f 0a03 	mov.w	sl, #3
 801d524:	e7b8      	b.n	801d498 <__gethex+0x1f8>
 801d526:	da0a      	bge.n	801d53e <__gethex+0x29e>
 801d528:	1a37      	subs	r7, r6, r0
 801d52a:	4621      	mov	r1, r4
 801d52c:	ee18 0a10 	vmov	r0, s16
 801d530:	463a      	mov	r2, r7
 801d532:	f000 fcb1 	bl	801de98 <__lshift>
 801d536:	1bed      	subs	r5, r5, r7
 801d538:	4604      	mov	r4, r0
 801d53a:	f100 0914 	add.w	r9, r0, #20
 801d53e:	f04f 0a00 	mov.w	sl, #0
 801d542:	e7ae      	b.n	801d4a2 <__gethex+0x202>
 801d544:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d548:	42a8      	cmp	r0, r5
 801d54a:	dd72      	ble.n	801d632 <__gethex+0x392>
 801d54c:	1b45      	subs	r5, r0, r5
 801d54e:	42ae      	cmp	r6, r5
 801d550:	dc36      	bgt.n	801d5c0 <__gethex+0x320>
 801d552:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d556:	2b02      	cmp	r3, #2
 801d558:	d02a      	beq.n	801d5b0 <__gethex+0x310>
 801d55a:	2b03      	cmp	r3, #3
 801d55c:	d02c      	beq.n	801d5b8 <__gethex+0x318>
 801d55e:	2b01      	cmp	r3, #1
 801d560:	d115      	bne.n	801d58e <__gethex+0x2ee>
 801d562:	42ae      	cmp	r6, r5
 801d564:	d113      	bne.n	801d58e <__gethex+0x2ee>
 801d566:	2e01      	cmp	r6, #1
 801d568:	d10b      	bne.n	801d582 <__gethex+0x2e2>
 801d56a:	9a04      	ldr	r2, [sp, #16]
 801d56c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d570:	6013      	str	r3, [r2, #0]
 801d572:	2301      	movs	r3, #1
 801d574:	6123      	str	r3, [r4, #16]
 801d576:	f8c9 3000 	str.w	r3, [r9]
 801d57a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d57c:	2762      	movs	r7, #98	; 0x62
 801d57e:	601c      	str	r4, [r3, #0]
 801d580:	e723      	b.n	801d3ca <__gethex+0x12a>
 801d582:	1e71      	subs	r1, r6, #1
 801d584:	4620      	mov	r0, r4
 801d586:	f000 fec5 	bl	801e314 <__any_on>
 801d58a:	2800      	cmp	r0, #0
 801d58c:	d1ed      	bne.n	801d56a <__gethex+0x2ca>
 801d58e:	ee18 0a10 	vmov	r0, s16
 801d592:	4621      	mov	r1, r4
 801d594:	f000 fa64 	bl	801da60 <_Bfree>
 801d598:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d59a:	2300      	movs	r3, #0
 801d59c:	6013      	str	r3, [r2, #0]
 801d59e:	2750      	movs	r7, #80	; 0x50
 801d5a0:	e713      	b.n	801d3ca <__gethex+0x12a>
 801d5a2:	bf00      	nop
 801d5a4:	080212cc 	.word	0x080212cc
 801d5a8:	0802124f 	.word	0x0802124f
 801d5ac:	08021260 	.word	0x08021260
 801d5b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d1eb      	bne.n	801d58e <__gethex+0x2ee>
 801d5b6:	e7d8      	b.n	801d56a <__gethex+0x2ca>
 801d5b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d1d5      	bne.n	801d56a <__gethex+0x2ca>
 801d5be:	e7e6      	b.n	801d58e <__gethex+0x2ee>
 801d5c0:	1e6f      	subs	r7, r5, #1
 801d5c2:	f1ba 0f00 	cmp.w	sl, #0
 801d5c6:	d131      	bne.n	801d62c <__gethex+0x38c>
 801d5c8:	b127      	cbz	r7, 801d5d4 <__gethex+0x334>
 801d5ca:	4639      	mov	r1, r7
 801d5cc:	4620      	mov	r0, r4
 801d5ce:	f000 fea1 	bl	801e314 <__any_on>
 801d5d2:	4682      	mov	sl, r0
 801d5d4:	117b      	asrs	r3, r7, #5
 801d5d6:	2101      	movs	r1, #1
 801d5d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d5dc:	f007 071f 	and.w	r7, r7, #31
 801d5e0:	fa01 f707 	lsl.w	r7, r1, r7
 801d5e4:	421f      	tst	r7, r3
 801d5e6:	4629      	mov	r1, r5
 801d5e8:	4620      	mov	r0, r4
 801d5ea:	bf18      	it	ne
 801d5ec:	f04a 0a02 	orrne.w	sl, sl, #2
 801d5f0:	1b76      	subs	r6, r6, r5
 801d5f2:	f7ff fded 	bl	801d1d0 <rshift>
 801d5f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d5fa:	2702      	movs	r7, #2
 801d5fc:	f1ba 0f00 	cmp.w	sl, #0
 801d600:	d048      	beq.n	801d694 <__gethex+0x3f4>
 801d602:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d606:	2b02      	cmp	r3, #2
 801d608:	d015      	beq.n	801d636 <__gethex+0x396>
 801d60a:	2b03      	cmp	r3, #3
 801d60c:	d017      	beq.n	801d63e <__gethex+0x39e>
 801d60e:	2b01      	cmp	r3, #1
 801d610:	d109      	bne.n	801d626 <__gethex+0x386>
 801d612:	f01a 0f02 	tst.w	sl, #2
 801d616:	d006      	beq.n	801d626 <__gethex+0x386>
 801d618:	f8d9 0000 	ldr.w	r0, [r9]
 801d61c:	ea4a 0a00 	orr.w	sl, sl, r0
 801d620:	f01a 0f01 	tst.w	sl, #1
 801d624:	d10e      	bne.n	801d644 <__gethex+0x3a4>
 801d626:	f047 0710 	orr.w	r7, r7, #16
 801d62a:	e033      	b.n	801d694 <__gethex+0x3f4>
 801d62c:	f04f 0a01 	mov.w	sl, #1
 801d630:	e7d0      	b.n	801d5d4 <__gethex+0x334>
 801d632:	2701      	movs	r7, #1
 801d634:	e7e2      	b.n	801d5fc <__gethex+0x35c>
 801d636:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d638:	f1c3 0301 	rsb	r3, r3, #1
 801d63c:	9315      	str	r3, [sp, #84]	; 0x54
 801d63e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d640:	2b00      	cmp	r3, #0
 801d642:	d0f0      	beq.n	801d626 <__gethex+0x386>
 801d644:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d648:	f104 0314 	add.w	r3, r4, #20
 801d64c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d650:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d654:	f04f 0c00 	mov.w	ip, #0
 801d658:	4618      	mov	r0, r3
 801d65a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d65e:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d662:	d01c      	beq.n	801d69e <__gethex+0x3fe>
 801d664:	3201      	adds	r2, #1
 801d666:	6002      	str	r2, [r0, #0]
 801d668:	2f02      	cmp	r7, #2
 801d66a:	f104 0314 	add.w	r3, r4, #20
 801d66e:	d13f      	bne.n	801d6f0 <__gethex+0x450>
 801d670:	f8d8 2000 	ldr.w	r2, [r8]
 801d674:	3a01      	subs	r2, #1
 801d676:	42b2      	cmp	r2, r6
 801d678:	d10a      	bne.n	801d690 <__gethex+0x3f0>
 801d67a:	1171      	asrs	r1, r6, #5
 801d67c:	2201      	movs	r2, #1
 801d67e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d682:	f006 061f 	and.w	r6, r6, #31
 801d686:	fa02 f606 	lsl.w	r6, r2, r6
 801d68a:	421e      	tst	r6, r3
 801d68c:	bf18      	it	ne
 801d68e:	4617      	movne	r7, r2
 801d690:	f047 0720 	orr.w	r7, r7, #32
 801d694:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d696:	601c      	str	r4, [r3, #0]
 801d698:	9b04      	ldr	r3, [sp, #16]
 801d69a:	601d      	str	r5, [r3, #0]
 801d69c:	e695      	b.n	801d3ca <__gethex+0x12a>
 801d69e:	4299      	cmp	r1, r3
 801d6a0:	f843 cc04 	str.w	ip, [r3, #-4]
 801d6a4:	d8d8      	bhi.n	801d658 <__gethex+0x3b8>
 801d6a6:	68a3      	ldr	r3, [r4, #8]
 801d6a8:	459b      	cmp	fp, r3
 801d6aa:	db19      	blt.n	801d6e0 <__gethex+0x440>
 801d6ac:	6861      	ldr	r1, [r4, #4]
 801d6ae:	ee18 0a10 	vmov	r0, s16
 801d6b2:	3101      	adds	r1, #1
 801d6b4:	f000 f994 	bl	801d9e0 <_Balloc>
 801d6b8:	4681      	mov	r9, r0
 801d6ba:	b918      	cbnz	r0, 801d6c4 <__gethex+0x424>
 801d6bc:	4b1a      	ldr	r3, [pc, #104]	; (801d728 <__gethex+0x488>)
 801d6be:	4602      	mov	r2, r0
 801d6c0:	2184      	movs	r1, #132	; 0x84
 801d6c2:	e6a8      	b.n	801d416 <__gethex+0x176>
 801d6c4:	6922      	ldr	r2, [r4, #16]
 801d6c6:	3202      	adds	r2, #2
 801d6c8:	f104 010c 	add.w	r1, r4, #12
 801d6cc:	0092      	lsls	r2, r2, #2
 801d6ce:	300c      	adds	r0, #12
 801d6d0:	f7fc fc6c 	bl	8019fac <memcpy>
 801d6d4:	4621      	mov	r1, r4
 801d6d6:	ee18 0a10 	vmov	r0, s16
 801d6da:	f000 f9c1 	bl	801da60 <_Bfree>
 801d6de:	464c      	mov	r4, r9
 801d6e0:	6923      	ldr	r3, [r4, #16]
 801d6e2:	1c5a      	adds	r2, r3, #1
 801d6e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d6e8:	6122      	str	r2, [r4, #16]
 801d6ea:	2201      	movs	r2, #1
 801d6ec:	615a      	str	r2, [r3, #20]
 801d6ee:	e7bb      	b.n	801d668 <__gethex+0x3c8>
 801d6f0:	6922      	ldr	r2, [r4, #16]
 801d6f2:	455a      	cmp	r2, fp
 801d6f4:	dd0b      	ble.n	801d70e <__gethex+0x46e>
 801d6f6:	2101      	movs	r1, #1
 801d6f8:	4620      	mov	r0, r4
 801d6fa:	f7ff fd69 	bl	801d1d0 <rshift>
 801d6fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d702:	3501      	adds	r5, #1
 801d704:	42ab      	cmp	r3, r5
 801d706:	f6ff aed0 	blt.w	801d4aa <__gethex+0x20a>
 801d70a:	2701      	movs	r7, #1
 801d70c:	e7c0      	b.n	801d690 <__gethex+0x3f0>
 801d70e:	f016 061f 	ands.w	r6, r6, #31
 801d712:	d0fa      	beq.n	801d70a <__gethex+0x46a>
 801d714:	449a      	add	sl, r3
 801d716:	f1c6 0620 	rsb	r6, r6, #32
 801d71a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d71e:	f000 fa55 	bl	801dbcc <__hi0bits>
 801d722:	42b0      	cmp	r0, r6
 801d724:	dbe7      	blt.n	801d6f6 <__gethex+0x456>
 801d726:	e7f0      	b.n	801d70a <__gethex+0x46a>
 801d728:	0802124f 	.word	0x0802124f

0801d72c <L_shift>:
 801d72c:	f1c2 0208 	rsb	r2, r2, #8
 801d730:	0092      	lsls	r2, r2, #2
 801d732:	b570      	push	{r4, r5, r6, lr}
 801d734:	f1c2 0620 	rsb	r6, r2, #32
 801d738:	6843      	ldr	r3, [r0, #4]
 801d73a:	6804      	ldr	r4, [r0, #0]
 801d73c:	fa03 f506 	lsl.w	r5, r3, r6
 801d740:	432c      	orrs	r4, r5
 801d742:	40d3      	lsrs	r3, r2
 801d744:	6004      	str	r4, [r0, #0]
 801d746:	f840 3f04 	str.w	r3, [r0, #4]!
 801d74a:	4288      	cmp	r0, r1
 801d74c:	d3f4      	bcc.n	801d738 <L_shift+0xc>
 801d74e:	bd70      	pop	{r4, r5, r6, pc}

0801d750 <__match>:
 801d750:	b530      	push	{r4, r5, lr}
 801d752:	6803      	ldr	r3, [r0, #0]
 801d754:	3301      	adds	r3, #1
 801d756:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d75a:	b914      	cbnz	r4, 801d762 <__match+0x12>
 801d75c:	6003      	str	r3, [r0, #0]
 801d75e:	2001      	movs	r0, #1
 801d760:	bd30      	pop	{r4, r5, pc}
 801d762:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d766:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d76a:	2d19      	cmp	r5, #25
 801d76c:	bf98      	it	ls
 801d76e:	3220      	addls	r2, #32
 801d770:	42a2      	cmp	r2, r4
 801d772:	d0f0      	beq.n	801d756 <__match+0x6>
 801d774:	2000      	movs	r0, #0
 801d776:	e7f3      	b.n	801d760 <__match+0x10>

0801d778 <__hexnan>:
 801d778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d77c:	680b      	ldr	r3, [r1, #0]
 801d77e:	6801      	ldr	r1, [r0, #0]
 801d780:	115e      	asrs	r6, r3, #5
 801d782:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d786:	f013 031f 	ands.w	r3, r3, #31
 801d78a:	b087      	sub	sp, #28
 801d78c:	bf18      	it	ne
 801d78e:	3604      	addne	r6, #4
 801d790:	2500      	movs	r5, #0
 801d792:	1f37      	subs	r7, r6, #4
 801d794:	4682      	mov	sl, r0
 801d796:	4690      	mov	r8, r2
 801d798:	9301      	str	r3, [sp, #4]
 801d79a:	f846 5c04 	str.w	r5, [r6, #-4]
 801d79e:	46b9      	mov	r9, r7
 801d7a0:	463c      	mov	r4, r7
 801d7a2:	9502      	str	r5, [sp, #8]
 801d7a4:	46ab      	mov	fp, r5
 801d7a6:	784a      	ldrb	r2, [r1, #1]
 801d7a8:	1c4b      	adds	r3, r1, #1
 801d7aa:	9303      	str	r3, [sp, #12]
 801d7ac:	b342      	cbz	r2, 801d800 <__hexnan+0x88>
 801d7ae:	4610      	mov	r0, r2
 801d7b0:	9105      	str	r1, [sp, #20]
 801d7b2:	9204      	str	r2, [sp, #16]
 801d7b4:	f7ff fd5e 	bl	801d274 <__hexdig_fun>
 801d7b8:	2800      	cmp	r0, #0
 801d7ba:	d14f      	bne.n	801d85c <__hexnan+0xe4>
 801d7bc:	9a04      	ldr	r2, [sp, #16]
 801d7be:	9905      	ldr	r1, [sp, #20]
 801d7c0:	2a20      	cmp	r2, #32
 801d7c2:	d818      	bhi.n	801d7f6 <__hexnan+0x7e>
 801d7c4:	9b02      	ldr	r3, [sp, #8]
 801d7c6:	459b      	cmp	fp, r3
 801d7c8:	dd13      	ble.n	801d7f2 <__hexnan+0x7a>
 801d7ca:	454c      	cmp	r4, r9
 801d7cc:	d206      	bcs.n	801d7dc <__hexnan+0x64>
 801d7ce:	2d07      	cmp	r5, #7
 801d7d0:	dc04      	bgt.n	801d7dc <__hexnan+0x64>
 801d7d2:	462a      	mov	r2, r5
 801d7d4:	4649      	mov	r1, r9
 801d7d6:	4620      	mov	r0, r4
 801d7d8:	f7ff ffa8 	bl	801d72c <L_shift>
 801d7dc:	4544      	cmp	r4, r8
 801d7de:	d950      	bls.n	801d882 <__hexnan+0x10a>
 801d7e0:	2300      	movs	r3, #0
 801d7e2:	f1a4 0904 	sub.w	r9, r4, #4
 801d7e6:	f844 3c04 	str.w	r3, [r4, #-4]
 801d7ea:	f8cd b008 	str.w	fp, [sp, #8]
 801d7ee:	464c      	mov	r4, r9
 801d7f0:	461d      	mov	r5, r3
 801d7f2:	9903      	ldr	r1, [sp, #12]
 801d7f4:	e7d7      	b.n	801d7a6 <__hexnan+0x2e>
 801d7f6:	2a29      	cmp	r2, #41	; 0x29
 801d7f8:	d156      	bne.n	801d8a8 <__hexnan+0x130>
 801d7fa:	3102      	adds	r1, #2
 801d7fc:	f8ca 1000 	str.w	r1, [sl]
 801d800:	f1bb 0f00 	cmp.w	fp, #0
 801d804:	d050      	beq.n	801d8a8 <__hexnan+0x130>
 801d806:	454c      	cmp	r4, r9
 801d808:	d206      	bcs.n	801d818 <__hexnan+0xa0>
 801d80a:	2d07      	cmp	r5, #7
 801d80c:	dc04      	bgt.n	801d818 <__hexnan+0xa0>
 801d80e:	462a      	mov	r2, r5
 801d810:	4649      	mov	r1, r9
 801d812:	4620      	mov	r0, r4
 801d814:	f7ff ff8a 	bl	801d72c <L_shift>
 801d818:	4544      	cmp	r4, r8
 801d81a:	d934      	bls.n	801d886 <__hexnan+0x10e>
 801d81c:	f1a8 0204 	sub.w	r2, r8, #4
 801d820:	4623      	mov	r3, r4
 801d822:	f853 1b04 	ldr.w	r1, [r3], #4
 801d826:	f842 1f04 	str.w	r1, [r2, #4]!
 801d82a:	429f      	cmp	r7, r3
 801d82c:	d2f9      	bcs.n	801d822 <__hexnan+0xaa>
 801d82e:	1b3b      	subs	r3, r7, r4
 801d830:	f023 0303 	bic.w	r3, r3, #3
 801d834:	3304      	adds	r3, #4
 801d836:	3401      	adds	r4, #1
 801d838:	3e03      	subs	r6, #3
 801d83a:	42b4      	cmp	r4, r6
 801d83c:	bf88      	it	hi
 801d83e:	2304      	movhi	r3, #4
 801d840:	4443      	add	r3, r8
 801d842:	2200      	movs	r2, #0
 801d844:	f843 2b04 	str.w	r2, [r3], #4
 801d848:	429f      	cmp	r7, r3
 801d84a:	d2fb      	bcs.n	801d844 <__hexnan+0xcc>
 801d84c:	683b      	ldr	r3, [r7, #0]
 801d84e:	b91b      	cbnz	r3, 801d858 <__hexnan+0xe0>
 801d850:	4547      	cmp	r7, r8
 801d852:	d127      	bne.n	801d8a4 <__hexnan+0x12c>
 801d854:	2301      	movs	r3, #1
 801d856:	603b      	str	r3, [r7, #0]
 801d858:	2005      	movs	r0, #5
 801d85a:	e026      	b.n	801d8aa <__hexnan+0x132>
 801d85c:	3501      	adds	r5, #1
 801d85e:	2d08      	cmp	r5, #8
 801d860:	f10b 0b01 	add.w	fp, fp, #1
 801d864:	dd06      	ble.n	801d874 <__hexnan+0xfc>
 801d866:	4544      	cmp	r4, r8
 801d868:	d9c3      	bls.n	801d7f2 <__hexnan+0x7a>
 801d86a:	2300      	movs	r3, #0
 801d86c:	f844 3c04 	str.w	r3, [r4, #-4]
 801d870:	2501      	movs	r5, #1
 801d872:	3c04      	subs	r4, #4
 801d874:	6822      	ldr	r2, [r4, #0]
 801d876:	f000 000f 	and.w	r0, r0, #15
 801d87a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d87e:	6022      	str	r2, [r4, #0]
 801d880:	e7b7      	b.n	801d7f2 <__hexnan+0x7a>
 801d882:	2508      	movs	r5, #8
 801d884:	e7b5      	b.n	801d7f2 <__hexnan+0x7a>
 801d886:	9b01      	ldr	r3, [sp, #4]
 801d888:	2b00      	cmp	r3, #0
 801d88a:	d0df      	beq.n	801d84c <__hexnan+0xd4>
 801d88c:	f04f 32ff 	mov.w	r2, #4294967295
 801d890:	f1c3 0320 	rsb	r3, r3, #32
 801d894:	fa22 f303 	lsr.w	r3, r2, r3
 801d898:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d89c:	401a      	ands	r2, r3
 801d89e:	f846 2c04 	str.w	r2, [r6, #-4]
 801d8a2:	e7d3      	b.n	801d84c <__hexnan+0xd4>
 801d8a4:	3f04      	subs	r7, #4
 801d8a6:	e7d1      	b.n	801d84c <__hexnan+0xd4>
 801d8a8:	2004      	movs	r0, #4
 801d8aa:	b007      	add	sp, #28
 801d8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d8b0 <_localeconv_r>:
 801d8b0:	4800      	ldr	r0, [pc, #0]	; (801d8b4 <_localeconv_r+0x4>)
 801d8b2:	4770      	bx	lr
 801d8b4:	20000358 	.word	0x20000358

0801d8b8 <_lseek_r>:
 801d8b8:	b538      	push	{r3, r4, r5, lr}
 801d8ba:	4d07      	ldr	r5, [pc, #28]	; (801d8d8 <_lseek_r+0x20>)
 801d8bc:	4604      	mov	r4, r0
 801d8be:	4608      	mov	r0, r1
 801d8c0:	4611      	mov	r1, r2
 801d8c2:	2200      	movs	r2, #0
 801d8c4:	602a      	str	r2, [r5, #0]
 801d8c6:	461a      	mov	r2, r3
 801d8c8:	f7e5 fcaa 	bl	8003220 <_lseek>
 801d8cc:	1c43      	adds	r3, r0, #1
 801d8ce:	d102      	bne.n	801d8d6 <_lseek_r+0x1e>
 801d8d0:	682b      	ldr	r3, [r5, #0]
 801d8d2:	b103      	cbz	r3, 801d8d6 <_lseek_r+0x1e>
 801d8d4:	6023      	str	r3, [r4, #0]
 801d8d6:	bd38      	pop	{r3, r4, r5, pc}
 801d8d8:	20008e08 	.word	0x20008e08

0801d8dc <__swhatbuf_r>:
 801d8dc:	b570      	push	{r4, r5, r6, lr}
 801d8de:	460e      	mov	r6, r1
 801d8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8e4:	2900      	cmp	r1, #0
 801d8e6:	b096      	sub	sp, #88	; 0x58
 801d8e8:	4614      	mov	r4, r2
 801d8ea:	461d      	mov	r5, r3
 801d8ec:	da07      	bge.n	801d8fe <__swhatbuf_r+0x22>
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	602b      	str	r3, [r5, #0]
 801d8f2:	89b3      	ldrh	r3, [r6, #12]
 801d8f4:	061a      	lsls	r2, r3, #24
 801d8f6:	d410      	bmi.n	801d91a <__swhatbuf_r+0x3e>
 801d8f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d8fc:	e00e      	b.n	801d91c <__swhatbuf_r+0x40>
 801d8fe:	466a      	mov	r2, sp
 801d900:	f001 fbc6 	bl	801f090 <_fstat_r>
 801d904:	2800      	cmp	r0, #0
 801d906:	dbf2      	blt.n	801d8ee <__swhatbuf_r+0x12>
 801d908:	9a01      	ldr	r2, [sp, #4]
 801d90a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d90e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d912:	425a      	negs	r2, r3
 801d914:	415a      	adcs	r2, r3
 801d916:	602a      	str	r2, [r5, #0]
 801d918:	e7ee      	b.n	801d8f8 <__swhatbuf_r+0x1c>
 801d91a:	2340      	movs	r3, #64	; 0x40
 801d91c:	2000      	movs	r0, #0
 801d91e:	6023      	str	r3, [r4, #0]
 801d920:	b016      	add	sp, #88	; 0x58
 801d922:	bd70      	pop	{r4, r5, r6, pc}

0801d924 <__smakebuf_r>:
 801d924:	898b      	ldrh	r3, [r1, #12]
 801d926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d928:	079d      	lsls	r5, r3, #30
 801d92a:	4606      	mov	r6, r0
 801d92c:	460c      	mov	r4, r1
 801d92e:	d507      	bpl.n	801d940 <__smakebuf_r+0x1c>
 801d930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d934:	6023      	str	r3, [r4, #0]
 801d936:	6123      	str	r3, [r4, #16]
 801d938:	2301      	movs	r3, #1
 801d93a:	6163      	str	r3, [r4, #20]
 801d93c:	b002      	add	sp, #8
 801d93e:	bd70      	pop	{r4, r5, r6, pc}
 801d940:	ab01      	add	r3, sp, #4
 801d942:	466a      	mov	r2, sp
 801d944:	f7ff ffca 	bl	801d8dc <__swhatbuf_r>
 801d948:	9900      	ldr	r1, [sp, #0]
 801d94a:	4605      	mov	r5, r0
 801d94c:	4630      	mov	r0, r6
 801d94e:	f7fc fbad 	bl	801a0ac <_malloc_r>
 801d952:	b948      	cbnz	r0, 801d968 <__smakebuf_r+0x44>
 801d954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d958:	059a      	lsls	r2, r3, #22
 801d95a:	d4ef      	bmi.n	801d93c <__smakebuf_r+0x18>
 801d95c:	f023 0303 	bic.w	r3, r3, #3
 801d960:	f043 0302 	orr.w	r3, r3, #2
 801d964:	81a3      	strh	r3, [r4, #12]
 801d966:	e7e3      	b.n	801d930 <__smakebuf_r+0xc>
 801d968:	4b0d      	ldr	r3, [pc, #52]	; (801d9a0 <__smakebuf_r+0x7c>)
 801d96a:	62b3      	str	r3, [r6, #40]	; 0x28
 801d96c:	89a3      	ldrh	r3, [r4, #12]
 801d96e:	6020      	str	r0, [r4, #0]
 801d970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d974:	81a3      	strh	r3, [r4, #12]
 801d976:	9b00      	ldr	r3, [sp, #0]
 801d978:	6163      	str	r3, [r4, #20]
 801d97a:	9b01      	ldr	r3, [sp, #4]
 801d97c:	6120      	str	r0, [r4, #16]
 801d97e:	b15b      	cbz	r3, 801d998 <__smakebuf_r+0x74>
 801d980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d984:	4630      	mov	r0, r6
 801d986:	f001 fb95 	bl	801f0b4 <_isatty_r>
 801d98a:	b128      	cbz	r0, 801d998 <__smakebuf_r+0x74>
 801d98c:	89a3      	ldrh	r3, [r4, #12]
 801d98e:	f023 0303 	bic.w	r3, r3, #3
 801d992:	f043 0301 	orr.w	r3, r3, #1
 801d996:	81a3      	strh	r3, [r4, #12]
 801d998:	89a0      	ldrh	r0, [r4, #12]
 801d99a:	4305      	orrs	r5, r0
 801d99c:	81a5      	strh	r5, [r4, #12]
 801d99e:	e7cd      	b.n	801d93c <__smakebuf_r+0x18>
 801d9a0:	08019da9 	.word	0x08019da9

0801d9a4 <__ascii_mbtowc>:
 801d9a4:	b082      	sub	sp, #8
 801d9a6:	b901      	cbnz	r1, 801d9aa <__ascii_mbtowc+0x6>
 801d9a8:	a901      	add	r1, sp, #4
 801d9aa:	b142      	cbz	r2, 801d9be <__ascii_mbtowc+0x1a>
 801d9ac:	b14b      	cbz	r3, 801d9c2 <__ascii_mbtowc+0x1e>
 801d9ae:	7813      	ldrb	r3, [r2, #0]
 801d9b0:	600b      	str	r3, [r1, #0]
 801d9b2:	7812      	ldrb	r2, [r2, #0]
 801d9b4:	1e10      	subs	r0, r2, #0
 801d9b6:	bf18      	it	ne
 801d9b8:	2001      	movne	r0, #1
 801d9ba:	b002      	add	sp, #8
 801d9bc:	4770      	bx	lr
 801d9be:	4610      	mov	r0, r2
 801d9c0:	e7fb      	b.n	801d9ba <__ascii_mbtowc+0x16>
 801d9c2:	f06f 0001 	mvn.w	r0, #1
 801d9c6:	e7f8      	b.n	801d9ba <__ascii_mbtowc+0x16>

0801d9c8 <__malloc_lock>:
 801d9c8:	4801      	ldr	r0, [pc, #4]	; (801d9d0 <__malloc_lock+0x8>)
 801d9ca:	f7fc bae4 	b.w	8019f96 <__retarget_lock_acquire_recursive>
 801d9ce:	bf00      	nop
 801d9d0:	20008e00 	.word	0x20008e00

0801d9d4 <__malloc_unlock>:
 801d9d4:	4801      	ldr	r0, [pc, #4]	; (801d9dc <__malloc_unlock+0x8>)
 801d9d6:	f7fc badf 	b.w	8019f98 <__retarget_lock_release_recursive>
 801d9da:	bf00      	nop
 801d9dc:	20008e00 	.word	0x20008e00

0801d9e0 <_Balloc>:
 801d9e0:	b570      	push	{r4, r5, r6, lr}
 801d9e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d9e4:	4604      	mov	r4, r0
 801d9e6:	460d      	mov	r5, r1
 801d9e8:	b976      	cbnz	r6, 801da08 <_Balloc+0x28>
 801d9ea:	2010      	movs	r0, #16
 801d9ec:	f7fc fad6 	bl	8019f9c <malloc>
 801d9f0:	4602      	mov	r2, r0
 801d9f2:	6260      	str	r0, [r4, #36]	; 0x24
 801d9f4:	b920      	cbnz	r0, 801da00 <_Balloc+0x20>
 801d9f6:	4b18      	ldr	r3, [pc, #96]	; (801da58 <_Balloc+0x78>)
 801d9f8:	4818      	ldr	r0, [pc, #96]	; (801da5c <_Balloc+0x7c>)
 801d9fa:	2166      	movs	r1, #102	; 0x66
 801d9fc:	f7fe fc6e 	bl	801c2dc <__assert_func>
 801da00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801da04:	6006      	str	r6, [r0, #0]
 801da06:	60c6      	str	r6, [r0, #12]
 801da08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801da0a:	68f3      	ldr	r3, [r6, #12]
 801da0c:	b183      	cbz	r3, 801da30 <_Balloc+0x50>
 801da0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da10:	68db      	ldr	r3, [r3, #12]
 801da12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801da16:	b9b8      	cbnz	r0, 801da48 <_Balloc+0x68>
 801da18:	2101      	movs	r1, #1
 801da1a:	fa01 f605 	lsl.w	r6, r1, r5
 801da1e:	1d72      	adds	r2, r6, #5
 801da20:	0092      	lsls	r2, r2, #2
 801da22:	4620      	mov	r0, r4
 801da24:	f000 fc97 	bl	801e356 <_calloc_r>
 801da28:	b160      	cbz	r0, 801da44 <_Balloc+0x64>
 801da2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801da2e:	e00e      	b.n	801da4e <_Balloc+0x6e>
 801da30:	2221      	movs	r2, #33	; 0x21
 801da32:	2104      	movs	r1, #4
 801da34:	4620      	mov	r0, r4
 801da36:	f000 fc8e 	bl	801e356 <_calloc_r>
 801da3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da3c:	60f0      	str	r0, [r6, #12]
 801da3e:	68db      	ldr	r3, [r3, #12]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d1e4      	bne.n	801da0e <_Balloc+0x2e>
 801da44:	2000      	movs	r0, #0
 801da46:	bd70      	pop	{r4, r5, r6, pc}
 801da48:	6802      	ldr	r2, [r0, #0]
 801da4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801da4e:	2300      	movs	r3, #0
 801da50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801da54:	e7f7      	b.n	801da46 <_Balloc+0x66>
 801da56:	bf00      	nop
 801da58:	080211d9 	.word	0x080211d9
 801da5c:	080212e0 	.word	0x080212e0

0801da60 <_Bfree>:
 801da60:	b570      	push	{r4, r5, r6, lr}
 801da62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801da64:	4605      	mov	r5, r0
 801da66:	460c      	mov	r4, r1
 801da68:	b976      	cbnz	r6, 801da88 <_Bfree+0x28>
 801da6a:	2010      	movs	r0, #16
 801da6c:	f7fc fa96 	bl	8019f9c <malloc>
 801da70:	4602      	mov	r2, r0
 801da72:	6268      	str	r0, [r5, #36]	; 0x24
 801da74:	b920      	cbnz	r0, 801da80 <_Bfree+0x20>
 801da76:	4b09      	ldr	r3, [pc, #36]	; (801da9c <_Bfree+0x3c>)
 801da78:	4809      	ldr	r0, [pc, #36]	; (801daa0 <_Bfree+0x40>)
 801da7a:	218a      	movs	r1, #138	; 0x8a
 801da7c:	f7fe fc2e 	bl	801c2dc <__assert_func>
 801da80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801da84:	6006      	str	r6, [r0, #0]
 801da86:	60c6      	str	r6, [r0, #12]
 801da88:	b13c      	cbz	r4, 801da9a <_Bfree+0x3a>
 801da8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801da8c:	6862      	ldr	r2, [r4, #4]
 801da8e:	68db      	ldr	r3, [r3, #12]
 801da90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801da94:	6021      	str	r1, [r4, #0]
 801da96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801da9a:	bd70      	pop	{r4, r5, r6, pc}
 801da9c:	080211d9 	.word	0x080211d9
 801daa0:	080212e0 	.word	0x080212e0

0801daa4 <__multadd>:
 801daa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801daa8:	690e      	ldr	r6, [r1, #16]
 801daaa:	4607      	mov	r7, r0
 801daac:	4698      	mov	r8, r3
 801daae:	460c      	mov	r4, r1
 801dab0:	f101 0014 	add.w	r0, r1, #20
 801dab4:	2300      	movs	r3, #0
 801dab6:	6805      	ldr	r5, [r0, #0]
 801dab8:	b2a9      	uxth	r1, r5
 801daba:	fb02 8101 	mla	r1, r2, r1, r8
 801dabe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801dac2:	0c2d      	lsrs	r5, r5, #16
 801dac4:	fb02 c505 	mla	r5, r2, r5, ip
 801dac8:	b289      	uxth	r1, r1
 801daca:	3301      	adds	r3, #1
 801dacc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801dad0:	429e      	cmp	r6, r3
 801dad2:	f840 1b04 	str.w	r1, [r0], #4
 801dad6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801dada:	dcec      	bgt.n	801dab6 <__multadd+0x12>
 801dadc:	f1b8 0f00 	cmp.w	r8, #0
 801dae0:	d022      	beq.n	801db28 <__multadd+0x84>
 801dae2:	68a3      	ldr	r3, [r4, #8]
 801dae4:	42b3      	cmp	r3, r6
 801dae6:	dc19      	bgt.n	801db1c <__multadd+0x78>
 801dae8:	6861      	ldr	r1, [r4, #4]
 801daea:	4638      	mov	r0, r7
 801daec:	3101      	adds	r1, #1
 801daee:	f7ff ff77 	bl	801d9e0 <_Balloc>
 801daf2:	4605      	mov	r5, r0
 801daf4:	b928      	cbnz	r0, 801db02 <__multadd+0x5e>
 801daf6:	4602      	mov	r2, r0
 801daf8:	4b0d      	ldr	r3, [pc, #52]	; (801db30 <__multadd+0x8c>)
 801dafa:	480e      	ldr	r0, [pc, #56]	; (801db34 <__multadd+0x90>)
 801dafc:	21b5      	movs	r1, #181	; 0xb5
 801dafe:	f7fe fbed 	bl	801c2dc <__assert_func>
 801db02:	6922      	ldr	r2, [r4, #16]
 801db04:	3202      	adds	r2, #2
 801db06:	f104 010c 	add.w	r1, r4, #12
 801db0a:	0092      	lsls	r2, r2, #2
 801db0c:	300c      	adds	r0, #12
 801db0e:	f7fc fa4d 	bl	8019fac <memcpy>
 801db12:	4621      	mov	r1, r4
 801db14:	4638      	mov	r0, r7
 801db16:	f7ff ffa3 	bl	801da60 <_Bfree>
 801db1a:	462c      	mov	r4, r5
 801db1c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801db20:	3601      	adds	r6, #1
 801db22:	f8c3 8014 	str.w	r8, [r3, #20]
 801db26:	6126      	str	r6, [r4, #16]
 801db28:	4620      	mov	r0, r4
 801db2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db2e:	bf00      	nop
 801db30:	0802124f 	.word	0x0802124f
 801db34:	080212e0 	.word	0x080212e0

0801db38 <__s2b>:
 801db38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db3c:	460c      	mov	r4, r1
 801db3e:	4615      	mov	r5, r2
 801db40:	461f      	mov	r7, r3
 801db42:	2209      	movs	r2, #9
 801db44:	3308      	adds	r3, #8
 801db46:	4606      	mov	r6, r0
 801db48:	fb93 f3f2 	sdiv	r3, r3, r2
 801db4c:	2100      	movs	r1, #0
 801db4e:	2201      	movs	r2, #1
 801db50:	429a      	cmp	r2, r3
 801db52:	db09      	blt.n	801db68 <__s2b+0x30>
 801db54:	4630      	mov	r0, r6
 801db56:	f7ff ff43 	bl	801d9e0 <_Balloc>
 801db5a:	b940      	cbnz	r0, 801db6e <__s2b+0x36>
 801db5c:	4602      	mov	r2, r0
 801db5e:	4b19      	ldr	r3, [pc, #100]	; (801dbc4 <__s2b+0x8c>)
 801db60:	4819      	ldr	r0, [pc, #100]	; (801dbc8 <__s2b+0x90>)
 801db62:	21ce      	movs	r1, #206	; 0xce
 801db64:	f7fe fbba 	bl	801c2dc <__assert_func>
 801db68:	0052      	lsls	r2, r2, #1
 801db6a:	3101      	adds	r1, #1
 801db6c:	e7f0      	b.n	801db50 <__s2b+0x18>
 801db6e:	9b08      	ldr	r3, [sp, #32]
 801db70:	6143      	str	r3, [r0, #20]
 801db72:	2d09      	cmp	r5, #9
 801db74:	f04f 0301 	mov.w	r3, #1
 801db78:	6103      	str	r3, [r0, #16]
 801db7a:	dd16      	ble.n	801dbaa <__s2b+0x72>
 801db7c:	f104 0909 	add.w	r9, r4, #9
 801db80:	46c8      	mov	r8, r9
 801db82:	442c      	add	r4, r5
 801db84:	f818 3b01 	ldrb.w	r3, [r8], #1
 801db88:	4601      	mov	r1, r0
 801db8a:	3b30      	subs	r3, #48	; 0x30
 801db8c:	220a      	movs	r2, #10
 801db8e:	4630      	mov	r0, r6
 801db90:	f7ff ff88 	bl	801daa4 <__multadd>
 801db94:	45a0      	cmp	r8, r4
 801db96:	d1f5      	bne.n	801db84 <__s2b+0x4c>
 801db98:	f1a5 0408 	sub.w	r4, r5, #8
 801db9c:	444c      	add	r4, r9
 801db9e:	1b2d      	subs	r5, r5, r4
 801dba0:	1963      	adds	r3, r4, r5
 801dba2:	42bb      	cmp	r3, r7
 801dba4:	db04      	blt.n	801dbb0 <__s2b+0x78>
 801dba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbaa:	340a      	adds	r4, #10
 801dbac:	2509      	movs	r5, #9
 801dbae:	e7f6      	b.n	801db9e <__s2b+0x66>
 801dbb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dbb4:	4601      	mov	r1, r0
 801dbb6:	3b30      	subs	r3, #48	; 0x30
 801dbb8:	220a      	movs	r2, #10
 801dbba:	4630      	mov	r0, r6
 801dbbc:	f7ff ff72 	bl	801daa4 <__multadd>
 801dbc0:	e7ee      	b.n	801dba0 <__s2b+0x68>
 801dbc2:	bf00      	nop
 801dbc4:	0802124f 	.word	0x0802124f
 801dbc8:	080212e0 	.word	0x080212e0

0801dbcc <__hi0bits>:
 801dbcc:	0c03      	lsrs	r3, r0, #16
 801dbce:	041b      	lsls	r3, r3, #16
 801dbd0:	b9d3      	cbnz	r3, 801dc08 <__hi0bits+0x3c>
 801dbd2:	0400      	lsls	r0, r0, #16
 801dbd4:	2310      	movs	r3, #16
 801dbd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801dbda:	bf04      	itt	eq
 801dbdc:	0200      	lsleq	r0, r0, #8
 801dbde:	3308      	addeq	r3, #8
 801dbe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801dbe4:	bf04      	itt	eq
 801dbe6:	0100      	lsleq	r0, r0, #4
 801dbe8:	3304      	addeq	r3, #4
 801dbea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801dbee:	bf04      	itt	eq
 801dbf0:	0080      	lsleq	r0, r0, #2
 801dbf2:	3302      	addeq	r3, #2
 801dbf4:	2800      	cmp	r0, #0
 801dbf6:	db05      	blt.n	801dc04 <__hi0bits+0x38>
 801dbf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801dbfc:	f103 0301 	add.w	r3, r3, #1
 801dc00:	bf08      	it	eq
 801dc02:	2320      	moveq	r3, #32
 801dc04:	4618      	mov	r0, r3
 801dc06:	4770      	bx	lr
 801dc08:	2300      	movs	r3, #0
 801dc0a:	e7e4      	b.n	801dbd6 <__hi0bits+0xa>

0801dc0c <__lo0bits>:
 801dc0c:	6803      	ldr	r3, [r0, #0]
 801dc0e:	f013 0207 	ands.w	r2, r3, #7
 801dc12:	4601      	mov	r1, r0
 801dc14:	d00b      	beq.n	801dc2e <__lo0bits+0x22>
 801dc16:	07da      	lsls	r2, r3, #31
 801dc18:	d424      	bmi.n	801dc64 <__lo0bits+0x58>
 801dc1a:	0798      	lsls	r0, r3, #30
 801dc1c:	bf49      	itett	mi
 801dc1e:	085b      	lsrmi	r3, r3, #1
 801dc20:	089b      	lsrpl	r3, r3, #2
 801dc22:	2001      	movmi	r0, #1
 801dc24:	600b      	strmi	r3, [r1, #0]
 801dc26:	bf5c      	itt	pl
 801dc28:	600b      	strpl	r3, [r1, #0]
 801dc2a:	2002      	movpl	r0, #2
 801dc2c:	4770      	bx	lr
 801dc2e:	b298      	uxth	r0, r3
 801dc30:	b9b0      	cbnz	r0, 801dc60 <__lo0bits+0x54>
 801dc32:	0c1b      	lsrs	r3, r3, #16
 801dc34:	2010      	movs	r0, #16
 801dc36:	f013 0fff 	tst.w	r3, #255	; 0xff
 801dc3a:	bf04      	itt	eq
 801dc3c:	0a1b      	lsreq	r3, r3, #8
 801dc3e:	3008      	addeq	r0, #8
 801dc40:	071a      	lsls	r2, r3, #28
 801dc42:	bf04      	itt	eq
 801dc44:	091b      	lsreq	r3, r3, #4
 801dc46:	3004      	addeq	r0, #4
 801dc48:	079a      	lsls	r2, r3, #30
 801dc4a:	bf04      	itt	eq
 801dc4c:	089b      	lsreq	r3, r3, #2
 801dc4e:	3002      	addeq	r0, #2
 801dc50:	07da      	lsls	r2, r3, #31
 801dc52:	d403      	bmi.n	801dc5c <__lo0bits+0x50>
 801dc54:	085b      	lsrs	r3, r3, #1
 801dc56:	f100 0001 	add.w	r0, r0, #1
 801dc5a:	d005      	beq.n	801dc68 <__lo0bits+0x5c>
 801dc5c:	600b      	str	r3, [r1, #0]
 801dc5e:	4770      	bx	lr
 801dc60:	4610      	mov	r0, r2
 801dc62:	e7e8      	b.n	801dc36 <__lo0bits+0x2a>
 801dc64:	2000      	movs	r0, #0
 801dc66:	4770      	bx	lr
 801dc68:	2020      	movs	r0, #32
 801dc6a:	4770      	bx	lr

0801dc6c <__i2b>:
 801dc6c:	b510      	push	{r4, lr}
 801dc6e:	460c      	mov	r4, r1
 801dc70:	2101      	movs	r1, #1
 801dc72:	f7ff feb5 	bl	801d9e0 <_Balloc>
 801dc76:	4602      	mov	r2, r0
 801dc78:	b928      	cbnz	r0, 801dc86 <__i2b+0x1a>
 801dc7a:	4b05      	ldr	r3, [pc, #20]	; (801dc90 <__i2b+0x24>)
 801dc7c:	4805      	ldr	r0, [pc, #20]	; (801dc94 <__i2b+0x28>)
 801dc7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801dc82:	f7fe fb2b 	bl	801c2dc <__assert_func>
 801dc86:	2301      	movs	r3, #1
 801dc88:	6144      	str	r4, [r0, #20]
 801dc8a:	6103      	str	r3, [r0, #16]
 801dc8c:	bd10      	pop	{r4, pc}
 801dc8e:	bf00      	nop
 801dc90:	0802124f 	.word	0x0802124f
 801dc94:	080212e0 	.word	0x080212e0

0801dc98 <__multiply>:
 801dc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc9c:	4614      	mov	r4, r2
 801dc9e:	690a      	ldr	r2, [r1, #16]
 801dca0:	6923      	ldr	r3, [r4, #16]
 801dca2:	429a      	cmp	r2, r3
 801dca4:	bfb8      	it	lt
 801dca6:	460b      	movlt	r3, r1
 801dca8:	460d      	mov	r5, r1
 801dcaa:	bfbc      	itt	lt
 801dcac:	4625      	movlt	r5, r4
 801dcae:	461c      	movlt	r4, r3
 801dcb0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801dcb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801dcb8:	68ab      	ldr	r3, [r5, #8]
 801dcba:	6869      	ldr	r1, [r5, #4]
 801dcbc:	eb0a 0709 	add.w	r7, sl, r9
 801dcc0:	42bb      	cmp	r3, r7
 801dcc2:	b085      	sub	sp, #20
 801dcc4:	bfb8      	it	lt
 801dcc6:	3101      	addlt	r1, #1
 801dcc8:	f7ff fe8a 	bl	801d9e0 <_Balloc>
 801dccc:	b930      	cbnz	r0, 801dcdc <__multiply+0x44>
 801dcce:	4602      	mov	r2, r0
 801dcd0:	4b42      	ldr	r3, [pc, #264]	; (801dddc <__multiply+0x144>)
 801dcd2:	4843      	ldr	r0, [pc, #268]	; (801dde0 <__multiply+0x148>)
 801dcd4:	f240 115d 	movw	r1, #349	; 0x15d
 801dcd8:	f7fe fb00 	bl	801c2dc <__assert_func>
 801dcdc:	f100 0614 	add.w	r6, r0, #20
 801dce0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801dce4:	4633      	mov	r3, r6
 801dce6:	2200      	movs	r2, #0
 801dce8:	4543      	cmp	r3, r8
 801dcea:	d31e      	bcc.n	801dd2a <__multiply+0x92>
 801dcec:	f105 0c14 	add.w	ip, r5, #20
 801dcf0:	f104 0314 	add.w	r3, r4, #20
 801dcf4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801dcf8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801dcfc:	9202      	str	r2, [sp, #8]
 801dcfe:	ebac 0205 	sub.w	r2, ip, r5
 801dd02:	3a15      	subs	r2, #21
 801dd04:	f022 0203 	bic.w	r2, r2, #3
 801dd08:	3204      	adds	r2, #4
 801dd0a:	f105 0115 	add.w	r1, r5, #21
 801dd0e:	458c      	cmp	ip, r1
 801dd10:	bf38      	it	cc
 801dd12:	2204      	movcc	r2, #4
 801dd14:	9201      	str	r2, [sp, #4]
 801dd16:	9a02      	ldr	r2, [sp, #8]
 801dd18:	9303      	str	r3, [sp, #12]
 801dd1a:	429a      	cmp	r2, r3
 801dd1c:	d808      	bhi.n	801dd30 <__multiply+0x98>
 801dd1e:	2f00      	cmp	r7, #0
 801dd20:	dc55      	bgt.n	801ddce <__multiply+0x136>
 801dd22:	6107      	str	r7, [r0, #16]
 801dd24:	b005      	add	sp, #20
 801dd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd2a:	f843 2b04 	str.w	r2, [r3], #4
 801dd2e:	e7db      	b.n	801dce8 <__multiply+0x50>
 801dd30:	f8b3 a000 	ldrh.w	sl, [r3]
 801dd34:	f1ba 0f00 	cmp.w	sl, #0
 801dd38:	d020      	beq.n	801dd7c <__multiply+0xe4>
 801dd3a:	f105 0e14 	add.w	lr, r5, #20
 801dd3e:	46b1      	mov	r9, r6
 801dd40:	2200      	movs	r2, #0
 801dd42:	f85e 4b04 	ldr.w	r4, [lr], #4
 801dd46:	f8d9 b000 	ldr.w	fp, [r9]
 801dd4a:	b2a1      	uxth	r1, r4
 801dd4c:	fa1f fb8b 	uxth.w	fp, fp
 801dd50:	fb0a b101 	mla	r1, sl, r1, fp
 801dd54:	4411      	add	r1, r2
 801dd56:	f8d9 2000 	ldr.w	r2, [r9]
 801dd5a:	0c24      	lsrs	r4, r4, #16
 801dd5c:	0c12      	lsrs	r2, r2, #16
 801dd5e:	fb0a 2404 	mla	r4, sl, r4, r2
 801dd62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801dd66:	b289      	uxth	r1, r1
 801dd68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801dd6c:	45f4      	cmp	ip, lr
 801dd6e:	f849 1b04 	str.w	r1, [r9], #4
 801dd72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801dd76:	d8e4      	bhi.n	801dd42 <__multiply+0xaa>
 801dd78:	9901      	ldr	r1, [sp, #4]
 801dd7a:	5072      	str	r2, [r6, r1]
 801dd7c:	9a03      	ldr	r2, [sp, #12]
 801dd7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801dd82:	3304      	adds	r3, #4
 801dd84:	f1b9 0f00 	cmp.w	r9, #0
 801dd88:	d01f      	beq.n	801ddca <__multiply+0x132>
 801dd8a:	6834      	ldr	r4, [r6, #0]
 801dd8c:	f105 0114 	add.w	r1, r5, #20
 801dd90:	46b6      	mov	lr, r6
 801dd92:	f04f 0a00 	mov.w	sl, #0
 801dd96:	880a      	ldrh	r2, [r1, #0]
 801dd98:	f8be b002 	ldrh.w	fp, [lr, #2]
 801dd9c:	fb09 b202 	mla	r2, r9, r2, fp
 801dda0:	4492      	add	sl, r2
 801dda2:	b2a4      	uxth	r4, r4
 801dda4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801dda8:	f84e 4b04 	str.w	r4, [lr], #4
 801ddac:	f851 4b04 	ldr.w	r4, [r1], #4
 801ddb0:	f8be 2000 	ldrh.w	r2, [lr]
 801ddb4:	0c24      	lsrs	r4, r4, #16
 801ddb6:	fb09 2404 	mla	r4, r9, r4, r2
 801ddba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801ddbe:	458c      	cmp	ip, r1
 801ddc0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801ddc4:	d8e7      	bhi.n	801dd96 <__multiply+0xfe>
 801ddc6:	9a01      	ldr	r2, [sp, #4]
 801ddc8:	50b4      	str	r4, [r6, r2]
 801ddca:	3604      	adds	r6, #4
 801ddcc:	e7a3      	b.n	801dd16 <__multiply+0x7e>
 801ddce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ddd2:	2b00      	cmp	r3, #0
 801ddd4:	d1a5      	bne.n	801dd22 <__multiply+0x8a>
 801ddd6:	3f01      	subs	r7, #1
 801ddd8:	e7a1      	b.n	801dd1e <__multiply+0x86>
 801ddda:	bf00      	nop
 801dddc:	0802124f 	.word	0x0802124f
 801dde0:	080212e0 	.word	0x080212e0

0801dde4 <__pow5mult>:
 801dde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dde8:	4615      	mov	r5, r2
 801ddea:	f012 0203 	ands.w	r2, r2, #3
 801ddee:	4606      	mov	r6, r0
 801ddf0:	460f      	mov	r7, r1
 801ddf2:	d007      	beq.n	801de04 <__pow5mult+0x20>
 801ddf4:	4c25      	ldr	r4, [pc, #148]	; (801de8c <__pow5mult+0xa8>)
 801ddf6:	3a01      	subs	r2, #1
 801ddf8:	2300      	movs	r3, #0
 801ddfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ddfe:	f7ff fe51 	bl	801daa4 <__multadd>
 801de02:	4607      	mov	r7, r0
 801de04:	10ad      	asrs	r5, r5, #2
 801de06:	d03d      	beq.n	801de84 <__pow5mult+0xa0>
 801de08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801de0a:	b97c      	cbnz	r4, 801de2c <__pow5mult+0x48>
 801de0c:	2010      	movs	r0, #16
 801de0e:	f7fc f8c5 	bl	8019f9c <malloc>
 801de12:	4602      	mov	r2, r0
 801de14:	6270      	str	r0, [r6, #36]	; 0x24
 801de16:	b928      	cbnz	r0, 801de24 <__pow5mult+0x40>
 801de18:	4b1d      	ldr	r3, [pc, #116]	; (801de90 <__pow5mult+0xac>)
 801de1a:	481e      	ldr	r0, [pc, #120]	; (801de94 <__pow5mult+0xb0>)
 801de1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801de20:	f7fe fa5c 	bl	801c2dc <__assert_func>
 801de24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801de28:	6004      	str	r4, [r0, #0]
 801de2a:	60c4      	str	r4, [r0, #12]
 801de2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801de30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801de34:	b94c      	cbnz	r4, 801de4a <__pow5mult+0x66>
 801de36:	f240 2171 	movw	r1, #625	; 0x271
 801de3a:	4630      	mov	r0, r6
 801de3c:	f7ff ff16 	bl	801dc6c <__i2b>
 801de40:	2300      	movs	r3, #0
 801de42:	f8c8 0008 	str.w	r0, [r8, #8]
 801de46:	4604      	mov	r4, r0
 801de48:	6003      	str	r3, [r0, #0]
 801de4a:	f04f 0900 	mov.w	r9, #0
 801de4e:	07eb      	lsls	r3, r5, #31
 801de50:	d50a      	bpl.n	801de68 <__pow5mult+0x84>
 801de52:	4639      	mov	r1, r7
 801de54:	4622      	mov	r2, r4
 801de56:	4630      	mov	r0, r6
 801de58:	f7ff ff1e 	bl	801dc98 <__multiply>
 801de5c:	4639      	mov	r1, r7
 801de5e:	4680      	mov	r8, r0
 801de60:	4630      	mov	r0, r6
 801de62:	f7ff fdfd 	bl	801da60 <_Bfree>
 801de66:	4647      	mov	r7, r8
 801de68:	106d      	asrs	r5, r5, #1
 801de6a:	d00b      	beq.n	801de84 <__pow5mult+0xa0>
 801de6c:	6820      	ldr	r0, [r4, #0]
 801de6e:	b938      	cbnz	r0, 801de80 <__pow5mult+0x9c>
 801de70:	4622      	mov	r2, r4
 801de72:	4621      	mov	r1, r4
 801de74:	4630      	mov	r0, r6
 801de76:	f7ff ff0f 	bl	801dc98 <__multiply>
 801de7a:	6020      	str	r0, [r4, #0]
 801de7c:	f8c0 9000 	str.w	r9, [r0]
 801de80:	4604      	mov	r4, r0
 801de82:	e7e4      	b.n	801de4e <__pow5mult+0x6a>
 801de84:	4638      	mov	r0, r7
 801de86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de8a:	bf00      	nop
 801de8c:	08021430 	.word	0x08021430
 801de90:	080211d9 	.word	0x080211d9
 801de94:	080212e0 	.word	0x080212e0

0801de98 <__lshift>:
 801de98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de9c:	460c      	mov	r4, r1
 801de9e:	6849      	ldr	r1, [r1, #4]
 801dea0:	6923      	ldr	r3, [r4, #16]
 801dea2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dea6:	68a3      	ldr	r3, [r4, #8]
 801dea8:	4607      	mov	r7, r0
 801deaa:	4691      	mov	r9, r2
 801deac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801deb0:	f108 0601 	add.w	r6, r8, #1
 801deb4:	42b3      	cmp	r3, r6
 801deb6:	db0b      	blt.n	801ded0 <__lshift+0x38>
 801deb8:	4638      	mov	r0, r7
 801deba:	f7ff fd91 	bl	801d9e0 <_Balloc>
 801debe:	4605      	mov	r5, r0
 801dec0:	b948      	cbnz	r0, 801ded6 <__lshift+0x3e>
 801dec2:	4602      	mov	r2, r0
 801dec4:	4b28      	ldr	r3, [pc, #160]	; (801df68 <__lshift+0xd0>)
 801dec6:	4829      	ldr	r0, [pc, #164]	; (801df6c <__lshift+0xd4>)
 801dec8:	f240 11d9 	movw	r1, #473	; 0x1d9
 801decc:	f7fe fa06 	bl	801c2dc <__assert_func>
 801ded0:	3101      	adds	r1, #1
 801ded2:	005b      	lsls	r3, r3, #1
 801ded4:	e7ee      	b.n	801deb4 <__lshift+0x1c>
 801ded6:	2300      	movs	r3, #0
 801ded8:	f100 0114 	add.w	r1, r0, #20
 801dedc:	f100 0210 	add.w	r2, r0, #16
 801dee0:	4618      	mov	r0, r3
 801dee2:	4553      	cmp	r3, sl
 801dee4:	db33      	blt.n	801df4e <__lshift+0xb6>
 801dee6:	6920      	ldr	r0, [r4, #16]
 801dee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801deec:	f104 0314 	add.w	r3, r4, #20
 801def0:	f019 091f 	ands.w	r9, r9, #31
 801def4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801def8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801defc:	d02b      	beq.n	801df56 <__lshift+0xbe>
 801defe:	f1c9 0e20 	rsb	lr, r9, #32
 801df02:	468a      	mov	sl, r1
 801df04:	2200      	movs	r2, #0
 801df06:	6818      	ldr	r0, [r3, #0]
 801df08:	fa00 f009 	lsl.w	r0, r0, r9
 801df0c:	4302      	orrs	r2, r0
 801df0e:	f84a 2b04 	str.w	r2, [sl], #4
 801df12:	f853 2b04 	ldr.w	r2, [r3], #4
 801df16:	459c      	cmp	ip, r3
 801df18:	fa22 f20e 	lsr.w	r2, r2, lr
 801df1c:	d8f3      	bhi.n	801df06 <__lshift+0x6e>
 801df1e:	ebac 0304 	sub.w	r3, ip, r4
 801df22:	3b15      	subs	r3, #21
 801df24:	f023 0303 	bic.w	r3, r3, #3
 801df28:	3304      	adds	r3, #4
 801df2a:	f104 0015 	add.w	r0, r4, #21
 801df2e:	4584      	cmp	ip, r0
 801df30:	bf38      	it	cc
 801df32:	2304      	movcc	r3, #4
 801df34:	50ca      	str	r2, [r1, r3]
 801df36:	b10a      	cbz	r2, 801df3c <__lshift+0xa4>
 801df38:	f108 0602 	add.w	r6, r8, #2
 801df3c:	3e01      	subs	r6, #1
 801df3e:	4638      	mov	r0, r7
 801df40:	612e      	str	r6, [r5, #16]
 801df42:	4621      	mov	r1, r4
 801df44:	f7ff fd8c 	bl	801da60 <_Bfree>
 801df48:	4628      	mov	r0, r5
 801df4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df4e:	f842 0f04 	str.w	r0, [r2, #4]!
 801df52:	3301      	adds	r3, #1
 801df54:	e7c5      	b.n	801dee2 <__lshift+0x4a>
 801df56:	3904      	subs	r1, #4
 801df58:	f853 2b04 	ldr.w	r2, [r3], #4
 801df5c:	f841 2f04 	str.w	r2, [r1, #4]!
 801df60:	459c      	cmp	ip, r3
 801df62:	d8f9      	bhi.n	801df58 <__lshift+0xc0>
 801df64:	e7ea      	b.n	801df3c <__lshift+0xa4>
 801df66:	bf00      	nop
 801df68:	0802124f 	.word	0x0802124f
 801df6c:	080212e0 	.word	0x080212e0

0801df70 <__mcmp>:
 801df70:	b530      	push	{r4, r5, lr}
 801df72:	6902      	ldr	r2, [r0, #16]
 801df74:	690c      	ldr	r4, [r1, #16]
 801df76:	1b12      	subs	r2, r2, r4
 801df78:	d10e      	bne.n	801df98 <__mcmp+0x28>
 801df7a:	f100 0314 	add.w	r3, r0, #20
 801df7e:	3114      	adds	r1, #20
 801df80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801df84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801df88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801df8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801df90:	42a5      	cmp	r5, r4
 801df92:	d003      	beq.n	801df9c <__mcmp+0x2c>
 801df94:	d305      	bcc.n	801dfa2 <__mcmp+0x32>
 801df96:	2201      	movs	r2, #1
 801df98:	4610      	mov	r0, r2
 801df9a:	bd30      	pop	{r4, r5, pc}
 801df9c:	4283      	cmp	r3, r0
 801df9e:	d3f3      	bcc.n	801df88 <__mcmp+0x18>
 801dfa0:	e7fa      	b.n	801df98 <__mcmp+0x28>
 801dfa2:	f04f 32ff 	mov.w	r2, #4294967295
 801dfa6:	e7f7      	b.n	801df98 <__mcmp+0x28>

0801dfa8 <__mdiff>:
 801dfa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfac:	460c      	mov	r4, r1
 801dfae:	4606      	mov	r6, r0
 801dfb0:	4611      	mov	r1, r2
 801dfb2:	4620      	mov	r0, r4
 801dfb4:	4617      	mov	r7, r2
 801dfb6:	f7ff ffdb 	bl	801df70 <__mcmp>
 801dfba:	1e05      	subs	r5, r0, #0
 801dfbc:	d110      	bne.n	801dfe0 <__mdiff+0x38>
 801dfbe:	4629      	mov	r1, r5
 801dfc0:	4630      	mov	r0, r6
 801dfc2:	f7ff fd0d 	bl	801d9e0 <_Balloc>
 801dfc6:	b930      	cbnz	r0, 801dfd6 <__mdiff+0x2e>
 801dfc8:	4b39      	ldr	r3, [pc, #228]	; (801e0b0 <__mdiff+0x108>)
 801dfca:	4602      	mov	r2, r0
 801dfcc:	f240 2132 	movw	r1, #562	; 0x232
 801dfd0:	4838      	ldr	r0, [pc, #224]	; (801e0b4 <__mdiff+0x10c>)
 801dfd2:	f7fe f983 	bl	801c2dc <__assert_func>
 801dfd6:	2301      	movs	r3, #1
 801dfd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dfdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfe0:	bfa4      	itt	ge
 801dfe2:	463b      	movge	r3, r7
 801dfe4:	4627      	movge	r7, r4
 801dfe6:	4630      	mov	r0, r6
 801dfe8:	6879      	ldr	r1, [r7, #4]
 801dfea:	bfa6      	itte	ge
 801dfec:	461c      	movge	r4, r3
 801dfee:	2500      	movge	r5, #0
 801dff0:	2501      	movlt	r5, #1
 801dff2:	f7ff fcf5 	bl	801d9e0 <_Balloc>
 801dff6:	b920      	cbnz	r0, 801e002 <__mdiff+0x5a>
 801dff8:	4b2d      	ldr	r3, [pc, #180]	; (801e0b0 <__mdiff+0x108>)
 801dffa:	4602      	mov	r2, r0
 801dffc:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e000:	e7e6      	b.n	801dfd0 <__mdiff+0x28>
 801e002:	693e      	ldr	r6, [r7, #16]
 801e004:	60c5      	str	r5, [r0, #12]
 801e006:	6925      	ldr	r5, [r4, #16]
 801e008:	f107 0114 	add.w	r1, r7, #20
 801e00c:	f104 0914 	add.w	r9, r4, #20
 801e010:	f100 0e14 	add.w	lr, r0, #20
 801e014:	f107 0210 	add.w	r2, r7, #16
 801e018:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801e01c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801e020:	46f2      	mov	sl, lr
 801e022:	2700      	movs	r7, #0
 801e024:	f859 3b04 	ldr.w	r3, [r9], #4
 801e028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e02c:	fa1f f883 	uxth.w	r8, r3
 801e030:	fa17 f78b 	uxtah	r7, r7, fp
 801e034:	0c1b      	lsrs	r3, r3, #16
 801e036:	eba7 0808 	sub.w	r8, r7, r8
 801e03a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e03e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e042:	fa1f f888 	uxth.w	r8, r8
 801e046:	141f      	asrs	r7, r3, #16
 801e048:	454d      	cmp	r5, r9
 801e04a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e04e:	f84a 3b04 	str.w	r3, [sl], #4
 801e052:	d8e7      	bhi.n	801e024 <__mdiff+0x7c>
 801e054:	1b2b      	subs	r3, r5, r4
 801e056:	3b15      	subs	r3, #21
 801e058:	f023 0303 	bic.w	r3, r3, #3
 801e05c:	3304      	adds	r3, #4
 801e05e:	3415      	adds	r4, #21
 801e060:	42a5      	cmp	r5, r4
 801e062:	bf38      	it	cc
 801e064:	2304      	movcc	r3, #4
 801e066:	4419      	add	r1, r3
 801e068:	4473      	add	r3, lr
 801e06a:	469e      	mov	lr, r3
 801e06c:	460d      	mov	r5, r1
 801e06e:	4565      	cmp	r5, ip
 801e070:	d30e      	bcc.n	801e090 <__mdiff+0xe8>
 801e072:	f10c 0203 	add.w	r2, ip, #3
 801e076:	1a52      	subs	r2, r2, r1
 801e078:	f022 0203 	bic.w	r2, r2, #3
 801e07c:	3903      	subs	r1, #3
 801e07e:	458c      	cmp	ip, r1
 801e080:	bf38      	it	cc
 801e082:	2200      	movcc	r2, #0
 801e084:	441a      	add	r2, r3
 801e086:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e08a:	b17b      	cbz	r3, 801e0ac <__mdiff+0x104>
 801e08c:	6106      	str	r6, [r0, #16]
 801e08e:	e7a5      	b.n	801dfdc <__mdiff+0x34>
 801e090:	f855 8b04 	ldr.w	r8, [r5], #4
 801e094:	fa17 f488 	uxtah	r4, r7, r8
 801e098:	1422      	asrs	r2, r4, #16
 801e09a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801e09e:	b2a4      	uxth	r4, r4
 801e0a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801e0a4:	f84e 4b04 	str.w	r4, [lr], #4
 801e0a8:	1417      	asrs	r7, r2, #16
 801e0aa:	e7e0      	b.n	801e06e <__mdiff+0xc6>
 801e0ac:	3e01      	subs	r6, #1
 801e0ae:	e7ea      	b.n	801e086 <__mdiff+0xde>
 801e0b0:	0802124f 	.word	0x0802124f
 801e0b4:	080212e0 	.word	0x080212e0

0801e0b8 <__ulp>:
 801e0b8:	b082      	sub	sp, #8
 801e0ba:	ed8d 0b00 	vstr	d0, [sp]
 801e0be:	9b01      	ldr	r3, [sp, #4]
 801e0c0:	4912      	ldr	r1, [pc, #72]	; (801e10c <__ulp+0x54>)
 801e0c2:	4019      	ands	r1, r3
 801e0c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e0c8:	2900      	cmp	r1, #0
 801e0ca:	dd05      	ble.n	801e0d8 <__ulp+0x20>
 801e0cc:	2200      	movs	r2, #0
 801e0ce:	460b      	mov	r3, r1
 801e0d0:	ec43 2b10 	vmov	d0, r2, r3
 801e0d4:	b002      	add	sp, #8
 801e0d6:	4770      	bx	lr
 801e0d8:	4249      	negs	r1, r1
 801e0da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e0de:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e0e2:	f04f 0200 	mov.w	r2, #0
 801e0e6:	f04f 0300 	mov.w	r3, #0
 801e0ea:	da04      	bge.n	801e0f6 <__ulp+0x3e>
 801e0ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e0f0:	fa41 f300 	asr.w	r3, r1, r0
 801e0f4:	e7ec      	b.n	801e0d0 <__ulp+0x18>
 801e0f6:	f1a0 0114 	sub.w	r1, r0, #20
 801e0fa:	291e      	cmp	r1, #30
 801e0fc:	bfda      	itte	le
 801e0fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e102:	fa20 f101 	lsrle.w	r1, r0, r1
 801e106:	2101      	movgt	r1, #1
 801e108:	460a      	mov	r2, r1
 801e10a:	e7e1      	b.n	801e0d0 <__ulp+0x18>
 801e10c:	7ff00000 	.word	0x7ff00000

0801e110 <__b2d>:
 801e110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e112:	6905      	ldr	r5, [r0, #16]
 801e114:	f100 0714 	add.w	r7, r0, #20
 801e118:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e11c:	1f2e      	subs	r6, r5, #4
 801e11e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e122:	4620      	mov	r0, r4
 801e124:	f7ff fd52 	bl	801dbcc <__hi0bits>
 801e128:	f1c0 0320 	rsb	r3, r0, #32
 801e12c:	280a      	cmp	r0, #10
 801e12e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e1ac <__b2d+0x9c>
 801e132:	600b      	str	r3, [r1, #0]
 801e134:	dc14      	bgt.n	801e160 <__b2d+0x50>
 801e136:	f1c0 0e0b 	rsb	lr, r0, #11
 801e13a:	fa24 f10e 	lsr.w	r1, r4, lr
 801e13e:	42b7      	cmp	r7, r6
 801e140:	ea41 030c 	orr.w	r3, r1, ip
 801e144:	bf34      	ite	cc
 801e146:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e14a:	2100      	movcs	r1, #0
 801e14c:	3015      	adds	r0, #21
 801e14e:	fa04 f000 	lsl.w	r0, r4, r0
 801e152:	fa21 f10e 	lsr.w	r1, r1, lr
 801e156:	ea40 0201 	orr.w	r2, r0, r1
 801e15a:	ec43 2b10 	vmov	d0, r2, r3
 801e15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e160:	42b7      	cmp	r7, r6
 801e162:	bf3a      	itte	cc
 801e164:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e168:	f1a5 0608 	subcc.w	r6, r5, #8
 801e16c:	2100      	movcs	r1, #0
 801e16e:	380b      	subs	r0, #11
 801e170:	d017      	beq.n	801e1a2 <__b2d+0x92>
 801e172:	f1c0 0c20 	rsb	ip, r0, #32
 801e176:	fa04 f500 	lsl.w	r5, r4, r0
 801e17a:	42be      	cmp	r6, r7
 801e17c:	fa21 f40c 	lsr.w	r4, r1, ip
 801e180:	ea45 0504 	orr.w	r5, r5, r4
 801e184:	bf8c      	ite	hi
 801e186:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e18a:	2400      	movls	r4, #0
 801e18c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e190:	fa01 f000 	lsl.w	r0, r1, r0
 801e194:	fa24 f40c 	lsr.w	r4, r4, ip
 801e198:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e19c:	ea40 0204 	orr.w	r2, r0, r4
 801e1a0:	e7db      	b.n	801e15a <__b2d+0x4a>
 801e1a2:	ea44 030c 	orr.w	r3, r4, ip
 801e1a6:	460a      	mov	r2, r1
 801e1a8:	e7d7      	b.n	801e15a <__b2d+0x4a>
 801e1aa:	bf00      	nop
 801e1ac:	3ff00000 	.word	0x3ff00000

0801e1b0 <__d2b>:
 801e1b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e1b4:	4689      	mov	r9, r1
 801e1b6:	2101      	movs	r1, #1
 801e1b8:	ec57 6b10 	vmov	r6, r7, d0
 801e1bc:	4690      	mov	r8, r2
 801e1be:	f7ff fc0f 	bl	801d9e0 <_Balloc>
 801e1c2:	4604      	mov	r4, r0
 801e1c4:	b930      	cbnz	r0, 801e1d4 <__d2b+0x24>
 801e1c6:	4602      	mov	r2, r0
 801e1c8:	4b25      	ldr	r3, [pc, #148]	; (801e260 <__d2b+0xb0>)
 801e1ca:	4826      	ldr	r0, [pc, #152]	; (801e264 <__d2b+0xb4>)
 801e1cc:	f240 310a 	movw	r1, #778	; 0x30a
 801e1d0:	f7fe f884 	bl	801c2dc <__assert_func>
 801e1d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e1d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e1dc:	bb35      	cbnz	r5, 801e22c <__d2b+0x7c>
 801e1de:	2e00      	cmp	r6, #0
 801e1e0:	9301      	str	r3, [sp, #4]
 801e1e2:	d028      	beq.n	801e236 <__d2b+0x86>
 801e1e4:	4668      	mov	r0, sp
 801e1e6:	9600      	str	r6, [sp, #0]
 801e1e8:	f7ff fd10 	bl	801dc0c <__lo0bits>
 801e1ec:	9900      	ldr	r1, [sp, #0]
 801e1ee:	b300      	cbz	r0, 801e232 <__d2b+0x82>
 801e1f0:	9a01      	ldr	r2, [sp, #4]
 801e1f2:	f1c0 0320 	rsb	r3, r0, #32
 801e1f6:	fa02 f303 	lsl.w	r3, r2, r3
 801e1fa:	430b      	orrs	r3, r1
 801e1fc:	40c2      	lsrs	r2, r0
 801e1fe:	6163      	str	r3, [r4, #20]
 801e200:	9201      	str	r2, [sp, #4]
 801e202:	9b01      	ldr	r3, [sp, #4]
 801e204:	61a3      	str	r3, [r4, #24]
 801e206:	2b00      	cmp	r3, #0
 801e208:	bf14      	ite	ne
 801e20a:	2202      	movne	r2, #2
 801e20c:	2201      	moveq	r2, #1
 801e20e:	6122      	str	r2, [r4, #16]
 801e210:	b1d5      	cbz	r5, 801e248 <__d2b+0x98>
 801e212:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e216:	4405      	add	r5, r0
 801e218:	f8c9 5000 	str.w	r5, [r9]
 801e21c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e220:	f8c8 0000 	str.w	r0, [r8]
 801e224:	4620      	mov	r0, r4
 801e226:	b003      	add	sp, #12
 801e228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e22c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e230:	e7d5      	b.n	801e1de <__d2b+0x2e>
 801e232:	6161      	str	r1, [r4, #20]
 801e234:	e7e5      	b.n	801e202 <__d2b+0x52>
 801e236:	a801      	add	r0, sp, #4
 801e238:	f7ff fce8 	bl	801dc0c <__lo0bits>
 801e23c:	9b01      	ldr	r3, [sp, #4]
 801e23e:	6163      	str	r3, [r4, #20]
 801e240:	2201      	movs	r2, #1
 801e242:	6122      	str	r2, [r4, #16]
 801e244:	3020      	adds	r0, #32
 801e246:	e7e3      	b.n	801e210 <__d2b+0x60>
 801e248:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e24c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e250:	f8c9 0000 	str.w	r0, [r9]
 801e254:	6918      	ldr	r0, [r3, #16]
 801e256:	f7ff fcb9 	bl	801dbcc <__hi0bits>
 801e25a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e25e:	e7df      	b.n	801e220 <__d2b+0x70>
 801e260:	0802124f 	.word	0x0802124f
 801e264:	080212e0 	.word	0x080212e0

0801e268 <__ratio>:
 801e268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e26c:	4688      	mov	r8, r1
 801e26e:	4669      	mov	r1, sp
 801e270:	4681      	mov	r9, r0
 801e272:	f7ff ff4d 	bl	801e110 <__b2d>
 801e276:	a901      	add	r1, sp, #4
 801e278:	4640      	mov	r0, r8
 801e27a:	ec55 4b10 	vmov	r4, r5, d0
 801e27e:	f7ff ff47 	bl	801e110 <__b2d>
 801e282:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e286:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e28a:	eba3 0c02 	sub.w	ip, r3, r2
 801e28e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e292:	1a9b      	subs	r3, r3, r2
 801e294:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e298:	ec51 0b10 	vmov	r0, r1, d0
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	bfd6      	itet	le
 801e2a0:	460a      	movle	r2, r1
 801e2a2:	462a      	movgt	r2, r5
 801e2a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e2a8:	468b      	mov	fp, r1
 801e2aa:	462f      	mov	r7, r5
 801e2ac:	bfd4      	ite	le
 801e2ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e2b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e2b6:	4620      	mov	r0, r4
 801e2b8:	ee10 2a10 	vmov	r2, s0
 801e2bc:	465b      	mov	r3, fp
 801e2be:	4639      	mov	r1, r7
 801e2c0:	f7e2 fad4 	bl	800086c <__aeabi_ddiv>
 801e2c4:	ec41 0b10 	vmov	d0, r0, r1
 801e2c8:	b003      	add	sp, #12
 801e2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2ce <__copybits>:
 801e2ce:	3901      	subs	r1, #1
 801e2d0:	b570      	push	{r4, r5, r6, lr}
 801e2d2:	1149      	asrs	r1, r1, #5
 801e2d4:	6914      	ldr	r4, [r2, #16]
 801e2d6:	3101      	adds	r1, #1
 801e2d8:	f102 0314 	add.w	r3, r2, #20
 801e2dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e2e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e2e4:	1f05      	subs	r5, r0, #4
 801e2e6:	42a3      	cmp	r3, r4
 801e2e8:	d30c      	bcc.n	801e304 <__copybits+0x36>
 801e2ea:	1aa3      	subs	r3, r4, r2
 801e2ec:	3b11      	subs	r3, #17
 801e2ee:	f023 0303 	bic.w	r3, r3, #3
 801e2f2:	3211      	adds	r2, #17
 801e2f4:	42a2      	cmp	r2, r4
 801e2f6:	bf88      	it	hi
 801e2f8:	2300      	movhi	r3, #0
 801e2fa:	4418      	add	r0, r3
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	4288      	cmp	r0, r1
 801e300:	d305      	bcc.n	801e30e <__copybits+0x40>
 801e302:	bd70      	pop	{r4, r5, r6, pc}
 801e304:	f853 6b04 	ldr.w	r6, [r3], #4
 801e308:	f845 6f04 	str.w	r6, [r5, #4]!
 801e30c:	e7eb      	b.n	801e2e6 <__copybits+0x18>
 801e30e:	f840 3b04 	str.w	r3, [r0], #4
 801e312:	e7f4      	b.n	801e2fe <__copybits+0x30>

0801e314 <__any_on>:
 801e314:	f100 0214 	add.w	r2, r0, #20
 801e318:	6900      	ldr	r0, [r0, #16]
 801e31a:	114b      	asrs	r3, r1, #5
 801e31c:	4298      	cmp	r0, r3
 801e31e:	b510      	push	{r4, lr}
 801e320:	db11      	blt.n	801e346 <__any_on+0x32>
 801e322:	dd0a      	ble.n	801e33a <__any_on+0x26>
 801e324:	f011 011f 	ands.w	r1, r1, #31
 801e328:	d007      	beq.n	801e33a <__any_on+0x26>
 801e32a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e32e:	fa24 f001 	lsr.w	r0, r4, r1
 801e332:	fa00 f101 	lsl.w	r1, r0, r1
 801e336:	428c      	cmp	r4, r1
 801e338:	d10b      	bne.n	801e352 <__any_on+0x3e>
 801e33a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e33e:	4293      	cmp	r3, r2
 801e340:	d803      	bhi.n	801e34a <__any_on+0x36>
 801e342:	2000      	movs	r0, #0
 801e344:	bd10      	pop	{r4, pc}
 801e346:	4603      	mov	r3, r0
 801e348:	e7f7      	b.n	801e33a <__any_on+0x26>
 801e34a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e34e:	2900      	cmp	r1, #0
 801e350:	d0f5      	beq.n	801e33e <__any_on+0x2a>
 801e352:	2001      	movs	r0, #1
 801e354:	e7f6      	b.n	801e344 <__any_on+0x30>

0801e356 <_calloc_r>:
 801e356:	b513      	push	{r0, r1, r4, lr}
 801e358:	434a      	muls	r2, r1
 801e35a:	4611      	mov	r1, r2
 801e35c:	9201      	str	r2, [sp, #4]
 801e35e:	f7fb fea5 	bl	801a0ac <_malloc_r>
 801e362:	4604      	mov	r4, r0
 801e364:	b118      	cbz	r0, 801e36e <_calloc_r+0x18>
 801e366:	9a01      	ldr	r2, [sp, #4]
 801e368:	2100      	movs	r1, #0
 801e36a:	f7fb fe47 	bl	8019ffc <memset>
 801e36e:	4620      	mov	r0, r4
 801e370:	b002      	add	sp, #8
 801e372:	bd10      	pop	{r4, pc}

0801e374 <_realloc_r>:
 801e374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e376:	4607      	mov	r7, r0
 801e378:	4614      	mov	r4, r2
 801e37a:	460e      	mov	r6, r1
 801e37c:	b921      	cbnz	r1, 801e388 <_realloc_r+0x14>
 801e37e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e382:	4611      	mov	r1, r2
 801e384:	f7fb be92 	b.w	801a0ac <_malloc_r>
 801e388:	b922      	cbnz	r2, 801e394 <_realloc_r+0x20>
 801e38a:	f7fb fe3f 	bl	801a00c <_free_r>
 801e38e:	4625      	mov	r5, r4
 801e390:	4628      	mov	r0, r5
 801e392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e394:	f000 fe9e 	bl	801f0d4 <_malloc_usable_size_r>
 801e398:	42a0      	cmp	r0, r4
 801e39a:	d20f      	bcs.n	801e3bc <_realloc_r+0x48>
 801e39c:	4621      	mov	r1, r4
 801e39e:	4638      	mov	r0, r7
 801e3a0:	f7fb fe84 	bl	801a0ac <_malloc_r>
 801e3a4:	4605      	mov	r5, r0
 801e3a6:	2800      	cmp	r0, #0
 801e3a8:	d0f2      	beq.n	801e390 <_realloc_r+0x1c>
 801e3aa:	4631      	mov	r1, r6
 801e3ac:	4622      	mov	r2, r4
 801e3ae:	f7fb fdfd 	bl	8019fac <memcpy>
 801e3b2:	4631      	mov	r1, r6
 801e3b4:	4638      	mov	r0, r7
 801e3b6:	f7fb fe29 	bl	801a00c <_free_r>
 801e3ba:	e7e9      	b.n	801e390 <_realloc_r+0x1c>
 801e3bc:	4635      	mov	r5, r6
 801e3be:	e7e7      	b.n	801e390 <_realloc_r+0x1c>

0801e3c0 <__ssputs_r>:
 801e3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3c4:	688e      	ldr	r6, [r1, #8]
 801e3c6:	429e      	cmp	r6, r3
 801e3c8:	4682      	mov	sl, r0
 801e3ca:	460c      	mov	r4, r1
 801e3cc:	4690      	mov	r8, r2
 801e3ce:	461f      	mov	r7, r3
 801e3d0:	d838      	bhi.n	801e444 <__ssputs_r+0x84>
 801e3d2:	898a      	ldrh	r2, [r1, #12]
 801e3d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e3d8:	d032      	beq.n	801e440 <__ssputs_r+0x80>
 801e3da:	6825      	ldr	r5, [r4, #0]
 801e3dc:	6909      	ldr	r1, [r1, #16]
 801e3de:	eba5 0901 	sub.w	r9, r5, r1
 801e3e2:	6965      	ldr	r5, [r4, #20]
 801e3e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e3e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e3ec:	3301      	adds	r3, #1
 801e3ee:	444b      	add	r3, r9
 801e3f0:	106d      	asrs	r5, r5, #1
 801e3f2:	429d      	cmp	r5, r3
 801e3f4:	bf38      	it	cc
 801e3f6:	461d      	movcc	r5, r3
 801e3f8:	0553      	lsls	r3, r2, #21
 801e3fa:	d531      	bpl.n	801e460 <__ssputs_r+0xa0>
 801e3fc:	4629      	mov	r1, r5
 801e3fe:	f7fb fe55 	bl	801a0ac <_malloc_r>
 801e402:	4606      	mov	r6, r0
 801e404:	b950      	cbnz	r0, 801e41c <__ssputs_r+0x5c>
 801e406:	230c      	movs	r3, #12
 801e408:	f8ca 3000 	str.w	r3, [sl]
 801e40c:	89a3      	ldrh	r3, [r4, #12]
 801e40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e412:	81a3      	strh	r3, [r4, #12]
 801e414:	f04f 30ff 	mov.w	r0, #4294967295
 801e418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e41c:	6921      	ldr	r1, [r4, #16]
 801e41e:	464a      	mov	r2, r9
 801e420:	f7fb fdc4 	bl	8019fac <memcpy>
 801e424:	89a3      	ldrh	r3, [r4, #12]
 801e426:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e42e:	81a3      	strh	r3, [r4, #12]
 801e430:	6126      	str	r6, [r4, #16]
 801e432:	6165      	str	r5, [r4, #20]
 801e434:	444e      	add	r6, r9
 801e436:	eba5 0509 	sub.w	r5, r5, r9
 801e43a:	6026      	str	r6, [r4, #0]
 801e43c:	60a5      	str	r5, [r4, #8]
 801e43e:	463e      	mov	r6, r7
 801e440:	42be      	cmp	r6, r7
 801e442:	d900      	bls.n	801e446 <__ssputs_r+0x86>
 801e444:	463e      	mov	r6, r7
 801e446:	4632      	mov	r2, r6
 801e448:	6820      	ldr	r0, [r4, #0]
 801e44a:	4641      	mov	r1, r8
 801e44c:	f7fb fdbc 	bl	8019fc8 <memmove>
 801e450:	68a3      	ldr	r3, [r4, #8]
 801e452:	6822      	ldr	r2, [r4, #0]
 801e454:	1b9b      	subs	r3, r3, r6
 801e456:	4432      	add	r2, r6
 801e458:	60a3      	str	r3, [r4, #8]
 801e45a:	6022      	str	r2, [r4, #0]
 801e45c:	2000      	movs	r0, #0
 801e45e:	e7db      	b.n	801e418 <__ssputs_r+0x58>
 801e460:	462a      	mov	r2, r5
 801e462:	f7ff ff87 	bl	801e374 <_realloc_r>
 801e466:	4606      	mov	r6, r0
 801e468:	2800      	cmp	r0, #0
 801e46a:	d1e1      	bne.n	801e430 <__ssputs_r+0x70>
 801e46c:	6921      	ldr	r1, [r4, #16]
 801e46e:	4650      	mov	r0, sl
 801e470:	f7fb fdcc 	bl	801a00c <_free_r>
 801e474:	e7c7      	b.n	801e406 <__ssputs_r+0x46>
	...

0801e478 <_svfiprintf_r>:
 801e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e47c:	4698      	mov	r8, r3
 801e47e:	898b      	ldrh	r3, [r1, #12]
 801e480:	061b      	lsls	r3, r3, #24
 801e482:	b09d      	sub	sp, #116	; 0x74
 801e484:	4607      	mov	r7, r0
 801e486:	460d      	mov	r5, r1
 801e488:	4614      	mov	r4, r2
 801e48a:	d50e      	bpl.n	801e4aa <_svfiprintf_r+0x32>
 801e48c:	690b      	ldr	r3, [r1, #16]
 801e48e:	b963      	cbnz	r3, 801e4aa <_svfiprintf_r+0x32>
 801e490:	2140      	movs	r1, #64	; 0x40
 801e492:	f7fb fe0b 	bl	801a0ac <_malloc_r>
 801e496:	6028      	str	r0, [r5, #0]
 801e498:	6128      	str	r0, [r5, #16]
 801e49a:	b920      	cbnz	r0, 801e4a6 <_svfiprintf_r+0x2e>
 801e49c:	230c      	movs	r3, #12
 801e49e:	603b      	str	r3, [r7, #0]
 801e4a0:	f04f 30ff 	mov.w	r0, #4294967295
 801e4a4:	e0d1      	b.n	801e64a <_svfiprintf_r+0x1d2>
 801e4a6:	2340      	movs	r3, #64	; 0x40
 801e4a8:	616b      	str	r3, [r5, #20]
 801e4aa:	2300      	movs	r3, #0
 801e4ac:	9309      	str	r3, [sp, #36]	; 0x24
 801e4ae:	2320      	movs	r3, #32
 801e4b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e4b4:	f8cd 800c 	str.w	r8, [sp, #12]
 801e4b8:	2330      	movs	r3, #48	; 0x30
 801e4ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e664 <_svfiprintf_r+0x1ec>
 801e4be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e4c2:	f04f 0901 	mov.w	r9, #1
 801e4c6:	4623      	mov	r3, r4
 801e4c8:	469a      	mov	sl, r3
 801e4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e4ce:	b10a      	cbz	r2, 801e4d4 <_svfiprintf_r+0x5c>
 801e4d0:	2a25      	cmp	r2, #37	; 0x25
 801e4d2:	d1f9      	bne.n	801e4c8 <_svfiprintf_r+0x50>
 801e4d4:	ebba 0b04 	subs.w	fp, sl, r4
 801e4d8:	d00b      	beq.n	801e4f2 <_svfiprintf_r+0x7a>
 801e4da:	465b      	mov	r3, fp
 801e4dc:	4622      	mov	r2, r4
 801e4de:	4629      	mov	r1, r5
 801e4e0:	4638      	mov	r0, r7
 801e4e2:	f7ff ff6d 	bl	801e3c0 <__ssputs_r>
 801e4e6:	3001      	adds	r0, #1
 801e4e8:	f000 80aa 	beq.w	801e640 <_svfiprintf_r+0x1c8>
 801e4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e4ee:	445a      	add	r2, fp
 801e4f0:	9209      	str	r2, [sp, #36]	; 0x24
 801e4f2:	f89a 3000 	ldrb.w	r3, [sl]
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	f000 80a2 	beq.w	801e640 <_svfiprintf_r+0x1c8>
 801e4fc:	2300      	movs	r3, #0
 801e4fe:	f04f 32ff 	mov.w	r2, #4294967295
 801e502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e506:	f10a 0a01 	add.w	sl, sl, #1
 801e50a:	9304      	str	r3, [sp, #16]
 801e50c:	9307      	str	r3, [sp, #28]
 801e50e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e512:	931a      	str	r3, [sp, #104]	; 0x68
 801e514:	4654      	mov	r4, sl
 801e516:	2205      	movs	r2, #5
 801e518:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e51c:	4851      	ldr	r0, [pc, #324]	; (801e664 <_svfiprintf_r+0x1ec>)
 801e51e:	f7e1 fe6f 	bl	8000200 <memchr>
 801e522:	9a04      	ldr	r2, [sp, #16]
 801e524:	b9d8      	cbnz	r0, 801e55e <_svfiprintf_r+0xe6>
 801e526:	06d0      	lsls	r0, r2, #27
 801e528:	bf44      	itt	mi
 801e52a:	2320      	movmi	r3, #32
 801e52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e530:	0711      	lsls	r1, r2, #28
 801e532:	bf44      	itt	mi
 801e534:	232b      	movmi	r3, #43	; 0x2b
 801e536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e53a:	f89a 3000 	ldrb.w	r3, [sl]
 801e53e:	2b2a      	cmp	r3, #42	; 0x2a
 801e540:	d015      	beq.n	801e56e <_svfiprintf_r+0xf6>
 801e542:	9a07      	ldr	r2, [sp, #28]
 801e544:	4654      	mov	r4, sl
 801e546:	2000      	movs	r0, #0
 801e548:	f04f 0c0a 	mov.w	ip, #10
 801e54c:	4621      	mov	r1, r4
 801e54e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e552:	3b30      	subs	r3, #48	; 0x30
 801e554:	2b09      	cmp	r3, #9
 801e556:	d94e      	bls.n	801e5f6 <_svfiprintf_r+0x17e>
 801e558:	b1b0      	cbz	r0, 801e588 <_svfiprintf_r+0x110>
 801e55a:	9207      	str	r2, [sp, #28]
 801e55c:	e014      	b.n	801e588 <_svfiprintf_r+0x110>
 801e55e:	eba0 0308 	sub.w	r3, r0, r8
 801e562:	fa09 f303 	lsl.w	r3, r9, r3
 801e566:	4313      	orrs	r3, r2
 801e568:	9304      	str	r3, [sp, #16]
 801e56a:	46a2      	mov	sl, r4
 801e56c:	e7d2      	b.n	801e514 <_svfiprintf_r+0x9c>
 801e56e:	9b03      	ldr	r3, [sp, #12]
 801e570:	1d19      	adds	r1, r3, #4
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	9103      	str	r1, [sp, #12]
 801e576:	2b00      	cmp	r3, #0
 801e578:	bfbb      	ittet	lt
 801e57a:	425b      	neglt	r3, r3
 801e57c:	f042 0202 	orrlt.w	r2, r2, #2
 801e580:	9307      	strge	r3, [sp, #28]
 801e582:	9307      	strlt	r3, [sp, #28]
 801e584:	bfb8      	it	lt
 801e586:	9204      	strlt	r2, [sp, #16]
 801e588:	7823      	ldrb	r3, [r4, #0]
 801e58a:	2b2e      	cmp	r3, #46	; 0x2e
 801e58c:	d10c      	bne.n	801e5a8 <_svfiprintf_r+0x130>
 801e58e:	7863      	ldrb	r3, [r4, #1]
 801e590:	2b2a      	cmp	r3, #42	; 0x2a
 801e592:	d135      	bne.n	801e600 <_svfiprintf_r+0x188>
 801e594:	9b03      	ldr	r3, [sp, #12]
 801e596:	1d1a      	adds	r2, r3, #4
 801e598:	681b      	ldr	r3, [r3, #0]
 801e59a:	9203      	str	r2, [sp, #12]
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	bfb8      	it	lt
 801e5a0:	f04f 33ff 	movlt.w	r3, #4294967295
 801e5a4:	3402      	adds	r4, #2
 801e5a6:	9305      	str	r3, [sp, #20]
 801e5a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e674 <_svfiprintf_r+0x1fc>
 801e5ac:	7821      	ldrb	r1, [r4, #0]
 801e5ae:	2203      	movs	r2, #3
 801e5b0:	4650      	mov	r0, sl
 801e5b2:	f7e1 fe25 	bl	8000200 <memchr>
 801e5b6:	b140      	cbz	r0, 801e5ca <_svfiprintf_r+0x152>
 801e5b8:	2340      	movs	r3, #64	; 0x40
 801e5ba:	eba0 000a 	sub.w	r0, r0, sl
 801e5be:	fa03 f000 	lsl.w	r0, r3, r0
 801e5c2:	9b04      	ldr	r3, [sp, #16]
 801e5c4:	4303      	orrs	r3, r0
 801e5c6:	3401      	adds	r4, #1
 801e5c8:	9304      	str	r3, [sp, #16]
 801e5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5ce:	4826      	ldr	r0, [pc, #152]	; (801e668 <_svfiprintf_r+0x1f0>)
 801e5d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e5d4:	2206      	movs	r2, #6
 801e5d6:	f7e1 fe13 	bl	8000200 <memchr>
 801e5da:	2800      	cmp	r0, #0
 801e5dc:	d038      	beq.n	801e650 <_svfiprintf_r+0x1d8>
 801e5de:	4b23      	ldr	r3, [pc, #140]	; (801e66c <_svfiprintf_r+0x1f4>)
 801e5e0:	bb1b      	cbnz	r3, 801e62a <_svfiprintf_r+0x1b2>
 801e5e2:	9b03      	ldr	r3, [sp, #12]
 801e5e4:	3307      	adds	r3, #7
 801e5e6:	f023 0307 	bic.w	r3, r3, #7
 801e5ea:	3308      	adds	r3, #8
 801e5ec:	9303      	str	r3, [sp, #12]
 801e5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5f0:	4433      	add	r3, r6
 801e5f2:	9309      	str	r3, [sp, #36]	; 0x24
 801e5f4:	e767      	b.n	801e4c6 <_svfiprintf_r+0x4e>
 801e5f6:	fb0c 3202 	mla	r2, ip, r2, r3
 801e5fa:	460c      	mov	r4, r1
 801e5fc:	2001      	movs	r0, #1
 801e5fe:	e7a5      	b.n	801e54c <_svfiprintf_r+0xd4>
 801e600:	2300      	movs	r3, #0
 801e602:	3401      	adds	r4, #1
 801e604:	9305      	str	r3, [sp, #20]
 801e606:	4619      	mov	r1, r3
 801e608:	f04f 0c0a 	mov.w	ip, #10
 801e60c:	4620      	mov	r0, r4
 801e60e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e612:	3a30      	subs	r2, #48	; 0x30
 801e614:	2a09      	cmp	r2, #9
 801e616:	d903      	bls.n	801e620 <_svfiprintf_r+0x1a8>
 801e618:	2b00      	cmp	r3, #0
 801e61a:	d0c5      	beq.n	801e5a8 <_svfiprintf_r+0x130>
 801e61c:	9105      	str	r1, [sp, #20]
 801e61e:	e7c3      	b.n	801e5a8 <_svfiprintf_r+0x130>
 801e620:	fb0c 2101 	mla	r1, ip, r1, r2
 801e624:	4604      	mov	r4, r0
 801e626:	2301      	movs	r3, #1
 801e628:	e7f0      	b.n	801e60c <_svfiprintf_r+0x194>
 801e62a:	ab03      	add	r3, sp, #12
 801e62c:	9300      	str	r3, [sp, #0]
 801e62e:	462a      	mov	r2, r5
 801e630:	4b0f      	ldr	r3, [pc, #60]	; (801e670 <_svfiprintf_r+0x1f8>)
 801e632:	a904      	add	r1, sp, #16
 801e634:	4638      	mov	r0, r7
 801e636:	f7fb fe33 	bl	801a2a0 <_printf_float>
 801e63a:	1c42      	adds	r2, r0, #1
 801e63c:	4606      	mov	r6, r0
 801e63e:	d1d6      	bne.n	801e5ee <_svfiprintf_r+0x176>
 801e640:	89ab      	ldrh	r3, [r5, #12]
 801e642:	065b      	lsls	r3, r3, #25
 801e644:	f53f af2c 	bmi.w	801e4a0 <_svfiprintf_r+0x28>
 801e648:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e64a:	b01d      	add	sp, #116	; 0x74
 801e64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e650:	ab03      	add	r3, sp, #12
 801e652:	9300      	str	r3, [sp, #0]
 801e654:	462a      	mov	r2, r5
 801e656:	4b06      	ldr	r3, [pc, #24]	; (801e670 <_svfiprintf_r+0x1f8>)
 801e658:	a904      	add	r1, sp, #16
 801e65a:	4638      	mov	r0, r7
 801e65c:	f7fc f8c4 	bl	801a7e8 <_printf_i>
 801e660:	e7eb      	b.n	801e63a <_svfiprintf_r+0x1c2>
 801e662:	bf00      	nop
 801e664:	0802143c 	.word	0x0802143c
 801e668:	08021446 	.word	0x08021446
 801e66c:	0801a2a1 	.word	0x0801a2a1
 801e670:	0801e3c1 	.word	0x0801e3c1
 801e674:	08021442 	.word	0x08021442

0801e678 <_sungetc_r>:
 801e678:	b538      	push	{r3, r4, r5, lr}
 801e67a:	1c4b      	adds	r3, r1, #1
 801e67c:	4614      	mov	r4, r2
 801e67e:	d103      	bne.n	801e688 <_sungetc_r+0x10>
 801e680:	f04f 35ff 	mov.w	r5, #4294967295
 801e684:	4628      	mov	r0, r5
 801e686:	bd38      	pop	{r3, r4, r5, pc}
 801e688:	8993      	ldrh	r3, [r2, #12]
 801e68a:	f023 0320 	bic.w	r3, r3, #32
 801e68e:	8193      	strh	r3, [r2, #12]
 801e690:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e692:	6852      	ldr	r2, [r2, #4]
 801e694:	b2cd      	uxtb	r5, r1
 801e696:	b18b      	cbz	r3, 801e6bc <_sungetc_r+0x44>
 801e698:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e69a:	4293      	cmp	r3, r2
 801e69c:	dd08      	ble.n	801e6b0 <_sungetc_r+0x38>
 801e69e:	6823      	ldr	r3, [r4, #0]
 801e6a0:	1e5a      	subs	r2, r3, #1
 801e6a2:	6022      	str	r2, [r4, #0]
 801e6a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e6a8:	6863      	ldr	r3, [r4, #4]
 801e6aa:	3301      	adds	r3, #1
 801e6ac:	6063      	str	r3, [r4, #4]
 801e6ae:	e7e9      	b.n	801e684 <_sungetc_r+0xc>
 801e6b0:	4621      	mov	r1, r4
 801e6b2:	f000 fca5 	bl	801f000 <__submore>
 801e6b6:	2800      	cmp	r0, #0
 801e6b8:	d0f1      	beq.n	801e69e <_sungetc_r+0x26>
 801e6ba:	e7e1      	b.n	801e680 <_sungetc_r+0x8>
 801e6bc:	6921      	ldr	r1, [r4, #16]
 801e6be:	6823      	ldr	r3, [r4, #0]
 801e6c0:	b151      	cbz	r1, 801e6d8 <_sungetc_r+0x60>
 801e6c2:	4299      	cmp	r1, r3
 801e6c4:	d208      	bcs.n	801e6d8 <_sungetc_r+0x60>
 801e6c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e6ca:	42a9      	cmp	r1, r5
 801e6cc:	d104      	bne.n	801e6d8 <_sungetc_r+0x60>
 801e6ce:	3b01      	subs	r3, #1
 801e6d0:	3201      	adds	r2, #1
 801e6d2:	6023      	str	r3, [r4, #0]
 801e6d4:	6062      	str	r2, [r4, #4]
 801e6d6:	e7d5      	b.n	801e684 <_sungetc_r+0xc>
 801e6d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e6e0:	6363      	str	r3, [r4, #52]	; 0x34
 801e6e2:	2303      	movs	r3, #3
 801e6e4:	63a3      	str	r3, [r4, #56]	; 0x38
 801e6e6:	4623      	mov	r3, r4
 801e6e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e6ec:	6023      	str	r3, [r4, #0]
 801e6ee:	2301      	movs	r3, #1
 801e6f0:	e7dc      	b.n	801e6ac <_sungetc_r+0x34>

0801e6f2 <__ssrefill_r>:
 801e6f2:	b510      	push	{r4, lr}
 801e6f4:	460c      	mov	r4, r1
 801e6f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e6f8:	b169      	cbz	r1, 801e716 <__ssrefill_r+0x24>
 801e6fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e6fe:	4299      	cmp	r1, r3
 801e700:	d001      	beq.n	801e706 <__ssrefill_r+0x14>
 801e702:	f7fb fc83 	bl	801a00c <_free_r>
 801e706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e708:	6063      	str	r3, [r4, #4]
 801e70a:	2000      	movs	r0, #0
 801e70c:	6360      	str	r0, [r4, #52]	; 0x34
 801e70e:	b113      	cbz	r3, 801e716 <__ssrefill_r+0x24>
 801e710:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e712:	6023      	str	r3, [r4, #0]
 801e714:	bd10      	pop	{r4, pc}
 801e716:	6923      	ldr	r3, [r4, #16]
 801e718:	6023      	str	r3, [r4, #0]
 801e71a:	2300      	movs	r3, #0
 801e71c:	6063      	str	r3, [r4, #4]
 801e71e:	89a3      	ldrh	r3, [r4, #12]
 801e720:	f043 0320 	orr.w	r3, r3, #32
 801e724:	81a3      	strh	r3, [r4, #12]
 801e726:	f04f 30ff 	mov.w	r0, #4294967295
 801e72a:	e7f3      	b.n	801e714 <__ssrefill_r+0x22>

0801e72c <__ssvfiscanf_r>:
 801e72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e730:	460c      	mov	r4, r1
 801e732:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801e736:	2100      	movs	r1, #0
 801e738:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801e73c:	49b2      	ldr	r1, [pc, #712]	; (801ea08 <__ssvfiscanf_r+0x2dc>)
 801e73e:	91a0      	str	r1, [sp, #640]	; 0x280
 801e740:	f10d 0804 	add.w	r8, sp, #4
 801e744:	49b1      	ldr	r1, [pc, #708]	; (801ea0c <__ssvfiscanf_r+0x2e0>)
 801e746:	4fb2      	ldr	r7, [pc, #712]	; (801ea10 <__ssvfiscanf_r+0x2e4>)
 801e748:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801ea14 <__ssvfiscanf_r+0x2e8>
 801e74c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e750:	4606      	mov	r6, r0
 801e752:	91a1      	str	r1, [sp, #644]	; 0x284
 801e754:	9300      	str	r3, [sp, #0]
 801e756:	f892 a000 	ldrb.w	sl, [r2]
 801e75a:	f1ba 0f00 	cmp.w	sl, #0
 801e75e:	f000 8151 	beq.w	801ea04 <__ssvfiscanf_r+0x2d8>
 801e762:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801e766:	f013 0308 	ands.w	r3, r3, #8
 801e76a:	f102 0501 	add.w	r5, r2, #1
 801e76e:	d019      	beq.n	801e7a4 <__ssvfiscanf_r+0x78>
 801e770:	6863      	ldr	r3, [r4, #4]
 801e772:	2b00      	cmp	r3, #0
 801e774:	dd0f      	ble.n	801e796 <__ssvfiscanf_r+0x6a>
 801e776:	6823      	ldr	r3, [r4, #0]
 801e778:	781a      	ldrb	r2, [r3, #0]
 801e77a:	5cba      	ldrb	r2, [r7, r2]
 801e77c:	0712      	lsls	r2, r2, #28
 801e77e:	d401      	bmi.n	801e784 <__ssvfiscanf_r+0x58>
 801e780:	462a      	mov	r2, r5
 801e782:	e7e8      	b.n	801e756 <__ssvfiscanf_r+0x2a>
 801e784:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e786:	3201      	adds	r2, #1
 801e788:	9245      	str	r2, [sp, #276]	; 0x114
 801e78a:	6862      	ldr	r2, [r4, #4]
 801e78c:	3301      	adds	r3, #1
 801e78e:	3a01      	subs	r2, #1
 801e790:	6062      	str	r2, [r4, #4]
 801e792:	6023      	str	r3, [r4, #0]
 801e794:	e7ec      	b.n	801e770 <__ssvfiscanf_r+0x44>
 801e796:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e798:	4621      	mov	r1, r4
 801e79a:	4630      	mov	r0, r6
 801e79c:	4798      	blx	r3
 801e79e:	2800      	cmp	r0, #0
 801e7a0:	d0e9      	beq.n	801e776 <__ssvfiscanf_r+0x4a>
 801e7a2:	e7ed      	b.n	801e780 <__ssvfiscanf_r+0x54>
 801e7a4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801e7a8:	f040 8083 	bne.w	801e8b2 <__ssvfiscanf_r+0x186>
 801e7ac:	9341      	str	r3, [sp, #260]	; 0x104
 801e7ae:	9343      	str	r3, [sp, #268]	; 0x10c
 801e7b0:	7853      	ldrb	r3, [r2, #1]
 801e7b2:	2b2a      	cmp	r3, #42	; 0x2a
 801e7b4:	bf02      	ittt	eq
 801e7b6:	2310      	moveq	r3, #16
 801e7b8:	1c95      	addeq	r5, r2, #2
 801e7ba:	9341      	streq	r3, [sp, #260]	; 0x104
 801e7bc:	220a      	movs	r2, #10
 801e7be:	46ab      	mov	fp, r5
 801e7c0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801e7c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801e7c8:	2b09      	cmp	r3, #9
 801e7ca:	d91d      	bls.n	801e808 <__ssvfiscanf_r+0xdc>
 801e7cc:	4891      	ldr	r0, [pc, #580]	; (801ea14 <__ssvfiscanf_r+0x2e8>)
 801e7ce:	2203      	movs	r2, #3
 801e7d0:	f7e1 fd16 	bl	8000200 <memchr>
 801e7d4:	b140      	cbz	r0, 801e7e8 <__ssvfiscanf_r+0xbc>
 801e7d6:	2301      	movs	r3, #1
 801e7d8:	eba0 0009 	sub.w	r0, r0, r9
 801e7dc:	fa03 f000 	lsl.w	r0, r3, r0
 801e7e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e7e2:	4318      	orrs	r0, r3
 801e7e4:	9041      	str	r0, [sp, #260]	; 0x104
 801e7e6:	465d      	mov	r5, fp
 801e7e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e7ec:	2b78      	cmp	r3, #120	; 0x78
 801e7ee:	d806      	bhi.n	801e7fe <__ssvfiscanf_r+0xd2>
 801e7f0:	2b57      	cmp	r3, #87	; 0x57
 801e7f2:	d810      	bhi.n	801e816 <__ssvfiscanf_r+0xea>
 801e7f4:	2b25      	cmp	r3, #37	; 0x25
 801e7f6:	d05c      	beq.n	801e8b2 <__ssvfiscanf_r+0x186>
 801e7f8:	d856      	bhi.n	801e8a8 <__ssvfiscanf_r+0x17c>
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d074      	beq.n	801e8e8 <__ssvfiscanf_r+0x1bc>
 801e7fe:	2303      	movs	r3, #3
 801e800:	9347      	str	r3, [sp, #284]	; 0x11c
 801e802:	230a      	movs	r3, #10
 801e804:	9342      	str	r3, [sp, #264]	; 0x108
 801e806:	e081      	b.n	801e90c <__ssvfiscanf_r+0x1e0>
 801e808:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e80a:	fb02 1303 	mla	r3, r2, r3, r1
 801e80e:	3b30      	subs	r3, #48	; 0x30
 801e810:	9343      	str	r3, [sp, #268]	; 0x10c
 801e812:	465d      	mov	r5, fp
 801e814:	e7d3      	b.n	801e7be <__ssvfiscanf_r+0x92>
 801e816:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e81a:	2a20      	cmp	r2, #32
 801e81c:	d8ef      	bhi.n	801e7fe <__ssvfiscanf_r+0xd2>
 801e81e:	a101      	add	r1, pc, #4	; (adr r1, 801e824 <__ssvfiscanf_r+0xf8>)
 801e820:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e824:	0801e8f7 	.word	0x0801e8f7
 801e828:	0801e7ff 	.word	0x0801e7ff
 801e82c:	0801e7ff 	.word	0x0801e7ff
 801e830:	0801e955 	.word	0x0801e955
 801e834:	0801e7ff 	.word	0x0801e7ff
 801e838:	0801e7ff 	.word	0x0801e7ff
 801e83c:	0801e7ff 	.word	0x0801e7ff
 801e840:	0801e7ff 	.word	0x0801e7ff
 801e844:	0801e7ff 	.word	0x0801e7ff
 801e848:	0801e7ff 	.word	0x0801e7ff
 801e84c:	0801e7ff 	.word	0x0801e7ff
 801e850:	0801e96b 	.word	0x0801e96b
 801e854:	0801e941 	.word	0x0801e941
 801e858:	0801e8af 	.word	0x0801e8af
 801e85c:	0801e8af 	.word	0x0801e8af
 801e860:	0801e8af 	.word	0x0801e8af
 801e864:	0801e7ff 	.word	0x0801e7ff
 801e868:	0801e945 	.word	0x0801e945
 801e86c:	0801e7ff 	.word	0x0801e7ff
 801e870:	0801e7ff 	.word	0x0801e7ff
 801e874:	0801e7ff 	.word	0x0801e7ff
 801e878:	0801e7ff 	.word	0x0801e7ff
 801e87c:	0801e97b 	.word	0x0801e97b
 801e880:	0801e94d 	.word	0x0801e94d
 801e884:	0801e8ef 	.word	0x0801e8ef
 801e888:	0801e7ff 	.word	0x0801e7ff
 801e88c:	0801e7ff 	.word	0x0801e7ff
 801e890:	0801e977 	.word	0x0801e977
 801e894:	0801e7ff 	.word	0x0801e7ff
 801e898:	0801e941 	.word	0x0801e941
 801e89c:	0801e7ff 	.word	0x0801e7ff
 801e8a0:	0801e7ff 	.word	0x0801e7ff
 801e8a4:	0801e8f7 	.word	0x0801e8f7
 801e8a8:	3b45      	subs	r3, #69	; 0x45
 801e8aa:	2b02      	cmp	r3, #2
 801e8ac:	d8a7      	bhi.n	801e7fe <__ssvfiscanf_r+0xd2>
 801e8ae:	2305      	movs	r3, #5
 801e8b0:	e02b      	b.n	801e90a <__ssvfiscanf_r+0x1de>
 801e8b2:	6863      	ldr	r3, [r4, #4]
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	dd0d      	ble.n	801e8d4 <__ssvfiscanf_r+0x1a8>
 801e8b8:	6823      	ldr	r3, [r4, #0]
 801e8ba:	781a      	ldrb	r2, [r3, #0]
 801e8bc:	4552      	cmp	r2, sl
 801e8be:	f040 80a1 	bne.w	801ea04 <__ssvfiscanf_r+0x2d8>
 801e8c2:	3301      	adds	r3, #1
 801e8c4:	6862      	ldr	r2, [r4, #4]
 801e8c6:	6023      	str	r3, [r4, #0]
 801e8c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e8ca:	3a01      	subs	r2, #1
 801e8cc:	3301      	adds	r3, #1
 801e8ce:	6062      	str	r2, [r4, #4]
 801e8d0:	9345      	str	r3, [sp, #276]	; 0x114
 801e8d2:	e755      	b.n	801e780 <__ssvfiscanf_r+0x54>
 801e8d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e8d6:	4621      	mov	r1, r4
 801e8d8:	4630      	mov	r0, r6
 801e8da:	4798      	blx	r3
 801e8dc:	2800      	cmp	r0, #0
 801e8de:	d0eb      	beq.n	801e8b8 <__ssvfiscanf_r+0x18c>
 801e8e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e8e2:	2800      	cmp	r0, #0
 801e8e4:	f040 8084 	bne.w	801e9f0 <__ssvfiscanf_r+0x2c4>
 801e8e8:	f04f 30ff 	mov.w	r0, #4294967295
 801e8ec:	e086      	b.n	801e9fc <__ssvfiscanf_r+0x2d0>
 801e8ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e8f0:	f042 0220 	orr.w	r2, r2, #32
 801e8f4:	9241      	str	r2, [sp, #260]	; 0x104
 801e8f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e8f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e8fc:	9241      	str	r2, [sp, #260]	; 0x104
 801e8fe:	2210      	movs	r2, #16
 801e900:	2b6f      	cmp	r3, #111	; 0x6f
 801e902:	9242      	str	r2, [sp, #264]	; 0x108
 801e904:	bf34      	ite	cc
 801e906:	2303      	movcc	r3, #3
 801e908:	2304      	movcs	r3, #4
 801e90a:	9347      	str	r3, [sp, #284]	; 0x11c
 801e90c:	6863      	ldr	r3, [r4, #4]
 801e90e:	2b00      	cmp	r3, #0
 801e910:	dd41      	ble.n	801e996 <__ssvfiscanf_r+0x26a>
 801e912:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e914:	0659      	lsls	r1, r3, #25
 801e916:	d404      	bmi.n	801e922 <__ssvfiscanf_r+0x1f6>
 801e918:	6823      	ldr	r3, [r4, #0]
 801e91a:	781a      	ldrb	r2, [r3, #0]
 801e91c:	5cba      	ldrb	r2, [r7, r2]
 801e91e:	0712      	lsls	r2, r2, #28
 801e920:	d440      	bmi.n	801e9a4 <__ssvfiscanf_r+0x278>
 801e922:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e924:	2b02      	cmp	r3, #2
 801e926:	dc4f      	bgt.n	801e9c8 <__ssvfiscanf_r+0x29c>
 801e928:	466b      	mov	r3, sp
 801e92a:	4622      	mov	r2, r4
 801e92c:	a941      	add	r1, sp, #260	; 0x104
 801e92e:	4630      	mov	r0, r6
 801e930:	f000 f9ce 	bl	801ecd0 <_scanf_chars>
 801e934:	2801      	cmp	r0, #1
 801e936:	d065      	beq.n	801ea04 <__ssvfiscanf_r+0x2d8>
 801e938:	2802      	cmp	r0, #2
 801e93a:	f47f af21 	bne.w	801e780 <__ssvfiscanf_r+0x54>
 801e93e:	e7cf      	b.n	801e8e0 <__ssvfiscanf_r+0x1b4>
 801e940:	220a      	movs	r2, #10
 801e942:	e7dd      	b.n	801e900 <__ssvfiscanf_r+0x1d4>
 801e944:	2300      	movs	r3, #0
 801e946:	9342      	str	r3, [sp, #264]	; 0x108
 801e948:	2303      	movs	r3, #3
 801e94a:	e7de      	b.n	801e90a <__ssvfiscanf_r+0x1de>
 801e94c:	2308      	movs	r3, #8
 801e94e:	9342      	str	r3, [sp, #264]	; 0x108
 801e950:	2304      	movs	r3, #4
 801e952:	e7da      	b.n	801e90a <__ssvfiscanf_r+0x1de>
 801e954:	4629      	mov	r1, r5
 801e956:	4640      	mov	r0, r8
 801e958:	f000 fb18 	bl	801ef8c <__sccl>
 801e95c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e95e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e962:	9341      	str	r3, [sp, #260]	; 0x104
 801e964:	4605      	mov	r5, r0
 801e966:	2301      	movs	r3, #1
 801e968:	e7cf      	b.n	801e90a <__ssvfiscanf_r+0x1de>
 801e96a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e970:	9341      	str	r3, [sp, #260]	; 0x104
 801e972:	2300      	movs	r3, #0
 801e974:	e7c9      	b.n	801e90a <__ssvfiscanf_r+0x1de>
 801e976:	2302      	movs	r3, #2
 801e978:	e7c7      	b.n	801e90a <__ssvfiscanf_r+0x1de>
 801e97a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e97c:	06c3      	lsls	r3, r0, #27
 801e97e:	f53f aeff 	bmi.w	801e780 <__ssvfiscanf_r+0x54>
 801e982:	9b00      	ldr	r3, [sp, #0]
 801e984:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e986:	1d19      	adds	r1, r3, #4
 801e988:	9100      	str	r1, [sp, #0]
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	07c0      	lsls	r0, r0, #31
 801e98e:	bf4c      	ite	mi
 801e990:	801a      	strhmi	r2, [r3, #0]
 801e992:	601a      	strpl	r2, [r3, #0]
 801e994:	e6f4      	b.n	801e780 <__ssvfiscanf_r+0x54>
 801e996:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e998:	4621      	mov	r1, r4
 801e99a:	4630      	mov	r0, r6
 801e99c:	4798      	blx	r3
 801e99e:	2800      	cmp	r0, #0
 801e9a0:	d0b7      	beq.n	801e912 <__ssvfiscanf_r+0x1e6>
 801e9a2:	e79d      	b.n	801e8e0 <__ssvfiscanf_r+0x1b4>
 801e9a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e9a6:	3201      	adds	r2, #1
 801e9a8:	9245      	str	r2, [sp, #276]	; 0x114
 801e9aa:	6862      	ldr	r2, [r4, #4]
 801e9ac:	3a01      	subs	r2, #1
 801e9ae:	2a00      	cmp	r2, #0
 801e9b0:	6062      	str	r2, [r4, #4]
 801e9b2:	dd02      	ble.n	801e9ba <__ssvfiscanf_r+0x28e>
 801e9b4:	3301      	adds	r3, #1
 801e9b6:	6023      	str	r3, [r4, #0]
 801e9b8:	e7ae      	b.n	801e918 <__ssvfiscanf_r+0x1ec>
 801e9ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e9bc:	4621      	mov	r1, r4
 801e9be:	4630      	mov	r0, r6
 801e9c0:	4798      	blx	r3
 801e9c2:	2800      	cmp	r0, #0
 801e9c4:	d0a8      	beq.n	801e918 <__ssvfiscanf_r+0x1ec>
 801e9c6:	e78b      	b.n	801e8e0 <__ssvfiscanf_r+0x1b4>
 801e9c8:	2b04      	cmp	r3, #4
 801e9ca:	dc06      	bgt.n	801e9da <__ssvfiscanf_r+0x2ae>
 801e9cc:	466b      	mov	r3, sp
 801e9ce:	4622      	mov	r2, r4
 801e9d0:	a941      	add	r1, sp, #260	; 0x104
 801e9d2:	4630      	mov	r0, r6
 801e9d4:	f000 f9d4 	bl	801ed80 <_scanf_i>
 801e9d8:	e7ac      	b.n	801e934 <__ssvfiscanf_r+0x208>
 801e9da:	4b0f      	ldr	r3, [pc, #60]	; (801ea18 <__ssvfiscanf_r+0x2ec>)
 801e9dc:	2b00      	cmp	r3, #0
 801e9de:	f43f aecf 	beq.w	801e780 <__ssvfiscanf_r+0x54>
 801e9e2:	466b      	mov	r3, sp
 801e9e4:	4622      	mov	r2, r4
 801e9e6:	a941      	add	r1, sp, #260	; 0x104
 801e9e8:	4630      	mov	r0, r6
 801e9ea:	f7fc f823 	bl	801aa34 <_scanf_float>
 801e9ee:	e7a1      	b.n	801e934 <__ssvfiscanf_r+0x208>
 801e9f0:	89a3      	ldrh	r3, [r4, #12]
 801e9f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e9f6:	bf18      	it	ne
 801e9f8:	f04f 30ff 	movne.w	r0, #4294967295
 801e9fc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801ea00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea04:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ea06:	e7f9      	b.n	801e9fc <__ssvfiscanf_r+0x2d0>
 801ea08:	0801e679 	.word	0x0801e679
 801ea0c:	0801e6f3 	.word	0x0801e6f3
 801ea10:	08020fa1 	.word	0x08020fa1
 801ea14:	08021442 	.word	0x08021442
 801ea18:	0801aa35 	.word	0x0801aa35

0801ea1c <__sfputc_r>:
 801ea1c:	6893      	ldr	r3, [r2, #8]
 801ea1e:	3b01      	subs	r3, #1
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	b410      	push	{r4}
 801ea24:	6093      	str	r3, [r2, #8]
 801ea26:	da08      	bge.n	801ea3a <__sfputc_r+0x1e>
 801ea28:	6994      	ldr	r4, [r2, #24]
 801ea2a:	42a3      	cmp	r3, r4
 801ea2c:	db01      	blt.n	801ea32 <__sfputc_r+0x16>
 801ea2e:	290a      	cmp	r1, #10
 801ea30:	d103      	bne.n	801ea3a <__sfputc_r+0x1e>
 801ea32:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ea36:	f7fd bb7f 	b.w	801c138 <__swbuf_r>
 801ea3a:	6813      	ldr	r3, [r2, #0]
 801ea3c:	1c58      	adds	r0, r3, #1
 801ea3e:	6010      	str	r0, [r2, #0]
 801ea40:	7019      	strb	r1, [r3, #0]
 801ea42:	4608      	mov	r0, r1
 801ea44:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ea48:	4770      	bx	lr

0801ea4a <__sfputs_r>:
 801ea4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea4c:	4606      	mov	r6, r0
 801ea4e:	460f      	mov	r7, r1
 801ea50:	4614      	mov	r4, r2
 801ea52:	18d5      	adds	r5, r2, r3
 801ea54:	42ac      	cmp	r4, r5
 801ea56:	d101      	bne.n	801ea5c <__sfputs_r+0x12>
 801ea58:	2000      	movs	r0, #0
 801ea5a:	e007      	b.n	801ea6c <__sfputs_r+0x22>
 801ea5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea60:	463a      	mov	r2, r7
 801ea62:	4630      	mov	r0, r6
 801ea64:	f7ff ffda 	bl	801ea1c <__sfputc_r>
 801ea68:	1c43      	adds	r3, r0, #1
 801ea6a:	d1f3      	bne.n	801ea54 <__sfputs_r+0xa>
 801ea6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ea70 <_vfiprintf_r>:
 801ea70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea74:	460d      	mov	r5, r1
 801ea76:	b09d      	sub	sp, #116	; 0x74
 801ea78:	4614      	mov	r4, r2
 801ea7a:	4698      	mov	r8, r3
 801ea7c:	4606      	mov	r6, r0
 801ea7e:	b118      	cbz	r0, 801ea88 <_vfiprintf_r+0x18>
 801ea80:	6983      	ldr	r3, [r0, #24]
 801ea82:	b90b      	cbnz	r3, 801ea88 <_vfiprintf_r+0x18>
 801ea84:	f7fb f9c4 	bl	8019e10 <__sinit>
 801ea88:	4b89      	ldr	r3, [pc, #548]	; (801ecb0 <_vfiprintf_r+0x240>)
 801ea8a:	429d      	cmp	r5, r3
 801ea8c:	d11b      	bne.n	801eac6 <_vfiprintf_r+0x56>
 801ea8e:	6875      	ldr	r5, [r6, #4]
 801ea90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ea92:	07d9      	lsls	r1, r3, #31
 801ea94:	d405      	bmi.n	801eaa2 <_vfiprintf_r+0x32>
 801ea96:	89ab      	ldrh	r3, [r5, #12]
 801ea98:	059a      	lsls	r2, r3, #22
 801ea9a:	d402      	bmi.n	801eaa2 <_vfiprintf_r+0x32>
 801ea9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ea9e:	f7fb fa7a 	bl	8019f96 <__retarget_lock_acquire_recursive>
 801eaa2:	89ab      	ldrh	r3, [r5, #12]
 801eaa4:	071b      	lsls	r3, r3, #28
 801eaa6:	d501      	bpl.n	801eaac <_vfiprintf_r+0x3c>
 801eaa8:	692b      	ldr	r3, [r5, #16]
 801eaaa:	b9eb      	cbnz	r3, 801eae8 <_vfiprintf_r+0x78>
 801eaac:	4629      	mov	r1, r5
 801eaae:	4630      	mov	r0, r6
 801eab0:	f7fd fba6 	bl	801c200 <__swsetup_r>
 801eab4:	b1c0      	cbz	r0, 801eae8 <_vfiprintf_r+0x78>
 801eab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eab8:	07dc      	lsls	r4, r3, #31
 801eaba:	d50e      	bpl.n	801eada <_vfiprintf_r+0x6a>
 801eabc:	f04f 30ff 	mov.w	r0, #4294967295
 801eac0:	b01d      	add	sp, #116	; 0x74
 801eac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eac6:	4b7b      	ldr	r3, [pc, #492]	; (801ecb4 <_vfiprintf_r+0x244>)
 801eac8:	429d      	cmp	r5, r3
 801eaca:	d101      	bne.n	801ead0 <_vfiprintf_r+0x60>
 801eacc:	68b5      	ldr	r5, [r6, #8]
 801eace:	e7df      	b.n	801ea90 <_vfiprintf_r+0x20>
 801ead0:	4b79      	ldr	r3, [pc, #484]	; (801ecb8 <_vfiprintf_r+0x248>)
 801ead2:	429d      	cmp	r5, r3
 801ead4:	bf08      	it	eq
 801ead6:	68f5      	ldreq	r5, [r6, #12]
 801ead8:	e7da      	b.n	801ea90 <_vfiprintf_r+0x20>
 801eada:	89ab      	ldrh	r3, [r5, #12]
 801eadc:	0598      	lsls	r0, r3, #22
 801eade:	d4ed      	bmi.n	801eabc <_vfiprintf_r+0x4c>
 801eae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eae2:	f7fb fa59 	bl	8019f98 <__retarget_lock_release_recursive>
 801eae6:	e7e9      	b.n	801eabc <_vfiprintf_r+0x4c>
 801eae8:	2300      	movs	r3, #0
 801eaea:	9309      	str	r3, [sp, #36]	; 0x24
 801eaec:	2320      	movs	r3, #32
 801eaee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801eaf2:	f8cd 800c 	str.w	r8, [sp, #12]
 801eaf6:	2330      	movs	r3, #48	; 0x30
 801eaf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ecbc <_vfiprintf_r+0x24c>
 801eafc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801eb00:	f04f 0901 	mov.w	r9, #1
 801eb04:	4623      	mov	r3, r4
 801eb06:	469a      	mov	sl, r3
 801eb08:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eb0c:	b10a      	cbz	r2, 801eb12 <_vfiprintf_r+0xa2>
 801eb0e:	2a25      	cmp	r2, #37	; 0x25
 801eb10:	d1f9      	bne.n	801eb06 <_vfiprintf_r+0x96>
 801eb12:	ebba 0b04 	subs.w	fp, sl, r4
 801eb16:	d00b      	beq.n	801eb30 <_vfiprintf_r+0xc0>
 801eb18:	465b      	mov	r3, fp
 801eb1a:	4622      	mov	r2, r4
 801eb1c:	4629      	mov	r1, r5
 801eb1e:	4630      	mov	r0, r6
 801eb20:	f7ff ff93 	bl	801ea4a <__sfputs_r>
 801eb24:	3001      	adds	r0, #1
 801eb26:	f000 80aa 	beq.w	801ec7e <_vfiprintf_r+0x20e>
 801eb2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eb2c:	445a      	add	r2, fp
 801eb2e:	9209      	str	r2, [sp, #36]	; 0x24
 801eb30:	f89a 3000 	ldrb.w	r3, [sl]
 801eb34:	2b00      	cmp	r3, #0
 801eb36:	f000 80a2 	beq.w	801ec7e <_vfiprintf_r+0x20e>
 801eb3a:	2300      	movs	r3, #0
 801eb3c:	f04f 32ff 	mov.w	r2, #4294967295
 801eb40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801eb44:	f10a 0a01 	add.w	sl, sl, #1
 801eb48:	9304      	str	r3, [sp, #16]
 801eb4a:	9307      	str	r3, [sp, #28]
 801eb4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801eb50:	931a      	str	r3, [sp, #104]	; 0x68
 801eb52:	4654      	mov	r4, sl
 801eb54:	2205      	movs	r2, #5
 801eb56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eb5a:	4858      	ldr	r0, [pc, #352]	; (801ecbc <_vfiprintf_r+0x24c>)
 801eb5c:	f7e1 fb50 	bl	8000200 <memchr>
 801eb60:	9a04      	ldr	r2, [sp, #16]
 801eb62:	b9d8      	cbnz	r0, 801eb9c <_vfiprintf_r+0x12c>
 801eb64:	06d1      	lsls	r1, r2, #27
 801eb66:	bf44      	itt	mi
 801eb68:	2320      	movmi	r3, #32
 801eb6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eb6e:	0713      	lsls	r3, r2, #28
 801eb70:	bf44      	itt	mi
 801eb72:	232b      	movmi	r3, #43	; 0x2b
 801eb74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eb78:	f89a 3000 	ldrb.w	r3, [sl]
 801eb7c:	2b2a      	cmp	r3, #42	; 0x2a
 801eb7e:	d015      	beq.n	801ebac <_vfiprintf_r+0x13c>
 801eb80:	9a07      	ldr	r2, [sp, #28]
 801eb82:	4654      	mov	r4, sl
 801eb84:	2000      	movs	r0, #0
 801eb86:	f04f 0c0a 	mov.w	ip, #10
 801eb8a:	4621      	mov	r1, r4
 801eb8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eb90:	3b30      	subs	r3, #48	; 0x30
 801eb92:	2b09      	cmp	r3, #9
 801eb94:	d94e      	bls.n	801ec34 <_vfiprintf_r+0x1c4>
 801eb96:	b1b0      	cbz	r0, 801ebc6 <_vfiprintf_r+0x156>
 801eb98:	9207      	str	r2, [sp, #28]
 801eb9a:	e014      	b.n	801ebc6 <_vfiprintf_r+0x156>
 801eb9c:	eba0 0308 	sub.w	r3, r0, r8
 801eba0:	fa09 f303 	lsl.w	r3, r9, r3
 801eba4:	4313      	orrs	r3, r2
 801eba6:	9304      	str	r3, [sp, #16]
 801eba8:	46a2      	mov	sl, r4
 801ebaa:	e7d2      	b.n	801eb52 <_vfiprintf_r+0xe2>
 801ebac:	9b03      	ldr	r3, [sp, #12]
 801ebae:	1d19      	adds	r1, r3, #4
 801ebb0:	681b      	ldr	r3, [r3, #0]
 801ebb2:	9103      	str	r1, [sp, #12]
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	bfbb      	ittet	lt
 801ebb8:	425b      	neglt	r3, r3
 801ebba:	f042 0202 	orrlt.w	r2, r2, #2
 801ebbe:	9307      	strge	r3, [sp, #28]
 801ebc0:	9307      	strlt	r3, [sp, #28]
 801ebc2:	bfb8      	it	lt
 801ebc4:	9204      	strlt	r2, [sp, #16]
 801ebc6:	7823      	ldrb	r3, [r4, #0]
 801ebc8:	2b2e      	cmp	r3, #46	; 0x2e
 801ebca:	d10c      	bne.n	801ebe6 <_vfiprintf_r+0x176>
 801ebcc:	7863      	ldrb	r3, [r4, #1]
 801ebce:	2b2a      	cmp	r3, #42	; 0x2a
 801ebd0:	d135      	bne.n	801ec3e <_vfiprintf_r+0x1ce>
 801ebd2:	9b03      	ldr	r3, [sp, #12]
 801ebd4:	1d1a      	adds	r2, r3, #4
 801ebd6:	681b      	ldr	r3, [r3, #0]
 801ebd8:	9203      	str	r2, [sp, #12]
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	bfb8      	it	lt
 801ebde:	f04f 33ff 	movlt.w	r3, #4294967295
 801ebe2:	3402      	adds	r4, #2
 801ebe4:	9305      	str	r3, [sp, #20]
 801ebe6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801eccc <_vfiprintf_r+0x25c>
 801ebea:	7821      	ldrb	r1, [r4, #0]
 801ebec:	2203      	movs	r2, #3
 801ebee:	4650      	mov	r0, sl
 801ebf0:	f7e1 fb06 	bl	8000200 <memchr>
 801ebf4:	b140      	cbz	r0, 801ec08 <_vfiprintf_r+0x198>
 801ebf6:	2340      	movs	r3, #64	; 0x40
 801ebf8:	eba0 000a 	sub.w	r0, r0, sl
 801ebfc:	fa03 f000 	lsl.w	r0, r3, r0
 801ec00:	9b04      	ldr	r3, [sp, #16]
 801ec02:	4303      	orrs	r3, r0
 801ec04:	3401      	adds	r4, #1
 801ec06:	9304      	str	r3, [sp, #16]
 801ec08:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec0c:	482c      	ldr	r0, [pc, #176]	; (801ecc0 <_vfiprintf_r+0x250>)
 801ec0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ec12:	2206      	movs	r2, #6
 801ec14:	f7e1 faf4 	bl	8000200 <memchr>
 801ec18:	2800      	cmp	r0, #0
 801ec1a:	d03f      	beq.n	801ec9c <_vfiprintf_r+0x22c>
 801ec1c:	4b29      	ldr	r3, [pc, #164]	; (801ecc4 <_vfiprintf_r+0x254>)
 801ec1e:	bb1b      	cbnz	r3, 801ec68 <_vfiprintf_r+0x1f8>
 801ec20:	9b03      	ldr	r3, [sp, #12]
 801ec22:	3307      	adds	r3, #7
 801ec24:	f023 0307 	bic.w	r3, r3, #7
 801ec28:	3308      	adds	r3, #8
 801ec2a:	9303      	str	r3, [sp, #12]
 801ec2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec2e:	443b      	add	r3, r7
 801ec30:	9309      	str	r3, [sp, #36]	; 0x24
 801ec32:	e767      	b.n	801eb04 <_vfiprintf_r+0x94>
 801ec34:	fb0c 3202 	mla	r2, ip, r2, r3
 801ec38:	460c      	mov	r4, r1
 801ec3a:	2001      	movs	r0, #1
 801ec3c:	e7a5      	b.n	801eb8a <_vfiprintf_r+0x11a>
 801ec3e:	2300      	movs	r3, #0
 801ec40:	3401      	adds	r4, #1
 801ec42:	9305      	str	r3, [sp, #20]
 801ec44:	4619      	mov	r1, r3
 801ec46:	f04f 0c0a 	mov.w	ip, #10
 801ec4a:	4620      	mov	r0, r4
 801ec4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ec50:	3a30      	subs	r2, #48	; 0x30
 801ec52:	2a09      	cmp	r2, #9
 801ec54:	d903      	bls.n	801ec5e <_vfiprintf_r+0x1ee>
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	d0c5      	beq.n	801ebe6 <_vfiprintf_r+0x176>
 801ec5a:	9105      	str	r1, [sp, #20]
 801ec5c:	e7c3      	b.n	801ebe6 <_vfiprintf_r+0x176>
 801ec5e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ec62:	4604      	mov	r4, r0
 801ec64:	2301      	movs	r3, #1
 801ec66:	e7f0      	b.n	801ec4a <_vfiprintf_r+0x1da>
 801ec68:	ab03      	add	r3, sp, #12
 801ec6a:	9300      	str	r3, [sp, #0]
 801ec6c:	462a      	mov	r2, r5
 801ec6e:	4b16      	ldr	r3, [pc, #88]	; (801ecc8 <_vfiprintf_r+0x258>)
 801ec70:	a904      	add	r1, sp, #16
 801ec72:	4630      	mov	r0, r6
 801ec74:	f7fb fb14 	bl	801a2a0 <_printf_float>
 801ec78:	4607      	mov	r7, r0
 801ec7a:	1c78      	adds	r0, r7, #1
 801ec7c:	d1d6      	bne.n	801ec2c <_vfiprintf_r+0x1bc>
 801ec7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ec80:	07d9      	lsls	r1, r3, #31
 801ec82:	d405      	bmi.n	801ec90 <_vfiprintf_r+0x220>
 801ec84:	89ab      	ldrh	r3, [r5, #12]
 801ec86:	059a      	lsls	r2, r3, #22
 801ec88:	d402      	bmi.n	801ec90 <_vfiprintf_r+0x220>
 801ec8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ec8c:	f7fb f984 	bl	8019f98 <__retarget_lock_release_recursive>
 801ec90:	89ab      	ldrh	r3, [r5, #12]
 801ec92:	065b      	lsls	r3, r3, #25
 801ec94:	f53f af12 	bmi.w	801eabc <_vfiprintf_r+0x4c>
 801ec98:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ec9a:	e711      	b.n	801eac0 <_vfiprintf_r+0x50>
 801ec9c:	ab03      	add	r3, sp, #12
 801ec9e:	9300      	str	r3, [sp, #0]
 801eca0:	462a      	mov	r2, r5
 801eca2:	4b09      	ldr	r3, [pc, #36]	; (801ecc8 <_vfiprintf_r+0x258>)
 801eca4:	a904      	add	r1, sp, #16
 801eca6:	4630      	mov	r0, r6
 801eca8:	f7fb fd9e 	bl	801a7e8 <_printf_i>
 801ecac:	e7e4      	b.n	801ec78 <_vfiprintf_r+0x208>
 801ecae:	bf00      	nop
 801ecb0:	080210c4 	.word	0x080210c4
 801ecb4:	080210e4 	.word	0x080210e4
 801ecb8:	080210a4 	.word	0x080210a4
 801ecbc:	0802143c 	.word	0x0802143c
 801ecc0:	08021446 	.word	0x08021446
 801ecc4:	0801a2a1 	.word	0x0801a2a1
 801ecc8:	0801ea4b 	.word	0x0801ea4b
 801eccc:	08021442 	.word	0x08021442

0801ecd0 <_scanf_chars>:
 801ecd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ecd4:	4615      	mov	r5, r2
 801ecd6:	688a      	ldr	r2, [r1, #8]
 801ecd8:	4680      	mov	r8, r0
 801ecda:	460c      	mov	r4, r1
 801ecdc:	b932      	cbnz	r2, 801ecec <_scanf_chars+0x1c>
 801ecde:	698a      	ldr	r2, [r1, #24]
 801ece0:	2a00      	cmp	r2, #0
 801ece2:	bf0c      	ite	eq
 801ece4:	2201      	moveq	r2, #1
 801ece6:	f04f 32ff 	movne.w	r2, #4294967295
 801ecea:	608a      	str	r2, [r1, #8]
 801ecec:	6822      	ldr	r2, [r4, #0]
 801ecee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801ed7c <_scanf_chars+0xac>
 801ecf2:	06d1      	lsls	r1, r2, #27
 801ecf4:	bf5f      	itttt	pl
 801ecf6:	681a      	ldrpl	r2, [r3, #0]
 801ecf8:	1d11      	addpl	r1, r2, #4
 801ecfa:	6019      	strpl	r1, [r3, #0]
 801ecfc:	6816      	ldrpl	r6, [r2, #0]
 801ecfe:	2700      	movs	r7, #0
 801ed00:	69a0      	ldr	r0, [r4, #24]
 801ed02:	b188      	cbz	r0, 801ed28 <_scanf_chars+0x58>
 801ed04:	2801      	cmp	r0, #1
 801ed06:	d107      	bne.n	801ed18 <_scanf_chars+0x48>
 801ed08:	682b      	ldr	r3, [r5, #0]
 801ed0a:	781a      	ldrb	r2, [r3, #0]
 801ed0c:	6963      	ldr	r3, [r4, #20]
 801ed0e:	5c9b      	ldrb	r3, [r3, r2]
 801ed10:	b953      	cbnz	r3, 801ed28 <_scanf_chars+0x58>
 801ed12:	bb27      	cbnz	r7, 801ed5e <_scanf_chars+0x8e>
 801ed14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed18:	2802      	cmp	r0, #2
 801ed1a:	d120      	bne.n	801ed5e <_scanf_chars+0x8e>
 801ed1c:	682b      	ldr	r3, [r5, #0]
 801ed1e:	781b      	ldrb	r3, [r3, #0]
 801ed20:	f813 3009 	ldrb.w	r3, [r3, r9]
 801ed24:	071b      	lsls	r3, r3, #28
 801ed26:	d41a      	bmi.n	801ed5e <_scanf_chars+0x8e>
 801ed28:	6823      	ldr	r3, [r4, #0]
 801ed2a:	06da      	lsls	r2, r3, #27
 801ed2c:	bf5e      	ittt	pl
 801ed2e:	682b      	ldrpl	r3, [r5, #0]
 801ed30:	781b      	ldrbpl	r3, [r3, #0]
 801ed32:	f806 3b01 	strbpl.w	r3, [r6], #1
 801ed36:	682a      	ldr	r2, [r5, #0]
 801ed38:	686b      	ldr	r3, [r5, #4]
 801ed3a:	3201      	adds	r2, #1
 801ed3c:	602a      	str	r2, [r5, #0]
 801ed3e:	68a2      	ldr	r2, [r4, #8]
 801ed40:	3b01      	subs	r3, #1
 801ed42:	3a01      	subs	r2, #1
 801ed44:	606b      	str	r3, [r5, #4]
 801ed46:	3701      	adds	r7, #1
 801ed48:	60a2      	str	r2, [r4, #8]
 801ed4a:	b142      	cbz	r2, 801ed5e <_scanf_chars+0x8e>
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	dcd7      	bgt.n	801ed00 <_scanf_chars+0x30>
 801ed50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ed54:	4629      	mov	r1, r5
 801ed56:	4640      	mov	r0, r8
 801ed58:	4798      	blx	r3
 801ed5a:	2800      	cmp	r0, #0
 801ed5c:	d0d0      	beq.n	801ed00 <_scanf_chars+0x30>
 801ed5e:	6823      	ldr	r3, [r4, #0]
 801ed60:	f013 0310 	ands.w	r3, r3, #16
 801ed64:	d105      	bne.n	801ed72 <_scanf_chars+0xa2>
 801ed66:	68e2      	ldr	r2, [r4, #12]
 801ed68:	3201      	adds	r2, #1
 801ed6a:	60e2      	str	r2, [r4, #12]
 801ed6c:	69a2      	ldr	r2, [r4, #24]
 801ed6e:	b102      	cbz	r2, 801ed72 <_scanf_chars+0xa2>
 801ed70:	7033      	strb	r3, [r6, #0]
 801ed72:	6923      	ldr	r3, [r4, #16]
 801ed74:	441f      	add	r7, r3
 801ed76:	6127      	str	r7, [r4, #16]
 801ed78:	2000      	movs	r0, #0
 801ed7a:	e7cb      	b.n	801ed14 <_scanf_chars+0x44>
 801ed7c:	08020fa1 	.word	0x08020fa1

0801ed80 <_scanf_i>:
 801ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed84:	4698      	mov	r8, r3
 801ed86:	4b74      	ldr	r3, [pc, #464]	; (801ef58 <_scanf_i+0x1d8>)
 801ed88:	460c      	mov	r4, r1
 801ed8a:	4682      	mov	sl, r0
 801ed8c:	4616      	mov	r6, r2
 801ed8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ed92:	b087      	sub	sp, #28
 801ed94:	ab03      	add	r3, sp, #12
 801ed96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ed9a:	4b70      	ldr	r3, [pc, #448]	; (801ef5c <_scanf_i+0x1dc>)
 801ed9c:	69a1      	ldr	r1, [r4, #24]
 801ed9e:	4a70      	ldr	r2, [pc, #448]	; (801ef60 <_scanf_i+0x1e0>)
 801eda0:	2903      	cmp	r1, #3
 801eda2:	bf18      	it	ne
 801eda4:	461a      	movne	r2, r3
 801eda6:	68a3      	ldr	r3, [r4, #8]
 801eda8:	9201      	str	r2, [sp, #4]
 801edaa:	1e5a      	subs	r2, r3, #1
 801edac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801edb0:	bf88      	it	hi
 801edb2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801edb6:	4627      	mov	r7, r4
 801edb8:	bf82      	ittt	hi
 801edba:	eb03 0905 	addhi.w	r9, r3, r5
 801edbe:	f240 135d 	movwhi	r3, #349	; 0x15d
 801edc2:	60a3      	strhi	r3, [r4, #8]
 801edc4:	f857 3b1c 	ldr.w	r3, [r7], #28
 801edc8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801edcc:	bf98      	it	ls
 801edce:	f04f 0900 	movls.w	r9, #0
 801edd2:	6023      	str	r3, [r4, #0]
 801edd4:	463d      	mov	r5, r7
 801edd6:	f04f 0b00 	mov.w	fp, #0
 801edda:	6831      	ldr	r1, [r6, #0]
 801eddc:	ab03      	add	r3, sp, #12
 801edde:	7809      	ldrb	r1, [r1, #0]
 801ede0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801ede4:	2202      	movs	r2, #2
 801ede6:	f7e1 fa0b 	bl	8000200 <memchr>
 801edea:	b328      	cbz	r0, 801ee38 <_scanf_i+0xb8>
 801edec:	f1bb 0f01 	cmp.w	fp, #1
 801edf0:	d159      	bne.n	801eea6 <_scanf_i+0x126>
 801edf2:	6862      	ldr	r2, [r4, #4]
 801edf4:	b92a      	cbnz	r2, 801ee02 <_scanf_i+0x82>
 801edf6:	6822      	ldr	r2, [r4, #0]
 801edf8:	2308      	movs	r3, #8
 801edfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801edfe:	6063      	str	r3, [r4, #4]
 801ee00:	6022      	str	r2, [r4, #0]
 801ee02:	6822      	ldr	r2, [r4, #0]
 801ee04:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801ee08:	6022      	str	r2, [r4, #0]
 801ee0a:	68a2      	ldr	r2, [r4, #8]
 801ee0c:	1e51      	subs	r1, r2, #1
 801ee0e:	60a1      	str	r1, [r4, #8]
 801ee10:	b192      	cbz	r2, 801ee38 <_scanf_i+0xb8>
 801ee12:	6832      	ldr	r2, [r6, #0]
 801ee14:	1c51      	adds	r1, r2, #1
 801ee16:	6031      	str	r1, [r6, #0]
 801ee18:	7812      	ldrb	r2, [r2, #0]
 801ee1a:	f805 2b01 	strb.w	r2, [r5], #1
 801ee1e:	6872      	ldr	r2, [r6, #4]
 801ee20:	3a01      	subs	r2, #1
 801ee22:	2a00      	cmp	r2, #0
 801ee24:	6072      	str	r2, [r6, #4]
 801ee26:	dc07      	bgt.n	801ee38 <_scanf_i+0xb8>
 801ee28:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801ee2c:	4631      	mov	r1, r6
 801ee2e:	4650      	mov	r0, sl
 801ee30:	4790      	blx	r2
 801ee32:	2800      	cmp	r0, #0
 801ee34:	f040 8085 	bne.w	801ef42 <_scanf_i+0x1c2>
 801ee38:	f10b 0b01 	add.w	fp, fp, #1
 801ee3c:	f1bb 0f03 	cmp.w	fp, #3
 801ee40:	d1cb      	bne.n	801edda <_scanf_i+0x5a>
 801ee42:	6863      	ldr	r3, [r4, #4]
 801ee44:	b90b      	cbnz	r3, 801ee4a <_scanf_i+0xca>
 801ee46:	230a      	movs	r3, #10
 801ee48:	6063      	str	r3, [r4, #4]
 801ee4a:	6863      	ldr	r3, [r4, #4]
 801ee4c:	4945      	ldr	r1, [pc, #276]	; (801ef64 <_scanf_i+0x1e4>)
 801ee4e:	6960      	ldr	r0, [r4, #20]
 801ee50:	1ac9      	subs	r1, r1, r3
 801ee52:	f000 f89b 	bl	801ef8c <__sccl>
 801ee56:	f04f 0b00 	mov.w	fp, #0
 801ee5a:	68a3      	ldr	r3, [r4, #8]
 801ee5c:	6822      	ldr	r2, [r4, #0]
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	d03d      	beq.n	801eede <_scanf_i+0x15e>
 801ee62:	6831      	ldr	r1, [r6, #0]
 801ee64:	6960      	ldr	r0, [r4, #20]
 801ee66:	f891 c000 	ldrb.w	ip, [r1]
 801ee6a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801ee6e:	2800      	cmp	r0, #0
 801ee70:	d035      	beq.n	801eede <_scanf_i+0x15e>
 801ee72:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801ee76:	d124      	bne.n	801eec2 <_scanf_i+0x142>
 801ee78:	0510      	lsls	r0, r2, #20
 801ee7a:	d522      	bpl.n	801eec2 <_scanf_i+0x142>
 801ee7c:	f10b 0b01 	add.w	fp, fp, #1
 801ee80:	f1b9 0f00 	cmp.w	r9, #0
 801ee84:	d003      	beq.n	801ee8e <_scanf_i+0x10e>
 801ee86:	3301      	adds	r3, #1
 801ee88:	f109 39ff 	add.w	r9, r9, #4294967295
 801ee8c:	60a3      	str	r3, [r4, #8]
 801ee8e:	6873      	ldr	r3, [r6, #4]
 801ee90:	3b01      	subs	r3, #1
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	6073      	str	r3, [r6, #4]
 801ee96:	dd1b      	ble.n	801eed0 <_scanf_i+0x150>
 801ee98:	6833      	ldr	r3, [r6, #0]
 801ee9a:	3301      	adds	r3, #1
 801ee9c:	6033      	str	r3, [r6, #0]
 801ee9e:	68a3      	ldr	r3, [r4, #8]
 801eea0:	3b01      	subs	r3, #1
 801eea2:	60a3      	str	r3, [r4, #8]
 801eea4:	e7d9      	b.n	801ee5a <_scanf_i+0xda>
 801eea6:	f1bb 0f02 	cmp.w	fp, #2
 801eeaa:	d1ae      	bne.n	801ee0a <_scanf_i+0x8a>
 801eeac:	6822      	ldr	r2, [r4, #0]
 801eeae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801eeb2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801eeb6:	d1bf      	bne.n	801ee38 <_scanf_i+0xb8>
 801eeb8:	2310      	movs	r3, #16
 801eeba:	6063      	str	r3, [r4, #4]
 801eebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801eec0:	e7a2      	b.n	801ee08 <_scanf_i+0x88>
 801eec2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801eec6:	6022      	str	r2, [r4, #0]
 801eec8:	780b      	ldrb	r3, [r1, #0]
 801eeca:	f805 3b01 	strb.w	r3, [r5], #1
 801eece:	e7de      	b.n	801ee8e <_scanf_i+0x10e>
 801eed0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801eed4:	4631      	mov	r1, r6
 801eed6:	4650      	mov	r0, sl
 801eed8:	4798      	blx	r3
 801eeda:	2800      	cmp	r0, #0
 801eedc:	d0df      	beq.n	801ee9e <_scanf_i+0x11e>
 801eede:	6823      	ldr	r3, [r4, #0]
 801eee0:	05d9      	lsls	r1, r3, #23
 801eee2:	d50d      	bpl.n	801ef00 <_scanf_i+0x180>
 801eee4:	42bd      	cmp	r5, r7
 801eee6:	d909      	bls.n	801eefc <_scanf_i+0x17c>
 801eee8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801eeec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801eef0:	4632      	mov	r2, r6
 801eef2:	4650      	mov	r0, sl
 801eef4:	4798      	blx	r3
 801eef6:	f105 39ff 	add.w	r9, r5, #4294967295
 801eefa:	464d      	mov	r5, r9
 801eefc:	42bd      	cmp	r5, r7
 801eefe:	d028      	beq.n	801ef52 <_scanf_i+0x1d2>
 801ef00:	6822      	ldr	r2, [r4, #0]
 801ef02:	f012 0210 	ands.w	r2, r2, #16
 801ef06:	d113      	bne.n	801ef30 <_scanf_i+0x1b0>
 801ef08:	702a      	strb	r2, [r5, #0]
 801ef0a:	6863      	ldr	r3, [r4, #4]
 801ef0c:	9e01      	ldr	r6, [sp, #4]
 801ef0e:	4639      	mov	r1, r7
 801ef10:	4650      	mov	r0, sl
 801ef12:	47b0      	blx	r6
 801ef14:	f8d8 3000 	ldr.w	r3, [r8]
 801ef18:	6821      	ldr	r1, [r4, #0]
 801ef1a:	1d1a      	adds	r2, r3, #4
 801ef1c:	f8c8 2000 	str.w	r2, [r8]
 801ef20:	f011 0f20 	tst.w	r1, #32
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	d00f      	beq.n	801ef48 <_scanf_i+0x1c8>
 801ef28:	6018      	str	r0, [r3, #0]
 801ef2a:	68e3      	ldr	r3, [r4, #12]
 801ef2c:	3301      	adds	r3, #1
 801ef2e:	60e3      	str	r3, [r4, #12]
 801ef30:	1bed      	subs	r5, r5, r7
 801ef32:	44ab      	add	fp, r5
 801ef34:	6925      	ldr	r5, [r4, #16]
 801ef36:	445d      	add	r5, fp
 801ef38:	6125      	str	r5, [r4, #16]
 801ef3a:	2000      	movs	r0, #0
 801ef3c:	b007      	add	sp, #28
 801ef3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef42:	f04f 0b00 	mov.w	fp, #0
 801ef46:	e7ca      	b.n	801eede <_scanf_i+0x15e>
 801ef48:	07ca      	lsls	r2, r1, #31
 801ef4a:	bf4c      	ite	mi
 801ef4c:	8018      	strhmi	r0, [r3, #0]
 801ef4e:	6018      	strpl	r0, [r3, #0]
 801ef50:	e7eb      	b.n	801ef2a <_scanf_i+0x1aa>
 801ef52:	2001      	movs	r0, #1
 801ef54:	e7f2      	b.n	801ef3c <_scanf_i+0x1bc>
 801ef56:	bf00      	nop
 801ef58:	08020d94 	.word	0x08020d94
 801ef5c:	0801c0c1 	.word	0x0801c0c1
 801ef60:	0801bfb1 	.word	0x0801bfb1
 801ef64:	08021466 	.word	0x08021466

0801ef68 <_read_r>:
 801ef68:	b538      	push	{r3, r4, r5, lr}
 801ef6a:	4d07      	ldr	r5, [pc, #28]	; (801ef88 <_read_r+0x20>)
 801ef6c:	4604      	mov	r4, r0
 801ef6e:	4608      	mov	r0, r1
 801ef70:	4611      	mov	r1, r2
 801ef72:	2200      	movs	r2, #0
 801ef74:	602a      	str	r2, [r5, #0]
 801ef76:	461a      	mov	r2, r3
 801ef78:	f7e4 f8f2 	bl	8003160 <_read>
 801ef7c:	1c43      	adds	r3, r0, #1
 801ef7e:	d102      	bne.n	801ef86 <_read_r+0x1e>
 801ef80:	682b      	ldr	r3, [r5, #0]
 801ef82:	b103      	cbz	r3, 801ef86 <_read_r+0x1e>
 801ef84:	6023      	str	r3, [r4, #0]
 801ef86:	bd38      	pop	{r3, r4, r5, pc}
 801ef88:	20008e08 	.word	0x20008e08

0801ef8c <__sccl>:
 801ef8c:	b570      	push	{r4, r5, r6, lr}
 801ef8e:	780b      	ldrb	r3, [r1, #0]
 801ef90:	4604      	mov	r4, r0
 801ef92:	2b5e      	cmp	r3, #94	; 0x5e
 801ef94:	bf0b      	itete	eq
 801ef96:	784b      	ldrbeq	r3, [r1, #1]
 801ef98:	1c48      	addne	r0, r1, #1
 801ef9a:	1c88      	addeq	r0, r1, #2
 801ef9c:	2200      	movne	r2, #0
 801ef9e:	bf08      	it	eq
 801efa0:	2201      	moveq	r2, #1
 801efa2:	1e61      	subs	r1, r4, #1
 801efa4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801efa8:	f801 2f01 	strb.w	r2, [r1, #1]!
 801efac:	42a9      	cmp	r1, r5
 801efae:	d1fb      	bne.n	801efa8 <__sccl+0x1c>
 801efb0:	b90b      	cbnz	r3, 801efb6 <__sccl+0x2a>
 801efb2:	3801      	subs	r0, #1
 801efb4:	bd70      	pop	{r4, r5, r6, pc}
 801efb6:	f082 0101 	eor.w	r1, r2, #1
 801efba:	54e1      	strb	r1, [r4, r3]
 801efbc:	1c42      	adds	r2, r0, #1
 801efbe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801efc2:	2d2d      	cmp	r5, #45	; 0x2d
 801efc4:	f102 36ff 	add.w	r6, r2, #4294967295
 801efc8:	4610      	mov	r0, r2
 801efca:	d006      	beq.n	801efda <__sccl+0x4e>
 801efcc:	2d5d      	cmp	r5, #93	; 0x5d
 801efce:	d0f1      	beq.n	801efb4 <__sccl+0x28>
 801efd0:	b90d      	cbnz	r5, 801efd6 <__sccl+0x4a>
 801efd2:	4630      	mov	r0, r6
 801efd4:	e7ee      	b.n	801efb4 <__sccl+0x28>
 801efd6:	462b      	mov	r3, r5
 801efd8:	e7ef      	b.n	801efba <__sccl+0x2e>
 801efda:	7816      	ldrb	r6, [r2, #0]
 801efdc:	2e5d      	cmp	r6, #93	; 0x5d
 801efde:	d0fa      	beq.n	801efd6 <__sccl+0x4a>
 801efe0:	42b3      	cmp	r3, r6
 801efe2:	dcf8      	bgt.n	801efd6 <__sccl+0x4a>
 801efe4:	4618      	mov	r0, r3
 801efe6:	3001      	adds	r0, #1
 801efe8:	4286      	cmp	r6, r0
 801efea:	5421      	strb	r1, [r4, r0]
 801efec:	dcfb      	bgt.n	801efe6 <__sccl+0x5a>
 801efee:	43d8      	mvns	r0, r3
 801eff0:	4430      	add	r0, r6
 801eff2:	1c5d      	adds	r5, r3, #1
 801eff4:	42b3      	cmp	r3, r6
 801eff6:	bfa8      	it	ge
 801eff8:	2000      	movge	r0, #0
 801effa:	182b      	adds	r3, r5, r0
 801effc:	3202      	adds	r2, #2
 801effe:	e7de      	b.n	801efbe <__sccl+0x32>

0801f000 <__submore>:
 801f000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f004:	460c      	mov	r4, r1
 801f006:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f00c:	4299      	cmp	r1, r3
 801f00e:	d11d      	bne.n	801f04c <__submore+0x4c>
 801f010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f014:	f7fb f84a 	bl	801a0ac <_malloc_r>
 801f018:	b918      	cbnz	r0, 801f022 <__submore+0x22>
 801f01a:	f04f 30ff 	mov.w	r0, #4294967295
 801f01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f026:	63a3      	str	r3, [r4, #56]	; 0x38
 801f028:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801f02c:	6360      	str	r0, [r4, #52]	; 0x34
 801f02e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801f032:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801f036:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801f03a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801f03e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801f042:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801f046:	6020      	str	r0, [r4, #0]
 801f048:	2000      	movs	r0, #0
 801f04a:	e7e8      	b.n	801f01e <__submore+0x1e>
 801f04c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801f04e:	0077      	lsls	r7, r6, #1
 801f050:	463a      	mov	r2, r7
 801f052:	f7ff f98f 	bl	801e374 <_realloc_r>
 801f056:	4605      	mov	r5, r0
 801f058:	2800      	cmp	r0, #0
 801f05a:	d0de      	beq.n	801f01a <__submore+0x1a>
 801f05c:	eb00 0806 	add.w	r8, r0, r6
 801f060:	4601      	mov	r1, r0
 801f062:	4632      	mov	r2, r6
 801f064:	4640      	mov	r0, r8
 801f066:	f7fa ffa1 	bl	8019fac <memcpy>
 801f06a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801f06e:	f8c4 8000 	str.w	r8, [r4]
 801f072:	e7e9      	b.n	801f048 <__submore+0x48>

0801f074 <__ascii_wctomb>:
 801f074:	b149      	cbz	r1, 801f08a <__ascii_wctomb+0x16>
 801f076:	2aff      	cmp	r2, #255	; 0xff
 801f078:	bf85      	ittet	hi
 801f07a:	238a      	movhi	r3, #138	; 0x8a
 801f07c:	6003      	strhi	r3, [r0, #0]
 801f07e:	700a      	strbls	r2, [r1, #0]
 801f080:	f04f 30ff 	movhi.w	r0, #4294967295
 801f084:	bf98      	it	ls
 801f086:	2001      	movls	r0, #1
 801f088:	4770      	bx	lr
 801f08a:	4608      	mov	r0, r1
 801f08c:	4770      	bx	lr
	...

0801f090 <_fstat_r>:
 801f090:	b538      	push	{r3, r4, r5, lr}
 801f092:	4d07      	ldr	r5, [pc, #28]	; (801f0b0 <_fstat_r+0x20>)
 801f094:	2300      	movs	r3, #0
 801f096:	4604      	mov	r4, r0
 801f098:	4608      	mov	r0, r1
 801f09a:	4611      	mov	r1, r2
 801f09c:	602b      	str	r3, [r5, #0]
 801f09e:	f7e4 f8a4 	bl	80031ea <_fstat>
 801f0a2:	1c43      	adds	r3, r0, #1
 801f0a4:	d102      	bne.n	801f0ac <_fstat_r+0x1c>
 801f0a6:	682b      	ldr	r3, [r5, #0]
 801f0a8:	b103      	cbz	r3, 801f0ac <_fstat_r+0x1c>
 801f0aa:	6023      	str	r3, [r4, #0]
 801f0ac:	bd38      	pop	{r3, r4, r5, pc}
 801f0ae:	bf00      	nop
 801f0b0:	20008e08 	.word	0x20008e08

0801f0b4 <_isatty_r>:
 801f0b4:	b538      	push	{r3, r4, r5, lr}
 801f0b6:	4d06      	ldr	r5, [pc, #24]	; (801f0d0 <_isatty_r+0x1c>)
 801f0b8:	2300      	movs	r3, #0
 801f0ba:	4604      	mov	r4, r0
 801f0bc:	4608      	mov	r0, r1
 801f0be:	602b      	str	r3, [r5, #0]
 801f0c0:	f7e4 f8a3 	bl	800320a <_isatty>
 801f0c4:	1c43      	adds	r3, r0, #1
 801f0c6:	d102      	bne.n	801f0ce <_isatty_r+0x1a>
 801f0c8:	682b      	ldr	r3, [r5, #0]
 801f0ca:	b103      	cbz	r3, 801f0ce <_isatty_r+0x1a>
 801f0cc:	6023      	str	r3, [r4, #0]
 801f0ce:	bd38      	pop	{r3, r4, r5, pc}
 801f0d0:	20008e08 	.word	0x20008e08

0801f0d4 <_malloc_usable_size_r>:
 801f0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f0d8:	1f18      	subs	r0, r3, #4
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	bfbc      	itt	lt
 801f0de:	580b      	ldrlt	r3, [r1, r0]
 801f0e0:	18c0      	addlt	r0, r0, r3
 801f0e2:	4770      	bx	lr

0801f0e4 <_init>:
 801f0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0e6:	bf00      	nop
 801f0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0ea:	bc08      	pop	{r3}
 801f0ec:	469e      	mov	lr, r3
 801f0ee:	4770      	bx	lr

0801f0f0 <_fini>:
 801f0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0f2:	bf00      	nop
 801f0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0f6:	bc08      	pop	{r3}
 801f0f8:	469e      	mov	lr, r3
 801f0fa:	4770      	bx	lr
