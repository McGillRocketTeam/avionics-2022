
FC_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002348  0801a580  0801a580  0002a580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c8c8  0801c8c8  00030264  2**0
                  CONTENTS
  4 .ARM          00000008  0801c8c8  0801c8c8  0002c8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c8d0  0801c8d0  00030264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801c8d0  0801c8d0  0002c8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c8d8  0801c8d8  0002c8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0801c8dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030264  2**0
                  CONTENTS
 10 .bss          00006f40  20000264  20000264  00030264  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  200071a4  200071a4  00030264  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006122d  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008fa1  00000000  00000000  000914c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003878  00000000  00000000  0009a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034b56  00000000  00000000  0009dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e78a  00000000  00000000  000d2836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112d9b  00000000  00000000  00110fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00223d5b  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 000035f8  00000000  00000000  00223db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00010c14  00000000  00000000  002273a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000264 	.word	0x20000264
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a564 	.word	0x0801a564

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000268 	.word	0x20000268
 80001ec:	0801a564 	.word	0x0801a564

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f007 f9a8 	bl	800838c <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f007 fa85 	bl	8008580 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f00b fc56 	bl	800c94e <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f006 f8ea 	bl	8007288 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 fb22 	bl	8006704 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f00b fc3f 	bl	800c94e <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f00b fc33 	bl	800c94e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f00b fc2b 	bl	800c94e <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f015 fa37 	bl	8016578 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f00b fc11 	bl	800c94e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f00b fc09 	bl	800c94e <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f00b fc00 	bl	800c94e <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f005 fae6 	bl	8006726 <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f006 f893 	bl	8007288 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f005 fb02 	bl	8006772 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f005 f971 	bl	8006464 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f004 ff4d 	bl	8006028 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f005 f869 	bl	800626c <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 ff1b 	bl	8005fdc <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f005 f837 	bl	8006220 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f00b fbc6 	bl	800c94e <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005b0c 	.word	0x20005b0c
 80011e0:	0801a580 	.word	0x0801a580
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	20000290 	.word	0x20000290
 80011f0:	0801a598 	.word	0x0801a598
 80011f4:	0801a5b0 	.word	0x0801a5b0
 80011f8:	0801a5bc 	.word	0x0801a5bc
 80011fc:	0801a5d0 	.word	0x0801a5d0
 8001200:	0801a5d8 	.word	0x0801a5d8
 8001204:	0801a5f0 	.word	0x0801a5f0
 8001208:	20000291 	.word	0x20000291
 800120c:	0801a5f8 	.word	0x0801a5f8

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f005 f942 	bl	80064b0 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f014 f920 	bl	801547c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f005 f9ee 	bl	8006622 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fe79 	bl	8005f44 <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f004 fe6c 	bl	8005f44 <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f004 fe5f 	bl	8005f44 <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000280 	.word	0x20000280

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 f92e 	bl	8006514 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f005 f93c 	bl	8006546 <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fe65 	bl	8005fa4 <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	2000028e 	.word	0x2000028e

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f005 f8eb 	bl	80064e2 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f014 f8b0 	bl	801547c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f005 f933 	bl	800658c <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fe21 	bl	8005f74 <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f004 fe14 	bl	8005f74 <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f004 fe07 	bl	8005f74 <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	20000288 	.word	0x20000288

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f00b fad8 	bl	800c94e <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f005 ff6c 	bl	8007288 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fd40 	bl	8005e42 <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f00b fabe 	bl	800c94e <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f00b fab2 	bl	800c94e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f00b faaa 	bl	800c94e <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f015 f8b6 	bl	8016578 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4620      	mov	r0, r4
 8001428:	f00b fa91 	bl	800c94e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f00b fa89 	bl	800c94e <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f00b fa80 	bl	800c94e <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f004 fd05 	bl	8005e64 <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f005 ff13 	bl	8007288 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f004 fd21 	bl	8005eb0 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fc07 	bl	8005c90 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f004 fc27 	bl	8005cdc <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f00b fa58 	bl	800c94e <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20005b0c 	.word	0x20005b0c
 80014bc:	0801a610 	.word	0x0801a610
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	2000029a 	.word	0x2000029a
 80014cc:	0801a598 	.word	0x0801a598
 80014d0:	0801a5b0 	.word	0x0801a5b0
 80014d4:	0801a5bc 	.word	0x0801a5bc
 80014d8:	0801a5d0 	.word	0x0801a5d0
 80014dc:	0801a5d8 	.word	0x0801a5d8
 80014e0:	0801a5f0 	.word	0x0801a5f0
 80014e4:	2000029b 	.word	0x2000029b
 80014e8:	0801a628 	.word	0x0801a628

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f004 fb62 	bl	8005bcc <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fc43 	bl	8005daa <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f004 fb7f 	bl	8005c2c <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	20000294 	.word	0x20000294

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fc0c 	bl	8005d78 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fc43 	bl	8005dfc <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fb6d 	bl	8005c5c <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	20000298 	.word	0x20000298

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f006 fee2 	bl	800838c <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f006 ffbf 	bl	8008580 <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b095      	sub	sp, #84	; 0x54
 800163c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f005 fde1 	bl	8007204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f963 	bl	800190c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fce1 	bl	800200c <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 f9d1 	bl	80019f0 <MX_ADC1_Init>
  MX_I2C2_Init();
 800164e:	f000 fa21 	bl	8001a94 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001652:	f000 fa5f 	bl	8001b14 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001656:	f000 fb43 	bl	8001ce0 <MX_SPI2_Init>
  MX_SPI4_Init();
 800165a:	f000 fb77 	bl	8001d4c <MX_SPI4_Init>
  MX_SPI5_Init();
 800165e:	f000 fbab 	bl	8001db8 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001662:	f000 fbdf 	bl	8001e24 <MX_TIM2_Init>
  MX_UART8_Init();
 8001666:	f000 fc53 	bl	8001f10 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166a:	f000 fc7b 	bl	8001f64 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800166e:	f000 fca3 	bl	8001fb8 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001672:	f000 faa9 	bl	8001bc8 <MX_RTC_Init>
  MX_FATFS_Init();
 8001676:	f00b fcd5 	bl	800d024 <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2102      	movs	r1, #2
 800167e:	487d      	ldr	r0, [pc, #500]	; (8001874 <main+0x23c>)
 8001680:	f006 fd0e 	bl	80080a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2104      	movs	r1, #4
 8001688:	487a      	ldr	r0, [pc, #488]	; (8001874 <main+0x23c>)
 800168a:	f006 fd09 	bl	80080a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2108      	movs	r1, #8
 8001692:	4878      	ldr	r0, [pc, #480]	; (8001874 <main+0x23c>)
 8001694:	f006 fd04 	bl	80080a0 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800169e:	4876      	ldr	r0, [pc, #472]	; (8001878 <main+0x240>)
 80016a0:	f006 fcfe 	bl	80080a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016aa:	4873      	ldr	r0, [pc, #460]	; (8001878 <main+0x240>)
 80016ac:	f006 fcf8 	bl	80080a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b6:	4870      	ldr	r0, [pc, #448]	; (8001878 <main+0x240>)
 80016b8:	f006 fcf2 	bl	80080a0 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016bc:	2201      	movs	r2, #1
 80016be:	2102      	movs	r1, #2
 80016c0:	486d      	ldr	r0, [pc, #436]	; (8001878 <main+0x240>)
 80016c2:	f006 fced 	bl	80080a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016cc:	486b      	ldr	r0, [pc, #428]	; (800187c <main+0x244>)
 80016ce:	f006 fce7 	bl	80080a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d8:	4868      	ldr	r0, [pc, #416]	; (800187c <main+0x244>)
 80016da:	f006 fce1 	bl	80080a0 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016de:	2200      	movs	r2, #0
 80016e0:	2104      	movs	r1, #4
 80016e2:	4867      	ldr	r0, [pc, #412]	; (8001880 <main+0x248>)
 80016e4:	f006 fcdc 	bl	80080a0 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	4864      	ldr	r0, [pc, #400]	; (8001880 <main+0x248>)
 80016f0:	f006 fcd6 	bl	80080a0 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fa:	485f      	ldr	r0, [pc, #380]	; (8001878 <main+0x240>)
 80016fc:	f006 fcd0 	bl	80080a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001700:	2200      	movs	r2, #0
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	485f      	ldr	r0, [pc, #380]	; (8001884 <main+0x24c>)
 8001706:	f006 fccb 	bl	80080a0 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	485d      	ldr	r0, [pc, #372]	; (8001884 <main+0x24c>)
 8001710:	f006 fcc6 	bl	80080a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2120      	movs	r1, #32
 8001718:	485a      	ldr	r0, [pc, #360]	; (8001884 <main+0x24c>)
 800171a:	f006 fcc1 	bl	80080a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2110      	movs	r1, #16
 8001722:	4858      	ldr	r0, [pc, #352]	; (8001884 <main+0x24c>)
 8001724:	f006 fcbc 	bl	80080a0 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	2213      	movs	r2, #19
 800172e:	4956      	ldr	r1, [pc, #344]	; (8001888 <main+0x250>)
 8001730:	4856      	ldr	r0, [pc, #344]	; (800188c <main+0x254>)
 8001732:	f00b f90c 	bl	800c94e <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(&hrtc, DEBUG_UART, SLEEP_TIME); //Put here so we can pass the uart value to the setup
 8001736:	4e55      	ldr	r6, [pc, #340]	; (800188c <main+0x254>)
 8001738:	23a0      	movs	r3, #160	; 0xa0
 800173a:	930e      	str	r3, [sp, #56]	; 0x38
 800173c:	466d      	mov	r5, sp
 800173e:	f106 040c 	add.w	r4, r6, #12
 8001742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001752:	e885 0003 	stmia.w	r5, {r0, r1}
 8001756:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800175a:	484d      	ldr	r0, [pc, #308]	; (8001890 <main+0x258>)
 800175c:	f005 f8ae 	bl	80068bc <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 8001760:	484a      	ldr	r0, [pc, #296]	; (800188c <main+0x254>)
 8001762:	f002 f8a5 	bl	80038b0 <MRT_externalFlashSetup>
	   * Watch dog
	   * -Remove the MX_IWDG_Init() that is auto-generated and add it just before the osKernelStart
	   * -Need to be put after RTOS setup
	   */
	#if IWDG_ACTIVE
	MX_IWDG_Init();
 8001766:	f000 fa15 	bl	8001b94 <MX_IWDG_Init>
	#endif

  //RTC
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 800176a:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <main+0x25c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4a4a      	ldr	r2, [pc, #296]	; (8001898 <main+0x260>)
 8001770:	7811      	ldrb	r1, [r2, #0]
 8001772:	4a4a      	ldr	r2, [pc, #296]	; (800189c <main+0x264>)
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f005 fa1e 	bl	8006bb8 <MRT_setRTC>
  HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 800177c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001780:	f005 fd82 	bl	8007288 <HAL_Delay>
  #if ALARM_A_ACTIVE
    if (wu_flag == 0){
 8001784:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <main+0x268>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d105      	bne.n	8001798 <main+0x160>
    	MRT_setAlarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 800178c:	2200      	movs	r2, #0
 800178e:	211e      	movs	r1, #30
 8001790:	2004      	movs	r0, #4
 8001792:	f005 f9c9 	bl	8006b28 <MRT_setAlarmA>
 8001796:	e004      	b.n	80017a2 <main+0x16a>
    }
    else{
    	MRT_setAlarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	200e      	movs	r0, #14
 800179e:	f005 f9c3 	bl	8006b28 <MRT_setAlarmA>

	  //**************************************************//
	  //MEMORY THREAD
#if MEMORY_THREAD
	  #if IWDG_ACTIVE
	    HAL_IWDG_Refresh(&hiwdg);
 80017a2:	4840      	ldr	r0, [pc, #256]	; (80018a4 <main+0x26c>)
 80017a4:	f007 fd60 	bl	8009268 <HAL_IWDG_Refresh>
	  #endif

		//SD card
		sd_init_dynamic_filename("FC", "", filename);
 80017a8:	4a3f      	ldr	r2, [pc, #252]	; (80018a8 <main+0x270>)
 80017aa:	4940      	ldr	r1, [pc, #256]	; (80018ac <main+0x274>)
 80017ac:	4840      	ldr	r0, [pc, #256]	; (80018b0 <main+0x278>)
 80017ae:	f005 fb03 	bl	8006db8 <sd_init_dynamic_filename>
		sd_open_file(&filename); //Open now and sync later
 80017b2:	483d      	ldr	r0, [pc, #244]	; (80018a8 <main+0x270>)
 80017b4:	f005 fb7e 	bl	8006eb4 <sd_open_file>
	 * -6 DOF IMU (LSM6DSR): 0x6A
	 * -LPS22HH: 0x5C
	 */

	  #if IWDG_ACTIVE
		HAL_IWDG_Refresh(&hiwdg);
 80017b8:	483a      	ldr	r0, [pc, #232]	; (80018a4 <main+0x26c>)
 80017ba:	f007 fd55 	bl	8009268 <HAL_IWDG_Refresh>
	  #endif
	  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 80017be:	4c3d      	ldr	r4, [pc, #244]	; (80018b4 <main+0x27c>)
 80017c0:	463b      	mov	r3, r7
 80017c2:	4a32      	ldr	r2, [pc, #200]	; (800188c <main+0x254>)
 80017c4:	493c      	ldr	r1, [pc, #240]	; (80018b8 <main+0x280>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fc5a 	bl	8001080 <MRT_LSM6DSR_Setup>
 80017cc:	463b      	mov	r3, r7
 80017ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  #if IWDG_ACTIVE
	    HAL_IWDG_Refresh(&hiwdg);
 80017d6:	4833      	ldr	r0, [pc, #204]	; (80018a4 <main+0x26c>)
 80017d8:	f007 fd46 	bl	8009268 <HAL_IWDG_Refresh>
	  #endif
	  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 80017dc:	4c37      	ldr	r4, [pc, #220]	; (80018bc <main+0x284>)
 80017de:	463b      	mov	r3, r7
 80017e0:	4a2a      	ldr	r2, [pc, #168]	; (800188c <main+0x254>)
 80017e2:	4935      	ldr	r1, [pc, #212]	; (80018b8 <main+0x280>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fdc9 	bl	800137c <MRT_LPS22HH_Setup>
 80017ea:	463b      	mov	r3, r7
 80017ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  GPS_init(&GPS_UART, &DEBUG_UART);
 80017f4:	4925      	ldr	r1, [pc, #148]	; (800188c <main+0x254>)
 80017f6:	4832      	ldr	r0, [pc, #200]	; (80018c0 <main+0x288>)
 80017f8:	f002 f826 	bl	8003848 <GPS_init>

	  //**************************************************//

	  //Poll propulsion until launch command sent

	  while((XTEND_ || SRADIO_) && ejection_state_flag == 0 && wu_flag == 0){
 80017fc:	bf00      	nop
	  */


//TODO I2C SENSORS SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	  HAL_IWDG_Refresh(&hiwdg);
 80017fe:	4829      	ldr	r0, [pc, #164]	; (80018a4 <main+0x26c>)
 8001800:	f007 fd32 	bl	8009268 <HAL_IWDG_Refresh>
	  buzz_startup_success(); //put before first loop?
 8001804:	f002 fc52 	bl	80040ac <buzz_startup_success>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001808:	f00f f84c 	bl	80108a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 800180c:	4a2d      	ldr	r2, [pc, #180]	; (80018c4 <main+0x28c>)
 800180e:	2100      	movs	r1, #0
 8001810:	482d      	ldr	r0, [pc, #180]	; (80018c8 <main+0x290>)
 8001812:	f00f f891 	bl	8010938 <osThreadNew>
 8001816:	4603      	mov	r3, r0
 8001818:	4a2c      	ldr	r2, [pc, #176]	; (80018cc <main+0x294>)
 800181a:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 800181c:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <main+0x298>)
 800181e:	2100      	movs	r1, #0
 8001820:	482c      	ldr	r0, [pc, #176]	; (80018d4 <main+0x29c>)
 8001822:	f00f f889 	bl	8010938 <osThreadNew>
 8001826:	4603      	mov	r3, r0
 8001828:	4a2b      	ldr	r2, [pc, #172]	; (80018d8 <main+0x2a0>)
 800182a:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 800182c:	4a2b      	ldr	r2, [pc, #172]	; (80018dc <main+0x2a4>)
 800182e:	2100      	movs	r1, #0
 8001830:	482b      	ldr	r0, [pc, #172]	; (80018e0 <main+0x2a8>)
 8001832:	f00f f881 	bl	8010938 <osThreadNew>
 8001836:	4603      	mov	r3, r0
 8001838:	4a2a      	ldr	r2, [pc, #168]	; (80018e4 <main+0x2ac>)
 800183a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 800183c:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <main+0x2b0>)
 800183e:	2100      	movs	r1, #0
 8001840:	482a      	ldr	r0, [pc, #168]	; (80018ec <main+0x2b4>)
 8001842:	f00f f879 	bl	8010938 <osThreadNew>
 8001846:	4603      	mov	r3, r0
 8001848:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <main+0x2b8>)
 800184a:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 800184c:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <main+0x2bc>)
 800184e:	2100      	movs	r1, #0
 8001850:	4829      	ldr	r0, [pc, #164]	; (80018f8 <main+0x2c0>)
 8001852:	f00f f871 	bl	8010938 <osThreadNew>
 8001856:	4603      	mov	r3, r0
 8001858:	4a28      	ldr	r2, [pc, #160]	; (80018fc <main+0x2c4>)
 800185a:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 800185c:	4a28      	ldr	r2, [pc, #160]	; (8001900 <main+0x2c8>)
 800185e:	2100      	movs	r1, #0
 8001860:	4828      	ldr	r0, [pc, #160]	; (8001904 <main+0x2cc>)
 8001862:	f00f f869 	bl	8010938 <osThreadNew>
 8001866:	4603      	mov	r3, r0
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <main+0x2d0>)
 800186a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800186c:	f00f f83e 	bl	80108ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001870:	e7fe      	b.n	8001870 <main+0x238>
 8001872:	bf00      	nop
 8001874:	40020800 	.word	0x40020800
 8001878:	40021800 	.word	0x40021800
 800187c:	40021400 	.word	0x40021400
 8001880:	40021000 	.word	0x40021000
 8001884:	40020c00 	.word	0x40020c00
 8001888:	0801a684 	.word	0x0801a684
 800188c:	20005ac8 	.word	0x20005ac8
 8001890:	20005db0 	.word	0x20005db0
 8001894:	200002d2 	.word	0x200002d2
 8001898:	200002d3 	.word	0x200002d3
 800189c:	200002d4 	.word	0x200002d4
 80018a0:	20000549 	.word	0x20000549
 80018a4:	20005c74 	.word	0x20005c74
 80018a8:	200066b0 	.word	0x200066b0
 80018ac:	0801a698 	.word	0x0801a698
 80018b0:	0801a69c 	.word	0x0801a69c
 80018b4:	20005ef4 	.word	0x20005ef4
 80018b8:	20005b10 	.word	0x20005b10
 80018bc:	20005ee8 	.word	0x20005ee8
 80018c0:	20005e50 	.word	0x20005e50
 80018c4:	0801c1fc 	.word	0x0801c1fc
 80018c8:	08002371 	.word	0x08002371
 80018cc:	20005cec 	.word	0x20005cec
 80018d0:	0801c220 	.word	0x0801c220
 80018d4:	08002455 	.word	0x08002455
 80018d8:	20005e44 	.word	0x20005e44
 80018dc:	0801c244 	.word	0x0801c244
 80018e0:	0800269d 	.word	0x0800269d
 80018e4:	20005e4c 	.word	0x20005e4c
 80018e8:	0801c268 	.word	0x0801c268
 80018ec:	080026b9 	.word	0x080026b9
 80018f0:	20005ee4 	.word	0x20005ee4
 80018f4:	0801c28c 	.word	0x0801c28c
 80018f8:	080027d5 	.word	0x080027d5
 80018fc:	20005dd4 	.word	0x20005dd4
 8001900:	0801c2b0 	.word	0x0801c2b0
 8001904:	080027e5 	.word	0x080027e5
 8001908:	20005cd8 	.word	0x20005cd8

0800190c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b094      	sub	sp, #80	; 0x50
 8001910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001912:	f107 0320 	add.w	r3, r7, #32
 8001916:	2230      	movs	r2, #48	; 0x30
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f013 fdae 	bl	801547c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <SystemClock_Config+0xdc>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a2b      	ldr	r2, [pc, #172]	; (80019e8 <SystemClock_Config+0xdc>)
 800193a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
 8001940:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <SystemClock_Config+0xdc>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800194c:	2300      	movs	r3, #0
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	4b26      	ldr	r3, [pc, #152]	; (80019ec <SystemClock_Config+0xe0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <SystemClock_Config+0xe0>)
 8001956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <SystemClock_Config+0xe0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001968:	2309      	movs	r3, #9
 800196a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800196c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001972:	2301      	movs	r3, #1
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001976:	2302      	movs	r3, #2
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001980:	2308      	movs	r3, #8
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001984:	23b4      	movs	r3, #180	; 0xb4
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001988:	2302      	movs	r3, #2
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800198c:	2308      	movs	r3, #8
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	4618      	mov	r0, r3
 8001996:	f007 fd05 	bl	80093a4 <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019a0:	f001 f84c 	bl	8002a3c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019a4:	f007 fcae 	bl	8009304 <HAL_PWREx_EnableOverDrive>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019ae:	f001 f845 	bl	8002a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b2:	230f      	movs	r3, #15
 80019b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b6:	2302      	movs	r3, #2
 80019b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80019c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2105      	movs	r1, #5
 80019d0:	4618      	mov	r0, r3
 80019d2:	f007 ff5f 	bl	8009894 <HAL_RCC_ClockConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019dc:	f001 f82e 	bl	8002a3c <Error_Handler>
  }
}
 80019e0:	bf00      	nop
 80019e2:	3750      	adds	r7, #80	; 0x50
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019f6:	463b      	mov	r3, r7
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a04:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <MX_ADC1_Init+0x9c>)
 8001a06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <MX_ADC1_Init+0xa0>)
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a4e:	480e      	ldr	r0, [pc, #56]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a50:	f005 fc3e 	bl	80072d0 <HAL_ADC_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a5a:	f000 ffef 	bl	8002a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a5e:	2306      	movs	r3, #6
 8001a60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4806      	ldr	r0, [pc, #24]	; (8001a88 <MX_ADC1_Init+0x98>)
 8001a70:	f005 fe10 	bl	8007694 <HAL_ADC_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a7a:	f000 ffdf 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20005cf8 	.word	0x20005cf8
 8001a8c:	40012000 	.word	0x40012000
 8001a90:	0f000001 	.word	0x0f000001

08001a94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <MX_I2C2_Init+0x78>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <MX_I2C2_Init+0x7c>)
 8001aa2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ab6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001ad2:	f006 fb17 	bl	8008104 <HAL_I2C_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001adc:	f000 ffae 	bl	8002a3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4809      	ldr	r0, [pc, #36]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001ae4:	f007 fb03 	bl	80090ee <HAL_I2CEx_ConfigAnalogFilter>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001aee:	f000 ffa5 	bl	8002a3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001af2:	2100      	movs	r1, #0
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <MX_I2C2_Init+0x74>)
 8001af6:	f007 fb36 	bl	8009166 <HAL_I2CEx_ConfigDigitalFilter>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b00:	f000 ff9c 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20005c80 	.word	0x20005c80
 8001b0c:	40005800 	.word	0x40005800
 8001b10:	000186a0 	.word	0x000186a0

08001b14 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <MX_I2C3_Init+0x78>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <MX_I2C3_Init+0x7c>)
 8001b22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b36:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b52:	f006 fad7 	bl	8008104 <HAL_I2C_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b5c:	f000 ff6e 	bl	8002a3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b60:	2100      	movs	r1, #0
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b64:	f007 fac3 	bl	80090ee <HAL_I2CEx_ConfigAnalogFilter>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001b6e:	f000 ff65 	bl	8002a3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b72:	2100      	movs	r1, #0
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <MX_I2C3_Init+0x74>)
 8001b76:	f007 faf6 	bl	8009166 <HAL_I2CEx_ConfigDigitalFilter>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001b80:	f000 ff5c 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20005b10 	.word	0x20005b10
 8001b8c:	40005c00 	.word	0x40005c00
 8001b90:	000186a0 	.word	0x000186a0

08001b94 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_IWDG_Init+0x2c>)
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <MX_IWDG_Init+0x30>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_IWDG_Init+0x2c>)
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_IWDG_Init+0x2c>)
 8001ba6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001baa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <MX_IWDG_Init+0x2c>)
 8001bae:	f007 fb19 	bl	80091e4 <HAL_IWDG_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001bb8:	f000 ff40 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20005c74 	.word	0x20005c74
 8001bc4:	40003000 	.word	0x40003000

08001bc8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b090      	sub	sp, #64	; 0x40
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2228      	movs	r2, #40	; 0x28
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f013 fc47 	bl	801547c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001bf0:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <MX_RTC_Init+0x114>)
 8001bf2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bfa:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001bfc:	227f      	movs	r2, #127	; 0x7f
 8001bfe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c00:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001c02:	22ff      	movs	r2, #255	; 0xff
 8001c04:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c18:	482f      	ldr	r0, [pc, #188]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001c1a:	f008 fa25 	bl	800a068 <HAL_RTC_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001c24:	f000 ff0a 	bl	8002a3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c46:	2201      	movs	r2, #1
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4823      	ldr	r0, [pc, #140]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001c4c:	f008 fa9d 	bl	800a18a <HAL_RTC_SetTime>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001c56:	f000 fef1 	bl	8002a3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c76:	2201      	movs	r2, #1
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4817      	ldr	r0, [pc, #92]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001c7c:	f008 fba0 	bl	800a3c0 <HAL_RTC_SetDate>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001c86:	f000 fed9 	bl	8002a3c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_RTC_Init+0x110>)
 8001cc2:	f008 fc73 	bl	800a5ac <HAL_RTC_SetAlarm_IT>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001ccc:	f000 feb6 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3740      	adds	r7, #64	; 0x40
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20005db0 	.word	0x20005db0
 8001cdc:	40002800 	.word	0x40002800

08001ce0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001ce6:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <MX_SPI2_Init+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d32:	f008 ff6b 	bl	800ac0c <HAL_SPI_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d3c:	f000 fe7e 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20005b64 	.word	0x20005b64
 8001d48:	40003800 	.word	0x40003800

08001d4c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <MX_SPI4_Init+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d5c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d98:	220a      	movs	r2, #10
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	; (8001db0 <MX_SPI4_Init+0x64>)
 8001d9e:	f008 ff35 	bl	800ac0c <HAL_SPI_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001da8:	f000 fe48 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20005d54 	.word	0x20005d54
 8001db4:	40013400 	.word	0x40013400

08001db8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001dbe:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <MX_SPI5_Init+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001dc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dc8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001e04:	220a      	movs	r2, #10
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e08:	4804      	ldr	r0, [pc, #16]	; (8001e1c <MX_SPI5_Init+0x64>)
 8001e0a:	f008 feff 	bl	800ac0c <HAL_SPI_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e14:	f000 fe12 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20005bc0 	.word	0x20005bc0
 8001e20:	40015000 	.word	0x40015000

08001e24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08e      	sub	sp, #56	; 0x38
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e38:	f107 0320 	add.w	r3, r7, #32
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
 8001e50:	615a      	str	r2, [r3, #20]
 8001e52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001e5e:	2259      	movs	r2, #89	; 0x59
 8001e60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001e6a:	f240 128f 	movw	r2, #399	; 0x18f
 8001e6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e76:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e7c:	4823      	ldr	r0, [pc, #140]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001e7e:	f009 fc6d 	bl	800b75c <HAL_TIM_Base_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e88:	f000 fdd8 	bl	8002a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e96:	4619      	mov	r1, r3
 8001e98:	481c      	ldr	r0, [pc, #112]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001e9a:	f00a f87b 	bl	800bf94 <HAL_TIM_ConfigClockSource>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ea4:	f000 fdca 	bl	8002a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ea8:	4818      	ldr	r0, [pc, #96]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001eaa:	f009 fd17 	bl	800b8dc <HAL_TIM_PWM_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001eb4:	f000 fdc2 	bl	8002a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ec0:	f107 0320 	add.w	r3, r7, #32
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4811      	ldr	r0, [pc, #68]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001ec8:	f00a fc64 	bl	800c794 <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ed2:	f000 fdb3 	bl	8002a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed6:	2360      	movs	r3, #96	; 0x60
 8001ed8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001eda:	2364      	movs	r3, #100	; 0x64
 8001edc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2208      	movs	r2, #8
 8001eea:	4619      	mov	r1, r3
 8001eec:	4807      	ldr	r0, [pc, #28]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001eee:	f009 ff8f 	bl	800be10 <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ef8:	f000 fda0 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <MX_TIM2_Init+0xe8>)
 8001efe:	f000 ffbd 	bl	8002e7c <HAL_TIM_MspPostInit>

}
 8001f02:	bf00      	nop
 8001f04:	3738      	adds	r7, #56	; 0x38
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20005e9c 	.word	0x20005e9c

08001f10 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_UART8_Init+0x4c>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <MX_UART8_Init+0x50>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_UART8_Init+0x4c>)
 8001f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f20:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_UART8_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_UART8_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_UART8_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_UART8_Init+0x4c>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_UART8_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_UART8_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_UART8_Init+0x4c>)
 8001f48:	f00a fcb4 	bl	800c8b4 <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001f52:	f000 fd73 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20005ac8 	.word	0x20005ac8
 8001f60:	40007c00 	.word	0x40007c00

08001f64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <MX_USART3_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f9c:	f00a fc8a 	bl	800c8b4 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f000 fd49 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20005c18 	.word	0x20005c18
 8001fb4:	40004800 	.word	0x40004800

08001fb8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_USART6_UART_Init+0x4c>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <MX_USART6_UART_Init+0x50>)
 8001fc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MX_USART6_UART_Init+0x4c>)
 8001fc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_USART6_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_USART6_UART_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_USART6_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_USART6_UART_Init+0x4c>)
 8001fde:	220c      	movs	r2, #12
 8001fe0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_USART6_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_USART6_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_USART6_UART_Init+0x4c>)
 8001ff0:	f00a fc60 	bl	800c8b4 <HAL_UART_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ffa:	f000 fd1f 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20005e50 	.word	0x20005e50
 8002008:	40011400 	.word	0x40011400

0800200c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08e      	sub	sp, #56	; 0x38
 8002010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	4bb5      	ldr	r3, [pc, #724]	; (80022fc <MX_GPIO_Init+0x2f0>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4ab4      	ldr	r2, [pc, #720]	; (80022fc <MX_GPIO_Init+0x2f0>)
 800202c:	f043 0310 	orr.w	r3, r3, #16
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4bb2      	ldr	r3, [pc, #712]	; (80022fc <MX_GPIO_Init+0x2f0>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	4bae      	ldr	r3, [pc, #696]	; (80022fc <MX_GPIO_Init+0x2f0>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4aad      	ldr	r2, [pc, #692]	; (80022fc <MX_GPIO_Init+0x2f0>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4bab      	ldr	r3, [pc, #684]	; (80022fc <MX_GPIO_Init+0x2f0>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	4ba7      	ldr	r3, [pc, #668]	; (80022fc <MX_GPIO_Init+0x2f0>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4aa6      	ldr	r2, [pc, #664]	; (80022fc <MX_GPIO_Init+0x2f0>)
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4ba4      	ldr	r3, [pc, #656]	; (80022fc <MX_GPIO_Init+0x2f0>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	4ba0      	ldr	r3, [pc, #640]	; (80022fc <MX_GPIO_Init+0x2f0>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a9f      	ldr	r2, [pc, #636]	; (80022fc <MX_GPIO_Init+0x2f0>)
 8002080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b9d      	ldr	r3, [pc, #628]	; (80022fc <MX_GPIO_Init+0x2f0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b99      	ldr	r3, [pc, #612]	; (80022fc <MX_GPIO_Init+0x2f0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a98      	ldr	r2, [pc, #608]	; (80022fc <MX_GPIO_Init+0x2f0>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b96      	ldr	r3, [pc, #600]	; (80022fc <MX_GPIO_Init+0x2f0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b92      	ldr	r3, [pc, #584]	; (80022fc <MX_GPIO_Init+0x2f0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a91      	ldr	r2, [pc, #580]	; (80022fc <MX_GPIO_Init+0x2f0>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b8f      	ldr	r3, [pc, #572]	; (80022fc <MX_GPIO_Init+0x2f0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <MX_GPIO_Init+0x2f0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a8a      	ldr	r2, [pc, #552]	; (80022fc <MX_GPIO_Init+0x2f0>)
 80020d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b88      	ldr	r3, [pc, #544]	; (80022fc <MX_GPIO_Init+0x2f0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b84      	ldr	r3, [pc, #528]	; (80022fc <MX_GPIO_Init+0x2f0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a83      	ldr	r2, [pc, #524]	; (80022fc <MX_GPIO_Init+0x2f0>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b81      	ldr	r3, [pc, #516]	; (80022fc <MX_GPIO_Init+0x2f0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f248 4184 	movw	r1, #33924	; 0x8484
 8002108:	487d      	ldr	r0, [pc, #500]	; (8002300 <MX_GPIO_Init+0x2f4>)
 800210a:	f005 ffc9 	bl	80080a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002114:	487b      	ldr	r0, [pc, #492]	; (8002304 <MX_GPIO_Init+0x2f8>)
 8002116:	f005 ffc3 	bl	80080a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002120:	4879      	ldr	r0, [pc, #484]	; (8002308 <MX_GPIO_Init+0x2fc>)
 8002122:	f005 ffbd 	bl	80080a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	2108      	movs	r1, #8
 800212a:	4878      	ldr	r0, [pc, #480]	; (800230c <MX_GPIO_Init+0x300>)
 800212c:	f005 ffb8 	bl	80080a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002130:	2200      	movs	r2, #0
 8002132:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002136:	4876      	ldr	r0, [pc, #472]	; (8002310 <MX_GPIO_Init+0x304>)
 8002138:	f005 ffb2 	bl	80080a0 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 800213c:	2200      	movs	r2, #0
 800213e:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002142:	4874      	ldr	r0, [pc, #464]	; (8002314 <MX_GPIO_Init+0x308>)
 8002144:	f005 ffac 	bl	80080a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002148:	2200      	movs	r2, #0
 800214a:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800214e:	4872      	ldr	r0, [pc, #456]	; (8002318 <MX_GPIO_Init+0x30c>)
 8002150:	f005 ffa6 	bl	80080a0 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8002154:	f248 4384 	movw	r3, #33924	; 0x8484
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215a:	2301      	movs	r3, #1
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216a:	4619      	mov	r1, r3
 800216c:	4864      	ldr	r0, [pc, #400]	; (8002300 <MX_GPIO_Init+0x2f4>)
 800216e:	f005 fdd3 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800217c:	2301      	movs	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	485e      	ldr	r0, [pc, #376]	; (8002304 <MX_GPIO_Init+0x2f8>)
 800218c:	f005 fdc4 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002190:	2301      	movs	r3, #1
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002194:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a2:	4619      	mov	r1, r3
 80021a4:	4858      	ldr	r0, [pc, #352]	; (8002308 <MX_GPIO_Init+0x2fc>)
 80021a6:	f005 fdb7 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 80021aa:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c0:	4619      	mov	r1, r3
 80021c2:	4851      	ldr	r0, [pc, #324]	; (8002308 <MX_GPIO_Init+0x2fc>)
 80021c4:	f005 fda8 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 80021c8:	2308      	movs	r3, #8
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021cc:	2301      	movs	r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80021d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021dc:	4619      	mov	r1, r3
 80021de:	484b      	ldr	r0, [pc, #300]	; (800230c <MX_GPIO_Init+0x300>)
 80021e0:	f005 fd9a 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_PyroTurboValve_LimitSwitch_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin;
 80021e4:	2320      	movs	r3, #32
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e8:	2300      	movs	r3, #0
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_PyroTurboValve_LimitSwitch_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4844      	ldr	r0, [pc, #272]	; (8002308 <MX_GPIO_Init+0x2fc>)
 80021f8:	f005 fd8e 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80021fc:	2302      	movs	r3, #2
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220c:	4619      	mov	r1, r3
 800220e:	4841      	ldr	r0, [pc, #260]	; (8002314 <MX_GPIO_Init+0x308>)
 8002210:	f005 fd82 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8002214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221a:	2300      	movs	r3, #0
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4619      	mov	r1, r3
 8002228:	4836      	ldr	r0, [pc, #216]	; (8002304 <MX_GPIO_Init+0x2f8>)
 800222a:	f005 fd75 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800222e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002234:	2301      	movs	r3, #1
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002244:	4619      	mov	r1, r3
 8002246:	482f      	ldr	r0, [pc, #188]	; (8002304 <MX_GPIO_Init+0x2f8>)
 8002248:	f005 fd66 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 800224c:	f242 4319 	movw	r3, #9241	; 0x2419
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002252:	2300      	movs	r3, #0
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800225a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225e:	4619      	mov	r1, r3
 8002260:	482b      	ldr	r0, [pc, #172]	; (8002310 <MX_GPIO_Init+0x304>)
 8002262:	f005 fd59 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002266:	f645 2326 	movw	r3, #23078	; 0x5a26
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226c:	2301      	movs	r3, #1
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227c:	4619      	mov	r1, r3
 800227e:	4824      	ldr	r0, [pc, #144]	; (8002310 <MX_GPIO_Init+0x304>)
 8002280:	f005 fd4a 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002284:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228a:	2300      	movs	r3, #0
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002296:	4619      	mov	r1, r3
 8002298:	4819      	ldr	r0, [pc, #100]	; (8002300 <MX_GPIO_Init+0x2f4>)
 800229a:	f005 fd3d 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SX_CS_Pin PB8 POWER_ON_EXT_LED_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 800229e:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a4:	2301      	movs	r3, #1
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b4:	4619      	mov	r1, r3
 80022b6:	4817      	ldr	r0, [pc, #92]	; (8002314 <MX_GPIO_Init+0x308>)
 80022b8:	f005 fd2e 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80022bc:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c2:	2301      	movs	r3, #1
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	4810      	ldr	r0, [pc, #64]	; (8002318 <MX_GPIO_Init+0x30c>)
 80022d6:	f005 fd1f 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 80022da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ec:	4619      	mov	r1, r3
 80022ee:	480a      	ldr	r0, [pc, #40]	; (8002318 <MX_GPIO_Init+0x30c>)
 80022f0:	f005 fd12 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80022f4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80022f8:	e010      	b.n	800231c <MX_GPIO_Init+0x310>
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40021000 	.word	0x40021000
 8002304:	40021400 	.word	0x40021400
 8002308:	40020800 	.word	0x40020800
 800230c:	40020000 	.word	0x40020000
 8002310:	40021800 	.word	0x40021800
 8002314:	40020400 	.word	0x40020400
 8002318:	40020c00 	.word	0x40020c00
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800231e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232c:	4619      	mov	r1, r3
 800232e:	480e      	ldr	r0, [pc, #56]	; (8002368 <MX_GPIO_Init+0x35c>)
 8002330:	f005 fcf2 	bl	8007d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_SD_CARD_DETECT_Pin;
 8002334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233a:	2300      	movs	r3, #0
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_SD_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002346:	4619      	mov	r1, r3
 8002348:	4808      	ldr	r0, [pc, #32]	; (800236c <MX_GPIO_Init+0x360>)
 800234a:	f005 fce5 	bl	8007d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2105      	movs	r1, #5
 8002352:	2006      	movs	r0, #6
 8002354:	f005 fca8 	bl	8007ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002358:	2006      	movs	r0, #6
 800235a:	f005 fcc1 	bl	8007ce0 <HAL_NVIC_EnableIRQ>

}
 800235e:	bf00      	nop
 8002360:	3738      	adds	r7, #56	; 0x38
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40021800 	.word	0x40021800
 800236c:	40020800 	.word	0x40020800

08002370 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8002370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002374:	b08a      	sub	sp, #40	; 0x28
 8002376:	af06      	add	r7, sp, #24
 8002378:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 800237a:	f00e fb6f 	bl	8010a5c <osThreadGetId>
 800237e:	4603      	mov	r3, r0
 8002380:	4a29      	ldr	r2, [pc, #164]	; (8002428 <StartMemory0+0xb8>)
 8002382:	6013      	str	r3, [r2, #0]

	#if !MEMORY_THREAD
    osThreadExit();
	#endif

	uint8_t counter = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]

	  /* Infinite loop */
	  for(;;)
	  {
		  //Write data to sd and flash
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 8002388:	4b28      	ldr	r3, [pc, #160]	; (800242c <StartMemory0+0xbc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f8eb 	bl	8000568 <__aeabi_f2d>
 8002392:	4682      	mov	sl, r0
 8002394:	468b      	mov	fp, r1
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <StartMemory0+0xc0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8e4 	bl	8000568 <__aeabi_f2d>
 80023a0:	4604      	mov	r4, r0
 80023a2:	460d      	mov	r5, r1
 80023a4:	4b23      	ldr	r3, [pc, #140]	; (8002434 <StartMemory0+0xc4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8dd 	bl	8000568 <__aeabi_f2d>
 80023ae:	4680      	mov	r8, r0
 80023b0:	4689      	mov	r9, r1
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <StartMemory0+0xc8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8d6 	bl	8000568 <__aeabi_f2d>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023c4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023c8:	e9cd 4500 	strd	r4, r5, [sp]
 80023cc:	4652      	mov	r2, sl
 80023ce:	465b      	mov	r3, fp
 80023d0:	491a      	ldr	r1, [pc, #104]	; (800243c <StartMemory0+0xcc>)
 80023d2:	481b      	ldr	r0, [pc, #108]	; (8002440 <StartMemory0+0xd0>)
 80023d4:	f014 f8d0 	bl	8016578 <siprintf>
		  if (sd_write(&fil, writeBuf) < 0){
 80023d8:	4919      	ldr	r1, [pc, #100]	; (8002440 <StartMemory0+0xd0>)
 80023da:	481a      	ldr	r0, [pc, #104]	; (8002444 <StartMemory0+0xd4>)
 80023dc:	f004 fd82 	bl	8006ee4 <sd_write>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	da10      	bge.n	8002408 <StartMemory0+0x98>

			  //TODO when the sd card bug, it seems that only removing power from it works to reset it.
			  //Otherwise it always give an error. Trying to close and open doesn't work
			  HAL_UART_Transmit(&DEBUG_UART,"TEST\tTEST\tTEST\tTEST\r\n",17,HAL_MAX_DELAY);
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	2211      	movs	r2, #17
 80023ec:	4916      	ldr	r1, [pc, #88]	; (8002448 <StartMemory0+0xd8>)
 80023ee:	4817      	ldr	r0, [pc, #92]	; (800244c <StartMemory0+0xdc>)
 80023f0:	f00a faad 	bl	800c94e <HAL_UART_Transmit>
			  f_close(&fil);
 80023f4:	4813      	ldr	r0, [pc, #76]	; (8002444 <StartMemory0+0xd4>)
 80023f6:	f00d fe05 	bl	8010004 <f_close>
			  sd_open_file(&filename);
 80023fa:	4815      	ldr	r0, [pc, #84]	; (8002450 <StartMemory0+0xe0>)
 80023fc:	f004 fd5a 	bl	8006eb4 <sd_open_file>
			  sd_write(&fil, writeBuf);
 8002400:	490f      	ldr	r1, [pc, #60]	; (8002440 <StartMemory0+0xd0>)
 8002402:	4810      	ldr	r0, [pc, #64]	; (8002444 <StartMemory0+0xd4>)
 8002404:	f004 fd6e 	bl	8006ee4 <sd_write>
		  }

		  if (counter == 50) {
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b32      	cmp	r3, #50	; 0x32
 800240c:	d104      	bne.n	8002418 <StartMemory0+0xa8>
			  f_sync(&fil);
 800240e:	480d      	ldr	r0, [pc, #52]	; (8002444 <StartMemory0+0xd4>)
 8002410:	f00d fd6f 	bl	800fef2 <f_sync>
			  counter = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
		  }
		  counter++;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	3301      	adds	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]

		  osDelay(1000/DATA_FREQ);
 800241e:	2064      	movs	r0, #100	; 0x64
 8002420:	f00e fb8b 	bl	8010b3a <osDelay>
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 8002424:	e7b0      	b.n	8002388 <StartMemory0+0x18>
 8002426:	bf00      	nop
 8002428:	20005c64 	.word	0x20005c64
 800242c:	20005ce0 	.word	0x20005ce0
 8002430:	20005f08 	.word	0x20005f08
 8002434:	20005ce8 	.word	0x20005ce8
 8002438:	20005f04 	.word	0x20005f04
 800243c:	0801a6a0 	.word	0x0801a6a0
 8002440:	200066c0 	.word	0x200066c0
 8002444:	20006aac 	.word	0x20006aac
 8002448:	0801a6b8 	.word	0x0801a6b8
 800244c:	20005ac8 	.word	0x20005ac8
 8002450:	200066b0 	.word	0x200066b0

08002454 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadID[1]=osThreadGetId();
 800245c:	f00e fafe 	bl	8010a5c <osThreadGetId>
 8002460:	4603      	mov	r3, r0
 8002462:	4a81      	ldr	r2, [pc, #516]	; (8002668 <StartEjection1+0x214>)
 8002464:	6053      	str	r3, [r2, #4]

	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	if (ejection_state_flag >= 4)  osThreadExit(); //Ground reached
 8002466:	4b81      	ldr	r3, [pc, #516]	; (800266c <StartEjection1+0x218>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d901      	bls.n	8002472 <StartEjection1+0x1e>
 800246e:	f00e fb5e 	bl	8010b2e <osThreadExit>
	if (wu_flag) osThreadExit(); //WHEN WAKING UP
 8002472:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <StartEjection1+0x21c>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <StartEjection1+0x2a>
 800247a:	f00e fb58 	bl	8010b2e <osThreadExit>

	osDelay(5000); //Let the LPS "warm up" to have a valid pressure_hPa
 800247e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002482:	f00e fb5a 	bl	8010b3a <osDelay>

	  /* Infinite loop */
	  for(;;)
	  {
		  altitude_m = MRT_getAltitude(pressure_hPa);
 8002486:	4b7b      	ldr	r3, [pc, #492]	; (8002674 <StartEjection1+0x220>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eeb0 0a67 	vmov.f32	s0, s15
 8002490:	f001 fd62 	bl	8003f58 <MRT_getAltitude>
 8002494:	eef0 7a40 	vmov.f32	s15, s0
 8002498:	4b77      	ldr	r3, [pc, #476]	; (8002678 <StartEjection1+0x224>)
 800249a:	edc3 7a00 	vstr	s15, [r3]

		  if (MIN_APOGEE <= altitude_m || ejection_state_flag >= 2){
 800249e:	4b76      	ldr	r3, [pc, #472]	; (8002678 <StartEjection1+0x224>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800267c <StartEjection1+0x228>
 80024a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b0:	da04      	bge.n	80024bc <StartEjection1+0x68>
 80024b2:	4b6e      	ldr	r3, [pc, #440]	; (800266c <StartEjection1+0x218>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	f240 80d1 	bls.w	800265e <StartEjection1+0x20a>

			  if (ejection_state_flag < 2){
 80024bc:	4b6b      	ldr	r3, [pc, #428]	; (800266c <StartEjection1+0x218>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d839      	bhi.n	8002538 <StartEjection1+0xe4>

				  //Update state (saved state in WatchDog thread)
				  ejection_state_flag = 2;
 80024c4:	4b69      	ldr	r3, [pc, #420]	; (800266c <StartEjection1+0x218>)
 80024c6:	2202      	movs	r2, #2
 80024c8:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 80024ca:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <StartEjection1+0x22c>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]

				  HAL_UART_Transmit(&DEBUG_UART, "Eject Drogue\r\n", 15, HAL_MAX_DELAY);
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
 80024d4:	220f      	movs	r2, #15
 80024d6:	496b      	ldr	r1, [pc, #428]	; (8002684 <StartEjection1+0x230>)
 80024d8:	486b      	ldr	r0, [pc, #428]	; (8002688 <StartEjection1+0x234>)
 80024da:	f00a fa38 	bl	800c94e <HAL_UART_Transmit>

				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80024de:	e005      	b.n	80024ec <StartEjection1+0x98>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 80024e0:	2201      	movs	r2, #1
 80024e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024e6:	4869      	ldr	r0, [pc, #420]	; (800268c <StartEjection1+0x238>)
 80024e8:	f005 fdda 	bl	80080a0 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80024ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024f0:	4866      	ldr	r0, [pc, #408]	; (800268c <StartEjection1+0x238>)
 80024f2:	f005 fdbd 	bl	8008070 <HAL_GPIO_ReadPin>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f1      	beq.n	80024e0 <StartEjection1+0x8c>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 80024fc:	e005      	b.n	800250a <StartEjection1+0xb6>
					  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 80024fe:	2201      	movs	r2, #1
 8002500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002504:	4861      	ldr	r0, [pc, #388]	; (800268c <StartEjection1+0x238>)
 8002506:	f005 fdcb 	bl	80080a0 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 800250a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800250e:	485f      	ldr	r0, [pc, #380]	; (800268c <StartEjection1+0x238>)
 8002510:	f005 fdae 	bl	8008070 <HAL_GPIO_ReadPin>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f1      	beq.n	80024fe <StartEjection1+0xaa>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800251a:	e005      	b.n	8002528 <StartEjection1+0xd4>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002522:	485a      	ldr	r0, [pc, #360]	; (800268c <StartEjection1+0x238>)
 8002524:	f005 fdbc 	bl	80080a0 <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8002528:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800252c:	4857      	ldr	r0, [pc, #348]	; (800268c <StartEjection1+0x238>)
 800252e:	f005 fd9f 	bl	8008070 <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f1      	bne.n	800251c <StartEjection1+0xc8>
				  }
			  }

			  for(;;){

				  altitude_m = MRT_getAltitude(pressure_hPa);
 8002538:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <StartEjection1+0x220>)
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	eeb0 0a67 	vmov.f32	s0, s15
 8002542:	f001 fd09 	bl	8003f58 <MRT_getAltitude>
 8002546:	eef0 7a40 	vmov.f32	s15, s0
 800254a:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <StartEjection1+0x224>)
 800254c:	edc3 7a00 	vstr	s15, [r3]

				  //We reached main deployment altitude
				  if (altitude_m<DEPLOY_ALT_MAX || ejection_state_flag >= 3){
 8002550:	4b49      	ldr	r3, [pc, #292]	; (8002678 <StartEjection1+0x224>)
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002690 <StartEjection1+0x23c>
 800255a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	d403      	bmi.n	800256c <StartEjection1+0x118>
 8002564:	4b41      	ldr	r3, [pc, #260]	; (800266c <StartEjection1+0x218>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d974      	bls.n	8002656 <StartEjection1+0x202>


					  if (ejection_state_flag < 3){
 800256c:	4b3f      	ldr	r3, [pc, #252]	; (800266c <StartEjection1+0x218>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d839      	bhi.n	80025e8 <StartEjection1+0x194>

						  //Update state (saved state in WatchDog thread)
						  ejection_state_flag = 3;
 8002574:	4b3d      	ldr	r3, [pc, #244]	; (800266c <StartEjection1+0x218>)
 8002576:	2203      	movs	r2, #3
 8002578:	701a      	strb	r2, [r3, #0]
						  wd_ejection_flag = 1;
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <StartEjection1+0x22c>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]

						  HAL_UART_Transmit(&DEBUG_UART, "Eject Main\r\n", 13, HAL_MAX_DELAY);
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	220d      	movs	r2, #13
 8002586:	4943      	ldr	r1, [pc, #268]	; (8002694 <StartEjection1+0x240>)
 8002588:	483f      	ldr	r0, [pc, #252]	; (8002688 <StartEjection1+0x234>)
 800258a:	f00a f9e0 	bl	800c94e <HAL_UART_Transmit>

						  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800258e:	e005      	b.n	800259c <StartEjection1+0x148>
							  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8002590:	2201      	movs	r2, #1
 8002592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002596:	483d      	ldr	r0, [pc, #244]	; (800268c <StartEjection1+0x238>)
 8002598:	f005 fd82 	bl	80080a0 <HAL_GPIO_WritePin>
						  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800259c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025a0:	483a      	ldr	r0, [pc, #232]	; (800268c <StartEjection1+0x238>)
 80025a2:	f005 fd65 	bl	8008070 <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f1      	beq.n	8002590 <StartEjection1+0x13c>
						  }
						  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 80025ac:	e005      	b.n	80025ba <StartEjection1+0x166>
							  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 80025ae:	2201      	movs	r2, #1
 80025b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b4:	4835      	ldr	r0, [pc, #212]	; (800268c <StartEjection1+0x238>)
 80025b6:	f005 fd73 	bl	80080a0 <HAL_GPIO_WritePin>
						  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 80025ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025be:	4833      	ldr	r0, [pc, #204]	; (800268c <StartEjection1+0x238>)
 80025c0:	f005 fd56 	bl	8008070 <HAL_GPIO_ReadPin>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f1      	beq.n	80025ae <StartEjection1+0x15a>
						  }
						  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80025ca:	e005      	b.n	80025d8 <StartEjection1+0x184>
							  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025d2:	482e      	ldr	r0, [pc, #184]	; (800268c <StartEjection1+0x238>)
 80025d4:	f005 fd64 	bl	80080a0 <HAL_GPIO_WritePin>
						  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80025d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025dc:	482b      	ldr	r0, [pc, #172]	; (800268c <StartEjection1+0x238>)
 80025de:	f005 fd47 	bl	8008070 <HAL_GPIO_ReadPin>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f1      	bne.n	80025cc <StartEjection1+0x178>
						  }
					  }

					  uint8_t prev_altitude = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
					  uint8_t cur_altitude = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	737b      	strb	r3, [r7, #13]
					  uint8_t counter = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73bb      	strb	r3, [r7, #14]
					  while(counter < 5){
 80025f4:	e01d      	b.n	8002632 <StartEjection1+0x1de>
						  cur_altitude = MRT_getAltitude(pressure_hPa);
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <StartEjection1+0x220>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002600:	f001 fcaa 	bl	8003f58 <MRT_getAltitude>
 8002604:	eef0 7a40 	vmov.f32	s15, s0
 8002608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260c:	edc7 7a00 	vstr	s15, [r7]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	737b      	strb	r3, [r7, #13]
						  if (cur_altitude - prev_altitude == 0){ //TODO might need a bigger range
 8002614:	7b7a      	ldrb	r2, [r7, #13]
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	429a      	cmp	r2, r3
 800261a:	d103      	bne.n	8002624 <StartEjection1+0x1d0>
							  counter++;
 800261c:	7bbb      	ldrb	r3, [r7, #14]
 800261e:	3301      	adds	r3, #1
 8002620:	73bb      	strb	r3, [r7, #14]
 8002622:	e001      	b.n	8002628 <StartEjection1+0x1d4>
						  }
						  else{
							  counter = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	73bb      	strb	r3, [r7, #14]
						  }
						  prev_altitude = cur_altitude;
 8002628:	7b7b      	ldrb	r3, [r7, #13]
 800262a:	73fb      	strb	r3, [r7, #15]
						  osDelay(100);
 800262c:	2064      	movs	r0, #100	; 0x64
 800262e:	f00e fa84 	bl	8010b3a <osDelay>
					  while(counter < 5){
 8002632:	7bbb      	ldrb	r3, [r7, #14]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d9de      	bls.n	80025f6 <StartEjection1+0x1a2>
					  }

					  //Update state (saved state in WatchDog thread)
					  ejection_state_flag = 4;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <StartEjection1+0x218>)
 800263a:	2204      	movs	r2, #4
 800263c:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1;
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <StartEjection1+0x22c>)
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]

					  HAL_UART_Transmit(&DEBUG_UART, "Ground Level Reached\r\n", 22, HAL_MAX_DELAY);
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	2216      	movs	r2, #22
 800264a:	4913      	ldr	r1, [pc, #76]	; (8002698 <StartEjection1+0x244>)
 800264c:	480e      	ldr	r0, [pc, #56]	; (8002688 <StartEjection1+0x234>)
 800264e:	f00a f97e 	bl	800c94e <HAL_UART_Transmit>
					  osThreadExit();
 8002652:	f00e fa6c 	bl	8010b2e <osThreadExit>

				  }

				  osDelay(100);
 8002656:	2064      	movs	r0, #100	; 0x64
 8002658:	f00e fa6f 	bl	8010b3a <osDelay>
				  altitude_m = MRT_getAltitude(pressure_hPa);
 800265c:	e76c      	b.n	8002538 <StartEjection1+0xe4>
			  }
		  }

	    osDelay(100);
 800265e:	2064      	movs	r0, #100	; 0x64
 8002660:	f00e fa6b 	bl	8010b3a <osDelay>
		  altitude_m = MRT_getAltitude(pressure_hPa);
 8002664:	e70f      	b.n	8002486 <StartEjection1+0x32>
 8002666:	bf00      	nop
 8002668:	20005c64 	.word	0x20005c64
 800266c:	200002d1 	.word	0x200002d1
 8002670:	20000549 	.word	0x20000549
 8002674:	2000029c 	.word	0x2000029c
 8002678:	200002c0 	.word	0x200002c0
 800267c:	42f00000 	.word	0x42f00000
 8002680:	200002c4 	.word	0x200002c4
 8002684:	0801a6d0 	.word	0x0801a6d0
 8002688:	20005ac8 	.word	0x20005ac8
 800268c:	40021800 	.word	0x40021800
 8002690:	42820000 	.word	0x42820000
 8002694:	0801a6e0 	.word	0x0801a6e0
 8002698:	0801a6f0 	.word	0x0801a6f0

0800269c <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 80026a4:	f00e f9da 	bl	8010a5c <osThreadGetId>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4a02      	ldr	r2, [pc, #8]	; (80026b4 <StartTelemetry2+0x18>)
 80026ac:	6093      	str	r3, [r2, #8]

	#if !TELEMETRY_THREAD
	osThreadExit();
 80026ae:	f00e fa3e 	bl	8010b2e <osThreadExit>
 80026b2:	bf00      	nop
 80026b4:	20005c64 	.word	0x20005c64

080026b8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 80026c0:	f00e f9cc 	bl	8010a5c <osThreadGetId>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4a31      	ldr	r2, [pc, #196]	; (800278c <StartSensors3+0xd4>)
 80026c8:	60d3      	str	r3, [r2, #12]

	#if !SENSORS_THREAD
	osThreadExit();
	#endif

	uint8_t counter = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80026ce:	2201      	movs	r2, #1
 80026d0:	2102      	movs	r1, #2
 80026d2:	482f      	ldr	r0, [pc, #188]	; (8002790 <StartSensors3+0xd8>)
 80026d4:	f005 fce4 	bl	80080a0 <HAL_GPIO_WritePin>

	  if (counter == SENSORS_POLL_FREQ_DIVIDER){
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b0a      	cmp	r3, #10
 80026dc:	d12b      	bne.n	8002736 <StartSensors3+0x7e>
		  counter=0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]

		  //GPS
		  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 80026e2:	4a2c      	ldr	r2, [pc, #176]	; (8002794 <StartSensors3+0xdc>)
 80026e4:	492c      	ldr	r1, [pc, #176]	; (8002798 <StartSensors3+0xe0>)
 80026e6:	482d      	ldr	r0, [pc, #180]	; (800279c <StartSensors3+0xe4>)
 80026e8:	f000 fe4c 	bl	8003384 <GPS_Poll>

	  	  //LSM6DSR
	  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80026ec:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <StartSensors3+0xe8>)
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <StartSensors3+0xec>)
 80026f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026f2:	f7fe fd8d 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
	  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80026f6:	4a2a      	ldr	r2, [pc, #168]	; (80027a0 <StartSensors3+0xe8>)
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <StartSensors3+0xf0>)
 80026fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80026fc:	f7fe fdf8 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
		  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 8002700:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <StartSensors3+0xe8>)
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <StartSensors3+0xf4>)
 8002704:	ca07      	ldmia	r2, {r0, r1, r2}
 8002706:	f7fe fdc9 	bl	800129c <MRT_LSM6DSR_getTemperature>

		  //LPS22HH
		  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 800270a:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <StartSensors3+0xf8>)
 800270c:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <StartSensors3+0xfc>)
 800270e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002710:	f7fe ff18 	bl	8001544 <MRT_LPS22HH_getTemperature>
		  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <StartSensors3+0xf8>)
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <StartSensors3+0x100>)
 8002718:	ca07      	ldmia	r2, {r0, r1, r2}
 800271a:	f7fe fee7 	bl	80014ec <MRT_LPS22HH_getPressure>
		  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <StartSensors3+0x100>)
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	eeb0 0a67 	vmov.f32	s0, s15
 8002728:	f001 fc16 	bl	8003f58 <MRT_getAltitude>
 800272c:	eef0 7a40 	vmov.f32	s15, s0
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <StartSensors3+0x104>)
 8002732:	edc3 7a00 	vstr	s15, [r3]
	  }
	  counter++;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	3301      	adds	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]


	  if(apogee_flag == 0){
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <StartSensors3+0x108>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <StartSensors3+0xb0>
		  //Poll propulsion sensors

		  //Thermocouple
		  Max31855_Read_Temp();
 8002744:	f004 fa80 	bl	8006c48 <Max31855_Read_Temp>

		  //Pressure tank
		  transducer_pressure = MRT_prop_poll_pressure_transducer(&hadc1);
 8002748:	481e      	ldr	r0, [pc, #120]	; (80027c4 <StartSensors3+0x10c>)
 800274a:	f001 fbc1 	bl	8003ed0 <MRT_prop_poll_pressure_transducer>
 800274e:	eef0 7a40 	vmov.f32	s15, s0
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <StartSensors3+0x110>)
 8002754:	edc3 7a00 	vstr	s15, [r3]

		  //Valve status
		  valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 8002758:	2102      	movs	r1, #2
 800275a:	481c      	ldr	r0, [pc, #112]	; (80027cc <StartSensors3+0x114>)
 800275c:	f005 fc88 	bl	8008070 <HAL_GPIO_ReadPin>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <StartSensors3+0x118>)
 8002766:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	2102      	movs	r1, #2
 800276c:	4808      	ldr	r0, [pc, #32]	; (8002790 <StartSensors3+0xd8>)
 800276e:	f005 fc97 	bl	80080a0 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <StartSensors3+0x108>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <StartSensors3+0xca>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 800277a:	200a      	movs	r0, #10
 800277c:	f00e f9dd 	bl	8010b3a <osDelay>
 8002780:	e7a5      	b.n	80026ce <StartSensors3+0x16>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8002782:	2014      	movs	r0, #20
 8002784:	f00e f9d9 	bl	8010b3a <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002788:	e7a1      	b.n	80026ce <StartSensors3+0x16>
 800278a:	bf00      	nop
 800278c:	20005c64 	.word	0x20005c64
 8002790:	40020800 	.word	0x40020800
 8002794:	20005e3c 	.word	0x20005e3c
 8002798:	20005d40 	.word	0x20005d40
 800279c:	20005dac 	.word	0x20005dac
 80027a0:	20005ef4 	.word	0x20005ef4
 80027a4:	200002a4 	.word	0x200002a4
 80027a8:	200002b0 	.word	0x200002b0
 80027ac:	200002bc 	.word	0x200002bc
 80027b0:	20005ee8 	.word	0x20005ee8
 80027b4:	200002a0 	.word	0x200002a0
 80027b8:	2000029c 	.word	0x2000029c
 80027bc:	200002c0 	.word	0x200002c0
 80027c0:	200002d0 	.word	0x200002d0
 80027c4:	20005cf8 	.word	0x20005cf8
 80027c8:	20005dd0 	.word	0x20005dd0
 80027cc:	40020400 	.word	0x40020400
 80027d0:	20005e48 	.word	0x20005e48

080027d4 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0c2      	sub	sp, #264	; 0x108
 80027d8:	af00      	add	r7, sp, #0
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	#if !PRINTING_THREAD
	osThreadExit();
 80027de:	f00e f9a6 	bl	8010b2e <osThreadExit>
	...

080027e4 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 80027e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e8:	b0c8      	sub	sp, #288	; 0x120
 80027ea:	af04      	add	r7, sp, #16
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	6018      	str	r0, [r3, #0]
	osThreadState_t thread_state;

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 80027f0:	2201      	movs	r2, #1
 80027f2:	2104      	movs	r1, #4
 80027f4:	4875      	ldr	r0, [pc, #468]	; (80029cc <StartWatchDog+0x1e8>)
 80027f6:	f005 fc53 	bl	80080a0 <HAL_GPIO_WritePin>

	#if IWDG_ACTIVE
	HAL_IWDG_Refresh(&hiwdg);
 80027fa:	4875      	ldr	r0, [pc, #468]	; (80029d0 <StartWatchDog+0x1ec>)
 80027fc:	f006 fd34 	bl	8009268 <HAL_IWDG_Refresh>
	#endif

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002800:	2200      	movs	r2, #0
 8002802:	4974      	ldr	r1, [pc, #464]	; (80029d4 <StartWatchDog+0x1f0>)
 8002804:	4874      	ldr	r0, [pc, #464]	; (80029d8 <StartWatchDog+0x1f4>)
 8002806:	f007 fd7d 	bl	800a304 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800280a:	2200      	movs	r2, #0
 800280c:	4973      	ldr	r1, [pc, #460]	; (80029dc <StartWatchDog+0x1f8>)
 800280e:	4872      	ldr	r0, [pc, #456]	; (80029d8 <StartWatchDog+0x1f4>)
 8002810:	f007 fe7d 	bl	800a50e <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 8002814:	4b6f      	ldr	r3, [pc, #444]	; (80029d4 <StartWatchDog+0x1f0>)
 8002816:	781a      	ldrb	r2, [r3, #0]
 8002818:	4b71      	ldr	r3, [pc, #452]	; (80029e0 <StartWatchDog+0x1fc>)
 800281a:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 800281c:	4b6d      	ldr	r3, [pc, #436]	; (80029d4 <StartWatchDog+0x1f0>)
 800281e:	785a      	ldrb	r2, [r3, #1]
 8002820:	4b70      	ldr	r3, [pc, #448]	; (80029e4 <StartWatchDog+0x200>)
 8002822:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 8002824:	4b6b      	ldr	r3, [pc, #428]	; (80029d4 <StartWatchDog+0x1f0>)
 8002826:	789a      	ldrb	r2, [r3, #2]
 8002828:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <StartWatchDog+0x204>)
 800282a:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++;
 800282c:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <StartWatchDog+0x1f4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <StartWatchDog+0x62>
 800283a:	4b6b      	ldr	r3, [pc, #428]	; (80029e8 <StartWatchDog+0x204>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b69      	ldr	r3, [pc, #420]	; (80029e8 <StartWatchDog+0x204>)
 8002844:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <StartWatchDog+0x1f0>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b67      	ldr	r3, [pc, #412]	; (80029ec <StartWatchDog+0x208>)
 800284e:	701a      	strb	r2, [r3, #0]

	 memset(buffer, 0, TX_BUF_DIM);
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f012 fe0e 	bl	801547c <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%i	Altitude: \r\n %f\r\n", prev_hours,prev_min,prev_sec,prev_subsec , altitude_m);
 8002860:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <StartWatchDog+0x1fc>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461e      	mov	r6, r3
 8002866:	4b5f      	ldr	r3, [pc, #380]	; (80029e4 <StartWatchDog+0x200>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	4698      	mov	r8, r3
 800286c:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <StartWatchDog+0x204>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	461c      	mov	r4, r3
 8002872:	4b5e      	ldr	r3, [pc, #376]	; (80029ec <StartWatchDog+0x208>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461d      	mov	r5, r3
 8002878:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <StartWatchDog+0x20c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe73 	bl	8000568 <__aeabi_f2d>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	f107 0008 	add.w	r0, r7, #8
 800288a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800288e:	9501      	str	r5, [sp, #4]
 8002890:	9400      	str	r4, [sp, #0]
 8002892:	4643      	mov	r3, r8
 8002894:	4632      	mov	r2, r6
 8002896:	4957      	ldr	r1, [pc, #348]	; (80029f4 <StartWatchDog+0x210>)
 8002898:	f013 fe6e 	bl	8016578 <siprintf>
	 HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fca5 	bl	80001f0 <strlen>
 80028a6:	4603      	mov	r3, r0
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	f107 0108 	add.w	r1, r7, #8
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	4851      	ldr	r0, [pc, #324]	; (80029f8 <StartWatchDog+0x214>)
 80028b4:	f00a f84b 	bl	800c94e <HAL_UART_Transmit>


	 if(wd_ejection_flag){
 80028b8:	4b50      	ldr	r3, [pc, #320]	; (80029fc <StartWatchDog+0x218>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01a      	beq.n	80028f6 <StartWatchDog+0x112>
		 wd_ejection_flag = 0;
 80028c0:	4b4e      	ldr	r3, [pc, #312]	; (80029fc <StartWatchDog+0x218>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
		 flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 80028c6:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <StartWatchDog+0x21c>)
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	4b4e      	ldr	r3, [pc, #312]	; (8002a04 <StartWatchDog+0x220>)
 80028cc:	711a      	strb	r2, [r3, #4]

		 if (ejection_state_flag == 2){
 80028ce:	4b4c      	ldr	r3, [pc, #304]	; (8002a00 <StartWatchDog+0x21c>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d106      	bne.n	80028e4 <StartWatchDog+0x100>
			 apogee_flag = 1;
 80028d6:	4b4c      	ldr	r3, [pc, #304]	; (8002a08 <StartWatchDog+0x224>)
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
			 flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 80028dc:	4b4a      	ldr	r3, [pc, #296]	; (8002a08 <StartWatchDog+0x224>)
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	4b48      	ldr	r3, [pc, #288]	; (8002a04 <StartWatchDog+0x220>)
 80028e2:	70da      	strb	r2, [r3, #3]
		 }

		 W25qxx_EraseSector(1);
 80028e4:	2001      	movs	r0, #1
 80028e6:	f001 fe53 	bl	8004590 <W25qxx_EraseSector>
		 W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80028ea:	2305      	movs	r3, #5
 80028ec:	2200      	movs	r2, #0
 80028ee:	2101      	movs	r1, #1
 80028f0:	4844      	ldr	r0, [pc, #272]	; (8002a04 <StartWatchDog+0x220>)
 80028f2:	f001 ff97 	bl	8004824 <W25qxx_WriteSector>
	   * Moved the other code where we write to external flash to this thread (when going to sleep)
	   *
	   * TAKE CARE OF SETUP HARDFAULT IN stm32f4xx_it.c
	   */
	  //Save the time
	  MRT_saveRTCTime();
 80028f6:	f001 fad7 	bl	8003ea8 <MRT_saveRTCTime>

	  //Check if it's sleep time
	  if (flagA==1){
 80028fa:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <StartWatchDog+0x228>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d111      	bne.n	8002926 <StartWatchDog+0x142>
		//Update iwdg_flag
		iwdg_flag = 1;
 8002902:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <StartWatchDog+0x22c>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002908:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <StartWatchDog+0x22c>)
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <StartWatchDog+0x220>)
 800290e:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8002910:	2001      	movs	r0, #1
 8002912:	f001 fe3d 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002916:	2305      	movs	r3, #5
 8002918:	2200      	movs	r2, #0
 800291a:	2101      	movs	r1, #1
 800291c:	4839      	ldr	r0, [pc, #228]	; (8002a04 <StartWatchDog+0x220>)
 800291e:	f001 ff81 	bl	8004824 <W25qxx_WriteSector>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8002922:	f7fe fe73 	bl	800160c <__NVIC_SystemReset>
	  }


	  //Check each thread state
	  #if THREAD_KEEPER
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800292c:	e040      	b.n	80029b0 <StartWatchDog+0x1cc>
		  thread_state = osThreadGetState(threadID[i]);
 800292e:	4a39      	ldr	r2, [pc, #228]	; (8002a14 <StartWatchDog+0x230>)
 8002930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	4618      	mov	r0, r3
 800293a:	f00e f89b 	bl	8010a74 <osThreadGetState>
 800293e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108

		  if (thread_state == osThreadInactive ||
 8002942:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <StartWatchDog+0x176>
 800294a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800294e:	2b03      	cmp	r3, #3
 8002950:	d003      	beq.n	800295a <StartWatchDog+0x176>
		      thread_state == osThreadBlocked  ||
 8002952:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002956:	2b04      	cmp	r3, #4
 8002958:	d11d      	bne.n	8002996 <StartWatchDog+0x1b2>
		      thread_state == osThreadTerminated){
			  if (i==1 && ejection_state_flag < 4){
 800295a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10c      	bne.n	800297c <StartWatchDog+0x198>
 8002962:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <StartWatchDog+0x21c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d808      	bhi.n	800297c <StartWatchDog+0x198>
				 osThreadResume(threadID[i]);
 800296a:	4a2a      	ldr	r2, [pc, #168]	; (8002a14 <StartWatchDog+0x230>)
 800296c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	4618      	mov	r0, r3
 8002976:	f00e f8b9 	bl	8010aec <osThreadResume>
			  if (i==1 && ejection_state_flag < 4){
 800297a:	e013      	b.n	80029a4 <StartWatchDog+0x1c0>
			  }
			  else if (i!=1){
 800297c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d00f      	beq.n	80029a4 <StartWatchDog+0x1c0>
				 osThreadResume(threadID[i]);
 8002984:	4a23      	ldr	r2, [pc, #140]	; (8002a14 <StartWatchDog+0x230>)
 8002986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800298a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298e:	4618      	mov	r0, r3
 8002990:	f00e f8ac 	bl	8010aec <osThreadResume>
			  if (i==1 && ejection_state_flag < 4){
 8002994:	e006      	b.n	80029a4 <StartWatchDog+0x1c0>
			  }
		  }

		  else if (thread_state == osThreadError){
 8002996:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299e:	d102      	bne.n	80029a6 <StartWatchDog+0x1c2>
			  NVIC_SystemReset();
 80029a0:	f7fe fe34 	bl	800160c <__NVIC_SystemReset>
			  if (i==1 && ejection_state_flag < 4){
 80029a4:	bf00      	nop
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 80029a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029aa:	3301      	adds	r3, #1
 80029ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80029b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	ddba      	ble.n	800292e <StartWatchDog+0x14a>
		  }
		  */
	  }
	  #endif

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2104      	movs	r1, #4
 80029bc:	4803      	ldr	r0, [pc, #12]	; (80029cc <StartWatchDog+0x1e8>)
 80029be:	f005 fb6f 	bl	80080a0 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 80029c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029c6:	f00e f8b8 	bl	8010b3a <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 80029ca:	e711      	b.n	80027f0 <StartWatchDog+0xc>
 80029cc:	40020800 	.word	0x40020800
 80029d0:	20005c74 	.word	0x20005c74
 80029d4:	20000508 	.word	0x20000508
 80029d8:	20005db0 	.word	0x20005db0
 80029dc:	2000051c 	.word	0x2000051c
 80029e0:	200002d2 	.word	0x200002d2
 80029e4:	200002d3 	.word	0x200002d3
 80029e8:	200002d4 	.word	0x200002d4
 80029ec:	200002d5 	.word	0x200002d5
 80029f0:	200002c0 	.word	0x200002c0
 80029f4:	0801a708 	.word	0x0801a708
 80029f8:	20005ac8 	.word	0x20005ac8
 80029fc:	200002c4 	.word	0x200002c4
 8002a00:	200002d1 	.word	0x200002d1
 8002a04:	20005c5c 	.word	0x20005c5c
 8002a08:	200002d0 	.word	0x200002d0
 8002a0c:	20000548 	.word	0x20000548
 8002a10:	200002cf 	.word	0x200002cf
 8002a14:	20005c64 	.word	0x20005c64

08002a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a2a:	f004 fc0d 	bl	8007248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40001000 	.word	0x40001000

08002a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_MspInit+0x54>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <HAL_MspInit+0x54>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_MspInit+0x54>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_MspInit+0x54>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_MspInit+0x54>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_MspInit+0x54>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	210f      	movs	r1, #15
 8002a8e:	f06f 0001 	mvn.w	r0, #1
 8002a92:	f005 f909 	bl	8007ca8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_ADC_MspInit+0x7c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d127      	bne.n	8002b16 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_ADC_MspInit+0x80>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <HAL_ADC_MspInit+0x80>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_ADC_MspInit+0x80>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_ADC_MspInit+0x80>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <HAL_ADC_MspInit+0x80>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_ADC_MspInit+0x80>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002afe:	2340      	movs	r3, #64	; 0x40
 8002b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b02:	2303      	movs	r3, #3
 8002b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4805      	ldr	r0, [pc, #20]	; (8002b28 <HAL_ADC_MspInit+0x84>)
 8002b12:	f005 f901 	bl	8007d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b16:	bf00      	nop
 8002b18:	3728      	adds	r7, #40	; 0x28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40012000 	.word	0x40012000
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020000 	.word	0x40020000

08002b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08c      	sub	sp, #48	; 0x30
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 031c 	add.w	r3, r7, #28
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a42      	ldr	r2, [pc, #264]	; (8002c54 <HAL_I2C_MspInit+0x128>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d12d      	bne.n	8002baa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a40      	ldr	r2, [pc, #256]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b70:	2312      	movs	r3, #18
 8002b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b74:	2301      	movs	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b80:	f107 031c 	add.w	r3, r7, #28
 8002b84:	4619      	mov	r1, r3
 8002b86:	4835      	ldr	r0, [pc, #212]	; (8002c5c <HAL_I2C_MspInit+0x130>)
 8002b88:	f005 f8c6 	bl	8007d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	4a30      	ldr	r2, [pc, #192]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002b96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9c:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ba8:	e050      	b.n	8002c4c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <HAL_I2C_MspInit+0x134>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d14b      	bne.n	8002c4c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a26      	ldr	r2, [pc, #152]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6313      	str	r3, [r2, #48]	; 0x30
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf2:	2312      	movs	r3, #18
 8002bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bfe:	2304      	movs	r3, #4
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	4619      	mov	r1, r3
 8002c08:	4816      	ldr	r0, [pc, #88]	; (8002c64 <HAL_I2C_MspInit+0x138>)
 8002c0a:	f005 f885 	bl	8007d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c14:	2312      	movs	r3, #18
 8002c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c20:	2304      	movs	r3, #4
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c24:	f107 031c 	add.w	r3, r7, #28
 8002c28:	4619      	mov	r1, r3
 8002c2a:	480f      	ldr	r0, [pc, #60]	; (8002c68 <HAL_I2C_MspInit+0x13c>)
 8002c2c:	f005 f874 	bl	8007d18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002c3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_I2C_MspInit+0x12c>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	3730      	adds	r7, #48	; 0x30
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40005800 	.word	0x40005800
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40005c00 	.word	0x40005c00
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020000 	.word	0x40020000

08002c6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08e      	sub	sp, #56	; 0x38
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c74:	f107 0308 	add.w	r3, r7, #8
 8002c78:	2230      	movs	r2, #48	; 0x30
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f012 fbfd 	bl	801547c <memset>
  if(hrtc->Instance==RTC)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <HAL_RTC_MspInit+0x5c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d119      	bne.n	8002cc0 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f007 f826 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002ca6:	f7ff fec9 	bl	8002a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_RTC_MspInit+0x60>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2105      	movs	r1, #5
 8002cb4:	2029      	movs	r0, #41	; 0x29
 8002cb6:	f004 fff7 	bl	8007ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002cba:	2029      	movs	r0, #41	; 0x29
 8002cbc:	f005 f810 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002cc0:	bf00      	nop
 8002cc2:	3738      	adds	r7, #56	; 0x38
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40002800 	.word	0x40002800
 8002ccc:	42470e3c 	.word	0x42470e3c

08002cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08e      	sub	sp, #56	; 0x38
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a4c      	ldr	r2, [pc, #304]	; (8002e20 <HAL_SPI_MspInit+0x150>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d12d      	bne.n	8002d4e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
 8002cf6:	4b4b      	ldr	r3, [pc, #300]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a4a      	ldr	r2, [pc, #296]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b48      	ldr	r3, [pc, #288]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	4b44      	ldr	r3, [pc, #272]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a43      	ldr	r2, [pc, #268]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d2a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d3c:	2305      	movs	r3, #5
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d44:	4619      	mov	r1, r3
 8002d46:	4838      	ldr	r0, [pc, #224]	; (8002e28 <HAL_SPI_MspInit+0x158>)
 8002d48:	f004 ffe6 	bl	8007d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002d4c:	e064      	b.n	8002e18 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a36      	ldr	r2, [pc, #216]	; (8002e2c <HAL_SPI_MspInit+0x15c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d12d      	bne.n	8002db4 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	4a30      	ldr	r2, [pc, #192]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002d62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d66:	6453      	str	r3, [r2, #68]	; 0x44
 8002d68:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002d7e:	f043 0310 	orr.w	r3, r3, #16
 8002d82:	6313      	str	r3, [r2, #48]	; 0x30
 8002d84:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002d90:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002da2:	2305      	movs	r3, #5
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002daa:	4619      	mov	r1, r3
 8002dac:	4820      	ldr	r0, [pc, #128]	; (8002e30 <HAL_SPI_MspInit+0x160>)
 8002dae:	f004 ffb3 	bl	8007d18 <HAL_GPIO_Init>
}
 8002db2:	e031      	b.n	8002e18 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <HAL_SPI_MspInit+0x164>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d12c      	bne.n	8002e18 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dce:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a10      	ldr	r2, [pc, #64]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002de4:	f043 0320 	orr.w	r3, r3, #32
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_SPI_MspInit+0x154>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002df6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e00:	2301      	movs	r3, #1
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002e08:	2305      	movs	r3, #5
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e10:	4619      	mov	r1, r3
 8002e12:	4809      	ldr	r0, [pc, #36]	; (8002e38 <HAL_SPI_MspInit+0x168>)
 8002e14:	f004 ff80 	bl	8007d18 <HAL_GPIO_Init>
}
 8002e18:	bf00      	nop
 8002e1a:	3738      	adds	r7, #56	; 0x38
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40003800 	.word	0x40003800
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40020400 	.word	0x40020400
 8002e2c:	40013400 	.word	0x40013400
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40015000 	.word	0x40015000
 8002e38:	40021400 	.word	0x40021400

08002e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4c:	d10d      	bne.n	8002e6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_TIM_Base_MspInit+0x3c>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a08      	ldr	r2, [pc, #32]	; (8002e78 <HAL_TIM_Base_MspInit+0x3c>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_TIM_Base_MspInit+0x3c>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d11d      	bne.n	8002eda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_TIM_MspPostInit+0x68>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <HAL_TIM_MspPostInit+0x68>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_TIM_MspPostInit+0x68>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002eba:	2304      	movs	r3, #4
 8002ebc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4804      	ldr	r0, [pc, #16]	; (8002ee8 <HAL_TIM_MspPostInit+0x6c>)
 8002ed6:	f004 ff1f 	bl	8007d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002eda:	bf00      	nop
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020000 	.word	0x40020000

08002eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a4b      	ldr	r2, [pc, #300]	; (8003038 <HAL_UART_MspInit+0x14c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d12c      	bne.n	8002f68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
 8002f12:	4b4a      	ldr	r3, [pc, #296]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a49      	ldr	r2, [pc, #292]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f26:	623b      	str	r3, [r7, #32]
 8002f28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a42      	ldr	r2, [pc, #264]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f34:	f043 0310 	orr.w	r3, r3, #16
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b40      	ldr	r3, [pc, #256]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002f46:	2303      	movs	r3, #3
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002f56:	2308      	movs	r3, #8
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4837      	ldr	r0, [pc, #220]	; (8003040 <HAL_UART_MspInit+0x154>)
 8002f62:	f004 fed9 	bl	8007d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f66:	e063      	b.n	8003030 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a35      	ldr	r2, [pc, #212]	; (8003044 <HAL_UART_MspInit+0x158>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d12d      	bne.n	8002fce <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a30      	ldr	r2, [pc, #192]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b2e      	ldr	r3, [pc, #184]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a29      	ldr	r2, [pc, #164]	; (800303c <HAL_UART_MspInit+0x150>)
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_UART_MspInit+0x150>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002faa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fbc:	2307      	movs	r3, #7
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4820      	ldr	r0, [pc, #128]	; (8003048 <HAL_UART_MspInit+0x15c>)
 8002fc8:	f004 fea6 	bl	8007d18 <HAL_GPIO_Init>
}
 8002fcc:	e030      	b.n	8003030 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	; (800304c <HAL_UART_MspInit+0x160>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d12b      	bne.n	8003030 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_UART_MspInit+0x150>)
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	4a16      	ldr	r2, [pc, #88]	; (800303c <HAL_UART_MspInit+0x150>)
 8002fe2:	f043 0320 	orr.w	r3, r3, #32
 8002fe6:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_UART_MspInit+0x150>)
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_UART_MspInit+0x150>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	4a0f      	ldr	r2, [pc, #60]	; (800303c <HAL_UART_MspInit+0x150>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6313      	str	r3, [r2, #48]	; 0x30
 8003004:	4b0d      	ldr	r3, [pc, #52]	; (800303c <HAL_UART_MspInit+0x150>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8003010:	23c0      	movs	r3, #192	; 0xc0
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003020:	2308      	movs	r3, #8
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003028:	4619      	mov	r1, r3
 800302a:	4809      	ldr	r0, [pc, #36]	; (8003050 <HAL_UART_MspInit+0x164>)
 800302c:	f004 fe74 	bl	8007d18 <HAL_GPIO_Init>
}
 8003030:	bf00      	nop
 8003032:	3738      	adds	r7, #56	; 0x38
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40007c00 	.word	0x40007c00
 800303c:	40023800 	.word	0x40023800
 8003040:	40021000 	.word	0x40021000
 8003044:	40004800 	.word	0x40004800
 8003048:	40020c00 	.word	0x40020c00
 800304c:	40011400 	.word	0x40011400
 8003050:	40020800 	.word	0x40020800

08003054 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	; 0x30
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003064:	2200      	movs	r2, #0
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	2036      	movs	r0, #54	; 0x36
 800306a:	f004 fe1d 	bl	8007ca8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800306e:	2036      	movs	r0, #54	; 0x36
 8003070:	f004 fe36 	bl	8007ce0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <HAL_InitTick+0xa4>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <HAL_InitTick+0xa4>)
 800307e:	f043 0310 	orr.w	r3, r3, #16
 8003082:	6413      	str	r3, [r2, #64]	; 0x40
 8003084:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <HAL_InitTick+0xa4>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003090:	f107 0210 	add.w	r2, r7, #16
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f006 fdf4 	bl	8009c88 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80030a0:	f006 fdca 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 80030a4:	4603      	mov	r3, r0
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	4a13      	ldr	r2, [pc, #76]	; (80030fc <HAL_InitTick+0xa8>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	0c9b      	lsrs	r3, r3, #18
 80030b4:	3b01      	subs	r3, #1
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_InitTick+0xac>)
 80030ba:	4a12      	ldr	r2, [pc, #72]	; (8003104 <HAL_InitTick+0xb0>)
 80030bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HAL_InitTick+0xac>)
 80030c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80030c6:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <HAL_InitTick+0xac>)
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_InitTick+0xac>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_InitTick+0xac>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80030d8:	4809      	ldr	r0, [pc, #36]	; (8003100 <HAL_InitTick+0xac>)
 80030da:	f008 fb3f 	bl	800b75c <HAL_TIM_Base_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d104      	bne.n	80030ee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80030e4:	4806      	ldr	r0, [pc, #24]	; (8003100 <HAL_InitTick+0xac>)
 80030e6:	f008 fb89 	bl	800b7fc <HAL_TIM_Base_Start_IT>
 80030ea:	4603      	mov	r3, r0
 80030ec:	e000      	b.n	80030f0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3730      	adds	r7, #48	; 0x30
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	431bde83 	.word	0x431bde83
 8003100:	20005f0c 	.word	0x20005f0c
 8003104:	40001000 	.word	0x40001000

08003108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	af00      	add	r7, sp, #0
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  //TODO
	  buzz_failure();
 800311a:	f000 ffbd 	bl	8004098 <buzz_failure>
 800311e:	e7fc      	b.n	800311a <HardFault_Handler+0x4>

08003120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003124:	e7fe      	b.n	8003124 <MemManage_Handler+0x4>

08003126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800312a:	e7fe      	b.n	800312a <BusFault_Handler+0x4>

0800312c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003130:	e7fe      	b.n	8003130 <UsageFault_Handler+0x4>

08003132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003144:	2001      	movs	r0, #1
 8003146:	f004 ffc5 	bl	80080d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003154:	4802      	ldr	r0, [pc, #8]	; (8003160 <RTC_Alarm_IRQHandler+0x10>)
 8003156:	f007 fb61 	bl	800a81c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20005db0 	.word	0x20005db0

08003164 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <TIM6_DAC_IRQHandler+0x10>)
 800316a:	f008 fd49 	bl	800bc00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20005f0c 	.word	0x20005f0c

08003178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
	return 1;
 800317c:	2301      	movs	r3, #1
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_kill>:

int _kill(int pid, int sig)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003192:	f012 f81f 	bl	80151d4 <__errno>
 8003196:	4603      	mov	r3, r0
 8003198:	2216      	movs	r2, #22
 800319a:	601a      	str	r2, [r3, #0]
	return -1;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_exit>:

void _exit (int status)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ffe7 	bl	8003188 <_kill>
	while (1) {}		/* Make sure we hang here */
 80031ba:	e7fe      	b.n	80031ba <_exit+0x12>

080031bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	e00a      	b.n	80031e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031ce:	f3af 8000 	nop.w
 80031d2:	4601      	mov	r1, r0
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	60ba      	str	r2, [r7, #8]
 80031da:	b2ca      	uxtb	r2, r1
 80031dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	dbf0      	blt.n	80031ce <_read+0x12>
	}

return len;
 80031ec:	687b      	ldr	r3, [r7, #4]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e009      	b.n	800321c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	60ba      	str	r2, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	3301      	adds	r3, #1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	429a      	cmp	r2, r3
 8003222:	dbf1      	blt.n	8003208 <_write+0x12>
	}
	return len;
 8003224:	687b      	ldr	r3, [r7, #4]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <_close>:

int _close(int file)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
	return -1;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003256:	605a      	str	r2, [r3, #4]
	return 0;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <_isatty>:

int _isatty(int file)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
	return 1;
 800326e:	2301      	movs	r3, #1
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
	return 0;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <_sbrk+0x5c>)
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <_sbrk+0x60>)
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d102      	bne.n	80032ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <_sbrk+0x64>)
 80032b6:	4a12      	ldr	r2, [pc, #72]	; (8003300 <_sbrk+0x68>)
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <_sbrk+0x64>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d207      	bcs.n	80032d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032c8:	f011 ff84 	bl	80151d4 <__errno>
 80032cc:	4603      	mov	r3, r0
 80032ce:	220c      	movs	r2, #12
 80032d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295
 80032d6:	e009      	b.n	80032ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <_sbrk+0x64>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	4a05      	ldr	r2, [pc, #20]	; (80032fc <_sbrk+0x64>)
 80032e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ea:	68fb      	ldr	r3, [r7, #12]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20030000 	.word	0x20030000
 80032f8:	00000400 	.word	0x00000400
 80032fc:	200002c8 	.word	0x200002c8
 8003300:	200071a8 	.word	0x200071a8

08003304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <SystemInit+0x28>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	4a07      	ldr	r2, [pc, #28]	; (800332c <SystemInit+0x28>)
 8003310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <SystemInit+0x28>)
 800331a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800331e:	609a      	str	r2, [r3, #8]
#endif
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003368 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003336:	e003      	b.n	8003340 <LoopCopyDataInit>

08003338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800333a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800333c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800333e:	3104      	adds	r1, #4

08003340 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003340:	480b      	ldr	r0, [pc, #44]	; (8003370 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003348:	d3f6      	bcc.n	8003338 <CopyDataInit>
  ldr  r2, =_sbss
 800334a:	4a0b      	ldr	r2, [pc, #44]	; (8003378 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800334c:	e002      	b.n	8003354 <LoopFillZerobss>

0800334e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800334e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003350:	f842 3b04 	str.w	r3, [r2], #4

08003354 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003358:	d3f9      	bcc.n	800334e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800335a:	f7ff ffd3 	bl	8003304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800335e:	f012 f835 	bl	80153cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003362:	f7fe f969 	bl	8001638 <main>
  bx  lr    
 8003366:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003368:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800336c:	0801c8dc 	.word	0x0801c8dc
  ldr  r0, =_sdata
 8003370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003374:	20000264 	.word	0x20000264
  ldr  r2, =_sbss
 8003378:	20000264 	.word	0x20000264
  ldr  r3, = _ebss
 800337c:	200071a4 	.word	0x200071a4

08003380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003380:	e7fe      	b.n	8003380 <ADC_IRQHandler>
	...

08003384 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	; 0x30
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8003390:	2364      	movs	r3, #100	; 0x64
 8003392:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 800339c:	e073      	b.n	8003486 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 800339e:	4b3f      	ldr	r3, [pc, #252]	; (800349c <GPS_Poll+0x118>)
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	2364      	movs	r3, #100	; 0x64
 80033a4:	2201      	movs	r2, #1
 80033a6:	493e      	ldr	r1, [pc, #248]	; (80034a0 <GPS_Poll+0x11c>)
 80033a8:	f009 fb63 	bl	800ca72 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <GPS_Poll+0x11c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b0a      	cmp	r3, #10
 80033b2:	d00f      	beq.n	80033d4 <GPS_Poll+0x50>
 80033b4:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <GPS_Poll+0x120>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b63      	cmp	r3, #99	; 0x63
 80033ba:	d80b      	bhi.n	80033d4 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 80033bc:	4b39      	ldr	r3, [pc, #228]	; (80034a4 <GPS_Poll+0x120>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	b2d1      	uxtb	r1, r2
 80033c4:	4a37      	ldr	r2, [pc, #220]	; (80034a4 <GPS_Poll+0x120>)
 80033c6:	7011      	strb	r1, [r2, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <GPS_Poll+0x11c>)
 80033cc:	7819      	ldrb	r1, [r3, #0]
 80033ce:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <GPS_Poll+0x124>)
 80033d0:	5499      	strb	r1, [r3, r2]
 80033d2:	e021      	b.n	8003418 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80033d4:	4834      	ldr	r0, [pc, #208]	; (80034a8 <GPS_Poll+0x124>)
 80033d6:	f000 f86b 	bl	80034b0 <GPS_validate>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80033e0:	4831      	ldr	r0, [pc, #196]	; (80034a8 <GPS_Poll+0x124>)
 80033e2:	f000 f8c7 	bl	8003574 <GPS_parse>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00d      	beq.n	8003408 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80033ec:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <GPS_Poll+0x128>)
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80033f4:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <GPS_Poll+0x128>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80033fc:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <GPS_Poll+0x128>)
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]
					done = 1;
 8003404:	2301      	movs	r3, #1
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8003408:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <GPS_Poll+0x120>)
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800340e:	2264      	movs	r2, #100	; 0x64
 8003410:	2100      	movs	r1, #0
 8003412:	4825      	ldr	r0, [pc, #148]	; (80034a8 <GPS_Poll+0x124>)
 8003414:	f012 f832 	bl	801547c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 8003418:	2300      	movs	r3, #0
 800341a:	623b      	str	r3, [r7, #32]
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <GPS_Poll+0x118>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	623b      	str	r3, [r7, #32]
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <GPS_Poll+0x118>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	623b      	str	r3, [r7, #32]
 8003430:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <GPS_Poll+0x118>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	4b16      	ldr	r3, [pc, #88]	; (800349c <GPS_Poll+0x118>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 800344c:	2300      	movs	r3, #0
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <GPS_Poll+0x118>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <GPS_Poll+0x118>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	4b0c      	ldr	r3, [pc, #48]	; (800349c <GPS_Poll+0x118>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <GPS_Poll+0x118>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8003480:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003482:	3301      	adds	r3, #1
 8003484:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8003486:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800348a:	429a      	cmp	r2, r3
 800348c:	d202      	bcs.n	8003494 <GPS_Poll+0x110>
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d084      	beq.n	800339e <GPS_Poll+0x1a>
	}
}
 8003494:	bf00      	nop
 8003496:	3730      	adds	r7, #48	; 0x30
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20005bbc 	.word	0x20005bbc
 80034a0:	200002cc 	.word	0x200002cc
 80034a4:	200002cd 	.word	0x200002cd
 80034a8:	20005fac 	.word	0x20005fac
 80034ac:	20005f54 	.word	0x20005f54

080034b0 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b24      	cmp	r3, #36	; 0x24
 80034ca:	d103      	bne.n	80034d4 <GPS_validate+0x24>
        i++;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80034d2:	e00c      	b.n	80034ee <GPS_validate+0x3e>
        return 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e047      	b.n	8003568 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4053      	eors	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        i++;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3301      	adds	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4413      	add	r3, r2
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <GPS_validate+0x5c>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b2a      	cmp	r3, #42	; 0x2a
 8003504:	d002      	beq.n	800350c <GPS_validate+0x5c>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b4a      	cmp	r3, #74	; 0x4a
 800350a:	dde5      	ble.n	80034d8 <GPS_validate+0x28>
    }

    if(i >= 75){
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b4a      	cmp	r3, #74	; 0x4a
 8003510:	dd01      	ble.n	8003516 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8003512:	2300      	movs	r3, #0
 8003514:	e028      	b.n	8003568 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b2a      	cmp	r3, #42	; 0x2a
 8003520:	d119      	bne.n	8003556 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	3301      	adds	r3, #1
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3302      	adds	r3, #2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800353e:	f107 0308 	add.w	r3, r7, #8
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	490a      	ldr	r1, [pc, #40]	; (8003570 <GPS_validate+0xc0>)
 8003546:	4618      	mov	r0, r3
 8003548:	f013 f816 	bl	8016578 <siprintf>
    return((checkcalcstr[0] == check[0])
 800354c:	7a3a      	ldrb	r2, [r7, #8]
 800354e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003550:	429a      	cmp	r2, r3
 8003552:	d108      	bne.n	8003566 <GPS_validate+0xb6>
 8003554:	e001      	b.n	800355a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8003556:	2300      	movs	r3, #0
 8003558:	e006      	b.n	8003568 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800355a:	7a7a      	ldrb	r2, [r7, #9]
 800355c:	7b7b      	ldrb	r3, [r7, #13]
 800355e:	429a      	cmp	r2, r3
 8003560:	d101      	bne.n	8003566 <GPS_validate+0xb6>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <GPS_validate+0xb8>
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	0801a730 	.word	0x0801a730

08003574 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af08      	add	r7, sp, #32
 800357a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 800357c:	2206      	movs	r2, #6
 800357e:	496d      	ldr	r1, [pc, #436]	; (8003734 <GPS_parse+0x1c0>)
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f013 f892 	bl	80166aa <strncmp>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d139      	bne.n	8003600 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800358c:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <GPS_parse+0x1c4>)
 800358e:	9307      	str	r3, [sp, #28]
 8003590:	4b6a      	ldr	r3, [pc, #424]	; (800373c <GPS_parse+0x1c8>)
 8003592:	9306      	str	r3, [sp, #24]
 8003594:	4b6a      	ldr	r3, [pc, #424]	; (8003740 <GPS_parse+0x1cc>)
 8003596:	9305      	str	r3, [sp, #20]
 8003598:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <GPS_parse+0x1d0>)
 800359a:	9304      	str	r3, [sp, #16]
 800359c:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <GPS_parse+0x1d4>)
 800359e:	9303      	str	r3, [sp, #12]
 80035a0:	4b6a      	ldr	r3, [pc, #424]	; (800374c <GPS_parse+0x1d8>)
 80035a2:	9302      	str	r3, [sp, #8]
 80035a4:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <GPS_parse+0x1dc>)
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <GPS_parse+0x1e0>)
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <GPS_parse+0x1e4>)
 80035ae:	4a6b      	ldr	r2, [pc, #428]	; (800375c <GPS_parse+0x1e8>)
 80035b0:	496b      	ldr	r1, [pc, #428]	; (8003760 <GPS_parse+0x1ec>)
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f013 f800 	bl	80165b8 <siscanf>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f340 80b5 	ble.w	800372a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80035c0:	4b68      	ldr	r3, [pc, #416]	; (8003764 <GPS_parse+0x1f0>)
 80035c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80035c6:	4b67      	ldr	r3, [pc, #412]	; (8003764 <GPS_parse+0x1f0>)
 80035c8:	7e1b      	ldrb	r3, [r3, #24]
 80035ca:	4618      	mov	r0, r3
 80035cc:	eeb0 0a67 	vmov.f32	s0, s15
 80035d0:	f000 f8ec 	bl	80037ac <GPS_nmea_to_dec>
 80035d4:	eef0 7a40 	vmov.f32	s15, s0
 80035d8:	4b62      	ldr	r3, [pc, #392]	; (8003764 <GPS_parse+0x1f0>)
 80035da:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80035de:	4b61      	ldr	r3, [pc, #388]	; (8003764 <GPS_parse+0x1f0>)
 80035e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80035e4:	4b5f      	ldr	r3, [pc, #380]	; (8003764 <GPS_parse+0x1f0>)
 80035e6:	7e5b      	ldrb	r3, [r3, #25]
 80035e8:	4618      	mov	r0, r3
 80035ea:	eeb0 0a67 	vmov.f32	s0, s15
 80035ee:	f000 f8dd 	bl	80037ac <GPS_nmea_to_dec>
 80035f2:	eef0 7a40 	vmov.f32	s15, s0
 80035f6:	4b5b      	ldr	r3, [pc, #364]	; (8003764 <GPS_parse+0x1f0>)
 80035f8:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e095      	b.n	800372c <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8003600:	2206      	movs	r2, #6
 8003602:	4959      	ldr	r1, [pc, #356]	; (8003768 <GPS_parse+0x1f4>)
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f013 f850 	bl	80166aa <strncmp>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d134      	bne.n	800367a <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8003610:	4b56      	ldr	r3, [pc, #344]	; (800376c <GPS_parse+0x1f8>)
 8003612:	9305      	str	r3, [sp, #20]
 8003614:	4b56      	ldr	r3, [pc, #344]	; (8003770 <GPS_parse+0x1fc>)
 8003616:	9304      	str	r3, [sp, #16]
 8003618:	4b56      	ldr	r3, [pc, #344]	; (8003774 <GPS_parse+0x200>)
 800361a:	9303      	str	r3, [sp, #12]
 800361c:	4b4b      	ldr	r3, [pc, #300]	; (800374c <GPS_parse+0x1d8>)
 800361e:	9302      	str	r3, [sp, #8]
 8003620:	4b4b      	ldr	r3, [pc, #300]	; (8003750 <GPS_parse+0x1dc>)
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <GPS_parse+0x1e0>)
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <GPS_parse+0x1e4>)
 800362a:	4a4c      	ldr	r2, [pc, #304]	; (800375c <GPS_parse+0x1e8>)
 800362c:	4952      	ldr	r1, [pc, #328]	; (8003778 <GPS_parse+0x204>)
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f012 ffc2 	bl	80165b8 <siscanf>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	dd77      	ble.n	800372a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800363a:	4b4a      	ldr	r3, [pc, #296]	; (8003764 <GPS_parse+0x1f0>)
 800363c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003640:	4b48      	ldr	r3, [pc, #288]	; (8003764 <GPS_parse+0x1f0>)
 8003642:	7e1b      	ldrb	r3, [r3, #24]
 8003644:	4618      	mov	r0, r3
 8003646:	eeb0 0a67 	vmov.f32	s0, s15
 800364a:	f000 f8af 	bl	80037ac <GPS_nmea_to_dec>
 800364e:	eef0 7a40 	vmov.f32	s15, s0
 8003652:	4b44      	ldr	r3, [pc, #272]	; (8003764 <GPS_parse+0x1f0>)
 8003654:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003658:	4b42      	ldr	r3, [pc, #264]	; (8003764 <GPS_parse+0x1f0>)
 800365a:	edd3 7a03 	vldr	s15, [r3, #12]
 800365e:	4b41      	ldr	r3, [pc, #260]	; (8003764 <GPS_parse+0x1f0>)
 8003660:	7e5b      	ldrb	r3, [r3, #25]
 8003662:	4618      	mov	r0, r3
 8003664:	eeb0 0a67 	vmov.f32	s0, s15
 8003668:	f000 f8a0 	bl	80037ac <GPS_nmea_to_dec>
 800366c:	eef0 7a40 	vmov.f32	s15, s0
 8003670:	4b3c      	ldr	r3, [pc, #240]	; (8003764 <GPS_parse+0x1f0>)
 8003672:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003676:	2301      	movs	r3, #1
 8003678:	e058      	b.n	800372c <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800367a:	2206      	movs	r2, #6
 800367c:	493f      	ldr	r1, [pc, #252]	; (800377c <GPS_parse+0x208>)
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f013 f813 	bl	80166aa <strncmp>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d130      	bne.n	80036ec <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800368a:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <GPS_parse+0x20c>)
 800368c:	9303      	str	r3, [sp, #12]
 800368e:	4b33      	ldr	r3, [pc, #204]	; (800375c <GPS_parse+0x1e8>)
 8003690:	9302      	str	r3, [sp, #8]
 8003692:	4b2e      	ldr	r3, [pc, #184]	; (800374c <GPS_parse+0x1d8>)
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <GPS_parse+0x1dc>)
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <GPS_parse+0x1e0>)
 800369c:	4a2e      	ldr	r2, [pc, #184]	; (8003758 <GPS_parse+0x1e4>)
 800369e:	4939      	ldr	r1, [pc, #228]	; (8003784 <GPS_parse+0x210>)
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f012 ff89 	bl	80165b8 <siscanf>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dd3e      	ble.n	800372a <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80036ac:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <GPS_parse+0x1f0>)
 80036ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80036b2:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <GPS_parse+0x1f0>)
 80036b4:	7e1b      	ldrb	r3, [r3, #24]
 80036b6:	4618      	mov	r0, r3
 80036b8:	eeb0 0a67 	vmov.f32	s0, s15
 80036bc:	f000 f876 	bl	80037ac <GPS_nmea_to_dec>
 80036c0:	eef0 7a40 	vmov.f32	s15, s0
 80036c4:	4b27      	ldr	r3, [pc, #156]	; (8003764 <GPS_parse+0x1f0>)
 80036c6:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80036ca:	4b26      	ldr	r3, [pc, #152]	; (8003764 <GPS_parse+0x1f0>)
 80036cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <GPS_parse+0x1f0>)
 80036d2:	7e5b      	ldrb	r3, [r3, #25]
 80036d4:	4618      	mov	r0, r3
 80036d6:	eeb0 0a67 	vmov.f32	s0, s15
 80036da:	f000 f867 	bl	80037ac <GPS_nmea_to_dec>
 80036de:	eef0 7a40 	vmov.f32	s15, s0
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <GPS_parse+0x1f0>)
 80036e4:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e01f      	b.n	800372c <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80036ec:	2206      	movs	r2, #6
 80036ee:	4926      	ldr	r1, [pc, #152]	; (8003788 <GPS_parse+0x214>)
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f012 ffda 	bl	80166aa <strncmp>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d116      	bne.n	800372a <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <GPS_parse+0x218>)
 80036fe:	9305      	str	r3, [sp, #20]
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <GPS_parse+0x21c>)
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	4b23      	ldr	r3, [pc, #140]	; (8003794 <GPS_parse+0x220>)
 8003706:	9303      	str	r3, [sp, #12]
 8003708:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <GPS_parse+0x200>)
 800370a:	9302      	str	r3, [sp, #8]
 800370c:	4b22      	ldr	r3, [pc, #136]	; (8003798 <GPS_parse+0x224>)
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	4b22      	ldr	r3, [pc, #136]	; (800379c <GPS_parse+0x228>)
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <GPS_parse+0x22c>)
 8003716:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <GPS_parse+0x230>)
 8003718:	4923      	ldr	r1, [pc, #140]	; (80037a8 <GPS_parse+0x234>)
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f012 ff4c 	bl	80165b8 <siscanf>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	dd01      	ble.n	800372a <GPS_parse+0x1b6>
            return 0;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <GPS_parse+0x1b8>
    }
    return 0;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	0801a738 	.word	0x0801a738
 8003738:	20005f80 	.word	0x20005f80
 800373c:	20005f7c 	.word	0x20005f7c
 8003740:	20005f78 	.word	0x20005f78
 8003744:	20005f74 	.word	0x20005f74
 8003748:	20005f70 	.word	0x20005f70
 800374c:	20005f6d 	.word	0x20005f6d
 8003750:	20005f60 	.word	0x20005f60
 8003754:	20005f6c 	.word	0x20005f6c
 8003758:	20005f64 	.word	0x20005f64
 800375c:	20005f68 	.word	0x20005f68
 8003760:	0801a740 	.word	0x0801a740
 8003764:	20005f54 	.word	0x20005f54
 8003768:	0801a768 	.word	0x0801a768
 800376c:	20005f8c 	.word	0x20005f8c
 8003770:	20005f88 	.word	0x20005f88
 8003774:	20005f84 	.word	0x20005f84
 8003778:	0801a770 	.word	0x0801a770
 800377c:	0801a790 	.word	0x0801a790
 8003780:	20005f90 	.word	0x20005f90
 8003784:	0801a798 	.word	0x0801a798
 8003788:	0801a7b4 	.word	0x0801a7b4
 800378c:	20005fa8 	.word	0x20005fa8
 8003790:	20005fa4 	.word	0x20005fa4
 8003794:	20005fa1 	.word	0x20005fa1
 8003798:	20005fa0 	.word	0x20005fa0
 800379c:	20005f9c 	.word	0x20005f9c
 80037a0:	20005f98 	.word	0x20005f98
 80037a4:	20005f94 	.word	0x20005f94
 80037a8:	0801a7bc 	.word	0x0801a7bc

080037ac <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80037b6:	4603      	mov	r3, r0
 80037b8:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80037ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80037be:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003840 <GPS_nmea_to_dec+0x94>
 80037c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ca:	ee17 3a90 	vmov	r3, s15
 80037ce:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2264      	movs	r2, #100	; 0x64
 80037d4:	fb02 f303 	mul.w	r3, r2, r3
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80037e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e8:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80037ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80037f0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003844 <GPS_nmea_to_dec+0x98>
 80037f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f8:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003806:	ed97 7a02 	vldr	s14, [r7, #8]
 800380a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	2b53      	cmp	r3, #83	; 0x53
 8003816:	d002      	beq.n	800381e <GPS_nmea_to_dec+0x72>
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	2b57      	cmp	r3, #87	; 0x57
 800381c:	d105      	bne.n	800382a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800381e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003822:	eef1 7a67 	vneg.f32	s15, s15
 8003826:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	ee07 3a90 	vmov	s15, r3
}
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	42c80000 	.word	0x42c80000
 8003844:	42700000 	.word	0x42700000

08003848 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <GPS_init+0x30>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8003858:	4a08      	ldr	r2, [pc, #32]	; (800387c <GPS_init+0x34>)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <GPS_init+0x34>)
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	2210      	movs	r2, #16
 8003868:	4905      	ldr	r1, [pc, #20]	; (8003880 <GPS_init+0x38>)
 800386a:	f009 f870 	bl	800c94e <HAL_UART_Transmit>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20005bbc 	.word	0x20005bbc
 800387c:	20006010 	.word	0x20006010
 8003880:	0801a7dc 	.word	0x0801a7dc

08003884 <__NVIC_SystemReset>:
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003888:	f3bf 8f4f 	dsb	sy
}
 800388c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <__NVIC_SystemReset+0x24>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003896:	4904      	ldr	r1, [pc, #16]	; (80038a8 <__NVIC_SystemReset+0x24>)
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <__NVIC_SystemReset+0x28>)
 800389a:	4313      	orrs	r3, r2
 800389c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800389e:	f3bf 8f4f 	dsb	sy
}
 80038a2:	bf00      	nop
    __NOP();
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <__NVIC_SystemReset+0x20>
 80038a8:	e000ed00 	.word	0xe000ed00
 80038ac:	05fa0004 	.word	0x05fa0004

080038b0 <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e007      	b.n	80038ce <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <MRT_externalFlashSetup+0x50>)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3301      	adds	r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	ddf4      	ble.n	80038be <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 80038d4:	f000 fd0a 	bl	80042ec <W25qxx_Init>
 80038d8:	4603      	mov	r3, r0
 80038da:	f083 0301 	eor.w	r3, r3, #1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 80038e4:	f7ff f8aa 	bl	8002a3c <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 80038e8:	f003 f816 	bl	8006918 <MRT_WUProcedure>
	MRT_getFlags();
 80038ec:	f000 f8a2 	bl	8003a34 <MRT_getFlags>
	MRT_resetInfo(uart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f9a3 	bl	8003c3c <MRT_resetInfo>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20006014 	.word	0x20006014

08003904 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 8003914:	f000 f804 	bl	8003920 <MRT_resetFromStart>
	}

}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(1);
 8003924:	2001      	movs	r0, #1
 8003926:	f000 fe33 	bl	8004590 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800392a:	2305      	movs	r3, #5
 800392c:	2200      	movs	r2, #0
 800392e:	2101      	movs	r1, #1
 8003930:	4807      	ldr	r0, [pc, #28]	; (8003950 <MRT_resetFromStart+0x30>)
 8003932:	f000 ff77 	bl	8004824 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 8003936:	2002      	movs	r0, #2
 8003938:	f000 fe2a 	bl	8004590 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 800393c:	2304      	movs	r3, #4
 800393e:	2200      	movs	r2, #0
 8003940:	2102      	movs	r1, #2
 8003942:	4804      	ldr	r0, [pc, #16]	; (8003954 <MRT_resetFromStart+0x34>)
 8003944:	f000 ff6e 	bl	8004824 <W25qxx_WriteSector>

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 8003948:	f001 fc08 	bl	800515c <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 800394c:	f7ff ff9a 	bl	8003884 <__NVIC_SystemReset>
 8003950:	20006014 	.word	0x20006014
 8003954:	200002d8 	.word	0x200002d8

08003958 <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800395e:	2300      	movs	r3, #0
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	e00c      	b.n	800397e <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <MRT_updateExternalFlashBuffers+0x60>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396c:	7819      	ldrb	r1, [r3, #0]
 800396e:	4a13      	ldr	r2, [pc, #76]	; (80039bc <MRT_updateExternalFlashBuffers+0x64>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4413      	add	r3, r2
 8003974:	460a      	mov	r2, r1
 8003976:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3301      	adds	r3, #1
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b04      	cmp	r3, #4
 8003982:	ddef      	ble.n	8003964 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003984:	2300      	movs	r3, #0
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	e00c      	b.n	80039a4 <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 800398a:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <MRT_updateExternalFlashBuffers+0x68>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003992:	7819      	ldrb	r1, [r3, #0]
 8003994:	4a0b      	ldr	r2, [pc, #44]	; (80039c4 <MRT_updateExternalFlashBuffers+0x6c>)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	4413      	add	r3, r2
 800399a:	460a      	mov	r2, r1
 800399c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	ddef      	ble.n	800398a <MRT_updateExternalFlashBuffers+0x32>
	}
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	20000004 	.word	0x20000004
 80039bc:	20005c5c 	.word	0x20005c5c
 80039c0:	20000018 	.word	0x20000018
 80039c4:	20005d44 	.word	0x20005d44

080039c8 <MRT_updateFlagsValues>:


void MRT_updateFlagsValues(void){
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	e00b      	b.n	80039ec <MRT_updateFlagsValues+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 80039d4:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <MRT_updateFlagsValues+0x5c>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039dc:	4912      	ldr	r1, [pc, #72]	; (8003a28 <MRT_updateFlagsValues+0x60>)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	440a      	add	r2, r1
 80039e2:	7812      	ldrb	r2, [r2, #0]
 80039e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3301      	adds	r3, #1
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	ddf0      	ble.n	80039d4 <MRT_updateFlagsValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 80039f2:	2300      	movs	r3, #0
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	e00b      	b.n	8003a10 <MRT_updateFlagsValues+0x48>
		*flash_time[i] = flash_time_buffer[i];
 80039f8:	4a0c      	ldr	r2, [pc, #48]	; (8003a2c <MRT_updateFlagsValues+0x64>)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a00:	490b      	ldr	r1, [pc, #44]	; (8003a30 <MRT_updateFlagsValues+0x68>)
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	440a      	add	r2, r1
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	ddf0      	ble.n	80039f8 <MRT_updateFlagsValues+0x30>
	}
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	20000004 	.word	0x20000004
 8003a28:	20005c5c 	.word	0x20005c5c
 8003a2c:	20000018 	.word	0x20000018
 8003a30:	20005d44 	.word	0x20005d44

08003a34 <MRT_getFlags>:


void MRT_getFlags(void){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a38:	2305      	movs	r3, #5
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4874      	ldr	r0, [pc, #464]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003a40:	f001 f82e 	bl	8004aa0 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003a44:	2304      	movs	r3, #4
 8003a46:	2200      	movs	r2, #0
 8003a48:	2102      	movs	r1, #2
 8003a4a:	4872      	ldr	r0, [pc, #456]	; (8003c14 <MRT_getFlags+0x1e0>)
 8003a4c:	f001 f828 	bl	8004aa0 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8003a50:	4b71      	ldr	r3, [pc, #452]	; (8003c18 <MRT_getFlags+0x1e4>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d10e      	bne.n	8003a76 <MRT_getFlags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8003a58:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	4b6b      	ldr	r3, [pc, #428]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003a62:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003a64:	2001      	movs	r0, #1
 8003a66:	f000 fd93 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a6a:	2305      	movs	r3, #5
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4867      	ldr	r0, [pc, #412]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003a72:	f000 fed7 	bl	8004824 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	MRT_updateFlagsValues();
 8003a76:	f7ff ffa7 	bl	80039c8 <MRT_updateFlagsValues>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003a7a:	4b68      	ldr	r3, [pc, #416]	; (8003c1c <MRT_getFlags+0x1e8>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d013      	beq.n	8003aaa <MRT_getFlags+0x76>
 8003a82:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <MRT_getFlags+0x1e8>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d00f      	beq.n	8003aaa <MRT_getFlags+0x76>
		reset_flag = 0;
 8003a8a:	4b64      	ldr	r3, [pc, #400]	; (8003c1c <MRT_getFlags+0x1e8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003a90:	4b62      	ldr	r3, [pc, #392]	; (8003c1c <MRT_getFlags+0x1e8>)
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	4b5e      	ldr	r3, [pc, #376]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003a96:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8003a98:	2001      	movs	r0, #1
 8003a9a:	f000 fd79 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	485a      	ldr	r0, [pc, #360]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003aa6:	f000 febd 	bl	8004824 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003aaa:	4b5b      	ldr	r3, [pc, #364]	; (8003c18 <MRT_getFlags+0x1e4>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d017      	beq.n	8003ae2 <MRT_getFlags+0xae>
 8003ab2:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <MRT_getFlags+0x1e4>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d013      	beq.n	8003ae2 <MRT_getFlags+0xae>
 8003aba:	4b57      	ldr	r3, [pc, #348]	; (8003c18 <MRT_getFlags+0x1e4>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d00f      	beq.n	8003ae2 <MRT_getFlags+0xae>
		wu_flag = 0;
 8003ac2:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <MRT_getFlags+0x1e4>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <MRT_getFlags+0x1e4>)
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	4b50      	ldr	r3, [pc, #320]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003ace:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f000 fd5d 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ad6:	2305      	movs	r3, #5
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2101      	movs	r1, #1
 8003adc:	484c      	ldr	r0, [pc, #304]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003ade:	f000 fea1 	bl	8004824 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003ae2:	4b4f      	ldr	r3, [pc, #316]	; (8003c20 <MRT_getFlags+0x1ec>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d013      	beq.n	8003b12 <MRT_getFlags+0xde>
 8003aea:	4b4d      	ldr	r3, [pc, #308]	; (8003c20 <MRT_getFlags+0x1ec>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d00f      	beq.n	8003b12 <MRT_getFlags+0xde>
		iwdg_flag = 0;
 8003af2:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <MRT_getFlags+0x1ec>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003af8:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <MRT_getFlags+0x1ec>)
 8003afa:	781a      	ldrb	r2, [r3, #0]
 8003afc:	4b44      	ldr	r3, [pc, #272]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003afe:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003b00:	2001      	movs	r0, #1
 8003b02:	f000 fd45 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b06:	2305      	movs	r3, #5
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4840      	ldr	r0, [pc, #256]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003b0e:	f000 fe89 	bl	8004824 <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 8003b12:	4b44      	ldr	r3, [pc, #272]	; (8003c24 <MRT_getFlags+0x1f0>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d013      	beq.n	8003b42 <MRT_getFlags+0x10e>
 8003b1a:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <MRT_getFlags+0x1f0>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d00f      	beq.n	8003b42 <MRT_getFlags+0x10e>
		apogee_flag = 0;
 8003b22:	4b40      	ldr	r3, [pc, #256]	; (8003c24 <MRT_getFlags+0x1f0>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8003b28:	4b3e      	ldr	r3, [pc, #248]	; (8003c24 <MRT_getFlags+0x1f0>)
 8003b2a:	781a      	ldrb	r2, [r3, #0]
 8003b2c:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003b2e:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 8003b30:	2001      	movs	r0, #1
 8003b32:	f000 fd2d 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b36:	2305      	movs	r3, #5
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4834      	ldr	r0, [pc, #208]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003b3e:	f000 fe71 	bl	8004824 <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 8003b42:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <MRT_getFlags+0x1f4>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d90f      	bls.n	8003b6a <MRT_getFlags+0x136>
		ejection_state_flag = 0;
 8003b4a:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <MRT_getFlags+0x1f4>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8003b50:	4b35      	ldr	r3, [pc, #212]	; (8003c28 <MRT_getFlags+0x1f4>)
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003b56:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(1);
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f000 fd19 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b5e:	2305      	movs	r3, #5
 8003b60:	2200      	movs	r2, #0
 8003b62:	2101      	movs	r1, #1
 8003b64:	482a      	ldr	r0, [pc, #168]	; (8003c10 <MRT_getFlags+0x1dc>)
 8003b66:	f000 fe5d 	bl	8004824 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003b6a:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <MRT_getFlags+0x1f8>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b17      	cmp	r3, #23
 8003b70:	d90f      	bls.n	8003b92 <MRT_getFlags+0x15e>
		prev_hours = 0;
 8003b72:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <MRT_getFlags+0x1f8>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <MRT_getFlags+0x1f8>)
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <MRT_getFlags+0x1e0>)
 8003b7e:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8003b80:	2002      	movs	r0, #2
 8003b82:	f000 fd05 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003b86:	2304      	movs	r3, #4
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	4821      	ldr	r0, [pc, #132]	; (8003c14 <MRT_getFlags+0x1e0>)
 8003b8e:	f000 fe49 	bl	8004824 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003b92:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <MRT_getFlags+0x1fc>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b3b      	cmp	r3, #59	; 0x3b
 8003b98:	d90f      	bls.n	8003bba <MRT_getFlags+0x186>
		prev_min = 0;
 8003b9a:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <MRT_getFlags+0x1fc>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8003ba0:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <MRT_getFlags+0x1fc>)
 8003ba2:	781a      	ldrb	r2, [r3, #0]
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <MRT_getFlags+0x1e0>)
 8003ba6:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003ba8:	2002      	movs	r0, #2
 8003baa:	f000 fcf1 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003bae:	2304      	movs	r3, #4
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	4817      	ldr	r0, [pc, #92]	; (8003c14 <MRT_getFlags+0x1e0>)
 8003bb6:	f000 fe35 	bl	8004824 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003bba:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <MRT_getFlags+0x200>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b3b      	cmp	r3, #59	; 0x3b
 8003bc0:	d90f      	bls.n	8003be2 <MRT_getFlags+0x1ae>
		prev_sec = 0;
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <MRT_getFlags+0x200>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <MRT_getFlags+0x200>)
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <MRT_getFlags+0x1e0>)
 8003bce:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8003bd0:	2002      	movs	r0, #2
 8003bd2:	f000 fcdd 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2102      	movs	r1, #2
 8003bdc:	480d      	ldr	r0, [pc, #52]	; (8003c14 <MRT_getFlags+0x1e0>)
 8003bde:	f000 fe21 	bl	8004824 <W25qxx_WriteSector>
	}

	//Sub-Seconds
	if (!(prev_subsec >= 0 && prev_subsec < 100)){ //If random value (none was written)
 8003be2:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <MRT_getFlags+0x204>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b63      	cmp	r3, #99	; 0x63
 8003be8:	d90f      	bls.n	8003c0a <MRT_getFlags+0x1d6>
		prev_subsec = 0;
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <MRT_getFlags+0x204>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SUBSEC_OFFSET] = prev_subsec;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <MRT_getFlags+0x204>)
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <MRT_getFlags+0x1e0>)
 8003bf6:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(2);
 8003bf8:	2002      	movs	r0, #2
 8003bfa:	f000 fcc9 	bl	8004590 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003bfe:	2304      	movs	r3, #4
 8003c00:	2200      	movs	r2, #0
 8003c02:	2102      	movs	r1, #2
 8003c04:	4803      	ldr	r0, [pc, #12]	; (8003c14 <MRT_getFlags+0x1e0>)
 8003c06:	f000 fe0d 	bl	8004824 <W25qxx_WriteSector>
	}
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20005c5c 	.word	0x20005c5c
 8003c14:	20005d44 	.word	0x20005d44
 8003c18:	20000549 	.word	0x20000549
 8003c1c:	200002ce 	.word	0x200002ce
 8003c20:	200002cf 	.word	0x200002cf
 8003c24:	200002d0 	.word	0x200002d0
 8003c28:	200002d1 	.word	0x200002d1
 8003c2c:	200002d2 	.word	0x200002d2
 8003c30:	200002d3 	.word	0x200002d3
 8003c34:	200002d4 	.word	0x200002d4
 8003c38:	200002d5 	.word	0x200002d5

08003c3c <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c3e:	b0a9      	sub	sp, #164	; 0xa4
 8003c40:	af06      	add	r7, sp, #24
 8003c42:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec, prev_subsec);
 8003c44:	4b80      	ldr	r3, [pc, #512]	; (8003e48 <MRT_resetInfo+0x20c>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	461e      	mov	r6, r3
 8003c4a:	4b80      	ldr	r3, [pc, #512]	; (8003e4c <MRT_resetInfo+0x210>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	469c      	mov	ip, r3
 8003c50:	4b7f      	ldr	r3, [pc, #508]	; (8003e50 <MRT_resetInfo+0x214>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b7f      	ldr	r3, [pc, #508]	; (8003e54 <MRT_resetInfo+0x218>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4b7e      	ldr	r3, [pc, #504]	; (8003e58 <MRT_resetInfo+0x21c>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	461c      	mov	r4, r3
 8003c62:	4b7e      	ldr	r3, [pc, #504]	; (8003e5c <MRT_resetInfo+0x220>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461d      	mov	r5, r3
 8003c68:	4b7d      	ldr	r3, [pc, #500]	; (8003e60 <MRT_resetInfo+0x224>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	f107 0020 	add.w	r0, r7, #32
 8003c70:	9304      	str	r3, [sp, #16]
 8003c72:	9503      	str	r5, [sp, #12]
 8003c74:	9402      	str	r4, [sp, #8]
 8003c76:	9101      	str	r1, [sp, #4]
 8003c78:	9200      	str	r2, [sp, #0]
 8003c7a:	4663      	mov	r3, ip
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	4979      	ldr	r1, [pc, #484]	; (8003e64 <MRT_resetInfo+0x228>)
 8003c80:	f012 fc7a 	bl	8016578 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003c84:	f107 0320 	add.w	r3, r7, #32
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fab1 	bl	80001f0 <strlen>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	f107 0120 	add.w	r1, r7, #32
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f008 fe57 	bl	800c94e <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003ca0:	4b6b      	ldr	r3, [pc, #428]	; (8003e50 <MRT_resetInfo+0x214>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d11e      	bne.n	8003ce6 <MRT_resetInfo+0xaa>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	2213      	movs	r2, #19
 8003cae:	496e      	ldr	r1, [pc, #440]	; (8003e68 <MRT_resetInfo+0x22c>)
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f008 fe4c 	bl	800c94e <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003cb6:	4b66      	ldr	r3, [pc, #408]	; (8003e50 <MRT_resetInfo+0x214>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003cbc:	4b64      	ldr	r3, [pc, #400]	; (8003e50 <MRT_resetInfo+0x214>)
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	4b6a      	ldr	r3, [pc, #424]	; (8003e6c <MRT_resetInfo+0x230>)
 8003cc2:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f000 fc63 	bl	8004590 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003cca:	2305      	movs	r3, #5
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4866      	ldr	r0, [pc, #408]	; (8003e6c <MRT_resetInfo+0x230>)
 8003cd2:	f000 fda7 	bl	8004824 <W25qxx_WriteSector>

		  HAL_Delay(1000);
 8003cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cda:	f003 fad5 	bl	8007288 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8003cde:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8003ce2:	f002 fed7 	bl	8006a94 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8003ce6:	4b59      	ldr	r3, [pc, #356]	; (8003e4c <MRT_resetInfo+0x210>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d03a      	beq.n	8003d64 <MRT_resetInfo+0x128>
		  char buf[20];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8003cee:	4b57      	ldr	r3, [pc, #348]	; (8003e4c <MRT_resetInfo+0x210>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f107 030c 	add.w	r3, r7, #12
 8003cf8:	495d      	ldr	r1, [pc, #372]	; (8003e70 <MRT_resetInfo+0x234>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f012 fc3c 	bl	8016578 <siprintf>
		  HAL_UART_Transmit(uart, buf, strlen(buf), HAL_MAX_DELAY);
 8003d00:	f107 030c 	add.w	r3, r7, #12
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fc fa73 	bl	80001f0 <strlen>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	f107 010c 	add.w	r1, r7, #12
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f008 fe19 	bl	800c94e <HAL_UART_Transmit>

		  HAL_UART_Transmit(uart, "Resetting RTC time\r\n", 20, HAL_MAX_DELAY);
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d20:	2214      	movs	r2, #20
 8003d22:	4954      	ldr	r1, [pc, #336]	; (8003e74 <MRT_resetInfo+0x238>)
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f008 fe12 	bl	800c94e <HAL_UART_Transmit>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8003d2a:	2002      	movs	r0, #2
 8003d2c:	f000 fc30 	bl	8004590 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003d30:	2303      	movs	r3, #3
 8003d32:	2200      	movs	r2, #0
 8003d34:	2102      	movs	r1, #2
 8003d36:	4850      	ldr	r0, [pc, #320]	; (8003e78 <MRT_resetInfo+0x23c>)
 8003d38:	f000 fd74 	bl	8004824 <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d42:	e00b      	b.n	8003d5c <MRT_resetInfo+0x120>
			  *flash_time[i] = 0x0;
 8003d44:	4a4d      	ldr	r2, [pc, #308]	; (8003e7c <MRT_resetInfo+0x240>)
 8003d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8003d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d56:	3301      	adds	r3, #1
 8003d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	ddef      	ble.n	8003d44 <MRT_resetInfo+0x108>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003d64:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <MRT_resetInfo+0x20c>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d116      	bne.n	8003d9a <MRT_resetInfo+0x15e>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d70:	220e      	movs	r2, #14
 8003d72:	4943      	ldr	r1, [pc, #268]	; (8003e80 <MRT_resetInfo+0x244>)
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f008 fdea 	bl	800c94e <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003d7a:	4b33      	ldr	r3, [pc, #204]	; (8003e48 <MRT_resetInfo+0x20c>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003d80:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <MRT_resetInfo+0x20c>)
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <MRT_resetInfo+0x230>)
 8003d86:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f000 fc01 	bl	8004590 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003d8e:	2305      	movs	r3, #5
 8003d90:	2200      	movs	r2, #0
 8003d92:	2101      	movs	r1, #1
 8003d94:	4835      	ldr	r0, [pc, #212]	; (8003e6c <MRT_resetInfo+0x230>)
 8003d96:	f000 fd45 	bl	8004824 <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag==0){
 8003d9a:	4b3a      	ldr	r3, [pc, #232]	; (8003e84 <MRT_resetInfo+0x248>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d107      	bne.n	8003db2 <MRT_resetInfo+0x176>
		  HAL_UART_Transmit(uart, "Pre-apogee\r\n", 12, HAL_MAX_DELAY);
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	220c      	movs	r2, #12
 8003da8:	4937      	ldr	r1, [pc, #220]	; (8003e88 <MRT_resetInfo+0x24c>)
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f008 fdcf 	bl	800c94e <HAL_UART_Transmit>
 8003db0:	e00a      	b.n	8003dc8 <MRT_resetInfo+0x18c>
	  }
	  else if(apogee_flag==1){
 8003db2:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <MRT_resetInfo+0x248>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d106      	bne.n	8003dc8 <MRT_resetInfo+0x18c>
		  HAL_UART_Transmit(uart, "Post-apogee\r\n", 13, HAL_MAX_DELAY);
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	220d      	movs	r2, #13
 8003dc0:	4932      	ldr	r1, [pc, #200]	; (8003e8c <MRT_resetInfo+0x250>)
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f008 fdc3 	bl	800c94e <HAL_UART_Transmit>
	  }


	  //Check ejection state
	  if (ejection_state_flag==0){
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <MRT_resetInfo+0x254>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <MRT_resetInfo+0x1a4>
		  HAL_UART_Transmit(uart, "Ejection State: Pad\r\n", 21, HAL_MAX_DELAY);
 8003dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd4:	2215      	movs	r2, #21
 8003dd6:	492f      	ldr	r1, [pc, #188]	; (8003e94 <MRT_resetInfo+0x258>)
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f008 fdb8 	bl	800c94e <HAL_UART_Transmit>
		  HAL_UART_Transmit(uart, "Ejection State: Main descent\r\n", 30, HAL_MAX_DELAY);
	  }
	  else if(ejection_state_flag==4){
		  HAL_UART_Transmit(uart, "Ejection State: Landed\r\n", 24, HAL_MAX_DELAY);
	  }
}
 8003dde:	e02e      	b.n	8003e3e <MRT_resetInfo+0x202>
	  else if(ejection_state_flag==1){
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <MRT_resetInfo+0x254>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d107      	bne.n	8003df8 <MRT_resetInfo+0x1bc>
		  HAL_UART_Transmit(uart, "Ejection State: Boost\r\n", 23, HAL_MAX_DELAY);
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dec:	2217      	movs	r2, #23
 8003dee:	492a      	ldr	r1, [pc, #168]	; (8003e98 <MRT_resetInfo+0x25c>)
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f008 fdac 	bl	800c94e <HAL_UART_Transmit>
}
 8003df6:	e022      	b.n	8003e3e <MRT_resetInfo+0x202>
	  else if(ejection_state_flag==2){
 8003df8:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <MRT_resetInfo+0x254>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d107      	bne.n	8003e10 <MRT_resetInfo+0x1d4>
		  HAL_UART_Transmit(uart, "Ejection State: Drogue descent\r\n", 32, HAL_MAX_DELAY);
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295
 8003e04:	2220      	movs	r2, #32
 8003e06:	4925      	ldr	r1, [pc, #148]	; (8003e9c <MRT_resetInfo+0x260>)
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f008 fda0 	bl	800c94e <HAL_UART_Transmit>
}
 8003e0e:	e016      	b.n	8003e3e <MRT_resetInfo+0x202>
	  else if(ejection_state_flag==3){
 8003e10:	4b1f      	ldr	r3, [pc, #124]	; (8003e90 <MRT_resetInfo+0x254>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d107      	bne.n	8003e28 <MRT_resetInfo+0x1ec>
		  HAL_UART_Transmit(uart, "Ejection State: Main descent\r\n", 30, HAL_MAX_DELAY);
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1c:	221e      	movs	r2, #30
 8003e1e:	4920      	ldr	r1, [pc, #128]	; (8003ea0 <MRT_resetInfo+0x264>)
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f008 fd94 	bl	800c94e <HAL_UART_Transmit>
}
 8003e26:	e00a      	b.n	8003e3e <MRT_resetInfo+0x202>
	  else if(ejection_state_flag==4){
 8003e28:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <MRT_resetInfo+0x254>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d106      	bne.n	8003e3e <MRT_resetInfo+0x202>
		  HAL_UART_Transmit(uart, "Ejection State: Landed\r\n", 24, HAL_MAX_DELAY);
 8003e30:	f04f 33ff 	mov.w	r3, #4294967295
 8003e34:	2218      	movs	r2, #24
 8003e36:	491b      	ldr	r1, [pc, #108]	; (8003ea4 <MRT_resetInfo+0x268>)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f008 fd88 	bl	800c94e <HAL_UART_Transmit>
}
 8003e3e:	bf00      	nop
 8003e40:	378c      	adds	r7, #140	; 0x8c
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e46:	bf00      	nop
 8003e48:	200002ce 	.word	0x200002ce
 8003e4c:	20000549 	.word	0x20000549
 8003e50:	200002cf 	.word	0x200002cf
 8003e54:	200002d2 	.word	0x200002d2
 8003e58:	200002d3 	.word	0x200002d3
 8003e5c:	200002d4 	.word	0x200002d4
 8003e60:	200002d5 	.word	0x200002d5
 8003e64:	0801a820 	.word	0x0801a820
 8003e68:	0801a864 	.word	0x0801a864
 8003e6c:	20005c5c 	.word	0x20005c5c
 8003e70:	0801a878 	.word	0x0801a878
 8003e74:	0801a888 	.word	0x0801a888
 8003e78:	200002d8 	.word	0x200002d8
 8003e7c:	20000018 	.word	0x20000018
 8003e80:	0801a8a0 	.word	0x0801a8a0
 8003e84:	200002d0 	.word	0x200002d0
 8003e88:	0801a8b0 	.word	0x0801a8b0
 8003e8c:	0801a8c0 	.word	0x0801a8c0
 8003e90:	200002d1 	.word	0x200002d1
 8003e94:	0801a8d0 	.word	0x0801a8d0
 8003e98:	0801a8e8 	.word	0x0801a8e8
 8003e9c:	0801a900 	.word	0x0801a900
 8003ea0:	0801a924 	.word	0x0801a924
 8003ea4:	0801a944 	.word	0x0801a944

08003ea8 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 8003eac:	f7ff fd54 	bl	8003958 <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8003eb0:	2002      	movs	r0, #2
 8003eb2:	f000 fb6d 	bl	8004590 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4802      	ldr	r0, [pc, #8]	; (8003ec8 <MRT_saveRTCTime+0x20>)
 8003ebe:	f000 fcb1 	bl	8004824 <W25qxx_WriteSector>
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20005d44 	.word	0x20005d44
 8003ecc:	00000000 	.word	0x00000000

08003ed0 <MRT_prop_poll_pressure_transducer>:


/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f003 fa3d 	bl	8007358 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8003ede:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f003 fb3d 	bl	8007562 <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f003 fbc5 	bl	8007678 <HAL_ADC_GetValue>
 8003eee:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f003 fb03 	bl	80074fc <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7fc fb14 	bl	8000524 <__aeabi_ui2d>
 8003efc:	a312      	add	r3, pc, #72	; (adr r3, 8003f48 <MRT_prop_poll_pressure_transducer+0x78>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f7fc fcb3 	bl	800086c <__aeabi_ddiv>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f7fc fe7b 	bl	8000c08 <__aeabi_d2f>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fc fb27 	bl	8000568 <__aeabi_f2d>
 8003f1a:	a30d      	add	r3, pc, #52	; (adr r3, 8003f50 <MRT_prop_poll_pressure_transducer+0x80>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f7fc fb7a 	bl	8000618 <__aeabi_dmul>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f7fc fe6c 	bl	8000c08 <__aeabi_d2f>
 8003f30:	4603      	mov	r3, r0
 8003f32:	60bb      	str	r3, [r7, #8]

	return voltage;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	ee07 3a90 	vmov	s15, r3
}
 8003f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	f3af 8000 	nop.w
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	40affe00 	.word	0x40affe00
 8003f50:	66666666 	.word	0x66666666
 8003f54:	400a6666 	.word	0x400a6666

08003f58 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 8003f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f66:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003fe8 <MRT_getAltitude+0x90>
 8003f6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f6e:	ee16 0a90 	vmov	r0, s13
 8003f72:	f7fc faf9 	bl	8000568 <__aeabi_f2d>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003fd8 <MRT_getAltitude+0x80>
 8003f7e:	ec43 2b10 	vmov	d0, r2, r3
 8003f82:	f010 f969 	bl	8014258 <pow>
 8003f86:	ec51 0b10 	vmov	r0, r1, d0
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	4b17      	ldr	r3, [pc, #92]	; (8003fec <MRT_getAltitude+0x94>)
 8003f90:	f7fc f98a 	bl	80002a8 <__aeabi_dsub>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	a310      	add	r3, pc, #64	; (adr r3, 8003fe0 <MRT_getAltitude+0x88>)
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	f7fc fb39 	bl	8000618 <__aeabi_dmul>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <MRT_getAltitude+0x98>)
 8003fb4:	f7fc f97a 	bl	80002ac <__adddf3>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f7fc fe22 	bl	8000c08 <__aeabi_d2f>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	ee07 3a90 	vmov	s15, r3
}
 8003fca:	eeb0 0a67 	vmov.f32	s0, s15
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	f3af 8000 	nop.w
 8003fd8:	b4202506 	.word	0xb4202506
 8003fdc:	3fc85a8b 	.word	0x3fc85a8b
 8003fe0:	76276276 	.word	0x76276276
 8003fe4:	c0e481c2 	.word	0xc0e481c2
 8003fe8:	447d8000 	.word	0x447d8000
 8003fec:	3ff00000 	.word	0x3ff00000
 8003ff0:	40590000 	.word	0x40590000

08003ff4 <tone_freq>:


extern TIM_HandleTypeDef htim2;

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8004000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004004:	491c      	ldr	r1, [pc, #112]	; (8004078 <tone_freq+0x84>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	fbb1 f3f3 	udiv	r3, r1, r3
 800400c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800400e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e01f      	b.n	8004064 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004024:	2108      	movs	r1, #8
 8004026:	4815      	ldr	r0, [pc, #84]	; (800407c <tone_freq+0x88>)
 8004028:	f007 fcb2 	bl	800b990 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 800402c:	2201      	movs	r2, #1
 800402e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004032:	4813      	ldr	r0, [pc, #76]	; (8004080 <tone_freq+0x8c>)
 8004034:	f004 f834 	bl	80080a0 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f003 f925 	bl	8007288 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800403e:	2108      	movs	r1, #8
 8004040:	480e      	ldr	r0, [pc, #56]	; (800407c <tone_freq+0x88>)
 8004042:	f007 fd6d 	bl	800bb20 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 8004046:	2200      	movs	r2, #0
 8004048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800404c:	480c      	ldr	r0, [pc, #48]	; (8004080 <tone_freq+0x8c>)
 800404e:	f004 f827 	bl	80080a0 <HAL_GPIO_WritePin>
		if (repeats > 1)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d902      	bls.n	800405e <tone_freq+0x6a>
			HAL_Delay(duration);
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f003 f915 	bl	8007288 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3301      	adds	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	d3db      	bcc.n	8004024 <tone_freq+0x30>
	}
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	000f4240 	.word	0x000f4240
 800407c:	20005e9c 	.word	0x20005e9c
 8004080:	40020400 	.word	0x40020400

08004084 <buzz_success>:

void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); };
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
 8004088:	f240 4216 	movw	r2, #1046	; 0x416
 800408c:	2102      	movs	r1, #2
 800408e:	204b      	movs	r0, #75	; 0x4b
 8004090:	f7ff ffb0 	bl	8003ff4 <tone_freq>
 8004094:	bf00      	nop
 8004096:	bd80      	pop	{r7, pc}

08004098 <buzz_failure>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); };
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
 800409c:	22dc      	movs	r2, #220	; 0xdc
 800409e:	2103      	movs	r1, #3
 80040a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040a4:	f7ff ffa6 	bl	8003ff4 <tone_freq>
 80040a8:	bf00      	nop
 80040aa:	bd80      	pop	{r7, pc}

080040ac <buzz_startup_success>:

void buzz_startup_success(void) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80040b2:	2300      	movs	r3, #0
 80040b4:	71fb      	strb	r3, [r7, #7]
 80040b6:	e008      	b.n	80040ca <buzz_startup_success+0x1e>
		buzz_success();
 80040b8:	f7ff ffe4 	bl	8004084 <buzz_success>
		HAL_Delay(1000);
 80040bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040c0:	f003 f8e2 	bl	8007288 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	3301      	adds	r3, #1
 80040c8:	71fb      	strb	r3, [r7, #7]
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d9f3      	bls.n	80040b8 <buzz_startup_success+0xc>
	}
};
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80040e6:	f107 020f 	add.w	r2, r7, #15
 80040ea:	1df9      	adds	r1, r7, #7
 80040ec:	2364      	movs	r3, #100	; 0x64
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	2301      	movs	r3, #1
 80040f2:	4804      	ldr	r0, [pc, #16]	; (8004104 <W25qxx_Spi+0x28>)
 80040f4:	f007 f860 	bl	800b1b8 <HAL_SPI_TransmitReceive>
	return ret;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20005bc0 	.word	0x20005bc0

08004108 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	2300      	movs	r3, #0
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	2300      	movs	r3, #0
 800411c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800411e:	2200      	movs	r2, #0
 8004120:	2140      	movs	r1, #64	; 0x40
 8004122:	4813      	ldr	r0, [pc, #76]	; (8004170 <W25qxx_ReadID+0x68>)
 8004124:	f003 ffbc 	bl	80080a0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004128:	209f      	movs	r0, #159	; 0x9f
 800412a:	f7ff ffd7 	bl	80040dc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800412e:	20a5      	movs	r0, #165	; 0xa5
 8004130:	f7ff ffd4 	bl	80040dc <W25qxx_Spi>
 8004134:	4603      	mov	r3, r0
 8004136:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004138:	20a5      	movs	r0, #165	; 0xa5
 800413a:	f7ff ffcf 	bl	80040dc <W25qxx_Spi>
 800413e:	4603      	mov	r3, r0
 8004140:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004142:	20a5      	movs	r0, #165	; 0xa5
 8004144:	f7ff ffca 	bl	80040dc <W25qxx_Spi>
 8004148:	4603      	mov	r3, r0
 800414a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800414c:	2201      	movs	r2, #1
 800414e:	2140      	movs	r1, #64	; 0x40
 8004150:	4807      	ldr	r0, [pc, #28]	; (8004170 <W25qxx_ReadID+0x68>)
 8004152:	f003 ffa5 	bl	80080a0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	041a      	lsls	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	4313      	orrs	r3, r2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40020c00 	.word	0x40020c00

08004174 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800417a:	2200      	movs	r2, #0
 800417c:	2140      	movs	r1, #64	; 0x40
 800417e:	4816      	ldr	r0, [pc, #88]	; (80041d8 <W25qxx_ReadUniqID+0x64>)
 8004180:	f003 ff8e 	bl	80080a0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004184:	204b      	movs	r0, #75	; 0x4b
 8004186:	f7ff ffa9 	bl	80040dc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	71fb      	strb	r3, [r7, #7]
 800418e:	e005      	b.n	800419c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004190:	20a5      	movs	r0, #165	; 0xa5
 8004192:	f7ff ffa3 	bl	80040dc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	3301      	adds	r3, #1
 800419a:	71fb      	strb	r3, [r7, #7]
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d9f6      	bls.n	8004190 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80041a2:	2300      	movs	r3, #0
 80041a4:	71bb      	strb	r3, [r7, #6]
 80041a6:	e00b      	b.n	80041c0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041a8:	79bc      	ldrb	r4, [r7, #6]
 80041aa:	20a5      	movs	r0, #165	; 0xa5
 80041ac:	f7ff ff96 	bl	80040dc <W25qxx_Spi>
 80041b0:	4603      	mov	r3, r0
 80041b2:	461a      	mov	r2, r3
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <W25qxx_ReadUniqID+0x68>)
 80041b6:	4423      	add	r3, r4
 80041b8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80041ba:	79bb      	ldrb	r3, [r7, #6]
 80041bc:	3301      	adds	r3, #1
 80041be:	71bb      	strb	r3, [r7, #6]
 80041c0:	79bb      	ldrb	r3, [r7, #6]
 80041c2:	2b07      	cmp	r3, #7
 80041c4:	d9f0      	bls.n	80041a8 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041c6:	2201      	movs	r2, #1
 80041c8:	2140      	movs	r1, #64	; 0x40
 80041ca:	4803      	ldr	r0, [pc, #12]	; (80041d8 <W25qxx_ReadUniqID+0x64>)
 80041cc:	f003 ff68 	bl	80080a0 <HAL_GPIO_WritePin>
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd90      	pop	{r4, r7, pc}
 80041d8:	40020c00 	.word	0x40020c00
 80041dc:	2000601c 	.word	0x2000601c

080041e0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80041e4:	2200      	movs	r2, #0
 80041e6:	2140      	movs	r1, #64	; 0x40
 80041e8:	4807      	ldr	r0, [pc, #28]	; (8004208 <W25qxx_WriteEnable+0x28>)
 80041ea:	f003 ff59 	bl	80080a0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80041ee:	2006      	movs	r0, #6
 80041f0:	f7ff ff74 	bl	80040dc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041f4:	2201      	movs	r2, #1
 80041f6:	2140      	movs	r1, #64	; 0x40
 80041f8:	4803      	ldr	r0, [pc, #12]	; (8004208 <W25qxx_WriteEnable+0x28>)
 80041fa:	f003 ff51 	bl	80080a0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80041fe:	2001      	movs	r0, #1
 8004200:	f00c fc9b 	bl	8010b3a <osDelay>
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40020c00 	.word	0x40020c00

0800420c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800421a:	2200      	movs	r2, #0
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	481c      	ldr	r0, [pc, #112]	; (8004290 <W25qxx_ReadStatusRegister+0x84>)
 8004220:	f003 ff3e 	bl	80080a0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d10c      	bne.n	8004244 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800422a:	2005      	movs	r0, #5
 800422c:	f7ff ff56 	bl	80040dc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004230:	20a5      	movs	r0, #165	; 0xa5
 8004232:	f7ff ff53 	bl	80040dc <W25qxx_Spi>
 8004236:	4603      	mov	r3, r0
 8004238:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800423a:	4a16      	ldr	r2, [pc, #88]	; (8004294 <W25qxx_ReadStatusRegister+0x88>)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004242:	e01b      	b.n	800427c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d10c      	bne.n	8004264 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800424a:	2035      	movs	r0, #53	; 0x35
 800424c:	f7ff ff46 	bl	80040dc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004250:	20a5      	movs	r0, #165	; 0xa5
 8004252:	f7ff ff43 	bl	80040dc <W25qxx_Spi>
 8004256:	4603      	mov	r3, r0
 8004258:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800425a:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <W25qxx_ReadStatusRegister+0x88>)
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004262:	e00b      	b.n	800427c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004264:	2015      	movs	r0, #21
 8004266:	f7ff ff39 	bl	80040dc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800426a:	20a5      	movs	r0, #165	; 0xa5
 800426c:	f7ff ff36 	bl	80040dc <W25qxx_Spi>
 8004270:	4603      	mov	r3, r0
 8004272:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <W25qxx_ReadStatusRegister+0x88>)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800427c:	2201      	movs	r2, #1
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	4803      	ldr	r0, [pc, #12]	; (8004290 <W25qxx_ReadStatusRegister+0x84>)
 8004282:	f003 ff0d 	bl	80080a0 <HAL_GPIO_WritePin>
	return status;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40020c00 	.word	0x40020c00
 8004294:	2000601c 	.word	0x2000601c

08004298 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800429c:	2001      	movs	r0, #1
 800429e:	f00c fc4c 	bl	8010b3a <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2140      	movs	r1, #64	; 0x40
 80042a6:	480f      	ldr	r0, [pc, #60]	; (80042e4 <W25qxx_WaitForWriteEnd+0x4c>)
 80042a8:	f003 fefa 	bl	80080a0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80042ac:	2005      	movs	r0, #5
 80042ae:	f7ff ff15 	bl	80040dc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042b2:	20a5      	movs	r0, #165	; 0xa5
 80042b4:	f7ff ff12 	bl	80040dc <W25qxx_Spi>
 80042b8:	4603      	mov	r3, r0
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <W25qxx_WaitForWriteEnd+0x50>)
 80042be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80042c2:	2001      	movs	r0, #1
 80042c4:	f00c fc39 	bl	8010b3a <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <W25qxx_WaitForWriteEnd+0x50>)
 80042ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ed      	bne.n	80042b2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042d6:	2201      	movs	r2, #1
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	4802      	ldr	r0, [pc, #8]	; (80042e4 <W25qxx_WaitForWriteEnd+0x4c>)
 80042dc:	f003 fee0 	bl	80080a0 <HAL_GPIO_WritePin>
}
 80042e0:	bf00      	nop
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40020c00 	.word	0x40020c00
 80042e8:	2000601c 	.word	0x2000601c

080042ec <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80042f2:	4b90      	ldr	r3, [pc, #576]	; (8004534 <W25qxx_Init+0x248>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80042fa:	e002      	b.n	8004302 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80042fc:	2001      	movs	r0, #1
 80042fe:	f00c fc1c 	bl	8010b3a <osDelay>
	while (HAL_GetTick() < 100)
 8004302:	f002 ffb5 	bl	8007270 <HAL_GetTick>
 8004306:	4603      	mov	r3, r0
 8004308:	2b63      	cmp	r3, #99	; 0x63
 800430a:	d9f7      	bls.n	80042fc <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800430c:	2201      	movs	r2, #1
 800430e:	2140      	movs	r1, #64	; 0x40
 8004310:	4889      	ldr	r0, [pc, #548]	; (8004538 <W25qxx_Init+0x24c>)
 8004312:	f003 fec5 	bl	80080a0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004316:	2064      	movs	r0, #100	; 0x64
 8004318:	f00c fc0f 	bl	8010b3a <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 800431c:	4887      	ldr	r0, [pc, #540]	; (800453c <W25qxx_Init+0x250>)
 800431e:	f012 f85f 	bl	80163e0 <puts>
#endif
	id = W25qxx_ReadID();
 8004322:	f7ff fef1 	bl	8004108 <W25qxx_ReadID>
 8004326:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4885      	ldr	r0, [pc, #532]	; (8004540 <W25qxx_Init+0x254>)
 800432c:	f011 ffd2 	bl	80162d4 <iprintf>
#endif
	switch (id & 0x000000FF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	3b11      	subs	r3, #17
 8004336:	2b0f      	cmp	r3, #15
 8004338:	f200 808b 	bhi.w	8004452 <W25qxx_Init+0x166>
 800433c:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <W25qxx_Init+0x58>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	0800443f 	.word	0x0800443f
 8004348:	0800442b 	.word	0x0800442b
 800434c:	08004417 	.word	0x08004417
 8004350:	08004403 	.word	0x08004403
 8004354:	080043ef 	.word	0x080043ef
 8004358:	080043db 	.word	0x080043db
 800435c:	080043c7 	.word	0x080043c7
 8004360:	080043b1 	.word	0x080043b1
 8004364:	0800439b 	.word	0x0800439b
 8004368:	08004453 	.word	0x08004453
 800436c:	08004453 	.word	0x08004453
 8004370:	08004453 	.word	0x08004453
 8004374:	08004453 	.word	0x08004453
 8004378:	08004453 	.word	0x08004453
 800437c:	08004453 	.word	0x08004453
 8004380:	08004385 	.word	0x08004385
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004384:	4b6b      	ldr	r3, [pc, #428]	; (8004534 <W25qxx_Init+0x248>)
 8004386:	220a      	movs	r2, #10
 8004388:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800438a:	4b6a      	ldr	r3, [pc, #424]	; (8004534 <W25qxx_Init+0x248>)
 800438c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004390:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8004392:	486c      	ldr	r0, [pc, #432]	; (8004544 <W25qxx_Init+0x258>)
 8004394:	f012 f824 	bl	80163e0 <puts>
#endif
		break;
 8004398:	e064      	b.n	8004464 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800439a:	4b66      	ldr	r3, [pc, #408]	; (8004534 <W25qxx_Init+0x248>)
 800439c:	2209      	movs	r2, #9
 800439e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80043a0:	4b64      	ldr	r3, [pc, #400]	; (8004534 <W25qxx_Init+0x248>)
 80043a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80043a8:	4867      	ldr	r0, [pc, #412]	; (8004548 <W25qxx_Init+0x25c>)
 80043aa:	f012 f819 	bl	80163e0 <puts>
#endif
		break;
 80043ae:	e059      	b.n	8004464 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80043b0:	4b60      	ldr	r3, [pc, #384]	; (8004534 <W25qxx_Init+0x248>)
 80043b2:	2208      	movs	r2, #8
 80043b4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <W25qxx_Init+0x248>)
 80043b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043bc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 80043be:	4863      	ldr	r0, [pc, #396]	; (800454c <W25qxx_Init+0x260>)
 80043c0:	f012 f80e 	bl	80163e0 <puts>
#endif
		break;
 80043c4:	e04e      	b.n	8004464 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80043c6:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <W25qxx_Init+0x248>)
 80043c8:	2207      	movs	r2, #7
 80043ca:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80043cc:	4b59      	ldr	r3, [pc, #356]	; (8004534 <W25qxx_Init+0x248>)
 80043ce:	2280      	movs	r2, #128	; 0x80
 80043d0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80043d2:	485f      	ldr	r0, [pc, #380]	; (8004550 <W25qxx_Init+0x264>)
 80043d4:	f012 f804 	bl	80163e0 <puts>
#endif
		break;
 80043d8:	e044      	b.n	8004464 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80043da:	4b56      	ldr	r3, [pc, #344]	; (8004534 <W25qxx_Init+0x248>)
 80043dc:	2206      	movs	r2, #6
 80043de:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80043e0:	4b54      	ldr	r3, [pc, #336]	; (8004534 <W25qxx_Init+0x248>)
 80043e2:	2240      	movs	r2, #64	; 0x40
 80043e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80043e6:	485b      	ldr	r0, [pc, #364]	; (8004554 <W25qxx_Init+0x268>)
 80043e8:	f011 fffa 	bl	80163e0 <puts>
#endif
		break;
 80043ec:	e03a      	b.n	8004464 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80043ee:	4b51      	ldr	r3, [pc, #324]	; (8004534 <W25qxx_Init+0x248>)
 80043f0:	2205      	movs	r2, #5
 80043f2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80043f4:	4b4f      	ldr	r3, [pc, #316]	; (8004534 <W25qxx_Init+0x248>)
 80043f6:	2220      	movs	r2, #32
 80043f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 80043fa:	4857      	ldr	r0, [pc, #348]	; (8004558 <W25qxx_Init+0x26c>)
 80043fc:	f011 fff0 	bl	80163e0 <puts>
#endif
		break;
 8004400:	e030      	b.n	8004464 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004402:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <W25qxx_Init+0x248>)
 8004404:	2204      	movs	r2, #4
 8004406:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004408:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <W25qxx_Init+0x248>)
 800440a:	2210      	movs	r2, #16
 800440c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 800440e:	4853      	ldr	r0, [pc, #332]	; (800455c <W25qxx_Init+0x270>)
 8004410:	f011 ffe6 	bl	80163e0 <puts>
#endif
		break;
 8004414:	e026      	b.n	8004464 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004416:	4b47      	ldr	r3, [pc, #284]	; (8004534 <W25qxx_Init+0x248>)
 8004418:	2203      	movs	r2, #3
 800441a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800441c:	4b45      	ldr	r3, [pc, #276]	; (8004534 <W25qxx_Init+0x248>)
 800441e:	2208      	movs	r2, #8
 8004420:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8004422:	484f      	ldr	r0, [pc, #316]	; (8004560 <W25qxx_Init+0x274>)
 8004424:	f011 ffdc 	bl	80163e0 <puts>
#endif
		break;
 8004428:	e01c      	b.n	8004464 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800442a:	4b42      	ldr	r3, [pc, #264]	; (8004534 <W25qxx_Init+0x248>)
 800442c:	2202      	movs	r2, #2
 800442e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004430:	4b40      	ldr	r3, [pc, #256]	; (8004534 <W25qxx_Init+0x248>)
 8004432:	2204      	movs	r2, #4
 8004434:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8004436:	484b      	ldr	r0, [pc, #300]	; (8004564 <W25qxx_Init+0x278>)
 8004438:	f011 ffd2 	bl	80163e0 <puts>
#endif
		break;
 800443c:	e012      	b.n	8004464 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800443e:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <W25qxx_Init+0x248>)
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004444:	4b3b      	ldr	r3, [pc, #236]	; (8004534 <W25qxx_Init+0x248>)
 8004446:	2202      	movs	r2, #2
 8004448:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800444a:	4847      	ldr	r0, [pc, #284]	; (8004568 <W25qxx_Init+0x27c>)
 800444c:	f011 ffc8 	bl	80163e0 <puts>
#endif
		break;
 8004450:	e008      	b.n	8004464 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004452:	4846      	ldr	r0, [pc, #280]	; (800456c <W25qxx_Init+0x280>)
 8004454:	f011 ffc4 	bl	80163e0 <puts>
#endif
		w25qxx.Lock = 0;
 8004458:	4b36      	ldr	r3, [pc, #216]	; (8004534 <W25qxx_Init+0x248>)
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004460:	2300      	movs	r3, #0
 8004462:	e063      	b.n	800452c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004464:	4b33      	ldr	r3, [pc, #204]	; (8004534 <W25qxx_Init+0x248>)
 8004466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800446a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800446c:	4b31      	ldr	r3, [pc, #196]	; (8004534 <W25qxx_Init+0x248>)
 800446e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004472:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004474:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <W25qxx_Init+0x248>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4a2e      	ldr	r2, [pc, #184]	; (8004534 <W25qxx_Init+0x248>)
 800447c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800447e:	4b2d      	ldr	r3, [pc, #180]	; (8004534 <W25qxx_Init+0x248>)
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	4a2c      	ldr	r2, [pc, #176]	; (8004534 <W25qxx_Init+0x248>)
 8004484:	6912      	ldr	r2, [r2, #16]
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <W25qxx_Init+0x248>)
 800448c:	8952      	ldrh	r2, [r2, #10]
 800448e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004492:	4a28      	ldr	r2, [pc, #160]	; (8004534 <W25qxx_Init+0x248>)
 8004494:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004496:	4b27      	ldr	r3, [pc, #156]	; (8004534 <W25qxx_Init+0x248>)
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	4a25      	ldr	r2, [pc, #148]	; (8004534 <W25qxx_Init+0x248>)
 800449e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80044a0:	4b24      	ldr	r3, [pc, #144]	; (8004534 <W25qxx_Init+0x248>)
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	4a23      	ldr	r2, [pc, #140]	; (8004534 <W25qxx_Init+0x248>)
 80044a6:	6912      	ldr	r2, [r2, #16]
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	0a9b      	lsrs	r3, r3, #10
 80044ae:	4a21      	ldr	r2, [pc, #132]	; (8004534 <W25qxx_Init+0x248>)
 80044b0:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80044b2:	f7ff fe5f 	bl	8004174 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80044b6:	2001      	movs	r0, #1
 80044b8:	f7ff fea8 	bl	800420c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80044bc:	2002      	movs	r0, #2
 80044be:	f7ff fea5 	bl	800420c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80044c2:	2003      	movs	r0, #3
 80044c4:	f7ff fea2 	bl	800420c <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <W25qxx_Init+0x248>)
 80044ca:	895b      	ldrh	r3, [r3, #10]
 80044cc:	4619      	mov	r1, r3
 80044ce:	4828      	ldr	r0, [pc, #160]	; (8004570 <W25qxx_Init+0x284>)
 80044d0:	f011 ff00 	bl	80162d4 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80044d4:	4b17      	ldr	r3, [pc, #92]	; (8004534 <W25qxx_Init+0x248>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4619      	mov	r1, r3
 80044da:	4826      	ldr	r0, [pc, #152]	; (8004574 <W25qxx_Init+0x288>)
 80044dc:	f011 fefa 	bl	80162d4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <W25qxx_Init+0x248>)
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	4619      	mov	r1, r3
 80044e6:	4824      	ldr	r0, [pc, #144]	; (8004578 <W25qxx_Init+0x28c>)
 80044e8:	f011 fef4 	bl	80162d4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <W25qxx_Init+0x248>)
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	4619      	mov	r1, r3
 80044f2:	4822      	ldr	r0, [pc, #136]	; (800457c <W25qxx_Init+0x290>)
 80044f4:	f011 feee 	bl	80162d4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80044f8:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <W25qxx_Init+0x248>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	4619      	mov	r1, r3
 80044fe:	4820      	ldr	r0, [pc, #128]	; (8004580 <W25qxx_Init+0x294>)
 8004500:	f011 fee8 	bl	80162d4 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <W25qxx_Init+0x248>)
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	4619      	mov	r1, r3
 800450a:	481e      	ldr	r0, [pc, #120]	; (8004584 <W25qxx_Init+0x298>)
 800450c:	f011 fee2 	bl	80162d4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <W25qxx_Init+0x248>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	4619      	mov	r1, r3
 8004516:	481c      	ldr	r0, [pc, #112]	; (8004588 <W25qxx_Init+0x29c>)
 8004518:	f011 fedc 	bl	80162d4 <iprintf>
	printf("w25qxx Init Done\r\n");
 800451c:	481b      	ldr	r0, [pc, #108]	; (800458c <W25qxx_Init+0x2a0>)
 800451e:	f011 ff5f 	bl	80163e0 <puts>
#endif
	w25qxx.Lock = 0;
 8004522:	4b04      	ldr	r3, [pc, #16]	; (8004534 <W25qxx_Init+0x248>)
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800452a:	2301      	movs	r3, #1
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	2000601c 	.word	0x2000601c
 8004538:	40020c00 	.word	0x40020c00
 800453c:	0801a960 	.word	0x0801a960
 8004540:	0801a978 	.word	0x0801a978
 8004544:	0801a98c 	.word	0x0801a98c
 8004548:	0801a9a4 	.word	0x0801a9a4
 800454c:	0801a9bc 	.word	0x0801a9bc
 8004550:	0801a9d4 	.word	0x0801a9d4
 8004554:	0801a9ec 	.word	0x0801a9ec
 8004558:	0801aa04 	.word	0x0801aa04
 800455c:	0801aa1c 	.word	0x0801aa1c
 8004560:	0801aa34 	.word	0x0801aa34
 8004564:	0801aa4c 	.word	0x0801aa4c
 8004568:	0801aa64 	.word	0x0801aa64
 800456c:	0801aa7c 	.word	0x0801aa7c
 8004570:	0801aa90 	.word	0x0801aa90
 8004574:	0801aab0 	.word	0x0801aab0
 8004578:	0801aac8 	.word	0x0801aac8
 800457c:	0801aae8 	.word	0x0801aae8
 8004580:	0801ab04 	.word	0x0801ab04
 8004584:	0801ab24 	.word	0x0801ab24
 8004588:	0801ab40 	.word	0x0801ab40
 800458c:	0801ab60 	.word	0x0801ab60

08004590 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004598:	e002      	b.n	80045a0 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800459a:	2001      	movs	r0, #1
 800459c:	f00c facd 	bl	8010b3a <osDelay>
	while (w25qxx.Lock == 1)
 80045a0:	4b2d      	ldr	r3, [pc, #180]	; (8004658 <W25qxx_EraseSector+0xc8>)
 80045a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d0f7      	beq.n	800459a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80045aa:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <W25qxx_EraseSector+0xc8>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80045b2:	f002 fe5d 	bl	8007270 <HAL_GetTick>
 80045b6:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4828      	ldr	r0, [pc, #160]	; (800465c <W25qxx_EraseSector+0xcc>)
 80045bc:	f011 fe8a 	bl	80162d4 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80045c0:	f7ff fe6a 	bl	8004298 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80045c4:	4b24      	ldr	r3, [pc, #144]	; (8004658 <W25qxx_EraseSector+0xc8>)
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80045d0:	f7ff fe06 	bl	80041e0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80045d4:	2200      	movs	r2, #0
 80045d6:	2140      	movs	r1, #64	; 0x40
 80045d8:	4821      	ldr	r0, [pc, #132]	; (8004660 <W25qxx_EraseSector+0xd0>)
 80045da:	f003 fd61 	bl	80080a0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80045de:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <W25qxx_EraseSector+0xc8>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d909      	bls.n	80045fa <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80045e6:	2021      	movs	r0, #33	; 0x21
 80045e8:	f7ff fd78 	bl	80040dc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	0e1b      	lsrs	r3, r3, #24
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fd72 	bl	80040dc <W25qxx_Spi>
 80045f8:	e002      	b.n	8004600 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80045fa:	2020      	movs	r0, #32
 80045fc:	f7ff fd6e 	bl	80040dc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	0c1b      	lsrs	r3, r3, #16
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fd68 	bl	80040dc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	b2db      	uxtb	r3, r3
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fd62 	bl	80040dc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fd5d 	bl	80040dc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004622:	2201      	movs	r2, #1
 8004624:	2140      	movs	r1, #64	; 0x40
 8004626:	480e      	ldr	r0, [pc, #56]	; (8004660 <W25qxx_EraseSector+0xd0>)
 8004628:	f003 fd3a 	bl	80080a0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800462c:	f7ff fe34 	bl	8004298 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004630:	f002 fe1e 	bl	8007270 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	4619      	mov	r1, r3
 800463c:	4809      	ldr	r0, [pc, #36]	; (8004664 <W25qxx_EraseSector+0xd4>)
 800463e:	f011 fe49 	bl	80162d4 <iprintf>
#endif
	W25qxx_Delay(1);
 8004642:	2001      	movs	r0, #1
 8004644:	f00c fa79 	bl	8010b3a <osDelay>
	w25qxx.Lock = 0;
 8004648:	4b03      	ldr	r3, [pc, #12]	; (8004658 <W25qxx_EraseSector+0xc8>)
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	2000601c 	.word	0x2000601c
 800465c:	0801abb8 	.word	0x0801abb8
 8004660:	40020c00 	.word	0x40020c00
 8004664:	0801abdc 	.word	0x0801abdc

08004668 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <W25qxx_SectorToPage+0x28>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	4a05      	ldr	r2, [pc, #20]	; (8004690 <W25qxx_SectorToPage+0x28>)
 800467c:	8952      	ldrh	r2, [r2, #10]
 800467e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	2000601c 	.word	0x2000601c

08004694 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80046a2:	e002      	b.n	80046aa <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80046a4:	2001      	movs	r0, #1
 80046a6:	f00c fa48 	bl	8010b3a <osDelay>
	while (w25qxx.Lock == 1)
 80046aa:	4b57      	ldr	r3, [pc, #348]	; (8004808 <W25qxx_WritePage+0x174>)
 80046ac:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d0f7      	beq.n	80046a4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80046b4:	4b54      	ldr	r3, [pc, #336]	; (8004808 <W25qxx_WritePage+0x174>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4413      	add	r3, r2
 80046c2:	4a51      	ldr	r2, [pc, #324]	; (8004808 <W25qxx_WritePage+0x174>)
 80046c4:	8952      	ldrh	r2, [r2, #10]
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d802      	bhi.n	80046d0 <W25qxx_WritePage+0x3c>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80046d0:	4b4d      	ldr	r3, [pc, #308]	; (8004808 <W25qxx_WritePage+0x174>)
 80046d2:	895b      	ldrh	r3, [r3, #10]
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	4413      	add	r3, r2
 80046e2:	4a49      	ldr	r2, [pc, #292]	; (8004808 <W25qxx_WritePage+0x174>)
 80046e4:	8952      	ldrh	r2, [r2, #10]
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d905      	bls.n	80046f6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80046ea:	4b47      	ldr	r3, [pc, #284]	; (8004808 <W25qxx_WritePage+0x174>)
 80046ec:	895b      	ldrh	r3, [r3, #10]
 80046ee:	461a      	mov	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	4843      	ldr	r0, [pc, #268]	; (800480c <W25qxx_WritePage+0x178>)
 80046fe:	f011 fde9 	bl	80162d4 <iprintf>
	W25qxx_Delay(100);
 8004702:	2064      	movs	r0, #100	; 0x64
 8004704:	f00c fa19 	bl	8010b3a <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004708:	f002 fdb2 	bl	8007270 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 800470e:	f7ff fdc3 	bl	8004298 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004712:	f7ff fd65 	bl	80041e0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004716:	2200      	movs	r2, #0
 8004718:	2140      	movs	r1, #64	; 0x40
 800471a:	483d      	ldr	r0, [pc, #244]	; (8004810 <W25qxx_WritePage+0x17c>)
 800471c:	f003 fcc0 	bl	80080a0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004720:	4b39      	ldr	r3, [pc, #228]	; (8004808 <W25qxx_WritePage+0x174>)
 8004722:	895b      	ldrh	r3, [r3, #10]
 8004724:	461a      	mov	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	fb03 f302 	mul.w	r3, r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004732:	4b35      	ldr	r3, [pc, #212]	; (8004808 <W25qxx_WritePage+0x174>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b08      	cmp	r3, #8
 8004738:	d909      	bls.n	800474e <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800473a:	2012      	movs	r0, #18
 800473c:	f7ff fcce 	bl	80040dc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	0e1b      	lsrs	r3, r3, #24
 8004744:	b2db      	uxtb	r3, r3
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fcc8 	bl	80040dc <W25qxx_Spi>
 800474c:	e002      	b.n	8004754 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800474e:	2002      	movs	r0, #2
 8004750:	f7ff fcc4 	bl	80040dc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	0c1b      	lsrs	r3, r3, #16
 8004758:	b2db      	uxtb	r3, r3
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fcbe 	bl	80040dc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	b2db      	uxtb	r3, r3
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fcb8 	bl	80040dc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fcb3 	bl	80040dc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b29a      	uxth	r2, r3
 800477a:	2364      	movs	r3, #100	; 0x64
 800477c:	68f9      	ldr	r1, [r7, #12]
 800477e:	4825      	ldr	r0, [pc, #148]	; (8004814 <W25qxx_WritePage+0x180>)
 8004780:	f006 facd 	bl	800ad1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004784:	2201      	movs	r2, #1
 8004786:	2140      	movs	r1, #64	; 0x40
 8004788:	4821      	ldr	r0, [pc, #132]	; (8004810 <W25qxx_WritePage+0x17c>)
 800478a:	f003 fc89 	bl	80080a0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800478e:	f7ff fd83 	bl	8004298 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004792:	f002 fd6d 	bl	8007270 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e018      	b.n	80047d6 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d108      	bne.n	80047c0 <W25qxx_WritePage+0x12c>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d905      	bls.n	80047c0 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80047b4:	4818      	ldr	r0, [pc, #96]	; (8004818 <W25qxx_WritePage+0x184>)
 80047b6:	f011 fe13 	bl	80163e0 <puts>
			W25qxx_Delay(10);
 80047ba:	200a      	movs	r0, #10
 80047bc:	f00c f9bd 	bl	8010b3a <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	4413      	add	r3, r2
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	4619      	mov	r1, r3
 80047ca:	4814      	ldr	r0, [pc, #80]	; (800481c <W25qxx_WritePage+0x188>)
 80047cc:	f011 fd82 	bl	80162d4 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3301      	adds	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3e2      	bcc.n	80047a4 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80047de:	480e      	ldr	r0, [pc, #56]	; (8004818 <W25qxx_WritePage+0x184>)
 80047e0:	f011 fdfe 	bl	80163e0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80047e4:	6939      	ldr	r1, [r7, #16]
 80047e6:	480e      	ldr	r0, [pc, #56]	; (8004820 <W25qxx_WritePage+0x18c>)
 80047e8:	f011 fd74 	bl	80162d4 <iprintf>
	W25qxx_Delay(100);
 80047ec:	2064      	movs	r0, #100	; 0x64
 80047ee:	f00c f9a4 	bl	8010b3a <osDelay>
#endif
	W25qxx_Delay(1);
 80047f2:	2001      	movs	r0, #1
 80047f4:	f00c f9a1 	bl	8010b3a <osDelay>
	w25qxx.Lock = 0;
 80047f8:	4b03      	ldr	r3, [pc, #12]	; (8004808 <W25qxx_WritePage+0x174>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004800:	bf00      	nop
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	2000601c 	.word	0x2000601c
 800480c:	0801ae40 	.word	0x0801ae40
 8004810:	40020c00 	.word	0x40020c00
 8004814:	20005bc0 	.word	0x20005bc0
 8004818:	0801ae7c 	.word	0x0801ae7c
 800481c:	0801ae80 	.word	0x0801ae80
 8004820:	0801ae88 	.word	0x0801ae88

08004824 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004832:	4b36      	ldr	r3, [pc, #216]	; (800490c <W25qxx_WriteSector+0xe8>)
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d802      	bhi.n	8004842 <W25qxx_WriteSector+0x1e>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004842:	4b32      	ldr	r3, [pc, #200]	; (800490c <W25qxx_WriteSector+0xe8>)
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4830      	ldr	r0, [pc, #192]	; (8004910 <W25qxx_WriteSector+0xec>)
 8004850:	f011 fd40 	bl	80162d4 <iprintf>
	W25qxx_Delay(100);
 8004854:	2064      	movs	r0, #100	; 0x64
 8004856:	f00c f970 	bl	8010b3a <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800485a:	4b2c      	ldr	r3, [pc, #176]	; (800490c <W25qxx_WriteSector+0xe8>)
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	429a      	cmp	r2, r3
 8004862:	d306      	bcc.n	8004872 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8004864:	482b      	ldr	r0, [pc, #172]	; (8004914 <W25qxx_WriteSector+0xf0>)
 8004866:	f011 fdbb 	bl	80163e0 <puts>
		W25qxx_Delay(100);
 800486a:	2064      	movs	r0, #100	; 0x64
 800486c:	f00c f965 	bl	8010b3a <osDelay>
#endif
		return;
 8004870:	e048      	b.n	8004904 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	441a      	add	r2, r3
 8004878:	4b24      	ldr	r3, [pc, #144]	; (800490c <W25qxx_WriteSector+0xe8>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	429a      	cmp	r2, r3
 800487e:	d905      	bls.n	800488c <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004880:	4b22      	ldr	r3, [pc, #136]	; (800490c <W25qxx_WriteSector+0xe8>)
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	e001      	b.n	8004890 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004890:	68b8      	ldr	r0, [r7, #8]
 8004892:	f7ff fee9 	bl	8004668 <W25qxx_SectorToPage>
 8004896:	4602      	mov	r2, r0
 8004898:	4b1c      	ldr	r3, [pc, #112]	; (800490c <W25qxx_WriteSector+0xe8>)
 800489a:	895b      	ldrh	r3, [r3, #10]
 800489c:	4619      	mov	r1, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80048a4:	4413      	add	r3, r2
 80048a6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80048a8:	4b18      	ldr	r3, [pc, #96]	; (800490c <W25qxx_WriteSector+0xe8>)
 80048aa:	895b      	ldrh	r3, [r3, #10]
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80048b4:	fb02 f201 	mul.w	r2, r2, r1
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff fee6 	bl	8004694 <W25qxx_WritePage>
		StartPage++;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	3301      	adds	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80048ce:	4b0f      	ldr	r3, [pc, #60]	; (800490c <W25qxx_WriteSector+0xe8>)
 80048d0:	895b      	ldrh	r3, [r3, #10]
 80048d2:	461a      	mov	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	1a9a      	subs	r2, r3, r2
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	4413      	add	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <W25qxx_WriteSector+0xe8>)
 80048e0:	895b      	ldrh	r3, [r3, #10]
 80048e2:	461a      	mov	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	dce1      	bgt.n	80048bc <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80048f8:	4807      	ldr	r0, [pc, #28]	; (8004918 <W25qxx_WriteSector+0xf4>)
 80048fa:	f011 fd71 	bl	80163e0 <puts>
	W25qxx_Delay(100);
 80048fe:	2064      	movs	r0, #100	; 0x64
 8004900:	f00c f91b 	bl	8010b3a <osDelay>
#endif
}
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	2000601c 	.word	0x2000601c
 8004910:	0801aeac 	.word	0x0801aeac
 8004914:	0801aeec 	.word	0x0801aeec
 8004918:	0801af0c 	.word	0x0801af0c

0800491c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800492a:	e002      	b.n	8004932 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800492c:	2001      	movs	r0, #1
 800492e:	f00c f904 	bl	8010b3a <osDelay>
	while (w25qxx.Lock == 1)
 8004932:	4b54      	ldr	r3, [pc, #336]	; (8004a84 <W25qxx_ReadPage+0x168>)
 8004934:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004938:	2b01      	cmp	r3, #1
 800493a:	d0f7      	beq.n	800492c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800493c:	4b51      	ldr	r3, [pc, #324]	; (8004a84 <W25qxx_ReadPage+0x168>)
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004944:	4b4f      	ldr	r3, [pc, #316]	; (8004a84 <W25qxx_ReadPage+0x168>)
 8004946:	895b      	ldrh	r3, [r3, #10]
 8004948:	461a      	mov	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	4293      	cmp	r3, r2
 800494e:	d802      	bhi.n	8004956 <W25qxx_ReadPage+0x3a>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004956:	4b4b      	ldr	r3, [pc, #300]	; (8004a84 <W25qxx_ReadPage+0x168>)
 8004958:	895b      	ldrh	r3, [r3, #10]
 800495a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	4413      	add	r3, r2
 8004962:	4a48      	ldr	r2, [pc, #288]	; (8004a84 <W25qxx_ReadPage+0x168>)
 8004964:	8952      	ldrh	r2, [r2, #10]
 8004966:	4293      	cmp	r3, r2
 8004968:	d905      	bls.n	8004976 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800496a:	4b46      	ldr	r3, [pc, #280]	; (8004a84 <W25qxx_ReadPage+0x168>)
 800496c:	895b      	ldrh	r3, [r3, #10]
 800496e:	461a      	mov	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	4842      	ldr	r0, [pc, #264]	; (8004a88 <W25qxx_ReadPage+0x16c>)
 800497e:	f011 fca9 	bl	80162d4 <iprintf>
	W25qxx_Delay(100);
 8004982:	2064      	movs	r0, #100	; 0x64
 8004984:	f00c f8d9 	bl	8010b3a <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004988:	f002 fc72 	bl	8007270 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800498e:	4b3d      	ldr	r3, [pc, #244]	; (8004a84 <W25qxx_ReadPage+0x168>)
 8004990:	895b      	ldrh	r3, [r3, #10]
 8004992:	461a      	mov	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	fb03 f302 	mul.w	r3, r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	4413      	add	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80049a0:	2200      	movs	r2, #0
 80049a2:	2140      	movs	r1, #64	; 0x40
 80049a4:	4839      	ldr	r0, [pc, #228]	; (8004a8c <W25qxx_ReadPage+0x170>)
 80049a6:	f003 fb7b 	bl	80080a0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <W25qxx_ReadPage+0x168>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d909      	bls.n	80049c6 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80049b2:	200c      	movs	r0, #12
 80049b4:	f7ff fb92 	bl	80040dc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	0e1b      	lsrs	r3, r3, #24
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fb8c 	bl	80040dc <W25qxx_Spi>
 80049c4:	e002      	b.n	80049cc <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80049c6:	200b      	movs	r0, #11
 80049c8:	f7ff fb88 	bl	80040dc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	0c1b      	lsrs	r3, r3, #16
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fb82 	bl	80040dc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fb7c 	bl	80040dc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fb77 	bl	80040dc <W25qxx_Spi>
	W25qxx_Spi(0);
 80049ee:	2000      	movs	r0, #0
 80049f0:	f7ff fb74 	bl	80040dc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	2364      	movs	r3, #100	; 0x64
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	4824      	ldr	r0, [pc, #144]	; (8004a90 <W25qxx_ReadPage+0x174>)
 80049fe:	f006 faca 	bl	800af96 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a02:	2201      	movs	r2, #1
 8004a04:	2140      	movs	r1, #64	; 0x40
 8004a06:	4821      	ldr	r0, [pc, #132]	; (8004a8c <W25qxx_ReadPage+0x170>)
 8004a08:	f003 fb4a 	bl	80080a0 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004a0c:	f002 fc30 	bl	8007270 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e018      	b.n	8004a50 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d108      	bne.n	8004a3a <W25qxx_ReadPage+0x11e>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d905      	bls.n	8004a3a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004a2e:	4819      	ldr	r0, [pc, #100]	; (8004a94 <W25qxx_ReadPage+0x178>)
 8004a30:	f011 fcd6 	bl	80163e0 <puts>
			W25qxx_Delay(10);
 8004a34:	200a      	movs	r0, #10
 8004a36:	f00c f880 	bl	8010b3a <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	4413      	add	r3, r2
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	4619      	mov	r1, r3
 8004a44:	4814      	ldr	r0, [pc, #80]	; (8004a98 <W25qxx_ReadPage+0x17c>)
 8004a46:	f011 fc45 	bl	80162d4 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d3e2      	bcc.n	8004a1e <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004a58:	480e      	ldr	r0, [pc, #56]	; (8004a94 <W25qxx_ReadPage+0x178>)
 8004a5a:	f011 fcc1 	bl	80163e0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004a5e:	6939      	ldr	r1, [r7, #16]
 8004a60:	480e      	ldr	r0, [pc, #56]	; (8004a9c <W25qxx_ReadPage+0x180>)
 8004a62:	f011 fc37 	bl	80162d4 <iprintf>
	W25qxx_Delay(100);
 8004a66:	2064      	movs	r0, #100	; 0x64
 8004a68:	f00c f867 	bl	8010b3a <osDelay>
#endif
	W25qxx_Delay(1);
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f00c f864 	bl	8010b3a <osDelay>
	w25qxx.Lock = 0;
 8004a72:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <W25qxx_ReadPage+0x168>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004a7a:	bf00      	nop
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2000601c 	.word	0x2000601c
 8004a88:	0801b058 	.word	0x0801b058
 8004a8c:	40020c00 	.word	0x40020c00
 8004a90:	20005bc0 	.word	0x20005bc0
 8004a94:	0801ae7c 	.word	0x0801ae7c
 8004a98:	0801ae80 	.word	0x0801ae80
 8004a9c:	0801b094 	.word	0x0801b094

08004aa0 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004aae:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <W25qxx_ReadSector+0xe8>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d802      	bhi.n	8004abe <W25qxx_ReadSector+0x1e>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004abe:	4b32      	ldr	r3, [pc, #200]	; (8004b88 <W25qxx_ReadSector+0xe8>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	4830      	ldr	r0, [pc, #192]	; (8004b8c <W25qxx_ReadSector+0xec>)
 8004acc:	f011 fc02 	bl	80162d4 <iprintf>
	W25qxx_Delay(100);
 8004ad0:	2064      	movs	r0, #100	; 0x64
 8004ad2:	f00c f832 	bl	8010b3a <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004ad6:	4b2c      	ldr	r3, [pc, #176]	; (8004b88 <W25qxx_ReadSector+0xe8>)
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d306      	bcc.n	8004aee <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004ae0:	482b      	ldr	r0, [pc, #172]	; (8004b90 <W25qxx_ReadSector+0xf0>)
 8004ae2:	f011 fc7d 	bl	80163e0 <puts>
		W25qxx_Delay(100);
 8004ae6:	2064      	movs	r0, #100	; 0x64
 8004ae8:	f00c f827 	bl	8010b3a <osDelay>
#endif
		return;
 8004aec:	e048      	b.n	8004b80 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	441a      	add	r2, r3
 8004af4:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <W25qxx_ReadSector+0xe8>)
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d905      	bls.n	8004b08 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004afc:	4b22      	ldr	r3, [pc, #136]	; (8004b88 <W25qxx_ReadSector+0xe8>)
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e001      	b.n	8004b0c <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004b0c:	68b8      	ldr	r0, [r7, #8]
 8004b0e:	f7ff fdab 	bl	8004668 <W25qxx_SectorToPage>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <W25qxx_ReadSector+0xe8>)
 8004b16:	895b      	ldrh	r3, [r3, #10]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b20:	4413      	add	r3, r2
 8004b22:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004b24:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <W25qxx_ReadSector+0xe8>)
 8004b26:	895b      	ldrh	r3, [r3, #10]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b30:	fb02 f201 	mul.w	r2, r2, r1
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	69f9      	ldr	r1, [r7, #28]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff feec 	bl	800491c <W25qxx_ReadPage>
		StartPage++;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004b4a:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <W25qxx_ReadSector+0xe8>)
 8004b4c:	895b      	ldrh	r3, [r3, #10]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	1a9a      	subs	r2, r3, r2
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	4413      	add	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <W25qxx_ReadSector+0xe8>)
 8004b5c:	895b      	ldrh	r3, [r3, #10]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	dce1      	bgt.n	8004b38 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004b74:	4807      	ldr	r0, [pc, #28]	; (8004b94 <W25qxx_ReadSector+0xf4>)
 8004b76:	f011 fc33 	bl	80163e0 <puts>
	W25qxx_Delay(100);
 8004b7a:	2064      	movs	r0, #100	; 0x64
 8004b7c:	f00b ffdd 	bl	8010b3a <osDelay>
#endif
}
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	2000601c 	.word	0x2000601c
 8004b8c:	0801b0b8 	.word	0x0801b0b8
 8004b90:	0801b0f8 	.word	0x0801b0f8
 8004b94:	0801b118 	.word	0x0801b118

08004b98 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	4611      	mov	r1, r2
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8004be6:	2309      	movs	r3, #9
 8004be8:	e028      	b.n	8004c3c <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <_ZN10IridiumSBD5sleepEv+0x30>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d101      	bne.n	8004c04 <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 8004c00:	230b      	movs	r3, #11
 8004c02:	e01b      	b.n	8004c3c <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8d3 	bl	8004db8 <_ZN10IridiumSBD13internalSleepEv>
 8004c12:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f979 	bl	8004f24 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004c32:	2100      	movs	r1, #0
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f8d1 	bl	8004ddc <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

   return ISBD_SUCCESS;
}

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004c5a:	4918      	ldr	r1, [pc, #96]	; (8004cbc <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f96f 	bl	8004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004c62:	e028      	b.n	8004cb6 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f991 	bl	8004f8c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004c86:	e00f      	b.n	8004ca8 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c8e:	b25a      	sxtb	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004c96:	b25b      	sxtb	r3, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	b25b      	sxtb	r3, r3
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	b25b      	sxtb	r3, r3
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f9a6 	bl	8005002 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	0801b21c 	.word	0x0801b21c

08004cc0 <_ZN10IridiumSBD16enable9603NpowerEb>:
    return(false);
  }
}

void IridiumSBD::enable9603Npower(bool enable)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d004      	beq.n	8004ce0 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004cd6:	4918      	ldr	r1, [pc, #96]	; (8004d38 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f931 	bl	8004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004cde:	e028      	b.n	8004d32 <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f953 	bl	8004f8c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00b      	beq.n	8004d04 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004d02:	e00f      	b.n	8004d24 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004d0a:	b25a      	sxtb	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004d12:	b25b      	sxtb	r3, r3
 8004d14:	43db      	mvns	r3, r3
 8004d16:	b25b      	sxtb	r3, r3
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b25b      	sxtb	r3, r3
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f968 	bl	8005002 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	0801b2b4 	.word	0x0801b2b4

08004d3c <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004d52:	4918      	ldr	r1, [pc, #96]	; (8004db4 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f8f3 	bl	8004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004d5a:	e028      	b.n	8004dae <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f915 	bl	8004f8c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004d74:	4313      	orrs	r3, r2
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004d7e:	e00f      	b.n	8004da0 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004d86:	b25a      	sxtb	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004d8e:	b25b      	sxtb	r3, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	4013      	ands	r3, r2
 8004d96:	b25b      	sxtb	r3, r3
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f92a 	bl	8005002 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	0801b2fc 	.word	0x0801b2fc

08004db8 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8004dca:	230a      	movs	r3, #10
 8004dcc:	e000      	b.n	8004dd0 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	f083 0301 	eor.w	r3, r3, #1
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d011      	beq.n	8004e24 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d04c      	beq.n	8004ea6 <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f84e 	bl	8004eb8 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d018      	beq.n	8004e5c <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 8004e2a:	4921      	ldr	r1, [pc, #132]	; (8004eb0 <_ZN10IridiumSBD5powerEb+0xd4>)
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f887 	bl	8004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f848 	bl	8004ed4 <_ZN10IridiumSBD11setSleepPinEh>
 8004e44:	e003      	b.n	8004e4e <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8004e46:	2101      	movs	r1, #1
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff ff77 	bl	8004d3c <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8004e4e:	f002 fa0f 	bl	8007270 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8004e5a:	e025      	b.n	8004ea8 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8004e5c:	f002 fa08 	bl	8007270 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004e72:	d205      	bcs.n	8004e80 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f002 fa04 	bl	8007288 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8004e80:	490c      	ldr	r1, [pc, #48]	; (8004eb4 <_ZN10IridiumSBD5powerEb+0xd8>)
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f85c 	bl	8004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d004      	beq.n	8004e9c <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8004e92:	2100      	movs	r1, #0
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f81d 	bl	8004ed4 <_ZN10IridiumSBD11setSleepPinEh>
 8004e9a:	e005      	b.n	8004ea8 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff ff4c 	bl	8004d3c <_ZN10IridiumSBD10enable9603Eb>
 8004ea4:	e000      	b.n	8004ea8 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8004ea6:	bf00      	nop
      }
   }
}
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	0801b78c 	.word	0x0801b78c
 8004eb4:	0801b7a4 	.word	0x0801b7a4

08004eb8 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8004ec0:	4903      	ldr	r1, [pc, #12]	; (8004ed0 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f83c 	bl	8004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	0801b7bc 	.word	0x0801b7bc

08004ed4 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	2108      	movs	r1, #8
 8004ee4:	480b      	ldr	r0, [pc, #44]	; (8004f14 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8004ee6:	f003 f8db 	bl	80080a0 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8004eea:	490b      	ldr	r1, [pc, #44]	; (8004f18 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f827 	bl	8004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d104      	bne.n	8004f02 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8004ef8:	4908      	ldr	r1, [pc, #32]	; (8004f1c <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f820 	bl	8004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8004f00:	e003      	b.n	8004f0a <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8004f02:	4907      	ldr	r1, [pc, #28]	; (8004f20 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f81b 	bl	8004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40020800 	.word	0x40020800
 8004f18:	0801b7e8 	.word	0x0801b7e8
 8004f1c:	0801b804 	.word	0x0801b804
 8004f20:	0801b80c 	.word	0x0801b80c

08004f24 <_ZN10IridiumSBD13endSerialPortEv>:
{
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
}

void IridiumSBD::endSerialPort()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8004f2c:	4903      	ldr	r1, [pc, #12]	; (8004f3c <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f806 	bl	8004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	0801b834 	.word	0x0801b834

08004f40 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	60fa      	str	r2, [r7, #12]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8004f58:	7afb      	ldrb	r3, [r7, #11]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8004f5e:	7afb      	ldrb	r3, [r7, #11]
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fe2a 	bl	8004bbc <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8004f68:	e7f1      	b.n	8004f4e <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8004f6a:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8004f6c:	687c      	ldr	r4, [r7, #4]
 8004f6e:	6838      	ldr	r0, [r7, #0]
 8004f70:	f7fb f93e 	bl	80001f0 <strlen>
 8004f74:	4603      	mov	r3, r0
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f007 fce5 	bl	800c94e <HAL_UART_Transmit>
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd90      	pop	{r4, r7, pc}

08004f8c <_ZN10IridiumSBD13check9603pinsEv>:
  }
}

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f000 f9c9 	bl	8005338 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004faa:	2110      	movs	r1, #16
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fdf3 	bl	8004b98 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fa08 	bl	80053cc <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f000 f9a2 	bl	8005312 <_ZN7TwoWire11requestFromEhh>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4610      	mov	r0, r2
 8004fee:	4798      	blx	r3
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f000 f98c 	bl	8005338 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005024:	2110      	movs	r1, #16
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fdb6 	bl	8004b98 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	78f9      	ldrb	r1, [r7, #3]
 800503a:	4610      	mov	r0, r2
 800503c:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f9c2 	bl	80053cc <_ZN7TwoWire15endTransmissionEv>
}
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:

	return HAL_OK;
}


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b08b      	sub	sp, #44	; 0x2c
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f04f 33ff 	mov.w	r3, #4294967295
 800505e:	221d      	movs	r2, #29
 8005060:	492f      	ldr	r1, [pc, #188]	; (8005120 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8005062:	f007 fc74 	bl	800c94e <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f04f 33ff 	mov.w	r3, #4294967295
 800506c:	221d      	movs	r2, #29
 800506e:	492d      	ldr	r1, [pc, #180]	; (8005124 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8005070:	f007 fc6d 	bl	800c94e <HAL_UART_Transmit>
	int err = this->sleep();
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fdad 	bl	8004bd4 <_ZN10IridiumSBD5sleepEv>
 800507a:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d017      	beq.n	80050b2 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8005082:	f107 0308 	add.w	r3, r7, #8
 8005086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005088:	4927      	ldr	r1, [pc, #156]	; (8005128 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 800508a:	4618      	mov	r0, r3
 800508c:	f011 fa74 	bl	8016578 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005090:	687c      	ldr	r4, [r7, #4]
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb f8aa 	bl	80001f0 <strlen>
 800509c:	4603      	mov	r3, r0
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f107 0108 	add.w	r1, r7, #8
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	4620      	mov	r0, r4
 80050aa:	f007 fc50 	bl	800c94e <HAL_UART_Transmit>
		return false;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e032      	b.n	8005118 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f04f 33ff 	mov.w	r3, #4294967295
 80050b8:	2204      	movs	r2, #4
 80050ba:	491c      	ldr	r1, [pc, #112]	; (800512c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 80050bc:	f007 fc47 	bl	800c94e <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f04f 33ff 	mov.w	r3, #4294967295
 80050c6:	2218      	movs	r2, #24
 80050c8:	4919      	ldr	r1, [pc, #100]	; (8005130 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 80050ca:	f007 fc40 	bl	800c94e <HAL_UART_Transmit>
	this->enable9603Npower(false);
 80050ce:	2100      	movs	r1, #0
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fdf5 	bl	8004cc0 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f04f 33ff 	mov.w	r3, #4294967295
 80050dc:	2204      	movs	r2, #4
 80050de:	4913      	ldr	r1, [pc, #76]	; (800512c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 80050e0:	f007 fc35 	bl	800c94e <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ea:	2227      	movs	r2, #39	; 0x27
 80050ec:	4911      	ldr	r1, [pc, #68]	; (8005134 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 80050ee:	f007 fc2e 	bl	800c94e <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 80050f2:	2100      	movs	r1, #0
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff fda5 	bl	8004c44 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005100:	2204      	movs	r2, #4
 8005102:	490a      	ldr	r1, [pc, #40]	; (800512c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005104:	f007 fc23 	bl	800c94e <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f04f 33ff 	mov.w	r3, #4294967295
 800510e:	2220      	movs	r2, #32
 8005110:	4909      	ldr	r1, [pc, #36]	; (8005138 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8005112:	f007 fc1c 	bl	800c94e <HAL_UART_Transmit>
	return true;
 8005116:	2301      	movs	r3, #1
}
 8005118:	4618      	mov	r0, r3
 800511a:	372c      	adds	r7, #44	; 0x2c
 800511c:	46bd      	mov	sp, r7
 800511e:	bd90      	pop	{r4, r7, pc}
 8005120:	0801ba40 	.word	0x0801ba40
 8005124:	0801ba60 	.word	0x0801ba60
 8005128:	0801ba80 	.word	0x0801ba80
 800512c:	0801b1ec 	.word	0x0801b1ec
 8005130:	0801ba9c 	.word	0x0801ba9c
 8005134:	0801bab8 	.word	0x0801bab8
 8005138:	0801bae0 	.word	0x0801bae0

0800513c <MRT_Static_Iridium_Destructor>:
	if (E_T==NULL){
		E_T = new IridiumSBD();
	}
}

void MRT_Static_Iridium_Destructor(){
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <MRT_Static_Iridium_Destructor+0x1c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 8005148:	4b03      	ldr	r3, [pc, #12]	; (8005158 <MRT_Static_Iridium_Destructor+0x1c>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
	}
}
 800514e:	bf00      	nop
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	200002dc 	.word	0x200002dc

0800515c <MRT_Static_Iridium_Shutdown>:
uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart, uint8_t timeout, uint8_t i2c_bus){
	MRT_Static_Iridium_Constructor();
	return E_T->MRT_Iridium_setup(huart,timeout, i2c_bus);
}

bool MRT_Static_Iridium_Shutdown(void){
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 8005162:	4b09      	ldr	r3, [pc, #36]	; (8005188 <MRT_Static_Iridium_Shutdown+0x2c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff ff72 	bl	8005050 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	bf14      	ite	ne
 8005172:	2301      	movne	r3, #1
 8005174:	2300      	moveq	r3, #0
 8005176:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 8005178:	f7ff ffe0 	bl	800513c <MRT_Static_Iridium_Destructor>
	return b;
 800517c:	79fb      	ldrb	r3, [r7, #7]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	200002dc 	.word	0x200002dc

0800518c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
  while (size--) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	1e5a      	subs	r2, r3, #1
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00e      	beq.n	80051ce <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	1c59      	adds	r1, r3, #1
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	4619      	mov	r1, r3
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	4790      	blx	r2
 80051c4:	4602      	mov	r2, r0
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	4413      	add	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
  while (size--) {
 80051cc:	e7e6      	b.n	800519c <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 80051ce:	697b      	ldr	r3, [r7, #20]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	4a06      	ldr	r2, [pc, #24]	; (80051fc <_ZN5PrintC1Ev+0x24>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	0801c2f4 	.word	0x0801c2f4

08005200 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ffe4 	bl	80051d8 <_ZN5PrintC1Ev>
 8005210:	4a05      	ldr	r2, [pc, #20]	; (8005228 <_ZN6StreamC1Ev+0x28>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800521c:	609a      	str	r2, [r3, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	0801c324 	.word	0x0801c324

0800522c <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ffe1 	bl	8005200 <_ZN6StreamC1Ev>
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3390      	adds	r3, #144	; 0x90
 800524e:	2220      	movs	r2, #32
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f010 f912 	bl	801547c <memset>
  rxBufferIndex = 0;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	0801c304 	.word	0x0801c304

0800529c <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	4608      	mov	r0, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	70fb      	strb	r3, [r7, #3]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70bb      	strb	r3, [r7, #2]
 80052b2:	4613      	mov	r3, r2
 80052b4:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fc24 	bl	8005b04 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 80052bc:	78bb      	ldrb	r3, [r7, #2]
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d901      	bls.n	80052c6 <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 80052c2:	2320      	movs	r3, #32
 80052c4:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	b2d9      	uxtb	r1, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80052d2:	78b8      	ldrb	r0, [r7, #2]
 80052d4:	787b      	ldrb	r3, [r7, #1]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	4603      	mov	r3, r0
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f9cf 	bl	800567e <_ZN7TwoWire15i2c_master_readEhPchh>
 80052e0:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da02      	bge.n	80052ee <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	73fb      	strb	r3, [r7, #15]
 80052ec:	e001      	b.n	80052f2 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7bfa      	ldrb	r2, [r7, #15]
 80052fe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fbcc 	bl	8005aa0 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	70fb      	strb	r3, [r7, #3]
 800531e:	4613      	mov	r3, r2
 8005320:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8005322:	78ba      	ldrb	r2, [r7, #2]
 8005324:	78f9      	ldrb	r1, [r7, #3]
 8005326:	2301      	movs	r3, #1
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ffb7 	bl	800529c <_ZN7TwoWire11requestFromEhhh>
 800532e:	4603      	mov	r3, r0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	78fa      	ldrb	r2, [r7, #3]
 8005350:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b086      	sub	sp, #24
 8005372:	af02      	add	r7, sp, #8
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fbc2 	bl	8005b04 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	7c1b      	ldrb	r3, [r3, #16]
 8005384:	0059      	lsls	r1, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f103 0211 	add.w	r2, r3, #17
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005392:	4618      	mov	r0, r3
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	4603      	mov	r3, r0
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa00 	bl	80057a0 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80053a0:	4603      	mov	r3, r0
 80053a2:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fb6f 	bl	8005aa0 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 80053d4:	2101      	movs	r1, #1
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff ffc9 	bl	800536e <_ZN7TwoWire15endTransmissionEh>
 80053dc:	4603      	mov	r3, r0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01d      	beq.n	8005438 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005402:	2b1f      	cmp	r3, #31
 8005404:	d901      	bls.n	800540a <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8005406:	2300      	movs	r3, #0
 8005408:	e028      	b.n	800545c <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005410:	4619      	mov	r1, r3
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	440b      	add	r3, r1
 8005418:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005420:	3301      	adds	r3, #1
 8005422:	b2da      	uxtb	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8005436:	e010      	b.n	800545a <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fb63 	bl	8005b04 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 800543e:	1cfb      	adds	r3, r7, #3
 8005440:	2201      	movs	r2, #1
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fa95 	bl	8005974 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fb28 	bl	8005aa0 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	333c      	adds	r3, #60	; 0x3c
 8005454:	4618      	mov	r0, r3
 8005456:	f003 fab9 	bl	80089cc <HAL_I2C_EnableListen_IT>
  }
  return 1;
 800545a:	2301      	movs	r3, #1
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005476:	2b00      	cmp	r3, #0
 8005478:	d013      	beq.n	80054a2 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d21e      	bcs.n	80054c4 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	440a      	add	r2, r1
 8005492:	7812      	ldrb	r2, [r2, #0]
 8005494:	4611      	mov	r1, r2
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	3301      	adds	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e7ed      	b.n	800547e <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fb2e 	bl	8005b04 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	461a      	mov	r2, r3
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fa60 	bl	8005974 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 faf3 	bl	8005aa0 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	333c      	adds	r3, #60	; 0x3c
 80054be:	4618      	mov	r0, r3
 80054c0:	f003 fa84 	bl	80089cc <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80054c4:	687b      	ldr	r3, [r7, #4]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	1ad3      	subs	r3, r2, r3
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  int value = -1;
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005502:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800550a:	b2da      	uxtb	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005512:	b2db      	uxtb	r3, r3
 8005514:	429a      	cmp	r2, r3
 8005516:	bf34      	ite	cc
 8005518:	2301      	movcc	r3, #1
 800551a:	2300      	movcs	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d012      	beq.n	8005548 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4413      	add	r3, r2
 8005530:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005534:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	3301      	adds	r3, #1
 8005540:	b2da      	uxtb	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8005548:	68fb      	ldr	r3, [r7, #12]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  int value = -1;
 800555e:	f04f 33ff 	mov.w	r3, #4294967295
 8005562:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800556a:	b2da      	uxtb	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	429a      	cmp	r2, r3
 8005576:	bf34      	ite	cc
 8005578:	2301      	movcc	r3, #1
 800557a:	2300      	movcs	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4413      	add	r3, r2
 8005590:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005594:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8005596:	68fb      	ldr	r3, [r7, #12]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c4:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055ce:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 80055d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055d4:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e2:	bf0c      	ite	eq
 80055e4:	2301      	moveq	r3, #1
 80055e6:	2300      	movne	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00b      	beq.n	8005606 <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1e5a      	subs	r2, r3, #1
 80055f2:	60fa      	str	r2, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf0c      	ite	eq
 80055f8:	2301      	moveq	r3, #1
 80055fa:	2300      	movne	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0e9      	beq.n	80055d6 <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8005602:	2301      	movs	r3, #1
 8005604:	e021      	b.n	800564a <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8005612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005616:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b01      	cmp	r3, #1
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1e5a      	subs	r2, r3, #1
 8005634:	60fa      	str	r2, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0e9      	beq.n	8005618 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	601a      	str	r2, [r3, #0]

    return 0;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b08a      	sub	sp, #40	; 0x28
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	461a      	mov	r2, r3
 800568a:	460b      	mov	r3, r1
 800568c:	72fb      	strb	r3, [r7, #11]
 800568e:	4613      	mov	r3, r2
 8005690:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005696:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7ff ff8d 	bl	80055b8 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800569e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	3b01      	subs	r3, #1
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1ed      	bne.n	80056a4 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	e064      	b.n	8005798 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80056dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	3b01      	subs	r3, #1
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1ed      	bne.n	80056e2 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	e045      	b.n	8005798 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8005722:	2300      	movs	r3, #0
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	7abb      	ldrb	r3, [r7, #10]
 8005728:	3b01      	subs	r3, #1
 800572a:	6a3a      	ldr	r2, [r7, #32]
 800572c:	429a      	cmp	r2, r3
 800572e:	da17      	bge.n	8005760 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8005730:	f107 0314 	add.w	r3, r7, #20
 8005734:	2200      	movs	r2, #0
 8005736:	4619      	mov	r1, r3
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f8a4 	bl	8005886 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800573e:	61b8      	str	r0, [r7, #24]
        if(ret)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8005746:	f04f 33ff 	mov.w	r3, #4294967295
 800574a:	e025      	b.n	8005798 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 800574c:	6979      	ldr	r1, [r7, #20]
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4413      	add	r3, r2
 8005754:	b2ca      	uxtb	r2, r1
 8005756:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	3301      	adds	r3, #1
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	e7e2      	b.n	8005726 <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8005760:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff ff74 	bl	8005656 <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 800576e:	f107 0314 	add.w	r3, r7, #20
 8005772:	2201      	movs	r2, #1
 8005774:	4619      	mov	r1, r3
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f885 	bl	8005886 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800577c:	61b8      	str	r0, [r7, #24]
    if(ret)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8005784:	f04f 33ff 	mov.w	r3, #4294967295
 8005788:	e006      	b.n	8005798 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 800578a:	6979      	ldr	r1, [r7, #20]
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	b2ca      	uxtb	r2, r1
 8005794:	701a      	strb	r2, [r3, #0]

    return length;
 8005796:	7abb      	ldrb	r3, [r7, #10]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3728      	adds	r7, #40	; 0x28
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f7ff feff 	bl	80055b8 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80057ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057be:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	3b01      	subs	r3, #1
 80057dc:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1ed      	bne.n	80057c0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 80057e4:	2304      	movs	r3, #4
 80057e6:	e04a      	b.n	800587e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80057f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f8:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b02      	cmp	r3, #2
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	3b01      	subs	r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1ed      	bne.n	80057fa <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 800581e:	2302      	movs	r3, #2
 8005820:	e02d      	b.n	800587e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8005838:	2300      	movs	r3, #0
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	da15      	bge.n	8005870 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	4413      	add	r3, r2
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	4619      	mov	r1, r3
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f85a 	bl	8005908 <_ZN7TwoWire21i2c_master_byte_writeEi>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	bf14      	ite	ne
 800585a:	2301      	movne	r3, #1
 800585c:	2300      	moveq	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8005864:	2303      	movs	r3, #3
 8005866:	e00a      	b.n	800587e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	3301      	adds	r3, #1
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	e7e5      	b.n	800583c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff feed 	bl	8005656 <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8005886:	b480      	push	{r7}
 8005888:	b087      	sub	sp, #28
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e005      	b.n	80058b8 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80058b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058bc:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00c      	beq.n	80058f0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	1e5a      	subs	r2, r3, #1
 80058da:	617a      	str	r2, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0e9      	beq.n	80058be <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 80058ea:	f04f 33ff 	mov.w	r3, #4294967295
 80058ee:	e005      	b.n	80058fc <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	461a      	mov	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	601a      	str	r2, [r3, #0]

    return 0;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8005922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005926:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d008      	beq.n	8005948 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8005940:	2b04      	cmp	r3, #4
 8005942:	d001      	beq.n	8005948 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1e5a      	subs	r2, r3, #1
 8005952:	60fa      	str	r2, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0e2      	beq.n	8005928 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8005962:	2300      	movs	r3, #0
 8005964:	e000      	b.n	8005968 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8005966:	2301      	movs	r3, #1
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	; 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005988:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	dd41      	ble.n	8005a14 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8005990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005994:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a0:	2b80      	cmp	r3, #128	; 0x80
 80059a2:	bf14      	ite	ne
 80059a4:	2301      	movne	r3, #1
 80059a6:	2300      	moveq	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1ed      	bne.n	8005996 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	e068      	b.n	8005a92 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	60ba      	str	r2, [r7, #8]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	611a      	str	r2, [r3, #16]
        length--;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	607b      	str	r3, [r7, #4]
        size++;
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	3301      	adds	r3, #1
 80059d8:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d104      	bne.n	80059f2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0c8      	beq.n	800598a <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	60ba      	str	r2, [r7, #8]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	611a      	str	r2, [r3, #16]
            length--;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	607b      	str	r3, [r7, #4]
            size++;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8005a12:	e7ba      	b.n	800598a <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8005a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a18:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a28:	bf14      	ite	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	2300      	moveq	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ec      	bne.n	8005a1a <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295
 8005a44:	e025      	b.n	8005a92 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a4e:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8005a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a54:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d008      	beq.n	8005a80 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1ed      	bne.n	8005a56 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7e:	e008      	b.n	8005a92 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8005a90:	69bb      	ldr	r3, [r7, #24]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3724      	adds	r7, #36	; 0x24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d106      	bne.n	8005ac0 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005ab2:	2049      	movs	r0, #73	; 0x49
 8005ab4:	f002 f914 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005ab8:	2048      	movs	r0, #72	; 0x48
 8005aba:	f002 f911 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8005abe:	e016      	b.n	8005aee <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d106      	bne.n	8005ad8 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8005aca:	2022      	movs	r0, #34	; 0x22
 8005acc:	f002 f908 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005ad0:	2021      	movs	r0, #33	; 0x21
 8005ad2:	f002 f905 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
}
 8005ad6:	e00a      	b.n	8005aee <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005adc:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d105      	bne.n	8005aee <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005ae2:	2020      	movs	r0, #32
 8005ae4:	f002 f8fc 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005ae8:	201f      	movs	r0, #31
 8005aea:	f002 f8f9 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40005c00 	.word	0x40005c00
 8005afc:	40005800 	.word	0x40005800
 8005b00:	40005400 	.word	0x40005400

08005b04 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b10:	4a12      	ldr	r2, [pc, #72]	; (8005b5c <_ZN7TwoWire16disableInterruptEv+0x58>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d106      	bne.n	8005b24 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8005b16:	2049      	movs	r0, #73	; 0x49
 8005b18:	f002 f8f0 	bl	8007cfc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8005b1c:	2048      	movs	r0, #72	; 0x48
 8005b1e:	f002 f8ed 	bl	8007cfc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8005b22:	e016      	b.n	8005b52 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b28:	4a0d      	ldr	r2, [pc, #52]	; (8005b60 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d106      	bne.n	8005b3c <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8005b2e:	2022      	movs	r0, #34	; 0x22
 8005b30:	f002 f8e4 	bl	8007cfc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8005b34:	2021      	movs	r0, #33	; 0x21
 8005b36:	f002 f8e1 	bl	8007cfc <HAL_NVIC_DisableIRQ>
}
 8005b3a:	e00a      	b.n	8005b52 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d105      	bne.n	8005b52 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005b46:	2020      	movs	r0, #32
 8005b48:	f002 f8d8 	bl	8007cfc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8005b4c:	201f      	movs	r0, #31
 8005b4e:	f002 f8d5 	bl	8007cfc <HAL_NVIC_DisableIRQ>
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40005c00 	.word	0x40005c00
 8005b60:	40005800 	.word	0x40005800
 8005b64:	40005400 	.word	0x40005400

08005b68 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d110      	bne.n	8005b9a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10b      	bne.n	8005b9a <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8005b82:	4908      	ldr	r1, [pc, #32]	; (8005ba4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8005b84:	4808      	ldr	r0, [pc, #32]	; (8005ba8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005b86:	f7ff fb51 	bl	800522c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8005b8a:	4908      	ldr	r1, [pc, #32]	; (8005bac <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005b8c:	4808      	ldr	r0, [pc, #32]	; (8005bb0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005b8e:	f7ff fb4d 	bl	800522c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8005b92:	4908      	ldr	r1, [pc, #32]	; (8005bb4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005b94:	4808      	ldr	r0, [pc, #32]	; (8005bb8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005b96:	f7ff fb49 	bl	800522c <_ZN7TwoWireC1EP11I2C_TypeDef>
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40005400 	.word	0x40005400
 8005ba8:	200002e0 	.word	0x200002e0
 8005bac:	40005800 	.word	0x40005800
 8005bb0:	20000398 	.word	0x20000398
 8005bb4:	40005c00 	.word	0x40005c00
 8005bb8:	20000450 	.word	0x20000450

08005bbc <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	f7ff ffcf 	bl	8005b68 <_Z41__static_initialization_and_destruction_0ii>
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005bcc:	b590      	push	{r4, r7, lr}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	607a      	str	r2, [r7, #4]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	460b      	mov	r3, r1
 8005bda:	72fb      	strb	r3, [r7, #11]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685c      	ldr	r4, [r3, #4]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6898      	ldr	r0, [r3, #8]
 8005be8:	893b      	ldrh	r3, [r7, #8]
 8005bea:	7af9      	ldrb	r1, [r7, #11]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	47a0      	blx	r4
 8005bf0:	6178      	str	r0, [r7, #20]

  return ret;
 8005bf2:	697b      	ldr	r3, [r7, #20]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd90      	pop	{r4, r7, pc}

08005bfc <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	461a      	mov	r2, r3
 8005c08:	460b      	mov	r3, r1
 8005c0a:	72fb      	strb	r3, [r7, #11]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681c      	ldr	r4, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6898      	ldr	r0, [r3, #8]
 8005c18:	893b      	ldrh	r3, [r7, #8]
 8005c1a:	7af9      	ldrb	r1, [r7, #11]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	47a0      	blx	r4
 8005c20:	6178      	str	r0, [r7, #20]

  return ret;
 8005c22:	697b      	ldr	r3, [r7, #20]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd90      	pop	{r4, r7, pc}

08005c2c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005c58 <lps22hh_from_lsb_to_hpa+0x2c>
 8005c42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c46:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	49800000 	.word	0x49800000

08005c5c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c72:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005c8c <lps22hh_from_lsb_to_celsius+0x30>
 8005c76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c7a:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	42c80000 	.word	0x42c80000

08005c90 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005c9c:	f107 0208 	add.w	r2, r7, #8
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	2110      	movs	r1, #16
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff ff91 	bl	8005bcc <lps22hh_read_reg>
 8005caa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10f      	bne.n	8005cd2 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	7a3b      	ldrb	r3, [r7, #8]
 8005cbc:	f362 0341 	bfi	r3, r2, #1, #1
 8005cc0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005cc2:	f107 0208 	add.w	r2, r7, #8
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	2110      	movs	r1, #16
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff ff96 	bl	8005bfc <lps22hh_write_reg>
 8005cd0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005ce8:	f107 0210 	add.w	r2, r7, #16
 8005cec:	2301      	movs	r3, #1
 8005cee:	2110      	movs	r1, #16
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff6b 	bl	8005bcc <lps22hh_read_reg>
 8005cf6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d107      	bne.n	8005d0e <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005cfe:	f107 020c 	add.w	r2, r7, #12
 8005d02:	2301      	movs	r3, #1
 8005d04:	2111      	movs	r1, #17
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff ff60 	bl	8005bcc <lps22hh_read_reg>
 8005d0c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10f      	bne.n	8005d34 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	7c3b      	ldrb	r3, [r7, #16]
 8005d1e:	f362 1306 	bfi	r3, r2, #4, #3
 8005d22:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005d24:	f107 0210 	add.w	r2, r7, #16
 8005d28:	2301      	movs	r3, #1
 8005d2a:	2110      	movs	r1, #16
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ff65 	bl	8005bfc <lps22hh_write_reg>
 8005d32:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d119      	bne.n	8005d6e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	7b3b      	ldrb	r3, [r7, #12]
 8005d46:	f362 0341 	bfi	r3, r2, #1, #1
 8005d4a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	08db      	lsrs	r3, r3, #3
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	7b3b      	ldrb	r3, [r7, #12]
 8005d58:	f362 0300 	bfi	r3, r2, #0, #1
 8005d5c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005d5e:	f107 020c 	add.w	r2, r7, #12
 8005d62:	2301      	movs	r3, #1
 8005d64:	2111      	movs	r1, #17
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff ff48 	bl	8005bfc <lps22hh_write_reg>
 8005d6c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005d6e:	697b      	ldr	r3, [r7, #20]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005d82:	f107 0208 	add.w	r2, r7, #8
 8005d86:	2301      	movs	r3, #1
 8005d88:	2127      	movs	r1, #39	; 0x27
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff ff1e 	bl	8005bcc <lps22hh_read_reg>
 8005d90:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8005d92:	7a3b      	ldrb	r3, [r7, #8]
 8005d94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	701a      	strb	r2, [r3, #0]

  return ret;
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005db4:	f107 0208 	add.w	r2, r7, #8
 8005db8:	2303      	movs	r3, #3
 8005dba:	2128      	movs	r1, #40	; 0x28
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff05 	bl	8005bcc <lps22hh_read_reg>
 8005dc2:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005dc4:	7abb      	ldrb	r3, [r7, #10]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	7a7a      	ldrb	r2, [r7, #9]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	7a3a      	ldrb	r2, [r7, #8]
 8005de2:	441a      	add	r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	021a      	lsls	r2, r3, #8
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	601a      	str	r2, [r3, #0]

  return ret;
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005e06:	f107 0208 	add.w	r2, r7, #8
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	212b      	movs	r1, #43	; 0x2b
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff fedc 	bl	8005bcc <lps22hh_read_reg>
 8005e14:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005e16:	7a7b      	ldrb	r3, [r7, #9]
 8005e18:	b21a      	sxth	r2, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	021b      	lsls	r3, r3, #8
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	7a3b      	ldrb	r3, [r7, #8]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	4413      	add	r3, r2
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	b21a      	sxth	r2, r3
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	801a      	strh	r2, [r3, #0]

  return ret;
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	210f      	movs	r1, #15
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff feba 	bl	8005bcc <lps22hh_read_reg>
 8005e58:	60f8      	str	r0, [r7, #12]

  return ret;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005e70:	f107 0208 	add.w	r2, r7, #8
 8005e74:	2301      	movs	r3, #1
 8005e76:	2111      	movs	r1, #17
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff fea7 	bl	8005bcc <lps22hh_read_reg>
 8005e7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10f      	bne.n	8005ea6 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	7a3b      	ldrb	r3, [r7, #8]
 8005e90:	f362 0382 	bfi	r3, r2, #2, #1
 8005e94:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005e96:	f107 0208 	add.w	r2, r7, #8
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	2111      	movs	r1, #17
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff feac 	bl	8005bfc <lps22hh_write_reg>
 8005ea4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005eba:	f107 0208 	add.w	r2, r7, #8
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	2111      	movs	r1, #17
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff fe82 	bl	8005bcc <lps22hh_read_reg>
 8005ec8:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8005eca:	7a3b      	ldrb	r3, [r7, #8]
 8005ecc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	701a      	strb	r2, [r3, #0]

  return ret;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005ee2:	b590      	push	{r4, r7, lr}
 8005ee4:	b087      	sub	sp, #28
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	461a      	mov	r2, r3
 8005eee:	460b      	mov	r3, r1
 8005ef0:	72fb      	strb	r3, [r7, #11]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685c      	ldr	r4, [r3, #4]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6898      	ldr	r0, [r3, #8]
 8005efe:	893b      	ldrh	r3, [r7, #8]
 8005f00:	7af9      	ldrb	r1, [r7, #11]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	47a0      	blx	r4
 8005f06:	6178      	str	r0, [r7, #20]

  return ret;
 8005f08:	697b      	ldr	r3, [r7, #20]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd90      	pop	{r4, r7, pc}

08005f12 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005f12:	b590      	push	{r4, r7, lr}
 8005f14:	b087      	sub	sp, #28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	460b      	mov	r3, r1
 8005f20:	72fb      	strb	r3, [r7, #11]
 8005f22:	4613      	mov	r3, r2
 8005f24:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681c      	ldr	r4, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6898      	ldr	r0, [r3, #8]
 8005f2e:	893b      	ldrh	r3, [r7, #8]
 8005f30:	7af9      	ldrb	r1, [r7, #11]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	47a0      	blx	r4
 8005f36:	6178      	str	r0, [r7, #20]

  return ret;
 8005f38:	697b      	ldr	r3, [r7, #20]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd90      	pop	{r4, r7, pc}
	...

08005f44 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8005f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f5a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005f70 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8005f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005f62:	eeb0 0a67 	vmov.f32	s0, s15
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	3d79db23 	.word	0x3d79db23

08005f74 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8005f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f8a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005fa0 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8005f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005f92:	eeb0 0a67 	vmov.f32	s0, s15
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	428c0000 	.word	0x428c0000

08005fa4 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8005fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fba:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005fd8 <lsm6dsr_from_lsb_to_celsius+0x34>
 8005fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fc2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8005fca:	eeb0 0a67 	vmov.f32	s0, s15
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	43800000 	.word	0x43800000

08005fdc <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005fe8:	f107 0208 	add.w	r2, r7, #8
 8005fec:	2301      	movs	r3, #1
 8005fee:	2110      	movs	r1, #16
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff ff76 	bl	8005ee2 <lsm6dsr_read_reg>
 8005ff6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10f      	bne.n	800601e <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	b2da      	uxtb	r2, r3
 8006006:	7a3b      	ldrb	r3, [r7, #8]
 8006008:	f362 0383 	bfi	r3, r2, #2, #2
 800600c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800600e:	f107 0208 	add.w	r2, r7, #8
 8006012:	2301      	movs	r3, #1
 8006014:	2110      	movs	r1, #16
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff ff7b 	bl	8005f12 <lsm6dsr_write_reg>
 800601c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006038:	f107 030c 	add.w	r3, r7, #12
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fbb0 	bl	80067a4 <lsm6dsr_fsm_enable_get>
 8006044:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f040 80c4 	bne.w	80061d6 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800604e:	7b3b      	ldrb	r3, [r7, #12]
 8006050:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006054:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006056:	7b3b      	ldrb	r3, [r7, #12]
 8006058:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800605c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800605e:	4313      	orrs	r3, r2
 8006060:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006062:	7b3b      	ldrb	r3, [r7, #12]
 8006064:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006068:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800606a:	4313      	orrs	r3, r2
 800606c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800606e:	7b3b      	ldrb	r3, [r7, #12]
 8006070:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006074:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006076:	4313      	orrs	r3, r2
 8006078:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800607a:	7b3b      	ldrb	r3, [r7, #12]
 800607c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006082:	4313      	orrs	r3, r2
 8006084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006086:	7b3b      	ldrb	r3, [r7, #12]
 8006088:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800608c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800608e:	4313      	orrs	r3, r2
 8006090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006092:	7b3b      	ldrb	r3, [r7, #12]
 8006094:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006098:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800609a:	4313      	orrs	r3, r2
 800609c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800609e:	7b3b      	ldrb	r3, [r7, #12]
 80060a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80060a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80060a6:	4313      	orrs	r3, r2
 80060a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80060aa:	7b7b      	ldrb	r3, [r7, #13]
 80060ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80060b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80060b2:	4313      	orrs	r3, r2
 80060b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80060b6:	7b7b      	ldrb	r3, [r7, #13]
 80060b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80060bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80060be:	4313      	orrs	r3, r2
 80060c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80060c2:	7b7b      	ldrb	r3, [r7, #13]
 80060c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80060c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80060ca:	4313      	orrs	r3, r2
 80060cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80060ce:	7b7b      	ldrb	r3, [r7, #13]
 80060d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80060d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80060d6:	4313      	orrs	r3, r2
 80060d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80060da:	7b7b      	ldrb	r3, [r7, #13]
 80060dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80060e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80060e2:	4313      	orrs	r3, r2
 80060e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80060e6:	7b7b      	ldrb	r3, [r7, #13]
 80060e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80060f2:	7b7b      	ldrb	r3, [r7, #13]
 80060f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80060f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80060fe:	7b7b      	ldrb	r3, [r7, #13]
 8006100:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006106:	4313      	orrs	r3, r2
 8006108:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800610a:	2b01      	cmp	r3, #1
 800610c:	d163      	bne.n	80061d6 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800610e:	f107 030b 	add.w	r3, r7, #11
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fb71 	bl	80067fc <lsm6dsr_fsm_data_rate_get>
 800611a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d159      	bne.n	80061d6 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006122:	7afb      	ldrb	r3, [r7, #11]
 8006124:	2b03      	cmp	r3, #3
 8006126:	d853      	bhi.n	80061d0 <lsm6dsr_xl_data_rate_set+0x1a8>
 8006128:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <lsm6dsr_xl_data_rate_set+0x108>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006141 	.word	0x08006141
 8006134:	08006153 	.word	0x08006153
 8006138:	08006171 	.word	0x08006171
 800613c:	0800619b 	.word	0x0800619b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800614a:	e045      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	75fb      	strb	r3, [r7, #23]
            break;
 8006150:	e042      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006158:	2302      	movs	r3, #2
 800615a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800615c:	e03c      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d102      	bne.n	800616a <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006164:	2302      	movs	r3, #2
 8006166:	75fb      	strb	r3, [r7, #23]
            break;
 8006168:	e036      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	75fb      	strb	r3, [r7, #23]
            break;
 800616e:	e033      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d102      	bne.n	800617c <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006176:	2303      	movs	r3, #3
 8006178:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800617a:	e02d      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d102      	bne.n	8006188 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006182:	2303      	movs	r3, #3
 8006184:	75fb      	strb	r3, [r7, #23]
            break;
 8006186:	e027      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d102      	bne.n	8006194 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800618e:	2303      	movs	r3, #3
 8006190:	75fb      	strb	r3, [r7, #23]
            break;
 8006192:	e021      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	75fb      	strb	r3, [r7, #23]
            break;
 8006198:	e01e      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80061a0:	2304      	movs	r3, #4
 80061a2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80061a4:	e018      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d102      	bne.n	80061b2 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80061ac:	2304      	movs	r3, #4
 80061ae:	75fb      	strb	r3, [r7, #23]
            break;
 80061b0:	e012      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d102      	bne.n	80061be <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80061b8:	2304      	movs	r3, #4
 80061ba:	75fb      	strb	r3, [r7, #23]
            break;
 80061bc:	e00c      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d102      	bne.n	80061ca <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80061c4:	2304      	movs	r3, #4
 80061c6:	75fb      	strb	r3, [r7, #23]
            break;
 80061c8:	e006      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	75fb      	strb	r3, [r7, #23]
            break;
 80061ce:	e003      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	75fb      	strb	r3, [r7, #23]
            break;
 80061d4:	e000      	b.n	80061d8 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80061d6:	bf00      	nop
    }
  }

  if (ret == 0)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d107      	bne.n	80061ee <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80061de:	f107 0208 	add.w	r2, r7, #8
 80061e2:	2301      	movs	r3, #1
 80061e4:	2110      	movs	r1, #16
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fe7b 	bl	8005ee2 <lsm6dsr_read_reg>
 80061ec:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10f      	bne.n	8006214 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	7a3b      	ldrb	r3, [r7, #8]
 80061fe:	f362 1307 	bfi	r3, r2, #4, #4
 8006202:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006204:	f107 0208 	add.w	r2, r7, #8
 8006208:	2301      	movs	r3, #1
 800620a:	2110      	movs	r1, #16
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fe80 	bl	8005f12 <lsm6dsr_write_reg>
 8006212:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006214:	693b      	ldr	r3, [r7, #16]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop

08006220 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800622c:	f107 0208 	add.w	r2, r7, #8
 8006230:	2301      	movs	r3, #1
 8006232:	2111      	movs	r1, #17
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff fe54 	bl	8005ee2 <lsm6dsr_read_reg>
 800623a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10f      	bne.n	8006262 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	b2da      	uxtb	r2, r3
 800624a:	7a3b      	ldrb	r3, [r7, #8]
 800624c:	f362 0303 	bfi	r3, r2, #0, #4
 8006250:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006252:	f107 0208 	add.w	r2, r7, #8
 8006256:	2301      	movs	r3, #1
 8006258:	2111      	movs	r1, #17
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fe59 	bl	8005f12 <lsm6dsr_write_reg>
 8006260:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006262:	68fb      	ldr	r3, [r7, #12]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800627c:	f107 030c 	add.w	r3, r7, #12
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa8e 	bl	80067a4 <lsm6dsr_fsm_enable_get>
 8006288:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f040 80c4 	bne.w	800641a <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006292:	7b3b      	ldrb	r3, [r7, #12]
 8006294:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006298:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800629a:	7b3b      	ldrb	r3, [r7, #12]
 800629c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80062a0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80062a2:	4313      	orrs	r3, r2
 80062a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80062a6:	7b3b      	ldrb	r3, [r7, #12]
 80062a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80062ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80062ae:	4313      	orrs	r3, r2
 80062b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80062b2:	7b3b      	ldrb	r3, [r7, #12]
 80062b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80062b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80062ba:	4313      	orrs	r3, r2
 80062bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80062be:	7b3b      	ldrb	r3, [r7, #12]
 80062c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80062c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80062c6:	4313      	orrs	r3, r2
 80062c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80062ca:	7b3b      	ldrb	r3, [r7, #12]
 80062cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80062d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80062d2:	4313      	orrs	r3, r2
 80062d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80062d6:	7b3b      	ldrb	r3, [r7, #12]
 80062d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80062dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80062de:	4313      	orrs	r3, r2
 80062e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80062e2:	7b3b      	ldrb	r3, [r7, #12]
 80062e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80062e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80062ea:	4313      	orrs	r3, r2
 80062ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80062ee:	7b7b      	ldrb	r3, [r7, #13]
 80062f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80062f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80062f6:	4313      	orrs	r3, r2
 80062f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80062fa:	7b7b      	ldrb	r3, [r7, #13]
 80062fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006300:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006302:	4313      	orrs	r3, r2
 8006304:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006306:	7b7b      	ldrb	r3, [r7, #13]
 8006308:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800630c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800630e:	4313      	orrs	r3, r2
 8006310:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006312:	7b7b      	ldrb	r3, [r7, #13]
 8006314:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006318:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800631a:	4313      	orrs	r3, r2
 800631c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800631e:	7b7b      	ldrb	r3, [r7, #13]
 8006320:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006324:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006326:	4313      	orrs	r3, r2
 8006328:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800632a:	7b7b      	ldrb	r3, [r7, #13]
 800632c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006330:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006332:	4313      	orrs	r3, r2
 8006334:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006336:	7b7b      	ldrb	r3, [r7, #13]
 8006338:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800633c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800633e:	4313      	orrs	r3, r2
 8006340:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006342:	7b7b      	ldrb	r3, [r7, #13]
 8006344:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006348:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800634a:	4313      	orrs	r3, r2
 800634c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800634e:	2b01      	cmp	r3, #1
 8006350:	d163      	bne.n	800641a <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006352:	f107 030b 	add.w	r3, r7, #11
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fa4f 	bl	80067fc <lsm6dsr_fsm_data_rate_get>
 800635e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d159      	bne.n	800641a <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006366:	7afb      	ldrb	r3, [r7, #11]
 8006368:	2b03      	cmp	r3, #3
 800636a:	d853      	bhi.n	8006414 <lsm6dsr_gy_data_rate_set+0x1a8>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <lsm6dsr_gy_data_rate_set+0x108>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006385 	.word	0x08006385
 8006378:	08006397 	.word	0x08006397
 800637c:	080063b5 	.word	0x080063b5
 8006380:	080063df 	.word	0x080063df
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800638a:	2301      	movs	r3, #1
 800638c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800638e:	e045      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	75fb      	strb	r3, [r7, #23]
            break;
 8006394:	e042      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d102      	bne.n	80063a2 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800639c:	2302      	movs	r3, #2
 800639e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80063a0:	e03c      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d102      	bne.n	80063ae <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80063a8:	2302      	movs	r3, #2
 80063aa:	75fb      	strb	r3, [r7, #23]
            break;
 80063ac:	e036      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	75fb      	strb	r3, [r7, #23]
            break;
 80063b2:	e033      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80063ba:	2303      	movs	r3, #3
 80063bc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80063be:	e02d      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d102      	bne.n	80063cc <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80063c6:	2303      	movs	r3, #3
 80063c8:	75fb      	strb	r3, [r7, #23]
            break;
 80063ca:	e027      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d102      	bne.n	80063d8 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80063d2:	2303      	movs	r3, #3
 80063d4:	75fb      	strb	r3, [r7, #23]
            break;
 80063d6:	e021      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	75fb      	strb	r3, [r7, #23]
            break;
 80063dc:	e01e      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80063e4:	2304      	movs	r3, #4
 80063e6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80063e8:	e018      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d102      	bne.n	80063f6 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80063f0:	2304      	movs	r3, #4
 80063f2:	75fb      	strb	r3, [r7, #23]
            break;
 80063f4:	e012      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d102      	bne.n	8006402 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80063fc:	2304      	movs	r3, #4
 80063fe:	75fb      	strb	r3, [r7, #23]
            break;
 8006400:	e00c      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	2b03      	cmp	r3, #3
 8006406:	d102      	bne.n	800640e <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006408:	2304      	movs	r3, #4
 800640a:	75fb      	strb	r3, [r7, #23]
            break;
 800640c:	e006      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	75fb      	strb	r3, [r7, #23]
            break;
 8006412:	e003      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	75fb      	strb	r3, [r7, #23]
            break;
 8006418:	e000      	b.n	800641c <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800641a:	bf00      	nop
    }
  }

  if (ret == 0)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d107      	bne.n	8006432 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006422:	f107 0208 	add.w	r2, r7, #8
 8006426:	2301      	movs	r3, #1
 8006428:	2111      	movs	r1, #17
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff fd59 	bl	8005ee2 <lsm6dsr_read_reg>
 8006430:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10f      	bne.n	8006458 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	b2da      	uxtb	r2, r3
 8006440:	7a3b      	ldrb	r3, [r7, #8]
 8006442:	f362 1307 	bfi	r3, r2, #4, #4
 8006446:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006448:	f107 0208 	add.w	r2, r7, #8
 800644c:	2301      	movs	r3, #1
 800644e:	2111      	movs	r1, #17
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff fd5e 	bl	8005f12 <lsm6dsr_write_reg>
 8006456:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006458:	693b      	ldr	r3, [r7, #16]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop

08006464 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006470:	f107 0208 	add.w	r2, r7, #8
 8006474:	2301      	movs	r3, #1
 8006476:	2112      	movs	r1, #18
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fd32 	bl	8005ee2 <lsm6dsr_read_reg>
 800647e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10f      	bne.n	80064a6 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	b2da      	uxtb	r2, r3
 800648e:	7a3b      	ldrb	r3, [r7, #8]
 8006490:	f362 1386 	bfi	r3, r2, #6, #1
 8006494:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006496:	f107 0208 	add.w	r2, r7, #8
 800649a:	2301      	movs	r3, #1
 800649c:	2112      	movs	r1, #18
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fd37 	bl	8005f12 <lsm6dsr_write_reg>
 80064a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064a6:	68fb      	ldr	r3, [r7, #12]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80064ba:	f107 0208 	add.w	r2, r7, #8
 80064be:	2301      	movs	r3, #1
 80064c0:	211e      	movs	r1, #30
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fd0d 	bl	8005ee2 <lsm6dsr_read_reg>
 80064c8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80064ca:	7a3b      	ldrb	r3, [r7, #8]
 80064cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	701a      	strb	r2, [r3, #0]

  return ret;
 80064d8:	68fb      	ldr	r3, [r7, #12]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80064ec:	f107 0208 	add.w	r2, r7, #8
 80064f0:	2301      	movs	r3, #1
 80064f2:	211e      	movs	r1, #30
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fcf4 	bl	8005ee2 <lsm6dsr_read_reg>
 80064fa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80064fc:	7a3b      	ldrb	r3, [r7, #8]
 80064fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006502:	b2db      	uxtb	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	701a      	strb	r2, [r3, #0]

  return ret;
 800650a:	68fb      	ldr	r3, [r7, #12]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800651e:	f107 0208 	add.w	r2, r7, #8
 8006522:	2301      	movs	r3, #1
 8006524:	211e      	movs	r1, #30
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff fcdb 	bl	8005ee2 <lsm6dsr_read_reg>
 800652c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 800652e:	7a3b      	ldrb	r3, [r7, #8]
 8006530:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	701a      	strb	r2, [r3, #0]

  return ret;
 800653c:	68fb      	ldr	r3, [r7, #12]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8006550:	f107 0208 	add.w	r2, r7, #8
 8006554:	2302      	movs	r3, #2
 8006556:	2120      	movs	r1, #32
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fcc2 	bl	8005ee2 <lsm6dsr_read_reg>
 800655e:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8006560:	7a7b      	ldrb	r3, [r7, #9]
 8006562:	b21a      	sxth	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800656e:	b29b      	uxth	r3, r3
 8006570:	021b      	lsls	r3, r3, #8
 8006572:	b29a      	uxth	r2, r3
 8006574:	7a3b      	ldrb	r3, [r7, #8]
 8006576:	b29b      	uxth	r3, r3
 8006578:	4413      	add	r3, r2
 800657a:	b29b      	uxth	r3, r3
 800657c:	b21a      	sxth	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	801a      	strh	r2, [r3, #0]

  return ret;
 8006582:	68fb      	ldr	r3, [r7, #12]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8006596:	f107 020c 	add.w	r2, r7, #12
 800659a:	2306      	movs	r3, #6
 800659c:	2122      	movs	r1, #34	; 0x22
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff fc9f 	bl	8005ee2 <lsm6dsr_read_reg>
 80065a4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80065a6:	7b7b      	ldrb	r3, [r7, #13]
 80065a8:	b21a      	sxth	r2, r3
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	7b3b      	ldrb	r3, [r7, #12]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	4413      	add	r3, r2
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	b21a      	sxth	r2, r3
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80065c8:	7bfa      	ldrb	r2, [r7, #15]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	3302      	adds	r3, #2
 80065ce:	b212      	sxth	r2, r2
 80065d0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	3302      	adds	r3, #2
 80065d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	b29a      	uxth	r2, r3
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	3302      	adds	r3, #2
 80065ec:	b212      	sxth	r2, r2
 80065ee:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80065f0:	7c7a      	ldrb	r2, [r7, #17]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	3304      	adds	r3, #4
 80065f6:	b212      	sxth	r2, r2
 80065f8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	3304      	adds	r3, #4
 80065fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006602:	b29b      	uxth	r3, r3
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	b29a      	uxth	r2, r3
 8006608:	7c3b      	ldrb	r3, [r7, #16]
 800660a:	b29b      	uxth	r3, r3
 800660c:	4413      	add	r3, r2
 800660e:	b29a      	uxth	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	3304      	adds	r3, #4
 8006614:	b212      	sxth	r2, r2
 8006616:	801a      	strh	r2, [r3, #0]

  return ret;
 8006618:	697b      	ldr	r3, [r7, #20]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b086      	sub	sp, #24
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 800662c:	f107 020c 	add.w	r2, r7, #12
 8006630:	2306      	movs	r3, #6
 8006632:	2128      	movs	r1, #40	; 0x28
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff fc54 	bl	8005ee2 <lsm6dsr_read_reg>
 800663a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800663c:	7b7b      	ldrb	r3, [r7, #13]
 800663e:	b21a      	sxth	r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800664a:	b29b      	uxth	r3, r3
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	b29a      	uxth	r2, r3
 8006650:	7b3b      	ldrb	r3, [r7, #12]
 8006652:	b29b      	uxth	r3, r3
 8006654:	4413      	add	r3, r2
 8006656:	b29b      	uxth	r3, r3
 8006658:	b21a      	sxth	r2, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800665e:	7bfa      	ldrb	r2, [r7, #15]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	3302      	adds	r3, #2
 8006664:	b212      	sxth	r2, r2
 8006666:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	3302      	adds	r3, #2
 800666c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006670:	b29b      	uxth	r3, r3
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	b29a      	uxth	r2, r3
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	b29b      	uxth	r3, r3
 800667a:	4413      	add	r3, r2
 800667c:	b29a      	uxth	r2, r3
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	3302      	adds	r3, #2
 8006682:	b212      	sxth	r2, r2
 8006684:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006686:	7c7a      	ldrb	r2, [r7, #17]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	3304      	adds	r3, #4
 800668c:	b212      	sxth	r2, r2
 800668e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	3304      	adds	r3, #4
 8006694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006698:	b29b      	uxth	r3, r3
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	b29a      	uxth	r2, r3
 800669e:	7c3b      	ldrb	r3, [r7, #16]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	4413      	add	r3, r2
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	3304      	adds	r3, #4
 80066aa:	b212      	sxth	r2, r2
 80066ac:	801a      	strh	r2, [r3, #0]

  return ret;
 80066ae:	697b      	ldr	r3, [r7, #20]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80066c4:	f107 0208 	add.w	r2, r7, #8
 80066c8:	2301      	movs	r3, #1
 80066ca:	2101      	movs	r1, #1
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff fc08 	bl	8005ee2 <lsm6dsr_read_reg>
 80066d2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10f      	bne.n	80066fa <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	f003 0303 	and.w	r3, r3, #3
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	7a3b      	ldrb	r3, [r7, #8]
 80066e4:	f362 1387 	bfi	r3, r2, #6, #2
 80066e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80066ea:	f107 0208 	add.w	r2, r7, #8
 80066ee:	2301      	movs	r3, #1
 80066f0:	2101      	movs	r1, #1
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff fc0d 	bl	8005f12 <lsm6dsr_write_reg>
 80066f8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80066fa:	68fb      	ldr	r3, [r7, #12]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800670e:	2301      	movs	r3, #1
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	210f      	movs	r1, #15
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fbe4 	bl	8005ee2 <lsm6dsr_read_reg>
 800671a:	60f8      	str	r0, [r7, #12]

  return ret;
 800671c:	68fb      	ldr	r3, [r7, #12]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006732:	f107 0208 	add.w	r2, r7, #8
 8006736:	2301      	movs	r3, #1
 8006738:	2112      	movs	r1, #18
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fbd1 	bl	8005ee2 <lsm6dsr_read_reg>
 8006740:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10f      	bne.n	8006768 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	7a3b      	ldrb	r3, [r7, #8]
 8006752:	f362 0300 	bfi	r3, r2, #0, #1
 8006756:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006758:	f107 0208 	add.w	r2, r7, #8
 800675c:	2301      	movs	r3, #1
 800675e:	2112      	movs	r1, #18
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff fbd6 	bl	8005f12 <lsm6dsr_write_reg>
 8006766:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006768:	68fb      	ldr	r3, [r7, #12]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800677c:	f107 0208 	add.w	r2, r7, #8
 8006780:	2301      	movs	r3, #1
 8006782:	2112      	movs	r1, #18
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff fbac 	bl	8005ee2 <lsm6dsr_read_reg>
 800678a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800678c:	7a3b      	ldrb	r3, [r7, #8]
 800678e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006792:	b2db      	uxtb	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	701a      	strb	r2, [r3, #0]

  return ret;
 800679a:	68fb      	ldr	r3, [r7, #12]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80067ae:	2102      	movs	r1, #2
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff81 	bl	80066b8 <lsm6dsr_mem_bank_set>
 80067b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80067be:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80067c0:	2301      	movs	r3, #1
 80067c2:	2146      	movs	r1, #70	; 0x46
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff fb8c 	bl	8005ee2 <lsm6dsr_read_reg>
 80067ca:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d107      	bne.n	80067e2 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80067d6:	2301      	movs	r3, #1
 80067d8:	2147      	movs	r1, #71	; 0x47
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff fb81 	bl	8005ee2 <lsm6dsr_read_reg>
 80067e0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80067e8:	2100      	movs	r1, #0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff ff64 	bl	80066b8 <lsm6dsr_mem_bank_set>
 80067f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80067f2:	68fb      	ldr	r3, [r7, #12]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8006806:	2102      	movs	r1, #2
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff ff55 	bl	80066b8 <lsm6dsr_mem_bank_set>
 800680e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d107      	bne.n	8006826 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8006816:	f107 0208 	add.w	r2, r7, #8
 800681a:	2301      	movs	r3, #1
 800681c:	215f      	movs	r1, #95	; 0x5f
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff fb5f 	bl	8005ee2 <lsm6dsr_read_reg>
 8006824:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800682c:	2100      	movs	r1, #0
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff ff42 	bl	80066b8 <lsm6dsr_mem_bank_set>
 8006834:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8006836:	7a3b      	ldrb	r3, [r7, #8]
 8006838:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b03      	cmp	r3, #3
 8006840:	d81a      	bhi.n	8006878 <lsm6dsr_fsm_data_rate_get+0x7c>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	08006859 	.word	0x08006859
 800684c:	08006861 	.word	0x08006861
 8006850:	08006869 	.word	0x08006869
 8006854:	08006871 	.word	0x08006871
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
      break;
 800685e:	e00f      	b.n	8006880 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2201      	movs	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
      break;
 8006866:	e00b      	b.n	8006880 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2202      	movs	r2, #2
 800686c:	701a      	strb	r2, [r3, #0]
      break;
 800686e:	e007      	b.n	8006880 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2203      	movs	r2, #3
 8006874:	701a      	strb	r2, [r3, #0]
      break;
 8006876:	e003      	b.n	8006880 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
      break;
 800687e:	bf00      	nop
  }

  return ret;
 8006880:	68fb      	ldr	r3, [r7, #12]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <HAL_RTC_AlarmAEventCallback>:
								0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
								0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
								0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8006894:	f04f 33ff 	mov.w	r3, #4294967295
 8006898:	2208      	movs	r2, #8
 800689a:	4905      	ldr	r1, [pc, #20]	; (80068b0 <HAL_RTC_AlarmAEventCallback+0x24>)
 800689c:	4805      	ldr	r0, [pc, #20]	; (80068b4 <HAL_RTC_AlarmAEventCallback+0x28>)
 800689e:	f006 f856 	bl	800c94e <HAL_UART_Transmit>
	flagA = 1;
 80068a2:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	0801bff4 	.word	0x0801bff4
 80068b4:	20006044 	.word	0x20006044
 80068b8:	20000548 	.word	0x20000548

080068bc <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(RTC_HandleTypeDef* hrtc, UART_HandleTypeDef uart,uint8_t sleepT){
 80068bc:	b084      	sub	sp, #16
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	f107 0014 	add.w	r0, r7, #20
 80068ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	rtc = hrtc;
 80068ce:	4a0f      	ldr	r2, [pc, #60]	; (800690c <MRT_SetupRTOS+0x50>)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6013      	str	r3, [r2, #0]
	rtos.huart = uart;
 80068d4:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <MRT_SetupRTOS+0x54>)
 80068d6:	4618      	mov	r0, r3
 80068d8:	f107 0314 	add.w	r3, r7, #20
 80068dc:	2244      	movs	r2, #68	; 0x44
 80068de:	4619      	mov	r1, r3
 80068e0:	f00e fda4 	bl	801542c <memcpy>
	rtos.sleepTime = sleepT;
 80068e4:	4a0a      	ldr	r2, [pc, #40]	; (8006910 <MRT_SetupRTOS+0x54>)
 80068e6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80068ea:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
 80068f2:	2211      	movs	r2, #17
 80068f4:	4907      	ldr	r1, [pc, #28]	; (8006914 <MRT_SetupRTOS+0x58>)
 80068f6:	4806      	ldr	r0, [pc, #24]	; (8006910 <MRT_SetupRTOS+0x54>)
 80068f8:	f006 f829 	bl	800c94e <HAL_UART_Transmit>
}
 80068fc:	bf00      	nop
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006906:	b004      	add	sp, #16
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	2000608c 	.word	0x2000608c
 8006910:	20006044 	.word	0x20006044
 8006914:	0801c00c 	.word	0x0801c00c

08006918 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800691e:	4b15      	ldr	r3, [pc, #84]	; (8006974 <MRT_WUProcedure+0x5c>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b02      	cmp	r3, #2
 8006928:	d11e      	bne.n	8006968 <MRT_WUProcedure+0x50>
	{

		wu_flag = 1;
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <MRT_WUProcedure+0x60>)
 800692c:	2201      	movs	r2, #1
 800692e:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8006930:	4b10      	ldr	r3, [pc, #64]	; (8006974 <MRT_WUProcedure+0x5c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a0f      	ldr	r2, [pc, #60]	; (8006974 <MRT_WUProcedure+0x5c>)
 8006936:	f043 0308 	orr.w	r3, r3, #8
 800693a:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 800693c:	4b0f      	ldr	r3, [pc, #60]	; (800697c <MRT_WUProcedure+0x64>)
 800693e:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7f9 fc55 	bl	80001f0 <strlen>
 8006946:	4603      	mov	r3, r0
 8006948:	b29a      	uxth	r2, r3
 800694a:	f04f 33ff 	mov.w	r3, #4294967295
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	480b      	ldr	r0, [pc, #44]	; (8006980 <MRT_WUProcedure+0x68>)
 8006952:	f005 fffc 	bl	800c94e <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8006956:	f44f 7080 	mov.w	r0, #256	; 0x100
 800695a:	f002 fca7 	bl	80092ac <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(rtc);
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <MRT_WUProcedure+0x6c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4618      	mov	r0, r3
 8006964:	f004 f8f0 	bl	800ab48 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8006968:	f000 f80e 	bl	8006988 <MRT_ClearFlags>
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40007000 	.word	0x40007000
 8006978:	20000549 	.word	0x20000549
 800697c:	0801c020 	.word	0x0801c020
 8006980:	20006044 	.word	0x20006044
 8006984:	2000608c 	.word	0x2000608c

08006988 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 800698c:	f04f 33ff 	mov.w	r3, #4294967295
 8006990:	2214      	movs	r2, #20
 8006992:	4939      	ldr	r1, [pc, #228]	; (8006a78 <MRT_ClearFlags+0xf0>)
 8006994:	4839      	ldr	r0, [pc, #228]	; (8006a7c <MRT_ClearFlags+0xf4>)
 8006996:	f005 ffda 	bl	800c94e <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 800699a:	4b39      	ldr	r3, [pc, #228]	; (8006a80 <MRT_ClearFlags+0xf8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	22ca      	movs	r2, #202	; 0xca
 80069a2:	625a      	str	r2, [r3, #36]	; 0x24
 80069a4:	4b36      	ldr	r3, [pc, #216]	; (8006a80 <MRT_ClearFlags+0xf8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2253      	movs	r2, #83	; 0x53
 80069ac:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 80069ae:	e011      	b.n	80069d4 <MRT_ClearFlags+0x4c>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80069b0:	f04f 33ff 	mov.w	r3, #4294967295
 80069b4:	2217      	movs	r2, #23
 80069b6:	4933      	ldr	r1, [pc, #204]	; (8006a84 <MRT_ClearFlags+0xfc>)
 80069b8:	4830      	ldr	r0, [pc, #192]	; (8006a7c <MRT_ClearFlags+0xf4>)
 80069ba:	f005 ffc8 	bl	800c94e <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRAF);
 80069be:	4b30      	ldr	r3, [pc, #192]	; (8006a80 <MRT_ClearFlags+0xf8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	4b2d      	ldr	r3, [pc, #180]	; (8006a80 <MRT_ClearFlags+0xf8>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80069d2:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 80069d4:	4b2a      	ldr	r3, [pc, #168]	; (8006a80 <MRT_ClearFlags+0xf8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e5      	bne.n	80069b0 <MRT_ClearFlags+0x28>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 80069e4:	4b26      	ldr	r3, [pc, #152]	; (8006a80 <MRT_ClearFlags+0xf8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	22ff      	movs	r2, #255	; 0xff
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80069ee:	4b26      	ldr	r3, [pc, #152]	; (8006a88 <MRT_ClearFlags+0x100>)
 80069f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069f4:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 80069f6:	4b22      	ldr	r3, [pc, #136]	; (8006a80 <MRT_ClearFlags+0xf8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	22ca      	movs	r2, #202	; 0xca
 80069fe:	625a      	str	r2, [r3, #36]	; 0x24
 8006a00:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <MRT_ClearFlags+0xf8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2253      	movs	r2, #83	; 0x53
 8006a08:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8006a0a:	e011      	b.n	8006a30 <MRT_ClearFlags+0xa8>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a10:	2217      	movs	r2, #23
 8006a12:	491e      	ldr	r1, [pc, #120]	; (8006a8c <MRT_ClearFlags+0x104>)
 8006a14:	4819      	ldr	r0, [pc, #100]	; (8006a7c <MRT_ClearFlags+0xf4>)
 8006a16:	f005 ff9a 	bl	800c94e <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRBF);
 8006a1a:	4b19      	ldr	r3, [pc, #100]	; (8006a80 <MRT_ClearFlags+0xf8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	4b16      	ldr	r3, [pc, #88]	; (8006a80 <MRT_ClearFlags+0xf8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006a2e:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8006a30:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <MRT_ClearFlags+0xf8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e5      	bne.n	8006a0c <MRT_ClearFlags+0x84>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8006a40:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <MRT_ClearFlags+0xf8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	22ff      	movs	r2, #255	; 0xff
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006a4a:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <MRT_ClearFlags+0x100>)
 8006a4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a50:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8006a52:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <MRT_ClearFlags+0x108>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a0e      	ldr	r2, [pc, #56]	; (8006a90 <MRT_ClearFlags+0x108>)
 8006a58:	f043 0304 	orr.w	r3, r3, #4
 8006a5c:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtc, RTC_FLAG_WUTF);
 8006a5e:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <MRT_ClearFlags+0xf8>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <MRT_ClearFlags+0xf8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006a72:	60da      	str	r2, [r3, #12]
}
 8006a74:	bf00      	nop
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	0801c040 	.word	0x0801c040
 8006a7c:	20006044 	.word	0x20006044
 8006a80:	2000608c 	.word	0x2000608c
 8006a84:	0801c058 	.word	0x0801c058
 8006a88:	40013c00 	.word	0x40013c00
 8006a8c:	0801c070 	.word	0x0801c070
 8006a90:	40007000 	.word	0x40007000

08006a94 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b0a4      	sub	sp, #144	; 0x90
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8006a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa0:	220f      	movs	r2, #15
 8006aa2:	491c      	ldr	r1, [pc, #112]	; (8006b14 <MRT_StandByMode+0x80>)
 8006aa4:	481c      	ldr	r0, [pc, #112]	; (8006b18 <MRT_StandByMode+0x84>)
 8006aa6:	f005 ff52 	bl	800c94e <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8006aaa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006aae:	f002 fbeb 	bl	8009288 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8006ab2:	f7ff ff69 	bl	8006988 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8006ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aba:	2211      	movs	r2, #17
 8006abc:	4917      	ldr	r1, [pc, #92]	; (8006b1c <MRT_StandByMode+0x88>)
 8006abe:	4816      	ldr	r0, [pc, #88]	; (8006b18 <MRT_StandByMode+0x84>)
 8006ac0:	f005 ff45 	bl	800c94e <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8006ac4:	f107 0308 	add.w	r3, r7, #8
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	4915      	ldr	r1, [pc, #84]	; (8006b20 <MRT_StandByMode+0x8c>)
 8006acc:	4618      	mov	r0, r3
 8006ace:	f00f fd53 	bl	8016578 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8006ad2:	f107 0308 	add.w	r3, r7, #8
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7f9 fb8a 	bl	80001f0 <strlen>
 8006adc:	4603      	mov	r3, r0
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f107 0108 	add.w	r1, r7, #8
 8006ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae8:	480b      	ldr	r0, [pc, #44]	; (8006b18 <MRT_StandByMode+0x84>)
 8006aea:	f005 ff30 	bl	800c94e <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(rtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8006aee:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <MRT_StandByMode+0x90>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2204      	movs	r2, #4
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f003 ff66 	bl	800a9c8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <MRT_StandByMode+0x72>
	{
	  Error_Handler();
 8006b02:	f7fb ff9b 	bl	8002a3c <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8006b06:	f002 fbe5 	bl	80092d4 <HAL_PWR_EnterSTANDBYMode>
}
 8006b0a:	bf00      	nop
 8006b0c:	3790      	adds	r7, #144	; 0x90
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	0801c088 	.word	0x0801c088
 8006b18:	20006044 	.word	0x20006044
 8006b1c:	0801c098 	.word	0x0801c098
 8006b20:	0801c0ac 	.word	0x0801c0ac
 8006b24:	2000608c 	.word	0x2000608c

08006b28 <MRT_setAlarmA>:


void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	71fb      	strb	r3, [r7, #7]
 8006b32:	460b      	mov	r3, r1
 8006b34:	71bb      	strb	r3, [r7, #6]
 8006b36:	4613      	mov	r3, r2
 8006b38:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	4a1b      	ldr	r2, [pc, #108]	; (8006bac <MRT_setAlarmA+0x84>)
 8006b3e:	5cd2      	ldrb	r2, [r2, r3]
 8006b40:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b42:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8006b44:	79bb      	ldrb	r3, [r7, #6]
 8006b46:	4a19      	ldr	r2, [pc, #100]	; (8006bac <MRT_setAlarmA+0x84>)
 8006b48:	5cd2      	ldrb	r2, [r2, r3]
 8006b4a:	4b19      	ldr	r3, [pc, #100]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b4c:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8006b4e:	797b      	ldrb	r3, [r7, #5]
 8006b50:	4a16      	ldr	r2, [pc, #88]	; (8006bac <MRT_setAlarmA+0x84>)
 8006b52:	5cd2      	ldrb	r2, [r2, r3]
 8006b54:	4b16      	ldr	r3, [pc, #88]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b56:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8006b58:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006b5e:	4b14      	ldr	r3, [pc, #80]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006b64:	4b12      	ldr	r3, [pc, #72]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8006b6a:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8006b70:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006b76:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(rtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8006b8c:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <MRT_setAlarmA+0x8c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2201      	movs	r2, #1
 8006b92:	4907      	ldr	r1, [pc, #28]	; (8006bb0 <MRT_setAlarmA+0x88>)
 8006b94:	4618      	mov	r0, r3
 8006b96:	f003 fd09 	bl	800a5ac <HAL_RTC_SetAlarm_IT>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <MRT_setAlarmA+0x7c>
	  {
	    Error_Handler();
 8006ba0:	f7fb ff4c 	bl	8002a3c <Error_Handler>
	  }
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20000028 	.word	0x20000028
 8006bb0:	20000520 	.word	0x20000520
 8006bb4:	2000608c 	.word	0x2000608c

08006bb8 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	71fb      	strb	r3, [r7, #7]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	71bb      	strb	r3, [r7, #6]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <MRT_setRTC+0x84>)
 8006bce:	5cd3      	ldrb	r3, [r2, r3]
 8006bd0:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8006bd2:	79bb      	ldrb	r3, [r7, #6]
 8006bd4:	4a19      	ldr	r2, [pc, #100]	; (8006c3c <MRT_setRTC+0x84>)
 8006bd6:	5cd3      	ldrb	r3, [r2, r3]
 8006bd8:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8006bda:	797b      	ldrb	r3, [r7, #5]
 8006bdc:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <MRT_setRTC+0x84>)
 8006bde:	5cd3      	ldrb	r3, [r2, r3]
 8006be0:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006be2:	2300      	movs	r3, #0
 8006be4:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006bea:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <MRT_setRTC+0x88>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f107 010c 	add.w	r1, r7, #12
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f003 fac8 	bl	800a18a <HAL_RTC_SetTime>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <MRT_setRTC+0x4c>
	  {
	    Error_Handler();
 8006c00:	f7fb ff1c 	bl	8002a3c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006c04:	4b0f      	ldr	r3, [pc, #60]	; (8006c44 <MRT_setRTC+0x8c>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8006c0a:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <MRT_setRTC+0x8c>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8006c10:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <MRT_setRTC+0x8c>)
 8006c12:	2201      	movs	r2, #1
 8006c14:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <MRT_setRTC+0x8c>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006c1c:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <MRT_setRTC+0x88>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2201      	movs	r2, #1
 8006c22:	4908      	ldr	r1, [pc, #32]	; (8006c44 <MRT_setRTC+0x8c>)
 8006c24:	4618      	mov	r0, r3
 8006c26:	f003 fbcb 	bl	800a3c0 <HAL_RTC_SetDate>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <MRT_setRTC+0x7c>
	  {
	    Error_Handler();
 8006c30:	f7fb ff04 	bl	8002a3c <Error_Handler>
	  }
}
 8006c34:	bf00      	nop
 8006c36:	3720      	adds	r7, #32
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20000028 	.word	0x20000028
 8006c40:	2000608c 	.word	0x2000608c
 8006c44:	2000051c 	.word	0x2000051c

08006c48 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8006c4e:	2300      	movs	r3, #0
 8006c50:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8006c52:	2200      	movs	r2, #0
 8006c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c58:	483f      	ldr	r0, [pc, #252]	; (8006d58 <Max31855_Read_Temp+0x110>)
 8006c5a:	f001 fa21 	bl	80080a0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8006c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c62:	2204      	movs	r2, #4
 8006c64:	493d      	ldr	r1, [pc, #244]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006c66:	483e      	ldr	r0, [pc, #248]	; (8006d60 <Max31855_Read_Temp+0x118>)
 8006c68:	f004 f995 	bl	800af96 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c72:	4839      	ldr	r0, [pc, #228]	; (8006d58 <Max31855_Read_Temp+0x110>)
 8006c74:	f001 fa14 	bl	80080a0 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8006c78:	4b38      	ldr	r3, [pc, #224]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006c7a:	78db      	ldrb	r3, [r3, #3]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4b37      	ldr	r3, [pc, #220]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006c80:	789b      	ldrb	r3, [r3, #2]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	431a      	orrs	r2, r3
 8006c86:	4b35      	ldr	r3, [pc, #212]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	4b33      	ldr	r3, [pc, #204]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	061b      	lsls	r3, r3, #24
 8006c94:	4313      	orrs	r3, r2
 8006c96:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	4b30      	ldr	r3, [pc, #192]	; (8006d64 <Max31855_Read_Temp+0x11c>)
 8006ca4:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8006ca6:	4b2d      	ldr	r3, [pc, #180]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	09db      	lsrs	r3, r3, #7
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4b2d      	ldr	r3, [pc, #180]	; (8006d68 <Max31855_Read_Temp+0x120>)
 8006cb2:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8006cb4:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006cb6:	78db      	ldrb	r3, [r3, #3]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00c      	beq.n	8006cda <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8006cc0:	4b26      	ldr	r3, [pc, #152]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006cc2:	78db      	ldrb	r3, [r3, #3]
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	425b      	negs	r3, r3
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cd2:	4b26      	ldr	r3, [pc, #152]	; (8006d6c <Max31855_Read_Temp+0x124>)
 8006cd4:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8006cd8:	e039      	b.n	8006d4e <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8006cda:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <Max31855_Read_Temp+0x120>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d120      	bne.n	8006d24 <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8006ce2:	4b1e      	ldr	r3, [pc, #120]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	019b      	lsls	r3, r3, #6
 8006ce8:	4a1c      	ldr	r2, [pc, #112]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006cea:	7852      	ldrb	r2, [r2, #1]
 8006cec:	0892      	lsrs	r2, r2, #2
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cfa:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8006d02:	f083 031f 	eor.w	r3, r3, #31
 8006d06:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	425b      	negs	r3, r3
 8006d0c:	ee07 3a90 	vmov	s15, r3
 8006d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d14:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d1c:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <Max31855_Read_Temp+0x124>)
 8006d1e:	edc3 7a00 	vstr	s15, [r3]
}
 8006d22:	e014      	b.n	8006d4e <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8006d24:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	019b      	lsls	r3, r3, #6
 8006d2a:	4a0c      	ldr	r2, [pc, #48]	; (8006d5c <Max31855_Read_Temp+0x114>)
 8006d2c:	7852      	ldrb	r2, [r2, #1]
 8006d2e:	0892      	lsrs	r2, r2, #2
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	4313      	orrs	r3, r2
 8006d34:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	ee07 3a90 	vmov	s15, r3
 8006d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d40:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d48:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <Max31855_Read_Temp+0x124>)
 8006d4a:	edc3 7a00 	vstr	s15, [r3]
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	20006090 	.word	0x20006090
 8006d60:	20005d54 	.word	0x20005d54
 8006d64:	2000054a 	.word	0x2000054a
 8006d68:	2000054c 	.word	0x2000054c
 8006d6c:	20005e98 	.word	0x20005e98

08006d70 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8006d70:	b40f      	push	{r0, r1, r2, r3}
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8006d78:	f107 0314 	add.w	r3, r7, #20
 8006d7c:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d86:	480a      	ldr	r0, [pc, #40]	; (8006db0 <myprintf+0x40>)
 8006d88:	f010 fc08 	bl	801759c <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8006d8c:	4808      	ldr	r0, [pc, #32]	; (8006db0 <myprintf+0x40>)
 8006d8e:	f7f9 fa2f 	bl	80001f0 <strlen>
 8006d92:	4603      	mov	r3, r0
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9a:	4905      	ldr	r1, [pc, #20]	; (8006db0 <myprintf+0x40>)
 8006d9c:	4805      	ldr	r0, [pc, #20]	; (8006db4 <myprintf+0x44>)
 8006d9e:	f005 fdd6 	bl	800c94e <HAL_UART_Transmit>

}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dac:	b004      	add	sp, #16
 8006dae:	4770      	bx	lr
 8006db0:	20000550 	.word	0x20000550
 8006db4:	20005ac8 	.word	0x20005ac8

08006db8 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08a      	sub	sp, #40	; 0x28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	4932      	ldr	r1, [pc, #200]	; (8006e90 <sd_init_dynamic_filename+0xd8>)
 8006dc8:	4832      	ldr	r0, [pc, #200]	; (8006e94 <sd_init_dynamic_filename+0xdc>)
 8006dca:	f008 fcc5 	bl	800f758 <f_mount>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8006dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8006ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de0:	4619      	mov	r1, r3
 8006de2:	482d      	ldr	r0, [pc, #180]	; (8006e98 <sd_init_dynamic_filename+0xe0>)
 8006de4:	f7ff ffc4 	bl	8006d70 <myprintf>
		return fres;
 8006de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dec:	e04b      	b.n	8006e86 <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8006df2:	f107 0320 	add.w	r3, r7, #32
 8006df6:	461a      	mov	r2, r3
 8006df8:	68f9      	ldr	r1, [r7, #12]
 8006dfa:	4825      	ldr	r0, [pc, #148]	; (8006e90 <sd_init_dynamic_filename+0xd8>)
 8006dfc:	f000 f89c 	bl	8006f38 <scan_files>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	f107 0310 	add.w	r3, r7, #16
 8006e0e:	4923      	ldr	r1, [pc, #140]	; (8006e9c <sd_init_dynamic_filename+0xe4>)
 8006e10:	4618      	mov	r0, r3
 8006e12:	f00f fbb1 	bl	8016578 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8006e16:	f107 0310 	add.w	r3, r7, #16
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f00f fc3c 	bl	801669a <strcpy>
 8006e22:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8006e24:	f107 0310 	add.w	r3, r7, #16
 8006e28:	221a      	movs	r2, #26
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	481c      	ldr	r0, [pc, #112]	; (8006ea0 <sd_init_dynamic_filename+0xe8>)
 8006e2e:	f008 fcf7 	bl	800f820 <f_open>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8006e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d11a      	bne.n	8006e76 <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8006e40:	4818      	ldr	r0, [pc, #96]	; (8006ea4 <sd_init_dynamic_filename+0xec>)
 8006e42:	f7ff ff95 	bl	8006d70 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8006e46:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <sd_init_dynamic_filename+0xe8>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4814      	ldr	r0, [pc, #80]	; (8006ea0 <sd_init_dynamic_filename+0xe8>)
 8006e4e:	f009 f908 	bl	8010062 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8006e52:	4915      	ldr	r1, [pc, #84]	; (8006ea8 <sd_init_dynamic_filename+0xf0>)
 8006e54:	4815      	ldr	r0, [pc, #84]	; (8006eac <sd_init_dynamic_filename+0xf4>)
 8006e56:	f00f fb8f 	bl	8016578 <siprintf>
	sd_write(&fil, msg_buffer);
 8006e5a:	4914      	ldr	r1, [pc, #80]	; (8006eac <sd_init_dynamic_filename+0xf4>)
 8006e5c:	4810      	ldr	r0, [pc, #64]	; (8006ea0 <sd_init_dynamic_filename+0xe8>)
 8006e5e:	f000 f841 	bl	8006ee4 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	480e      	ldr	r0, [pc, #56]	; (8006ea0 <sd_init_dynamic_filename+0xe8>)
 8006e66:	f000 f83d 	bl	8006ee4 <sd_write>
	f_close(&fil);
 8006e6a:	480d      	ldr	r0, [pc, #52]	; (8006ea0 <sd_init_dynamic_filename+0xe8>)
 8006e6c:	f009 f8ca 	bl	8010004 <f_close>

	return fres;
 8006e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e74:	e007      	b.n	8006e86 <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8006e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	480c      	ldr	r0, [pc, #48]	; (8006eb0 <sd_init_dynamic_filename+0xf8>)
 8006e7e:	f7ff ff77 	bl	8006d70 <myprintf>
		return fres;
 8006e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3728      	adds	r7, #40	; 0x28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	0801c0cc 	.word	0x0801c0cc
 8006e94:	20006094 	.word	0x20006094
 8006e98:	0801c0d0 	.word	0x0801c0d0
 8006e9c:	0801c14c 	.word	0x0801c14c
 8006ea0:	20006aac 	.word	0x20006aac
 8006ea4:	0801c0e8 	.word	0x0801c0e8
 8006ea8:	0801c12c 	.word	0x0801c12c
 8006eac:	200062c8 	.word	0x200062c8
 8006eb0:	0801c118 	.word	0x0801c118

08006eb4 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8006ebc:	2212      	movs	r2, #18
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4807      	ldr	r0, [pc, #28]	; (8006ee0 <sd_open_file+0x2c>)
 8006ec2:	f008 fcad 	bl	800f820 <f_open>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <sd_open_file+0x2c>)
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4803      	ldr	r0, [pc, #12]	; (8006ee0 <sd_open_file+0x2c>)
 8006ed2:	f009 f8c6 	bl	8010062 <f_lseek>

	return fres;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20006aac 	.word	0x20006aac

08006ee4 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8006eee:	6838      	ldr	r0, [r7, #0]
 8006ef0:	f7f9 f97e 	bl	80001f0 <strlen>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	f107 0308 	add.w	r3, r7, #8
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f008 fe54 	bl	800fbaa <f_write>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d107      	bne.n	8006f1c <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4807      	ldr	r0, [pc, #28]	; (8006f30 <sd_write+0x4c>)
 8006f12:	f7ff ff2d 	bl	8006d70 <myprintf>
		return bytesWrote;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	b25b      	sxtb	r3, r3
 8006f1a:	e004      	b.n	8006f26 <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8006f1c:	4805      	ldr	r0, [pc, #20]	; (8006f34 <sd_write+0x50>)
 8006f1e:	f7ff ff27 	bl	8006d70 <myprintf>
		return -1;
 8006f22:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	0801c158 	.word	0x0801c158
 8006f34:	0801c17c 	.word	0x0801c17c

08006f38 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8006f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3a:	b099      	sub	sp, #100	; 0x64
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	466b      	mov	r3, sp
 8006f46:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8006f48:	68b8      	ldr	r0, [r7, #8]
 8006f4a:	f7f9 f951 	bl	80001f0 <strlen>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8006f54:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8006f58:	4623      	mov	r3, r4
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f5e:	b2e0      	uxtb	r0, r4
 8006f60:	f04f 0100 	mov.w	r1, #0
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	00cb      	lsls	r3, r1, #3
 8006f6e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006f72:	00c2      	lsls	r2, r0, #3
 8006f74:	b2e0      	uxtb	r0, r4
 8006f76:	f04f 0100 	mov.w	r1, #0
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	00cb      	lsls	r3, r1, #3
 8006f84:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006f88:	00c2      	lsls	r2, r0, #3
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	3307      	adds	r3, #7
 8006f8e:	08db      	lsrs	r3, r3, #3
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	ebad 0d03 	sub.w	sp, sp, r3
 8006f96:	466b      	mov	r3, sp
 8006f98:	3300      	adds	r3, #0
 8006f9a:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8006f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	68b8      	ldr	r0, [r7, #8]
 8006fa2:	f000 f8ff 	bl	80071a4 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8006fac:	2300      	movs	r3, #0
 8006fae:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8006fb0:	f107 0318 	add.w	r3, r7, #24
 8006fb4:	68f9      	ldr	r1, [r7, #12]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f009 faa6 	bl	8010508 <f_opendir>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8006fc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d16c      	bne.n	80070a4 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8006fca:	f107 0318 	add.w	r3, r7, #24
 8006fce:	4939      	ldr	r1, [pc, #228]	; (80070b4 <scan_files+0x17c>)
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f009 fb3d 	bl	8010650 <f_readdir>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8006fdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d15a      	bne.n	800709a <scan_files+0x162>
 8006fe4:	4b33      	ldr	r3, [pc, #204]	; (80070b4 <scan_files+0x17c>)
 8006fe6:	7a5b      	ldrb	r3, [r3, #9]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d056      	beq.n	800709a <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8006fec:	4b31      	ldr	r3, [pc, #196]	; (80070b4 <scan_files+0x17c>)
 8006fee:	7a1b      	ldrb	r3, [r3, #8]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d14e      	bne.n	8007096 <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8006ff8:	466b      	mov	r3, sp
 8006ffa:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8006ffc:	482e      	ldr	r0, [pc, #184]	; (80070b8 <scan_files+0x180>)
 8006ffe:	f7f9 f8f7 	bl	80001f0 <strlen>
 8007002:	4604      	mov	r4, r0
 8007004:	4623      	mov	r3, r4
 8007006:	3b01      	subs	r3, #1
 8007008:	653b      	str	r3, [r7, #80]	; 0x50
 800700a:	4620      	mov	r0, r4
 800700c:	f04f 0100 	mov.w	r1, #0
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	00cb      	lsls	r3, r1, #3
 800701a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800701e:	00c2      	lsls	r2, r0, #3
 8007020:	4620      	mov	r0, r4
 8007022:	f04f 0100 	mov.w	r1, #0
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	00cb      	lsls	r3, r1, #3
 8007030:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007034:	00c2      	lsls	r2, r0, #3
 8007036:	1de3      	adds	r3, r4, #7
 8007038:	08db      	lsrs	r3, r3, #3
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	ebad 0d03 	sub.w	sp, sp, r3
 8007040:	466b      	mov	r3, sp
 8007042:	3300      	adds	r3, #0
 8007044:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8007046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007048:	4619      	mov	r1, r3
 800704a:	481b      	ldr	r0, [pc, #108]	; (80070b8 <scan_files+0x180>)
 800704c:	f000 f8aa 	bl	80071a4 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8007050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007052:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007056:	4619      	mov	r1, r3
 8007058:	4817      	ldr	r0, [pc, #92]	; (80070b8 <scan_files+0x180>)
 800705a:	f00f fb26 	bl	80166aa <strncmp>
 800705e:	4603      	mov	r3, r0
 8007060:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8007064:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8007068:	2b00      	cmp	r3, #0
 800706a:	d112      	bne.n	8007092 <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 800706c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706e:	f107 0214 	add.w	r2, r7, #20
 8007072:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f820 	bl	80070bc <extract_filename_suffix>
 800707c:	4603      	mov	r3, r0
 800707e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	429a      	cmp	r2, r3
 800708a:	d202      	bcs.n	8007092 <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	46b5      	mov	sp, r6
 8007094:	e799      	b.n	8006fca <scan_files+0x92>
            	continue; // don't enter directory
 8007096:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8007098:	e797      	b.n	8006fca <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 800709a:	f107 0318 	add.w	r3, r7, #24
 800709e:	4618      	mov	r0, r3
 80070a0:	f009 faab 	bl	80105fa <f_closedir>
    }

    return res;
 80070a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070a8:	46ad      	mov	sp, r5
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3764      	adds	r7, #100	; 0x64
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000650 	.word	0x20000650
 80070b8:	20000659 	.word	0x20000659

080070bc <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 80070bc:	b5b0      	push	{r4, r5, r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	460b      	mov	r3, r1
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	72fb      	strb	r3, [r7, #11]
 80070ca:	466b      	mov	r3, sp
 80070cc:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7f9 f88e 	bl	80001f0 <strlen>
 80070d4:	4603      	mov	r3, r0
 80070d6:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 80070d8:	2308      	movs	r3, #8
 80070da:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 80070dc:	7f7c      	ldrb	r4, [r7, #29]
 80070de:	4623      	mov	r3, r4
 80070e0:	3b01      	subs	r3, #1
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	b2e0      	uxtb	r0, r4
 80070e6:	f04f 0100 	mov.w	r1, #0
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	00cb      	lsls	r3, r1, #3
 80070f4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80070f8:	00c2      	lsls	r2, r0, #3
 80070fa:	b2e0      	uxtb	r0, r4
 80070fc:	f04f 0100 	mov.w	r1, #0
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	00cb      	lsls	r3, r1, #3
 800710a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800710e:	00c2      	lsls	r2, r0, #3
 8007110:	4623      	mov	r3, r4
 8007112:	3307      	adds	r3, #7
 8007114:	08db      	lsrs	r3, r3, #3
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	ebad 0d03 	sub.w	sp, sp, r3
 800711c:	466b      	mov	r3, sp
 800711e:	3300      	adds	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8007122:	2300      	movs	r3, #0
 8007124:	77fb      	strb	r3, [r7, #31]
 8007126:	e014      	b.n	8007152 <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8007128:	7afb      	ldrb	r3, [r7, #11]
 800712a:	1e5a      	subs	r2, r3, #1
 800712c:	7ffb      	ldrb	r3, [r7, #31]
 800712e:	441a      	add	r2, r3
 8007130:	7fbb      	ldrb	r3, [r7, #30]
 8007132:	3b01      	subs	r3, #1
 8007134:	429a      	cmp	r2, r3
 8007136:	da11      	bge.n	800715c <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8007138:	7afa      	ldrb	r2, [r7, #11]
 800713a:	7ffb      	ldrb	r3, [r7, #31]
 800713c:	4413      	add	r3, r2
 800713e:	461a      	mov	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	441a      	add	r2, r3
 8007144:	7ffb      	ldrb	r3, [r7, #31]
 8007146:	7811      	ldrb	r1, [r2, #0]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 800714c:	7ffb      	ldrb	r3, [r7, #31]
 800714e:	3301      	adds	r3, #1
 8007150:	77fb      	strb	r3, [r7, #31]
 8007152:	7ffa      	ldrb	r2, [r7, #31]
 8007154:	7f7b      	ldrb	r3, [r7, #29]
 8007156:	429a      	cmp	r2, r3
 8007158:	d3e6      	bcc.n	8007128 <extract_filename_suffix+0x6c>
 800715a:	e000      	b.n	800715e <extract_filename_suffix+0xa2>
		}
		else break;
 800715c:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f107 0110 	add.w	r1, r7, #16
 8007164:	220a      	movs	r2, #10
 8007166:	4618      	mov	r0, r3
 8007168:	f010 f964 	bl	8017434 <strtol>
 800716c:	4603      	mov	r3, r0
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	429a      	cmp	r2, r3
 800717a:	d00a      	beq.n	8007192 <extract_filename_suffix+0xd6>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007184:	d005      	beq.n	8007192 <extract_filename_suffix+0xd6>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800718e:	4293      	cmp	r3, r2
 8007190:	d101      	bne.n	8007196 <extract_filename_suffix+0xda>
	{
		return 1;
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <extract_filename_suffix+0xdc>
	}

	return 0;
 8007196:	2300      	movs	r3, #0
 8007198:	46ad      	mov	sp, r5
}
 800719a:	4618      	mov	r0, r3
 800719c:	3720      	adds	r7, #32
 800719e:	46bd      	mov	sp, r7
 80071a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080071a4 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80071a4:	b590      	push	{r4, r7, lr}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
 80071b2:	e019      	b.n	80071e8 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	73bb      	strb	r3, [r7, #14]
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	3301      	adds	r3, #1
 80071c2:	4a0f      	ldr	r2, [pc, #60]	; (8007200 <str2upper+0x5c>)
 80071c4:	4413      	add	r3, r2
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d102      	bne.n	80071d6 <str2upper+0x32>
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	3b20      	subs	r3, #32
 80071d4:	e000      	b.n	80071d8 <str2upper+0x34>
 80071d6:	7bbb      	ldrb	r3, [r7, #14]
 80071d8:	7bfa      	ldrb	r2, [r7, #15]
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	440a      	add	r2, r1
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	3301      	adds	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
 80071e8:	7bfc      	ldrb	r4, [r7, #15]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7f9 f800 	bl	80001f0 <strlen>
 80071f0:	4603      	mov	r3, r0
 80071f2:	429c      	cmp	r4, r3
 80071f4:	d3de      	bcc.n	80071b4 <str2upper+0x10>
	}
}
 80071f6:	bf00      	nop
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd90      	pop	{r4, r7, pc}
 8007200:	0801c400 	.word	0x0801c400

08007204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007208:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <HAL_Init+0x40>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a0d      	ldr	r2, [pc, #52]	; (8007244 <HAL_Init+0x40>)
 800720e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007214:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <HAL_Init+0x40>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a0a      	ldr	r2, [pc, #40]	; (8007244 <HAL_Init+0x40>)
 800721a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800721e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007220:	4b08      	ldr	r3, [pc, #32]	; (8007244 <HAL_Init+0x40>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a07      	ldr	r2, [pc, #28]	; (8007244 <HAL_Init+0x40>)
 8007226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800722a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800722c:	2003      	movs	r0, #3
 800722e:	f000 fd30 	bl	8007c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007232:	2000      	movs	r0, #0
 8007234:	f7fb ff0e 	bl	8003054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007238:	f7fb fc08 	bl	8002a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	40023c00 	.word	0x40023c00

08007248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800724c:	4b06      	ldr	r3, [pc, #24]	; (8007268 <HAL_IncTick+0x20>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	4b06      	ldr	r3, [pc, #24]	; (800726c <HAL_IncTick+0x24>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4413      	add	r3, r2
 8007258:	4a04      	ldr	r2, [pc, #16]	; (800726c <HAL_IncTick+0x24>)
 800725a:	6013      	str	r3, [r2, #0]
}
 800725c:	bf00      	nop
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000068 	.word	0x20000068
 800726c:	20006cdc 	.word	0x20006cdc

08007270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  return uwTick;
 8007274:	4b03      	ldr	r3, [pc, #12]	; (8007284 <HAL_GetTick+0x14>)
 8007276:	681b      	ldr	r3, [r3, #0]
}
 8007278:	4618      	mov	r0, r3
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20006cdc 	.word	0x20006cdc

08007288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007290:	f7ff ffee 	bl	8007270 <HAL_GetTick>
 8007294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d005      	beq.n	80072ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072a2:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <HAL_Delay+0x44>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80072ae:	bf00      	nop
 80072b0:	f7ff ffde 	bl	8007270 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d8f7      	bhi.n	80072b0 <HAL_Delay+0x28>
  {
  }
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000068 	.word	0x20000068

080072d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e033      	b.n	800734e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d109      	bne.n	8007302 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fb fbd8 	bl	8002aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	f003 0310 	and.w	r3, r3, #16
 800730a:	2b00      	cmp	r3, #0
 800730c:	d118      	bne.n	8007340 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007316:	f023 0302 	bic.w	r3, r3, #2
 800731a:	f043 0202 	orr.w	r2, r3, #2
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fae8 	bl	80078f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	f023 0303 	bic.w	r3, r3, #3
 8007336:	f043 0201 	orr.w	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	641a      	str	r2, [r3, #64]	; 0x40
 800733e:	e001      	b.n	8007344 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <HAL_ADC_Start+0x1a>
 800736e:	2302      	movs	r3, #2
 8007370:	e0b2      	b.n	80074d8 <HAL_ADC_Start+0x180>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b01      	cmp	r3, #1
 8007386:	d018      	beq.n	80073ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 0201 	orr.w	r2, r2, #1
 8007396:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007398:	4b52      	ldr	r3, [pc, #328]	; (80074e4 <HAL_ADC_Start+0x18c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a52      	ldr	r2, [pc, #328]	; (80074e8 <HAL_ADC_Start+0x190>)
 800739e:	fba2 2303 	umull	r2, r3, r2, r3
 80073a2:	0c9a      	lsrs	r2, r3, #18
 80073a4:	4613      	mov	r3, r2
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	4413      	add	r3, r2
 80073aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80073ac:	e002      	b.n	80073b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1f9      	bne.n	80073ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d17a      	bne.n	80074be <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d007      	beq.n	80073fa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80073f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007406:	d106      	bne.n	8007416 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740c:	f023 0206 	bic.w	r2, r3, #6
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	645a      	str	r2, [r3, #68]	; 0x44
 8007414:	e002      	b.n	800741c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007424:	4b31      	ldr	r3, [pc, #196]	; (80074ec <HAL_ADC_Start+0x194>)
 8007426:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007430:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2b00      	cmp	r3, #0
 800743c:	d12a      	bne.n	8007494 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2b      	ldr	r2, [pc, #172]	; (80074f0 <HAL_ADC_Start+0x198>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d015      	beq.n	8007474 <HAL_ADC_Start+0x11c>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a29      	ldr	r2, [pc, #164]	; (80074f4 <HAL_ADC_Start+0x19c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d105      	bne.n	800745e <HAL_ADC_Start+0x106>
 8007452:	4b26      	ldr	r3, [pc, #152]	; (80074ec <HAL_ADC_Start+0x194>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a25      	ldr	r2, [pc, #148]	; (80074f8 <HAL_ADC_Start+0x1a0>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d136      	bne.n	80074d6 <HAL_ADC_Start+0x17e>
 8007468:	4b20      	ldr	r3, [pc, #128]	; (80074ec <HAL_ADC_Start+0x194>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	d130      	bne.n	80074d6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d129      	bne.n	80074d6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007490:	609a      	str	r2, [r3, #8]
 8007492:	e020      	b.n	80074d6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <HAL_ADC_Start+0x198>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d11b      	bne.n	80074d6 <HAL_ADC_Start+0x17e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d114      	bne.n	80074d6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	e00b      	b.n	80074d6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	f043 0210 	orr.w	r2, r3, #16
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ce:	f043 0201 	orr.w	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	20000000 	.word	0x20000000
 80074e8:	431bde83 	.word	0x431bde83
 80074ec:	40012300 	.word	0x40012300
 80074f0:	40012000 	.word	0x40012000
 80074f4:	40012100 	.word	0x40012100
 80074f8:	40012200 	.word	0x40012200

080074fc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_ADC_Stop+0x16>
 800750e:	2302      	movs	r3, #2
 8007510:	e021      	b.n	8007556 <HAL_ADC_Stop+0x5a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0201 	bic.w	r2, r2, #1
 8007528:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007540:	f023 0301 	bic.w	r3, r3, #1
 8007544:	f043 0201 	orr.w	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800757a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800757e:	d113      	bne.n	80075a8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800758a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758e:	d10b      	bne.n	80075a8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e063      	b.n	8007670 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80075a8:	f7ff fe62 	bl	8007270 <HAL_GetTick>
 80075ac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80075ae:	e021      	b.n	80075f4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b6:	d01d      	beq.n	80075f4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d007      	beq.n	80075ce <HAL_ADC_PollForConversion+0x6c>
 80075be:	f7ff fe57 	bl	8007270 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d212      	bcs.n	80075f4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d00b      	beq.n	80075f4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	f043 0204 	orr.w	r2, r3, #4
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e03d      	b.n	8007670 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d1d6      	bne.n	80075b0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f06f 0212 	mvn.w	r2, #18
 800760a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d123      	bne.n	800766e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800762a:	2b00      	cmp	r3, #0
 800762c:	d11f      	bne.n	800766e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007638:	2b00      	cmp	r3, #0
 800763a:	d006      	beq.n	800764a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007646:	2b00      	cmp	r3, #0
 8007648:	d111      	bne.n	800766e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d105      	bne.n	800766e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	f043 0201 	orr.w	r2, r3, #1
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
	...

08007694 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d101      	bne.n	80076b0 <HAL_ADC_ConfigChannel+0x1c>
 80076ac:	2302      	movs	r3, #2
 80076ae:	e113      	b.n	80078d8 <HAL_ADC_ConfigChannel+0x244>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b09      	cmp	r3, #9
 80076be:	d925      	bls.n	800770c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68d9      	ldr	r1, [r3, #12]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	4613      	mov	r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	3b1e      	subs	r3, #30
 80076d6:	2207      	movs	r2, #7
 80076d8:	fa02 f303 	lsl.w	r3, r2, r3
 80076dc:	43da      	mvns	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	400a      	ands	r2, r1
 80076e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68d9      	ldr	r1, [r3, #12]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	4618      	mov	r0, r3
 80076f8:	4603      	mov	r3, r0
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	4403      	add	r3, r0
 80076fe:	3b1e      	subs	r3, #30
 8007700:	409a      	lsls	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	60da      	str	r2, [r3, #12]
 800770a:	e022      	b.n	8007752 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6919      	ldr	r1, [r3, #16]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	b29b      	uxth	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	4613      	mov	r3, r2
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	4413      	add	r3, r2
 8007720:	2207      	movs	r2, #7
 8007722:	fa02 f303 	lsl.w	r3, r2, r3
 8007726:	43da      	mvns	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	400a      	ands	r2, r1
 800772e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6919      	ldr	r1, [r3, #16]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	4618      	mov	r0, r3
 8007742:	4603      	mov	r3, r0
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	4403      	add	r3, r0
 8007748:	409a      	lsls	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	2b06      	cmp	r3, #6
 8007758:	d824      	bhi.n	80077a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	3b05      	subs	r3, #5
 800776c:	221f      	movs	r2, #31
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43da      	mvns	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	400a      	ands	r2, r1
 800777a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	4618      	mov	r0, r3
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	3b05      	subs	r3, #5
 8007796:	fa00 f203 	lsl.w	r2, r0, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	635a      	str	r2, [r3, #52]	; 0x34
 80077a2:	e04c      	b.n	800783e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b0c      	cmp	r3, #12
 80077aa:	d824      	bhi.n	80077f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	3b23      	subs	r3, #35	; 0x23
 80077be:	221f      	movs	r2, #31
 80077c0:	fa02 f303 	lsl.w	r3, r2, r3
 80077c4:	43da      	mvns	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	400a      	ands	r2, r1
 80077cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	4618      	mov	r0, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	3b23      	subs	r3, #35	; 0x23
 80077e8:	fa00 f203 	lsl.w	r2, r0, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	631a      	str	r2, [r3, #48]	; 0x30
 80077f4:	e023      	b.n	800783e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	3b41      	subs	r3, #65	; 0x41
 8007808:	221f      	movs	r2, #31
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	43da      	mvns	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	400a      	ands	r2, r1
 8007816:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	4618      	mov	r0, r3
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	3b41      	subs	r3, #65	; 0x41
 8007832:	fa00 f203 	lsl.w	r2, r0, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800783e:	4b29      	ldr	r3, [pc, #164]	; (80078e4 <HAL_ADC_ConfigChannel+0x250>)
 8007840:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a28      	ldr	r2, [pc, #160]	; (80078e8 <HAL_ADC_ConfigChannel+0x254>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d10f      	bne.n	800786c <HAL_ADC_ConfigChannel+0x1d8>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b12      	cmp	r3, #18
 8007852:	d10b      	bne.n	800786c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a1d      	ldr	r2, [pc, #116]	; (80078e8 <HAL_ADC_ConfigChannel+0x254>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d12b      	bne.n	80078ce <HAL_ADC_ConfigChannel+0x23a>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1c      	ldr	r2, [pc, #112]	; (80078ec <HAL_ADC_ConfigChannel+0x258>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d003      	beq.n	8007888 <HAL_ADC_ConfigChannel+0x1f4>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b11      	cmp	r3, #17
 8007886:	d122      	bne.n	80078ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a11      	ldr	r2, [pc, #68]	; (80078ec <HAL_ADC_ConfigChannel+0x258>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d111      	bne.n	80078ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80078aa:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <HAL_ADC_ConfigChannel+0x25c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a11      	ldr	r2, [pc, #68]	; (80078f4 <HAL_ADC_ConfigChannel+0x260>)
 80078b0:	fba2 2303 	umull	r2, r3, r2, r3
 80078b4:	0c9a      	lsrs	r2, r3, #18
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80078c0:	e002      	b.n	80078c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f9      	bne.n	80078c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	40012300 	.word	0x40012300
 80078e8:	40012000 	.word	0x40012000
 80078ec:	10000012 	.word	0x10000012
 80078f0:	20000000 	.word	0x20000000
 80078f4:	431bde83 	.word	0x431bde83

080078f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007900:	4b79      	ldr	r3, [pc, #484]	; (8007ae8 <ADC_Init+0x1f0>)
 8007902:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	431a      	orrs	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800792c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6859      	ldr	r1, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	021a      	lsls	r2, r3, #8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6859      	ldr	r1, [r3, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6899      	ldr	r1, [r3, #8]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798a:	4a58      	ldr	r2, [pc, #352]	; (8007aec <ADC_Init+0x1f4>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d022      	beq.n	80079d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800799e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6899      	ldr	r1, [r3, #8]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80079c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6899      	ldr	r1, [r3, #8]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	609a      	str	r2, [r3, #8]
 80079d4:	e00f      	b.n	80079f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80079f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0202 	bic.w	r2, r2, #2
 8007a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6899      	ldr	r1, [r3, #8]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7e1b      	ldrb	r3, [r3, #24]
 8007a10:	005a      	lsls	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01b      	beq.n	8007a5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007a42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6859      	ldr	r1, [r3, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	035a      	lsls	r2, r3, #13
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
 8007a5a:	e007      	b.n	8007a6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	051a      	lsls	r2, r3, #20
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6899      	ldr	r1, [r3, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007aae:	025a      	lsls	r2, r3, #9
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6899      	ldr	r1, [r3, #8]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	029a      	lsls	r2, r3, #10
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	609a      	str	r2, [r3, #8]
}
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40012300 	.word	0x40012300
 8007aec:	0f000001 	.word	0x0f000001

08007af0 <__NVIC_SetPriorityGrouping>:
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b00:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <__NVIC_SetPriorityGrouping+0x44>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b22:	4a04      	ldr	r2, [pc, #16]	; (8007b34 <__NVIC_SetPriorityGrouping+0x44>)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	60d3      	str	r3, [r2, #12]
}
 8007b28:	bf00      	nop
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	e000ed00 	.word	0xe000ed00

08007b38 <__NVIC_GetPriorityGrouping>:
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b3c:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <__NVIC_GetPriorityGrouping+0x18>)
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	0a1b      	lsrs	r3, r3, #8
 8007b42:	f003 0307 	and.w	r3, r3, #7
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	e000ed00 	.word	0xe000ed00

08007b54 <__NVIC_EnableIRQ>:
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	db0b      	blt.n	8007b7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	f003 021f 	and.w	r2, r3, #31
 8007b6c:	4907      	ldr	r1, [pc, #28]	; (8007b8c <__NVIC_EnableIRQ+0x38>)
 8007b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	2001      	movs	r0, #1
 8007b76:	fa00 f202 	lsl.w	r2, r0, r2
 8007b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b7e:	bf00      	nop
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	e000e100 	.word	0xe000e100

08007b90 <__NVIC_DisableIRQ>:
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	db12      	blt.n	8007bc8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	f003 021f 	and.w	r2, r3, #31
 8007ba8:	490a      	ldr	r1, [pc, #40]	; (8007bd4 <__NVIC_DisableIRQ+0x44>)
 8007baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8007bb6:	3320      	adds	r3, #32
 8007bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007bbc:	f3bf 8f4f 	dsb	sy
}
 8007bc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007bc2:	f3bf 8f6f 	isb	sy
}
 8007bc6:	bf00      	nop
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	e000e100 	.word	0xe000e100

08007bd8 <__NVIC_SetPriority>:
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	6039      	str	r1, [r7, #0]
 8007be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	db0a      	blt.n	8007c02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	490c      	ldr	r1, [pc, #48]	; (8007c24 <__NVIC_SetPriority+0x4c>)
 8007bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf6:	0112      	lsls	r2, r2, #4
 8007bf8:	b2d2      	uxtb	r2, r2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c00:	e00a      	b.n	8007c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	4908      	ldr	r1, [pc, #32]	; (8007c28 <__NVIC_SetPriority+0x50>)
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	f003 030f 	and.w	r3, r3, #15
 8007c0e:	3b04      	subs	r3, #4
 8007c10:	0112      	lsls	r2, r2, #4
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	440b      	add	r3, r1
 8007c16:	761a      	strb	r2, [r3, #24]
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	e000e100 	.word	0xe000e100
 8007c28:	e000ed00 	.word	0xe000ed00

08007c2c <NVIC_EncodePriority>:
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b089      	sub	sp, #36	; 0x24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f1c3 0307 	rsb	r3, r3, #7
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	bf28      	it	cs
 8007c4a:	2304      	movcs	r3, #4
 8007c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	3304      	adds	r3, #4
 8007c52:	2b06      	cmp	r3, #6
 8007c54:	d902      	bls.n	8007c5c <NVIC_EncodePriority+0x30>
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	3b03      	subs	r3, #3
 8007c5a:	e000      	b.n	8007c5e <NVIC_EncodePriority+0x32>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c60:	f04f 32ff 	mov.w	r2, #4294967295
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	43da      	mvns	r2, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	401a      	ands	r2, r3
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c74:	f04f 31ff 	mov.w	r1, #4294967295
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7e:	43d9      	mvns	r1, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c84:	4313      	orrs	r3, r2
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3724      	adds	r7, #36	; 0x24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff ff28 	bl	8007af0 <__NVIC_SetPriorityGrouping>
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007cba:	f7ff ff3d 	bl	8007b38 <__NVIC_GetPriorityGrouping>
 8007cbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	6978      	ldr	r0, [r7, #20]
 8007cc6:	f7ff ffb1 	bl	8007c2c <NVIC_EncodePriority>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff ff80 	bl	8007bd8 <__NVIC_SetPriority>
}
 8007cd8:	bf00      	nop
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff ff30 	bl	8007b54 <__NVIC_EnableIRQ>
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff ff40 	bl	8007b90 <__NVIC_DisableIRQ>
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b089      	sub	sp, #36	; 0x24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	e177      	b.n	8008024 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d34:	2201      	movs	r2, #1
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4013      	ands	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	f040 8166 	bne.w	800801e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d005      	beq.n	8007d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d130      	bne.n	8007dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	2203      	movs	r2, #3
 8007d76:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7a:	43db      	mvns	r3, r3
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007da0:	2201      	movs	r2, #1
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	fa02 f303 	lsl.w	r3, r2, r3
 8007da8:	43db      	mvns	r3, r3
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	4013      	ands	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	091b      	lsrs	r3, r3, #4
 8007db6:	f003 0201 	and.w	r2, r3, #1
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f003 0303 	and.w	r3, r3, #3
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d017      	beq.n	8007e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	2203      	movs	r2, #3
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	43db      	mvns	r3, r3
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	4013      	ands	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d123      	bne.n	8007e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	08da      	lsrs	r2, r3, #3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3208      	adds	r2, #8
 8007e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	220f      	movs	r2, #15
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	43db      	mvns	r3, r3
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	4013      	ands	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	691a      	ldr	r2, [r3, #16]
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	fa02 f303 	lsl.w	r3, r2, r3
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	08da      	lsrs	r2, r3, #3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3208      	adds	r2, #8
 8007e56:	69b9      	ldr	r1, [r7, #24]
 8007e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	2203      	movs	r2, #3
 8007e68:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	4013      	ands	r3, r2
 8007e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f003 0203 	and.w	r2, r3, #3
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	fa02 f303 	lsl.w	r3, r2, r3
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 80c0 	beq.w	800801e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	4b66      	ldr	r3, [pc, #408]	; (800803c <HAL_GPIO_Init+0x324>)
 8007ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea6:	4a65      	ldr	r2, [pc, #404]	; (800803c <HAL_GPIO_Init+0x324>)
 8007ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eac:	6453      	str	r3, [r2, #68]	; 0x44
 8007eae:	4b63      	ldr	r3, [pc, #396]	; (800803c <HAL_GPIO_Init+0x324>)
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007eba:	4a61      	ldr	r2, [pc, #388]	; (8008040 <HAL_GPIO_Init+0x328>)
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	089b      	lsrs	r3, r3, #2
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	220f      	movs	r2, #15
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	43db      	mvns	r3, r3
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	4013      	ands	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a58      	ldr	r2, [pc, #352]	; (8008044 <HAL_GPIO_Init+0x32c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d037      	beq.n	8007f56 <HAL_GPIO_Init+0x23e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a57      	ldr	r2, [pc, #348]	; (8008048 <HAL_GPIO_Init+0x330>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d031      	beq.n	8007f52 <HAL_GPIO_Init+0x23a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a56      	ldr	r2, [pc, #344]	; (800804c <HAL_GPIO_Init+0x334>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d02b      	beq.n	8007f4e <HAL_GPIO_Init+0x236>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a55      	ldr	r2, [pc, #340]	; (8008050 <HAL_GPIO_Init+0x338>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d025      	beq.n	8007f4a <HAL_GPIO_Init+0x232>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a54      	ldr	r2, [pc, #336]	; (8008054 <HAL_GPIO_Init+0x33c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d01f      	beq.n	8007f46 <HAL_GPIO_Init+0x22e>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a53      	ldr	r2, [pc, #332]	; (8008058 <HAL_GPIO_Init+0x340>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d019      	beq.n	8007f42 <HAL_GPIO_Init+0x22a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a52      	ldr	r2, [pc, #328]	; (800805c <HAL_GPIO_Init+0x344>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d013      	beq.n	8007f3e <HAL_GPIO_Init+0x226>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a51      	ldr	r2, [pc, #324]	; (8008060 <HAL_GPIO_Init+0x348>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00d      	beq.n	8007f3a <HAL_GPIO_Init+0x222>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a50      	ldr	r2, [pc, #320]	; (8008064 <HAL_GPIO_Init+0x34c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d007      	beq.n	8007f36 <HAL_GPIO_Init+0x21e>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a4f      	ldr	r2, [pc, #316]	; (8008068 <HAL_GPIO_Init+0x350>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d101      	bne.n	8007f32 <HAL_GPIO_Init+0x21a>
 8007f2e:	2309      	movs	r3, #9
 8007f30:	e012      	b.n	8007f58 <HAL_GPIO_Init+0x240>
 8007f32:	230a      	movs	r3, #10
 8007f34:	e010      	b.n	8007f58 <HAL_GPIO_Init+0x240>
 8007f36:	2308      	movs	r3, #8
 8007f38:	e00e      	b.n	8007f58 <HAL_GPIO_Init+0x240>
 8007f3a:	2307      	movs	r3, #7
 8007f3c:	e00c      	b.n	8007f58 <HAL_GPIO_Init+0x240>
 8007f3e:	2306      	movs	r3, #6
 8007f40:	e00a      	b.n	8007f58 <HAL_GPIO_Init+0x240>
 8007f42:	2305      	movs	r3, #5
 8007f44:	e008      	b.n	8007f58 <HAL_GPIO_Init+0x240>
 8007f46:	2304      	movs	r3, #4
 8007f48:	e006      	b.n	8007f58 <HAL_GPIO_Init+0x240>
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e004      	b.n	8007f58 <HAL_GPIO_Init+0x240>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e002      	b.n	8007f58 <HAL_GPIO_Init+0x240>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <HAL_GPIO_Init+0x240>
 8007f56:	2300      	movs	r3, #0
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	f002 0203 	and.w	r2, r2, #3
 8007f5e:	0092      	lsls	r2, r2, #2
 8007f60:	4093      	lsls	r3, r2
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f68:	4935      	ldr	r1, [pc, #212]	; (8008040 <HAL_GPIO_Init+0x328>)
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	089b      	lsrs	r3, r3, #2
 8007f6e:	3302      	adds	r3, #2
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f76:	4b3d      	ldr	r3, [pc, #244]	; (800806c <HAL_GPIO_Init+0x354>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	43db      	mvns	r3, r3
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	4013      	ands	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f9a:	4a34      	ldr	r2, [pc, #208]	; (800806c <HAL_GPIO_Init+0x354>)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007fa0:	4b32      	ldr	r3, [pc, #200]	; (800806c <HAL_GPIO_Init+0x354>)
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	4013      	ands	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007fc4:	4a29      	ldr	r2, [pc, #164]	; (800806c <HAL_GPIO_Init+0x354>)
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007fca:	4b28      	ldr	r3, [pc, #160]	; (800806c <HAL_GPIO_Init+0x354>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007fee:	4a1f      	ldr	r2, [pc, #124]	; (800806c <HAL_GPIO_Init+0x354>)
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ff4:	4b1d      	ldr	r3, [pc, #116]	; (800806c <HAL_GPIO_Init+0x354>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	4013      	ands	r3, r2
 8008002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008018:	4a14      	ldr	r2, [pc, #80]	; (800806c <HAL_GPIO_Init+0x354>)
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	3301      	adds	r3, #1
 8008022:	61fb      	str	r3, [r7, #28]
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b0f      	cmp	r3, #15
 8008028:	f67f ae84 	bls.w	8007d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	3724      	adds	r7, #36	; 0x24
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	40023800 	.word	0x40023800
 8008040:	40013800 	.word	0x40013800
 8008044:	40020000 	.word	0x40020000
 8008048:	40020400 	.word	0x40020400
 800804c:	40020800 	.word	0x40020800
 8008050:	40020c00 	.word	0x40020c00
 8008054:	40021000 	.word	0x40021000
 8008058:	40021400 	.word	0x40021400
 800805c:	40021800 	.word	0x40021800
 8008060:	40021c00 	.word	0x40021c00
 8008064:	40022000 	.word	0x40022000
 8008068:	40022400 	.word	0x40022400
 800806c:	40013c00 	.word	0x40013c00

08008070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691a      	ldr	r2, [r3, #16]
 8008080:	887b      	ldrh	r3, [r7, #2]
 8008082:	4013      	ands	r3, r2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008088:	2301      	movs	r3, #1
 800808a:	73fb      	strb	r3, [r7, #15]
 800808c:	e001      	b.n	8008092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	807b      	strh	r3, [r7, #2]
 80080ac:	4613      	mov	r3, r2
 80080ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080b0:	787b      	ldrb	r3, [r7, #1]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080b6:	887a      	ldrh	r2, [r7, #2]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80080bc:	e003      	b.n	80080c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80080be:	887b      	ldrh	r3, [r7, #2]
 80080c0:	041a      	lsls	r2, r3, #16
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	619a      	str	r2, [r3, #24]
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
	...

080080d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080e0:	695a      	ldr	r2, [r3, #20]
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	4013      	ands	r3, r2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d006      	beq.n	80080f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080ea:	4a05      	ldr	r2, [pc, #20]	; (8008100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fb fc06 	bl	8003904 <HAL_GPIO_EXTI_Callback>
  }
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40013c00 	.word	0x40013c00

08008104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e12b      	b.n	800836e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fa fcfe 	bl	8002b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2224      	movs	r2, #36	; 0x24
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0201 	bic.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008168:	f001 fd66 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800816c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	4a81      	ldr	r2, [pc, #516]	; (8008378 <HAL_I2C_Init+0x274>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d807      	bhi.n	8008188 <HAL_I2C_Init+0x84>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4a80      	ldr	r2, [pc, #512]	; (800837c <HAL_I2C_Init+0x278>)
 800817c:	4293      	cmp	r3, r2
 800817e:	bf94      	ite	ls
 8008180:	2301      	movls	r3, #1
 8008182:	2300      	movhi	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	e006      	b.n	8008196 <HAL_I2C_Init+0x92>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4a7d      	ldr	r2, [pc, #500]	; (8008380 <HAL_I2C_Init+0x27c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	bf94      	ite	ls
 8008190:	2301      	movls	r3, #1
 8008192:	2300      	movhi	r3, #0
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e0e7      	b.n	800836e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4a78      	ldr	r2, [pc, #480]	; (8008384 <HAL_I2C_Init+0x280>)
 80081a2:	fba2 2303 	umull	r2, r3, r2, r3
 80081a6:	0c9b      	lsrs	r3, r3, #18
 80081a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4a6a      	ldr	r2, [pc, #424]	; (8008378 <HAL_I2C_Init+0x274>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d802      	bhi.n	80081d8 <HAL_I2C_Init+0xd4>
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	3301      	adds	r3, #1
 80081d6:	e009      	b.n	80081ec <HAL_I2C_Init+0xe8>
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80081de:	fb02 f303 	mul.w	r3, r2, r3
 80081e2:	4a69      	ldr	r2, [pc, #420]	; (8008388 <HAL_I2C_Init+0x284>)
 80081e4:	fba2 2303 	umull	r2, r3, r2, r3
 80081e8:	099b      	lsrs	r3, r3, #6
 80081ea:	3301      	adds	r3, #1
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6812      	ldr	r2, [r2, #0]
 80081f0:	430b      	orrs	r3, r1
 80081f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80081fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	495c      	ldr	r1, [pc, #368]	; (8008378 <HAL_I2C_Init+0x274>)
 8008208:	428b      	cmp	r3, r1
 800820a:	d819      	bhi.n	8008240 <HAL_I2C_Init+0x13c>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	1e59      	subs	r1, r3, #1
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	fbb1 f3f3 	udiv	r3, r1, r3
 800821a:	1c59      	adds	r1, r3, #1
 800821c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008220:	400b      	ands	r3, r1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <HAL_I2C_Init+0x138>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	1e59      	subs	r1, r3, #1
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	fbb1 f3f3 	udiv	r3, r1, r3
 8008234:	3301      	adds	r3, #1
 8008236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800823a:	e051      	b.n	80082e0 <HAL_I2C_Init+0x1dc>
 800823c:	2304      	movs	r3, #4
 800823e:	e04f      	b.n	80082e0 <HAL_I2C_Init+0x1dc>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d111      	bne.n	800826c <HAL_I2C_Init+0x168>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	1e58      	subs	r0, r3, #1
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6859      	ldr	r1, [r3, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	440b      	add	r3, r1
 8008256:	fbb0 f3f3 	udiv	r3, r0, r3
 800825a:	3301      	adds	r3, #1
 800825c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008260:	2b00      	cmp	r3, #0
 8008262:	bf0c      	ite	eq
 8008264:	2301      	moveq	r3, #1
 8008266:	2300      	movne	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	e012      	b.n	8008292 <HAL_I2C_Init+0x18e>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	1e58      	subs	r0, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6859      	ldr	r1, [r3, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	0099      	lsls	r1, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008282:	3301      	adds	r3, #1
 8008284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008288:	2b00      	cmp	r3, #0
 800828a:	bf0c      	ite	eq
 800828c:	2301      	moveq	r3, #1
 800828e:	2300      	movne	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_I2C_Init+0x196>
 8008296:	2301      	movs	r3, #1
 8008298:	e022      	b.n	80082e0 <HAL_I2C_Init+0x1dc>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10e      	bne.n	80082c0 <HAL_I2C_Init+0x1bc>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1e58      	subs	r0, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6859      	ldr	r1, [r3, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	440b      	add	r3, r1
 80082b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80082b4:	3301      	adds	r3, #1
 80082b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082be:	e00f      	b.n	80082e0 <HAL_I2C_Init+0x1dc>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	1e58      	subs	r0, r3, #1
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6859      	ldr	r1, [r3, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	0099      	lsls	r1, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80082d6:	3301      	adds	r3, #1
 80082d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	6809      	ldr	r1, [r1, #0]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	69da      	ldr	r2, [r3, #28]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800830e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	6911      	ldr	r1, [r2, #16]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	68d2      	ldr	r2, [r2, #12]
 800831a:	4311      	orrs	r1, r2
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6812      	ldr	r2, [r2, #0]
 8008320:	430b      	orrs	r3, r1
 8008322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695a      	ldr	r2, [r3, #20]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	431a      	orrs	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0201 	orr.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	000186a0 	.word	0x000186a0
 800837c:	001e847f 	.word	0x001e847f
 8008380:	003d08ff 	.word	0x003d08ff
 8008384:	431bde83 	.word	0x431bde83
 8008388:	10624dd3 	.word	0x10624dd3

0800838c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af02      	add	r7, sp, #8
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	4608      	mov	r0, r1
 8008396:	4611      	mov	r1, r2
 8008398:	461a      	mov	r2, r3
 800839a:	4603      	mov	r3, r0
 800839c:	817b      	strh	r3, [r7, #10]
 800839e:	460b      	mov	r3, r1
 80083a0:	813b      	strh	r3, [r7, #8]
 80083a2:	4613      	mov	r3, r2
 80083a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80083a6:	f7fe ff63 	bl	8007270 <HAL_GetTick>
 80083aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	f040 80d9 	bne.w	800856c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	2319      	movs	r3, #25
 80083c0:	2201      	movs	r2, #1
 80083c2:	496d      	ldr	r1, [pc, #436]	; (8008578 <HAL_I2C_Mem_Write+0x1ec>)
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fcb5 	bl	8008d34 <I2C_WaitOnFlagUntilTimeout>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80083d0:	2302      	movs	r3, #2
 80083d2:	e0cc      	b.n	800856e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_I2C_Mem_Write+0x56>
 80083de:	2302      	movs	r3, #2
 80083e0:	e0c5      	b.n	800856e <HAL_I2C_Mem_Write+0x1e2>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d007      	beq.n	8008408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2221      	movs	r2, #33	; 0x21
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2240      	movs	r2, #64	; 0x40
 8008424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a3a      	ldr	r2, [r7, #32]
 8008432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843e:	b29a      	uxth	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4a4d      	ldr	r2, [pc, #308]	; (800857c <HAL_I2C_Mem_Write+0x1f0>)
 8008448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800844a:	88f8      	ldrh	r0, [r7, #6]
 800844c:	893a      	ldrh	r2, [r7, #8]
 800844e:	8979      	ldrh	r1, [r7, #10]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	4603      	mov	r3, r0
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 faec 	bl	8008a38 <I2C_RequestMemoryWrite>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d052      	beq.n	800850c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e081      	b.n	800856e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 fd36 	bl	8008ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00d      	beq.n	8008496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	2b04      	cmp	r3, #4
 8008480:	d107      	bne.n	8008492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e06b      	b.n	800856e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	781a      	ldrb	r2, [r3, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084bc:	b29b      	uxth	r3, r3
 80084be:	3b01      	subs	r3, #1
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	d11b      	bne.n	800850c <HAL_I2C_Mem_Write+0x180>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d017      	beq.n	800850c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	781a      	ldrb	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f6:	3b01      	subs	r3, #1
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008502:	b29b      	uxth	r3, r3
 8008504:	3b01      	subs	r3, #1
 8008506:	b29a      	uxth	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1aa      	bne.n	800846a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 fd22 	bl	8008f62 <I2C_WaitOnBTFFlagUntilTimeout>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00d      	beq.n	8008540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	2b04      	cmp	r3, #4
 800852a:	d107      	bne.n	800853c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800853a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e016      	b.n	800856e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800854e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	e000      	b.n	800856e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800856c:	2302      	movs	r3, #2
  }
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	00100002 	.word	0x00100002
 800857c:	ffff0000 	.word	0xffff0000

08008580 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08c      	sub	sp, #48	; 0x30
 8008584:	af02      	add	r7, sp, #8
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	4608      	mov	r0, r1
 800858a:	4611      	mov	r1, r2
 800858c:	461a      	mov	r2, r3
 800858e:	4603      	mov	r3, r0
 8008590:	817b      	strh	r3, [r7, #10]
 8008592:	460b      	mov	r3, r1
 8008594:	813b      	strh	r3, [r7, #8]
 8008596:	4613      	mov	r3, r2
 8008598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800859a:	f7fe fe69 	bl	8007270 <HAL_GetTick>
 800859e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	f040 8208 	bne.w	80089be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	2319      	movs	r3, #25
 80085b4:	2201      	movs	r2, #1
 80085b6:	497b      	ldr	r1, [pc, #492]	; (80087a4 <HAL_I2C_Mem_Read+0x224>)
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 fbbb 	bl	8008d34 <I2C_WaitOnFlagUntilTimeout>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80085c4:	2302      	movs	r3, #2
 80085c6:	e1fb      	b.n	80089c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d101      	bne.n	80085d6 <HAL_I2C_Mem_Read+0x56>
 80085d2:	2302      	movs	r3, #2
 80085d4:	e1f4      	b.n	80089c0 <HAL_I2C_Mem_Read+0x440>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d007      	beq.n	80085fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0201 	orr.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800860a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2222      	movs	r2, #34	; 0x22
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2240      	movs	r2, #64	; 0x40
 8008618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800862c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008632:	b29a      	uxth	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4a5b      	ldr	r2, [pc, #364]	; (80087a8 <HAL_I2C_Mem_Read+0x228>)
 800863c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800863e:	88f8      	ldrh	r0, [r7, #6]
 8008640:	893a      	ldrh	r2, [r7, #8]
 8008642:	8979      	ldrh	r1, [r7, #10]
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	4603      	mov	r3, r0
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 fa88 	bl	8008b64 <I2C_RequestMemoryRead>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e1b0      	b.n	80089c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008662:	2b00      	cmp	r3, #0
 8008664:	d113      	bne.n	800868e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008666:	2300      	movs	r3, #0
 8008668:	623b      	str	r3, [r7, #32]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	623b      	str	r3, [r7, #32]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	623b      	str	r3, [r7, #32]
 800867a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	e184      	b.n	8008998 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008692:	2b01      	cmp	r3, #1
 8008694:	d11b      	bne.n	80086ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a6:	2300      	movs	r3, #0
 80086a8:	61fb      	str	r3, [r7, #28]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	61fb      	str	r3, [r7, #28]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	e164      	b.n	8008998 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d11b      	bne.n	800870e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086f6:	2300      	movs	r3, #0
 80086f8:	61bb      	str	r3, [r7, #24]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	e144      	b.n	8008998 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800870e:	2300      	movs	r3, #0
 8008710:	617b      	str	r3, [r7, #20]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	617b      	str	r3, [r7, #20]
 8008722:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008724:	e138      	b.n	8008998 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800872a:	2b03      	cmp	r3, #3
 800872c:	f200 80f1 	bhi.w	8008912 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008734:	2b01      	cmp	r3, #1
 8008736:	d123      	bne.n	8008780 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 fc51 	bl	8008fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e139      	b.n	80089c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	691a      	ldr	r2, [r3, #16]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	b2d2      	uxtb	r2, r2
 8008758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008768:	3b01      	subs	r3, #1
 800876a:	b29a      	uxth	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008774:	b29b      	uxth	r3, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800877e:	e10b      	b.n	8008998 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008784:	2b02      	cmp	r3, #2
 8008786:	d14e      	bne.n	8008826 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	2200      	movs	r2, #0
 8008790:	4906      	ldr	r1, [pc, #24]	; (80087ac <HAL_I2C_Mem_Read+0x22c>)
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 face 	bl	8008d34 <I2C_WaitOnFlagUntilTimeout>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d008      	beq.n	80087b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e10e      	b.n	80089c0 <HAL_I2C_Mem_Read+0x440>
 80087a2:	bf00      	nop
 80087a4:	00100002 	.word	0x00100002
 80087a8:	ffff0000 	.word	0xffff0000
 80087ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	691a      	ldr	r2, [r3, #16]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087dc:	3b01      	subs	r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	691a      	ldr	r2, [r3, #16]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	b2d2      	uxtb	r2, r2
 80087fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800880e:	3b01      	subs	r3, #1
 8008810:	b29a      	uxth	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800881a:	b29b      	uxth	r3, r3
 800881c:	3b01      	subs	r3, #1
 800881e:	b29a      	uxth	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008824:	e0b8      	b.n	8008998 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	2200      	movs	r2, #0
 800882e:	4966      	ldr	r1, [pc, #408]	; (80089c8 <HAL_I2C_Mem_Read+0x448>)
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 fa7f 	bl	8008d34 <I2C_WaitOnFlagUntilTimeout>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e0bf      	b.n	80089c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800884e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	691a      	ldr	r2, [r3, #16]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	b2d2      	uxtb	r2, r2
 800885c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	2200      	movs	r2, #0
 800888a:	494f      	ldr	r1, [pc, #316]	; (80089c8 <HAL_I2C_Mem_Read+0x448>)
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fa51 	bl	8008d34 <I2C_WaitOnFlagUntilTimeout>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e091      	b.n	80089c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691a      	ldr	r2, [r3, #16]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	b2d2      	uxtb	r2, r2
 80088b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	3b01      	subs	r3, #1
 80088d8:	b29a      	uxth	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691a      	ldr	r2, [r3, #16]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	b2d2      	uxtb	r2, r2
 80088ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	1c5a      	adds	r2, r3, #1
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088fa:	3b01      	subs	r3, #1
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008906:	b29b      	uxth	r3, r3
 8008908:	3b01      	subs	r3, #1
 800890a:	b29a      	uxth	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008910:	e042      	b.n	8008998 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008914:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 fb64 	bl	8008fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e04c      	b.n	80089c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	b2d2      	uxtb	r2, r2
 8008932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008942:	3b01      	subs	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800894e:	b29b      	uxth	r3, r3
 8008950:	3b01      	subs	r3, #1
 8008952:	b29a      	uxth	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	f003 0304 	and.w	r3, r3, #4
 8008962:	2b04      	cmp	r3, #4
 8008964:	d118      	bne.n	8008998 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898e:	b29b      	uxth	r3, r3
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800899c:	2b00      	cmp	r3, #0
 800899e:	f47f aec2 	bne.w	8008726 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	e000      	b.n	80089c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80089be:	2302      	movs	r3, #2
  }
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3728      	adds	r7, #40	; 0x28
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	00010004 	.word	0x00010004

080089cc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b20      	cmp	r3, #32
 80089de:	d124      	bne.n	8008a2a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2228      	movs	r2, #40	; 0x28
 80089e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d007      	beq.n	8008a06 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f042 0201 	orr.w	r2, r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a14:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008a24:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	e000      	b.n	8008a2c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008a2a:	2302      	movs	r3, #2
  }
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	4608      	mov	r0, r1
 8008a42:	4611      	mov	r1, r2
 8008a44:	461a      	mov	r2, r3
 8008a46:	4603      	mov	r3, r0
 8008a48:	817b      	strh	r3, [r7, #10]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	813b      	strh	r3, [r7, #8]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 f960 	bl	8008d34 <I2C_WaitOnFlagUntilTimeout>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00d      	beq.n	8008a96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a88:	d103      	bne.n	8008a92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e05f      	b.n	8008b56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a96:	897b      	ldrh	r3, [r7, #10]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	6a3a      	ldr	r2, [r7, #32]
 8008aaa:	492d      	ldr	r1, [pc, #180]	; (8008b60 <I2C_RequestMemoryWrite+0x128>)
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 f998 	bl	8008de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e04c      	b.n	8008b56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad4:	6a39      	ldr	r1, [r7, #32]
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fa02 	bl	8008ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00d      	beq.n	8008afe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d107      	bne.n	8008afa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e02b      	b.n	8008b56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008afe:	88fb      	ldrh	r3, [r7, #6]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d105      	bne.n	8008b10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b04:	893b      	ldrh	r3, [r7, #8]
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	611a      	str	r2, [r3, #16]
 8008b0e:	e021      	b.n	8008b54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b10:	893b      	ldrh	r3, [r7, #8]
 8008b12:	0a1b      	lsrs	r3, r3, #8
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b20:	6a39      	ldr	r1, [r7, #32]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f9dc 	bl	8008ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00d      	beq.n	8008b4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d107      	bne.n	8008b46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e005      	b.n	8008b56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b4a:	893b      	ldrh	r3, [r7, #8]
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	00010002 	.word	0x00010002

08008b64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af02      	add	r7, sp, #8
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	4611      	mov	r1, r2
 8008b70:	461a      	mov	r2, r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	817b      	strh	r3, [r7, #10]
 8008b76:	460b      	mov	r3, r1
 8008b78:	813b      	strh	r3, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f8c2 	bl	8008d34 <I2C_WaitOnFlagUntilTimeout>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00d      	beq.n	8008bd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc4:	d103      	bne.n	8008bce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e0aa      	b.n	8008d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008bd2:	897b      	ldrh	r3, [r7, #10]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008be0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	6a3a      	ldr	r2, [r7, #32]
 8008be6:	4952      	ldr	r1, [pc, #328]	; (8008d30 <I2C_RequestMemoryRead+0x1cc>)
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f8fa 	bl	8008de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e097      	b.n	8008d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c10:	6a39      	ldr	r1, [r7, #32]
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 f964 	bl	8008ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00d      	beq.n	8008c3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d107      	bne.n	8008c36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e076      	b.n	8008d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d105      	bne.n	8008c4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c40:	893b      	ldrh	r3, [r7, #8]
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	611a      	str	r2, [r3, #16]
 8008c4a:	e021      	b.n	8008c90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c4c:	893b      	ldrh	r3, [r7, #8]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c5c:	6a39      	ldr	r1, [r7, #32]
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 f93e 	bl	8008ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00d      	beq.n	8008c86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d107      	bne.n	8008c82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e050      	b.n	8008d28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c86:	893b      	ldrh	r3, [r7, #8]
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c92:	6a39      	ldr	r1, [r7, #32]
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 f923 	bl	8008ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00d      	beq.n	8008cbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	2b04      	cmp	r3, #4
 8008ca6:	d107      	bne.n	8008cb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e035      	b.n	8008d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 f82b 	bl	8008d34 <I2C_WaitOnFlagUntilTimeout>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00d      	beq.n	8008d00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cf2:	d103      	bne.n	8008cfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e013      	b.n	8008d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008d00:	897b      	ldrh	r3, [r7, #10]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	6a3a      	ldr	r2, [r7, #32]
 8008d14:	4906      	ldr	r1, [pc, #24]	; (8008d30 <I2C_RequestMemoryRead+0x1cc>)
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f863 	bl	8008de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e000      	b.n	8008d28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	00010002 	.word	0x00010002

08008d34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	4613      	mov	r3, r2
 8008d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d44:	e025      	b.n	8008d92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d021      	beq.n	8008d92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d4e:	f7fe fa8f 	bl	8007270 <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d302      	bcc.n	8008d64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d116      	bne.n	8008d92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	f043 0220 	orr.w	r2, r3, #32
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e023      	b.n	8008dda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	0c1b      	lsrs	r3, r3, #16
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d10d      	bne.n	8008db8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	43da      	mvns	r2, r3
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4013      	ands	r3, r2
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	bf0c      	ite	eq
 8008dae:	2301      	moveq	r3, #1
 8008db0:	2300      	movne	r3, #0
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	461a      	mov	r2, r3
 8008db6:	e00c      	b.n	8008dd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	43da      	mvns	r2, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bf0c      	ite	eq
 8008dca:	2301      	moveq	r3, #1
 8008dcc:	2300      	movne	r3, #0
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d0b6      	beq.n	8008d46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	607a      	str	r2, [r7, #4]
 8008dee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008df0:	e051      	b.n	8008e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e00:	d123      	bne.n	8008e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	f043 0204 	orr.w	r2, r3, #4
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e046      	b.n	8008ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e50:	d021      	beq.n	8008e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e52:	f7fe fa0d 	bl	8007270 <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d302      	bcc.n	8008e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d116      	bne.n	8008e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	f043 0220 	orr.w	r2, r3, #32
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e020      	b.n	8008ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	0c1b      	lsrs	r3, r3, #16
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d10c      	bne.n	8008eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	43da      	mvns	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bf14      	ite	ne
 8008eb2:	2301      	movne	r3, #1
 8008eb4:	2300      	moveq	r3, #0
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	e00b      	b.n	8008ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	43da      	mvns	r2, r3
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	bf14      	ite	ne
 8008ecc:	2301      	movne	r3, #1
 8008ece:	2300      	moveq	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d18d      	bne.n	8008df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008eec:	e02d      	b.n	8008f4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 f8ce 	bl	8009090 <I2C_IsAcknowledgeFailed>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e02d      	b.n	8008f5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f04:	d021      	beq.n	8008f4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f06:	f7fe f9b3 	bl	8007270 <HAL_GetTick>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d302      	bcc.n	8008f1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d116      	bne.n	8008f4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	f043 0220 	orr.w	r2, r3, #32
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e007      	b.n	8008f5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f54:	2b80      	cmp	r3, #128	; 0x80
 8008f56:	d1ca      	bne.n	8008eee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f6e:	e02d      	b.n	8008fcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f88d 	bl	8009090 <I2C_IsAcknowledgeFailed>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e02d      	b.n	8008fdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f86:	d021      	beq.n	8008fcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f88:	f7fe f972 	bl	8007270 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d302      	bcc.n	8008f9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d116      	bne.n	8008fcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb8:	f043 0220 	orr.w	r2, r3, #32
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e007      	b.n	8008fdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d1ca      	bne.n	8008f70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ff0:	e042      	b.n	8009078 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b10      	cmp	r3, #16
 8008ffe:	d119      	bne.n	8009034 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f06f 0210 	mvn.w	r2, #16
 8009008:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2220      	movs	r2, #32
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e029      	b.n	8009088 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009034:	f7fe f91c 	bl	8007270 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	429a      	cmp	r2, r3
 8009042:	d302      	bcc.n	800904a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d116      	bne.n	8009078 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009064:	f043 0220 	orr.w	r2, r3, #32
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e007      	b.n	8009088 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009082:	2b40      	cmp	r3, #64	; 0x40
 8009084:	d1b5      	bne.n	8008ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090a6:	d11b      	bne.n	80090e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80090b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2220      	movs	r2, #32
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	f043 0204 	orr.w	r2, r3, #4
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e000      	b.n	80090e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b083      	sub	sp, #12
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b20      	cmp	r3, #32
 8009102:	d129      	bne.n	8009158 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2224      	movs	r2, #36	; 0x24
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f022 0201 	bic.w	r2, r2, #1
 800911a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0210 	bic.w	r2, r2, #16
 800912a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0201 	orr.w	r2, r2, #1
 800914a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2220      	movs	r2, #32
 8009150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	e000      	b.n	800915a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009158:	2302      	movs	r3, #2
  }
}
 800915a:	4618      	mov	r0, r3
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009166:	b480      	push	{r7}
 8009168:	b085      	sub	sp, #20
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b20      	cmp	r3, #32
 800917e:	d12a      	bne.n	80091d6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2224      	movs	r2, #36	; 0x24
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 0201 	bic.w	r2, r2, #1
 8009196:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80091a0:	89fb      	ldrh	r3, [r7, #14]
 80091a2:	f023 030f 	bic.w	r3, r3, #15
 80091a6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	89fb      	ldrh	r3, [r7, #14]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	89fa      	ldrh	r2, [r7, #14]
 80091b8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f042 0201 	orr.w	r2, r2, #1
 80091c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2220      	movs	r2, #32
 80091ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	e000      	b.n	80091d8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80091d6:	2302      	movs	r3, #2
  }
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e034      	b.n	8009260 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80091fe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f245 5255 	movw	r2, #21845	; 0x5555
 8009208:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6852      	ldr	r2, [r2, #4]
 8009212:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6892      	ldr	r2, [r2, #8]
 800921c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800921e:	f7fe f827 	bl	8007270 <HAL_GetTick>
 8009222:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009224:	e00f      	b.n	8009246 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009226:	f7fe f823 	bl	8007270 <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	2b31      	cmp	r3, #49	; 0x31
 8009232:	d908      	bls.n	8009246 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f003 0303 	and.w	r3, r3, #3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e00c      	b.n	8009260 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	f003 0303 	and.w	r3, r3, #3
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e8      	bne.n	8009226 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800925c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009278:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8009290:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	4904      	ldr	r1, [pc, #16]	; (80092a8 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4313      	orrs	r3, r2
 800929a:	604b      	str	r3, [r1, #4]
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	40007000 	.word	0x40007000

080092ac <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80092b4:	4b06      	ldr	r3, [pc, #24]	; (80092d0 <HAL_PWR_DisableWakeUpPin+0x24>)
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	43db      	mvns	r3, r3
 80092bc:	4904      	ldr	r1, [pc, #16]	; (80092d0 <HAL_PWR_DisableWakeUpPin+0x24>)
 80092be:	4013      	ands	r3, r2
 80092c0:	604b      	str	r3, [r1, #4]
}
 80092c2:	bf00      	nop
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40007000 	.word	0x40007000

080092d4 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80092d8:	4b08      	ldr	r3, [pc, #32]	; (80092fc <HAL_PWR_EnterSTANDBYMode+0x28>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a07      	ldr	r2, [pc, #28]	; (80092fc <HAL_PWR_EnterSTANDBYMode+0x28>)
 80092de:	f043 0302 	orr.w	r3, r3, #2
 80092e2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80092e4:	4b06      	ldr	r3, [pc, #24]	; (8009300 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	4a05      	ldr	r2, [pc, #20]	; (8009300 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80092ea:	f043 0304 	orr.w	r3, r3, #4
 80092ee:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80092f0:	bf30      	wfi
}
 80092f2:	bf00      	nop
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	40007000 	.word	0x40007000
 8009300:	e000ed00 	.word	0xe000ed00

08009304 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800930a:	2300      	movs	r3, #0
 800930c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800930e:	2300      	movs	r3, #0
 8009310:	603b      	str	r3, [r7, #0]
 8009312:	4b20      	ldr	r3, [pc, #128]	; (8009394 <HAL_PWREx_EnableOverDrive+0x90>)
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	4a1f      	ldr	r2, [pc, #124]	; (8009394 <HAL_PWREx_EnableOverDrive+0x90>)
 8009318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800931c:	6413      	str	r3, [r2, #64]	; 0x40
 800931e:	4b1d      	ldr	r3, [pc, #116]	; (8009394 <HAL_PWREx_EnableOverDrive+0x90>)
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800932a:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <HAL_PWREx_EnableOverDrive+0x94>)
 800932c:	2201      	movs	r2, #1
 800932e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009330:	f7fd ff9e 	bl	8007270 <HAL_GetTick>
 8009334:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009336:	e009      	b.n	800934c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009338:	f7fd ff9a 	bl	8007270 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009346:	d901      	bls.n	800934c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e01f      	b.n	800938c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800934c:	4b13      	ldr	r3, [pc, #76]	; (800939c <HAL_PWREx_EnableOverDrive+0x98>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009358:	d1ee      	bne.n	8009338 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800935a:	4b11      	ldr	r3, [pc, #68]	; (80093a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800935c:	2201      	movs	r2, #1
 800935e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009360:	f7fd ff86 	bl	8007270 <HAL_GetTick>
 8009364:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009366:	e009      	b.n	800937c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009368:	f7fd ff82 	bl	8007270 <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009376:	d901      	bls.n	800937c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e007      	b.n	800938c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800937c:	4b07      	ldr	r3, [pc, #28]	; (800939c <HAL_PWREx_EnableOverDrive+0x98>)
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009388:	d1ee      	bne.n	8009368 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	40023800 	.word	0x40023800
 8009398:	420e0040 	.word	0x420e0040
 800939c:	40007000 	.word	0x40007000
 80093a0:	420e0044 	.word	0x420e0044

080093a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e264      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d075      	beq.n	80094ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80093c2:	4ba3      	ldr	r3, [pc, #652]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f003 030c 	and.w	r3, r3, #12
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d00c      	beq.n	80093e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093ce:	4ba0      	ldr	r3, [pc, #640]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80093d6:	2b08      	cmp	r3, #8
 80093d8:	d112      	bne.n	8009400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093da:	4b9d      	ldr	r3, [pc, #628]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093e6:	d10b      	bne.n	8009400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093e8:	4b99      	ldr	r3, [pc, #612]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d05b      	beq.n	80094ac <HAL_RCC_OscConfig+0x108>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d157      	bne.n	80094ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e23f      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009408:	d106      	bne.n	8009418 <HAL_RCC_OscConfig+0x74>
 800940a:	4b91      	ldr	r3, [pc, #580]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a90      	ldr	r2, [pc, #576]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	e01d      	b.n	8009454 <HAL_RCC_OscConfig+0xb0>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009420:	d10c      	bne.n	800943c <HAL_RCC_OscConfig+0x98>
 8009422:	4b8b      	ldr	r3, [pc, #556]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a8a      	ldr	r2, [pc, #552]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	4b88      	ldr	r3, [pc, #544]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a87      	ldr	r2, [pc, #540]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	e00b      	b.n	8009454 <HAL_RCC_OscConfig+0xb0>
 800943c:	4b84      	ldr	r3, [pc, #528]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a83      	ldr	r2, [pc, #524]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	4b81      	ldr	r3, [pc, #516]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a80      	ldr	r2, [pc, #512]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 800944e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d013      	beq.n	8009484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800945c:	f7fd ff08 	bl	8007270 <HAL_GetTick>
 8009460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009462:	e008      	b.n	8009476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009464:	f7fd ff04 	bl	8007270 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	2b64      	cmp	r3, #100	; 0x64
 8009470:	d901      	bls.n	8009476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e204      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009476:	4b76      	ldr	r3, [pc, #472]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d0f0      	beq.n	8009464 <HAL_RCC_OscConfig+0xc0>
 8009482:	e014      	b.n	80094ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009484:	f7fd fef4 	bl	8007270 <HAL_GetTick>
 8009488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800948a:	e008      	b.n	800949e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800948c:	f7fd fef0 	bl	8007270 <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	2b64      	cmp	r3, #100	; 0x64
 8009498:	d901      	bls.n	800949e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e1f0      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800949e:	4b6c      	ldr	r3, [pc, #432]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1f0      	bne.n	800948c <HAL_RCC_OscConfig+0xe8>
 80094aa:	e000      	b.n	80094ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d063      	beq.n	8009582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80094ba:	4b65      	ldr	r3, [pc, #404]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f003 030c 	and.w	r3, r3, #12
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80094c6:	4b62      	ldr	r3, [pc, #392]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80094ce:	2b08      	cmp	r3, #8
 80094d0:	d11c      	bne.n	800950c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80094d2:	4b5f      	ldr	r3, [pc, #380]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d116      	bne.n	800950c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094de:	4b5c      	ldr	r3, [pc, #368]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <HAL_RCC_OscConfig+0x152>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d001      	beq.n	80094f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e1c4      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094f6:	4b56      	ldr	r3, [pc, #344]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	00db      	lsls	r3, r3, #3
 8009504:	4952      	ldr	r1, [pc, #328]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009506:	4313      	orrs	r3, r2
 8009508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800950a:	e03a      	b.n	8009582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d020      	beq.n	8009556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009514:	4b4f      	ldr	r3, [pc, #316]	; (8009654 <HAL_RCC_OscConfig+0x2b0>)
 8009516:	2201      	movs	r2, #1
 8009518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800951a:	f7fd fea9 	bl	8007270 <HAL_GetTick>
 800951e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009520:	e008      	b.n	8009534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009522:	f7fd fea5 	bl	8007270 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	2b02      	cmp	r3, #2
 800952e:	d901      	bls.n	8009534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e1a5      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009534:	4b46      	ldr	r3, [pc, #280]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0f0      	beq.n	8009522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009540:	4b43      	ldr	r3, [pc, #268]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	4940      	ldr	r1, [pc, #256]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009550:	4313      	orrs	r3, r2
 8009552:	600b      	str	r3, [r1, #0]
 8009554:	e015      	b.n	8009582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009556:	4b3f      	ldr	r3, [pc, #252]	; (8009654 <HAL_RCC_OscConfig+0x2b0>)
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800955c:	f7fd fe88 	bl	8007270 <HAL_GetTick>
 8009560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009562:	e008      	b.n	8009576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009564:	f7fd fe84 	bl	8007270 <HAL_GetTick>
 8009568:	4602      	mov	r2, r0
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	2b02      	cmp	r3, #2
 8009570:	d901      	bls.n	8009576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e184      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009576:	4b36      	ldr	r3, [pc, #216]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0302 	and.w	r3, r3, #2
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1f0      	bne.n	8009564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0308 	and.w	r3, r3, #8
 800958a:	2b00      	cmp	r3, #0
 800958c:	d030      	beq.n	80095f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d016      	beq.n	80095c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009596:	4b30      	ldr	r3, [pc, #192]	; (8009658 <HAL_RCC_OscConfig+0x2b4>)
 8009598:	2201      	movs	r2, #1
 800959a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800959c:	f7fd fe68 	bl	8007270 <HAL_GetTick>
 80095a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095a2:	e008      	b.n	80095b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095a4:	f7fd fe64 	bl	8007270 <HAL_GetTick>
 80095a8:	4602      	mov	r2, r0
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d901      	bls.n	80095b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e164      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095b6:	4b26      	ldr	r3, [pc, #152]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80095b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ba:	f003 0302 	and.w	r3, r3, #2
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0f0      	beq.n	80095a4 <HAL_RCC_OscConfig+0x200>
 80095c2:	e015      	b.n	80095f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095c4:	4b24      	ldr	r3, [pc, #144]	; (8009658 <HAL_RCC_OscConfig+0x2b4>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095ca:	f7fd fe51 	bl	8007270 <HAL_GetTick>
 80095ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095d0:	e008      	b.n	80095e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095d2:	f7fd fe4d 	bl	8007270 <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d901      	bls.n	80095e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e14d      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095e4:	4b1a      	ldr	r3, [pc, #104]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 80095e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1f0      	bne.n	80095d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 80a0 	beq.w	800973e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095fe:	2300      	movs	r3, #0
 8009600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009602:	4b13      	ldr	r3, [pc, #76]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10f      	bne.n	800962e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800960e:	2300      	movs	r3, #0
 8009610:	60bb      	str	r3, [r7, #8]
 8009612:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009616:	4a0e      	ldr	r2, [pc, #56]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800961c:	6413      	str	r3, [r2, #64]	; 0x40
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <HAL_RCC_OscConfig+0x2ac>)
 8009620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009626:	60bb      	str	r3, [r7, #8]
 8009628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800962a:	2301      	movs	r3, #1
 800962c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800962e:	4b0b      	ldr	r3, [pc, #44]	; (800965c <HAL_RCC_OscConfig+0x2b8>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009636:	2b00      	cmp	r3, #0
 8009638:	d121      	bne.n	800967e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800963a:	4b08      	ldr	r3, [pc, #32]	; (800965c <HAL_RCC_OscConfig+0x2b8>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a07      	ldr	r2, [pc, #28]	; (800965c <HAL_RCC_OscConfig+0x2b8>)
 8009640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009646:	f7fd fe13 	bl	8007270 <HAL_GetTick>
 800964a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800964c:	e011      	b.n	8009672 <HAL_RCC_OscConfig+0x2ce>
 800964e:	bf00      	nop
 8009650:	40023800 	.word	0x40023800
 8009654:	42470000 	.word	0x42470000
 8009658:	42470e80 	.word	0x42470e80
 800965c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009660:	f7fd fe06 	bl	8007270 <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	2b02      	cmp	r3, #2
 800966c:	d901      	bls.n	8009672 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e106      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009672:	4b85      	ldr	r3, [pc, #532]	; (8009888 <HAL_RCC_OscConfig+0x4e4>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0f0      	beq.n	8009660 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d106      	bne.n	8009694 <HAL_RCC_OscConfig+0x2f0>
 8009686:	4b81      	ldr	r3, [pc, #516]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 8009688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800968a:	4a80      	ldr	r2, [pc, #512]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 800968c:	f043 0301 	orr.w	r3, r3, #1
 8009690:	6713      	str	r3, [r2, #112]	; 0x70
 8009692:	e01c      	b.n	80096ce <HAL_RCC_OscConfig+0x32a>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	2b05      	cmp	r3, #5
 800969a:	d10c      	bne.n	80096b6 <HAL_RCC_OscConfig+0x312>
 800969c:	4b7b      	ldr	r3, [pc, #492]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 800969e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a0:	4a7a      	ldr	r2, [pc, #488]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 80096a2:	f043 0304 	orr.w	r3, r3, #4
 80096a6:	6713      	str	r3, [r2, #112]	; 0x70
 80096a8:	4b78      	ldr	r3, [pc, #480]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 80096aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ac:	4a77      	ldr	r2, [pc, #476]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 80096ae:	f043 0301 	orr.w	r3, r3, #1
 80096b2:	6713      	str	r3, [r2, #112]	; 0x70
 80096b4:	e00b      	b.n	80096ce <HAL_RCC_OscConfig+0x32a>
 80096b6:	4b75      	ldr	r3, [pc, #468]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 80096b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ba:	4a74      	ldr	r2, [pc, #464]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 80096bc:	f023 0301 	bic.w	r3, r3, #1
 80096c0:	6713      	str	r3, [r2, #112]	; 0x70
 80096c2:	4b72      	ldr	r3, [pc, #456]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 80096c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c6:	4a71      	ldr	r2, [pc, #452]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 80096c8:	f023 0304 	bic.w	r3, r3, #4
 80096cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d015      	beq.n	8009702 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d6:	f7fd fdcb 	bl	8007270 <HAL_GetTick>
 80096da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096dc:	e00a      	b.n	80096f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096de:	f7fd fdc7 	bl	8007270 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d901      	bls.n	80096f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e0c5      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096f4:	4b65      	ldr	r3, [pc, #404]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 80096f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f8:	f003 0302 	and.w	r3, r3, #2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0ee      	beq.n	80096de <HAL_RCC_OscConfig+0x33a>
 8009700:	e014      	b.n	800972c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009702:	f7fd fdb5 	bl	8007270 <HAL_GetTick>
 8009706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009708:	e00a      	b.n	8009720 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800970a:	f7fd fdb1 	bl	8007270 <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	f241 3288 	movw	r2, #5000	; 0x1388
 8009718:	4293      	cmp	r3, r2
 800971a:	d901      	bls.n	8009720 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e0af      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009720:	4b5a      	ldr	r3, [pc, #360]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 8009722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1ee      	bne.n	800970a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d105      	bne.n	800973e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009732:	4b56      	ldr	r3, [pc, #344]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 8009734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009736:	4a55      	ldr	r2, [pc, #340]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 8009738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800973c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 809b 	beq.w	800987e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009748:	4b50      	ldr	r3, [pc, #320]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f003 030c 	and.w	r3, r3, #12
 8009750:	2b08      	cmp	r3, #8
 8009752:	d05c      	beq.n	800980e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d141      	bne.n	80097e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800975c:	4b4c      	ldr	r3, [pc, #304]	; (8009890 <HAL_RCC_OscConfig+0x4ec>)
 800975e:	2200      	movs	r2, #0
 8009760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009762:	f7fd fd85 	bl	8007270 <HAL_GetTick>
 8009766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009768:	e008      	b.n	800977c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800976a:	f7fd fd81 	bl	8007270 <HAL_GetTick>
 800976e:	4602      	mov	r2, r0
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	2b02      	cmp	r3, #2
 8009776:	d901      	bls.n	800977c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	e081      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800977c:	4b43      	ldr	r3, [pc, #268]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1f0      	bne.n	800976a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	69da      	ldr	r2, [r3, #28]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	431a      	orrs	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	019b      	lsls	r3, r3, #6
 8009798:	431a      	orrs	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979e:	085b      	lsrs	r3, r3, #1
 80097a0:	3b01      	subs	r3, #1
 80097a2:	041b      	lsls	r3, r3, #16
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097aa:	061b      	lsls	r3, r3, #24
 80097ac:	4937      	ldr	r1, [pc, #220]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80097b2:	4b37      	ldr	r3, [pc, #220]	; (8009890 <HAL_RCC_OscConfig+0x4ec>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097b8:	f7fd fd5a 	bl	8007270 <HAL_GetTick>
 80097bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097be:	e008      	b.n	80097d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097c0:	f7fd fd56 	bl	8007270 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d901      	bls.n	80097d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e056      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097d2:	4b2e      	ldr	r3, [pc, #184]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0f0      	beq.n	80097c0 <HAL_RCC_OscConfig+0x41c>
 80097de:	e04e      	b.n	800987e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097e0:	4b2b      	ldr	r3, [pc, #172]	; (8009890 <HAL_RCC_OscConfig+0x4ec>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097e6:	f7fd fd43 	bl	8007270 <HAL_GetTick>
 80097ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097ec:	e008      	b.n	8009800 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097ee:	f7fd fd3f 	bl	8007270 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d901      	bls.n	8009800 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e03f      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009800:	4b22      	ldr	r3, [pc, #136]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1f0      	bne.n	80097ee <HAL_RCC_OscConfig+0x44a>
 800980c:	e037      	b.n	800987e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d101      	bne.n	800981a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e032      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800981a:	4b1c      	ldr	r3, [pc, #112]	; (800988c <HAL_RCC_OscConfig+0x4e8>)
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d028      	beq.n	800987a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009832:	429a      	cmp	r2, r3
 8009834:	d121      	bne.n	800987a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009840:	429a      	cmp	r2, r3
 8009842:	d11a      	bne.n	800987a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800984a:	4013      	ands	r3, r2
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009850:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009852:	4293      	cmp	r3, r2
 8009854:	d111      	bne.n	800987a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009860:	085b      	lsrs	r3, r3, #1
 8009862:	3b01      	subs	r3, #1
 8009864:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009866:	429a      	cmp	r2, r3
 8009868:	d107      	bne.n	800987a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009874:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009876:	429a      	cmp	r2, r3
 8009878:	d001      	beq.n	800987e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e000      	b.n	8009880 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3718      	adds	r7, #24
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	40007000 	.word	0x40007000
 800988c:	40023800 	.word	0x40023800
 8009890:	42470060 	.word	0x42470060

08009894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e0cc      	b.n	8009a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80098a8:	4b68      	ldr	r3, [pc, #416]	; (8009a4c <HAL_RCC_ClockConfig+0x1b8>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d90c      	bls.n	80098d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098b6:	4b65      	ldr	r3, [pc, #404]	; (8009a4c <HAL_RCC_ClockConfig+0x1b8>)
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	b2d2      	uxtb	r2, r2
 80098bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098be:	4b63      	ldr	r3, [pc, #396]	; (8009a4c <HAL_RCC_ClockConfig+0x1b8>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 030f 	and.w	r3, r3, #15
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d001      	beq.n	80098d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e0b8      	b.n	8009a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0302 	and.w	r3, r3, #2
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d020      	beq.n	800991e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0304 	and.w	r3, r3, #4
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d005      	beq.n	80098f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80098e8:	4b59      	ldr	r3, [pc, #356]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	4a58      	ldr	r2, [pc, #352]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 80098ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80098f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0308 	and.w	r3, r3, #8
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009900:	4b53      	ldr	r3, [pc, #332]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	4a52      	ldr	r2, [pc, #328]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 8009906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800990a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800990c:	4b50      	ldr	r3, [pc, #320]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	494d      	ldr	r1, [pc, #308]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 800991a:	4313      	orrs	r3, r2
 800991c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d044      	beq.n	80099b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d107      	bne.n	8009942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009932:	4b47      	ldr	r3, [pc, #284]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d119      	bne.n	8009972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e07f      	b.n	8009a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	2b02      	cmp	r3, #2
 8009948:	d003      	beq.n	8009952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800994e:	2b03      	cmp	r3, #3
 8009950:	d107      	bne.n	8009962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009952:	4b3f      	ldr	r3, [pc, #252]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d109      	bne.n	8009972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e06f      	b.n	8009a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009962:	4b3b      	ldr	r3, [pc, #236]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 0302 	and.w	r3, r3, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e067      	b.n	8009a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009972:	4b37      	ldr	r3, [pc, #220]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f023 0203 	bic.w	r2, r3, #3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	4934      	ldr	r1, [pc, #208]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 8009980:	4313      	orrs	r3, r2
 8009982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009984:	f7fd fc74 	bl	8007270 <HAL_GetTick>
 8009988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800998a:	e00a      	b.n	80099a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800998c:	f7fd fc70 	bl	8007270 <HAL_GetTick>
 8009990:	4602      	mov	r2, r0
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	f241 3288 	movw	r2, #5000	; 0x1388
 800999a:	4293      	cmp	r3, r2
 800999c:	d901      	bls.n	80099a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	e04f      	b.n	8009a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099a2:	4b2b      	ldr	r3, [pc, #172]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f003 020c 	and.w	r2, r3, #12
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d1eb      	bne.n	800998c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80099b4:	4b25      	ldr	r3, [pc, #148]	; (8009a4c <HAL_RCC_ClockConfig+0x1b8>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d20c      	bcs.n	80099dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099c2:	4b22      	ldr	r3, [pc, #136]	; (8009a4c <HAL_RCC_ClockConfig+0x1b8>)
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	b2d2      	uxtb	r2, r2
 80099c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099ca:	4b20      	ldr	r3, [pc, #128]	; (8009a4c <HAL_RCC_ClockConfig+0x1b8>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 030f 	and.w	r3, r3, #15
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d001      	beq.n	80099dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e032      	b.n	8009a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d008      	beq.n	80099fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099e8:	4b19      	ldr	r3, [pc, #100]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	4916      	ldr	r1, [pc, #88]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0308 	and.w	r3, r3, #8
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d009      	beq.n	8009a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a06:	4b12      	ldr	r3, [pc, #72]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	490e      	ldr	r1, [pc, #56]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a1a:	f000 f821 	bl	8009a60 <HAL_RCC_GetSysClockFreq>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <HAL_RCC_ClockConfig+0x1bc>)
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	091b      	lsrs	r3, r3, #4
 8009a26:	f003 030f 	and.w	r3, r3, #15
 8009a2a:	490a      	ldr	r1, [pc, #40]	; (8009a54 <HAL_RCC_ClockConfig+0x1c0>)
 8009a2c:	5ccb      	ldrb	r3, [r1, r3]
 8009a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a32:	4a09      	ldr	r2, [pc, #36]	; (8009a58 <HAL_RCC_ClockConfig+0x1c4>)
 8009a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009a36:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <HAL_RCC_ClockConfig+0x1c8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7f9 fb0a 	bl	8003054 <HAL_InitTick>

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40023c00 	.word	0x40023c00
 8009a50:	40023800 	.word	0x40023800
 8009a54:	0801c2d4 	.word	0x0801c2d4
 8009a58:	20000000 	.word	0x20000000
 8009a5c:	20000064 	.word	0x20000064

08009a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	607b      	str	r3, [r7, #4]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	2300      	movs	r3, #0
 8009a72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009a74:	2300      	movs	r3, #0
 8009a76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a78:	4b67      	ldr	r3, [pc, #412]	; (8009c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f003 030c 	and.w	r3, r3, #12
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	d00d      	beq.n	8009aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8009a84:	2b08      	cmp	r3, #8
 8009a86:	f200 80bd 	bhi.w	8009c04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <HAL_RCC_GetSysClockFreq+0x34>
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d003      	beq.n	8009a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8009a92:	e0b7      	b.n	8009c04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a94:	4b61      	ldr	r3, [pc, #388]	; (8009c1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009a96:	60bb      	str	r3, [r7, #8]
       break;
 8009a98:	e0b7      	b.n	8009c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a9a:	4b60      	ldr	r3, [pc, #384]	; (8009c1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009a9c:	60bb      	str	r3, [r7, #8]
      break;
 8009a9e:	e0b4      	b.n	8009c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009aa0:	4b5d      	ldr	r3, [pc, #372]	; (8009c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aa8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009aaa:	4b5b      	ldr	r3, [pc, #364]	; (8009c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d04d      	beq.n	8009b52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ab6:	4b58      	ldr	r3, [pc, #352]	; (8009c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	099b      	lsrs	r3, r3, #6
 8009abc:	461a      	mov	r2, r3
 8009abe:	f04f 0300 	mov.w	r3, #0
 8009ac2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009ac6:	f04f 0100 	mov.w	r1, #0
 8009aca:	ea02 0800 	and.w	r8, r2, r0
 8009ace:	ea03 0901 	and.w	r9, r3, r1
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	4649      	mov	r1, r9
 8009ad6:	f04f 0200 	mov.w	r2, #0
 8009ada:	f04f 0300 	mov.w	r3, #0
 8009ade:	014b      	lsls	r3, r1, #5
 8009ae0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009ae4:	0142      	lsls	r2, r0, #5
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4619      	mov	r1, r3
 8009aea:	ebb0 0008 	subs.w	r0, r0, r8
 8009aee:	eb61 0109 	sbc.w	r1, r1, r9
 8009af2:	f04f 0200 	mov.w	r2, #0
 8009af6:	f04f 0300 	mov.w	r3, #0
 8009afa:	018b      	lsls	r3, r1, #6
 8009afc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009b00:	0182      	lsls	r2, r0, #6
 8009b02:	1a12      	subs	r2, r2, r0
 8009b04:	eb63 0301 	sbc.w	r3, r3, r1
 8009b08:	f04f 0000 	mov.w	r0, #0
 8009b0c:	f04f 0100 	mov.w	r1, #0
 8009b10:	00d9      	lsls	r1, r3, #3
 8009b12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b16:	00d0      	lsls	r0, r2, #3
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	eb12 0208 	adds.w	r2, r2, r8
 8009b20:	eb43 0309 	adc.w	r3, r3, r9
 8009b24:	f04f 0000 	mov.w	r0, #0
 8009b28:	f04f 0100 	mov.w	r1, #0
 8009b2c:	0299      	lsls	r1, r3, #10
 8009b2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009b32:	0290      	lsls	r0, r2, #10
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f04f 0300 	mov.w	r3, #0
 8009b44:	f7f7 f8b0 	bl	8000ca8 <__aeabi_uldivmod>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	e04a      	b.n	8009be8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b52:	4b31      	ldr	r3, [pc, #196]	; (8009c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	099b      	lsrs	r3, r3, #6
 8009b58:	461a      	mov	r2, r3
 8009b5a:	f04f 0300 	mov.w	r3, #0
 8009b5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009b62:	f04f 0100 	mov.w	r1, #0
 8009b66:	ea02 0400 	and.w	r4, r2, r0
 8009b6a:	ea03 0501 	and.w	r5, r3, r1
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	f04f 0200 	mov.w	r2, #0
 8009b76:	f04f 0300 	mov.w	r3, #0
 8009b7a:	014b      	lsls	r3, r1, #5
 8009b7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009b80:	0142      	lsls	r2, r0, #5
 8009b82:	4610      	mov	r0, r2
 8009b84:	4619      	mov	r1, r3
 8009b86:	1b00      	subs	r0, r0, r4
 8009b88:	eb61 0105 	sbc.w	r1, r1, r5
 8009b8c:	f04f 0200 	mov.w	r2, #0
 8009b90:	f04f 0300 	mov.w	r3, #0
 8009b94:	018b      	lsls	r3, r1, #6
 8009b96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009b9a:	0182      	lsls	r2, r0, #6
 8009b9c:	1a12      	subs	r2, r2, r0
 8009b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8009ba2:	f04f 0000 	mov.w	r0, #0
 8009ba6:	f04f 0100 	mov.w	r1, #0
 8009baa:	00d9      	lsls	r1, r3, #3
 8009bac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009bb0:	00d0      	lsls	r0, r2, #3
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	1912      	adds	r2, r2, r4
 8009bb8:	eb45 0303 	adc.w	r3, r5, r3
 8009bbc:	f04f 0000 	mov.w	r0, #0
 8009bc0:	f04f 0100 	mov.w	r1, #0
 8009bc4:	0299      	lsls	r1, r3, #10
 8009bc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009bca:	0290      	lsls	r0, r2, #10
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f04f 0300 	mov.w	r3, #0
 8009bdc:	f7f7 f864 	bl	8000ca8 <__aeabi_uldivmod>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4613      	mov	r3, r2
 8009be6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009be8:	4b0b      	ldr	r3, [pc, #44]	; (8009c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	0c1b      	lsrs	r3, r3, #16
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c00:	60bb      	str	r3, [r7, #8]
      break;
 8009c02:	e002      	b.n	8009c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009c06:	60bb      	str	r3, [r7, #8]
      break;
 8009c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009c16:	bf00      	nop
 8009c18:	40023800 	.word	0x40023800
 8009c1c:	00f42400 	.word	0x00f42400

08009c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c24:	4b03      	ldr	r3, [pc, #12]	; (8009c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8009c26:	681b      	ldr	r3, [r3, #0]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	20000000 	.word	0x20000000

08009c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009c3c:	f7ff fff0 	bl	8009c20 <HAL_RCC_GetHCLKFreq>
 8009c40:	4602      	mov	r2, r0
 8009c42:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	0a9b      	lsrs	r3, r3, #10
 8009c48:	f003 0307 	and.w	r3, r3, #7
 8009c4c:	4903      	ldr	r1, [pc, #12]	; (8009c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c4e:	5ccb      	ldrb	r3, [r1, r3]
 8009c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	40023800 	.word	0x40023800
 8009c5c:	0801c2e4 	.word	0x0801c2e4

08009c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009c64:	f7ff ffdc 	bl	8009c20 <HAL_RCC_GetHCLKFreq>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	0b5b      	lsrs	r3, r3, #13
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	4903      	ldr	r1, [pc, #12]	; (8009c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c76:	5ccb      	ldrb	r3, [r1, r3]
 8009c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	40023800 	.word	0x40023800
 8009c84:	0801c2e4 	.word	0x0801c2e4

08009c88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	220f      	movs	r2, #15
 8009c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c98:	4b12      	ldr	r3, [pc, #72]	; (8009ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	f003 0203 	and.w	r2, r3, #3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009ca4:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009cb0:	4b0c      	ldr	r3, [pc, #48]	; (8009ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009cbc:	4b09      	ldr	r3, [pc, #36]	; (8009ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	08db      	lsrs	r3, r3, #3
 8009cc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009cca:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <HAL_RCC_GetClockConfig+0x60>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 020f 	and.w	r2, r3, #15
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	601a      	str	r2, [r3, #0]
}
 8009cd6:	bf00      	nop
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	40023800 	.word	0x40023800
 8009ce8:	40023c00 	.word	0x40023c00

08009cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10b      	bne.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d105      	bne.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d075      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009d20:	4bad      	ldr	r3, [pc, #692]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d26:	f7fd faa3 	bl	8007270 <HAL_GetTick>
 8009d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d2c:	e008      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009d2e:	f7fd fa9f 	bl	8007270 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d901      	bls.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e18b      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d40:	4ba6      	ldr	r3, [pc, #664]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1f0      	bne.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d009      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	019a      	lsls	r2, r3, #6
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	071b      	lsls	r3, r3, #28
 8009d64:	499d      	ldr	r1, [pc, #628]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d66:	4313      	orrs	r3, r2
 8009d68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d01f      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009d78:	4b98      	ldr	r3, [pc, #608]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d7e:	0f1b      	lsrs	r3, r3, #28
 8009d80:	f003 0307 	and.w	r3, r3, #7
 8009d84:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	019a      	lsls	r2, r3, #6
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	061b      	lsls	r3, r3, #24
 8009d92:	431a      	orrs	r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	071b      	lsls	r3, r3, #28
 8009d98:	4990      	ldr	r1, [pc, #576]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009da0:	4b8e      	ldr	r3, [pc, #568]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009da6:	f023 021f 	bic.w	r2, r3, #31
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	498a      	ldr	r1, [pc, #552]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00d      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	019a      	lsls	r2, r3, #6
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	061b      	lsls	r3, r3, #24
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	071b      	lsls	r3, r3, #28
 8009dd8:	4980      	ldr	r1, [pc, #512]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009de0:	4b7d      	ldr	r3, [pc, #500]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009de2:	2201      	movs	r2, #1
 8009de4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009de6:	f7fd fa43 	bl	8007270 <HAL_GetTick>
 8009dea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009dec:	e008      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009dee:	f7fd fa3f 	bl	8007270 <HAL_GetTick>
 8009df2:	4602      	mov	r2, r0
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d901      	bls.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e12b      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e00:	4b76      	ldr	r3, [pc, #472]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0f0      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0304 	and.w	r3, r3, #4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d105      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d079      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009e24:	4b6e      	ldr	r3, [pc, #440]	; (8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009e2a:	f7fd fa21 	bl	8007270 <HAL_GetTick>
 8009e2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e30:	e008      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009e32:	f7fd fa1d 	bl	8007270 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d901      	bls.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e109      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e44:	4b65      	ldr	r3, [pc, #404]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e50:	d0ef      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0304 	and.w	r3, r3, #4
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d020      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009e5e:	4b5f      	ldr	r3, [pc, #380]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e64:	0f1b      	lsrs	r3, r3, #28
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	019a      	lsls	r2, r3, #6
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	061b      	lsls	r3, r3, #24
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	071b      	lsls	r3, r3, #28
 8009e7e:	4957      	ldr	r1, [pc, #348]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009e86:	4b55      	ldr	r3, [pc, #340]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	021b      	lsls	r3, r3, #8
 8009e98:	4950      	ldr	r1, [pc, #320]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d01e      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009eac:	4b4b      	ldr	r3, [pc, #300]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb2:	0e1b      	lsrs	r3, r3, #24
 8009eb4:	f003 030f 	and.w	r3, r3, #15
 8009eb8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	019a      	lsls	r2, r3, #6
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	061b      	lsls	r3, r3, #24
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	071b      	lsls	r3, r3, #28
 8009ecc:	4943      	ldr	r1, [pc, #268]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009ed4:	4b41      	ldr	r3, [pc, #260]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee2:	493e      	ldr	r1, [pc, #248]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009eea:	4b3d      	ldr	r3, [pc, #244]	; (8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009eec:	2201      	movs	r2, #1
 8009eee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009ef0:	f7fd f9be 	bl	8007270 <HAL_GetTick>
 8009ef4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ef6:	e008      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009ef8:	f7fd f9ba 	bl	8007270 <HAL_GetTick>
 8009efc:	4602      	mov	r2, r0
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d901      	bls.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e0a6      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f0a:	4b34      	ldr	r3, [pc, #208]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f16:	d1ef      	bne.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0320 	and.w	r3, r3, #32
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 808d 	beq.w	800a040 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f26:	2300      	movs	r3, #0
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	4b2c      	ldr	r3, [pc, #176]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	4a2b      	ldr	r2, [pc, #172]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f34:	6413      	str	r3, [r2, #64]	; 0x40
 8009f36:	4b29      	ldr	r3, [pc, #164]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f3e:	60fb      	str	r3, [r7, #12]
 8009f40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009f42:	4b28      	ldr	r3, [pc, #160]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a27      	ldr	r2, [pc, #156]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f4e:	f7fd f98f 	bl	8007270 <HAL_GetTick>
 8009f52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f54:	e008      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f56:	f7fd f98b 	bl	8007270 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d901      	bls.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e077      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f68:	4b1e      	ldr	r3, [pc, #120]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d0f0      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009f74:	4b19      	ldr	r3, [pc, #100]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f7c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d039      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d032      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f92:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009f9c:	4b12      	ldr	r3, [pc, #72]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009fa2:	4b11      	ldr	r3, [pc, #68]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009fa8:	4a0c      	ldr	r2, [pc, #48]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009fae:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d11e      	bne.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009fba:	f7fd f959 	bl	8007270 <HAL_GetTick>
 8009fbe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fc0:	e014      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fc2:	f7fd f955 	bl	8007270 <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d90b      	bls.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e03f      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8009fd8:	42470068 	.word	0x42470068
 8009fdc:	40023800 	.word	0x40023800
 8009fe0:	42470070 	.word	0x42470070
 8009fe4:	40007000 	.word	0x40007000
 8009fe8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fec:	4b1c      	ldr	r3, [pc, #112]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff0:	f003 0302 	and.w	r3, r3, #2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d0e4      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a004:	d10d      	bne.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a006:	4b16      	ldr	r3, [pc, #88]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a012:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a01a:	4911      	ldr	r1, [pc, #68]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	608b      	str	r3, [r1, #8]
 800a020:	e005      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a022:	4b0f      	ldr	r3, [pc, #60]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	4a0e      	ldr	r2, [pc, #56]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a028:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a02c:	6093      	str	r3, [r2, #8]
 800a02e:	4b0c      	ldr	r3, [pc, #48]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a030:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a03a:	4909      	ldr	r1, [pc, #36]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0310 	and.w	r3, r3, #16
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a052:	4b04      	ldr	r3, [pc, #16]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a054:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	40023800 	.word	0x40023800
 800a064:	424711e0 	.word	0x424711e0

0800a068 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e083      	b.n	800a182 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	7f5b      	ldrb	r3, [r3, #29]
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	d105      	bne.n	800a090 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7f8 fdee 	bl	8002c6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2202      	movs	r2, #2
 800a094:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	22ca      	movs	r2, #202	; 0xca
 800a09c:	625a      	str	r2, [r3, #36]	; 0x24
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2253      	movs	r2, #83	; 0x53
 800a0a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fc26 	bl	800a8f8 <RTC_EnterInitMode>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d008      	beq.n	800a0c4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	22ff      	movs	r2, #255	; 0xff
 800a0b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2204      	movs	r2, #4
 800a0be:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e05e      	b.n	800a182 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	6812      	ldr	r2, [r2, #0]
 800a0ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6899      	ldr	r1, [r3, #8]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685a      	ldr	r2, [r3, #4]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	431a      	orrs	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	68d2      	ldr	r2, [r2, #12]
 800a0fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6919      	ldr	r1, [r3, #16]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	041a      	lsls	r2, r3, #16
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a122:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f003 0320 	and.w	r3, r3, #32
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10e      	bne.n	800a150 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fbb8 	bl	800a8a8 <HAL_RTC_WaitForSynchro>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d008      	beq.n	800a150 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	22ff      	movs	r2, #255	; 0xff
 800a144:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2204      	movs	r2, #4
 800a14a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e018      	b.n	800a182 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a15e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	699a      	ldr	r2, [r3, #24]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	22ff      	movs	r2, #255	; 0xff
 800a178:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a180:	2300      	movs	r3, #0
  }
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a18a:	b590      	push	{r4, r7, lr}
 800a18c:	b087      	sub	sp, #28
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	7f1b      	ldrb	r3, [r3, #28]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d101      	bne.n	800a1a6 <HAL_RTC_SetTime+0x1c>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	e0aa      	b.n	800a2fc <HAL_RTC_SetTime+0x172>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d126      	bne.n	800a206 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d102      	bne.n	800a1cc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 fbbd 	bl	800a950 <RTC_ByteToBcd2>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	785b      	ldrb	r3, [r3, #1]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fbb6 	bl	800a950 <RTC_ByteToBcd2>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a1e8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	789b      	ldrb	r3, [r3, #2]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 fbae 	bl	800a950 <RTC_ByteToBcd2>
 800a1f4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a1f6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	78db      	ldrb	r3, [r3, #3]
 800a1fe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a200:	4313      	orrs	r3, r2
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	e018      	b.n	800a238 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d102      	bne.n	800a21a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2200      	movs	r2, #0
 800a218:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	785b      	ldrb	r3, [r3, #1]
 800a224:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a226:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a228:	68ba      	ldr	r2, [r7, #8]
 800a22a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a22c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	78db      	ldrb	r3, [r3, #3]
 800a232:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a234:	4313      	orrs	r3, r2
 800a236:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	22ca      	movs	r2, #202	; 0xca
 800a23e:	625a      	str	r2, [r3, #36]	; 0x24
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2253      	movs	r2, #83	; 0x53
 800a246:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 fb55 	bl	800a8f8 <RTC_EnterInitMode>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00b      	beq.n	800a26c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	22ff      	movs	r2, #255	; 0xff
 800a25a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2204      	movs	r2, #4
 800a260:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e047      	b.n	800a2fc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a276:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a27a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a28a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6899      	ldr	r1, [r3, #8]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	431a      	orrs	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68da      	ldr	r2, [r3, #12]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f003 0320 	and.w	r3, r3, #32
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d111      	bne.n	800a2e6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 faf0 	bl	800a8a8 <HAL_RTC_WaitForSynchro>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00b      	beq.n	800a2e6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	22ff      	movs	r2, #255	; 0xff
 800a2d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2204      	movs	r2, #4
 800a2da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e00a      	b.n	800a2fc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	22ff      	movs	r2, #255	; 0xff
 800a2ec:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
  }
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	371c      	adds	r7, #28
 800a300:	46bd      	mov	sp, r7
 800a302:	bd90      	pop	{r4, r7, pc}

0800a304 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a310:	2300      	movs	r3, #0
 800a312:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a336:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a33a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	0c1b      	lsrs	r3, r3, #16
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a346:	b2da      	uxtb	r2, r3
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	0a1b      	lsrs	r3, r3, #8
 800a350:	b2db      	uxtb	r3, r3
 800a352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a356:	b2da      	uxtb	r2, r3
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a364:	b2da      	uxtb	r2, r3
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	0c1b      	lsrs	r3, r3, #16
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a374:	b2da      	uxtb	r2, r3
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d11a      	bne.n	800a3b6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 fb01 	bl	800a98c <RTC_Bcd2ToByte>
 800a38a:	4603      	mov	r3, r0
 800a38c:	461a      	mov	r2, r3
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	4618      	mov	r0, r3
 800a398:	f000 faf8 	bl	800a98c <RTC_Bcd2ToByte>
 800a39c:	4603      	mov	r3, r0
 800a39e:	461a      	mov	r2, r3
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	789b      	ldrb	r3, [r3, #2]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 faef 	bl	800a98c <RTC_Bcd2ToByte>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a3c0:	b590      	push	{r4, r7, lr}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	7f1b      	ldrb	r3, [r3, #28]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d101      	bne.n	800a3dc <HAL_RTC_SetDate+0x1c>
 800a3d8:	2302      	movs	r3, #2
 800a3da:	e094      	b.n	800a506 <HAL_RTC_SetDate+0x146>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10e      	bne.n	800a40c <HAL_RTC_SetDate+0x4c>
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	785b      	ldrb	r3, [r3, #1]
 800a3f2:	f003 0310 	and.w	r3, r3, #16
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d008      	beq.n	800a40c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	785b      	ldrb	r3, [r3, #1]
 800a3fe:	f023 0310 	bic.w	r3, r3, #16
 800a402:	b2db      	uxtb	r3, r3
 800a404:	330a      	adds	r3, #10
 800a406:	b2da      	uxtb	r2, r3
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d11c      	bne.n	800a44c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	78db      	ldrb	r3, [r3, #3]
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fa9a 	bl	800a950 <RTC_ByteToBcd2>
 800a41c:	4603      	mov	r3, r0
 800a41e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	785b      	ldrb	r3, [r3, #1]
 800a424:	4618      	mov	r0, r3
 800a426:	f000 fa93 	bl	800a950 <RTC_ByteToBcd2>
 800a42a:	4603      	mov	r3, r0
 800a42c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a42e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	789b      	ldrb	r3, [r3, #2]
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fa8b 	bl	800a950 <RTC_ByteToBcd2>
 800a43a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a43c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a446:	4313      	orrs	r3, r2
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	e00e      	b.n	800a46a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	78db      	ldrb	r3, [r3, #3]
 800a450:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	785b      	ldrb	r3, [r3, #1]
 800a456:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a458:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a45e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a466:	4313      	orrs	r3, r2
 800a468:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	22ca      	movs	r2, #202	; 0xca
 800a470:	625a      	str	r2, [r3, #36]	; 0x24
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2253      	movs	r2, #83	; 0x53
 800a478:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 fa3c 	bl	800a8f8 <RTC_EnterInitMode>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00b      	beq.n	800a49e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	22ff      	movs	r2, #255	; 0xff
 800a48c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2204      	movs	r2, #4
 800a492:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e033      	b.n	800a506 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a4a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a4ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68da      	ldr	r2, [r3, #12]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f003 0320 	and.w	r3, r3, #32
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d111      	bne.n	800a4f0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 f9eb 	bl	800a8a8 <HAL_RTC_WaitForSynchro>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	22ff      	movs	r2, #255	; 0xff
 800a4de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2204      	movs	r2, #4
 800a4e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e00a      	b.n	800a506 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	22ff      	movs	r2, #255	; 0xff
 800a4f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a504:	2300      	movs	r3, #0
  }
}
 800a506:	4618      	mov	r0, r3
 800a508:	371c      	adds	r7, #28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd90      	pop	{r4, r7, pc}

0800a50e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b086      	sub	sp, #24
 800a512:	af00      	add	r7, sp, #0
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	60b9      	str	r1, [r7, #8]
 800a518:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a51a:	2300      	movs	r3, #0
 800a51c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a528:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a52c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	0c1b      	lsrs	r3, r3, #16
 800a532:	b2da      	uxtb	r2, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	0a1b      	lsrs	r3, r3, #8
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f003 031f 	and.w	r3, r3, #31
 800a542:	b2da      	uxtb	r2, r3
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a550:	b2da      	uxtb	r2, r3
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	0b5b      	lsrs	r3, r3, #13
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	f003 0307 	and.w	r3, r3, #7
 800a560:	b2da      	uxtb	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d11a      	bne.n	800a5a2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	78db      	ldrb	r3, [r3, #3]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 fa0b 	bl	800a98c <RTC_Bcd2ToByte>
 800a576:	4603      	mov	r3, r0
 800a578:	461a      	mov	r2, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	785b      	ldrb	r3, [r3, #1]
 800a582:	4618      	mov	r0, r3
 800a584:	f000 fa02 	bl	800a98c <RTC_Bcd2ToByte>
 800a588:	4603      	mov	r3, r0
 800a58a:	461a      	mov	r2, r3
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	789b      	ldrb	r3, [r3, #2]
 800a594:	4618      	mov	r0, r3
 800a596:	f000 f9f9 	bl	800a98c <RTC_Bcd2ToByte>
 800a59a:	4603      	mov	r3, r0
 800a59c:	461a      	mov	r2, r3
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a5ac:	b590      	push	{r4, r7, lr}
 800a5ae:	b089      	sub	sp, #36	; 0x24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61fb      	str	r3, [r7, #28]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800a5c0:	4b93      	ldr	r3, [pc, #588]	; (800a810 <HAL_RTC_SetAlarm_IT+0x264>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a93      	ldr	r2, [pc, #588]	; (800a814 <HAL_RTC_SetAlarm_IT+0x268>)
 800a5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ca:	0adb      	lsrs	r3, r3, #11
 800a5cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5d0:	fb02 f303 	mul.w	r3, r2, r3
 800a5d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	7f1b      	ldrb	r3, [r3, #28]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d101      	bne.n	800a5e2 <HAL_RTC_SetAlarm_IT+0x36>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e111      	b.n	800a806 <HAL_RTC_SetAlarm_IT+0x25a>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d137      	bne.n	800a664 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d102      	bne.n	800a608 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2200      	movs	r2, #0
 800a606:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 f99f 	bl	800a950 <RTC_ByteToBcd2>
 800a612:	4603      	mov	r3, r0
 800a614:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	785b      	ldrb	r3, [r3, #1]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f998 	bl	800a950 <RTC_ByteToBcd2>
 800a620:	4603      	mov	r3, r0
 800a622:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a624:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	789b      	ldrb	r3, [r3, #2]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 f990 	bl	800a950 <RTC_ByteToBcd2>
 800a630:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a632:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	78db      	ldrb	r3, [r3, #3]
 800a63a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a63c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a646:	4618      	mov	r0, r3
 800a648:	f000 f982 	bl	800a950 <RTC_ByteToBcd2>
 800a64c:	4603      	mov	r3, r0
 800a64e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a650:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a658:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a65e:	4313      	orrs	r3, r2
 800a660:	61fb      	str	r3, [r7, #28]
 800a662:	e023      	b.n	800a6ac <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d102      	bne.n	800a678 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2200      	movs	r2, #0
 800a676:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a684:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a68a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	78db      	ldrb	r3, [r3, #3]
 800a690:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a692:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a69a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a69c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a6a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	22ca      	movs	r2, #202	; 0xca
 800a6be:	625a      	str	r2, [r3, #36]	; 0x24
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2253      	movs	r2, #83	; 0x53
 800a6c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6d0:	d141      	bne.n	800a756 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6e0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a6f2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	1e5a      	subs	r2, r3, #1
 800a6f8:	617a      	str	r2, [r7, #20]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10b      	bne.n	800a716 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	22ff      	movs	r2, #255	; 0xff
 800a704:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2203      	movs	r2, #3
 800a70a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	e077      	b.n	800a806 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0e7      	beq.n	800a6f4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	69fa      	ldr	r2, [r7, #28]
 800a72a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	69ba      	ldr	r2, [r7, #24]
 800a732:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689a      	ldr	r2, [r3, #8]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a742:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689a      	ldr	r2, [r3, #8]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a752:	609a      	str	r2, [r3, #8]
 800a754:	e040      	b.n	800a7d8 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	689a      	ldr	r2, [r3, #8]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a764:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a776:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	1e5a      	subs	r2, r3, #1
 800a77c:	617a      	str	r2, [r7, #20]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10b      	bne.n	800a79a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	22ff      	movs	r2, #255	; 0xff
 800a788:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2203      	movs	r2, #3
 800a78e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e035      	b.n	800a806 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d0e7      	beq.n	800a778 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	69fa      	ldr	r2, [r7, #28]
 800a7ae:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689a      	ldr	r2, [r3, #8]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7c6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689a      	ldr	r2, [r3, #8]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7d6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a7d8:	4b0f      	ldr	r3, [pc, #60]	; (800a818 <HAL_RTC_SetAlarm_IT+0x26c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a0e      	ldr	r2, [pc, #56]	; (800a818 <HAL_RTC_SetAlarm_IT+0x26c>)
 800a7de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7e2:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800a7e4:	4b0c      	ldr	r3, [pc, #48]	; (800a818 <HAL_RTC_SetAlarm_IT+0x26c>)
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	4a0b      	ldr	r2, [pc, #44]	; (800a818 <HAL_RTC_SetAlarm_IT+0x26c>)
 800a7ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ee:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	22ff      	movs	r2, #255	; 0xff
 800a7f6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3724      	adds	r7, #36	; 0x24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd90      	pop	{r4, r7, pc}
 800a80e:	bf00      	nop
 800a810:	20000000 	.word	0x20000000
 800a814:	10624dd3 	.word	0x10624dd3
 800a818:	40013c00 	.word	0x40013c00

0800a81c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d012      	beq.n	800a858 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00b      	beq.n	800a858 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7fc f823 	bl	800688c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a856:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d012      	beq.n	800a88c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00b      	beq.n	800a88c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f9bf 	bl	800abf8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	b2da      	uxtb	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a88a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a88c:	4b05      	ldr	r3, [pc, #20]	; (800a8a4 <HAL_RTC_AlarmIRQHandler+0x88>)
 800a88e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a892:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	775a      	strb	r2, [r3, #29]
}
 800a89a:	bf00      	nop
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	40013c00 	.word	0x40013c00

0800a8a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68da      	ldr	r2, [r3, #12]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a8c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a8c4:	f7fc fcd4 	bl	8007270 <HAL_GetTick>
 800a8c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a8ca:	e009      	b.n	800a8e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8cc:	f7fc fcd0 	bl	8007270 <HAL_GetTick>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8da:	d901      	bls.n	800a8e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e007      	b.n	800a8f0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	f003 0320 	and.w	r3, r3, #32
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d0ee      	beq.n	800a8cc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a900:	2300      	movs	r3, #0
 800a902:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d119      	bne.n	800a946 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f04f 32ff 	mov.w	r2, #4294967295
 800a91a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a91c:	f7fc fca8 	bl	8007270 <HAL_GetTick>
 800a920:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a922:	e009      	b.n	800a938 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a924:	f7fc fca4 	bl	8007270 <HAL_GetTick>
 800a928:	4602      	mov	r2, r0
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a932:	d901      	bls.n	800a938 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a934:	2303      	movs	r3, #3
 800a936:	e007      	b.n	800a948 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a942:	2b00      	cmp	r3, #0
 800a944:	d0ee      	beq.n	800a924 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a95a:	2300      	movs	r3, #0
 800a95c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800a95e:	e005      	b.n	800a96c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3301      	adds	r3, #1
 800a964:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	3b0a      	subs	r3, #10
 800a96a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	2b09      	cmp	r3, #9
 800a970:	d8f6      	bhi.n	800a960 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	b2db      	uxtb	r3, r3
 800a976:	011b      	lsls	r3, r3, #4
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	b2db      	uxtb	r3, r3
}
 800a980:	4618      	mov	r0, r3
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a996:	2300      	movs	r3, #0
 800a998:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	091b      	lsrs	r3, r3, #4
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	005b      	lsls	r3, r3, #1
 800a9aa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a9ac:	79fb      	ldrb	r3, [r7, #7]
 800a9ae:	f003 030f 	and.w	r3, r3, #15
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	4413      	add	r3, r2
 800a9ba:	b2db      	uxtb	r3, r3
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b087      	sub	sp, #28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	7f1b      	ldrb	r3, [r3, #28]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d101      	bne.n	800a9e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800a9dc:	2302      	movs	r3, #2
 800a9de:	e0a6      	b.n	800ab2e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	22ca      	movs	r2, #202	; 0xca
 800a9f2:	625a      	str	r2, [r3, #36]	; 0x24
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2253      	movs	r2, #83	; 0x53
 800a9fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d022      	beq.n	800aa50 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800aa0a:	4b4c      	ldr	r3, [pc, #304]	; (800ab3c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a4c      	ldr	r2, [pc, #304]	; (800ab40 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800aa10:	fba2 2303 	umull	r2, r3, r2, r3
 800aa14:	0adb      	lsrs	r3, r3, #11
 800aa16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa1a:	fb02 f303 	mul.w	r3, r2, r3
 800aa1e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	1e5a      	subs	r2, r3, #1
 800aa24:	617a      	str	r2, [r7, #20]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10b      	bne.n	800aa42 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	22ff      	movs	r2, #255	; 0xff
 800aa30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2203      	movs	r2, #3
 800aa36:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e075      	b.n	800ab2e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f003 0304 	and.w	r3, r3, #4
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1e7      	bne.n	800aa20 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	689a      	ldr	r2, [r3, #8]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa5e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800aa60:	4b36      	ldr	r3, [pc, #216]	; (800ab3c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a36      	ldr	r2, [pc, #216]	; (800ab40 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800aa66:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6a:	0adb      	lsrs	r3, r3, #11
 800aa6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa70:	fb02 f303 	mul.w	r3, r2, r3
 800aa74:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	1e5a      	subs	r2, r3, #1
 800aa7a:	617a      	str	r2, [r7, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10b      	bne.n	800aa98 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	22ff      	movs	r2, #255	; 0xff
 800aa86:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2203      	movs	r2, #3
 800aa8c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e04a      	b.n	800ab2e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	f003 0304 	and.w	r3, r3, #4
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d0e7      	beq.n	800aa76 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f022 0207 	bic.w	r2, r2, #7
 800aabc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6899      	ldr	r1, [r3, #8]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800aace:	4b1d      	ldr	r3, [pc, #116]	; (800ab44 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a1c      	ldr	r2, [pc, #112]	; (800ab44 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800aad4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aad8:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800aada:	4b1a      	ldr	r3, [pc, #104]	; (800ab44 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	4a19      	ldr	r2, [pc, #100]	; (800ab44 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800aae0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aae4:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800aaf6:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	689a      	ldr	r2, [r3, #8]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab06:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ab16:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	22ff      	movs	r2, #255	; 0xff
 800ab1e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2201      	movs	r2, #1
 800ab24:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	371c      	adds	r7, #28
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	20000000 	.word	0x20000000
 800ab40:	10624dd3 	.word	0x10624dd3
 800ab44:	40013c00 	.word	0x40013c00

0800ab48 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ab50:	2300      	movs	r3, #0
 800ab52:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7f1b      	ldrb	r3, [r3, #28]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e047      	b.n	800abf0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2202      	movs	r2, #2
 800ab6a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	22ca      	movs	r2, #202	; 0xca
 800ab72:	625a      	str	r2, [r3, #36]	; 0x24
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2253      	movs	r2, #83	; 0x53
 800ab7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	689a      	ldr	r2, [r3, #8]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab8a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab9a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab9c:	f7fc fb68 	bl	8007270 <HAL_GetTick>
 800aba0:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800aba2:	e013      	b.n	800abcc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800aba4:	f7fc fb64 	bl	8007270 <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abb2:	d90b      	bls.n	800abcc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	22ff      	movs	r2, #255	; 0xff
 800abba:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2203      	movs	r2, #3
 800abc0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800abc8:	2303      	movs	r3, #3
 800abca:	e011      	b.n	800abf0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f003 0304 	and.w	r3, r3, #4
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d0e4      	beq.n	800aba4 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	22ff      	movs	r2, #255	; 0xff
 800abe0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e07b      	b.n	800ad16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d108      	bne.n	800ac38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac2e:	d009      	beq.n	800ac44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	61da      	str	r2, [r3, #28]
 800ac36:	e005      	b.n	800ac44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d106      	bne.n	800ac64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7f8 f836 	bl	8002cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2202      	movs	r2, #2
 800ac68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac96:	431a      	orrs	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	f003 0302 	and.w	r3, r3, #2
 800aca0:	431a      	orrs	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	431a      	orrs	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acb4:	431a      	orrs	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acbe:	431a      	orrs	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc8:	ea42 0103 	orr.w	r1, r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	430a      	orrs	r2, r1
 800acda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	0c1b      	lsrs	r3, r3, #16
 800ace2:	f003 0104 	and.w	r1, r3, #4
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	f003 0210 	and.w	r2, r3, #16
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	430a      	orrs	r2, r1
 800acf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	69da      	ldr	r2, [r3, #28]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b088      	sub	sp, #32
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	60f8      	str	r0, [r7, #12]
 800ad26:	60b9      	str	r1, [r7, #8]
 800ad28:	603b      	str	r3, [r7, #0]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d101      	bne.n	800ad40 <HAL_SPI_Transmit+0x22>
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	e126      	b.n	800af8e <HAL_SPI_Transmit+0x270>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad48:	f7fc fa92 	bl	8007270 <HAL_GetTick>
 800ad4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ad4e:	88fb      	ldrh	r3, [r7, #6]
 800ad50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d002      	beq.n	800ad64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ad5e:	2302      	movs	r3, #2
 800ad60:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad62:	e10b      	b.n	800af7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <HAL_SPI_Transmit+0x52>
 800ad6a:	88fb      	ldrh	r3, [r7, #6]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d102      	bne.n	800ad76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad74:	e102      	b.n	800af7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2203      	movs	r2, #3
 800ad7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	88fa      	ldrh	r2, [r7, #6]
 800ad8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	88fa      	ldrh	r2, [r7, #6]
 800ad94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adbc:	d10f      	bne.n	800adde <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800addc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade8:	2b40      	cmp	r3, #64	; 0x40
 800adea:	d007      	beq.n	800adfc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae04:	d14b      	bne.n	800ae9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <HAL_SPI_Transmit+0xf6>
 800ae0e:	8afb      	ldrh	r3, [r7, #22]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d13e      	bne.n	800ae92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae18:	881a      	ldrh	r2, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae24:	1c9a      	adds	r2, r3, #2
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	3b01      	subs	r3, #1
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ae38:	e02b      	b.n	800ae92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f003 0302 	and.w	r3, r3, #2
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d112      	bne.n	800ae6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4c:	881a      	ldrh	r2, [r3, #0]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae58:	1c9a      	adds	r2, r3, #2
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	3b01      	subs	r3, #1
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	86da      	strh	r2, [r3, #54]	; 0x36
 800ae6c:	e011      	b.n	800ae92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae6e:	f7fc f9ff 	bl	8007270 <HAL_GetTick>
 800ae72:	4602      	mov	r2, r0
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d803      	bhi.n	800ae86 <HAL_SPI_Transmit+0x168>
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae84:	d102      	bne.n	800ae8c <HAL_SPI_Transmit+0x16e>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d102      	bne.n	800ae92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ae90:	e074      	b.n	800af7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1ce      	bne.n	800ae3a <HAL_SPI_Transmit+0x11c>
 800ae9c:	e04c      	b.n	800af38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <HAL_SPI_Transmit+0x18e>
 800aea6:	8afb      	ldrh	r3, [r7, #22]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d140      	bne.n	800af2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	330c      	adds	r3, #12
 800aeb6:	7812      	ldrb	r2, [r2, #0]
 800aeb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	3b01      	subs	r3, #1
 800aecc:	b29a      	uxth	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aed2:	e02c      	b.n	800af2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f003 0302 	and.w	r3, r3, #2
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d113      	bne.n	800af0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	330c      	adds	r3, #12
 800aeec:	7812      	ldrb	r2, [r2, #0]
 800aeee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aefe:	b29b      	uxth	r3, r3
 800af00:	3b01      	subs	r3, #1
 800af02:	b29a      	uxth	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	86da      	strh	r2, [r3, #54]	; 0x36
 800af08:	e011      	b.n	800af2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af0a:	f7fc f9b1 	bl	8007270 <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d803      	bhi.n	800af22 <HAL_SPI_Transmit+0x204>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af20:	d102      	bne.n	800af28 <HAL_SPI_Transmit+0x20a>
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d102      	bne.n	800af2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800af2c:	e026      	b.n	800af7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af32:	b29b      	uxth	r3, r3
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1cd      	bne.n	800aed4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af38:	69ba      	ldr	r2, [r7, #24]
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f000 fbcb 	bl	800b6d8 <SPI_EndRxTxTransaction>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2220      	movs	r2, #32
 800af4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10a      	bne.n	800af6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af56:	2300      	movs	r3, #0
 800af58:	613b      	str	r3, [r7, #16]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	613b      	str	r3, [r7, #16]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	613b      	str	r3, [r7, #16]
 800af6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	77fb      	strb	r3, [r7, #31]
 800af78:	e000      	b.n	800af7c <HAL_SPI_Transmit+0x25e>
  }

error:
 800af7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b088      	sub	sp, #32
 800af9a:	af02      	add	r7, sp, #8
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	60b9      	str	r1, [r7, #8]
 800afa0:	603b      	str	r3, [r7, #0]
 800afa2:	4613      	mov	r3, r2
 800afa4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afb2:	d112      	bne.n	800afda <HAL_SPI_Receive+0x44>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10e      	bne.n	800afda <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2204      	movs	r2, #4
 800afc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800afc4:	88fa      	ldrh	r2, [r7, #6]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	4613      	mov	r3, r2
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	68b9      	ldr	r1, [r7, #8]
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f8f1 	bl	800b1b8 <HAL_SPI_TransmitReceive>
 800afd6:	4603      	mov	r3, r0
 800afd8:	e0ea      	b.n	800b1b0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d101      	bne.n	800afe8 <HAL_SPI_Receive+0x52>
 800afe4:	2302      	movs	r3, #2
 800afe6:	e0e3      	b.n	800b1b0 <HAL_SPI_Receive+0x21a>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aff0:	f7fc f93e 	bl	8007270 <HAL_GetTick>
 800aff4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b01      	cmp	r3, #1
 800b000:	d002      	beq.n	800b008 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b002:	2302      	movs	r3, #2
 800b004:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b006:	e0ca      	b.n	800b19e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <HAL_SPI_Receive+0x7e>
 800b00e:	88fb      	ldrh	r3, [r7, #6]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b018:	e0c1      	b.n	800b19e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2204      	movs	r2, #4
 800b01e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	88fa      	ldrh	r2, [r7, #6]
 800b032:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	88fa      	ldrh	r2, [r7, #6]
 800b038:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2200      	movs	r2, #0
 800b056:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b060:	d10f      	bne.n	800b082 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b070:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b080:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b08c:	2b40      	cmp	r3, #64	; 0x40
 800b08e:	d007      	beq.n	800b0a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b09e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d162      	bne.n	800b16e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b0a8:	e02e      	b.n	800b108 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d115      	bne.n	800b0e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f103 020c 	add.w	r2, r3, #12
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c4:	7812      	ldrb	r2, [r2, #0]
 800b0c6:	b2d2      	uxtb	r2, r2
 800b0c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ce:	1c5a      	adds	r2, r3, #1
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b0e2:	e011      	b.n	800b108 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0e4:	f7fc f8c4 	bl	8007270 <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d803      	bhi.n	800b0fc <HAL_SPI_Receive+0x166>
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fa:	d102      	bne.n	800b102 <HAL_SPI_Receive+0x16c>
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d102      	bne.n	800b108 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b106:	e04a      	b.n	800b19e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1cb      	bne.n	800b0aa <HAL_SPI_Receive+0x114>
 800b112:	e031      	b.n	800b178 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d113      	bne.n	800b14a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68da      	ldr	r2, [r3, #12]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b12c:	b292      	uxth	r2, r2
 800b12e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b134:	1c9a      	adds	r2, r3, #2
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b13e:	b29b      	uxth	r3, r3
 800b140:	3b01      	subs	r3, #1
 800b142:	b29a      	uxth	r2, r3
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b148:	e011      	b.n	800b16e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b14a:	f7fc f891 	bl	8007270 <HAL_GetTick>
 800b14e:	4602      	mov	r2, r0
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d803      	bhi.n	800b162 <HAL_SPI_Receive+0x1cc>
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b160:	d102      	bne.n	800b168 <HAL_SPI_Receive+0x1d2>
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d102      	bne.n	800b16e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b16c:	e017      	b.n	800b19e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b172:	b29b      	uxth	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1cd      	bne.n	800b114 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 fa45 	bl	800b60c <SPI_EndRxTransaction>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2220      	movs	r2, #32
 800b18c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b192:	2b00      	cmp	r3, #0
 800b194:	d002      	beq.n	800b19c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	75fb      	strb	r3, [r7, #23]
 800b19a:	e000      	b.n	800b19e <HAL_SPI_Receive+0x208>
  }

error :
 800b19c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08c      	sub	sp, #48	; 0x30
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
 800b1c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d101      	bne.n	800b1de <HAL_SPI_TransmitReceive+0x26>
 800b1da:	2302      	movs	r3, #2
 800b1dc:	e18a      	b.n	800b4f4 <HAL_SPI_TransmitReceive+0x33c>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1e6:	f7fc f843 	bl	8007270 <HAL_GetTick>
 800b1ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b1fc:	887b      	ldrh	r3, [r7, #2]
 800b1fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b204:	2b01      	cmp	r3, #1
 800b206:	d00f      	beq.n	800b228 <HAL_SPI_TransmitReceive+0x70>
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b20e:	d107      	bne.n	800b220 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d103      	bne.n	800b220 <HAL_SPI_TransmitReceive+0x68>
 800b218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b21c:	2b04      	cmp	r3, #4
 800b21e:	d003      	beq.n	800b228 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b220:	2302      	movs	r3, #2
 800b222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b226:	e15b      	b.n	800b4e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d005      	beq.n	800b23a <HAL_SPI_TransmitReceive+0x82>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <HAL_SPI_TransmitReceive+0x82>
 800b234:	887b      	ldrh	r3, [r7, #2]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d103      	bne.n	800b242 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b240:	e14e      	b.n	800b4e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	d003      	beq.n	800b256 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2205      	movs	r2, #5
 800b252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	887a      	ldrh	r2, [r7, #2]
 800b266:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	887a      	ldrh	r2, [r7, #2]
 800b26c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	887a      	ldrh	r2, [r7, #2]
 800b278:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	887a      	ldrh	r2, [r7, #2]
 800b27e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b296:	2b40      	cmp	r3, #64	; 0x40
 800b298:	d007      	beq.n	800b2aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2b2:	d178      	bne.n	800b3a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <HAL_SPI_TransmitReceive+0x10a>
 800b2bc:	8b7b      	ldrh	r3, [r7, #26]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d166      	bne.n	800b390 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c6:	881a      	ldrh	r2, [r3, #0]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d2:	1c9a      	adds	r2, r3, #2
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2e6:	e053      	b.n	800b390 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	f003 0302 	and.w	r3, r3, #2
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d11b      	bne.n	800b32e <HAL_SPI_TransmitReceive+0x176>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d016      	beq.n	800b32e <HAL_SPI_TransmitReceive+0x176>
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	2b01      	cmp	r3, #1
 800b304:	d113      	bne.n	800b32e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b30a:	881a      	ldrh	r2, [r3, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b316:	1c9a      	adds	r2, r3, #2
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b320:	b29b      	uxth	r3, r3
 800b322:	3b01      	subs	r3, #1
 800b324:	b29a      	uxth	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	f003 0301 	and.w	r3, r3, #1
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d119      	bne.n	800b370 <HAL_SPI_TransmitReceive+0x1b8>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b340:	b29b      	uxth	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d014      	beq.n	800b370 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68da      	ldr	r2, [r3, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b350:	b292      	uxth	r2, r2
 800b352:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b358:	1c9a      	adds	r2, r3, #2
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b362:	b29b      	uxth	r3, r3
 800b364:	3b01      	subs	r3, #1
 800b366:	b29a      	uxth	r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b36c:	2301      	movs	r3, #1
 800b36e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b370:	f7fb ff7e 	bl	8007270 <HAL_GetTick>
 800b374:	4602      	mov	r2, r0
 800b376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d807      	bhi.n	800b390 <HAL_SPI_TransmitReceive+0x1d8>
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b386:	d003      	beq.n	800b390 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b388:	2303      	movs	r3, #3
 800b38a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b38e:	e0a7      	b.n	800b4e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b394:	b29b      	uxth	r3, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1a6      	bne.n	800b2e8 <HAL_SPI_TransmitReceive+0x130>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1a1      	bne.n	800b2e8 <HAL_SPI_TransmitReceive+0x130>
 800b3a4:	e07c      	b.n	800b4a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <HAL_SPI_TransmitReceive+0x1fc>
 800b3ae:	8b7b      	ldrh	r3, [r7, #26]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d16b      	bne.n	800b48c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	330c      	adds	r3, #12
 800b3be:	7812      	ldrb	r2, [r2, #0]
 800b3c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c6:	1c5a      	adds	r2, r3, #1
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b3da:	e057      	b.n	800b48c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f003 0302 	and.w	r3, r3, #2
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d11c      	bne.n	800b424 <HAL_SPI_TransmitReceive+0x26c>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d017      	beq.n	800b424 <HAL_SPI_TransmitReceive+0x26c>
 800b3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d114      	bne.n	800b424 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	330c      	adds	r3, #12
 800b404:	7812      	ldrb	r2, [r2, #0]
 800b406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b416:	b29b      	uxth	r3, r3
 800b418:	3b01      	subs	r3, #1
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b420:	2300      	movs	r3, #0
 800b422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d119      	bne.n	800b466 <HAL_SPI_TransmitReceive+0x2ae>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b436:	b29b      	uxth	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d014      	beq.n	800b466 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68da      	ldr	r2, [r3, #12]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	1c5a      	adds	r2, r3, #1
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b458:	b29b      	uxth	r3, r3
 800b45a:	3b01      	subs	r3, #1
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b462:	2301      	movs	r3, #1
 800b464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b466:	f7fb ff03 	bl	8007270 <HAL_GetTick>
 800b46a:	4602      	mov	r2, r0
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b472:	429a      	cmp	r2, r3
 800b474:	d803      	bhi.n	800b47e <HAL_SPI_TransmitReceive+0x2c6>
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b47c:	d102      	bne.n	800b484 <HAL_SPI_TransmitReceive+0x2cc>
 800b47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b480:	2b00      	cmp	r3, #0
 800b482:	d103      	bne.n	800b48c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b48a:	e029      	b.n	800b4e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b490:	b29b      	uxth	r3, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1a2      	bne.n	800b3dc <HAL_SPI_TransmitReceive+0x224>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d19d      	bne.n	800b3dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 f917 	bl	800b6d8 <SPI_EndRxTxTransaction>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d006      	beq.n	800b4be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2220      	movs	r2, #32
 800b4ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b4bc:	e010      	b.n	800b4e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10b      	bne.n	800b4de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	617b      	str	r3, [r7, #20]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	617b      	str	r3, [r7, #20]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	617b      	str	r3, [r7, #20]
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	e000      	b.n	800b4e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b4de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b4f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3730      	adds	r7, #48	; 0x30
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b088      	sub	sp, #32
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	603b      	str	r3, [r7, #0]
 800b508:	4613      	mov	r3, r2
 800b50a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b50c:	f7fb feb0 	bl	8007270 <HAL_GetTick>
 800b510:	4602      	mov	r2, r0
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	1a9b      	subs	r3, r3, r2
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	4413      	add	r3, r2
 800b51a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b51c:	f7fb fea8 	bl	8007270 <HAL_GetTick>
 800b520:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b522:	4b39      	ldr	r3, [pc, #228]	; (800b608 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	015b      	lsls	r3, r3, #5
 800b528:	0d1b      	lsrs	r3, r3, #20
 800b52a:	69fa      	ldr	r2, [r7, #28]
 800b52c:	fb02 f303 	mul.w	r3, r2, r3
 800b530:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b532:	e054      	b.n	800b5de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53a:	d050      	beq.n	800b5de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b53c:	f7fb fe98 	bl	8007270 <HAL_GetTick>
 800b540:	4602      	mov	r2, r0
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	69fa      	ldr	r2, [r7, #28]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d902      	bls.n	800b552 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d13d      	bne.n	800b5ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b560:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b56a:	d111      	bne.n	800b590 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b574:	d004      	beq.n	800b580 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b57e:	d107      	bne.n	800b590 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b58e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b598:	d10f      	bne.n	800b5ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5a8:	601a      	str	r2, [r3, #0]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b5b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e017      	b.n	800b5fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	bf0c      	ite	eq
 800b5ee:	2301      	moveq	r3, #1
 800b5f0:	2300      	movne	r3, #0
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d19b      	bne.n	800b534 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3720      	adds	r7, #32
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	20000000 	.word	0x20000000

0800b60c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af02      	add	r7, sp, #8
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b620:	d111      	bne.n	800b646 <SPI_EndRxTransaction+0x3a>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b62a:	d004      	beq.n	800b636 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b634:	d107      	bne.n	800b646 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b644:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b64e:	d12a      	bne.n	800b6a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b658:	d012      	beq.n	800b680 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2200      	movs	r2, #0
 800b662:	2180      	movs	r1, #128	; 0x80
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7ff ff49 	bl	800b4fc <SPI_WaitFlagStateUntilTimeout>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d02d      	beq.n	800b6cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b674:	f043 0220 	orr.w	r2, r3, #32
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e026      	b.n	800b6ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	2200      	movs	r2, #0
 800b688:	2101      	movs	r1, #1
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f7ff ff36 	bl	800b4fc <SPI_WaitFlagStateUntilTimeout>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d01a      	beq.n	800b6cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69a:	f043 0220 	orr.w	r2, r3, #32
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	e013      	b.n	800b6ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff ff23 	bl	800b4fc <SPI_WaitFlagStateUntilTimeout>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d007      	beq.n	800b6cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c0:	f043 0220 	orr.w	r2, r3, #32
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e000      	b.n	800b6ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
	...

0800b6d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b088      	sub	sp, #32
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b6e4:	4b1b      	ldr	r3, [pc, #108]	; (800b754 <SPI_EndRxTxTransaction+0x7c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a1b      	ldr	r2, [pc, #108]	; (800b758 <SPI_EndRxTxTransaction+0x80>)
 800b6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ee:	0d5b      	lsrs	r3, r3, #21
 800b6f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b6f4:	fb02 f303 	mul.w	r3, r2, r3
 800b6f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b702:	d112      	bne.n	800b72a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	2200      	movs	r2, #0
 800b70c:	2180      	movs	r1, #128	; 0x80
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff fef4 	bl	800b4fc <SPI_WaitFlagStateUntilTimeout>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d016      	beq.n	800b748 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b71e:	f043 0220 	orr.w	r2, r3, #32
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b726:	2303      	movs	r3, #3
 800b728:	e00f      	b.n	800b74a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00a      	beq.n	800b746 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	3b01      	subs	r3, #1
 800b734:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b740:	2b80      	cmp	r3, #128	; 0x80
 800b742:	d0f2      	beq.n	800b72a <SPI_EndRxTxTransaction+0x52>
 800b744:	e000      	b.n	800b748 <SPI_EndRxTxTransaction+0x70>
        break;
 800b746:	bf00      	nop
  }

  return HAL_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3718      	adds	r7, #24
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	20000000 	.word	0x20000000
 800b758:	165e9f81 	.word	0x165e9f81

0800b75c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e041      	b.n	800b7f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d106      	bne.n	800b788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7f7 fb5a 	bl	8002e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	3304      	adds	r3, #4
 800b798:	4619      	mov	r1, r3
 800b79a:	4610      	mov	r0, r2
 800b79c:	f000 fcea 	bl	800c174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d001      	beq.n	800b814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	e04e      	b.n	800b8b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f042 0201 	orr.w	r2, r2, #1
 800b82a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a23      	ldr	r2, [pc, #140]	; (800b8c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d022      	beq.n	800b87c <HAL_TIM_Base_Start_IT+0x80>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b83e:	d01d      	beq.n	800b87c <HAL_TIM_Base_Start_IT+0x80>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a1f      	ldr	r2, [pc, #124]	; (800b8c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d018      	beq.n	800b87c <HAL_TIM_Base_Start_IT+0x80>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a1e      	ldr	r2, [pc, #120]	; (800b8c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d013      	beq.n	800b87c <HAL_TIM_Base_Start_IT+0x80>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a1c      	ldr	r2, [pc, #112]	; (800b8cc <HAL_TIM_Base_Start_IT+0xd0>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d00e      	beq.n	800b87c <HAL_TIM_Base_Start_IT+0x80>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a1b      	ldr	r2, [pc, #108]	; (800b8d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d009      	beq.n	800b87c <HAL_TIM_Base_Start_IT+0x80>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a19      	ldr	r2, [pc, #100]	; (800b8d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d004      	beq.n	800b87c <HAL_TIM_Base_Start_IT+0x80>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a18      	ldr	r2, [pc, #96]	; (800b8d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d111      	bne.n	800b8a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b06      	cmp	r3, #6
 800b88c:	d010      	beq.n	800b8b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f042 0201 	orr.w	r2, r2, #1
 800b89c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b89e:	e007      	b.n	800b8b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f042 0201 	orr.w	r2, r2, #1
 800b8ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	40010000 	.word	0x40010000
 800b8c4:	40000400 	.word	0x40000400
 800b8c8:	40000800 	.word	0x40000800
 800b8cc:	40000c00 	.word	0x40000c00
 800b8d0:	40010400 	.word	0x40010400
 800b8d4:	40014000 	.word	0x40014000
 800b8d8:	40001800 	.word	0x40001800

0800b8dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e041      	b.n	800b972 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d106      	bne.n	800b908 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f839 	bl	800b97a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2202      	movs	r2, #2
 800b90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3304      	adds	r3, #4
 800b918:	4619      	mov	r1, r3
 800b91a:	4610      	mov	r0, r2
 800b91c:	f000 fc2a 	bl	800c174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b97a:	b480      	push	{r7}
 800b97c:	b083      	sub	sp, #12
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b982:	bf00      	nop
 800b984:	370c      	adds	r7, #12
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
	...

0800b990 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d109      	bne.n	800b9b4 <HAL_TIM_PWM_Start+0x24>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	bf14      	ite	ne
 800b9ac:	2301      	movne	r3, #1
 800b9ae:	2300      	moveq	r3, #0
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	e022      	b.n	800b9fa <HAL_TIM_PWM_Start+0x6a>
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	2b04      	cmp	r3, #4
 800b9b8:	d109      	bne.n	800b9ce <HAL_TIM_PWM_Start+0x3e>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	bf14      	ite	ne
 800b9c6:	2301      	movne	r3, #1
 800b9c8:	2300      	moveq	r3, #0
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	e015      	b.n	800b9fa <HAL_TIM_PWM_Start+0x6a>
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b08      	cmp	r3, #8
 800b9d2:	d109      	bne.n	800b9e8 <HAL_TIM_PWM_Start+0x58>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	bf14      	ite	ne
 800b9e0:	2301      	movne	r3, #1
 800b9e2:	2300      	moveq	r3, #0
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	e008      	b.n	800b9fa <HAL_TIM_PWM_Start+0x6a>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	bf14      	ite	ne
 800b9f4:	2301      	movne	r3, #1
 800b9f6:	2300      	moveq	r3, #0
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e07c      	b.n	800bafc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d104      	bne.n	800ba12 <HAL_TIM_PWM_Start+0x82>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba10:	e013      	b.n	800ba3a <HAL_TIM_PWM_Start+0xaa>
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b04      	cmp	r3, #4
 800ba16:	d104      	bne.n	800ba22 <HAL_TIM_PWM_Start+0x92>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba20:	e00b      	b.n	800ba3a <HAL_TIM_PWM_Start+0xaa>
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b08      	cmp	r3, #8
 800ba26:	d104      	bne.n	800ba32 <HAL_TIM_PWM_Start+0xa2>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba30:	e003      	b.n	800ba3a <HAL_TIM_PWM_Start+0xaa>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2202      	movs	r2, #2
 800ba36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f000 fe80 	bl	800c748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a2d      	ldr	r2, [pc, #180]	; (800bb04 <HAL_TIM_PWM_Start+0x174>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d004      	beq.n	800ba5c <HAL_TIM_PWM_Start+0xcc>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a2c      	ldr	r2, [pc, #176]	; (800bb08 <HAL_TIM_PWM_Start+0x178>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d101      	bne.n	800ba60 <HAL_TIM_PWM_Start+0xd0>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e000      	b.n	800ba62 <HAL_TIM_PWM_Start+0xd2>
 800ba60:	2300      	movs	r3, #0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a22      	ldr	r2, [pc, #136]	; (800bb04 <HAL_TIM_PWM_Start+0x174>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d022      	beq.n	800bac6 <HAL_TIM_PWM_Start+0x136>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba88:	d01d      	beq.n	800bac6 <HAL_TIM_PWM_Start+0x136>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a1f      	ldr	r2, [pc, #124]	; (800bb0c <HAL_TIM_PWM_Start+0x17c>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d018      	beq.n	800bac6 <HAL_TIM_PWM_Start+0x136>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a1d      	ldr	r2, [pc, #116]	; (800bb10 <HAL_TIM_PWM_Start+0x180>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d013      	beq.n	800bac6 <HAL_TIM_PWM_Start+0x136>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a1c      	ldr	r2, [pc, #112]	; (800bb14 <HAL_TIM_PWM_Start+0x184>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d00e      	beq.n	800bac6 <HAL_TIM_PWM_Start+0x136>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a16      	ldr	r2, [pc, #88]	; (800bb08 <HAL_TIM_PWM_Start+0x178>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d009      	beq.n	800bac6 <HAL_TIM_PWM_Start+0x136>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a18      	ldr	r2, [pc, #96]	; (800bb18 <HAL_TIM_PWM_Start+0x188>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d004      	beq.n	800bac6 <HAL_TIM_PWM_Start+0x136>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a16      	ldr	r2, [pc, #88]	; (800bb1c <HAL_TIM_PWM_Start+0x18c>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d111      	bne.n	800baea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	f003 0307 	and.w	r3, r3, #7
 800bad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2b06      	cmp	r3, #6
 800bad6:	d010      	beq.n	800bafa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f042 0201 	orr.w	r2, r2, #1
 800bae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae8:	e007      	b.n	800bafa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f042 0201 	orr.w	r2, r2, #1
 800baf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	40010000 	.word	0x40010000
 800bb08:	40010400 	.word	0x40010400
 800bb0c:	40000400 	.word	0x40000400
 800bb10:	40000800 	.word	0x40000800
 800bb14:	40000c00 	.word	0x40000c00
 800bb18:	40014000 	.word	0x40014000
 800bb1c:	40001800 	.word	0x40001800

0800bb20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 fe08 	bl	800c748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a2e      	ldr	r2, [pc, #184]	; (800bbf8 <HAL_TIM_PWM_Stop+0xd8>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d004      	beq.n	800bb4c <HAL_TIM_PWM_Stop+0x2c>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a2d      	ldr	r2, [pc, #180]	; (800bbfc <HAL_TIM_PWM_Stop+0xdc>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d101      	bne.n	800bb50 <HAL_TIM_PWM_Stop+0x30>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e000      	b.n	800bb52 <HAL_TIM_PWM_Stop+0x32>
 800bb50:	2300      	movs	r3, #0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d017      	beq.n	800bb86 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6a1a      	ldr	r2, [r3, #32]
 800bb5c:	f241 1311 	movw	r3, #4369	; 0x1111
 800bb60:	4013      	ands	r3, r2
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10f      	bne.n	800bb86 <HAL_TIM_PWM_Stop+0x66>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6a1a      	ldr	r2, [r3, #32]
 800bb6c:	f240 4344 	movw	r3, #1092	; 0x444
 800bb70:	4013      	ands	r3, r2
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d107      	bne.n	800bb86 <HAL_TIM_PWM_Stop+0x66>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6a1a      	ldr	r2, [r3, #32]
 800bb8c:	f241 1311 	movw	r3, #4369	; 0x1111
 800bb90:	4013      	ands	r3, r2
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10f      	bne.n	800bbb6 <HAL_TIM_PWM_Stop+0x96>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	6a1a      	ldr	r2, [r3, #32]
 800bb9c:	f240 4344 	movw	r3, #1092	; 0x444
 800bba0:	4013      	ands	r3, r2
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d107      	bne.n	800bbb6 <HAL_TIM_PWM_Stop+0x96>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f022 0201 	bic.w	r2, r2, #1
 800bbb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d104      	bne.n	800bbc6 <HAL_TIM_PWM_Stop+0xa6>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbc4:	e013      	b.n	800bbee <HAL_TIM_PWM_Stop+0xce>
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b04      	cmp	r3, #4
 800bbca:	d104      	bne.n	800bbd6 <HAL_TIM_PWM_Stop+0xb6>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbd4:	e00b      	b.n	800bbee <HAL_TIM_PWM_Stop+0xce>
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2b08      	cmp	r3, #8
 800bbda:	d104      	bne.n	800bbe6 <HAL_TIM_PWM_Stop+0xc6>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbe4:	e003      	b.n	800bbee <HAL_TIM_PWM_Stop+0xce>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	40010000 	.word	0x40010000
 800bbfc:	40010400 	.word	0x40010400

0800bc00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	f003 0302 	and.w	r3, r3, #2
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d122      	bne.n	800bc5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	f003 0302 	and.w	r3, r3, #2
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d11b      	bne.n	800bc5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f06f 0202 	mvn.w	r2, #2
 800bc2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	f003 0303 	and.w	r3, r3, #3
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d003      	beq.n	800bc4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fa77 	bl	800c136 <HAL_TIM_IC_CaptureCallback>
 800bc48:	e005      	b.n	800bc56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fa69 	bl	800c122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fa7a 	bl	800c14a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	f003 0304 	and.w	r3, r3, #4
 800bc66:	2b04      	cmp	r3, #4
 800bc68:	d122      	bne.n	800bcb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	f003 0304 	and.w	r3, r3, #4
 800bc74:	2b04      	cmp	r3, #4
 800bc76:	d11b      	bne.n	800bcb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f06f 0204 	mvn.w	r2, #4
 800bc80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2202      	movs	r2, #2
 800bc86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	699b      	ldr	r3, [r3, #24]
 800bc8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fa4d 	bl	800c136 <HAL_TIM_IC_CaptureCallback>
 800bc9c:	e005      	b.n	800bcaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fa3f 	bl	800c122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fa50 	bl	800c14a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	f003 0308 	and.w	r3, r3, #8
 800bcba:	2b08      	cmp	r3, #8
 800bcbc:	d122      	bne.n	800bd04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	f003 0308 	and.w	r3, r3, #8
 800bcc8:	2b08      	cmp	r3, #8
 800bcca:	d11b      	bne.n	800bd04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f06f 0208 	mvn.w	r2, #8
 800bcd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2204      	movs	r2, #4
 800bcda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	f003 0303 	and.w	r3, r3, #3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fa23 	bl	800c136 <HAL_TIM_IC_CaptureCallback>
 800bcf0:	e005      	b.n	800bcfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fa15 	bl	800c122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fa26 	bl	800c14a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	f003 0310 	and.w	r3, r3, #16
 800bd0e:	2b10      	cmp	r3, #16
 800bd10:	d122      	bne.n	800bd58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f003 0310 	and.w	r3, r3, #16
 800bd1c:	2b10      	cmp	r3, #16
 800bd1e:	d11b      	bne.n	800bd58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f06f 0210 	mvn.w	r2, #16
 800bd28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2208      	movs	r2, #8
 800bd2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	69db      	ldr	r3, [r3, #28]
 800bd36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f9f9 	bl	800c136 <HAL_TIM_IC_CaptureCallback>
 800bd44:	e005      	b.n	800bd52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f9eb 	bl	800c122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f9fc 	bl	800c14a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d10e      	bne.n	800bd84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d107      	bne.n	800bd84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f06f 0201 	mvn.w	r2, #1
 800bd7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7f6 fe4a 	bl	8002a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd8e:	2b80      	cmp	r3, #128	; 0x80
 800bd90:	d10e      	bne.n	800bdb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd9c:	2b80      	cmp	r3, #128	; 0x80
 800bd9e:	d107      	bne.n	800bdb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bda8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fd78 	bl	800c8a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdba:	2b40      	cmp	r3, #64	; 0x40
 800bdbc:	d10e      	bne.n	800bddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc8:	2b40      	cmp	r3, #64	; 0x40
 800bdca:	d107      	bne.n	800bddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bdd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f9c1 	bl	800c15e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	f003 0320 	and.w	r3, r3, #32
 800bde6:	2b20      	cmp	r3, #32
 800bde8:	d10e      	bne.n	800be08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	f003 0320 	and.w	r3, r3, #32
 800bdf4:	2b20      	cmp	r3, #32
 800bdf6:	d107      	bne.n	800be08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f06f 0220 	mvn.w	r2, #32
 800be00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fd42 	bl	800c88c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be08:	bf00      	nop
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be26:	2b01      	cmp	r3, #1
 800be28:	d101      	bne.n	800be2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800be2a:	2302      	movs	r3, #2
 800be2c:	e0ae      	b.n	800bf8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2b0c      	cmp	r3, #12
 800be3a:	f200 809f 	bhi.w	800bf7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800be3e:	a201      	add	r2, pc, #4	; (adr r2, 800be44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800be40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be44:	0800be79 	.word	0x0800be79
 800be48:	0800bf7d 	.word	0x0800bf7d
 800be4c:	0800bf7d 	.word	0x0800bf7d
 800be50:	0800bf7d 	.word	0x0800bf7d
 800be54:	0800beb9 	.word	0x0800beb9
 800be58:	0800bf7d 	.word	0x0800bf7d
 800be5c:	0800bf7d 	.word	0x0800bf7d
 800be60:	0800bf7d 	.word	0x0800bf7d
 800be64:	0800befb 	.word	0x0800befb
 800be68:	0800bf7d 	.word	0x0800bf7d
 800be6c:	0800bf7d 	.word	0x0800bf7d
 800be70:	0800bf7d 	.word	0x0800bf7d
 800be74:	0800bf3b 	.word	0x0800bf3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68b9      	ldr	r1, [r7, #8]
 800be7e:	4618      	mov	r0, r3
 800be80:	f000 fa18 	bl	800c2b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	699a      	ldr	r2, [r3, #24]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f042 0208 	orr.w	r2, r2, #8
 800be92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	699a      	ldr	r2, [r3, #24]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f022 0204 	bic.w	r2, r2, #4
 800bea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6999      	ldr	r1, [r3, #24]
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	691a      	ldr	r2, [r3, #16]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	619a      	str	r2, [r3, #24]
      break;
 800beb6:	e064      	b.n	800bf82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68b9      	ldr	r1, [r7, #8]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 fa68 	bl	800c394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	699a      	ldr	r2, [r3, #24]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	699a      	ldr	r2, [r3, #24]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6999      	ldr	r1, [r3, #24]
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	021a      	lsls	r2, r3, #8
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	430a      	orrs	r2, r1
 800bef6:	619a      	str	r2, [r3, #24]
      break;
 800bef8:	e043      	b.n	800bf82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68b9      	ldr	r1, [r7, #8]
 800bf00:	4618      	mov	r0, r3
 800bf02:	f000 fabd 	bl	800c480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	69da      	ldr	r2, [r3, #28]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f042 0208 	orr.w	r2, r2, #8
 800bf14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	69da      	ldr	r2, [r3, #28]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f022 0204 	bic.w	r2, r2, #4
 800bf24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	69d9      	ldr	r1, [r3, #28]
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	691a      	ldr	r2, [r3, #16]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	430a      	orrs	r2, r1
 800bf36:	61da      	str	r2, [r3, #28]
      break;
 800bf38:	e023      	b.n	800bf82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68b9      	ldr	r1, [r7, #8]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 fb11 	bl	800c568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	69da      	ldr	r2, [r3, #28]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	69da      	ldr	r2, [r3, #28]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	69d9      	ldr	r1, [r3, #28]
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	021a      	lsls	r2, r3, #8
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	61da      	str	r2, [r3, #28]
      break;
 800bf7a:	e002      	b.n	800bf82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	75fb      	strb	r3, [r7, #23]
      break;
 800bf80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3718      	adds	r7, #24
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d101      	bne.n	800bfb0 <HAL_TIM_ConfigClockSource+0x1c>
 800bfac:	2302      	movs	r3, #2
 800bfae:	e0b4      	b.n	800c11a <HAL_TIM_ConfigClockSource+0x186>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2202      	movs	r2, #2
 800bfbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bfce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bfd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfe8:	d03e      	beq.n	800c068 <HAL_TIM_ConfigClockSource+0xd4>
 800bfea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfee:	f200 8087 	bhi.w	800c100 <HAL_TIM_ConfigClockSource+0x16c>
 800bff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bff6:	f000 8086 	beq.w	800c106 <HAL_TIM_ConfigClockSource+0x172>
 800bffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bffe:	d87f      	bhi.n	800c100 <HAL_TIM_ConfigClockSource+0x16c>
 800c000:	2b70      	cmp	r3, #112	; 0x70
 800c002:	d01a      	beq.n	800c03a <HAL_TIM_ConfigClockSource+0xa6>
 800c004:	2b70      	cmp	r3, #112	; 0x70
 800c006:	d87b      	bhi.n	800c100 <HAL_TIM_ConfigClockSource+0x16c>
 800c008:	2b60      	cmp	r3, #96	; 0x60
 800c00a:	d050      	beq.n	800c0ae <HAL_TIM_ConfigClockSource+0x11a>
 800c00c:	2b60      	cmp	r3, #96	; 0x60
 800c00e:	d877      	bhi.n	800c100 <HAL_TIM_ConfigClockSource+0x16c>
 800c010:	2b50      	cmp	r3, #80	; 0x50
 800c012:	d03c      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0xfa>
 800c014:	2b50      	cmp	r3, #80	; 0x50
 800c016:	d873      	bhi.n	800c100 <HAL_TIM_ConfigClockSource+0x16c>
 800c018:	2b40      	cmp	r3, #64	; 0x40
 800c01a:	d058      	beq.n	800c0ce <HAL_TIM_ConfigClockSource+0x13a>
 800c01c:	2b40      	cmp	r3, #64	; 0x40
 800c01e:	d86f      	bhi.n	800c100 <HAL_TIM_ConfigClockSource+0x16c>
 800c020:	2b30      	cmp	r3, #48	; 0x30
 800c022:	d064      	beq.n	800c0ee <HAL_TIM_ConfigClockSource+0x15a>
 800c024:	2b30      	cmp	r3, #48	; 0x30
 800c026:	d86b      	bhi.n	800c100 <HAL_TIM_ConfigClockSource+0x16c>
 800c028:	2b20      	cmp	r3, #32
 800c02a:	d060      	beq.n	800c0ee <HAL_TIM_ConfigClockSource+0x15a>
 800c02c:	2b20      	cmp	r3, #32
 800c02e:	d867      	bhi.n	800c100 <HAL_TIM_ConfigClockSource+0x16c>
 800c030:	2b00      	cmp	r3, #0
 800c032:	d05c      	beq.n	800c0ee <HAL_TIM_ConfigClockSource+0x15a>
 800c034:	2b10      	cmp	r3, #16
 800c036:	d05a      	beq.n	800c0ee <HAL_TIM_ConfigClockSource+0x15a>
 800c038:	e062      	b.n	800c100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	6899      	ldr	r1, [r3, #8]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	f000 fb5d 	bl	800c708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c05c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	609a      	str	r2, [r3, #8]
      break;
 800c066:	e04f      	b.n	800c108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6818      	ldr	r0, [r3, #0]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	6899      	ldr	r1, [r3, #8]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	f000 fb46 	bl	800c708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	689a      	ldr	r2, [r3, #8]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c08a:	609a      	str	r2, [r3, #8]
      break;
 800c08c:	e03c      	b.n	800c108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6818      	ldr	r0, [r3, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	6859      	ldr	r1, [r3, #4]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	461a      	mov	r2, r3
 800c09c:	f000 faba 	bl	800c614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2150      	movs	r1, #80	; 0x50
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 fb13 	bl	800c6d2 <TIM_ITRx_SetConfig>
      break;
 800c0ac:	e02c      	b.n	800c108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6818      	ldr	r0, [r3, #0]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	6859      	ldr	r1, [r3, #4]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f000 fad9 	bl	800c672 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2160      	movs	r1, #96	; 0x60
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 fb03 	bl	800c6d2 <TIM_ITRx_SetConfig>
      break;
 800c0cc:	e01c      	b.n	800c108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6818      	ldr	r0, [r3, #0]
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	6859      	ldr	r1, [r3, #4]
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f000 fa9a 	bl	800c614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2140      	movs	r1, #64	; 0x40
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 faf3 	bl	800c6d2 <TIM_ITRx_SetConfig>
      break;
 800c0ec:	e00c      	b.n	800c108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	f000 faea 	bl	800c6d2 <TIM_ITRx_SetConfig>
      break;
 800c0fe:	e003      	b.n	800c108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	73fb      	strb	r3, [r7, #15]
      break;
 800c104:	e000      	b.n	800c108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c118:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c122:	b480      	push	{r7}
 800c124:	b083      	sub	sp, #12
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c12a:	bf00      	nop
 800c12c:	370c      	adds	r7, #12
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr

0800c136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c136:	b480      	push	{r7}
 800c138:	b083      	sub	sp, #12
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c13e:	bf00      	nop
 800c140:	370c      	adds	r7, #12
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b083      	sub	sp, #12
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c152:	bf00      	nop
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c15e:	b480      	push	{r7}
 800c160:	b083      	sub	sp, #12
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c166:	bf00      	nop
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
	...

0800c174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a40      	ldr	r2, [pc, #256]	; (800c288 <TIM_Base_SetConfig+0x114>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d013      	beq.n	800c1b4 <TIM_Base_SetConfig+0x40>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c192:	d00f      	beq.n	800c1b4 <TIM_Base_SetConfig+0x40>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a3d      	ldr	r2, [pc, #244]	; (800c28c <TIM_Base_SetConfig+0x118>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d00b      	beq.n	800c1b4 <TIM_Base_SetConfig+0x40>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4a3c      	ldr	r2, [pc, #240]	; (800c290 <TIM_Base_SetConfig+0x11c>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d007      	beq.n	800c1b4 <TIM_Base_SetConfig+0x40>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a3b      	ldr	r2, [pc, #236]	; (800c294 <TIM_Base_SetConfig+0x120>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d003      	beq.n	800c1b4 <TIM_Base_SetConfig+0x40>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a3a      	ldr	r2, [pc, #232]	; (800c298 <TIM_Base_SetConfig+0x124>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d108      	bne.n	800c1c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a2f      	ldr	r2, [pc, #188]	; (800c288 <TIM_Base_SetConfig+0x114>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d02b      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1d4:	d027      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a2c      	ldr	r2, [pc, #176]	; (800c28c <TIM_Base_SetConfig+0x118>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d023      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a2b      	ldr	r2, [pc, #172]	; (800c290 <TIM_Base_SetConfig+0x11c>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d01f      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a2a      	ldr	r2, [pc, #168]	; (800c294 <TIM_Base_SetConfig+0x120>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d01b      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a29      	ldr	r2, [pc, #164]	; (800c298 <TIM_Base_SetConfig+0x124>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d017      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a28      	ldr	r2, [pc, #160]	; (800c29c <TIM_Base_SetConfig+0x128>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d013      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a27      	ldr	r2, [pc, #156]	; (800c2a0 <TIM_Base_SetConfig+0x12c>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d00f      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a26      	ldr	r2, [pc, #152]	; (800c2a4 <TIM_Base_SetConfig+0x130>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d00b      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a25      	ldr	r2, [pc, #148]	; (800c2a8 <TIM_Base_SetConfig+0x134>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d007      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a24      	ldr	r2, [pc, #144]	; (800c2ac <TIM_Base_SetConfig+0x138>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d003      	beq.n	800c226 <TIM_Base_SetConfig+0xb2>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a23      	ldr	r2, [pc, #140]	; (800c2b0 <TIM_Base_SetConfig+0x13c>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d108      	bne.n	800c238 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c22c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	4313      	orrs	r3, r2
 800c236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	695b      	ldr	r3, [r3, #20]
 800c242:	4313      	orrs	r3, r2
 800c244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	689a      	ldr	r2, [r3, #8]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a0a      	ldr	r2, [pc, #40]	; (800c288 <TIM_Base_SetConfig+0x114>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d003      	beq.n	800c26c <TIM_Base_SetConfig+0xf8>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a0c      	ldr	r2, [pc, #48]	; (800c298 <TIM_Base_SetConfig+0x124>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d103      	bne.n	800c274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	691a      	ldr	r2, [r3, #16]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	615a      	str	r2, [r3, #20]
}
 800c27a:	bf00      	nop
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	40010000 	.word	0x40010000
 800c28c:	40000400 	.word	0x40000400
 800c290:	40000800 	.word	0x40000800
 800c294:	40000c00 	.word	0x40000c00
 800c298:	40010400 	.word	0x40010400
 800c29c:	40014000 	.word	0x40014000
 800c2a0:	40014400 	.word	0x40014400
 800c2a4:	40014800 	.word	0x40014800
 800c2a8:	40001800 	.word	0x40001800
 800c2ac:	40001c00 	.word	0x40001c00
 800c2b0:	40002000 	.word	0x40002000

0800c2b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b087      	sub	sp, #28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a1b      	ldr	r3, [r3, #32]
 800c2c2:	f023 0201 	bic.w	r2, r3, #1
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a1b      	ldr	r3, [r3, #32]
 800c2ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	699b      	ldr	r3, [r3, #24]
 800c2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f023 0303 	bic.w	r3, r3, #3
 800c2ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f023 0302 	bic.w	r3, r3, #2
 800c2fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	697a      	ldr	r2, [r7, #20]
 800c304:	4313      	orrs	r3, r2
 800c306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a20      	ldr	r2, [pc, #128]	; (800c38c <TIM_OC1_SetConfig+0xd8>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d003      	beq.n	800c318 <TIM_OC1_SetConfig+0x64>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a1f      	ldr	r2, [pc, #124]	; (800c390 <TIM_OC1_SetConfig+0xdc>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d10c      	bne.n	800c332 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	f023 0308 	bic.w	r3, r3, #8
 800c31e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	4313      	orrs	r3, r2
 800c328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f023 0304 	bic.w	r3, r3, #4
 800c330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a15      	ldr	r2, [pc, #84]	; (800c38c <TIM_OC1_SetConfig+0xd8>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d003      	beq.n	800c342 <TIM_OC1_SetConfig+0x8e>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a14      	ldr	r2, [pc, #80]	; (800c390 <TIM_OC1_SetConfig+0xdc>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d111      	bne.n	800c366 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	695b      	ldr	r3, [r3, #20]
 800c356:	693a      	ldr	r2, [r7, #16]
 800c358:	4313      	orrs	r3, r2
 800c35a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	693a      	ldr	r2, [r7, #16]
 800c362:	4313      	orrs	r3, r2
 800c364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	697a      	ldr	r2, [r7, #20]
 800c37e:	621a      	str	r2, [r3, #32]
}
 800c380:	bf00      	nop
 800c382:	371c      	adds	r7, #28
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	40010000 	.word	0x40010000
 800c390:	40010400 	.word	0x40010400

0800c394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c394:	b480      	push	{r7}
 800c396:	b087      	sub	sp, #28
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	f023 0210 	bic.w	r2, r3, #16
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	021b      	lsls	r3, r3, #8
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	f023 0320 	bic.w	r3, r3, #32
 800c3de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	011b      	lsls	r3, r3, #4
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a22      	ldr	r2, [pc, #136]	; (800c478 <TIM_OC2_SetConfig+0xe4>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d003      	beq.n	800c3fc <TIM_OC2_SetConfig+0x68>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a21      	ldr	r2, [pc, #132]	; (800c47c <TIM_OC2_SetConfig+0xe8>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d10d      	bne.n	800c418 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	011b      	lsls	r3, r3, #4
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c416:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a17      	ldr	r2, [pc, #92]	; (800c478 <TIM_OC2_SetConfig+0xe4>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d003      	beq.n	800c428 <TIM_OC2_SetConfig+0x94>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a16      	ldr	r2, [pc, #88]	; (800c47c <TIM_OC2_SetConfig+0xe8>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d113      	bne.n	800c450 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c42e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	693a      	ldr	r2, [r7, #16]
 800c440:	4313      	orrs	r3, r2
 800c442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	693a      	ldr	r2, [r7, #16]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	693a      	ldr	r2, [r7, #16]
 800c454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	685a      	ldr	r2, [r3, #4]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	621a      	str	r2, [r3, #32]
}
 800c46a:	bf00      	nop
 800c46c:	371c      	adds	r7, #28
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	40010000 	.word	0x40010000
 800c47c:	40010400 	.word	0x40010400

0800c480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	69db      	ldr	r3, [r3, #28]
 800c4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f023 0303 	bic.w	r3, r3, #3
 800c4b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	021b      	lsls	r3, r3, #8
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a21      	ldr	r2, [pc, #132]	; (800c560 <TIM_OC3_SetConfig+0xe0>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d003      	beq.n	800c4e6 <TIM_OC3_SetConfig+0x66>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a20      	ldr	r2, [pc, #128]	; (800c564 <TIM_OC3_SetConfig+0xe4>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d10d      	bne.n	800c502 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a16      	ldr	r2, [pc, #88]	; (800c560 <TIM_OC3_SetConfig+0xe0>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d003      	beq.n	800c512 <TIM_OC3_SetConfig+0x92>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a15      	ldr	r2, [pc, #84]	; (800c564 <TIM_OC3_SetConfig+0xe4>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d113      	bne.n	800c53a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	011b      	lsls	r3, r3, #4
 800c528:	693a      	ldr	r2, [r7, #16]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	011b      	lsls	r3, r3, #4
 800c534:	693a      	ldr	r2, [r7, #16]
 800c536:	4313      	orrs	r3, r2
 800c538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	685a      	ldr	r2, [r3, #4]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	621a      	str	r2, [r3, #32]
}
 800c554:	bf00      	nop
 800c556:	371c      	adds	r7, #28
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	40010000 	.word	0x40010000
 800c564:	40010400 	.word	0x40010400

0800c568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c568:	b480      	push	{r7}
 800c56a:	b087      	sub	sp, #28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c59e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	021b      	lsls	r3, r3, #8
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	031b      	lsls	r3, r3, #12
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a12      	ldr	r2, [pc, #72]	; (800c60c <TIM_OC4_SetConfig+0xa4>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d003      	beq.n	800c5d0 <TIM_OC4_SetConfig+0x68>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a11      	ldr	r2, [pc, #68]	; (800c610 <TIM_OC4_SetConfig+0xa8>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d109      	bne.n	800c5e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	695b      	ldr	r3, [r3, #20]
 800c5dc:	019b      	lsls	r3, r3, #6
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	697a      	ldr	r2, [r7, #20]
 800c5e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	693a      	ldr	r2, [r7, #16]
 800c5fc:	621a      	str	r2, [r3, #32]
}
 800c5fe:	bf00      	nop
 800c600:	371c      	adds	r7, #28
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	40010000 	.word	0x40010000
 800c610:	40010400 	.word	0x40010400

0800c614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c614:	b480      	push	{r7}
 800c616:	b087      	sub	sp, #28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	f023 0201 	bic.w	r2, r3, #1
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c63e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	011b      	lsls	r3, r3, #4
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	4313      	orrs	r3, r2
 800c648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	f023 030a 	bic.w	r3, r3, #10
 800c650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c652:	697a      	ldr	r2, [r7, #20]
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	4313      	orrs	r3, r2
 800c658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	693a      	ldr	r2, [r7, #16]
 800c65e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	621a      	str	r2, [r3, #32]
}
 800c666:	bf00      	nop
 800c668:	371c      	adds	r7, #28
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr

0800c672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c672:	b480      	push	{r7}
 800c674:	b087      	sub	sp, #28
 800c676:	af00      	add	r7, sp, #0
 800c678:	60f8      	str	r0, [r7, #12]
 800c67a:	60b9      	str	r1, [r7, #8]
 800c67c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6a1b      	ldr	r3, [r3, #32]
 800c682:	f023 0210 	bic.w	r2, r3, #16
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	699b      	ldr	r3, [r3, #24]
 800c68e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6a1b      	ldr	r3, [r3, #32]
 800c694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c69c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	031b      	lsls	r3, r3, #12
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c6ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	011b      	lsls	r3, r3, #4
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	697a      	ldr	r2, [r7, #20]
 800c6be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	693a      	ldr	r2, [r7, #16]
 800c6c4:	621a      	str	r2, [r3, #32]
}
 800c6c6:	bf00      	nop
 800c6c8:	371c      	adds	r7, #28
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr

0800c6d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6d2:	b480      	push	{r7}
 800c6d4:	b085      	sub	sp, #20
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	f043 0307 	orr.w	r3, r3, #7
 800c6f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	609a      	str	r2, [r3, #8]
}
 800c6fc:	bf00      	nop
 800c6fe:	3714      	adds	r7, #20
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	021a      	lsls	r2, r3, #8
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	431a      	orrs	r2, r3
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	4313      	orrs	r3, r2
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	4313      	orrs	r3, r2
 800c734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	609a      	str	r2, [r3, #8]
}
 800c73c:	bf00      	nop
 800c73e:	371c      	adds	r7, #28
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c748:	b480      	push	{r7}
 800c74a:	b087      	sub	sp, #28
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	f003 031f 	and.w	r3, r3, #31
 800c75a:	2201      	movs	r2, #1
 800c75c:	fa02 f303 	lsl.w	r3, r2, r3
 800c760:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6a1a      	ldr	r2, [r3, #32]
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	43db      	mvns	r3, r3
 800c76a:	401a      	ands	r2, r3
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6a1a      	ldr	r2, [r3, #32]
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	f003 031f 	and.w	r3, r3, #31
 800c77a:	6879      	ldr	r1, [r7, #4]
 800c77c:	fa01 f303 	lsl.w	r3, r1, r3
 800c780:	431a      	orrs	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	621a      	str	r2, [r3, #32]
}
 800c786:	bf00      	nop
 800c788:	371c      	adds	r7, #28
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
	...

0800c794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d101      	bne.n	800c7ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c7a8:	2302      	movs	r3, #2
 800c7aa:	e05a      	b.n	800c862 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a21      	ldr	r2, [pc, #132]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d022      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7f8:	d01d      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a1d      	ldr	r2, [pc, #116]	; (800c874 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d018      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a1b      	ldr	r2, [pc, #108]	; (800c878 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d013      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a1a      	ldr	r2, [pc, #104]	; (800c87c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d00e      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a18      	ldr	r2, [pc, #96]	; (800c880 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d009      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a17      	ldr	r2, [pc, #92]	; (800c884 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d004      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a15      	ldr	r2, [pc, #84]	; (800c888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d10c      	bne.n	800c850 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c83c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	4313      	orrs	r3, r2
 800c846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3714      	adds	r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	40010000 	.word	0x40010000
 800c874:	40000400 	.word	0x40000400
 800c878:	40000800 	.word	0x40000800
 800c87c:	40000c00 	.word	0x40000c00
 800c880:	40010400 	.word	0x40010400
 800c884:	40014000 	.word	0x40014000
 800c888:	40001800 	.word	0x40001800

0800c88c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d101      	bne.n	800c8c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e03f      	b.n	800c946 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d106      	bne.n	800c8e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7f6 fb06 	bl	8002eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2224      	movs	r2, #36	; 0x24
 800c8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f9cb 	bl	800cc94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	691a      	ldr	r2, [r3, #16]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c90c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	695a      	ldr	r2, [r3, #20]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c91c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	68da      	ldr	r2, [r3, #12]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c92c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2220      	movs	r2, #32
 800c938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2220      	movs	r2, #32
 800c940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b08a      	sub	sp, #40	; 0x28
 800c952:	af02      	add	r7, sp, #8
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	60b9      	str	r1, [r7, #8]
 800c958:	603b      	str	r3, [r7, #0]
 800c95a:	4613      	mov	r3, r2
 800c95c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c95e:	2300      	movs	r3, #0
 800c960:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b20      	cmp	r3, #32
 800c96c:	d17c      	bne.n	800ca68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d002      	beq.n	800c97a <HAL_UART_Transmit+0x2c>
 800c974:	88fb      	ldrh	r3, [r7, #6]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d101      	bne.n	800c97e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e075      	b.n	800ca6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c984:	2b01      	cmp	r3, #1
 800c986:	d101      	bne.n	800c98c <HAL_UART_Transmit+0x3e>
 800c988:	2302      	movs	r3, #2
 800c98a:	e06e      	b.n	800ca6a <HAL_UART_Transmit+0x11c>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2200      	movs	r2, #0
 800c998:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2221      	movs	r2, #33	; 0x21
 800c99e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c9a2:	f7fa fc65 	bl	8007270 <HAL_GetTick>
 800c9a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	88fa      	ldrh	r2, [r7, #6]
 800c9ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	88fa      	ldrh	r2, [r7, #6]
 800c9b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9bc:	d108      	bne.n	800c9d0 <HAL_UART_Transmit+0x82>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d104      	bne.n	800c9d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	61bb      	str	r3, [r7, #24]
 800c9ce:	e003      	b.n	800c9d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c9e0:	e02a      	b.n	800ca38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2180      	movs	r1, #128	; 0x80
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f000 f8e2 	bl	800cbb6 <UART_WaitOnFlagUntilTimeout>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c9f8:	2303      	movs	r3, #3
 800c9fa:	e036      	b.n	800ca6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10b      	bne.n	800ca1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	881b      	ldrh	r3, [r3, #0]
 800ca06:	461a      	mov	r2, r3
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	3302      	adds	r3, #2
 800ca16:	61bb      	str	r3, [r7, #24]
 800ca18:	e007      	b.n	800ca2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	781a      	ldrb	r2, [r3, #0]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	3301      	adds	r3, #1
 800ca28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	3b01      	subs	r3, #1
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1cf      	bne.n	800c9e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	2140      	movs	r1, #64	; 0x40
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f000 f8b2 	bl	800cbb6 <UART_WaitOnFlagUntilTimeout>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	e006      	b.n	800ca6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2220      	movs	r2, #32
 800ca60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	e000      	b.n	800ca6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ca68:	2302      	movs	r3, #2
  }
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3720      	adds	r7, #32
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b08a      	sub	sp, #40	; 0x28
 800ca76:	af02      	add	r7, sp, #8
 800ca78:	60f8      	str	r0, [r7, #12]
 800ca7a:	60b9      	str	r1, [r7, #8]
 800ca7c:	603b      	str	r3, [r7, #0]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ca82:	2300      	movs	r3, #0
 800ca84:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	2b20      	cmp	r3, #32
 800ca90:	f040 808c 	bne.w	800cbac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d002      	beq.n	800caa0 <HAL_UART_Receive+0x2e>
 800ca9a:	88fb      	ldrh	r3, [r7, #6]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d101      	bne.n	800caa4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
 800caa2:	e084      	b.n	800cbae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d101      	bne.n	800cab2 <HAL_UART_Receive+0x40>
 800caae:	2302      	movs	r3, #2
 800cab0:	e07d      	b.n	800cbae <HAL_UART_Receive+0x13c>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2222      	movs	r2, #34	; 0x22
 800cac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2200      	movs	r2, #0
 800cacc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cace:	f7fa fbcf 	bl	8007270 <HAL_GetTick>
 800cad2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	88fa      	ldrh	r2, [r7, #6]
 800cad8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	88fa      	ldrh	r2, [r7, #6]
 800cade:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cae8:	d108      	bne.n	800cafc <HAL_UART_Receive+0x8a>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d104      	bne.n	800cafc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	61bb      	str	r3, [r7, #24]
 800cafa:	e003      	b.n	800cb04 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb00:	2300      	movs	r3, #0
 800cb02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800cb0c:	e043      	b.n	800cb96 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	2200      	movs	r2, #0
 800cb16:	2120      	movs	r1, #32
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f000 f84c 	bl	800cbb6 <UART_WaitOnFlagUntilTimeout>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800cb24:	2303      	movs	r3, #3
 800cb26:	e042      	b.n	800cbae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10c      	bne.n	800cb48 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	3302      	adds	r3, #2
 800cb44:	61bb      	str	r3, [r7, #24]
 800cb46:	e01f      	b.n	800cb88 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb50:	d007      	beq.n	800cb62 <HAL_UART_Receive+0xf0>
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10a      	bne.n	800cb70 <HAL_UART_Receive+0xfe>
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	701a      	strb	r2, [r3, #0]
 800cb6e:	e008      	b.n	800cb82 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	3301      	adds	r3, #1
 800cb86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1b6      	bne.n	800cb0e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2220      	movs	r2, #32
 800cba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	e000      	b.n	800cbae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800cbac:	2302      	movs	r3, #2
  }
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3720      	adds	r7, #32
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b090      	sub	sp, #64	; 0x40
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	60f8      	str	r0, [r7, #12]
 800cbbe:	60b9      	str	r1, [r7, #8]
 800cbc0:	603b      	str	r3, [r7, #0]
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbc6:	e050      	b.n	800cc6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbce:	d04c      	beq.n	800cc6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cbd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d007      	beq.n	800cbe6 <UART_WaitOnFlagUntilTimeout+0x30>
 800cbd6:	f7fa fb4b 	bl	8007270 <HAL_GetTick>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d241      	bcs.n	800cc6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	330c      	adds	r3, #12
 800cbec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf0:	e853 3f00 	ldrex	r3, [r3]
 800cbf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	330c      	adds	r3, #12
 800cc04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc06:	637a      	str	r2, [r7, #52]	; 0x34
 800cc08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc0e:	e841 2300 	strex	r3, r2, [r1]
 800cc12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1e5      	bne.n	800cbe6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	3314      	adds	r3, #20
 800cc20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	e853 3f00 	ldrex	r3, [r3]
 800cc28:	613b      	str	r3, [r7, #16]
   return(result);
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	f023 0301 	bic.w	r3, r3, #1
 800cc30:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	3314      	adds	r3, #20
 800cc38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc3a:	623a      	str	r2, [r7, #32]
 800cc3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3e:	69f9      	ldr	r1, [r7, #28]
 800cc40:	6a3a      	ldr	r2, [r7, #32]
 800cc42:	e841 2300 	strex	r3, r2, [r1]
 800cc46:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1e5      	bne.n	800cc1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2220      	movs	r2, #32
 800cc52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2220      	movs	r2, #32
 800cc5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cc66:	2303      	movs	r3, #3
 800cc68:	e00f      	b.n	800cc8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	4013      	ands	r3, r2
 800cc74:	68ba      	ldr	r2, [r7, #8]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	bf0c      	ite	eq
 800cc7a:	2301      	moveq	r3, #1
 800cc7c:	2300      	movne	r3, #0
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	461a      	mov	r2, r3
 800cc82:	79fb      	ldrb	r3, [r7, #7]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d09f      	beq.n	800cbc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3740      	adds	r7, #64	; 0x40
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
	...

0800cc94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc98:	b09f      	sub	sp, #124	; 0x7c
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccaa:	68d9      	ldr	r1, [r3, #12]
 800ccac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	ea40 0301 	orr.w	r3, r0, r1
 800ccb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ccb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccb8:	689a      	ldr	r2, [r3, #8]
 800ccba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccbc:	691b      	ldr	r3, [r3, #16]
 800ccbe:	431a      	orrs	r2, r3
 800ccc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccc2:	695b      	ldr	r3, [r3, #20]
 800ccc4:	431a      	orrs	r2, r3
 800ccc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ccce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ccd8:	f021 010c 	bic.w	r1, r1, #12
 800ccdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cce2:	430b      	orrs	r3, r1
 800cce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	695b      	ldr	r3, [r3, #20]
 800ccec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ccf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccf2:	6999      	ldr	r1, [r3, #24]
 800ccf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	ea40 0301 	orr.w	r3, r0, r1
 800ccfc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ccfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	4bc5      	ldr	r3, [pc, #788]	; (800d018 <UART_SetConfig+0x384>)
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d004      	beq.n	800cd12 <UART_SetConfig+0x7e>
 800cd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	4bc3      	ldr	r3, [pc, #780]	; (800d01c <UART_SetConfig+0x388>)
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d103      	bne.n	800cd1a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cd12:	f7fc ffa5 	bl	8009c60 <HAL_RCC_GetPCLK2Freq>
 800cd16:	6778      	str	r0, [r7, #116]	; 0x74
 800cd18:	e002      	b.n	800cd20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd1a:	f7fc ff8d 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800cd1e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd22:	69db      	ldr	r3, [r3, #28]
 800cd24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd28:	f040 80b6 	bne.w	800ce98 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cd2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd2e:	461c      	mov	r4, r3
 800cd30:	f04f 0500 	mov.w	r5, #0
 800cd34:	4622      	mov	r2, r4
 800cd36:	462b      	mov	r3, r5
 800cd38:	1891      	adds	r1, r2, r2
 800cd3a:	6439      	str	r1, [r7, #64]	; 0x40
 800cd3c:	415b      	adcs	r3, r3
 800cd3e:	647b      	str	r3, [r7, #68]	; 0x44
 800cd40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cd44:	1912      	adds	r2, r2, r4
 800cd46:	eb45 0303 	adc.w	r3, r5, r3
 800cd4a:	f04f 0000 	mov.w	r0, #0
 800cd4e:	f04f 0100 	mov.w	r1, #0
 800cd52:	00d9      	lsls	r1, r3, #3
 800cd54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd58:	00d0      	lsls	r0, r2, #3
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	1911      	adds	r1, r2, r4
 800cd60:	6639      	str	r1, [r7, #96]	; 0x60
 800cd62:	416b      	adcs	r3, r5
 800cd64:	667b      	str	r3, [r7, #100]	; 0x64
 800cd66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f04f 0300 	mov.w	r3, #0
 800cd70:	1891      	adds	r1, r2, r2
 800cd72:	63b9      	str	r1, [r7, #56]	; 0x38
 800cd74:	415b      	adcs	r3, r3
 800cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cd7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cd80:	f7f3 ff92 	bl	8000ca8 <__aeabi_uldivmod>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	4ba5      	ldr	r3, [pc, #660]	; (800d020 <UART_SetConfig+0x38c>)
 800cd8a:	fba3 2302 	umull	r2, r3, r3, r2
 800cd8e:	095b      	lsrs	r3, r3, #5
 800cd90:	011e      	lsls	r6, r3, #4
 800cd92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd94:	461c      	mov	r4, r3
 800cd96:	f04f 0500 	mov.w	r5, #0
 800cd9a:	4622      	mov	r2, r4
 800cd9c:	462b      	mov	r3, r5
 800cd9e:	1891      	adds	r1, r2, r2
 800cda0:	6339      	str	r1, [r7, #48]	; 0x30
 800cda2:	415b      	adcs	r3, r3
 800cda4:	637b      	str	r3, [r7, #52]	; 0x34
 800cda6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cdaa:	1912      	adds	r2, r2, r4
 800cdac:	eb45 0303 	adc.w	r3, r5, r3
 800cdb0:	f04f 0000 	mov.w	r0, #0
 800cdb4:	f04f 0100 	mov.w	r1, #0
 800cdb8:	00d9      	lsls	r1, r3, #3
 800cdba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cdbe:	00d0      	lsls	r0, r2, #3
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	1911      	adds	r1, r2, r4
 800cdc6:	65b9      	str	r1, [r7, #88]	; 0x58
 800cdc8:	416b      	adcs	r3, r5
 800cdca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	f04f 0300 	mov.w	r3, #0
 800cdd6:	1891      	adds	r1, r2, r2
 800cdd8:	62b9      	str	r1, [r7, #40]	; 0x28
 800cdda:	415b      	adcs	r3, r3
 800cddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cde2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cde6:	f7f3 ff5f 	bl	8000ca8 <__aeabi_uldivmod>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	4b8c      	ldr	r3, [pc, #560]	; (800d020 <UART_SetConfig+0x38c>)
 800cdf0:	fba3 1302 	umull	r1, r3, r3, r2
 800cdf4:	095b      	lsrs	r3, r3, #5
 800cdf6:	2164      	movs	r1, #100	; 0x64
 800cdf8:	fb01 f303 	mul.w	r3, r1, r3
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	00db      	lsls	r3, r3, #3
 800ce00:	3332      	adds	r3, #50	; 0x32
 800ce02:	4a87      	ldr	r2, [pc, #540]	; (800d020 <UART_SetConfig+0x38c>)
 800ce04:	fba2 2303 	umull	r2, r3, r2, r3
 800ce08:	095b      	lsrs	r3, r3, #5
 800ce0a:	005b      	lsls	r3, r3, #1
 800ce0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ce10:	441e      	add	r6, r3
 800ce12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce14:	4618      	mov	r0, r3
 800ce16:	f04f 0100 	mov.w	r1, #0
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	1894      	adds	r4, r2, r2
 800ce20:	623c      	str	r4, [r7, #32]
 800ce22:	415b      	adcs	r3, r3
 800ce24:	627b      	str	r3, [r7, #36]	; 0x24
 800ce26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce2a:	1812      	adds	r2, r2, r0
 800ce2c:	eb41 0303 	adc.w	r3, r1, r3
 800ce30:	f04f 0400 	mov.w	r4, #0
 800ce34:	f04f 0500 	mov.w	r5, #0
 800ce38:	00dd      	lsls	r5, r3, #3
 800ce3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ce3e:	00d4      	lsls	r4, r2, #3
 800ce40:	4622      	mov	r2, r4
 800ce42:	462b      	mov	r3, r5
 800ce44:	1814      	adds	r4, r2, r0
 800ce46:	653c      	str	r4, [r7, #80]	; 0x50
 800ce48:	414b      	adcs	r3, r1
 800ce4a:	657b      	str	r3, [r7, #84]	; 0x54
 800ce4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	461a      	mov	r2, r3
 800ce52:	f04f 0300 	mov.w	r3, #0
 800ce56:	1891      	adds	r1, r2, r2
 800ce58:	61b9      	str	r1, [r7, #24]
 800ce5a:	415b      	adcs	r3, r3
 800ce5c:	61fb      	str	r3, [r7, #28]
 800ce5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ce66:	f7f3 ff1f 	bl	8000ca8 <__aeabi_uldivmod>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	4b6c      	ldr	r3, [pc, #432]	; (800d020 <UART_SetConfig+0x38c>)
 800ce70:	fba3 1302 	umull	r1, r3, r3, r2
 800ce74:	095b      	lsrs	r3, r3, #5
 800ce76:	2164      	movs	r1, #100	; 0x64
 800ce78:	fb01 f303 	mul.w	r3, r1, r3
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	00db      	lsls	r3, r3, #3
 800ce80:	3332      	adds	r3, #50	; 0x32
 800ce82:	4a67      	ldr	r2, [pc, #412]	; (800d020 <UART_SetConfig+0x38c>)
 800ce84:	fba2 2303 	umull	r2, r3, r2, r3
 800ce88:	095b      	lsrs	r3, r3, #5
 800ce8a:	f003 0207 	and.w	r2, r3, #7
 800ce8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4432      	add	r2, r6
 800ce94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ce96:	e0b9      	b.n	800d00c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce9a:	461c      	mov	r4, r3
 800ce9c:	f04f 0500 	mov.w	r5, #0
 800cea0:	4622      	mov	r2, r4
 800cea2:	462b      	mov	r3, r5
 800cea4:	1891      	adds	r1, r2, r2
 800cea6:	6139      	str	r1, [r7, #16]
 800cea8:	415b      	adcs	r3, r3
 800ceaa:	617b      	str	r3, [r7, #20]
 800ceac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ceb0:	1912      	adds	r2, r2, r4
 800ceb2:	eb45 0303 	adc.w	r3, r5, r3
 800ceb6:	f04f 0000 	mov.w	r0, #0
 800ceba:	f04f 0100 	mov.w	r1, #0
 800cebe:	00d9      	lsls	r1, r3, #3
 800cec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cec4:	00d0      	lsls	r0, r2, #3
 800cec6:	4602      	mov	r2, r0
 800cec8:	460b      	mov	r3, r1
 800ceca:	eb12 0804 	adds.w	r8, r2, r4
 800cece:	eb43 0905 	adc.w	r9, r3, r5
 800ced2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f04f 0100 	mov.w	r1, #0
 800cedc:	f04f 0200 	mov.w	r2, #0
 800cee0:	f04f 0300 	mov.w	r3, #0
 800cee4:	008b      	lsls	r3, r1, #2
 800cee6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ceea:	0082      	lsls	r2, r0, #2
 800ceec:	4640      	mov	r0, r8
 800ceee:	4649      	mov	r1, r9
 800cef0:	f7f3 feda 	bl	8000ca8 <__aeabi_uldivmod>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	4b49      	ldr	r3, [pc, #292]	; (800d020 <UART_SetConfig+0x38c>)
 800cefa:	fba3 2302 	umull	r2, r3, r3, r2
 800cefe:	095b      	lsrs	r3, r3, #5
 800cf00:	011e      	lsls	r6, r3, #4
 800cf02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf04:	4618      	mov	r0, r3
 800cf06:	f04f 0100 	mov.w	r1, #0
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	1894      	adds	r4, r2, r2
 800cf10:	60bc      	str	r4, [r7, #8]
 800cf12:	415b      	adcs	r3, r3
 800cf14:	60fb      	str	r3, [r7, #12]
 800cf16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf1a:	1812      	adds	r2, r2, r0
 800cf1c:	eb41 0303 	adc.w	r3, r1, r3
 800cf20:	f04f 0400 	mov.w	r4, #0
 800cf24:	f04f 0500 	mov.w	r5, #0
 800cf28:	00dd      	lsls	r5, r3, #3
 800cf2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cf2e:	00d4      	lsls	r4, r2, #3
 800cf30:	4622      	mov	r2, r4
 800cf32:	462b      	mov	r3, r5
 800cf34:	1814      	adds	r4, r2, r0
 800cf36:	64bc      	str	r4, [r7, #72]	; 0x48
 800cf38:	414b      	adcs	r3, r1
 800cf3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f04f 0100 	mov.w	r1, #0
 800cf46:	f04f 0200 	mov.w	r2, #0
 800cf4a:	f04f 0300 	mov.w	r3, #0
 800cf4e:	008b      	lsls	r3, r1, #2
 800cf50:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cf54:	0082      	lsls	r2, r0, #2
 800cf56:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cf5a:	f7f3 fea5 	bl	8000ca8 <__aeabi_uldivmod>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	460b      	mov	r3, r1
 800cf62:	4b2f      	ldr	r3, [pc, #188]	; (800d020 <UART_SetConfig+0x38c>)
 800cf64:	fba3 1302 	umull	r1, r3, r3, r2
 800cf68:	095b      	lsrs	r3, r3, #5
 800cf6a:	2164      	movs	r1, #100	; 0x64
 800cf6c:	fb01 f303 	mul.w	r3, r1, r3
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	011b      	lsls	r3, r3, #4
 800cf74:	3332      	adds	r3, #50	; 0x32
 800cf76:	4a2a      	ldr	r2, [pc, #168]	; (800d020 <UART_SetConfig+0x38c>)
 800cf78:	fba2 2303 	umull	r2, r3, r2, r3
 800cf7c:	095b      	lsrs	r3, r3, #5
 800cf7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf82:	441e      	add	r6, r3
 800cf84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf86:	4618      	mov	r0, r3
 800cf88:	f04f 0100 	mov.w	r1, #0
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	1894      	adds	r4, r2, r2
 800cf92:	603c      	str	r4, [r7, #0]
 800cf94:	415b      	adcs	r3, r3
 800cf96:	607b      	str	r3, [r7, #4]
 800cf98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf9c:	1812      	adds	r2, r2, r0
 800cf9e:	eb41 0303 	adc.w	r3, r1, r3
 800cfa2:	f04f 0400 	mov.w	r4, #0
 800cfa6:	f04f 0500 	mov.w	r5, #0
 800cfaa:	00dd      	lsls	r5, r3, #3
 800cfac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cfb0:	00d4      	lsls	r4, r2, #3
 800cfb2:	4622      	mov	r2, r4
 800cfb4:	462b      	mov	r3, r5
 800cfb6:	eb12 0a00 	adds.w	sl, r2, r0
 800cfba:	eb43 0b01 	adc.w	fp, r3, r1
 800cfbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f04f 0100 	mov.w	r1, #0
 800cfc8:	f04f 0200 	mov.w	r2, #0
 800cfcc:	f04f 0300 	mov.w	r3, #0
 800cfd0:	008b      	lsls	r3, r1, #2
 800cfd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cfd6:	0082      	lsls	r2, r0, #2
 800cfd8:	4650      	mov	r0, sl
 800cfda:	4659      	mov	r1, fp
 800cfdc:	f7f3 fe64 	bl	8000ca8 <__aeabi_uldivmod>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4b0e      	ldr	r3, [pc, #56]	; (800d020 <UART_SetConfig+0x38c>)
 800cfe6:	fba3 1302 	umull	r1, r3, r3, r2
 800cfea:	095b      	lsrs	r3, r3, #5
 800cfec:	2164      	movs	r1, #100	; 0x64
 800cfee:	fb01 f303 	mul.w	r3, r1, r3
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	011b      	lsls	r3, r3, #4
 800cff6:	3332      	adds	r3, #50	; 0x32
 800cff8:	4a09      	ldr	r2, [pc, #36]	; (800d020 <UART_SetConfig+0x38c>)
 800cffa:	fba2 2303 	umull	r2, r3, r2, r3
 800cffe:	095b      	lsrs	r3, r3, #5
 800d000:	f003 020f 	and.w	r2, r3, #15
 800d004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4432      	add	r2, r6
 800d00a:	609a      	str	r2, [r3, #8]
}
 800d00c:	bf00      	nop
 800d00e:	377c      	adds	r7, #124	; 0x7c
 800d010:	46bd      	mov	sp, r7
 800d012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d016:	bf00      	nop
 800d018:	40011000 	.word	0x40011000
 800d01c:	40011400 	.word	0x40011400
 800d020:	51eb851f 	.word	0x51eb851f

0800d024 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d028:	4904      	ldr	r1, [pc, #16]	; (800d03c <MX_FATFS_Init+0x18>)
 800d02a:	4805      	ldr	r0, [pc, #20]	; (800d040 <MX_FATFS_Init+0x1c>)
 800d02c:	f003 fba0 	bl	8010770 <FATFS_LinkDriver>
 800d030:	4603      	mov	r3, r0
 800d032:	461a      	mov	r2, r3
 800d034:	4b03      	ldr	r3, [pc, #12]	; (800d044 <MX_FATFS_Init+0x20>)
 800d036:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d038:	bf00      	nop
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	20006ce0 	.word	0x20006ce0
 800d040:	2000006c 	.word	0x2000006c
 800d044:	20006ce4 	.word	0x20006ce4

0800d048 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d048:	b480      	push	{r7}
 800d04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d04c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d04e:	4618      	mov	r0, r3
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	4603      	mov	r3, r0
 800d060:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800d062:	79fb      	ldrb	r3, [r7, #7]
 800d064:	4618      	mov	r0, r3
 800d066:	f000 f9dd 	bl	800d424 <USER_SPI_initialize>
 800d06a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	4603      	mov	r3, r0
 800d07c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800d07e:	79fb      	ldrb	r3, [r7, #7]
 800d080:	4618      	mov	r0, r3
 800d082:	f000 fabb 	bl	800d5fc <USER_SPI_status>
 800d086:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	60b9      	str	r1, [r7, #8]
 800d098:	607a      	str	r2, [r7, #4]
 800d09a:	603b      	str	r3, [r7, #0]
 800d09c:	4603      	mov	r3, r0
 800d09e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800d0a0:	7bf8      	ldrb	r0, [r7, #15]
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	f000 fabe 	bl	800d628 <USER_SPI_read>
 800d0ac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
 800d0c0:	603b      	str	r3, [r7, #0]
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800d0c6:	7bf8      	ldrb	r0, [r7, #15]
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	68b9      	ldr	r1, [r7, #8]
 800d0ce:	f000 fb11 	bl	800d6f4 <USER_SPI_write>
 800d0d2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	603a      	str	r2, [r7, #0]
 800d0e6:	71fb      	strb	r3, [r7, #7]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800d0ec:	79b9      	ldrb	r1, [r7, #6]
 800d0ee:	79fb      	ldrb	r3, [r7, #7]
 800d0f0:	683a      	ldr	r2, [r7, #0]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 fb7a 	bl	800d7ec <USER_SPI_ioctl>
 800d0f8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
	...

0800d104 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800d10c:	f7fa f8b0 	bl	8007270 <HAL_GetTick>
 800d110:	4603      	mov	r3, r0
 800d112:	4a04      	ldr	r2, [pc, #16]	; (800d124 <SPI_Timer_On+0x20>)
 800d114:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800d116:	4a04      	ldr	r2, [pc, #16]	; (800d128 <SPI_Timer_On+0x24>)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6013      	str	r3, [r2, #0]
}
 800d11c:	bf00      	nop
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	2000714c 	.word	0x2000714c
 800d128:	20007150 	.word	0x20007150

0800d12c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800d12c:	b580      	push	{r7, lr}
 800d12e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800d130:	f7fa f89e 	bl	8007270 <HAL_GetTick>
 800d134:	4602      	mov	r2, r0
 800d136:	4b06      	ldr	r3, [pc, #24]	; (800d150 <SPI_Timer_Status+0x24>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	1ad2      	subs	r2, r2, r3
 800d13c:	4b05      	ldr	r3, [pc, #20]	; (800d154 <SPI_Timer_Status+0x28>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	429a      	cmp	r2, r3
 800d142:	bf34      	ite	cc
 800d144:	2301      	movcc	r3, #1
 800d146:	2300      	movcs	r3, #0
 800d148:	b2db      	uxtb	r3, r3
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	2000714c 	.word	0x2000714c
 800d154:	20007150 	.word	0x20007150

0800d158 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b086      	sub	sp, #24
 800d15c:	af02      	add	r7, sp, #8
 800d15e:	4603      	mov	r3, r0
 800d160:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800d162:	f107 020f 	add.w	r2, r7, #15
 800d166:	1df9      	adds	r1, r7, #7
 800d168:	2332      	movs	r3, #50	; 0x32
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	2301      	movs	r3, #1
 800d16e:	4804      	ldr	r0, [pc, #16]	; (800d180 <xchg_spi+0x28>)
 800d170:	f7fe f822 	bl	800b1b8 <HAL_SPI_TransmitReceive>
    return rxDat;
 800d174:	7bfb      	ldrb	r3, [r7, #15]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	20005bc0 	.word	0x20005bc0

0800d184 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800d184:	b590      	push	{r4, r7, lr}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800d18e:	2300      	movs	r3, #0
 800d190:	60fb      	str	r3, [r7, #12]
 800d192:	e00a      	b.n	800d1aa <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	18d4      	adds	r4, r2, r3
 800d19a:	20ff      	movs	r0, #255	; 0xff
 800d19c:	f7ff ffdc 	bl	800d158 <xchg_spi>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	60fb      	str	r3, [r7, #12]
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d3f0      	bcc.n	800d194 <rcvr_spi_multi+0x10>
	}
}
 800d1b2:	bf00      	nop
 800d1b4:	bf00      	nop
 800d1b6:	3714      	adds	r7, #20
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd90      	pop	{r4, r7, pc}

0800d1bc <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	60fb      	str	r3, [r7, #12]
 800d1ca:	e009      	b.n	800d1e0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7ff ffbf 	bl	800d158 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	60fb      	str	r3, [r7, #12]
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d3f1      	bcc.n	800d1cc <xmit_spi_multi+0x10>
	}
}
 800d1e8:	bf00      	nop
 800d1ea:	bf00      	nop
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b086      	sub	sp, #24
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800d1fa:	f7fa f839 	bl	8007270 <HAL_GetTick>
 800d1fe:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800d204:	20ff      	movs	r0, #255	; 0xff
 800d206:	f7ff ffa7 	bl	800d158 <xchg_spi>
 800d20a:	4603      	mov	r3, r0
 800d20c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800d20e:	7bfb      	ldrb	r3, [r7, #15]
 800d210:	2bff      	cmp	r3, #255	; 0xff
 800d212:	d007      	beq.n	800d224 <wait_ready+0x32>
 800d214:	f7fa f82c 	bl	8007270 <HAL_GetTick>
 800d218:	4602      	mov	r2, r0
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	693a      	ldr	r2, [r7, #16]
 800d220:	429a      	cmp	r2, r3
 800d222:	d8ef      	bhi.n	800d204 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800d224:	7bfb      	ldrb	r3, [r7, #15]
 800d226:	2bff      	cmp	r3, #255	; 0xff
 800d228:	bf0c      	ite	eq
 800d22a:	2301      	moveq	r3, #1
 800d22c:	2300      	movne	r3, #0
 800d22e:	b2db      	uxtb	r3, r3
}
 800d230:	4618      	mov	r0, r3
 800d232:	3718      	adds	r7, #24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800d23c:	2201      	movs	r2, #1
 800d23e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d242:	4804      	ldr	r0, [pc, #16]	; (800d254 <despiselect+0x1c>)
 800d244:	f7fa ff2c 	bl	80080a0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800d248:	20ff      	movs	r0, #255	; 0xff
 800d24a:	f7ff ff85 	bl	800d158 <xchg_spi>

}
 800d24e:	bf00      	nop
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop
 800d254:	40021400 	.word	0x40021400

0800d258 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800d25c:	2200      	movs	r2, #0
 800d25e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d262:	480a      	ldr	r0, [pc, #40]	; (800d28c <spiselect+0x34>)
 800d264:	f7fa ff1c 	bl	80080a0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800d268:	20ff      	movs	r0, #255	; 0xff
 800d26a:	f7ff ff75 	bl	800d158 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800d26e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d272:	f7ff ffbe 	bl	800d1f2 <wait_ready>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <spiselect+0x28>
 800d27c:	2301      	movs	r3, #1
 800d27e:	e002      	b.n	800d286 <spiselect+0x2e>

	despiselect();
 800d280:	f7ff ffda 	bl	800d238 <despiselect>
	return 0;	/* Timeout */
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	40021400 	.word	0x40021400

0800d290 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800d29a:	20c8      	movs	r0, #200	; 0xc8
 800d29c:	f7ff ff32 	bl	800d104 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800d2a0:	20ff      	movs	r0, #255	; 0xff
 800d2a2:	f7ff ff59 	bl	800d158 <xchg_spi>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
 800d2ac:	2bff      	cmp	r3, #255	; 0xff
 800d2ae:	d104      	bne.n	800d2ba <rcvr_datablock+0x2a>
 800d2b0:	f7ff ff3c 	bl	800d12c <SPI_Timer_Status>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1f2      	bne.n	800d2a0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800d2ba:	7bfb      	ldrb	r3, [r7, #15]
 800d2bc:	2bfe      	cmp	r3, #254	; 0xfe
 800d2be:	d001      	beq.n	800d2c4 <rcvr_datablock+0x34>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	e00a      	b.n	800d2da <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800d2c4:	6839      	ldr	r1, [r7, #0]
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7ff ff5c 	bl	800d184 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800d2cc:	20ff      	movs	r0, #255	; 0xff
 800d2ce:	f7ff ff43 	bl	800d158 <xchg_spi>
 800d2d2:	20ff      	movs	r0, #255	; 0xff
 800d2d4:	f7ff ff40 	bl	800d158 <xchg_spi>

	return 1;						/* Function succeeded */
 800d2d8:	2301      	movs	r3, #1
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800d2ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d2f2:	f7ff ff7e 	bl	800d1f2 <wait_ready>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d101      	bne.n	800d300 <xmit_datablock+0x1e>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	e01e      	b.n	800d33e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800d300:	78fb      	ldrb	r3, [r7, #3]
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff ff28 	bl	800d158 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800d308:	78fb      	ldrb	r3, [r7, #3]
 800d30a:	2bfd      	cmp	r3, #253	; 0xfd
 800d30c:	d016      	beq.n	800d33c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800d30e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7ff ff52 	bl	800d1bc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800d318:	20ff      	movs	r0, #255	; 0xff
 800d31a:	f7ff ff1d 	bl	800d158 <xchg_spi>
 800d31e:	20ff      	movs	r0, #255	; 0xff
 800d320:	f7ff ff1a 	bl	800d158 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800d324:	20ff      	movs	r0, #255	; 0xff
 800d326:	f7ff ff17 	bl	800d158 <xchg_spi>
 800d32a:	4603      	mov	r3, r0
 800d32c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800d32e:	7bfb      	ldrb	r3, [r7, #15]
 800d330:	f003 031f 	and.w	r3, r3, #31
 800d334:	2b05      	cmp	r3, #5
 800d336:	d001      	beq.n	800d33c <xmit_datablock+0x5a>
 800d338:	2300      	movs	r3, #0
 800d33a:	e000      	b.n	800d33e <xmit_datablock+0x5c>
	}
	return 1;
 800d33c:	2301      	movs	r3, #1
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b084      	sub	sp, #16
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	4603      	mov	r3, r0
 800d34e:	6039      	str	r1, [r7, #0]
 800d350:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800d352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d356:	2b00      	cmp	r3, #0
 800d358:	da0e      	bge.n	800d378 <send_cmd+0x32>
		cmd &= 0x7F;
 800d35a:	79fb      	ldrb	r3, [r7, #7]
 800d35c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d360:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800d362:	2100      	movs	r1, #0
 800d364:	2037      	movs	r0, #55	; 0x37
 800d366:	f7ff ffee 	bl	800d346 <send_cmd>
 800d36a:	4603      	mov	r3, r0
 800d36c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800d36e:	7bbb      	ldrb	r3, [r7, #14]
 800d370:	2b01      	cmp	r3, #1
 800d372:	d901      	bls.n	800d378 <send_cmd+0x32>
 800d374:	7bbb      	ldrb	r3, [r7, #14]
 800d376:	e051      	b.n	800d41c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	2b0c      	cmp	r3, #12
 800d37c:	d008      	beq.n	800d390 <send_cmd+0x4a>
		despiselect();
 800d37e:	f7ff ff5b 	bl	800d238 <despiselect>
		if (!spiselect()) return 0xFF;
 800d382:	f7ff ff69 	bl	800d258 <spiselect>
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d101      	bne.n	800d390 <send_cmd+0x4a>
 800d38c:	23ff      	movs	r3, #255	; 0xff
 800d38e:	e045      	b.n	800d41c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800d390:	79fb      	ldrb	r3, [r7, #7]
 800d392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d396:	b2db      	uxtb	r3, r3
 800d398:	4618      	mov	r0, r3
 800d39a:	f7ff fedd 	bl	800d158 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	0e1b      	lsrs	r3, r3, #24
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff fed7 	bl	800d158 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	0c1b      	lsrs	r3, r3, #16
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7ff fed1 	bl	800d158 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	0a1b      	lsrs	r3, r3, #8
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff fecb 	bl	800d158 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff fec6 	bl	800d158 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800d3d0:	79fb      	ldrb	r3, [r7, #7]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <send_cmd+0x94>
 800d3d6:	2395      	movs	r3, #149	; 0x95
 800d3d8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	2b08      	cmp	r3, #8
 800d3de:	d101      	bne.n	800d3e4 <send_cmd+0x9e>
 800d3e0:	2387      	movs	r3, #135	; 0x87
 800d3e2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800d3e4:	7bfb      	ldrb	r3, [r7, #15]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff feb6 	bl	800d158 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800d3ec:	79fb      	ldrb	r3, [r7, #7]
 800d3ee:	2b0c      	cmp	r3, #12
 800d3f0:	d102      	bne.n	800d3f8 <send_cmd+0xb2>
 800d3f2:	20ff      	movs	r0, #255	; 0xff
 800d3f4:	f7ff feb0 	bl	800d158 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800d3f8:	230a      	movs	r3, #10
 800d3fa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800d3fc:	20ff      	movs	r0, #255	; 0xff
 800d3fe:	f7ff feab 	bl	800d158 <xchg_spi>
 800d402:	4603      	mov	r3, r0
 800d404:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800d406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	da05      	bge.n	800d41a <send_cmd+0xd4>
 800d40e:	7bfb      	ldrb	r3, [r7, #15]
 800d410:	3b01      	subs	r3, #1
 800d412:	73fb      	strb	r3, [r7, #15]
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1f0      	bne.n	800d3fc <send_cmd+0xb6>

	return res;							/* Return received response */
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3710      	adds	r7, #16
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800d424:	b590      	push	{r4, r7, lr}
 800d426:	b085      	sub	sp, #20
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4603      	mov	r3, r0
 800d42c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800d42e:	79fb      	ldrb	r3, [r7, #7]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <USER_SPI_initialize+0x14>
 800d434:	2301      	movs	r3, #1
 800d436:	e0d6      	b.n	800d5e6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800d438:	4b6d      	ldr	r3, [pc, #436]	; (800d5f0 <USER_SPI_initialize+0x1cc>)
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	f003 0302 	and.w	r3, r3, #2
 800d442:	2b00      	cmp	r3, #0
 800d444:	d003      	beq.n	800d44e <USER_SPI_initialize+0x2a>
 800d446:	4b6a      	ldr	r3, [pc, #424]	; (800d5f0 <USER_SPI_initialize+0x1cc>)
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	e0cb      	b.n	800d5e6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800d44e:	4b69      	ldr	r3, [pc, #420]	; (800d5f4 <USER_SPI_initialize+0x1d0>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800d458:	4b66      	ldr	r3, [pc, #408]	; (800d5f4 <USER_SPI_initialize+0x1d0>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f042 0208 	orr.w	r2, r2, #8
 800d460:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800d462:	230a      	movs	r3, #10
 800d464:	73fb      	strb	r3, [r7, #15]
 800d466:	e005      	b.n	800d474 <USER_SPI_initialize+0x50>
 800d468:	20ff      	movs	r0, #255	; 0xff
 800d46a:	f7ff fe75 	bl	800d158 <xchg_spi>
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
 800d470:	3b01      	subs	r3, #1
 800d472:	73fb      	strb	r3, [r7, #15]
 800d474:	7bfb      	ldrb	r3, [r7, #15]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1f6      	bne.n	800d468 <USER_SPI_initialize+0x44>

	ty = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800d47e:	2100      	movs	r1, #0
 800d480:	2000      	movs	r0, #0
 800d482:	f7ff ff60 	bl	800d346 <send_cmd>
 800d486:	4603      	mov	r3, r0
 800d488:	2b01      	cmp	r3, #1
 800d48a:	f040 808b 	bne.w	800d5a4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800d48e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d492:	f7ff fe37 	bl	800d104 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800d496:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d49a:	2008      	movs	r0, #8
 800d49c:	f7ff ff53 	bl	800d346 <send_cmd>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d151      	bne.n	800d54a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	73fb      	strb	r3, [r7, #15]
 800d4aa:	e00d      	b.n	800d4c8 <USER_SPI_initialize+0xa4>
 800d4ac:	7bfc      	ldrb	r4, [r7, #15]
 800d4ae:	20ff      	movs	r0, #255	; 0xff
 800d4b0:	f7ff fe52 	bl	800d158 <xchg_spi>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	f107 0310 	add.w	r3, r7, #16
 800d4bc:	4423      	add	r3, r4
 800d4be:	f803 2c08 	strb.w	r2, [r3, #-8]
 800d4c2:	7bfb      	ldrb	r3, [r7, #15]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	73fb      	strb	r3, [r7, #15]
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ca:	2b03      	cmp	r3, #3
 800d4cc:	d9ee      	bls.n	800d4ac <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800d4ce:	7abb      	ldrb	r3, [r7, #10]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d167      	bne.n	800d5a4 <USER_SPI_initialize+0x180>
 800d4d4:	7afb      	ldrb	r3, [r7, #11]
 800d4d6:	2baa      	cmp	r3, #170	; 0xaa
 800d4d8:	d164      	bne.n	800d5a4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800d4da:	bf00      	nop
 800d4dc:	f7ff fe26 	bl	800d12c <SPI_Timer_Status>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d007      	beq.n	800d4f6 <USER_SPI_initialize+0xd2>
 800d4e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d4ea:	20a9      	movs	r0, #169	; 0xa9
 800d4ec:	f7ff ff2b 	bl	800d346 <send_cmd>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1f2      	bne.n	800d4dc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800d4f6:	f7ff fe19 	bl	800d12c <SPI_Timer_Status>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d051      	beq.n	800d5a4 <USER_SPI_initialize+0x180>
 800d500:	2100      	movs	r1, #0
 800d502:	203a      	movs	r0, #58	; 0x3a
 800d504:	f7ff ff1f 	bl	800d346 <send_cmd>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d14a      	bne.n	800d5a4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800d50e:	2300      	movs	r3, #0
 800d510:	73fb      	strb	r3, [r7, #15]
 800d512:	e00d      	b.n	800d530 <USER_SPI_initialize+0x10c>
 800d514:	7bfc      	ldrb	r4, [r7, #15]
 800d516:	20ff      	movs	r0, #255	; 0xff
 800d518:	f7ff fe1e 	bl	800d158 <xchg_spi>
 800d51c:	4603      	mov	r3, r0
 800d51e:	461a      	mov	r2, r3
 800d520:	f107 0310 	add.w	r3, r7, #16
 800d524:	4423      	add	r3, r4
 800d526:	f803 2c08 	strb.w	r2, [r3, #-8]
 800d52a:	7bfb      	ldrb	r3, [r7, #15]
 800d52c:	3301      	adds	r3, #1
 800d52e:	73fb      	strb	r3, [r7, #15]
 800d530:	7bfb      	ldrb	r3, [r7, #15]
 800d532:	2b03      	cmp	r3, #3
 800d534:	d9ee      	bls.n	800d514 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800d536:	7a3b      	ldrb	r3, [r7, #8]
 800d538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d001      	beq.n	800d544 <USER_SPI_initialize+0x120>
 800d540:	230c      	movs	r3, #12
 800d542:	e000      	b.n	800d546 <USER_SPI_initialize+0x122>
 800d544:	2304      	movs	r3, #4
 800d546:	737b      	strb	r3, [r7, #13]
 800d548:	e02c      	b.n	800d5a4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800d54a:	2100      	movs	r1, #0
 800d54c:	20a9      	movs	r0, #169	; 0xa9
 800d54e:	f7ff fefa 	bl	800d346 <send_cmd>
 800d552:	4603      	mov	r3, r0
 800d554:	2b01      	cmp	r3, #1
 800d556:	d804      	bhi.n	800d562 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800d558:	2302      	movs	r3, #2
 800d55a:	737b      	strb	r3, [r7, #13]
 800d55c:	23a9      	movs	r3, #169	; 0xa9
 800d55e:	73bb      	strb	r3, [r7, #14]
 800d560:	e003      	b.n	800d56a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800d562:	2301      	movs	r3, #1
 800d564:	737b      	strb	r3, [r7, #13]
 800d566:	2301      	movs	r3, #1
 800d568:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800d56a:	bf00      	nop
 800d56c:	f7ff fdde 	bl	800d12c <SPI_Timer_Status>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d007      	beq.n	800d586 <USER_SPI_initialize+0x162>
 800d576:	7bbb      	ldrb	r3, [r7, #14]
 800d578:	2100      	movs	r1, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7ff fee3 	bl	800d346 <send_cmd>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1f2      	bne.n	800d56c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800d586:	f7ff fdd1 	bl	800d12c <SPI_Timer_Status>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d007      	beq.n	800d5a0 <USER_SPI_initialize+0x17c>
 800d590:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d594:	2010      	movs	r0, #16
 800d596:	f7ff fed6 	bl	800d346 <send_cmd>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d001      	beq.n	800d5a4 <USER_SPI_initialize+0x180>
				ty = 0;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800d5a4:	4a14      	ldr	r2, [pc, #80]	; (800d5f8 <USER_SPI_initialize+0x1d4>)
 800d5a6:	7b7b      	ldrb	r3, [r7, #13]
 800d5a8:	7013      	strb	r3, [r2, #0]
	despiselect();
 800d5aa:	f7ff fe45 	bl	800d238 <despiselect>

	if (ty) {			/* OK */
 800d5ae:	7b7b      	ldrb	r3, [r7, #13]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d012      	beq.n	800d5da <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800d5b4:	4b0f      	ldr	r3, [pc, #60]	; (800d5f4 <USER_SPI_initialize+0x1d0>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800d5be:	4b0d      	ldr	r3, [pc, #52]	; (800d5f4 <USER_SPI_initialize+0x1d0>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f042 0218 	orr.w	r2, r2, #24
 800d5c6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800d5c8:	4b09      	ldr	r3, [pc, #36]	; (800d5f0 <USER_SPI_initialize+0x1cc>)
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	f023 0301 	bic.w	r3, r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	4b06      	ldr	r3, [pc, #24]	; (800d5f0 <USER_SPI_initialize+0x1cc>)
 800d5d6:	701a      	strb	r2, [r3, #0]
 800d5d8:	e002      	b.n	800d5e0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800d5da:	4b05      	ldr	r3, [pc, #20]	; (800d5f0 <USER_SPI_initialize+0x1cc>)
 800d5dc:	2201      	movs	r2, #1
 800d5de:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800d5e0:	4b03      	ldr	r3, [pc, #12]	; (800d5f0 <USER_SPI_initialize+0x1cc>)
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	b2db      	uxtb	r3, r3
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd90      	pop	{r4, r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	20000080 	.word	0x20000080
 800d5f4:	20005bc0 	.word	0x20005bc0
 800d5f8:	20000668 	.word	0x20000668

0800d5fc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	4603      	mov	r3, r0
 800d604:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800d606:	79fb      	ldrb	r3, [r7, #7]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <USER_SPI_status+0x14>
 800d60c:	2301      	movs	r3, #1
 800d60e:	e002      	b.n	800d616 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800d610:	4b04      	ldr	r3, [pc, #16]	; (800d624 <USER_SPI_status+0x28>)
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	b2db      	uxtb	r3, r3
}
 800d616:	4618      	mov	r0, r3
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop
 800d624:	20000080 	.word	0x20000080

0800d628 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	607a      	str	r2, [r7, #4]
 800d632:	603b      	str	r3, [r7, #0]
 800d634:	4603      	mov	r3, r0
 800d636:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d102      	bne.n	800d644 <USER_SPI_read+0x1c>
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d101      	bne.n	800d648 <USER_SPI_read+0x20>
 800d644:	2304      	movs	r3, #4
 800d646:	e04d      	b.n	800d6e4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800d648:	4b28      	ldr	r3, [pc, #160]	; (800d6ec <USER_SPI_read+0xc4>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d001      	beq.n	800d65a <USER_SPI_read+0x32>
 800d656:	2303      	movs	r3, #3
 800d658:	e044      	b.n	800d6e4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800d65a:	4b25      	ldr	r3, [pc, #148]	; (800d6f0 <USER_SPI_read+0xc8>)
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	f003 0308 	and.w	r3, r3, #8
 800d662:	2b00      	cmp	r3, #0
 800d664:	d102      	bne.n	800d66c <USER_SPI_read+0x44>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	025b      	lsls	r3, r3, #9
 800d66a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d111      	bne.n	800d696 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800d672:	6879      	ldr	r1, [r7, #4]
 800d674:	2011      	movs	r0, #17
 800d676:	f7ff fe66 	bl	800d346 <send_cmd>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d129      	bne.n	800d6d4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800d680:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d684:	68b8      	ldr	r0, [r7, #8]
 800d686:	f7ff fe03 	bl	800d290 <rcvr_datablock>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d021      	beq.n	800d6d4 <USER_SPI_read+0xac>
			count = 0;
 800d690:	2300      	movs	r3, #0
 800d692:	603b      	str	r3, [r7, #0]
 800d694:	e01e      	b.n	800d6d4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800d696:	6879      	ldr	r1, [r7, #4]
 800d698:	2012      	movs	r0, #18
 800d69a:	f7ff fe54 	bl	800d346 <send_cmd>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d117      	bne.n	800d6d4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800d6a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d6a8:	68b8      	ldr	r0, [r7, #8]
 800d6aa:	f7ff fdf1 	bl	800d290 <rcvr_datablock>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00a      	beq.n	800d6ca <USER_SPI_read+0xa2>
				buff += 512;
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d6ba:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	603b      	str	r3, [r7, #0]
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1ed      	bne.n	800d6a4 <USER_SPI_read+0x7c>
 800d6c8:	e000      	b.n	800d6cc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800d6ca:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	200c      	movs	r0, #12
 800d6d0:	f7ff fe39 	bl	800d346 <send_cmd>
		}
	}
	despiselect();
 800d6d4:	f7ff fdb0 	bl	800d238 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	bf14      	ite	ne
 800d6de:	2301      	movne	r3, #1
 800d6e0:	2300      	moveq	r3, #0
 800d6e2:	b2db      	uxtb	r3, r3
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	20000080 	.word	0x20000080
 800d6f0:	20000668 	.word	0x20000668

0800d6f4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60b9      	str	r1, [r7, #8]
 800d6fc:	607a      	str	r2, [r7, #4]
 800d6fe:	603b      	str	r3, [r7, #0]
 800d700:	4603      	mov	r3, r0
 800d702:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800d704:	7bfb      	ldrb	r3, [r7, #15]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d102      	bne.n	800d710 <USER_SPI_write+0x1c>
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <USER_SPI_write+0x20>
 800d710:	2304      	movs	r3, #4
 800d712:	e063      	b.n	800d7dc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800d714:	4b33      	ldr	r3, [pc, #204]	; (800d7e4 <USER_SPI_write+0xf0>)
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	f003 0301 	and.w	r3, r3, #1
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d001      	beq.n	800d726 <USER_SPI_write+0x32>
 800d722:	2303      	movs	r3, #3
 800d724:	e05a      	b.n	800d7dc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800d726:	4b2f      	ldr	r3, [pc, #188]	; (800d7e4 <USER_SPI_write+0xf0>)
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	f003 0304 	and.w	r3, r3, #4
 800d730:	2b00      	cmp	r3, #0
 800d732:	d001      	beq.n	800d738 <USER_SPI_write+0x44>
 800d734:	2302      	movs	r3, #2
 800d736:	e051      	b.n	800d7dc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800d738:	4b2b      	ldr	r3, [pc, #172]	; (800d7e8 <USER_SPI_write+0xf4>)
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	f003 0308 	and.w	r3, r3, #8
 800d740:	2b00      	cmp	r3, #0
 800d742:	d102      	bne.n	800d74a <USER_SPI_write+0x56>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	025b      	lsls	r3, r3, #9
 800d748:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d110      	bne.n	800d772 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800d750:	6879      	ldr	r1, [r7, #4]
 800d752:	2018      	movs	r0, #24
 800d754:	f7ff fdf7 	bl	800d346 <send_cmd>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d136      	bne.n	800d7cc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800d75e:	21fe      	movs	r1, #254	; 0xfe
 800d760:	68b8      	ldr	r0, [r7, #8]
 800d762:	f7ff fdbe 	bl	800d2e2 <xmit_datablock>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d02f      	beq.n	800d7cc <USER_SPI_write+0xd8>
			count = 0;
 800d76c:	2300      	movs	r3, #0
 800d76e:	603b      	str	r3, [r7, #0]
 800d770:	e02c      	b.n	800d7cc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800d772:	4b1d      	ldr	r3, [pc, #116]	; (800d7e8 <USER_SPI_write+0xf4>)
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	f003 0306 	and.w	r3, r3, #6
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <USER_SPI_write+0x92>
 800d77e:	6839      	ldr	r1, [r7, #0]
 800d780:	2097      	movs	r0, #151	; 0x97
 800d782:	f7ff fde0 	bl	800d346 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800d786:	6879      	ldr	r1, [r7, #4]
 800d788:	2019      	movs	r0, #25
 800d78a:	f7ff fddc 	bl	800d346 <send_cmd>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d11b      	bne.n	800d7cc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800d794:	21fc      	movs	r1, #252	; 0xfc
 800d796:	68b8      	ldr	r0, [r7, #8]
 800d798:	f7ff fda3 	bl	800d2e2 <xmit_datablock>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00a      	beq.n	800d7b8 <USER_SPI_write+0xc4>
				buff += 512;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d7a8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	603b      	str	r3, [r7, #0]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1ee      	bne.n	800d794 <USER_SPI_write+0xa0>
 800d7b6:	e000      	b.n	800d7ba <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800d7b8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800d7ba:	21fd      	movs	r1, #253	; 0xfd
 800d7bc:	2000      	movs	r0, #0
 800d7be:	f7ff fd90 	bl	800d2e2 <xmit_datablock>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d101      	bne.n	800d7cc <USER_SPI_write+0xd8>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800d7cc:	f7ff fd34 	bl	800d238 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	bf14      	ite	ne
 800d7d6:	2301      	movne	r3, #1
 800d7d8:	2300      	moveq	r3, #0
 800d7da:	b2db      	uxtb	r3, r3
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	20000080 	.word	0x20000080
 800d7e8:	20000668 	.word	0x20000668

0800d7ec <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08c      	sub	sp, #48	; 0x30
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	603a      	str	r2, [r7, #0]
 800d7f6:	71fb      	strb	r3, [r7, #7]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800d7fc:	79fb      	ldrb	r3, [r7, #7]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d001      	beq.n	800d806 <USER_SPI_ioctl+0x1a>
 800d802:	2304      	movs	r3, #4
 800d804:	e15a      	b.n	800dabc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800d806:	4baf      	ldr	r3, [pc, #700]	; (800dac4 <USER_SPI_ioctl+0x2d8>)
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	f003 0301 	and.w	r3, r3, #1
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <USER_SPI_ioctl+0x2c>
 800d814:	2303      	movs	r3, #3
 800d816:	e151      	b.n	800dabc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800d818:	2301      	movs	r3, #1
 800d81a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800d81e:	79bb      	ldrb	r3, [r7, #6]
 800d820:	2b04      	cmp	r3, #4
 800d822:	f200 8136 	bhi.w	800da92 <USER_SPI_ioctl+0x2a6>
 800d826:	a201      	add	r2, pc, #4	; (adr r2, 800d82c <USER_SPI_ioctl+0x40>)
 800d828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82c:	0800d841 	.word	0x0800d841
 800d830:	0800d855 	.word	0x0800d855
 800d834:	0800da93 	.word	0x0800da93
 800d838:	0800d901 	.word	0x0800d901
 800d83c:	0800d9f7 	.word	0x0800d9f7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800d840:	f7ff fd0a 	bl	800d258 <spiselect>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	f000 8127 	beq.w	800da9a <USER_SPI_ioctl+0x2ae>
 800d84c:	2300      	movs	r3, #0
 800d84e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800d852:	e122      	b.n	800da9a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800d854:	2100      	movs	r1, #0
 800d856:	2009      	movs	r0, #9
 800d858:	f7ff fd75 	bl	800d346 <send_cmd>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f040 811d 	bne.w	800da9e <USER_SPI_ioctl+0x2b2>
 800d864:	f107 030c 	add.w	r3, r7, #12
 800d868:	2110      	movs	r1, #16
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7ff fd10 	bl	800d290 <rcvr_datablock>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	f000 8113 	beq.w	800da9e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800d878:	7b3b      	ldrb	r3, [r7, #12]
 800d87a:	099b      	lsrs	r3, r3, #6
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d111      	bne.n	800d8a6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800d882:	7d7b      	ldrb	r3, [r7, #21]
 800d884:	461a      	mov	r2, r3
 800d886:	7d3b      	ldrb	r3, [r7, #20]
 800d888:	021b      	lsls	r3, r3, #8
 800d88a:	4413      	add	r3, r2
 800d88c:	461a      	mov	r2, r3
 800d88e:	7cfb      	ldrb	r3, [r7, #19]
 800d890:	041b      	lsls	r3, r3, #16
 800d892:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800d896:	4413      	add	r3, r2
 800d898:	3301      	adds	r3, #1
 800d89a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	029a      	lsls	r2, r3, #10
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	e028      	b.n	800d8f8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800d8a6:	7c7b      	ldrb	r3, [r7, #17]
 800d8a8:	f003 030f 	and.w	r3, r3, #15
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	7dbb      	ldrb	r3, [r7, #22]
 800d8b0:	09db      	lsrs	r3, r3, #7
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	4413      	add	r3, r2
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	7d7b      	ldrb	r3, [r7, #21]
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	f003 0306 	and.w	r3, r3, #6
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	4413      	add	r3, r2
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	3302      	adds	r3, #2
 800d8ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800d8ce:	7d3b      	ldrb	r3, [r7, #20]
 800d8d0:	099b      	lsrs	r3, r3, #6
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	7cfb      	ldrb	r3, [r7, #19]
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	441a      	add	r2, r3
 800d8dc:	7cbb      	ldrb	r3, [r7, #18]
 800d8de:	029b      	lsls	r3, r3, #10
 800d8e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d8e4:	4413      	add	r3, r2
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800d8ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d8ee:	3b09      	subs	r3, #9
 800d8f0:	69fa      	ldr	r2, [r7, #28]
 800d8f2:	409a      	lsls	r2, r3
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800d8fe:	e0ce      	b.n	800da9e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800d900:	4b71      	ldr	r3, [pc, #452]	; (800dac8 <USER_SPI_ioctl+0x2dc>)
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	f003 0304 	and.w	r3, r3, #4
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d031      	beq.n	800d970 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800d90c:	2100      	movs	r1, #0
 800d90e:	208d      	movs	r0, #141	; 0x8d
 800d910:	f7ff fd19 	bl	800d346 <send_cmd>
 800d914:	4603      	mov	r3, r0
 800d916:	2b00      	cmp	r3, #0
 800d918:	f040 80c3 	bne.w	800daa2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800d91c:	20ff      	movs	r0, #255	; 0xff
 800d91e:	f7ff fc1b 	bl	800d158 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800d922:	f107 030c 	add.w	r3, r7, #12
 800d926:	2110      	movs	r1, #16
 800d928:	4618      	mov	r0, r3
 800d92a:	f7ff fcb1 	bl	800d290 <rcvr_datablock>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 80b6 	beq.w	800daa2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800d936:	2330      	movs	r3, #48	; 0x30
 800d938:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800d93c:	e007      	b.n	800d94e <USER_SPI_ioctl+0x162>
 800d93e:	20ff      	movs	r0, #255	; 0xff
 800d940:	f7ff fc0a 	bl	800d158 <xchg_spi>
 800d944:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d948:	3b01      	subs	r3, #1
 800d94a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800d94e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1f3      	bne.n	800d93e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800d956:	7dbb      	ldrb	r3, [r7, #22]
 800d958:	091b      	lsrs	r3, r3, #4
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	461a      	mov	r2, r3
 800d95e:	2310      	movs	r3, #16
 800d960:	fa03 f202 	lsl.w	r2, r3, r2
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800d968:	2300      	movs	r3, #0
 800d96a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800d96e:	e098      	b.n	800daa2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800d970:	2100      	movs	r1, #0
 800d972:	2009      	movs	r0, #9
 800d974:	f7ff fce7 	bl	800d346 <send_cmd>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f040 8091 	bne.w	800daa2 <USER_SPI_ioctl+0x2b6>
 800d980:	f107 030c 	add.w	r3, r7, #12
 800d984:	2110      	movs	r1, #16
 800d986:	4618      	mov	r0, r3
 800d988:	f7ff fc82 	bl	800d290 <rcvr_datablock>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f000 8087 	beq.w	800daa2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800d994:	4b4c      	ldr	r3, [pc, #304]	; (800dac8 <USER_SPI_ioctl+0x2dc>)
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	f003 0302 	and.w	r3, r3, #2
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d012      	beq.n	800d9c6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800d9a0:	7dbb      	ldrb	r3, [r7, #22]
 800d9a2:	005b      	lsls	r3, r3, #1
 800d9a4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800d9a8:	7dfa      	ldrb	r2, [r7, #23]
 800d9aa:	09d2      	lsrs	r2, r2, #7
 800d9ac:	b2d2      	uxtb	r2, r2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	1c5a      	adds	r2, r3, #1
 800d9b2:	7e7b      	ldrb	r3, [r7, #25]
 800d9b4:	099b      	lsrs	r3, r3, #6
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d9be:	461a      	mov	r2, r3
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	601a      	str	r2, [r3, #0]
 800d9c4:	e013      	b.n	800d9ee <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800d9c6:	7dbb      	ldrb	r3, [r7, #22]
 800d9c8:	109b      	asrs	r3, r3, #2
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	f003 031f 	and.w	r3, r3, #31
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	7dfa      	ldrb	r2, [r7, #23]
 800d9d4:	00d2      	lsls	r2, r2, #3
 800d9d6:	f002 0218 	and.w	r2, r2, #24
 800d9da:	7df9      	ldrb	r1, [r7, #23]
 800d9dc:	0949      	lsrs	r1, r1, #5
 800d9de:	b2c9      	uxtb	r1, r1
 800d9e0:	440a      	add	r2, r1
 800d9e2:	3201      	adds	r2, #1
 800d9e4:	fb02 f303 	mul.w	r3, r2, r3
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800d9f4:	e055      	b.n	800daa2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800d9f6:	4b34      	ldr	r3, [pc, #208]	; (800dac8 <USER_SPI_ioctl+0x2dc>)
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	f003 0306 	and.w	r3, r3, #6
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d051      	beq.n	800daa6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800da02:	f107 020c 	add.w	r2, r7, #12
 800da06:	79fb      	ldrb	r3, [r7, #7]
 800da08:	210b      	movs	r1, #11
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7ff feee 	bl	800d7ec <USER_SPI_ioctl>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d149      	bne.n	800daaa <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800da16:	7b3b      	ldrb	r3, [r7, #12]
 800da18:	099b      	lsrs	r3, r3, #6
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d104      	bne.n	800da2a <USER_SPI_ioctl+0x23e>
 800da20:	7dbb      	ldrb	r3, [r7, #22]
 800da22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da26:	2b00      	cmp	r3, #0
 800da28:	d041      	beq.n	800daae <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	623b      	str	r3, [r7, #32]
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	62bb      	str	r3, [r7, #40]	; 0x28
 800da34:	6a3b      	ldr	r3, [r7, #32]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800da3a:	4b23      	ldr	r3, [pc, #140]	; (800dac8 <USER_SPI_ioctl+0x2dc>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	f003 0308 	and.w	r3, r3, #8
 800da42:	2b00      	cmp	r3, #0
 800da44:	d105      	bne.n	800da52 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	025b      	lsls	r3, r3, #9
 800da4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	025b      	lsls	r3, r3, #9
 800da50:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800da52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da54:	2020      	movs	r0, #32
 800da56:	f7ff fc76 	bl	800d346 <send_cmd>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d128      	bne.n	800dab2 <USER_SPI_ioctl+0x2c6>
 800da60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da62:	2021      	movs	r0, #33	; 0x21
 800da64:	f7ff fc6f 	bl	800d346 <send_cmd>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d121      	bne.n	800dab2 <USER_SPI_ioctl+0x2c6>
 800da6e:	2100      	movs	r1, #0
 800da70:	2026      	movs	r0, #38	; 0x26
 800da72:	f7ff fc68 	bl	800d346 <send_cmd>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d11a      	bne.n	800dab2 <USER_SPI_ioctl+0x2c6>
 800da7c:	f247 5030 	movw	r0, #30000	; 0x7530
 800da80:	f7ff fbb7 	bl	800d1f2 <wait_ready>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d013      	beq.n	800dab2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800da8a:	2300      	movs	r3, #0
 800da8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800da90:	e00f      	b.n	800dab2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800da92:	2304      	movs	r3, #4
 800da94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800da98:	e00c      	b.n	800dab4 <USER_SPI_ioctl+0x2c8>
		break;
 800da9a:	bf00      	nop
 800da9c:	e00a      	b.n	800dab4 <USER_SPI_ioctl+0x2c8>
		break;
 800da9e:	bf00      	nop
 800daa0:	e008      	b.n	800dab4 <USER_SPI_ioctl+0x2c8>
		break;
 800daa2:	bf00      	nop
 800daa4:	e006      	b.n	800dab4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800daa6:	bf00      	nop
 800daa8:	e004      	b.n	800dab4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800daaa:	bf00      	nop
 800daac:	e002      	b.n	800dab4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800daae:	bf00      	nop
 800dab0:	e000      	b.n	800dab4 <USER_SPI_ioctl+0x2c8>
		break;
 800dab2:	bf00      	nop
	}

	despiselect();
 800dab4:	f7ff fbc0 	bl	800d238 <despiselect>

	return res;
 800dab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3730      	adds	r7, #48	; 0x30
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	20000080 	.word	0x20000080
 800dac8:	20000668 	.word	0x20000668

0800dacc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	4603      	mov	r3, r0
 800dad4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dad6:	79fb      	ldrb	r3, [r7, #7]
 800dad8:	4a08      	ldr	r2, [pc, #32]	; (800dafc <disk_status+0x30>)
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	4413      	add	r3, r2
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	79fa      	ldrb	r2, [r7, #7]
 800dae4:	4905      	ldr	r1, [pc, #20]	; (800dafc <disk_status+0x30>)
 800dae6:	440a      	add	r2, r1
 800dae8:	7a12      	ldrb	r2, [r2, #8]
 800daea:	4610      	mov	r0, r2
 800daec:	4798      	blx	r3
 800daee:	4603      	mov	r3, r0
 800daf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800daf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	20000694 	.word	0x20000694

0800db00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	4603      	mov	r3, r0
 800db08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800db0e:	79fb      	ldrb	r3, [r7, #7]
 800db10:	4a0d      	ldr	r2, [pc, #52]	; (800db48 <disk_initialize+0x48>)
 800db12:	5cd3      	ldrb	r3, [r2, r3]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d111      	bne.n	800db3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800db18:	79fb      	ldrb	r3, [r7, #7]
 800db1a:	4a0b      	ldr	r2, [pc, #44]	; (800db48 <disk_initialize+0x48>)
 800db1c:	2101      	movs	r1, #1
 800db1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	4a09      	ldr	r2, [pc, #36]	; (800db48 <disk_initialize+0x48>)
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	4413      	add	r3, r2
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	79fa      	ldrb	r2, [r7, #7]
 800db2e:	4906      	ldr	r1, [pc, #24]	; (800db48 <disk_initialize+0x48>)
 800db30:	440a      	add	r2, r1
 800db32:	7a12      	ldrb	r2, [r2, #8]
 800db34:	4610      	mov	r0, r2
 800db36:	4798      	blx	r3
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3710      	adds	r7, #16
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	20000694 	.word	0x20000694

0800db4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800db4c:	b590      	push	{r4, r7, lr}
 800db4e:	b087      	sub	sp, #28
 800db50:	af00      	add	r7, sp, #0
 800db52:	60b9      	str	r1, [r7, #8]
 800db54:	607a      	str	r2, [r7, #4]
 800db56:	603b      	str	r3, [r7, #0]
 800db58:	4603      	mov	r3, r0
 800db5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800db5c:	7bfb      	ldrb	r3, [r7, #15]
 800db5e:	4a0a      	ldr	r2, [pc, #40]	; (800db88 <disk_read+0x3c>)
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4413      	add	r3, r2
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	689c      	ldr	r4, [r3, #8]
 800db68:	7bfb      	ldrb	r3, [r7, #15]
 800db6a:	4a07      	ldr	r2, [pc, #28]	; (800db88 <disk_read+0x3c>)
 800db6c:	4413      	add	r3, r2
 800db6e:	7a18      	ldrb	r0, [r3, #8]
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	68b9      	ldr	r1, [r7, #8]
 800db76:	47a0      	blx	r4
 800db78:	4603      	mov	r3, r0
 800db7a:	75fb      	strb	r3, [r7, #23]
  return res;
 800db7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	371c      	adds	r7, #28
 800db82:	46bd      	mov	sp, r7
 800db84:	bd90      	pop	{r4, r7, pc}
 800db86:	bf00      	nop
 800db88:	20000694 	.word	0x20000694

0800db8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800db8c:	b590      	push	{r4, r7, lr}
 800db8e:	b087      	sub	sp, #28
 800db90:	af00      	add	r7, sp, #0
 800db92:	60b9      	str	r1, [r7, #8]
 800db94:	607a      	str	r2, [r7, #4]
 800db96:	603b      	str	r3, [r7, #0]
 800db98:	4603      	mov	r3, r0
 800db9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800db9c:	7bfb      	ldrb	r3, [r7, #15]
 800db9e:	4a0a      	ldr	r2, [pc, #40]	; (800dbc8 <disk_write+0x3c>)
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	68dc      	ldr	r4, [r3, #12]
 800dba8:	7bfb      	ldrb	r3, [r7, #15]
 800dbaa:	4a07      	ldr	r2, [pc, #28]	; (800dbc8 <disk_write+0x3c>)
 800dbac:	4413      	add	r3, r2
 800dbae:	7a18      	ldrb	r0, [r3, #8]
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	68b9      	ldr	r1, [r7, #8]
 800dbb6:	47a0      	blx	r4
 800dbb8:	4603      	mov	r3, r0
 800dbba:	75fb      	strb	r3, [r7, #23]
  return res;
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	371c      	adds	r7, #28
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd90      	pop	{r4, r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20000694 	.word	0x20000694

0800dbcc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	603a      	str	r2, [r7, #0]
 800dbd6:	71fb      	strb	r3, [r7, #7]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dbdc:	79fb      	ldrb	r3, [r7, #7]
 800dbde:	4a09      	ldr	r2, [pc, #36]	; (800dc04 <disk_ioctl+0x38>)
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	4413      	add	r3, r2
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	79fa      	ldrb	r2, [r7, #7]
 800dbea:	4906      	ldr	r1, [pc, #24]	; (800dc04 <disk_ioctl+0x38>)
 800dbec:	440a      	add	r2, r1
 800dbee:	7a10      	ldrb	r0, [r2, #8]
 800dbf0:	79b9      	ldrb	r1, [r7, #6]
 800dbf2:	683a      	ldr	r2, [r7, #0]
 800dbf4:	4798      	blx	r3
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	73fb      	strb	r3, [r7, #15]
  return res;
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	20000694 	.word	0x20000694

0800dc08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	3301      	adds	r3, #1
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dc18:	89fb      	ldrh	r3, [r7, #14]
 800dc1a:	021b      	lsls	r3, r3, #8
 800dc1c:	b21a      	sxth	r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	b21b      	sxth	r3, r3
 800dc24:	4313      	orrs	r3, r2
 800dc26:	b21b      	sxth	r3, r3
 800dc28:	81fb      	strh	r3, [r7, #14]
	return rv;
 800dc2a:	89fb      	ldrh	r3, [r7, #14]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	3303      	adds	r3, #3
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	021b      	lsls	r3, r3, #8
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	3202      	adds	r2, #2
 800dc50:	7812      	ldrb	r2, [r2, #0]
 800dc52:	4313      	orrs	r3, r2
 800dc54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	021b      	lsls	r3, r3, #8
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	3201      	adds	r2, #1
 800dc5e:	7812      	ldrb	r2, [r2, #0]
 800dc60:	4313      	orrs	r3, r2
 800dc62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	021b      	lsls	r3, r3, #8
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	7812      	ldrb	r2, [r2, #0]
 800dc6c:	4313      	orrs	r3, r2
 800dc6e:	60fb      	str	r3, [r7, #12]
	return rv;
 800dc70:	68fb      	ldr	r3, [r7, #12]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3714      	adds	r7, #20
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr

0800dc7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b083      	sub	sp, #12
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	460b      	mov	r3, r1
 800dc88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	1c5a      	adds	r2, r3, #1
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	887a      	ldrh	r2, [r7, #2]
 800dc92:	b2d2      	uxtb	r2, r2
 800dc94:	701a      	strb	r2, [r3, #0]
 800dc96:	887b      	ldrh	r3, [r7, #2]
 800dc98:	0a1b      	lsrs	r3, r3, #8
 800dc9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	1c5a      	adds	r2, r3, #1
 800dca0:	607a      	str	r2, [r7, #4]
 800dca2:	887a      	ldrh	r2, [r7, #2]
 800dca4:	b2d2      	uxtb	r2, r2
 800dca6:	701a      	strb	r2, [r3, #0]
}
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	1c5a      	adds	r2, r3, #1
 800dcc2:	607a      	str	r2, [r7, #4]
 800dcc4:	683a      	ldr	r2, [r7, #0]
 800dcc6:	b2d2      	uxtb	r2, r2
 800dcc8:	701a      	strb	r2, [r3, #0]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	0a1b      	lsrs	r3, r3, #8
 800dcce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	1c5a      	adds	r2, r3, #1
 800dcd4:	607a      	str	r2, [r7, #4]
 800dcd6:	683a      	ldr	r2, [r7, #0]
 800dcd8:	b2d2      	uxtb	r2, r2
 800dcda:	701a      	strb	r2, [r3, #0]
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	0a1b      	lsrs	r3, r3, #8
 800dce0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	1c5a      	adds	r2, r3, #1
 800dce6:	607a      	str	r2, [r7, #4]
 800dce8:	683a      	ldr	r2, [r7, #0]
 800dcea:	b2d2      	uxtb	r2, r2
 800dcec:	701a      	strb	r2, [r3, #0]
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	0a1b      	lsrs	r3, r3, #8
 800dcf2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	1c5a      	adds	r2, r3, #1
 800dcf8:	607a      	str	r2, [r7, #4]
 800dcfa:	683a      	ldr	r2, [r7, #0]
 800dcfc:	b2d2      	uxtb	r2, r2
 800dcfe:	701a      	strb	r2, [r3, #0]
}
 800dd00:	bf00      	nop
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800dd0c:	b480      	push	{r7}
 800dd0e:	b087      	sub	sp, #28
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00d      	beq.n	800dd42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800dd26:	693a      	ldr	r2, [r7, #16]
 800dd28:	1c53      	adds	r3, r2, #1
 800dd2a:	613b      	str	r3, [r7, #16]
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	1c59      	adds	r1, r3, #1
 800dd30:	6179      	str	r1, [r7, #20]
 800dd32:	7812      	ldrb	r2, [r2, #0]
 800dd34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	607b      	str	r3, [r7, #4]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1f1      	bne.n	800dd26 <mem_cpy+0x1a>
	}
}
 800dd42:	bf00      	nop
 800dd44:	371c      	adds	r7, #28
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800dd4e:	b480      	push	{r7}
 800dd50:	b087      	sub	sp, #28
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	60f8      	str	r0, [r7, #12]
 800dd56:	60b9      	str	r1, [r7, #8]
 800dd58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	1c5a      	adds	r2, r3, #1
 800dd62:	617a      	str	r2, [r7, #20]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	b2d2      	uxtb	r2, r2
 800dd68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	607b      	str	r3, [r7, #4]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1f3      	bne.n	800dd5e <mem_set+0x10>
}
 800dd76:	bf00      	nop
 800dd78:	bf00      	nop
 800dd7a:	371c      	adds	r7, #28
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dd84:	b480      	push	{r7}
 800dd86:	b089      	sub	sp, #36	; 0x24
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	61fb      	str	r3, [r7, #28]
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	1c5a      	adds	r2, r3, #1
 800dda0:	61fa      	str	r2, [r7, #28]
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	4619      	mov	r1, r3
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	1c5a      	adds	r2, r3, #1
 800ddaa:	61ba      	str	r2, [r7, #24]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	1acb      	subs	r3, r1, r3
 800ddb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	607b      	str	r3, [r7, #4]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d002      	beq.n	800ddc4 <mem_cmp+0x40>
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d0eb      	beq.n	800dd9c <mem_cmp+0x18>

	return r;
 800ddc4:	697b      	ldr	r3, [r7, #20]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3724      	adds	r7, #36	; 0x24
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ddd2:	b480      	push	{r7}
 800ddd4:	b083      	sub	sp, #12
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dddc:	e002      	b.n	800dde4 <chk_chr+0x12>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	3301      	adds	r3, #1
 800dde2:	607b      	str	r3, [r7, #4]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d005      	beq.n	800ddf8 <chk_chr+0x26>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d1f2      	bne.n	800ddde <chk_chr+0xc>
	return *str;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	370c      	adds	r7, #12
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d009      	beq.n	800de2a <lock_fs+0x22>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f002 fcde 	bl	80107dc <ff_req_grant>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d001      	beq.n	800de2a <lock_fs+0x22>
 800de26:	2301      	movs	r3, #1
 800de28:	e000      	b.n	800de2c <lock_fs+0x24>
 800de2a:	2300      	movs	r3, #0
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	460b      	mov	r3, r1
 800de3e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00d      	beq.n	800de62 <unlock_fs+0x2e>
 800de46:	78fb      	ldrb	r3, [r7, #3]
 800de48:	2b0c      	cmp	r3, #12
 800de4a:	d00a      	beq.n	800de62 <unlock_fs+0x2e>
 800de4c:	78fb      	ldrb	r3, [r7, #3]
 800de4e:	2b0b      	cmp	r3, #11
 800de50:	d007      	beq.n	800de62 <unlock_fs+0x2e>
 800de52:	78fb      	ldrb	r3, [r7, #3]
 800de54:	2b0f      	cmp	r3, #15
 800de56:	d004      	beq.n	800de62 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	4618      	mov	r0, r3
 800de5e:	f002 fcd2 	bl	8010806 <ff_rel_grant>
	}
}
 800de62:	bf00      	nop
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
	...

0800de6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800de76:	2300      	movs	r3, #0
 800de78:	60bb      	str	r3, [r7, #8]
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	60fb      	str	r3, [r7, #12]
 800de7e:	e029      	b.n	800ded4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800de80:	4a27      	ldr	r2, [pc, #156]	; (800df20 <chk_lock+0xb4>)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	011b      	lsls	r3, r3, #4
 800de86:	4413      	add	r3, r2
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d01d      	beq.n	800deca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800de8e:	4a24      	ldr	r2, [pc, #144]	; (800df20 <chk_lock+0xb4>)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	011b      	lsls	r3, r3, #4
 800de94:	4413      	add	r3, r2
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d116      	bne.n	800dece <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dea0:	4a1f      	ldr	r2, [pc, #124]	; (800df20 <chk_lock+0xb4>)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	011b      	lsls	r3, r3, #4
 800dea6:	4413      	add	r3, r2
 800dea8:	3304      	adds	r3, #4
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d10c      	bne.n	800dece <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800deb4:	4a1a      	ldr	r2, [pc, #104]	; (800df20 <chk_lock+0xb4>)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	011b      	lsls	r3, r3, #4
 800deba:	4413      	add	r3, r2
 800debc:	3308      	adds	r3, #8
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d102      	bne.n	800dece <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dec8:	e007      	b.n	800deda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800deca:	2301      	movs	r3, #1
 800decc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	3301      	adds	r3, #1
 800ded2:	60fb      	str	r3, [r7, #12]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d9d2      	bls.n	800de80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d109      	bne.n	800def4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d102      	bne.n	800deec <chk_lock+0x80>
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	2b02      	cmp	r3, #2
 800deea:	d101      	bne.n	800def0 <chk_lock+0x84>
 800deec:	2300      	movs	r3, #0
 800deee:	e010      	b.n	800df12 <chk_lock+0xa6>
 800def0:	2312      	movs	r3, #18
 800def2:	e00e      	b.n	800df12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d108      	bne.n	800df0c <chk_lock+0xa0>
 800defa:	4a09      	ldr	r2, [pc, #36]	; (800df20 <chk_lock+0xb4>)
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	011b      	lsls	r3, r3, #4
 800df00:	4413      	add	r3, r2
 800df02:	330c      	adds	r3, #12
 800df04:	881b      	ldrh	r3, [r3, #0]
 800df06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df0a:	d101      	bne.n	800df10 <chk_lock+0xa4>
 800df0c:	2310      	movs	r3, #16
 800df0e:	e000      	b.n	800df12 <chk_lock+0xa6>
 800df10:	2300      	movs	r3, #0
}
 800df12:	4618      	mov	r0, r3
 800df14:	3714      	adds	r7, #20
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	20000674 	.word	0x20000674

0800df24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800df2a:	2300      	movs	r3, #0
 800df2c:	607b      	str	r3, [r7, #4]
 800df2e:	e002      	b.n	800df36 <enq_lock+0x12>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	3301      	adds	r3, #1
 800df34:	607b      	str	r3, [r7, #4]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d806      	bhi.n	800df4a <enq_lock+0x26>
 800df3c:	4a09      	ldr	r2, [pc, #36]	; (800df64 <enq_lock+0x40>)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	011b      	lsls	r3, r3, #4
 800df42:	4413      	add	r3, r2
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d1f2      	bne.n	800df30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	bf14      	ite	ne
 800df50:	2301      	movne	r3, #1
 800df52:	2300      	moveq	r3, #0
 800df54:	b2db      	uxtb	r3, r3
}
 800df56:	4618      	mov	r0, r3
 800df58:	370c      	adds	r7, #12
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	20000674 	.word	0x20000674

0800df68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800df72:	2300      	movs	r3, #0
 800df74:	60fb      	str	r3, [r7, #12]
 800df76:	e01f      	b.n	800dfb8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800df78:	4a41      	ldr	r2, [pc, #260]	; (800e080 <inc_lock+0x118>)
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	011b      	lsls	r3, r3, #4
 800df7e:	4413      	add	r3, r2
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	429a      	cmp	r2, r3
 800df88:	d113      	bne.n	800dfb2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800df8a:	4a3d      	ldr	r2, [pc, #244]	; (800e080 <inc_lock+0x118>)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	011b      	lsls	r3, r3, #4
 800df90:	4413      	add	r3, r2
 800df92:	3304      	adds	r3, #4
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d109      	bne.n	800dfb2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800df9e:	4a38      	ldr	r2, [pc, #224]	; (800e080 <inc_lock+0x118>)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	011b      	lsls	r3, r3, #4
 800dfa4:	4413      	add	r3, r2
 800dfa6:	3308      	adds	r3, #8
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d006      	beq.n	800dfc0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	60fb      	str	r3, [r7, #12]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d9dc      	bls.n	800df78 <inc_lock+0x10>
 800dfbe:	e000      	b.n	800dfc2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dfc0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d132      	bne.n	800e02e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	60fb      	str	r3, [r7, #12]
 800dfcc:	e002      	b.n	800dfd4 <inc_lock+0x6c>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	60fb      	str	r3, [r7, #12]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	d806      	bhi.n	800dfe8 <inc_lock+0x80>
 800dfda:	4a29      	ldr	r2, [pc, #164]	; (800e080 <inc_lock+0x118>)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	011b      	lsls	r3, r3, #4
 800dfe0:	4413      	add	r3, r2
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1f2      	bne.n	800dfce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d101      	bne.n	800dff2 <inc_lock+0x8a>
 800dfee:	2300      	movs	r3, #0
 800dff0:	e040      	b.n	800e074 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	4922      	ldr	r1, [pc, #136]	; (800e080 <inc_lock+0x118>)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	011b      	lsls	r3, r3, #4
 800dffc:	440b      	add	r3, r1
 800dffe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	689a      	ldr	r2, [r3, #8]
 800e004:	491e      	ldr	r1, [pc, #120]	; (800e080 <inc_lock+0x118>)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	011b      	lsls	r3, r3, #4
 800e00a:	440b      	add	r3, r1
 800e00c:	3304      	adds	r3, #4
 800e00e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	695a      	ldr	r2, [r3, #20]
 800e014:	491a      	ldr	r1, [pc, #104]	; (800e080 <inc_lock+0x118>)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	011b      	lsls	r3, r3, #4
 800e01a:	440b      	add	r3, r1
 800e01c:	3308      	adds	r3, #8
 800e01e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e020:	4a17      	ldr	r2, [pc, #92]	; (800e080 <inc_lock+0x118>)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	011b      	lsls	r3, r3, #4
 800e026:	4413      	add	r3, r2
 800e028:	330c      	adds	r3, #12
 800e02a:	2200      	movs	r2, #0
 800e02c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d009      	beq.n	800e048 <inc_lock+0xe0>
 800e034:	4a12      	ldr	r2, [pc, #72]	; (800e080 <inc_lock+0x118>)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	011b      	lsls	r3, r3, #4
 800e03a:	4413      	add	r3, r2
 800e03c:	330c      	adds	r3, #12
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d001      	beq.n	800e048 <inc_lock+0xe0>
 800e044:	2300      	movs	r3, #0
 800e046:	e015      	b.n	800e074 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d108      	bne.n	800e060 <inc_lock+0xf8>
 800e04e:	4a0c      	ldr	r2, [pc, #48]	; (800e080 <inc_lock+0x118>)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	011b      	lsls	r3, r3, #4
 800e054:	4413      	add	r3, r2
 800e056:	330c      	adds	r3, #12
 800e058:	881b      	ldrh	r3, [r3, #0]
 800e05a:	3301      	adds	r3, #1
 800e05c:	b29a      	uxth	r2, r3
 800e05e:	e001      	b.n	800e064 <inc_lock+0xfc>
 800e060:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e064:	4906      	ldr	r1, [pc, #24]	; (800e080 <inc_lock+0x118>)
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	011b      	lsls	r3, r3, #4
 800e06a:	440b      	add	r3, r1
 800e06c:	330c      	adds	r3, #12
 800e06e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	3301      	adds	r3, #1
}
 800e074:	4618      	mov	r0, r3
 800e076:	3714      	adds	r7, #20
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	20000674 	.word	0x20000674

0800e084 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	3b01      	subs	r3, #1
 800e090:	607b      	str	r3, [r7, #4]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b01      	cmp	r3, #1
 800e096:	d825      	bhi.n	800e0e4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e098:	4a17      	ldr	r2, [pc, #92]	; (800e0f8 <dec_lock+0x74>)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	011b      	lsls	r3, r3, #4
 800e09e:	4413      	add	r3, r2
 800e0a0:	330c      	adds	r3, #12
 800e0a2:	881b      	ldrh	r3, [r3, #0]
 800e0a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e0a6:	89fb      	ldrh	r3, [r7, #14]
 800e0a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0ac:	d101      	bne.n	800e0b2 <dec_lock+0x2e>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e0b2:	89fb      	ldrh	r3, [r7, #14]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <dec_lock+0x3a>
 800e0b8:	89fb      	ldrh	r3, [r7, #14]
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e0be:	4a0e      	ldr	r2, [pc, #56]	; (800e0f8 <dec_lock+0x74>)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	011b      	lsls	r3, r3, #4
 800e0c4:	4413      	add	r3, r2
 800e0c6:	330c      	adds	r3, #12
 800e0c8:	89fa      	ldrh	r2, [r7, #14]
 800e0ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e0cc:	89fb      	ldrh	r3, [r7, #14]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d105      	bne.n	800e0de <dec_lock+0x5a>
 800e0d2:	4a09      	ldr	r2, [pc, #36]	; (800e0f8 <dec_lock+0x74>)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	011b      	lsls	r3, r3, #4
 800e0d8:	4413      	add	r3, r2
 800e0da:	2200      	movs	r2, #0
 800e0dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	737b      	strb	r3, [r7, #13]
 800e0e2:	e001      	b.n	800e0e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e0e4:	2302      	movs	r3, #2
 800e0e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e0e8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3714      	adds	r7, #20
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	20000674 	.word	0x20000674

0800e0fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e104:	2300      	movs	r3, #0
 800e106:	60fb      	str	r3, [r7, #12]
 800e108:	e010      	b.n	800e12c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e10a:	4a0d      	ldr	r2, [pc, #52]	; (800e140 <clear_lock+0x44>)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	011b      	lsls	r3, r3, #4
 800e110:	4413      	add	r3, r2
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	429a      	cmp	r2, r3
 800e118:	d105      	bne.n	800e126 <clear_lock+0x2a>
 800e11a:	4a09      	ldr	r2, [pc, #36]	; (800e140 <clear_lock+0x44>)
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	011b      	lsls	r3, r3, #4
 800e120:	4413      	add	r3, r2
 800e122:	2200      	movs	r2, #0
 800e124:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	3301      	adds	r3, #1
 800e12a:	60fb      	str	r3, [r7, #12]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d9eb      	bls.n	800e10a <clear_lock+0xe>
	}
}
 800e132:	bf00      	nop
 800e134:	bf00      	nop
 800e136:	3714      	adds	r7, #20
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr
 800e140:	20000674 	.word	0x20000674

0800e144 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e14c:	2300      	movs	r3, #0
 800e14e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	78db      	ldrb	r3, [r3, #3]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d034      	beq.n	800e1c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e15c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	7858      	ldrb	r0, [r3, #1]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e168:	2301      	movs	r3, #1
 800e16a:	697a      	ldr	r2, [r7, #20]
 800e16c:	f7ff fd0e 	bl	800db8c <disk_write>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d002      	beq.n	800e17c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e176:	2301      	movs	r3, #1
 800e178:	73fb      	strb	r3, [r7, #15]
 800e17a:	e022      	b.n	800e1c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e186:	697a      	ldr	r2, [r7, #20]
 800e188:	1ad2      	subs	r2, r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	69db      	ldr	r3, [r3, #28]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d217      	bcs.n	800e1c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	789b      	ldrb	r3, [r3, #2]
 800e196:	613b      	str	r3, [r7, #16]
 800e198:	e010      	b.n	800e1bc <sync_window+0x78>
					wsect += fs->fsize;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	69db      	ldr	r3, [r3, #28]
 800e19e:	697a      	ldr	r2, [r7, #20]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	7858      	ldrb	r0, [r3, #1]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	697a      	ldr	r2, [r7, #20]
 800e1b2:	f7ff fceb 	bl	800db8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	613b      	str	r3, [r7, #16]
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d8eb      	bhi.n	800e19a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3718      	adds	r7, #24
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1de:	683a      	ldr	r2, [r7, #0]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d01b      	beq.n	800e21c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7ff ffad 	bl	800e144 <sync_window>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e1ee:	7bfb      	ldrb	r3, [r7, #15]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d113      	bne.n	800e21c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	7858      	ldrb	r0, [r3, #1]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1fe:	2301      	movs	r3, #1
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	f7ff fca3 	bl	800db4c <disk_read>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d004      	beq.n	800e216 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e20c:	f04f 33ff 	mov.w	r3, #4294967295
 800e210:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e212:	2301      	movs	r3, #1
 800e214:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	683a      	ldr	r2, [r7, #0]
 800e21a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
	...

0800e228 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f7ff ff87 	bl	800e144 <sync_window>
 800e236:	4603      	mov	r3, r0
 800e238:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e23a:	7bfb      	ldrb	r3, [r7, #15]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d158      	bne.n	800e2f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	2b03      	cmp	r3, #3
 800e246:	d148      	bne.n	800e2da <sync_fs+0xb2>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	791b      	ldrb	r3, [r3, #4]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d144      	bne.n	800e2da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	3334      	adds	r3, #52	; 0x34
 800e254:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e258:	2100      	movs	r1, #0
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7ff fd77 	bl	800dd4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3334      	adds	r3, #52	; 0x34
 800e264:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e268:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7ff fd06 	bl	800dc7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	3334      	adds	r3, #52	; 0x34
 800e276:	4921      	ldr	r1, [pc, #132]	; (800e2fc <sync_fs+0xd4>)
 800e278:	4618      	mov	r0, r3
 800e27a:	f7ff fd1b 	bl	800dcb4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	3334      	adds	r3, #52	; 0x34
 800e282:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e286:	491e      	ldr	r1, [pc, #120]	; (800e300 <sync_fs+0xd8>)
 800e288:	4618      	mov	r0, r3
 800e28a:	f7ff fd13 	bl	800dcb4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	3334      	adds	r3, #52	; 0x34
 800e292:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	695b      	ldr	r3, [r3, #20]
 800e29a:	4619      	mov	r1, r3
 800e29c:	4610      	mov	r0, r2
 800e29e:	f7ff fd09 	bl	800dcb4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	3334      	adds	r3, #52	; 0x34
 800e2a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	f7ff fcff 	bl	800dcb4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	1c5a      	adds	r2, r3, #1
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7858      	ldrb	r0, [r3, #1]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	f7ff fc5c 	bl	800db8c <disk_write>
			fs->fsi_flag = 0;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	785b      	ldrb	r3, [r3, #1]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7ff fc72 	bl	800dbcc <disk_ioctl>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d001      	beq.n	800e2f2 <sync_fs+0xca>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	41615252 	.word	0x41615252
 800e300:	61417272 	.word	0x61417272

0800e304 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	3b02      	subs	r3, #2
 800e312:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	699b      	ldr	r3, [r3, #24]
 800e318:	3b02      	subs	r3, #2
 800e31a:	683a      	ldr	r2, [r7, #0]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d301      	bcc.n	800e324 <clust2sect+0x20>
 800e320:	2300      	movs	r3, #0
 800e322:	e008      	b.n	800e336 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	895b      	ldrh	r3, [r3, #10]
 800e328:	461a      	mov	r2, r3
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	fb03 f202 	mul.w	r2, r3, r2
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e334:	4413      	add	r3, r2
}
 800e336:	4618      	mov	r0, r3
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr

0800e342 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b086      	sub	sp, #24
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	2b01      	cmp	r3, #1
 800e356:	d904      	bls.n	800e362 <get_fat+0x20>
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	699b      	ldr	r3, [r3, #24]
 800e35c:	683a      	ldr	r2, [r7, #0]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d302      	bcc.n	800e368 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e362:	2301      	movs	r3, #1
 800e364:	617b      	str	r3, [r7, #20]
 800e366:	e08f      	b.n	800e488 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e368:	f04f 33ff 	mov.w	r3, #4294967295
 800e36c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	2b03      	cmp	r3, #3
 800e374:	d062      	beq.n	800e43c <get_fat+0xfa>
 800e376:	2b03      	cmp	r3, #3
 800e378:	dc7c      	bgt.n	800e474 <get_fat+0x132>
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d002      	beq.n	800e384 <get_fat+0x42>
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d042      	beq.n	800e408 <get_fat+0xc6>
 800e382:	e077      	b.n	800e474 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	60fb      	str	r3, [r7, #12]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	085b      	lsrs	r3, r3, #1
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	4413      	add	r3, r2
 800e390:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	0a5b      	lsrs	r3, r3, #9
 800e39a:	4413      	add	r3, r2
 800e39c:	4619      	mov	r1, r3
 800e39e:	6938      	ldr	r0, [r7, #16]
 800e3a0:	f7ff ff14 	bl	800e1cc <move_window>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d167      	bne.n	800e47a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	1c5a      	adds	r2, r3, #1
 800e3ae:	60fa      	str	r2, [r7, #12]
 800e3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3b4:	693a      	ldr	r2, [r7, #16]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e3bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	0a5b      	lsrs	r3, r3, #9
 800e3c6:	4413      	add	r3, r2
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	6938      	ldr	r0, [r7, #16]
 800e3cc:	f7ff fefe 	bl	800e1cc <move_window>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d153      	bne.n	800e47e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3dc:	693a      	ldr	r2, [r7, #16]
 800e3de:	4413      	add	r3, r2
 800e3e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e3e4:	021b      	lsls	r3, r3, #8
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	f003 0301 	and.w	r3, r3, #1
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <get_fat+0xbc>
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	091b      	lsrs	r3, r3, #4
 800e3fc:	e002      	b.n	800e404 <get_fat+0xc2>
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e404:	617b      	str	r3, [r7, #20]
			break;
 800e406:	e03f      	b.n	800e488 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	0a1b      	lsrs	r3, r3, #8
 800e410:	4413      	add	r3, r2
 800e412:	4619      	mov	r1, r3
 800e414:	6938      	ldr	r0, [r7, #16]
 800e416:	f7ff fed9 	bl	800e1cc <move_window>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d130      	bne.n	800e482 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	005b      	lsls	r3, r3, #1
 800e42a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e42e:	4413      	add	r3, r2
 800e430:	4618      	mov	r0, r3
 800e432:	f7ff fbe9 	bl	800dc08 <ld_word>
 800e436:	4603      	mov	r3, r0
 800e438:	617b      	str	r3, [r7, #20]
			break;
 800e43a:	e025      	b.n	800e488 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	09db      	lsrs	r3, r3, #7
 800e444:	4413      	add	r3, r2
 800e446:	4619      	mov	r1, r3
 800e448:	6938      	ldr	r0, [r7, #16]
 800e44a:	f7ff febf 	bl	800e1cc <move_window>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d118      	bne.n	800e486 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e462:	4413      	add	r3, r2
 800e464:	4618      	mov	r0, r3
 800e466:	f7ff fbe7 	bl	800dc38 <ld_dword>
 800e46a:	4603      	mov	r3, r0
 800e46c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e470:	617b      	str	r3, [r7, #20]
			break;
 800e472:	e009      	b.n	800e488 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e474:	2301      	movs	r3, #1
 800e476:	617b      	str	r3, [r7, #20]
 800e478:	e006      	b.n	800e488 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e47a:	bf00      	nop
 800e47c:	e004      	b.n	800e488 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e47e:	bf00      	nop
 800e480:	e002      	b.n	800e488 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e482:	bf00      	nop
 800e484:	e000      	b.n	800e488 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e486:	bf00      	nop
		}
	}

	return val;
 800e488:	697b      	ldr	r3, [r7, #20]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3718      	adds	r7, #24
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e492:	b590      	push	{r4, r7, lr}
 800e494:	b089      	sub	sp, #36	; 0x24
 800e496:	af00      	add	r7, sp, #0
 800e498:	60f8      	str	r0, [r7, #12]
 800e49a:	60b9      	str	r1, [r7, #8]
 800e49c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e49e:	2302      	movs	r3, #2
 800e4a0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	f240 80d2 	bls.w	800e64e <put_fat+0x1bc>
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	699b      	ldr	r3, [r3, #24]
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	f080 80cc 	bcs.w	800e64e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2b03      	cmp	r3, #3
 800e4bc:	f000 8096 	beq.w	800e5ec <put_fat+0x15a>
 800e4c0:	2b03      	cmp	r3, #3
 800e4c2:	f300 80cd 	bgt.w	800e660 <put_fat+0x1ce>
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d002      	beq.n	800e4d0 <put_fat+0x3e>
 800e4ca:	2b02      	cmp	r3, #2
 800e4cc:	d06e      	beq.n	800e5ac <put_fat+0x11a>
 800e4ce:	e0c7      	b.n	800e660 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	61bb      	str	r3, [r7, #24]
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	085b      	lsrs	r3, r3, #1
 800e4d8:	69ba      	ldr	r2, [r7, #24]
 800e4da:	4413      	add	r3, r2
 800e4dc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	0a5b      	lsrs	r3, r3, #9
 800e4e6:	4413      	add	r3, r2
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7ff fe6e 	bl	800e1cc <move_window>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e4f4:	7ffb      	ldrb	r3, [r7, #31]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f040 80ab 	bne.w	800e652 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	1c59      	adds	r1, r3, #1
 800e506:	61b9      	str	r1, [r7, #24]
 800e508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e50c:	4413      	add	r3, r2
 800e50e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	f003 0301 	and.w	r3, r3, #1
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00d      	beq.n	800e536 <put_fat+0xa4>
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	b25b      	sxtb	r3, r3
 800e520:	f003 030f 	and.w	r3, r3, #15
 800e524:	b25a      	sxtb	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	011b      	lsls	r3, r3, #4
 800e52c:	b25b      	sxtb	r3, r3
 800e52e:	4313      	orrs	r3, r2
 800e530:	b25b      	sxtb	r3, r3
 800e532:	b2db      	uxtb	r3, r3
 800e534:	e001      	b.n	800e53a <put_fat+0xa8>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	697a      	ldr	r2, [r7, #20]
 800e53c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2201      	movs	r2, #1
 800e542:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	0a5b      	lsrs	r3, r3, #9
 800e54c:	4413      	add	r3, r2
 800e54e:	4619      	mov	r1, r3
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	f7ff fe3b 	bl	800e1cc <move_window>
 800e556:	4603      	mov	r3, r0
 800e558:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e55a:	7ffb      	ldrb	r3, [r7, #31]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d17a      	bne.n	800e656 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e566:	69bb      	ldr	r3, [r7, #24]
 800e568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e56c:	4413      	add	r3, r2
 800e56e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	d003      	beq.n	800e582 <put_fat+0xf0>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	091b      	lsrs	r3, r3, #4
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	e00e      	b.n	800e5a0 <put_fat+0x10e>
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	b25b      	sxtb	r3, r3
 800e588:	f023 030f 	bic.w	r3, r3, #15
 800e58c:	b25a      	sxtb	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	0a1b      	lsrs	r3, r3, #8
 800e592:	b25b      	sxtb	r3, r3
 800e594:	f003 030f 	and.w	r3, r3, #15
 800e598:	b25b      	sxtb	r3, r3
 800e59a:	4313      	orrs	r3, r2
 800e59c:	b25b      	sxtb	r3, r3
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	697a      	ldr	r2, [r7, #20]
 800e5a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	70da      	strb	r2, [r3, #3]
			break;
 800e5aa:	e059      	b.n	800e660 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	0a1b      	lsrs	r3, r3, #8
 800e5b4:	4413      	add	r3, r2
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	68f8      	ldr	r0, [r7, #12]
 800e5ba:	f7ff fe07 	bl	800e1cc <move_window>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e5c2:	7ffb      	ldrb	r3, [r7, #31]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d148      	bne.n	800e65a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e5d6:	4413      	add	r3, r2
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	b292      	uxth	r2, r2
 800e5dc:	4611      	mov	r1, r2
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7ff fb4d 	bl	800dc7e <st_word>
			fs->wflag = 1;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	70da      	strb	r2, [r3, #3]
			break;
 800e5ea:	e039      	b.n	800e660 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	09db      	lsrs	r3, r3, #7
 800e5f4:	4413      	add	r3, r2
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f7ff fde7 	bl	800e1cc <move_window>
 800e5fe:	4603      	mov	r3, r0
 800e600:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e602:	7ffb      	ldrb	r3, [r7, #31]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d12a      	bne.n	800e65e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e61c:	4413      	add	r3, r2
 800e61e:	4618      	mov	r0, r3
 800e620:	f7ff fb0a 	bl	800dc38 <ld_dword>
 800e624:	4603      	mov	r3, r0
 800e626:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e62a:	4323      	orrs	r3, r4
 800e62c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e63c:	4413      	add	r3, r2
 800e63e:	6879      	ldr	r1, [r7, #4]
 800e640:	4618      	mov	r0, r3
 800e642:	f7ff fb37 	bl	800dcb4 <st_dword>
			fs->wflag = 1;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2201      	movs	r2, #1
 800e64a:	70da      	strb	r2, [r3, #3]
			break;
 800e64c:	e008      	b.n	800e660 <put_fat+0x1ce>
		}
	}
 800e64e:	bf00      	nop
 800e650:	e006      	b.n	800e660 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e652:	bf00      	nop
 800e654:	e004      	b.n	800e660 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e656:	bf00      	nop
 800e658:	e002      	b.n	800e660 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e65a:	bf00      	nop
 800e65c:	e000      	b.n	800e660 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e65e:	bf00      	nop
	return res;
 800e660:	7ffb      	ldrb	r3, [r7, #31]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3724      	adds	r7, #36	; 0x24
 800e666:	46bd      	mov	sp, r7
 800e668:	bd90      	pop	{r4, r7, pc}

0800e66a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b088      	sub	sp, #32
 800e66e:	af00      	add	r7, sp, #0
 800e670:	60f8      	str	r0, [r7, #12]
 800e672:	60b9      	str	r1, [r7, #8]
 800e674:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e676:	2300      	movs	r3, #0
 800e678:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	2b01      	cmp	r3, #1
 800e684:	d904      	bls.n	800e690 <remove_chain+0x26>
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d301      	bcc.n	800e694 <remove_chain+0x2a>
 800e690:	2302      	movs	r3, #2
 800e692:	e04b      	b.n	800e72c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d00c      	beq.n	800e6b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e69a:	f04f 32ff 	mov.w	r2, #4294967295
 800e69e:	6879      	ldr	r1, [r7, #4]
 800e6a0:	69b8      	ldr	r0, [r7, #24]
 800e6a2:	f7ff fef6 	bl	800e492 <put_fat>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e6aa:	7ffb      	ldrb	r3, [r7, #31]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d001      	beq.n	800e6b4 <remove_chain+0x4a>
 800e6b0:	7ffb      	ldrb	r3, [r7, #31]
 800e6b2:	e03b      	b.n	800e72c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e6b4:	68b9      	ldr	r1, [r7, #8]
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f7ff fe43 	bl	800e342 <get_fat>
 800e6bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d031      	beq.n	800e728 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d101      	bne.n	800e6ce <remove_chain+0x64>
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	e02e      	b.n	800e72c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d4:	d101      	bne.n	800e6da <remove_chain+0x70>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e028      	b.n	800e72c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e6da:	2200      	movs	r2, #0
 800e6dc:	68b9      	ldr	r1, [r7, #8]
 800e6de:	69b8      	ldr	r0, [r7, #24]
 800e6e0:	f7ff fed7 	bl	800e492 <put_fat>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e6e8:	7ffb      	ldrb	r3, [r7, #31]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <remove_chain+0x88>
 800e6ee:	7ffb      	ldrb	r3, [r7, #31]
 800e6f0:	e01c      	b.n	800e72c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	695a      	ldr	r2, [r3, #20]
 800e6f6:	69bb      	ldr	r3, [r7, #24]
 800e6f8:	699b      	ldr	r3, [r3, #24]
 800e6fa:	3b02      	subs	r3, #2
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d20b      	bcs.n	800e718 <remove_chain+0xae>
			fs->free_clst++;
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	695b      	ldr	r3, [r3, #20]
 800e704:	1c5a      	adds	r2, r3, #1
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	791b      	ldrb	r3, [r3, #4]
 800e70e:	f043 0301 	orr.w	r3, r3, #1
 800e712:	b2da      	uxtb	r2, r3
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	699b      	ldr	r3, [r3, #24]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	429a      	cmp	r2, r3
 800e724:	d3c6      	bcc.n	800e6b4 <remove_chain+0x4a>
 800e726:	e000      	b.n	800e72a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e728:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3720      	adds	r7, #32
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b088      	sub	sp, #32
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d10d      	bne.n	800e766 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d004      	beq.n	800e760 <create_chain+0x2c>
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	699b      	ldr	r3, [r3, #24]
 800e75a:	69ba      	ldr	r2, [r7, #24]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d31b      	bcc.n	800e798 <create_chain+0x64>
 800e760:	2301      	movs	r3, #1
 800e762:	61bb      	str	r3, [r7, #24]
 800e764:	e018      	b.n	800e798 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e766:	6839      	ldr	r1, [r7, #0]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7ff fdea 	bl	800e342 <get_fat>
 800e76e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2b01      	cmp	r3, #1
 800e774:	d801      	bhi.n	800e77a <create_chain+0x46>
 800e776:	2301      	movs	r3, #1
 800e778:	e070      	b.n	800e85c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e780:	d101      	bne.n	800e786 <create_chain+0x52>
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	e06a      	b.n	800e85c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d201      	bcs.n	800e794 <create_chain+0x60>
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	e063      	b.n	800e85c <create_chain+0x128>
		scl = clst;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	699b      	ldr	r3, [r3, #24]
 800e7a6:	69fa      	ldr	r2, [r7, #28]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d307      	bcc.n	800e7bc <create_chain+0x88>
				ncl = 2;
 800e7ac:	2302      	movs	r3, #2
 800e7ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e7b0:	69fa      	ldr	r2, [r7, #28]
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d901      	bls.n	800e7bc <create_chain+0x88>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	e04f      	b.n	800e85c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e7bc:	69f9      	ldr	r1, [r7, #28]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f7ff fdbf 	bl	800e342 <get_fat>
 800e7c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00e      	beq.n	800e7ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d003      	beq.n	800e7da <create_chain+0xa6>
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d8:	d101      	bne.n	800e7de <create_chain+0xaa>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	e03e      	b.n	800e85c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e7de:	69fa      	ldr	r2, [r7, #28]
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d1da      	bne.n	800e79c <create_chain+0x68>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	e038      	b.n	800e85c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e7ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f0:	69f9      	ldr	r1, [r7, #28]
 800e7f2:	6938      	ldr	r0, [r7, #16]
 800e7f4:	f7ff fe4d 	bl	800e492 <put_fat>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e7fc:	7dfb      	ldrb	r3, [r7, #23]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d109      	bne.n	800e816 <create_chain+0xe2>
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d006      	beq.n	800e816 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e808:	69fa      	ldr	r2, [r7, #28]
 800e80a:	6839      	ldr	r1, [r7, #0]
 800e80c:	6938      	ldr	r0, [r7, #16]
 800e80e:	f7ff fe40 	bl	800e492 <put_fat>
 800e812:	4603      	mov	r3, r0
 800e814:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e816:	7dfb      	ldrb	r3, [r7, #23]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d116      	bne.n	800e84a <create_chain+0x116>
		fs->last_clst = ncl;
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	69fa      	ldr	r2, [r7, #28]
 800e820:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	695a      	ldr	r2, [r3, #20]
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	699b      	ldr	r3, [r3, #24]
 800e82a:	3b02      	subs	r3, #2
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d804      	bhi.n	800e83a <create_chain+0x106>
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	695b      	ldr	r3, [r3, #20]
 800e834:	1e5a      	subs	r2, r3, #1
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	791b      	ldrb	r3, [r3, #4]
 800e83e:	f043 0301 	orr.w	r3, r3, #1
 800e842:	b2da      	uxtb	r2, r3
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	711a      	strb	r2, [r3, #4]
 800e848:	e007      	b.n	800e85a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e84a:	7dfb      	ldrb	r3, [r7, #23]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d102      	bne.n	800e856 <create_chain+0x122>
 800e850:	f04f 33ff 	mov.w	r3, #4294967295
 800e854:	e000      	b.n	800e858 <create_chain+0x124>
 800e856:	2301      	movs	r3, #1
 800e858:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e85a:	69fb      	ldr	r3, [r7, #28]
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3720      	adds	r7, #32
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e864:	b480      	push	{r7}
 800e866:	b087      	sub	sp, #28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e878:	3304      	adds	r3, #4
 800e87a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	0a5b      	lsrs	r3, r3, #9
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	8952      	ldrh	r2, [r2, #10]
 800e884:	fbb3 f3f2 	udiv	r3, r3, r2
 800e888:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	1d1a      	adds	r2, r3, #4
 800e88e:	613a      	str	r2, [r7, #16]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d101      	bne.n	800e89e <clmt_clust+0x3a>
 800e89a:	2300      	movs	r3, #0
 800e89c:	e010      	b.n	800e8c0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e89e:	697a      	ldr	r2, [r7, #20]
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d307      	bcc.n	800e8b6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e8a6:	697a      	ldr	r2, [r7, #20]
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	1ad3      	subs	r3, r2, r3
 800e8ac:	617b      	str	r3, [r7, #20]
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	3304      	adds	r3, #4
 800e8b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e8b4:	e7e9      	b.n	800e88a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e8b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	4413      	add	r3, r2
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	371c      	adds	r7, #28
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8e2:	d204      	bcs.n	800e8ee <dir_sdi+0x22>
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	f003 031f 	and.w	r3, r3, #31
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d001      	beq.n	800e8f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	e063      	b.n	800e9ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d106      	bne.n	800e912 <dir_sdi+0x46>
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	2b02      	cmp	r3, #2
 800e90a:	d902      	bls.n	800e912 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e910:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10c      	bne.n	800e932 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	095b      	lsrs	r3, r3, #5
 800e91c:	693a      	ldr	r2, [r7, #16]
 800e91e:	8912      	ldrh	r2, [r2, #8]
 800e920:	4293      	cmp	r3, r2
 800e922:	d301      	bcc.n	800e928 <dir_sdi+0x5c>
 800e924:	2302      	movs	r3, #2
 800e926:	e048      	b.n	800e9ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	61da      	str	r2, [r3, #28]
 800e930:	e029      	b.n	800e986 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	895b      	ldrh	r3, [r3, #10]
 800e936:	025b      	lsls	r3, r3, #9
 800e938:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e93a:	e019      	b.n	800e970 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6979      	ldr	r1, [r7, #20]
 800e940:	4618      	mov	r0, r3
 800e942:	f7ff fcfe 	bl	800e342 <get_fat>
 800e946:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e94e:	d101      	bne.n	800e954 <dir_sdi+0x88>
 800e950:	2301      	movs	r3, #1
 800e952:	e032      	b.n	800e9ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	2b01      	cmp	r3, #1
 800e958:	d904      	bls.n	800e964 <dir_sdi+0x98>
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	699b      	ldr	r3, [r3, #24]
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	429a      	cmp	r2, r3
 800e962:	d301      	bcc.n	800e968 <dir_sdi+0x9c>
 800e964:	2302      	movs	r3, #2
 800e966:	e028      	b.n	800e9ba <dir_sdi+0xee>
			ofs -= csz;
 800e968:	683a      	ldr	r2, [r7, #0]
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	1ad3      	subs	r3, r2, r3
 800e96e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e970:	683a      	ldr	r2, [r7, #0]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	429a      	cmp	r2, r3
 800e976:	d2e1      	bcs.n	800e93c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e978:	6979      	ldr	r1, [r7, #20]
 800e97a:	6938      	ldr	r0, [r7, #16]
 800e97c:	f7ff fcc2 	bl	800e304 <clust2sect>
 800e980:	4602      	mov	r2, r0
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	69db      	ldr	r3, [r3, #28]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <dir_sdi+0xcc>
 800e994:	2302      	movs	r3, #2
 800e996:	e010      	b.n	800e9ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	69da      	ldr	r2, [r3, #28]
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	0a5b      	lsrs	r3, r3, #9
 800e9a0:	441a      	add	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9b2:	441a      	add	r2, r3
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3718      	adds	r7, #24
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b086      	sub	sp, #24
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	695b      	ldr	r3, [r3, #20]
 800e9d6:	3320      	adds	r3, #32
 800e9d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	69db      	ldr	r3, [r3, #28]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d003      	beq.n	800e9ea <dir_next+0x28>
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e9e8:	d301      	bcc.n	800e9ee <dir_next+0x2c>
 800e9ea:	2304      	movs	r3, #4
 800e9ec:	e0aa      	b.n	800eb44 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	f040 8098 	bne.w	800eb2a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	69db      	ldr	r3, [r3, #28]
 800e9fe:	1c5a      	adds	r2, r3, #1
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	699b      	ldr	r3, [r3, #24]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d10b      	bne.n	800ea24 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	095b      	lsrs	r3, r3, #5
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	8912      	ldrh	r2, [r2, #8]
 800ea14:	4293      	cmp	r3, r2
 800ea16:	f0c0 8088 	bcc.w	800eb2a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	61da      	str	r2, [r3, #28]
 800ea20:	2304      	movs	r3, #4
 800ea22:	e08f      	b.n	800eb44 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	0a5b      	lsrs	r3, r3, #9
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	8952      	ldrh	r2, [r2, #10]
 800ea2c:	3a01      	subs	r2, #1
 800ea2e:	4013      	ands	r3, r2
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d17a      	bne.n	800eb2a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	699b      	ldr	r3, [r3, #24]
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	f7ff fc80 	bl	800e342 <get_fat>
 800ea42:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d801      	bhi.n	800ea4e <dir_next+0x8c>
 800ea4a:	2302      	movs	r3, #2
 800ea4c:	e07a      	b.n	800eb44 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea54:	d101      	bne.n	800ea5a <dir_next+0x98>
 800ea56:	2301      	movs	r3, #1
 800ea58:	e074      	b.n	800eb44 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d358      	bcc.n	800eb16 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d104      	bne.n	800ea74 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	61da      	str	r2, [r3, #28]
 800ea70:	2304      	movs	r3, #4
 800ea72:	e067      	b.n	800eb44 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	699b      	ldr	r3, [r3, #24]
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	f7ff fe59 	bl	800e734 <create_chain>
 800ea82:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d101      	bne.n	800ea8e <dir_next+0xcc>
 800ea8a:	2307      	movs	r3, #7
 800ea8c:	e05a      	b.n	800eb44 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d101      	bne.n	800ea98 <dir_next+0xd6>
 800ea94:	2302      	movs	r3, #2
 800ea96:	e055      	b.n	800eb44 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9e:	d101      	bne.n	800eaa4 <dir_next+0xe2>
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e04f      	b.n	800eb44 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f7ff fb4d 	bl	800e144 <sync_window>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <dir_next+0xf2>
 800eab0:	2301      	movs	r3, #1
 800eab2:	e047      	b.n	800eb44 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	3334      	adds	r3, #52	; 0x34
 800eab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eabc:	2100      	movs	r1, #0
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7ff f945 	bl	800dd4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eac4:	2300      	movs	r3, #0
 800eac6:	613b      	str	r3, [r7, #16]
 800eac8:	6979      	ldr	r1, [r7, #20]
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f7ff fc1a 	bl	800e304 <clust2sect>
 800ead0:	4602      	mov	r2, r0
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	631a      	str	r2, [r3, #48]	; 0x30
 800ead6:	e012      	b.n	800eafe <dir_next+0x13c>
						fs->wflag = 1;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2201      	movs	r2, #1
 800eadc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f7ff fb30 	bl	800e144 <sync_window>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d001      	beq.n	800eaee <dir_next+0x12c>
 800eaea:	2301      	movs	r3, #1
 800eaec:	e02a      	b.n	800eb44 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	613b      	str	r3, [r7, #16]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf8:	1c5a      	adds	r2, r3, #1
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	631a      	str	r2, [r3, #48]	; 0x30
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	895b      	ldrh	r3, [r3, #10]
 800eb02:	461a      	mov	r2, r3
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d3e6      	bcc.n	800ead8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	1ad2      	subs	r2, r2, r3
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	697a      	ldr	r2, [r7, #20]
 800eb1a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800eb1c:	6979      	ldr	r1, [r7, #20]
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f7ff fbf0 	bl	800e304 <clust2sect>
 800eb24:	4602      	mov	r2, r0
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb3c:	441a      	add	r2, r3
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3718      	adds	r7, #24
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7ff feb4 	bl	800e8cc <dir_sdi>
 800eb64:	4603      	mov	r3, r0
 800eb66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb68:	7dfb      	ldrb	r3, [r7, #23]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d12b      	bne.n	800ebc6 <dir_alloc+0x7a>
		n = 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	69db      	ldr	r3, [r3, #28]
 800eb76:	4619      	mov	r1, r3
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7ff fb27 	bl	800e1cc <move_window>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d11d      	bne.n	800ebc4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a1b      	ldr	r3, [r3, #32]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	2be5      	cmp	r3, #229	; 0xe5
 800eb90:	d004      	beq.n	800eb9c <dir_alloc+0x50>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d107      	bne.n	800ebac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	613b      	str	r3, [r7, #16]
 800eba2:	693a      	ldr	r2, [r7, #16]
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d102      	bne.n	800ebb0 <dir_alloc+0x64>
 800ebaa:	e00c      	b.n	800ebc6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ebac:	2300      	movs	r3, #0
 800ebae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ebb0:	2101      	movs	r1, #1
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7ff ff05 	bl	800e9c2 <dir_next>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ebbc:	7dfb      	ldrb	r3, [r7, #23]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d0d7      	beq.n	800eb72 <dir_alloc+0x26>
 800ebc2:	e000      	b.n	800ebc6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ebc4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ebc6:	7dfb      	ldrb	r3, [r7, #23]
 800ebc8:	2b04      	cmp	r3, #4
 800ebca:	d101      	bne.n	800ebd0 <dir_alloc+0x84>
 800ebcc:	2307      	movs	r3, #7
 800ebce:	75fb      	strb	r3, [r7, #23]
	return res;
 800ebd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b084      	sub	sp, #16
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	331a      	adds	r3, #26
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7ff f80d 	bl	800dc08 <ld_word>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	2b03      	cmp	r3, #3
 800ebf8:	d109      	bne.n	800ec0e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	3314      	adds	r3, #20
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7ff f802 	bl	800dc08 <ld_word>
 800ec04:	4603      	mov	r3, r0
 800ec06:	041b      	lsls	r3, r3, #16
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	331a      	adds	r3, #26
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	b292      	uxth	r2, r2
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7ff f825 	bl	800dc7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	2b03      	cmp	r3, #3
 800ec3a:	d109      	bne.n	800ec50 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	f103 0214 	add.w	r2, r3, #20
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	0c1b      	lsrs	r3, r3, #16
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	4619      	mov	r1, r3
 800ec4a:	4610      	mov	r0, r2
 800ec4c:	f7ff f817 	bl	800dc7e <st_word>
	}
}
 800ec50:	bf00      	nop
 800ec52:	3710      	adds	r7, #16
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ec62:	2304      	movs	r3, #4
 800ec64:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800ec6c:	e03c      	b.n	800ece8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	69db      	ldr	r3, [r3, #28]
 800ec72:	4619      	mov	r1, r3
 800ec74:	6938      	ldr	r0, [r7, #16]
 800ec76:	f7ff faa9 	bl	800e1cc <move_window>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ec7e:	7dfb      	ldrb	r3, [r7, #23]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d136      	bne.n	800ecf2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6a1b      	ldr	r3, [r3, #32]
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d102      	bne.n	800ec98 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ec92:	2304      	movs	r3, #4
 800ec94:	75fb      	strb	r3, [r7, #23]
 800ec96:	e031      	b.n	800ecfc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a1b      	ldr	r3, [r3, #32]
 800ec9c:	330b      	adds	r3, #11
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eca4:	73bb      	strb	r3, [r7, #14]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	7bba      	ldrb	r2, [r7, #14]
 800ecaa:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
 800ecae:	2be5      	cmp	r3, #229	; 0xe5
 800ecb0:	d011      	beq.n	800ecd6 <dir_read+0x7e>
 800ecb2:	7bfb      	ldrb	r3, [r7, #15]
 800ecb4:	2b2e      	cmp	r3, #46	; 0x2e
 800ecb6:	d00e      	beq.n	800ecd6 <dir_read+0x7e>
 800ecb8:	7bbb      	ldrb	r3, [r7, #14]
 800ecba:	2b0f      	cmp	r3, #15
 800ecbc:	d00b      	beq.n	800ecd6 <dir_read+0x7e>
 800ecbe:	7bbb      	ldrb	r3, [r7, #14]
 800ecc0:	f023 0320 	bic.w	r3, r3, #32
 800ecc4:	2b08      	cmp	r3, #8
 800ecc6:	bf0c      	ite	eq
 800ecc8:	2301      	moveq	r3, #1
 800ecca:	2300      	movne	r3, #0
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	461a      	mov	r2, r3
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d00f      	beq.n	800ecf6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f7ff fe72 	bl	800e9c2 <dir_next>
 800ecde:	4603      	mov	r3, r0
 800ece0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ece2:	7dfb      	ldrb	r3, [r7, #23]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d108      	bne.n	800ecfa <dir_read+0xa2>
	while (dp->sect) {
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	69db      	ldr	r3, [r3, #28]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d1be      	bne.n	800ec6e <dir_read+0x16>
 800ecf0:	e004      	b.n	800ecfc <dir_read+0xa4>
		if (res != FR_OK) break;
 800ecf2:	bf00      	nop
 800ecf4:	e002      	b.n	800ecfc <dir_read+0xa4>
				break;
 800ecf6:	bf00      	nop
 800ecf8:	e000      	b.n	800ecfc <dir_read+0xa4>
		if (res != FR_OK) break;
 800ecfa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ecfc:	7dfb      	ldrb	r3, [r7, #23]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d002      	beq.n	800ed08 <dir_read+0xb0>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	61da      	str	r2, [r3, #28]
	return res;
 800ed08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3718      	adds	r7, #24
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b086      	sub	sp, #24
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ed20:	2100      	movs	r1, #0
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7ff fdd2 	bl	800e8cc <dir_sdi>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ed2c:	7dfb      	ldrb	r3, [r7, #23]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d001      	beq.n	800ed36 <dir_find+0x24>
 800ed32:	7dfb      	ldrb	r3, [r7, #23]
 800ed34:	e03e      	b.n	800edb4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	69db      	ldr	r3, [r3, #28]
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	6938      	ldr	r0, [r7, #16]
 800ed3e:	f7ff fa45 	bl	800e1cc <move_window>
 800ed42:	4603      	mov	r3, r0
 800ed44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d12f      	bne.n	800edac <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6a1b      	ldr	r3, [r3, #32]
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ed54:	7bfb      	ldrb	r3, [r7, #15]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d102      	bne.n	800ed60 <dir_find+0x4e>
 800ed5a:	2304      	movs	r3, #4
 800ed5c:	75fb      	strb	r3, [r7, #23]
 800ed5e:	e028      	b.n	800edb2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6a1b      	ldr	r3, [r3, #32]
 800ed64:	330b      	adds	r3, #11
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed6c:	b2da      	uxtb	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a1b      	ldr	r3, [r3, #32]
 800ed76:	330b      	adds	r3, #11
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	f003 0308 	and.w	r3, r3, #8
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d10a      	bne.n	800ed98 <dir_find+0x86>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6a18      	ldr	r0, [r3, #32]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	3324      	adds	r3, #36	; 0x24
 800ed8a:	220b      	movs	r2, #11
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	f7fe fff9 	bl	800dd84 <mem_cmp>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00b      	beq.n	800edb0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ed98:	2100      	movs	r1, #0
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7ff fe11 	bl	800e9c2 <dir_next>
 800eda0:	4603      	mov	r3, r0
 800eda2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eda4:	7dfb      	ldrb	r3, [r7, #23]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d0c5      	beq.n	800ed36 <dir_find+0x24>
 800edaa:	e002      	b.n	800edb2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800edac:	bf00      	nop
 800edae:	e000      	b.n	800edb2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800edb0:	bf00      	nop

	return res;
 800edb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3718      	adds	r7, #24
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800edca:	2101      	movs	r1, #1
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7ff febd 	bl	800eb4c <dir_alloc>
 800edd2:	4603      	mov	r3, r0
 800edd4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800edd6:	7bfb      	ldrb	r3, [r7, #15]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d11c      	bne.n	800ee16 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	69db      	ldr	r3, [r3, #28]
 800ede0:	4619      	mov	r1, r3
 800ede2:	68b8      	ldr	r0, [r7, #8]
 800ede4:	f7ff f9f2 	bl	800e1cc <move_window>
 800ede8:	4603      	mov	r3, r0
 800edea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800edec:	7bfb      	ldrb	r3, [r7, #15]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d111      	bne.n	800ee16 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	2220      	movs	r2, #32
 800edf8:	2100      	movs	r1, #0
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7fe ffa7 	bl	800dd4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6a18      	ldr	r0, [r3, #32]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	3324      	adds	r3, #36	; 0x24
 800ee08:	220b      	movs	r2, #11
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	f7fe ff7e 	bl	800dd0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	2201      	movs	r2, #1
 800ee14:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ee16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	69db      	ldr	r3, [r3, #28]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d04e      	beq.n	800eed6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	613b      	str	r3, [r7, #16]
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ee40:	e021      	b.n	800ee86 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6a1a      	ldr	r2, [r3, #32]
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	1c59      	adds	r1, r3, #1
 800ee4a:	6179      	str	r1, [r7, #20]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
 800ee54:	2b20      	cmp	r3, #32
 800ee56:	d100      	bne.n	800ee5a <get_fileinfo+0x3a>
 800ee58:	e015      	b.n	800ee86 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ee5a:	7bfb      	ldrb	r3, [r7, #15]
 800ee5c:	2b05      	cmp	r3, #5
 800ee5e:	d101      	bne.n	800ee64 <get_fileinfo+0x44>
 800ee60:	23e5      	movs	r3, #229	; 0xe5
 800ee62:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	2b09      	cmp	r3, #9
 800ee68:	d106      	bne.n	800ee78 <get_fileinfo+0x58>
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	1c5a      	adds	r2, r3, #1
 800ee6e:	613a      	str	r2, [r7, #16]
 800ee70:	683a      	ldr	r2, [r7, #0]
 800ee72:	4413      	add	r3, r2
 800ee74:	222e      	movs	r2, #46	; 0x2e
 800ee76:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	613a      	str	r2, [r7, #16]
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	4413      	add	r3, r2
 800ee82:	7bfa      	ldrb	r2, [r7, #15]
 800ee84:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	2b0a      	cmp	r3, #10
 800ee8a:	d9da      	bls.n	800ee42 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800ee8c:	683a      	ldr	r2, [r7, #0]
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	4413      	add	r3, r2
 800ee92:	3309      	adds	r3, #9
 800ee94:	2200      	movs	r2, #0
 800ee96:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6a1b      	ldr	r3, [r3, #32]
 800ee9c:	7ada      	ldrb	r2, [r3, #11]
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6a1b      	ldr	r3, [r3, #32]
 800eea6:	331c      	adds	r3, #28
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fe fec5 	bl	800dc38 <ld_dword>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a1b      	ldr	r3, [r3, #32]
 800eeb8:	3316      	adds	r3, #22
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fe febc 	bl	800dc38 <ld_dword>
 800eec0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	80da      	strh	r2, [r3, #6]
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	0c1b      	lsrs	r3, r3, #16
 800eece:	b29a      	uxth	r2, r3
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	809a      	strh	r2, [r3, #4]
 800eed4:	e000      	b.n	800eed8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800eed6:	bf00      	nop
}
 800eed8:	3718      	adds	r7, #24
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
	...

0800eee0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b088      	sub	sp, #32
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	3324      	adds	r3, #36	; 0x24
 800eef4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800eef6:	220b      	movs	r2, #11
 800eef8:	2120      	movs	r1, #32
 800eefa:	68b8      	ldr	r0, [r7, #8]
 800eefc:	f7fe ff27 	bl	800dd4e <mem_set>
	si = i = 0; ni = 8;
 800ef00:	2300      	movs	r3, #0
 800ef02:	613b      	str	r3, [r7, #16]
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	61fb      	str	r3, [r7, #28]
 800ef08:	2308      	movs	r3, #8
 800ef0a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	1c5a      	adds	r2, r3, #1
 800ef10:	61fa      	str	r2, [r7, #28]
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	4413      	add	r3, r2
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ef1a:	7efb      	ldrb	r3, [r7, #27]
 800ef1c:	2b20      	cmp	r3, #32
 800ef1e:	d94e      	bls.n	800efbe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ef20:	7efb      	ldrb	r3, [r7, #27]
 800ef22:	2b2f      	cmp	r3, #47	; 0x2f
 800ef24:	d006      	beq.n	800ef34 <create_name+0x54>
 800ef26:	7efb      	ldrb	r3, [r7, #27]
 800ef28:	2b5c      	cmp	r3, #92	; 0x5c
 800ef2a:	d110      	bne.n	800ef4e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ef2c:	e002      	b.n	800ef34 <create_name+0x54>
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	3301      	adds	r3, #1
 800ef32:	61fb      	str	r3, [r7, #28]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	4413      	add	r3, r2
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	2b2f      	cmp	r3, #47	; 0x2f
 800ef3e:	d0f6      	beq.n	800ef2e <create_name+0x4e>
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	4413      	add	r3, r2
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	2b5c      	cmp	r3, #92	; 0x5c
 800ef4a:	d0f0      	beq.n	800ef2e <create_name+0x4e>
			break;
 800ef4c:	e038      	b.n	800efc0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ef4e:	7efb      	ldrb	r3, [r7, #27]
 800ef50:	2b2e      	cmp	r3, #46	; 0x2e
 800ef52:	d003      	beq.n	800ef5c <create_name+0x7c>
 800ef54:	693a      	ldr	r2, [r7, #16]
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d30c      	bcc.n	800ef76 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	2b0b      	cmp	r3, #11
 800ef60:	d002      	beq.n	800ef68 <create_name+0x88>
 800ef62:	7efb      	ldrb	r3, [r7, #27]
 800ef64:	2b2e      	cmp	r3, #46	; 0x2e
 800ef66:	d001      	beq.n	800ef6c <create_name+0x8c>
 800ef68:	2306      	movs	r3, #6
 800ef6a:	e044      	b.n	800eff6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ef6c:	2308      	movs	r3, #8
 800ef6e:	613b      	str	r3, [r7, #16]
 800ef70:	230b      	movs	r3, #11
 800ef72:	617b      	str	r3, [r7, #20]
			continue;
 800ef74:	e022      	b.n	800efbc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ef76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	da04      	bge.n	800ef88 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ef7e:	7efb      	ldrb	r3, [r7, #27]
 800ef80:	3b80      	subs	r3, #128	; 0x80
 800ef82:	4a1f      	ldr	r2, [pc, #124]	; (800f000 <create_name+0x120>)
 800ef84:	5cd3      	ldrb	r3, [r2, r3]
 800ef86:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ef88:	7efb      	ldrb	r3, [r7, #27]
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	481d      	ldr	r0, [pc, #116]	; (800f004 <create_name+0x124>)
 800ef8e:	f7fe ff20 	bl	800ddd2 <chk_chr>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d001      	beq.n	800ef9c <create_name+0xbc>
 800ef98:	2306      	movs	r3, #6
 800ef9a:	e02c      	b.n	800eff6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ef9c:	7efb      	ldrb	r3, [r7, #27]
 800ef9e:	2b60      	cmp	r3, #96	; 0x60
 800efa0:	d905      	bls.n	800efae <create_name+0xce>
 800efa2:	7efb      	ldrb	r3, [r7, #27]
 800efa4:	2b7a      	cmp	r3, #122	; 0x7a
 800efa6:	d802      	bhi.n	800efae <create_name+0xce>
 800efa8:	7efb      	ldrb	r3, [r7, #27]
 800efaa:	3b20      	subs	r3, #32
 800efac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	1c5a      	adds	r2, r3, #1
 800efb2:	613a      	str	r2, [r7, #16]
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	4413      	add	r3, r2
 800efb8:	7efa      	ldrb	r2, [r7, #27]
 800efba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800efbc:	e7a6      	b.n	800ef0c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800efbe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	441a      	add	r2, r3
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d101      	bne.n	800efd4 <create_name+0xf4>
 800efd0:	2306      	movs	r3, #6
 800efd2:	e010      	b.n	800eff6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	2be5      	cmp	r3, #229	; 0xe5
 800efda:	d102      	bne.n	800efe2 <create_name+0x102>
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	2205      	movs	r2, #5
 800efe0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800efe2:	7efb      	ldrb	r3, [r7, #27]
 800efe4:	2b20      	cmp	r3, #32
 800efe6:	d801      	bhi.n	800efec <create_name+0x10c>
 800efe8:	2204      	movs	r2, #4
 800efea:	e000      	b.n	800efee <create_name+0x10e>
 800efec:	2200      	movs	r2, #0
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	330b      	adds	r3, #11
 800eff2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800eff4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3720      	adds	r7, #32
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	0801c33c 	.word	0x0801c33c
 800f004:	0801c194 	.word	0x0801c194

0800f008 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b086      	sub	sp, #24
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f01c:	e002      	b.n	800f024 <follow_path+0x1c>
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	3301      	adds	r3, #1
 800f022:	603b      	str	r3, [r7, #0]
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	2b2f      	cmp	r3, #47	; 0x2f
 800f02a:	d0f8      	beq.n	800f01e <follow_path+0x16>
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	2b5c      	cmp	r3, #92	; 0x5c
 800f032:	d0f4      	beq.n	800f01e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	2200      	movs	r2, #0
 800f038:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b1f      	cmp	r3, #31
 800f040:	d80a      	bhi.n	800f058 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2280      	movs	r2, #128	; 0x80
 800f046:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f04a:	2100      	movs	r1, #0
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7ff fc3d 	bl	800e8cc <dir_sdi>
 800f052:	4603      	mov	r3, r0
 800f054:	75fb      	strb	r3, [r7, #23]
 800f056:	e043      	b.n	800f0e0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f058:	463b      	mov	r3, r7
 800f05a:	4619      	mov	r1, r3
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7ff ff3f 	bl	800eee0 <create_name>
 800f062:	4603      	mov	r3, r0
 800f064:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f066:	7dfb      	ldrb	r3, [r7, #23]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d134      	bne.n	800f0d6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f7ff fe50 	bl	800ed12 <dir_find>
 800f072:	4603      	mov	r3, r0
 800f074:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f07c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00a      	beq.n	800f09a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f084:	7dfb      	ldrb	r3, [r7, #23]
 800f086:	2b04      	cmp	r3, #4
 800f088:	d127      	bne.n	800f0da <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f08a:	7afb      	ldrb	r3, [r7, #11]
 800f08c:	f003 0304 	and.w	r3, r3, #4
 800f090:	2b00      	cmp	r3, #0
 800f092:	d122      	bne.n	800f0da <follow_path+0xd2>
 800f094:	2305      	movs	r3, #5
 800f096:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f098:	e01f      	b.n	800f0da <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f09a:	7afb      	ldrb	r3, [r7, #11]
 800f09c:	f003 0304 	and.w	r3, r3, #4
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d11c      	bne.n	800f0de <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	799b      	ldrb	r3, [r3, #6]
 800f0a8:	f003 0310 	and.w	r3, r3, #16
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d102      	bne.n	800f0b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f0b0:	2305      	movs	r3, #5
 800f0b2:	75fb      	strb	r3, [r7, #23]
 800f0b4:	e014      	b.n	800f0e0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	695b      	ldr	r3, [r3, #20]
 800f0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0c4:	4413      	add	r3, r2
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f7ff fd86 	bl	800ebda <ld_clust>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f0d4:	e7c0      	b.n	800f058 <follow_path+0x50>
			if (res != FR_OK) break;
 800f0d6:	bf00      	nop
 800f0d8:	e002      	b.n	800f0e0 <follow_path+0xd8>
				break;
 800f0da:	bf00      	nop
 800f0dc:	e000      	b.n	800f0e0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f0de:	bf00      	nop
			}
		}
	}

	return res;
 800f0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3718      	adds	r7, #24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f0ea:	b480      	push	{r7}
 800f0ec:	b087      	sub	sp, #28
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d031      	beq.n	800f164 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	617b      	str	r3, [r7, #20]
 800f106:	e002      	b.n	800f10e <get_ldnumber+0x24>
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	3301      	adds	r3, #1
 800f10c:	617b      	str	r3, [r7, #20]
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	2b20      	cmp	r3, #32
 800f114:	d903      	bls.n	800f11e <get_ldnumber+0x34>
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	2b3a      	cmp	r3, #58	; 0x3a
 800f11c:	d1f4      	bne.n	800f108 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	2b3a      	cmp	r3, #58	; 0x3a
 800f124:	d11c      	bne.n	800f160 <get_ldnumber+0x76>
			tp = *path;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	1c5a      	adds	r2, r3, #1
 800f130:	60fa      	str	r2, [r7, #12]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	3b30      	subs	r3, #48	; 0x30
 800f136:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	2b09      	cmp	r3, #9
 800f13c:	d80e      	bhi.n	800f15c <get_ldnumber+0x72>
 800f13e:	68fa      	ldr	r2, [r7, #12]
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	429a      	cmp	r2, r3
 800f144:	d10a      	bne.n	800f15c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d107      	bne.n	800f15c <get_ldnumber+0x72>
					vol = (int)i;
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	3301      	adds	r3, #1
 800f154:	617b      	str	r3, [r7, #20]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	697a      	ldr	r2, [r7, #20]
 800f15a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	e002      	b.n	800f166 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f160:	2300      	movs	r3, #0
 800f162:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f164:	693b      	ldr	r3, [r7, #16]
}
 800f166:	4618      	mov	r0, r3
 800f168:	371c      	adds	r7, #28
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr
	...

0800f174 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	70da      	strb	r2, [r3, #3]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f04f 32ff 	mov.w	r2, #4294967295
 800f18a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f18c:	6839      	ldr	r1, [r7, #0]
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f7ff f81c 	bl	800e1cc <move_window>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d001      	beq.n	800f19e <check_fs+0x2a>
 800f19a:	2304      	movs	r3, #4
 800f19c:	e038      	b.n	800f210 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	3334      	adds	r3, #52	; 0x34
 800f1a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fe fd2e 	bl	800dc08 <ld_word>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d001      	beq.n	800f1bc <check_fs+0x48>
 800f1b8:	2303      	movs	r3, #3
 800f1ba:	e029      	b.n	800f210 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f1c2:	2be9      	cmp	r3, #233	; 0xe9
 800f1c4:	d009      	beq.n	800f1da <check_fs+0x66>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f1cc:	2beb      	cmp	r3, #235	; 0xeb
 800f1ce:	d11e      	bne.n	800f20e <check_fs+0x9a>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f1d6:	2b90      	cmp	r3, #144	; 0x90
 800f1d8:	d119      	bne.n	800f20e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	3334      	adds	r3, #52	; 0x34
 800f1de:	3336      	adds	r3, #54	; 0x36
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fe fd29 	bl	800dc38 <ld_dword>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f1ec:	4a0a      	ldr	r2, [pc, #40]	; (800f218 <check_fs+0xa4>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d101      	bne.n	800f1f6 <check_fs+0x82>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	e00c      	b.n	800f210 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	3334      	adds	r3, #52	; 0x34
 800f1fa:	3352      	adds	r3, #82	; 0x52
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7fe fd1b 	bl	800dc38 <ld_dword>
 800f202:	4603      	mov	r3, r0
 800f204:	4a05      	ldr	r2, [pc, #20]	; (800f21c <check_fs+0xa8>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d101      	bne.n	800f20e <check_fs+0x9a>
 800f20a:	2300      	movs	r3, #0
 800f20c:	e000      	b.n	800f210 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f20e:	2302      	movs	r3, #2
}
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	00544146 	.word	0x00544146
 800f21c:	33544146 	.word	0x33544146

0800f220 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b096      	sub	sp, #88	; 0x58
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	4613      	mov	r3, r2
 800f22c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	2200      	movs	r2, #0
 800f232:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f234:	68f8      	ldr	r0, [r7, #12]
 800f236:	f7ff ff58 	bl	800f0ea <get_ldnumber>
 800f23a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f23e:	2b00      	cmp	r3, #0
 800f240:	da01      	bge.n	800f246 <find_volume+0x26>
 800f242:	230b      	movs	r3, #11
 800f244:	e236      	b.n	800f6b4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f246:	4aac      	ldr	r2, [pc, #688]	; (800f4f8 <find_volume+0x2d8>)
 800f248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f24e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f252:	2b00      	cmp	r3, #0
 800f254:	d101      	bne.n	800f25a <find_volume+0x3a>
 800f256:	230c      	movs	r3, #12
 800f258:	e22c      	b.n	800f6b4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800f25a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f25c:	f7fe fdd4 	bl	800de08 <lock_fs>
 800f260:	4603      	mov	r3, r0
 800f262:	2b00      	cmp	r3, #0
 800f264:	d101      	bne.n	800f26a <find_volume+0x4a>
 800f266:	230f      	movs	r3, #15
 800f268:	e224      	b.n	800f6b4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f26e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f270:	79fb      	ldrb	r3, [r7, #7]
 800f272:	f023 0301 	bic.w	r3, r3, #1
 800f276:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d01a      	beq.n	800f2b6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f282:	785b      	ldrb	r3, [r3, #1]
 800f284:	4618      	mov	r0, r3
 800f286:	f7fe fc21 	bl	800dacc <disk_status>
 800f28a:	4603      	mov	r3, r0
 800f28c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f290:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f294:	f003 0301 	and.w	r3, r3, #1
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d10c      	bne.n	800f2b6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f29c:	79fb      	ldrb	r3, [r7, #7]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d007      	beq.n	800f2b2 <find_volume+0x92>
 800f2a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f2a6:	f003 0304 	and.w	r3, r3, #4
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d001      	beq.n	800f2b2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f2ae:	230a      	movs	r3, #10
 800f2b0:	e200      	b.n	800f6b4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	e1fe      	b.n	800f6b4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2be:	b2da      	uxtb	r2, r3
 800f2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c6:	785b      	ldrb	r3, [r3, #1]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7fe fc19 	bl	800db00 <disk_initialize>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f2d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f2d8:	f003 0301 	and.w	r3, r3, #1
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d001      	beq.n	800f2e4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f2e0:	2303      	movs	r3, #3
 800f2e2:	e1e7      	b.n	800f6b4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f2e4:	79fb      	ldrb	r3, [r7, #7]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d007      	beq.n	800f2fa <find_volume+0xda>
 800f2ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f2ee:	f003 0304 	and.w	r3, r3, #4
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800f2f6:	230a      	movs	r3, #10
 800f2f8:	e1dc      	b.n	800f6b4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f2fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f300:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f302:	f7ff ff37 	bl	800f174 <check_fs>
 800f306:	4603      	mov	r3, r0
 800f308:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f30c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f310:	2b02      	cmp	r3, #2
 800f312:	d14b      	bne.n	800f3ac <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f314:	2300      	movs	r3, #0
 800f316:	643b      	str	r3, [r7, #64]	; 0x40
 800f318:	e01f      	b.n	800f35a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f31c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f322:	011b      	lsls	r3, r3, #4
 800f324:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f328:	4413      	add	r3, r2
 800f32a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32e:	3304      	adds	r3, #4
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d006      	beq.n	800f344 <find_volume+0x124>
 800f336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f338:	3308      	adds	r3, #8
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fe fc7c 	bl	800dc38 <ld_dword>
 800f340:	4602      	mov	r2, r0
 800f342:	e000      	b.n	800f346 <find_volume+0x126>
 800f344:	2200      	movs	r2, #0
 800f346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f34e:	440b      	add	r3, r1
 800f350:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f356:	3301      	adds	r3, #1
 800f358:	643b      	str	r3, [r7, #64]	; 0x40
 800f35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f35c:	2b03      	cmp	r3, #3
 800f35e:	d9dc      	bls.n	800f31a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f360:	2300      	movs	r3, #0
 800f362:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f366:	2b00      	cmp	r3, #0
 800f368:	d002      	beq.n	800f370 <find_volume+0x150>
 800f36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f36c:	3b01      	subs	r3, #1
 800f36e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f372:	009b      	lsls	r3, r3, #2
 800f374:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f378:	4413      	add	r3, r2
 800f37a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f37e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f382:	2b00      	cmp	r3, #0
 800f384:	d005      	beq.n	800f392 <find_volume+0x172>
 800f386:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f388:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f38a:	f7ff fef3 	bl	800f174 <check_fs>
 800f38e:	4603      	mov	r3, r0
 800f390:	e000      	b.n	800f394 <find_volume+0x174>
 800f392:	2303      	movs	r3, #3
 800f394:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d905      	bls.n	800f3ac <find_volume+0x18c>
 800f3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	643b      	str	r3, [r7, #64]	; 0x40
 800f3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3a8:	2b03      	cmp	r3, #3
 800f3aa:	d9e1      	bls.n	800f370 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f3ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f3b0:	2b04      	cmp	r3, #4
 800f3b2:	d101      	bne.n	800f3b8 <find_volume+0x198>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e17d      	b.n	800f6b4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f3b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d901      	bls.n	800f3c4 <find_volume+0x1a4>
 800f3c0:	230d      	movs	r3, #13
 800f3c2:	e177      	b.n	800f6b4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c6:	3334      	adds	r3, #52	; 0x34
 800f3c8:	330b      	adds	r3, #11
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7fe fc1c 	bl	800dc08 <ld_word>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3d6:	d001      	beq.n	800f3dc <find_volume+0x1bc>
 800f3d8:	230d      	movs	r3, #13
 800f3da:	e16b      	b.n	800f6b4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3de:	3334      	adds	r3, #52	; 0x34
 800f3e0:	3316      	adds	r3, #22
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fe fc10 	bl	800dc08 <ld_word>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d106      	bne.n	800f400 <find_volume+0x1e0>
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f4:	3334      	adds	r3, #52	; 0x34
 800f3f6:	3324      	adds	r3, #36	; 0x24
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fe fc1d 	bl	800dc38 <ld_dword>
 800f3fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f404:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f408:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f40e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f412:	789b      	ldrb	r3, [r3, #2]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d005      	beq.n	800f424 <find_volume+0x204>
 800f418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41a:	789b      	ldrb	r3, [r3, #2]
 800f41c:	2b02      	cmp	r3, #2
 800f41e:	d001      	beq.n	800f424 <find_volume+0x204>
 800f420:	230d      	movs	r3, #13
 800f422:	e147      	b.n	800f6b4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f426:	789b      	ldrb	r3, [r3, #2]
 800f428:	461a      	mov	r2, r3
 800f42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f42c:	fb02 f303 	mul.w	r3, r2, r3
 800f430:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f438:	b29a      	uxth	r2, r3
 800f43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f440:	895b      	ldrh	r3, [r3, #10]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d008      	beq.n	800f458 <find_volume+0x238>
 800f446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f448:	895b      	ldrh	r3, [r3, #10]
 800f44a:	461a      	mov	r2, r3
 800f44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44e:	895b      	ldrh	r3, [r3, #10]
 800f450:	3b01      	subs	r3, #1
 800f452:	4013      	ands	r3, r2
 800f454:	2b00      	cmp	r3, #0
 800f456:	d001      	beq.n	800f45c <find_volume+0x23c>
 800f458:	230d      	movs	r3, #13
 800f45a:	e12b      	b.n	800f6b4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45e:	3334      	adds	r3, #52	; 0x34
 800f460:	3311      	adds	r3, #17
 800f462:	4618      	mov	r0, r3
 800f464:	f7fe fbd0 	bl	800dc08 <ld_word>
 800f468:	4603      	mov	r3, r0
 800f46a:	461a      	mov	r2, r3
 800f46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f472:	891b      	ldrh	r3, [r3, #8]
 800f474:	f003 030f 	and.w	r3, r3, #15
 800f478:	b29b      	uxth	r3, r3
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d001      	beq.n	800f482 <find_volume+0x262>
 800f47e:	230d      	movs	r3, #13
 800f480:	e118      	b.n	800f6b4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	3334      	adds	r3, #52	; 0x34
 800f486:	3313      	adds	r3, #19
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fe fbbd 	bl	800dc08 <ld_word>
 800f48e:	4603      	mov	r3, r0
 800f490:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f494:	2b00      	cmp	r3, #0
 800f496:	d106      	bne.n	800f4a6 <find_volume+0x286>
 800f498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49a:	3334      	adds	r3, #52	; 0x34
 800f49c:	3320      	adds	r3, #32
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe fbca 	bl	800dc38 <ld_dword>
 800f4a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a8:	3334      	adds	r3, #52	; 0x34
 800f4aa:	330e      	adds	r3, #14
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fe fbab 	bl	800dc08 <ld_word>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f4b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d101      	bne.n	800f4c0 <find_volume+0x2a0>
 800f4bc:	230d      	movs	r3, #13
 800f4be:	e0f9      	b.n	800f6b4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f4c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4c4:	4413      	add	r3, r2
 800f4c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4c8:	8912      	ldrh	r2, [r2, #8]
 800f4ca:	0912      	lsrs	r2, r2, #4
 800f4cc:	b292      	uxth	r2, r2
 800f4ce:	4413      	add	r3, r2
 800f4d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f4d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d201      	bcs.n	800f4de <find_volume+0x2be>
 800f4da:	230d      	movs	r3, #13
 800f4dc:	e0ea      	b.n	800f6b4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f4de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e2:	1ad3      	subs	r3, r2, r3
 800f4e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4e6:	8952      	ldrh	r2, [r2, #10]
 800f4e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d103      	bne.n	800f4fc <find_volume+0x2dc>
 800f4f4:	230d      	movs	r3, #13
 800f4f6:	e0dd      	b.n	800f6b4 <find_volume+0x494>
 800f4f8:	2000066c 	.word	0x2000066c
		fmt = FS_FAT32;
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f504:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f508:	4293      	cmp	r3, r2
 800f50a:	d802      	bhi.n	800f512 <find_volume+0x2f2>
 800f50c:	2302      	movs	r3, #2
 800f50e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f514:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f518:	4293      	cmp	r3, r2
 800f51a:	d802      	bhi.n	800f522 <find_volume+0x302>
 800f51c:	2301      	movs	r3, #1
 800f51e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f524:	1c9a      	adds	r2, r3, #2
 800f526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f528:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f52e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f530:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f534:	441a      	add	r2, r3
 800f536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f538:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f53a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53e:	441a      	add	r2, r3
 800f540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f542:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f548:	2b03      	cmp	r3, #3
 800f54a:	d11e      	bne.n	800f58a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54e:	3334      	adds	r3, #52	; 0x34
 800f550:	332a      	adds	r3, #42	; 0x2a
 800f552:	4618      	mov	r0, r3
 800f554:	f7fe fb58 	bl	800dc08 <ld_word>
 800f558:	4603      	mov	r3, r0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d001      	beq.n	800f562 <find_volume+0x342>
 800f55e:	230d      	movs	r3, #13
 800f560:	e0a8      	b.n	800f6b4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	891b      	ldrh	r3, [r3, #8]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <find_volume+0x34e>
 800f56a:	230d      	movs	r3, #13
 800f56c:	e0a2      	b.n	800f6b4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f570:	3334      	adds	r3, #52	; 0x34
 800f572:	332c      	adds	r3, #44	; 0x2c
 800f574:	4618      	mov	r0, r3
 800f576:	f7fe fb5f 	bl	800dc38 <ld_dword>
 800f57a:	4602      	mov	r2, r0
 800f57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f582:	699b      	ldr	r3, [r3, #24]
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	647b      	str	r3, [r7, #68]	; 0x44
 800f588:	e01f      	b.n	800f5ca <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58c:	891b      	ldrh	r3, [r3, #8]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d101      	bne.n	800f596 <find_volume+0x376>
 800f592:	230d      	movs	r3, #13
 800f594:	e08e      	b.n	800f6b4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f59c:	441a      	add	r2, r3
 800f59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f5a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5a6:	2b02      	cmp	r3, #2
 800f5a8:	d103      	bne.n	800f5b2 <find_volume+0x392>
 800f5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ac:	699b      	ldr	r3, [r3, #24]
 800f5ae:	005b      	lsls	r3, r3, #1
 800f5b0:	e00a      	b.n	800f5c8 <find_volume+0x3a8>
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b4:	699a      	ldr	r2, [r3, #24]
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	005b      	lsls	r3, r3, #1
 800f5ba:	4413      	add	r3, r2
 800f5bc:	085a      	lsrs	r2, r3, #1
 800f5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c0:	699b      	ldr	r3, [r3, #24]
 800f5c2:	f003 0301 	and.w	r3, r3, #1
 800f5c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f5c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5cc:	69da      	ldr	r2, [r3, #28]
 800f5ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f5d4:	0a5b      	lsrs	r3, r3, #9
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d201      	bcs.n	800f5de <find_volume+0x3be>
 800f5da:	230d      	movs	r3, #13
 800f5dc:	e06a      	b.n	800f6b4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e4:	615a      	str	r2, [r3, #20]
 800f5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e8:	695a      	ldr	r2, [r3, #20]
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f0:	2280      	movs	r2, #128	; 0x80
 800f5f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f5f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5f8:	2b03      	cmp	r3, #3
 800f5fa:	d149      	bne.n	800f690 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fe:	3334      	adds	r3, #52	; 0x34
 800f600:	3330      	adds	r3, #48	; 0x30
 800f602:	4618      	mov	r0, r3
 800f604:	f7fe fb00 	bl	800dc08 <ld_word>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d140      	bne.n	800f690 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f60e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f610:	3301      	adds	r3, #1
 800f612:	4619      	mov	r1, r3
 800f614:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f616:	f7fe fdd9 	bl	800e1cc <move_window>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d137      	bne.n	800f690 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800f620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f622:	2200      	movs	r2, #0
 800f624:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f628:	3334      	adds	r3, #52	; 0x34
 800f62a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe faea 	bl	800dc08 <ld_word>
 800f634:	4603      	mov	r3, r0
 800f636:	461a      	mov	r2, r3
 800f638:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d127      	bne.n	800f690 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f642:	3334      	adds	r3, #52	; 0x34
 800f644:	4618      	mov	r0, r3
 800f646:	f7fe faf7 	bl	800dc38 <ld_dword>
 800f64a:	4603      	mov	r3, r0
 800f64c:	4a1b      	ldr	r2, [pc, #108]	; (800f6bc <find_volume+0x49c>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d11e      	bne.n	800f690 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f654:	3334      	adds	r3, #52	; 0x34
 800f656:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fe faec 	bl	800dc38 <ld_dword>
 800f660:	4603      	mov	r3, r0
 800f662:	4a17      	ldr	r2, [pc, #92]	; (800f6c0 <find_volume+0x4a0>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d113      	bne.n	800f690 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66a:	3334      	adds	r3, #52	; 0x34
 800f66c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f670:	4618      	mov	r0, r3
 800f672:	f7fe fae1 	bl	800dc38 <ld_dword>
 800f676:	4602      	mov	r2, r0
 800f678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67e:	3334      	adds	r3, #52	; 0x34
 800f680:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f684:	4618      	mov	r0, r3
 800f686:	f7fe fad7 	bl	800dc38 <ld_dword>
 800f68a:	4602      	mov	r2, r0
 800f68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f692:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f696:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f698:	4b0a      	ldr	r3, [pc, #40]	; (800f6c4 <find_volume+0x4a4>)
 800f69a:	881b      	ldrh	r3, [r3, #0]
 800f69c:	3301      	adds	r3, #1
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	4b08      	ldr	r3, [pc, #32]	; (800f6c4 <find_volume+0x4a4>)
 800f6a2:	801a      	strh	r2, [r3, #0]
 800f6a4:	4b07      	ldr	r3, [pc, #28]	; (800f6c4 <find_volume+0x4a4>)
 800f6a6:	881a      	ldrh	r2, [r3, #0]
 800f6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6aa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f6ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f6ae:	f7fe fd25 	bl	800e0fc <clear_lock>
#endif
	return FR_OK;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3758      	adds	r7, #88	; 0x58
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	41615252 	.word	0x41615252
 800f6c0:	61417272 	.word	0x61417272
 800f6c4:	20000670 	.word	0x20000670

0800f6c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f6d2:	2309      	movs	r3, #9
 800f6d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d02e      	beq.n	800f73a <validate+0x72>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d02a      	beq.n	800f73a <validate+0x72>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d025      	beq.n	800f73a <validate+0x72>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	889a      	ldrh	r2, [r3, #4]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	88db      	ldrh	r3, [r3, #6]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d11e      	bne.n	800f73a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4618      	mov	r0, r3
 800f702:	f7fe fb81 	bl	800de08 <lock_fs>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d014      	beq.n	800f736 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	785b      	ldrb	r3, [r3, #1]
 800f712:	4618      	mov	r0, r3
 800f714:	f7fe f9da 	bl	800dacc <disk_status>
 800f718:	4603      	mov	r3, r0
 800f71a:	f003 0301 	and.w	r3, r3, #1
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d102      	bne.n	800f728 <validate+0x60>
				res = FR_OK;
 800f722:	2300      	movs	r3, #0
 800f724:	73fb      	strb	r3, [r7, #15]
 800f726:	e008      	b.n	800f73a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	2100      	movs	r1, #0
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fe fb80 	bl	800de34 <unlock_fs>
 800f734:	e001      	b.n	800f73a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f736:	230f      	movs	r3, #15
 800f738:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f73a:	7bfb      	ldrb	r3, [r7, #15]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d102      	bne.n	800f746 <validate+0x7e>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	e000      	b.n	800f748 <validate+0x80>
 800f746:	2300      	movs	r3, #0
 800f748:	683a      	ldr	r2, [r7, #0]
 800f74a:	6013      	str	r3, [r2, #0]
	return res;
 800f74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
	...

0800f758 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b088      	sub	sp, #32
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	4613      	mov	r3, r2
 800f764:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f76a:	f107 0310 	add.w	r3, r7, #16
 800f76e:	4618      	mov	r0, r3
 800f770:	f7ff fcbb 	bl	800f0ea <get_ldnumber>
 800f774:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	da01      	bge.n	800f780 <f_mount+0x28>
 800f77c:	230b      	movs	r3, #11
 800f77e:	e048      	b.n	800f812 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f780:	4a26      	ldr	r2, [pc, #152]	; (800f81c <f_mount+0xc4>)
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f788:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00f      	beq.n	800f7b0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f790:	69b8      	ldr	r0, [r7, #24]
 800f792:	f7fe fcb3 	bl	800e0fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	4618      	mov	r0, r3
 800f79c:	f001 f812 	bl	80107c4 <ff_del_syncobj>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d101      	bne.n	800f7aa <f_mount+0x52>
 800f7a6:	2302      	movs	r3, #2
 800f7a8:	e033      	b.n	800f812 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00f      	beq.n	800f7d6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	b2da      	uxtb	r2, r3
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	330c      	adds	r3, #12
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4610      	mov	r0, r2
 800f7c8:	f000 ffe1 	bl	801078e <ff_cre_syncobj>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d101      	bne.n	800f7d6 <f_mount+0x7e>
 800f7d2:	2302      	movs	r3, #2
 800f7d4:	e01d      	b.n	800f812 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f7d6:	68fa      	ldr	r2, [r7, #12]
 800f7d8:	4910      	ldr	r1, [pc, #64]	; (800f81c <f_mount+0xc4>)
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d002      	beq.n	800f7ec <f_mount+0x94>
 800f7e6:	79fb      	ldrb	r3, [r7, #7]
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d001      	beq.n	800f7f0 <f_mount+0x98>
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	e010      	b.n	800f812 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f7f0:	f107 010c 	add.w	r1, r7, #12
 800f7f4:	f107 0308 	add.w	r3, r7, #8
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7ff fd10 	bl	800f220 <find_volume>
 800f800:	4603      	mov	r3, r0
 800f802:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	7dfa      	ldrb	r2, [r7, #23]
 800f808:	4611      	mov	r1, r2
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fe fb12 	bl	800de34 <unlock_fs>
 800f810:	7dfb      	ldrb	r3, [r7, #23]
}
 800f812:	4618      	mov	r0, r3
 800f814:	3720      	adds	r7, #32
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	2000066c 	.word	0x2000066c

0800f820 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b098      	sub	sp, #96	; 0x60
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	4613      	mov	r3, r2
 800f82c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d101      	bne.n	800f838 <f_open+0x18>
 800f834:	2309      	movs	r3, #9
 800f836:	e1b4      	b.n	800fba2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f838:	79fb      	ldrb	r3, [r7, #7]
 800f83a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f83e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f840:	79fa      	ldrb	r2, [r7, #7]
 800f842:	f107 0110 	add.w	r1, r7, #16
 800f846:	f107 0308 	add.w	r3, r7, #8
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7ff fce8 	bl	800f220 <find_volume>
 800f850:	4603      	mov	r3, r0
 800f852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f040 8191 	bne.w	800fb82 <f_open+0x362>
		dj.obj.fs = fs;
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f864:	68ba      	ldr	r2, [r7, #8]
 800f866:	f107 0314 	add.w	r3, r7, #20
 800f86a:	4611      	mov	r1, r2
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7ff fbcb 	bl	800f008 <follow_path>
 800f872:	4603      	mov	r3, r0
 800f874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f878:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d11a      	bne.n	800f8b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f880:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f884:	b25b      	sxtb	r3, r3
 800f886:	2b00      	cmp	r3, #0
 800f888:	da03      	bge.n	800f892 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f88a:	2306      	movs	r3, #6
 800f88c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f890:	e011      	b.n	800f8b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f892:	79fb      	ldrb	r3, [r7, #7]
 800f894:	f023 0301 	bic.w	r3, r3, #1
 800f898:	2b00      	cmp	r3, #0
 800f89a:	bf14      	ite	ne
 800f89c:	2301      	movne	r3, #1
 800f89e:	2300      	moveq	r3, #0
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	f107 0314 	add.w	r3, r7, #20
 800f8a8:	4611      	mov	r1, r2
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fe fade 	bl	800de6c <chk_lock>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f8b6:	79fb      	ldrb	r3, [r7, #7]
 800f8b8:	f003 031c 	and.w	r3, r3, #28
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d07f      	beq.n	800f9c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f8c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d017      	beq.n	800f8f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f8c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8cc:	2b04      	cmp	r3, #4
 800f8ce:	d10e      	bne.n	800f8ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f8d0:	f7fe fb28 	bl	800df24 <enq_lock>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d006      	beq.n	800f8e8 <f_open+0xc8>
 800f8da:	f107 0314 	add.w	r3, r7, #20
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7ff fa6c 	bl	800edbc <dir_register>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	e000      	b.n	800f8ea <f_open+0xca>
 800f8e8:	2312      	movs	r3, #18
 800f8ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f8ee:	79fb      	ldrb	r3, [r7, #7]
 800f8f0:	f043 0308 	orr.w	r3, r3, #8
 800f8f4:	71fb      	strb	r3, [r7, #7]
 800f8f6:	e010      	b.n	800f91a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f8f8:	7ebb      	ldrb	r3, [r7, #26]
 800f8fa:	f003 0311 	and.w	r3, r3, #17
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d003      	beq.n	800f90a <f_open+0xea>
					res = FR_DENIED;
 800f902:	2307      	movs	r3, #7
 800f904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f908:	e007      	b.n	800f91a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f90a:	79fb      	ldrb	r3, [r7, #7]
 800f90c:	f003 0304 	and.w	r3, r3, #4
 800f910:	2b00      	cmp	r3, #0
 800f912:	d002      	beq.n	800f91a <f_open+0xfa>
 800f914:	2308      	movs	r3, #8
 800f916:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f91a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d168      	bne.n	800f9f4 <f_open+0x1d4>
 800f922:	79fb      	ldrb	r3, [r7, #7]
 800f924:	f003 0308 	and.w	r3, r3, #8
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d063      	beq.n	800f9f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f92c:	f7fd fb8c 	bl	800d048 <get_fattime>
 800f930:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f934:	330e      	adds	r3, #14
 800f936:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fe f9bb 	bl	800dcb4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f940:	3316      	adds	r3, #22
 800f942:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f944:	4618      	mov	r0, r3
 800f946:	f7fe f9b5 	bl	800dcb4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f94c:	330b      	adds	r3, #11
 800f94e:	2220      	movs	r2, #32
 800f950:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f956:	4611      	mov	r1, r2
 800f958:	4618      	mov	r0, r3
 800f95a:	f7ff f93e 	bl	800ebda <ld_clust>
 800f95e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f964:	2200      	movs	r2, #0
 800f966:	4618      	mov	r0, r3
 800f968:	f7ff f956 	bl	800ec18 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f96e:	331c      	adds	r3, #28
 800f970:	2100      	movs	r1, #0
 800f972:	4618      	mov	r0, r3
 800f974:	f7fe f99e 	bl	800dcb4 <st_dword>
					fs->wflag = 1;
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	2201      	movs	r2, #1
 800f97c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f97e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f980:	2b00      	cmp	r3, #0
 800f982:	d037      	beq.n	800f9f4 <f_open+0x1d4>
						dw = fs->winsect;
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f988:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f98a:	f107 0314 	add.w	r3, r7, #20
 800f98e:	2200      	movs	r2, #0
 800f990:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f992:	4618      	mov	r0, r3
 800f994:	f7fe fe69 	bl	800e66a <remove_chain>
 800f998:	4603      	mov	r3, r0
 800f99a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f99e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d126      	bne.n	800f9f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fe fc0e 	bl	800e1cc <move_window>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9ba:	3a01      	subs	r2, #1
 800f9bc:	611a      	str	r2, [r3, #16]
 800f9be:	e019      	b.n	800f9f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f9c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d115      	bne.n	800f9f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f9c8:	7ebb      	ldrb	r3, [r7, #26]
 800f9ca:	f003 0310 	and.w	r3, r3, #16
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d003      	beq.n	800f9da <f_open+0x1ba>
					res = FR_NO_FILE;
 800f9d2:	2304      	movs	r3, #4
 800f9d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f9d8:	e00c      	b.n	800f9f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f9da:	79fb      	ldrb	r3, [r7, #7]
 800f9dc:	f003 0302 	and.w	r3, r3, #2
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d007      	beq.n	800f9f4 <f_open+0x1d4>
 800f9e4:	7ebb      	ldrb	r3, [r7, #26]
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d002      	beq.n	800f9f4 <f_open+0x1d4>
						res = FR_DENIED;
 800f9ee:	2307      	movs	r3, #7
 800f9f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f9f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d128      	bne.n	800fa4e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f9fc:	79fb      	ldrb	r3, [r7, #7]
 800f9fe:	f003 0308 	and.w	r3, r3, #8
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d003      	beq.n	800fa0e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fa06:	79fb      	ldrb	r3, [r7, #7]
 800fa08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fa16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fa1c:	79fb      	ldrb	r3, [r7, #7]
 800fa1e:	f023 0301 	bic.w	r3, r3, #1
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	bf14      	ite	ne
 800fa26:	2301      	movne	r3, #1
 800fa28:	2300      	moveq	r3, #0
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	f107 0314 	add.w	r3, r7, #20
 800fa32:	4611      	mov	r1, r2
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fe fa97 	bl	800df68 <inc_lock>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	691b      	ldr	r3, [r3, #16]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d102      	bne.n	800fa4e <f_open+0x22e>
 800fa48:	2302      	movs	r3, #2
 800fa4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fa4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f040 8095 	bne.w	800fb82 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7ff f8bb 	bl	800ebda <ld_clust>
 800fa64:	4602      	mov	r2, r0
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fa6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa6c:	331c      	adds	r3, #28
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fe f8e2 	bl	800dc38 <ld_dword>
 800fa74:	4602      	mov	r2, r0
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fa80:	693a      	ldr	r2, [r7, #16]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	88da      	ldrh	r2, [r3, #6]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	79fa      	ldrb	r2, [r7, #7]
 800fa92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2200      	movs	r2, #0
 800fa98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	3330      	adds	r3, #48	; 0x30
 800faaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800faae:	2100      	movs	r1, #0
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fe f94c 	bl	800dd4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fab6:	79fb      	ldrb	r3, [r7, #7]
 800fab8:	f003 0320 	and.w	r3, r3, #32
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d060      	beq.n	800fb82 <f_open+0x362>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d05c      	beq.n	800fb82 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	68da      	ldr	r2, [r3, #12]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	895b      	ldrh	r3, [r3, #10]
 800fad4:	025b      	lsls	r3, r3, #9
 800fad6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	657b      	str	r3, [r7, #84]	; 0x54
 800fae4:	e016      	b.n	800fb14 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800faea:	4618      	mov	r0, r3
 800faec:	f7fe fc29 	bl	800e342 <get_fat>
 800faf0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800faf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d802      	bhi.n	800fafe <f_open+0x2de>
 800faf8:	2302      	movs	r3, #2
 800fafa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fafe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb04:	d102      	bne.n	800fb0c <f_open+0x2ec>
 800fb06:	2301      	movs	r3, #1
 800fb08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fb0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	657b      	str	r3, [r7, #84]	; 0x54
 800fb14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d103      	bne.n	800fb24 <f_open+0x304>
 800fb1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d8e0      	bhi.n	800fae6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fb2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d127      	bne.n	800fb82 <f_open+0x362>
 800fb32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d022      	beq.n	800fb82 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fe fbdf 	bl	800e304 <clust2sect>
 800fb46:	6478      	str	r0, [r7, #68]	; 0x44
 800fb48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d103      	bne.n	800fb56 <f_open+0x336>
						res = FR_INT_ERR;
 800fb4e:	2302      	movs	r3, #2
 800fb50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fb54:	e015      	b.n	800fb82 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fb56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb58:	0a5a      	lsrs	r2, r3, #9
 800fb5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb5c:	441a      	add	r2, r3
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	7858      	ldrb	r0, [r3, #1]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6a1a      	ldr	r2, [r3, #32]
 800fb70:	2301      	movs	r3, #1
 800fb72:	f7fd ffeb 	bl	800db4c <disk_read>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d002      	beq.n	800fb82 <f_open+0x362>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fb82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d002      	beq.n	800fb90 <f_open+0x370>
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800fb96:	4611      	mov	r1, r2
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fe f94b 	bl	800de34 <unlock_fs>
 800fb9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3760      	adds	r7, #96	; 0x60
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b08c      	sub	sp, #48	; 0x30
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	60f8      	str	r0, [r7, #12]
 800fbb2:	60b9      	str	r1, [r7, #8]
 800fbb4:	607a      	str	r2, [r7, #4]
 800fbb6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f107 0210 	add.w	r2, r7, #16
 800fbc8:	4611      	mov	r1, r2
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff fd7c 	bl	800f6c8 <validate>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fbd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d107      	bne.n	800fbee <f_write+0x44>
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	7d5b      	ldrb	r3, [r3, #21]
 800fbe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fbe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d009      	beq.n	800fc02 <f_write+0x58>
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fbf4:	4611      	mov	r1, r2
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fe f91c 	bl	800de34 <unlock_fs>
 800fbfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc00:	e173      	b.n	800feea <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	7d1b      	ldrb	r3, [r3, #20]
 800fc06:	f003 0302 	and.w	r3, r3, #2
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d106      	bne.n	800fc1c <f_write+0x72>
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	2107      	movs	r1, #7
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fe f90e 	bl	800de34 <unlock_fs>
 800fc18:	2307      	movs	r3, #7
 800fc1a:	e166      	b.n	800feea <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	699a      	ldr	r2, [r3, #24]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	441a      	add	r2, r3
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	699b      	ldr	r3, [r3, #24]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	f080 814b 	bcs.w	800fec4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	699b      	ldr	r3, [r3, #24]
 800fc32:	43db      	mvns	r3, r3
 800fc34:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fc36:	e145      	b.n	800fec4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	699b      	ldr	r3, [r3, #24]
 800fc3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f040 8101 	bne.w	800fe48 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	699b      	ldr	r3, [r3, #24]
 800fc4a:	0a5b      	lsrs	r3, r3, #9
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	8952      	ldrh	r2, [r2, #10]
 800fc50:	3a01      	subs	r2, #1
 800fc52:	4013      	ands	r3, r2
 800fc54:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d14d      	bne.n	800fcf8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	699b      	ldr	r3, [r3, #24]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d10c      	bne.n	800fc7e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	689b      	ldr	r3, [r3, #8]
 800fc68:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d11a      	bne.n	800fca6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2100      	movs	r1, #0
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7fe fd5d 	bl	800e734 <create_chain>
 800fc7a:	62b8      	str	r0, [r7, #40]	; 0x28
 800fc7c:	e013      	b.n	800fca6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d007      	beq.n	800fc96 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	699b      	ldr	r3, [r3, #24]
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	68f8      	ldr	r0, [r7, #12]
 800fc8e:	f7fe fde9 	bl	800e864 <clmt_clust>
 800fc92:	62b8      	str	r0, [r7, #40]	; 0x28
 800fc94:	e007      	b.n	800fca6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fc96:	68fa      	ldr	r2, [r7, #12]
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	69db      	ldr	r3, [r3, #28]
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	4610      	mov	r0, r2
 800fca0:	f7fe fd48 	bl	800e734 <create_chain>
 800fca4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f000 8110 	beq.w	800fece <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d109      	bne.n	800fcc8 <f_write+0x11e>
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2202      	movs	r2, #2
 800fcb8:	755a      	strb	r2, [r3, #21]
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	2102      	movs	r1, #2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7fe f8b8 	bl	800de34 <unlock_fs>
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	e110      	b.n	800feea <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcce:	d109      	bne.n	800fce4 <f_write+0x13a>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	755a      	strb	r2, [r3, #21]
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	2101      	movs	r1, #1
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7fe f8aa 	bl	800de34 <unlock_fs>
 800fce0:	2301      	movs	r3, #1
 800fce2:	e102      	b.n	800feea <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fce8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d102      	bne.n	800fcf8 <f_write+0x14e>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcf6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	7d1b      	ldrb	r3, [r3, #20]
 800fcfc:	b25b      	sxtb	r3, r3
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	da1d      	bge.n	800fd3e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	7858      	ldrb	r0, [r3, #1]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6a1a      	ldr	r2, [r3, #32]
 800fd10:	2301      	movs	r3, #1
 800fd12:	f7fd ff3b 	bl	800db8c <disk_write>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d009      	beq.n	800fd30 <f_write+0x186>
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	755a      	strb	r2, [r3, #21]
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	2101      	movs	r1, #1
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fe f884 	bl	800de34 <unlock_fs>
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	e0dc      	b.n	800feea <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	7d1b      	ldrb	r3, [r3, #20]
 800fd34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd38:	b2da      	uxtb	r2, r3
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fd3e:	693a      	ldr	r2, [r7, #16]
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	69db      	ldr	r3, [r3, #28]
 800fd44:	4619      	mov	r1, r3
 800fd46:	4610      	mov	r0, r2
 800fd48:	f7fe fadc 	bl	800e304 <clust2sect>
 800fd4c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d109      	bne.n	800fd68 <f_write+0x1be>
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2202      	movs	r2, #2
 800fd58:	755a      	strb	r2, [r3, #21]
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	2102      	movs	r1, #2
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7fe f868 	bl	800de34 <unlock_fs>
 800fd64:	2302      	movs	r3, #2
 800fd66:	e0c0      	b.n	800feea <f_write+0x340>
			sect += csect;
 800fd68:	697a      	ldr	r2, [r7, #20]
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	0a5b      	lsrs	r3, r3, #9
 800fd74:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d041      	beq.n	800fe00 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fd7c:	69ba      	ldr	r2, [r7, #24]
 800fd7e:	6a3b      	ldr	r3, [r7, #32]
 800fd80:	4413      	add	r3, r2
 800fd82:	693a      	ldr	r2, [r7, #16]
 800fd84:	8952      	ldrh	r2, [r2, #10]
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d905      	bls.n	800fd96 <f_write+0x1ec>
					cc = fs->csize - csect;
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	895b      	ldrh	r3, [r3, #10]
 800fd8e:	461a      	mov	r2, r3
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	1ad3      	subs	r3, r2, r3
 800fd94:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	7858      	ldrb	r0, [r3, #1]
 800fd9a:	6a3b      	ldr	r3, [r7, #32]
 800fd9c:	697a      	ldr	r2, [r7, #20]
 800fd9e:	69f9      	ldr	r1, [r7, #28]
 800fda0:	f7fd fef4 	bl	800db8c <disk_write>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d009      	beq.n	800fdbe <f_write+0x214>
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	2201      	movs	r2, #1
 800fdae:	755a      	strb	r2, [r3, #21]
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	2101      	movs	r1, #1
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fe f83d 	bl	800de34 <unlock_fs>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e095      	b.n	800feea <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6a1a      	ldr	r2, [r3, #32]
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	1ad3      	subs	r3, r2, r3
 800fdc6:	6a3a      	ldr	r2, [r7, #32]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d915      	bls.n	800fdf8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	6a1a      	ldr	r2, [r3, #32]
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	1ad3      	subs	r3, r2, r3
 800fdda:	025b      	lsls	r3, r3, #9
 800fddc:	69fa      	ldr	r2, [r7, #28]
 800fdde:	4413      	add	r3, r2
 800fde0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fde4:	4619      	mov	r1, r3
 800fde6:	f7fd ff91 	bl	800dd0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	7d1b      	ldrb	r3, [r3, #20]
 800fdee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdf2:	b2da      	uxtb	r2, r3
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fdf8:	6a3b      	ldr	r3, [r7, #32]
 800fdfa:	025b      	lsls	r3, r3, #9
 800fdfc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fdfe:	e044      	b.n	800fe8a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6a1b      	ldr	r3, [r3, #32]
 800fe04:	697a      	ldr	r2, [r7, #20]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d01b      	beq.n	800fe42 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	699a      	ldr	r2, [r3, #24]
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d215      	bcs.n	800fe42 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	7858      	ldrb	r0, [r3, #1]
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe20:	2301      	movs	r3, #1
 800fe22:	697a      	ldr	r2, [r7, #20]
 800fe24:	f7fd fe92 	bl	800db4c <disk_read>
 800fe28:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d009      	beq.n	800fe42 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2201      	movs	r2, #1
 800fe32:	755a      	strb	r2, [r3, #21]
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	2101      	movs	r1, #1
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7fd fffb 	bl	800de34 <unlock_fs>
 800fe3e:	2301      	movs	r3, #1
 800fe40:	e053      	b.n	800feea <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	697a      	ldr	r2, [r7, #20]
 800fe46:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	699b      	ldr	r3, [r3, #24]
 800fe4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe50:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fe54:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fe56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d901      	bls.n	800fe62 <f_write+0x2b8>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	699b      	ldr	r3, [r3, #24]
 800fe6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe70:	4413      	add	r3, r2
 800fe72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe74:	69f9      	ldr	r1, [r7, #28]
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fd ff48 	bl	800dd0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	7d1b      	ldrb	r3, [r3, #20]
 800fe80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fe84:	b2da      	uxtb	r2, r3
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fe8a:	69fa      	ldr	r2, [r7, #28]
 800fe8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8e:	4413      	add	r3, r2
 800fe90:	61fb      	str	r3, [r7, #28]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	699a      	ldr	r2, [r3, #24]
 800fe96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe98:	441a      	add	r2, r3
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	619a      	str	r2, [r3, #24]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	68da      	ldr	r2, [r3, #12]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	699b      	ldr	r3, [r3, #24]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	bf38      	it	cc
 800feaa:	461a      	movcc	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	60da      	str	r2, [r3, #12]
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb6:	441a      	add	r2, r3
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	601a      	str	r2, [r3, #0]
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec0:	1ad3      	subs	r3, r2, r3
 800fec2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f47f aeb6 	bne.w	800fc38 <f_write+0x8e>
 800fecc:	e000      	b.n	800fed0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fece:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	7d1b      	ldrb	r3, [r3, #20]
 800fed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fed8:	b2da      	uxtb	r2, r3
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	2100      	movs	r1, #0
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fd ffa6 	bl	800de34 <unlock_fs>
 800fee8:	2300      	movs	r3, #0
}
 800feea:	4618      	mov	r0, r3
 800feec:	3730      	adds	r7, #48	; 0x30
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b086      	sub	sp, #24
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f107 0208 	add.w	r2, r7, #8
 800ff00:	4611      	mov	r1, r2
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7ff fbe0 	bl	800f6c8 <validate>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff0c:	7dfb      	ldrb	r3, [r7, #23]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d16d      	bne.n	800ffee <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	7d1b      	ldrb	r3, [r3, #20]
 800ff16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d067      	beq.n	800ffee <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	7d1b      	ldrb	r3, [r3, #20]
 800ff22:	b25b      	sxtb	r3, r3
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	da1a      	bge.n	800ff5e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	7858      	ldrb	r0, [r3, #1]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6a1a      	ldr	r2, [r3, #32]
 800ff36:	2301      	movs	r3, #1
 800ff38:	f7fd fe28 	bl	800db8c <disk_write>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d006      	beq.n	800ff50 <f_sync+0x5e>
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	2101      	movs	r1, #1
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fd ff74 	bl	800de34 <unlock_fs>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	e055      	b.n	800fffc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	7d1b      	ldrb	r3, [r3, #20]
 800ff54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff58:	b2da      	uxtb	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ff5e:	f7fd f873 	bl	800d048 <get_fattime>
 800ff62:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ff64:	68ba      	ldr	r2, [r7, #8]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	4610      	mov	r0, r2
 800ff6e:	f7fe f92d 	bl	800e1cc <move_window>
 800ff72:	4603      	mov	r3, r0
 800ff74:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ff76:	7dfb      	ldrb	r3, [r7, #23]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d138      	bne.n	800ffee <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff80:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	330b      	adds	r3, #11
 800ff86:	781a      	ldrb	r2, [r3, #0]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	330b      	adds	r3, #11
 800ff8c:	f042 0220 	orr.w	r2, r2, #32
 800ff90:	b2d2      	uxtb	r2, r2
 800ff92:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6818      	ldr	r0, [r3, #0]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	689b      	ldr	r3, [r3, #8]
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	68f9      	ldr	r1, [r7, #12]
 800ffa0:	f7fe fe3a 	bl	800ec18 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f103 021c 	add.w	r2, r3, #28
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	4619      	mov	r1, r3
 800ffb0:	4610      	mov	r0, r2
 800ffb2:	f7fd fe7f 	bl	800dcb4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	3316      	adds	r3, #22
 800ffba:	6939      	ldr	r1, [r7, #16]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7fd fe79 	bl	800dcb4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	3312      	adds	r3, #18
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fd fe58 	bl	800dc7e <st_word>
					fs->wflag = 1;
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	2201      	movs	r2, #1
 800ffd2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fe f926 	bl	800e228 <sync_fs>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	7d1b      	ldrb	r3, [r3, #20]
 800ffe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffe8:	b2da      	uxtb	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	7dfa      	ldrb	r2, [r7, #23]
 800fff2:	4611      	mov	r1, r2
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fd ff1d 	bl	800de34 <unlock_fs>
 800fffa:	7dfb      	ldrb	r3, [r7, #23]
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3718      	adds	r7, #24
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7ff ff70 	bl	800fef2 <f_sync>
 8010012:	4603      	mov	r3, r0
 8010014:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010016:	7bfb      	ldrb	r3, [r7, #15]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d11d      	bne.n	8010058 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f107 0208 	add.w	r2, r7, #8
 8010022:	4611      	mov	r1, r2
 8010024:	4618      	mov	r0, r3
 8010026:	f7ff fb4f 	bl	800f6c8 <validate>
 801002a:	4603      	mov	r3, r0
 801002c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d111      	bne.n	8010058 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	691b      	ldr	r3, [r3, #16]
 8010038:	4618      	mov	r0, r3
 801003a:	f7fe f823 	bl	800e084 <dec_lock>
 801003e:	4603      	mov	r3, r0
 8010040:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010042:	7bfb      	ldrb	r3, [r7, #15]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d102      	bne.n	801004e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	2100      	movs	r1, #0
 8010052:	4618      	mov	r0, r3
 8010054:	f7fd feee 	bl	800de34 <unlock_fs>
#endif
		}
	}
	return res;
 8010058:	7bfb      	ldrb	r3, [r7, #15]
}
 801005a:	4618      	mov	r0, r3
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010062:	b580      	push	{r7, lr}
 8010064:	b090      	sub	sp, #64	; 0x40
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f107 0208 	add.w	r2, r7, #8
 8010072:	4611      	mov	r1, r2
 8010074:	4618      	mov	r0, r3
 8010076:	f7ff fb27 	bl	800f6c8 <validate>
 801007a:	4603      	mov	r3, r0
 801007c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010080:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010084:	2b00      	cmp	r3, #0
 8010086:	d103      	bne.n	8010090 <f_lseek+0x2e>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	7d5b      	ldrb	r3, [r3, #21]
 801008c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010090:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010094:	2b00      	cmp	r3, #0
 8010096:	d009      	beq.n	80100ac <f_lseek+0x4a>
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801009e:	4611      	mov	r1, r2
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7fd fec7 	bl	800de34 <unlock_fs>
 80100a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80100aa:	e229      	b.n	8010500 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f000 80ea 	beq.w	801028a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100bc:	d164      	bne.n	8010188 <f_lseek+0x126>
			tbl = fp->cltbl;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80100c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c6:	1d1a      	adds	r2, r3, #4
 80100c8:	627a      	str	r2, [r7, #36]	; 0x24
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	617b      	str	r3, [r7, #20]
 80100ce:	2302      	movs	r3, #2
 80100d0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	689b      	ldr	r3, [r3, #8]
 80100d6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80100d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d044      	beq.n	8010168 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80100de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e0:	613b      	str	r3, [r7, #16]
 80100e2:	2300      	movs	r3, #0
 80100e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e8:	3302      	adds	r3, #2
 80100ea:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80100ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f2:	3301      	adds	r3, #1
 80100f4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fe f921 	bl	800e342 <get_fat>
 8010100:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010104:	2b01      	cmp	r3, #1
 8010106:	d809      	bhi.n	801011c <f_lseek+0xba>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2202      	movs	r2, #2
 801010c:	755a      	strb	r2, [r3, #21]
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	2102      	movs	r1, #2
 8010112:	4618      	mov	r0, r3
 8010114:	f7fd fe8e 	bl	800de34 <unlock_fs>
 8010118:	2302      	movs	r3, #2
 801011a:	e1f1      	b.n	8010500 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801011c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010122:	d109      	bne.n	8010138 <f_lseek+0xd6>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2201      	movs	r2, #1
 8010128:	755a      	strb	r2, [r3, #21]
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	2101      	movs	r1, #1
 801012e:	4618      	mov	r0, r3
 8010130:	f7fd fe80 	bl	800de34 <unlock_fs>
 8010134:	2301      	movs	r3, #1
 8010136:	e1e3      	b.n	8010500 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	3301      	adds	r3, #1
 801013c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801013e:	429a      	cmp	r2, r3
 8010140:	d0d4      	beq.n	80100ec <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	429a      	cmp	r2, r3
 8010148:	d809      	bhi.n	801015e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014c:	1d1a      	adds	r2, r3, #4
 801014e:	627a      	str	r2, [r7, #36]	; 0x24
 8010150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010152:	601a      	str	r2, [r3, #0]
 8010154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010156:	1d1a      	adds	r2, r3, #4
 8010158:	627a      	str	r2, [r7, #36]	; 0x24
 801015a:	693a      	ldr	r2, [r7, #16]
 801015c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	699b      	ldr	r3, [r3, #24]
 8010162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010164:	429a      	cmp	r2, r3
 8010166:	d3ba      	bcc.n	80100de <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801016c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801016e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	429a      	cmp	r2, r3
 8010176:	d803      	bhi.n	8010180 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8010178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017a:	2200      	movs	r2, #0
 801017c:	601a      	str	r2, [r3, #0]
 801017e:	e1b6      	b.n	80104ee <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010180:	2311      	movs	r3, #17
 8010182:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010186:	e1b2      	b.n	80104ee <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	683a      	ldr	r2, [r7, #0]
 801018e:	429a      	cmp	r2, r3
 8010190:	d902      	bls.n	8010198 <f_lseek+0x136>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	68db      	ldr	r3, [r3, #12]
 8010196:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	f000 81a4 	beq.w	80104ee <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	3b01      	subs	r3, #1
 80101aa:	4619      	mov	r1, r3
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f7fe fb59 	bl	800e864 <clmt_clust>
 80101b2:	4602      	mov	r2, r0
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80101b8:	68ba      	ldr	r2, [r7, #8]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	69db      	ldr	r3, [r3, #28]
 80101be:	4619      	mov	r1, r3
 80101c0:	4610      	mov	r0, r2
 80101c2:	f7fe f89f 	bl	800e304 <clust2sect>
 80101c6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d109      	bne.n	80101e2 <f_lseek+0x180>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2202      	movs	r2, #2
 80101d2:	755a      	strb	r2, [r3, #21]
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	2102      	movs	r1, #2
 80101d8:	4618      	mov	r0, r3
 80101da:	f7fd fe2b 	bl	800de34 <unlock_fs>
 80101de:	2302      	movs	r3, #2
 80101e0:	e18e      	b.n	8010500 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	0a5b      	lsrs	r3, r3, #9
 80101e8:	68ba      	ldr	r2, [r7, #8]
 80101ea:	8952      	ldrh	r2, [r2, #10]
 80101ec:	3a01      	subs	r2, #1
 80101ee:	4013      	ands	r3, r2
 80101f0:	69ba      	ldr	r2, [r7, #24]
 80101f2:	4413      	add	r3, r2
 80101f4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	699b      	ldr	r3, [r3, #24]
 80101fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f000 8175 	beq.w	80104ee <f_lseek+0x48c>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6a1b      	ldr	r3, [r3, #32]
 8010208:	69ba      	ldr	r2, [r7, #24]
 801020a:	429a      	cmp	r2, r3
 801020c:	f000 816f 	beq.w	80104ee <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	7d1b      	ldrb	r3, [r3, #20]
 8010214:	b25b      	sxtb	r3, r3
 8010216:	2b00      	cmp	r3, #0
 8010218:	da1d      	bge.n	8010256 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	7858      	ldrb	r0, [r3, #1]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6a1a      	ldr	r2, [r3, #32]
 8010228:	2301      	movs	r3, #1
 801022a:	f7fd fcaf 	bl	800db8c <disk_write>
 801022e:	4603      	mov	r3, r0
 8010230:	2b00      	cmp	r3, #0
 8010232:	d009      	beq.n	8010248 <f_lseek+0x1e6>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2201      	movs	r2, #1
 8010238:	755a      	strb	r2, [r3, #21]
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	2101      	movs	r1, #1
 801023e:	4618      	mov	r0, r3
 8010240:	f7fd fdf8 	bl	800de34 <unlock_fs>
 8010244:	2301      	movs	r3, #1
 8010246:	e15b      	b.n	8010500 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	7d1b      	ldrb	r3, [r3, #20]
 801024c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010250:	b2da      	uxtb	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	7858      	ldrb	r0, [r3, #1]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010260:	2301      	movs	r3, #1
 8010262:	69ba      	ldr	r2, [r7, #24]
 8010264:	f7fd fc72 	bl	800db4c <disk_read>
 8010268:	4603      	mov	r3, r0
 801026a:	2b00      	cmp	r3, #0
 801026c:	d009      	beq.n	8010282 <f_lseek+0x220>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2201      	movs	r2, #1
 8010272:	755a      	strb	r2, [r3, #21]
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	2101      	movs	r1, #1
 8010278:	4618      	mov	r0, r3
 801027a:	f7fd fddb 	bl	800de34 <unlock_fs>
 801027e:	2301      	movs	r3, #1
 8010280:	e13e      	b.n	8010500 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	69ba      	ldr	r2, [r7, #24]
 8010286:	621a      	str	r2, [r3, #32]
 8010288:	e131      	b.n	80104ee <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	683a      	ldr	r2, [r7, #0]
 8010290:	429a      	cmp	r2, r3
 8010292:	d908      	bls.n	80102a6 <f_lseek+0x244>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	7d1b      	ldrb	r3, [r3, #20]
 8010298:	f003 0302 	and.w	r3, r3, #2
 801029c:	2b00      	cmp	r3, #0
 801029e:	d102      	bne.n	80102a6 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	699b      	ldr	r3, [r3, #24]
 80102aa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	637b      	str	r3, [r7, #52]	; 0x34
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102b4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f000 80c0 	beq.w	801043e <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	895b      	ldrh	r3, [r3, #10]
 80102c2:	025b      	lsls	r3, r3, #9
 80102c4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80102c6:	6a3b      	ldr	r3, [r7, #32]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d01b      	beq.n	8010304 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	1e5a      	subs	r2, r3, #1
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80102d6:	6a3b      	ldr	r3, [r7, #32]
 80102d8:	1e59      	subs	r1, r3, #1
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d30f      	bcc.n	8010304 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80102e4:	6a3b      	ldr	r3, [r7, #32]
 80102e6:	1e5a      	subs	r2, r3, #1
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	425b      	negs	r3, r3
 80102ec:	401a      	ands	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	699b      	ldr	r3, [r3, #24]
 80102f6:	683a      	ldr	r2, [r7, #0]
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	69db      	ldr	r3, [r3, #28]
 8010300:	63bb      	str	r3, [r7, #56]	; 0x38
 8010302:	e02c      	b.n	801035e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801030a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030c:	2b00      	cmp	r3, #0
 801030e:	d123      	bne.n	8010358 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2100      	movs	r1, #0
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe fa0d 	bl	800e734 <create_chain>
 801031a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801031c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031e:	2b01      	cmp	r3, #1
 8010320:	d109      	bne.n	8010336 <f_lseek+0x2d4>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2202      	movs	r2, #2
 8010326:	755a      	strb	r2, [r3, #21]
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2102      	movs	r1, #2
 801032c:	4618      	mov	r0, r3
 801032e:	f7fd fd81 	bl	800de34 <unlock_fs>
 8010332:	2302      	movs	r3, #2
 8010334:	e0e4      	b.n	8010500 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801033c:	d109      	bne.n	8010352 <f_lseek+0x2f0>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2201      	movs	r2, #1
 8010342:	755a      	strb	r2, [r3, #21]
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	2101      	movs	r1, #1
 8010348:	4618      	mov	r0, r3
 801034a:	f7fd fd73 	bl	800de34 <unlock_fs>
 801034e:	2301      	movs	r3, #1
 8010350:	e0d6      	b.n	8010500 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010356:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801035c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801035e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010360:	2b00      	cmp	r3, #0
 8010362:	d06c      	beq.n	801043e <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8010364:	e044      	b.n	80103f0 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8010366:	683a      	ldr	r2, [r7, #0]
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	603b      	str	r3, [r7, #0]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	699a      	ldr	r2, [r3, #24]
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	441a      	add	r2, r3
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	7d1b      	ldrb	r3, [r3, #20]
 801037e:	f003 0302 	and.w	r3, r3, #2
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00b      	beq.n	801039e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801038a:	4618      	mov	r0, r3
 801038c:	f7fe f9d2 	bl	800e734 <create_chain>
 8010390:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010394:	2b00      	cmp	r3, #0
 8010396:	d108      	bne.n	80103aa <f_lseek+0x348>
							ofs = 0; break;
 8010398:	2300      	movs	r3, #0
 801039a:	603b      	str	r3, [r7, #0]
 801039c:	e02c      	b.n	80103f8 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fd ffcd 	bl	800e342 <get_fat>
 80103a8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80103aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103b0:	d109      	bne.n	80103c6 <f_lseek+0x364>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2201      	movs	r2, #1
 80103b6:	755a      	strb	r2, [r3, #21]
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	2101      	movs	r1, #1
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fd fd39 	bl	800de34 <unlock_fs>
 80103c2:	2301      	movs	r3, #1
 80103c4:	e09c      	b.n	8010500 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80103c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d904      	bls.n	80103d6 <f_lseek+0x374>
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	699b      	ldr	r3, [r3, #24]
 80103d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d309      	bcc.n	80103ea <f_lseek+0x388>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2202      	movs	r2, #2
 80103da:	755a      	strb	r2, [r3, #21]
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	2102      	movs	r1, #2
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7fd fd27 	bl	800de34 <unlock_fs>
 80103e6:	2302      	movs	r3, #2
 80103e8:	e08a      	b.n	8010500 <f_lseek+0x49e>
					fp->clust = clst;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103ee:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80103f0:	683a      	ldr	r2, [r7, #0]
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d8b6      	bhi.n	8010366 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	699a      	ldr	r2, [r3, #24]
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	441a      	add	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801040a:	2b00      	cmp	r3, #0
 801040c:	d017      	beq.n	801043e <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010412:	4618      	mov	r0, r3
 8010414:	f7fd ff76 	bl	800e304 <clust2sect>
 8010418:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801041a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801041c:	2b00      	cmp	r3, #0
 801041e:	d109      	bne.n	8010434 <f_lseek+0x3d2>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2202      	movs	r2, #2
 8010424:	755a      	strb	r2, [r3, #21]
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	2102      	movs	r1, #2
 801042a:	4618      	mov	r0, r3
 801042c:	f7fd fd02 	bl	800de34 <unlock_fs>
 8010430:	2302      	movs	r3, #2
 8010432:	e065      	b.n	8010500 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	0a5b      	lsrs	r3, r3, #9
 8010438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801043a:	4413      	add	r3, r2
 801043c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	699a      	ldr	r2, [r3, #24]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	68db      	ldr	r3, [r3, #12]
 8010446:	429a      	cmp	r2, r3
 8010448:	d90a      	bls.n	8010460 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	699a      	ldr	r2, [r3, #24]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	7d1b      	ldrb	r3, [r3, #20]
 8010456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801045a:	b2da      	uxtb	r2, r3
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	699b      	ldr	r3, [r3, #24]
 8010464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010468:	2b00      	cmp	r3, #0
 801046a:	d040      	beq.n	80104ee <f_lseek+0x48c>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6a1b      	ldr	r3, [r3, #32]
 8010470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010472:	429a      	cmp	r2, r3
 8010474:	d03b      	beq.n	80104ee <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	7d1b      	ldrb	r3, [r3, #20]
 801047a:	b25b      	sxtb	r3, r3
 801047c:	2b00      	cmp	r3, #0
 801047e:	da1d      	bge.n	80104bc <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	7858      	ldrb	r0, [r3, #1]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6a1a      	ldr	r2, [r3, #32]
 801048e:	2301      	movs	r3, #1
 8010490:	f7fd fb7c 	bl	800db8c <disk_write>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d009      	beq.n	80104ae <f_lseek+0x44c>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2201      	movs	r2, #1
 801049e:	755a      	strb	r2, [r3, #21]
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	2101      	movs	r1, #1
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fd fcc5 	bl	800de34 <unlock_fs>
 80104aa:	2301      	movs	r3, #1
 80104ac:	e028      	b.n	8010500 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	7d1b      	ldrb	r3, [r3, #20]
 80104b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104b6:	b2da      	uxtb	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	7858      	ldrb	r0, [r3, #1]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104c6:	2301      	movs	r3, #1
 80104c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104ca:	f7fd fb3f 	bl	800db4c <disk_read>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d009      	beq.n	80104e8 <f_lseek+0x486>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2201      	movs	r2, #1
 80104d8:	755a      	strb	r2, [r3, #21]
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	2101      	movs	r1, #1
 80104de:	4618      	mov	r0, r3
 80104e0:	f7fd fca8 	bl	800de34 <unlock_fs>
 80104e4:	2301      	movs	r3, #1
 80104e6:	e00b      	b.n	8010500 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104ec:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80104f4:	4611      	mov	r1, r2
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fd fc9c 	bl	800de34 <unlock_fs>
 80104fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010500:	4618      	mov	r0, r3
 8010502:	3740      	adds	r7, #64	; 0x40
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b086      	sub	sp, #24
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d101      	bne.n	801051c <f_opendir+0x14>
 8010518:	2309      	movs	r3, #9
 801051a:	e06a      	b.n	80105f2 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010520:	f107 010c 	add.w	r1, r7, #12
 8010524:	463b      	mov	r3, r7
 8010526:	2200      	movs	r2, #0
 8010528:	4618      	mov	r0, r3
 801052a:	f7fe fe79 	bl	800f220 <find_volume>
 801052e:	4603      	mov	r3, r0
 8010530:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010532:	7dfb      	ldrb	r3, [r7, #23]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d14f      	bne.n	80105d8 <f_opendir+0xd0>
		obj->fs = fs;
 8010538:	68fa      	ldr	r2, [r7, #12]
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	4619      	mov	r1, r3
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f7fe fd60 	bl	800f008 <follow_path>
 8010548:	4603      	mov	r3, r0
 801054a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801054c:	7dfb      	ldrb	r3, [r7, #23]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d13d      	bne.n	80105ce <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010558:	b25b      	sxtb	r3, r3
 801055a:	2b00      	cmp	r3, #0
 801055c:	db12      	blt.n	8010584 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	799b      	ldrb	r3, [r3, #6]
 8010562:	f003 0310 	and.w	r3, r3, #16
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00a      	beq.n	8010580 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6a1b      	ldr	r3, [r3, #32]
 8010570:	4619      	mov	r1, r3
 8010572:	4610      	mov	r0, r2
 8010574:	f7fe fb31 	bl	800ebda <ld_clust>
 8010578:	4602      	mov	r2, r0
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	609a      	str	r2, [r3, #8]
 801057e:	e001      	b.n	8010584 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010580:	2305      	movs	r3, #5
 8010582:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010584:	7dfb      	ldrb	r3, [r7, #23]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d121      	bne.n	80105ce <f_opendir+0xc6>
				obj->id = fs->id;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	88da      	ldrh	r2, [r3, #6]
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010592:	2100      	movs	r1, #0
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f7fe f999 	bl	800e8cc <dir_sdi>
 801059a:	4603      	mov	r3, r0
 801059c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801059e:	7dfb      	ldrb	r3, [r7, #23]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d114      	bne.n	80105ce <f_opendir+0xc6>
					if (obj->sclust) {
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d00d      	beq.n	80105c8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80105ac:	2100      	movs	r1, #0
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f7fd fcda 	bl	800df68 <inc_lock>
 80105b4:	4602      	mov	r2, r0
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	691b      	ldr	r3, [r3, #16]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d105      	bne.n	80105ce <f_opendir+0xc6>
 80105c2:	2312      	movs	r3, #18
 80105c4:	75fb      	strb	r3, [r7, #23]
 80105c6:	e002      	b.n	80105ce <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	2200      	movs	r2, #0
 80105cc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80105ce:	7dfb      	ldrb	r3, [r7, #23]
 80105d0:	2b04      	cmp	r3, #4
 80105d2:	d101      	bne.n	80105d8 <f_opendir+0xd0>
 80105d4:	2305      	movs	r3, #5
 80105d6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80105d8:	7dfb      	ldrb	r3, [r7, #23]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d002      	beq.n	80105e4 <f_opendir+0xdc>
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	2200      	movs	r2, #0
 80105e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	7dfa      	ldrb	r2, [r7, #23]
 80105e8:	4611      	mov	r1, r2
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7fd fc22 	bl	800de34 <unlock_fs>
 80105f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3718      	adds	r7, #24
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80105fa:	b580      	push	{r7, lr}
 80105fc:	b084      	sub	sp, #16
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f107 0208 	add.w	r2, r7, #8
 8010608:	4611      	mov	r1, r2
 801060a:	4618      	mov	r0, r3
 801060c:	f7ff f85c 	bl	800f6c8 <validate>
 8010610:	4603      	mov	r3, r0
 8010612:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010614:	7bfb      	ldrb	r3, [r7, #15]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d115      	bne.n	8010646 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	691b      	ldr	r3, [r3, #16]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d006      	beq.n	8010630 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	4618      	mov	r0, r3
 8010628:	f7fd fd2c 	bl	800e084 <dec_lock>
 801062c:	4603      	mov	r3, r0
 801062e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010630:	7bfb      	ldrb	r3, [r7, #15]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d102      	bne.n	801063c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2200      	movs	r2, #0
 801063a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	2100      	movs	r1, #0
 8010640:	4618      	mov	r0, r3
 8010642:	f7fd fbf7 	bl	800de34 <unlock_fs>
#endif
	}
	return res;
 8010646:	7bfb      	ldrb	r3, [r7, #15]
}
 8010648:	4618      	mov	r0, r3
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f107 0208 	add.w	r2, r7, #8
 8010660:	4611      	mov	r1, r2
 8010662:	4618      	mov	r0, r3
 8010664:	f7ff f830 	bl	800f6c8 <validate>
 8010668:	4603      	mov	r3, r0
 801066a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801066c:	7bfb      	ldrb	r3, [r7, #15]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d126      	bne.n	80106c0 <f_readdir+0x70>
		if (!fno) {
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d106      	bne.n	8010686 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010678:	2100      	movs	r1, #0
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f7fe f926 	bl	800e8cc <dir_sdi>
 8010680:	4603      	mov	r3, r0
 8010682:	73fb      	strb	r3, [r7, #15]
 8010684:	e01c      	b.n	80106c0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010686:	2100      	movs	r1, #0
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f7fe fae5 	bl	800ec58 <dir_read>
 801068e:	4603      	mov	r3, r0
 8010690:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010692:	7bfb      	ldrb	r3, [r7, #15]
 8010694:	2b04      	cmp	r3, #4
 8010696:	d101      	bne.n	801069c <f_readdir+0x4c>
 8010698:	2300      	movs	r3, #0
 801069a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801069c:	7bfb      	ldrb	r3, [r7, #15]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d10e      	bne.n	80106c0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80106a2:	6839      	ldr	r1, [r7, #0]
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7fe fbbb 	bl	800ee20 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80106aa:	2100      	movs	r1, #0
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f7fe f988 	bl	800e9c2 <dir_next>
 80106b2:	4603      	mov	r3, r0
 80106b4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80106b6:	7bfb      	ldrb	r3, [r7, #15]
 80106b8:	2b04      	cmp	r3, #4
 80106ba:	d101      	bne.n	80106c0 <f_readdir+0x70>
 80106bc:	2300      	movs	r3, #0
 80106be:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	7bfa      	ldrb	r2, [r7, #15]
 80106c4:	4611      	mov	r1, r2
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fd fbb4 	bl	800de34 <unlock_fs>
 80106cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
	...

080106d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80106d8:	b480      	push	{r7}
 80106da:	b087      	sub	sp, #28
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	4613      	mov	r3, r2
 80106e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80106e6:	2301      	movs	r3, #1
 80106e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80106ea:	2300      	movs	r3, #0
 80106ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80106ee:	4b1f      	ldr	r3, [pc, #124]	; (801076c <FATFS_LinkDriverEx+0x94>)
 80106f0:	7a5b      	ldrb	r3, [r3, #9]
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d131      	bne.n	801075c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80106f8:	4b1c      	ldr	r3, [pc, #112]	; (801076c <FATFS_LinkDriverEx+0x94>)
 80106fa:	7a5b      	ldrb	r3, [r3, #9]
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	461a      	mov	r2, r3
 8010700:	4b1a      	ldr	r3, [pc, #104]	; (801076c <FATFS_LinkDriverEx+0x94>)
 8010702:	2100      	movs	r1, #0
 8010704:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010706:	4b19      	ldr	r3, [pc, #100]	; (801076c <FATFS_LinkDriverEx+0x94>)
 8010708:	7a5b      	ldrb	r3, [r3, #9]
 801070a:	b2db      	uxtb	r3, r3
 801070c:	4a17      	ldr	r2, [pc, #92]	; (801076c <FATFS_LinkDriverEx+0x94>)
 801070e:	009b      	lsls	r3, r3, #2
 8010710:	4413      	add	r3, r2
 8010712:	68fa      	ldr	r2, [r7, #12]
 8010714:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010716:	4b15      	ldr	r3, [pc, #84]	; (801076c <FATFS_LinkDriverEx+0x94>)
 8010718:	7a5b      	ldrb	r3, [r3, #9]
 801071a:	b2db      	uxtb	r3, r3
 801071c:	461a      	mov	r2, r3
 801071e:	4b13      	ldr	r3, [pc, #76]	; (801076c <FATFS_LinkDriverEx+0x94>)
 8010720:	4413      	add	r3, r2
 8010722:	79fa      	ldrb	r2, [r7, #7]
 8010724:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010726:	4b11      	ldr	r3, [pc, #68]	; (801076c <FATFS_LinkDriverEx+0x94>)
 8010728:	7a5b      	ldrb	r3, [r3, #9]
 801072a:	b2db      	uxtb	r3, r3
 801072c:	1c5a      	adds	r2, r3, #1
 801072e:	b2d1      	uxtb	r1, r2
 8010730:	4a0e      	ldr	r2, [pc, #56]	; (801076c <FATFS_LinkDriverEx+0x94>)
 8010732:	7251      	strb	r1, [r2, #9]
 8010734:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010736:	7dbb      	ldrb	r3, [r7, #22]
 8010738:	3330      	adds	r3, #48	; 0x30
 801073a:	b2da      	uxtb	r2, r3
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	3301      	adds	r3, #1
 8010744:	223a      	movs	r2, #58	; 0x3a
 8010746:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	3302      	adds	r3, #2
 801074c:	222f      	movs	r2, #47	; 0x2f
 801074e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	3303      	adds	r3, #3
 8010754:	2200      	movs	r2, #0
 8010756:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010758:	2300      	movs	r3, #0
 801075a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801075c:	7dfb      	ldrb	r3, [r7, #23]
}
 801075e:	4618      	mov	r0, r3
 8010760:	371c      	adds	r7, #28
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	20000694 	.word	0x20000694

08010770 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801077a:	2200      	movs	r2, #0
 801077c:	6839      	ldr	r1, [r7, #0]
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f7ff ffaa 	bl	80106d8 <FATFS_LinkDriverEx>
 8010784:	4603      	mov	r3, r0
}
 8010786:	4618      	mov	r0, r3
 8010788:	3708      	adds	r7, #8
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}

0801078e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801078e:	b580      	push	{r7, lr}
 8010790:	b084      	sub	sp, #16
 8010792:	af00      	add	r7, sp, #0
 8010794:	4603      	mov	r3, r0
 8010796:	6039      	str	r1, [r7, #0]
 8010798:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801079a:	2200      	movs	r2, #0
 801079c:	2101      	movs	r1, #1
 801079e:	2001      	movs	r0, #1
 80107a0:	f000 f9e6 	bl	8010b70 <osSemaphoreNew>
 80107a4:	4602      	mov	r2, r0
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	bf14      	ite	ne
 80107b2:	2301      	movne	r3, #1
 80107b4:	2300      	moveq	r3, #0
 80107b6:	b2db      	uxtb	r3, r3
 80107b8:	60fb      	str	r3, [r7, #12]

    return ret;
 80107ba:	68fb      	ldr	r3, [r7, #12]
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3710      	adds	r7, #16
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 faef 	bl	8010db0 <osSemaphoreDelete>
#endif
    return 1;
 80107d2:	2301      	movs	r3, #1
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80107e4:	2300      	movs	r3, #0
 80107e6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80107e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f000 fa49 	bl	8010c84 <osSemaphoreAcquire>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d101      	bne.n	80107fc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80107f8:	2301      	movs	r3, #1
 80107fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80107fc:	68fb      	ldr	r3, [r7, #12]
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3710      	adds	r7, #16
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}

08010806 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010806:	b580      	push	{r7, lr}
 8010808:	b082      	sub	sp, #8
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 fa8a 	bl	8010d28 <osSemaphoreRelease>
#endif
}
 8010814:	bf00      	nop
 8010816:	3708      	adds	r7, #8
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}

0801081c <__NVIC_SetPriority>:
{
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	4603      	mov	r3, r0
 8010824:	6039      	str	r1, [r7, #0]
 8010826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801082c:	2b00      	cmp	r3, #0
 801082e:	db0a      	blt.n	8010846 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	b2da      	uxtb	r2, r3
 8010834:	490c      	ldr	r1, [pc, #48]	; (8010868 <__NVIC_SetPriority+0x4c>)
 8010836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801083a:	0112      	lsls	r2, r2, #4
 801083c:	b2d2      	uxtb	r2, r2
 801083e:	440b      	add	r3, r1
 8010840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010844:	e00a      	b.n	801085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	b2da      	uxtb	r2, r3
 801084a:	4908      	ldr	r1, [pc, #32]	; (801086c <__NVIC_SetPriority+0x50>)
 801084c:	79fb      	ldrb	r3, [r7, #7]
 801084e:	f003 030f 	and.w	r3, r3, #15
 8010852:	3b04      	subs	r3, #4
 8010854:	0112      	lsls	r2, r2, #4
 8010856:	b2d2      	uxtb	r2, r2
 8010858:	440b      	add	r3, r1
 801085a:	761a      	strb	r2, [r3, #24]
}
 801085c:	bf00      	nop
 801085e:	370c      	adds	r7, #12
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr
 8010868:	e000e100 	.word	0xe000e100
 801086c:	e000ed00 	.word	0xe000ed00

08010870 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010870:	b580      	push	{r7, lr}
 8010872:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010874:	4b05      	ldr	r3, [pc, #20]	; (801088c <SysTick_Handler+0x1c>)
 8010876:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010878:	f002 fb74 	bl	8012f64 <xTaskGetSchedulerState>
 801087c:	4603      	mov	r3, r0
 801087e:	2b01      	cmp	r3, #1
 8010880:	d001      	beq.n	8010886 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010882:	f003 fa59 	bl	8013d38 <xPortSysTickHandler>
  }
}
 8010886:	bf00      	nop
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	e000e010 	.word	0xe000e010

08010890 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010890:	b580      	push	{r7, lr}
 8010892:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010894:	2100      	movs	r1, #0
 8010896:	f06f 0004 	mvn.w	r0, #4
 801089a:	f7ff ffbf 	bl	801081c <__NVIC_SetPriority>
#endif
}
 801089e:	bf00      	nop
 80108a0:	bd80      	pop	{r7, pc}
	...

080108a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108aa:	f3ef 8305 	mrs	r3, IPSR
 80108ae:	603b      	str	r3, [r7, #0]
  return(result);
 80108b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d003      	beq.n	80108be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80108b6:	f06f 0305 	mvn.w	r3, #5
 80108ba:	607b      	str	r3, [r7, #4]
 80108bc:	e00c      	b.n	80108d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80108be:	4b0a      	ldr	r3, [pc, #40]	; (80108e8 <osKernelInitialize+0x44>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d105      	bne.n	80108d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80108c6:	4b08      	ldr	r3, [pc, #32]	; (80108e8 <osKernelInitialize+0x44>)
 80108c8:	2201      	movs	r2, #1
 80108ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	607b      	str	r3, [r7, #4]
 80108d0:	e002      	b.n	80108d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80108d2:	f04f 33ff 	mov.w	r3, #4294967295
 80108d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80108d8:	687b      	ldr	r3, [r7, #4]
}
 80108da:	4618      	mov	r0, r3
 80108dc:	370c      	adds	r7, #12
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop
 80108e8:	200006a0 	.word	0x200006a0

080108ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108f2:	f3ef 8305 	mrs	r3, IPSR
 80108f6:	603b      	str	r3, [r7, #0]
  return(result);
 80108f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d003      	beq.n	8010906 <osKernelStart+0x1a>
    stat = osErrorISR;
 80108fe:	f06f 0305 	mvn.w	r3, #5
 8010902:	607b      	str	r3, [r7, #4]
 8010904:	e010      	b.n	8010928 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010906:	4b0b      	ldr	r3, [pc, #44]	; (8010934 <osKernelStart+0x48>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b01      	cmp	r3, #1
 801090c:	d109      	bne.n	8010922 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801090e:	f7ff ffbf 	bl	8010890 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010912:	4b08      	ldr	r3, [pc, #32]	; (8010934 <osKernelStart+0x48>)
 8010914:	2202      	movs	r2, #2
 8010916:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010918:	f001 feb8 	bl	801268c <vTaskStartScheduler>
      stat = osOK;
 801091c:	2300      	movs	r3, #0
 801091e:	607b      	str	r3, [r7, #4]
 8010920:	e002      	b.n	8010928 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010922:	f04f 33ff 	mov.w	r3, #4294967295
 8010926:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010928:	687b      	ldr	r3, [r7, #4]
}
 801092a:	4618      	mov	r0, r3
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	200006a0 	.word	0x200006a0

08010938 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010938:	b580      	push	{r7, lr}
 801093a:	b08e      	sub	sp, #56	; 0x38
 801093c:	af04      	add	r7, sp, #16
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010944:	2300      	movs	r3, #0
 8010946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010948:	f3ef 8305 	mrs	r3, IPSR
 801094c:	617b      	str	r3, [r7, #20]
  return(result);
 801094e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010950:	2b00      	cmp	r3, #0
 8010952:	d17e      	bne.n	8010a52 <osThreadNew+0x11a>
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d07b      	beq.n	8010a52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801095a:	2380      	movs	r3, #128	; 0x80
 801095c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801095e:	2318      	movs	r3, #24
 8010960:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010962:	2300      	movs	r3, #0
 8010964:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010966:	f04f 33ff 	mov.w	r3, #4294967295
 801096a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d045      	beq.n	80109fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d002      	beq.n	8010980 <osThreadNew+0x48>
        name = attr->name;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	699b      	ldr	r3, [r3, #24]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d002      	beq.n	801098e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	699b      	ldr	r3, [r3, #24]
 801098c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801098e:	69fb      	ldr	r3, [r7, #28]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d008      	beq.n	80109a6 <osThreadNew+0x6e>
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	2b38      	cmp	r3, #56	; 0x38
 8010998:	d805      	bhi.n	80109a6 <osThreadNew+0x6e>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	f003 0301 	and.w	r3, r3, #1
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d001      	beq.n	80109aa <osThreadNew+0x72>
        return (NULL);
 80109a6:	2300      	movs	r3, #0
 80109a8:	e054      	b.n	8010a54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	695b      	ldr	r3, [r3, #20]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d003      	beq.n	80109ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	695b      	ldr	r3, [r3, #20]
 80109b6:	089b      	lsrs	r3, r3, #2
 80109b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	689b      	ldr	r3, [r3, #8]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d00e      	beq.n	80109e0 <osThreadNew+0xa8>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	68db      	ldr	r3, [r3, #12]
 80109c6:	2bbb      	cmp	r3, #187	; 0xbb
 80109c8:	d90a      	bls.n	80109e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d006      	beq.n	80109e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	695b      	ldr	r3, [r3, #20]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d002      	beq.n	80109e0 <osThreadNew+0xa8>
        mem = 1;
 80109da:	2301      	movs	r3, #1
 80109dc:	61bb      	str	r3, [r7, #24]
 80109de:	e010      	b.n	8010a02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	689b      	ldr	r3, [r3, #8]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d10c      	bne.n	8010a02 <osThreadNew+0xca>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d108      	bne.n	8010a02 <osThreadNew+0xca>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	691b      	ldr	r3, [r3, #16]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d104      	bne.n	8010a02 <osThreadNew+0xca>
          mem = 0;
 80109f8:	2300      	movs	r3, #0
 80109fa:	61bb      	str	r3, [r7, #24]
 80109fc:	e001      	b.n	8010a02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010a02:	69bb      	ldr	r3, [r7, #24]
 8010a04:	2b01      	cmp	r3, #1
 8010a06:	d110      	bne.n	8010a2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010a10:	9202      	str	r2, [sp, #8]
 8010a12:	9301      	str	r3, [sp, #4]
 8010a14:	69fb      	ldr	r3, [r7, #28]
 8010a16:	9300      	str	r3, [sp, #0]
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	6a3a      	ldr	r2, [r7, #32]
 8010a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	f001 fae0 	bl	8011fe4 <xTaskCreateStatic>
 8010a24:	4603      	mov	r3, r0
 8010a26:	613b      	str	r3, [r7, #16]
 8010a28:	e013      	b.n	8010a52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010a2a:	69bb      	ldr	r3, [r7, #24]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d110      	bne.n	8010a52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010a30:	6a3b      	ldr	r3, [r7, #32]
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	f107 0310 	add.w	r3, r7, #16
 8010a38:	9301      	str	r3, [sp, #4]
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	9300      	str	r3, [sp, #0]
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	f001 fb2b 	bl	801209e <xTaskCreate>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d001      	beq.n	8010a52 <osThreadNew+0x11a>
            hTask = NULL;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010a52:	693b      	ldr	r3, [r7, #16]
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3728      	adds	r7, #40	; 0x28
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8010a62:	f002 fa6f 	bl	8012f44 <xTaskGetCurrentTaskHandle>
 8010a66:	6078      	str	r0, [r7, #4]

  return (id);
 8010a68:	687b      	ldr	r3, [r7, #4]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3708      	adds	r7, #8
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
	...

08010a74 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b086      	sub	sp, #24
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a80:	f3ef 8305 	mrs	r3, IPSR
 8010a84:	60fb      	str	r3, [r7, #12]
  return(result);
 8010a86:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d102      	bne.n	8010a92 <osThreadGetState+0x1e>
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d103      	bne.n	8010a9a <osThreadGetState+0x26>
    state = osThreadError;
 8010a92:	f04f 33ff 	mov.w	r3, #4294967295
 8010a96:	617b      	str	r3, [r7, #20]
 8010a98:	e022      	b.n	8010ae0 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8010a9a:	6938      	ldr	r0, [r7, #16]
 8010a9c:	f001 fd00 	bl	80124a0 <eTaskGetState>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b04      	cmp	r3, #4
 8010aa4:	d818      	bhi.n	8010ad8 <osThreadGetState+0x64>
 8010aa6:	a201      	add	r2, pc, #4	; (adr r2, 8010aac <osThreadGetState+0x38>)
 8010aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aac:	08010ac1 	.word	0x08010ac1
 8010ab0:	08010ac7 	.word	0x08010ac7
 8010ab4:	08010acd 	.word	0x08010acd
 8010ab8:	08010acd 	.word	0x08010acd
 8010abc:	08010ad3 	.word	0x08010ad3
      case eRunning:   state = osThreadRunning;    break;
 8010ac0:	2302      	movs	r3, #2
 8010ac2:	617b      	str	r3, [r7, #20]
 8010ac4:	e00c      	b.n	8010ae0 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	617b      	str	r3, [r7, #20]
 8010aca:	e009      	b.n	8010ae0 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8010acc:	2303      	movs	r3, #3
 8010ace:	617b      	str	r3, [r7, #20]
 8010ad0:	e006      	b.n	8010ae0 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8010ad2:	2304      	movs	r3, #4
 8010ad4:	617b      	str	r3, [r7, #20]
 8010ad6:	e003      	b.n	8010ae0 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8010ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8010adc:	617b      	str	r3, [r7, #20]
 8010ade:	bf00      	nop
    }
  }

  return (state);
 8010ae0:	697b      	ldr	r3, [r7, #20]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3718      	adds	r7, #24
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop

08010aec <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b086      	sub	sp, #24
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010af8:	f3ef 8305 	mrs	r3, IPSR
 8010afc:	60fb      	str	r3, [r7, #12]
  return(result);
 8010afe:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d003      	beq.n	8010b0c <osThreadResume+0x20>
    stat = osErrorISR;
 8010b04:	f06f 0305 	mvn.w	r3, #5
 8010b08:	617b      	str	r3, [r7, #20]
 8010b0a:	e00b      	b.n	8010b24 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d103      	bne.n	8010b1a <osThreadResume+0x2e>
    stat = osErrorParameter;
 8010b12:	f06f 0303 	mvn.w	r3, #3
 8010b16:	617b      	str	r3, [r7, #20]
 8010b18:	e004      	b.n	8010b24 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8010b1e:	6938      	ldr	r0, [r7, #16]
 8010b20:	f001 fd56 	bl	80125d0 <vTaskResume>
  }

  return (stat);
 8010b24:	697b      	ldr	r3, [r7, #20]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8010b32:	2000      	movs	r0, #0
 8010b34:	f001 fc0e 	bl	8012354 <vTaskDelete>
#endif
  for (;;);
 8010b38:	e7fe      	b.n	8010b38 <osThreadExit+0xa>

08010b3a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b084      	sub	sp, #16
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b42:	f3ef 8305 	mrs	r3, IPSR
 8010b46:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d003      	beq.n	8010b56 <osDelay+0x1c>
    stat = osErrorISR;
 8010b4e:	f06f 0305 	mvn.w	r3, #5
 8010b52:	60fb      	str	r3, [r7, #12]
 8010b54:	e007      	b.n	8010b66 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010b56:	2300      	movs	r3, #0
 8010b58:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d002      	beq.n	8010b66 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f001 fc69 	bl	8012438 <vTaskDelay>
    }
  }

  return (stat);
 8010b66:	68fb      	ldr	r3, [r7, #12]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b08a      	sub	sp, #40	; 0x28
 8010b74:	af02      	add	r7, sp, #8
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b80:	f3ef 8305 	mrs	r3, IPSR
 8010b84:	613b      	str	r3, [r7, #16]
  return(result);
 8010b86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d175      	bne.n	8010c78 <osSemaphoreNew+0x108>
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d072      	beq.n	8010c78 <osSemaphoreNew+0x108>
 8010b92:	68ba      	ldr	r2, [r7, #8]
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d86e      	bhi.n	8010c78 <osSemaphoreNew+0x108>
    mem = -1;
 8010b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d015      	beq.n	8010bd2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	689b      	ldr	r3, [r3, #8]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d006      	beq.n	8010bbc <osSemaphoreNew+0x4c>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	2b4f      	cmp	r3, #79	; 0x4f
 8010bb4:	d902      	bls.n	8010bbc <osSemaphoreNew+0x4c>
        mem = 1;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	61bb      	str	r3, [r7, #24]
 8010bba:	e00c      	b.n	8010bd6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	689b      	ldr	r3, [r3, #8]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d108      	bne.n	8010bd6 <osSemaphoreNew+0x66>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d104      	bne.n	8010bd6 <osSemaphoreNew+0x66>
          mem = 0;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	61bb      	str	r3, [r7, #24]
 8010bd0:	e001      	b.n	8010bd6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8010bd6:	69bb      	ldr	r3, [r7, #24]
 8010bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bdc:	d04c      	beq.n	8010c78 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d128      	bne.n	8010c36 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8010be4:	69bb      	ldr	r3, [r7, #24]
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d10a      	bne.n	8010c00 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	689b      	ldr	r3, [r3, #8]
 8010bee:	2203      	movs	r2, #3
 8010bf0:	9200      	str	r2, [sp, #0]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	2001      	movs	r0, #1
 8010bf8:	f000 fa4e 	bl	8011098 <xQueueGenericCreateStatic>
 8010bfc:	61f8      	str	r0, [r7, #28]
 8010bfe:	e005      	b.n	8010c0c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010c00:	2203      	movs	r2, #3
 8010c02:	2100      	movs	r1, #0
 8010c04:	2001      	movs	r0, #1
 8010c06:	f000 fabf 	bl	8011188 <xQueueGenericCreate>
 8010c0a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010c0c:	69fb      	ldr	r3, [r7, #28]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d022      	beq.n	8010c58 <osSemaphoreNew+0xe8>
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d01f      	beq.n	8010c58 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010c18:	2300      	movs	r3, #0
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	2100      	movs	r1, #0
 8010c1e:	69f8      	ldr	r0, [r7, #28]
 8010c20:	f000 fb7a 	bl	8011318 <xQueueGenericSend>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d016      	beq.n	8010c58 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010c2a:	69f8      	ldr	r0, [r7, #28]
 8010c2c:	f001 f806 	bl	8011c3c <vQueueDelete>
            hSemaphore = NULL;
 8010c30:	2300      	movs	r3, #0
 8010c32:	61fb      	str	r3, [r7, #28]
 8010c34:	e010      	b.n	8010c58 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010c36:	69bb      	ldr	r3, [r7, #24]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d108      	bne.n	8010c4e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	689b      	ldr	r3, [r3, #8]
 8010c40:	461a      	mov	r2, r3
 8010c42:	68b9      	ldr	r1, [r7, #8]
 8010c44:	68f8      	ldr	r0, [r7, #12]
 8010c46:	f000 fafc 	bl	8011242 <xQueueCreateCountingSemaphoreStatic>
 8010c4a:	61f8      	str	r0, [r7, #28]
 8010c4c:	e004      	b.n	8010c58 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010c4e:	68b9      	ldr	r1, [r7, #8]
 8010c50:	68f8      	ldr	r0, [r7, #12]
 8010c52:	f000 fb2d 	bl	80112b0 <xQueueCreateCountingSemaphore>
 8010c56:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d00c      	beq.n	8010c78 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d003      	beq.n	8010c6c <osSemaphoreNew+0xfc>
          name = attr->name;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	617b      	str	r3, [r7, #20]
 8010c6a:	e001      	b.n	8010c70 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010c70:	6979      	ldr	r1, [r7, #20]
 8010c72:	69f8      	ldr	r0, [r7, #28]
 8010c74:	f001 f92e 	bl	8011ed4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010c78:	69fb      	ldr	r3, [r7, #28]
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3720      	adds	r7, #32
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
	...

08010c84 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b086      	sub	sp, #24
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010c92:	2300      	movs	r3, #0
 8010c94:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d103      	bne.n	8010ca4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010c9c:	f06f 0303 	mvn.w	r3, #3
 8010ca0:	617b      	str	r3, [r7, #20]
 8010ca2:	e039      	b.n	8010d18 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ca4:	f3ef 8305 	mrs	r3, IPSR
 8010ca8:	60fb      	str	r3, [r7, #12]
  return(result);
 8010caa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d022      	beq.n	8010cf6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d003      	beq.n	8010cbe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8010cb6:	f06f 0303 	mvn.w	r3, #3
 8010cba:	617b      	str	r3, [r7, #20]
 8010cbc:	e02c      	b.n	8010d18 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010cc2:	f107 0308 	add.w	r3, r7, #8
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	2100      	movs	r1, #0
 8010cca:	6938      	ldr	r0, [r7, #16]
 8010ccc:	f000 ff36 	bl	8011b3c <xQueueReceiveFromISR>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	d003      	beq.n	8010cde <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8010cd6:	f06f 0302 	mvn.w	r3, #2
 8010cda:	617b      	str	r3, [r7, #20]
 8010cdc:	e01c      	b.n	8010d18 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d019      	beq.n	8010d18 <osSemaphoreAcquire+0x94>
 8010ce4:	4b0f      	ldr	r3, [pc, #60]	; (8010d24 <osSemaphoreAcquire+0xa0>)
 8010ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cea:	601a      	str	r2, [r3, #0]
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	f3bf 8f6f 	isb	sy
 8010cf4:	e010      	b.n	8010d18 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010cf6:	6839      	ldr	r1, [r7, #0]
 8010cf8:	6938      	ldr	r0, [r7, #16]
 8010cfa:	f000 fe13 	bl	8011924 <xQueueSemaphoreTake>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d009      	beq.n	8010d18 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d003      	beq.n	8010d12 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8010d0a:	f06f 0301 	mvn.w	r3, #1
 8010d0e:	617b      	str	r3, [r7, #20]
 8010d10:	e002      	b.n	8010d18 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8010d12:	f06f 0302 	mvn.w	r3, #2
 8010d16:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8010d18:	697b      	ldr	r3, [r7, #20]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3718      	adds	r7, #24
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	e000ed04 	.word	0xe000ed04

08010d28 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b086      	sub	sp, #24
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010d34:	2300      	movs	r3, #0
 8010d36:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d103      	bne.n	8010d46 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010d3e:	f06f 0303 	mvn.w	r3, #3
 8010d42:	617b      	str	r3, [r7, #20]
 8010d44:	e02c      	b.n	8010da0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d46:	f3ef 8305 	mrs	r3, IPSR
 8010d4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d01a      	beq.n	8010d88 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8010d52:	2300      	movs	r3, #0
 8010d54:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010d56:	f107 0308 	add.w	r3, r7, #8
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	6938      	ldr	r0, [r7, #16]
 8010d5e:	f000 fc74 	bl	801164a <xQueueGiveFromISR>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	d003      	beq.n	8010d70 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8010d68:	f06f 0302 	mvn.w	r3, #2
 8010d6c:	617b      	str	r3, [r7, #20]
 8010d6e:	e017      	b.n	8010da0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d014      	beq.n	8010da0 <osSemaphoreRelease+0x78>
 8010d76:	4b0d      	ldr	r3, [pc, #52]	; (8010dac <osSemaphoreRelease+0x84>)
 8010d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d7c:	601a      	str	r2, [r3, #0]
 8010d7e:	f3bf 8f4f 	dsb	sy
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	e00b      	b.n	8010da0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010d88:	2300      	movs	r3, #0
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	2100      	movs	r1, #0
 8010d8e:	6938      	ldr	r0, [r7, #16]
 8010d90:	f000 fac2 	bl	8011318 <xQueueGenericSend>
 8010d94:	4603      	mov	r3, r0
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d002      	beq.n	8010da0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8010d9a:	f06f 0302 	mvn.w	r3, #2
 8010d9e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8010da0:	697b      	ldr	r3, [r7, #20]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3718      	adds	r7, #24
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	e000ed04 	.word	0xe000ed04

08010db0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b086      	sub	sp, #24
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dbc:	f3ef 8305 	mrs	r3, IPSR
 8010dc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d003      	beq.n	8010dd0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8010dc8:	f06f 0305 	mvn.w	r3, #5
 8010dcc:	617b      	str	r3, [r7, #20]
 8010dce:	e00e      	b.n	8010dee <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d103      	bne.n	8010dde <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8010dd6:	f06f 0303 	mvn.w	r3, #3
 8010dda:	617b      	str	r3, [r7, #20]
 8010ddc:	e007      	b.n	8010dee <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8010dde:	6938      	ldr	r0, [r7, #16]
 8010de0:	f001 f8a2 	bl	8011f28 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8010de4:	2300      	movs	r3, #0
 8010de6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8010de8:	6938      	ldr	r0, [r7, #16]
 8010dea:	f000 ff27 	bl	8011c3c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8010dee:	697b      	ldr	r3, [r7, #20]
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3718      	adds	r7, #24
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010df8:	b480      	push	{r7}
 8010dfa:	b085      	sub	sp, #20
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	60f8      	str	r0, [r7, #12]
 8010e00:	60b9      	str	r1, [r7, #8]
 8010e02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	4a07      	ldr	r2, [pc, #28]	; (8010e24 <vApplicationGetIdleTaskMemory+0x2c>)
 8010e08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	4a06      	ldr	r2, [pc, #24]	; (8010e28 <vApplicationGetIdleTaskMemory+0x30>)
 8010e0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2280      	movs	r2, #128	; 0x80
 8010e14:	601a      	str	r2, [r3, #0]
}
 8010e16:	bf00      	nop
 8010e18:	3714      	adds	r7, #20
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop
 8010e24:	200006a4 	.word	0x200006a4
 8010e28:	20000760 	.word	0x20000760

08010e2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010e2c:	b480      	push	{r7}
 8010e2e:	b085      	sub	sp, #20
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	4a07      	ldr	r2, [pc, #28]	; (8010e58 <vApplicationGetTimerTaskMemory+0x2c>)
 8010e3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	4a06      	ldr	r2, [pc, #24]	; (8010e5c <vApplicationGetTimerTaskMemory+0x30>)
 8010e42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010e4a:	601a      	str	r2, [r3, #0]
}
 8010e4c:	bf00      	nop
 8010e4e:	3714      	adds	r7, #20
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr
 8010e58:	20000960 	.word	0x20000960
 8010e5c:	20000a1c 	.word	0x20000a1c

08010e60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f103 0208 	add.w	r2, r3, #8
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f04f 32ff 	mov.w	r2, #4294967295
 8010e78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f103 0208 	add.w	r2, r3, #8
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f103 0208 	add.w	r2, r3, #8
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2200      	movs	r2, #0
 8010e92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010e94:	bf00      	nop
 8010e96:	370c      	adds	r7, #12
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010eae:	bf00      	nop
 8010eb0:	370c      	adds	r7, #12
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr

08010eba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010eba:	b480      	push	{r7}
 8010ebc:	b085      	sub	sp, #20
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
 8010ec2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	689a      	ldr	r2, [r3, #8]
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	689b      	ldr	r3, [r3, #8]
 8010edc:	683a      	ldr	r2, [r7, #0]
 8010ede:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	683a      	ldr	r2, [r7, #0]
 8010ee4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	1c5a      	adds	r2, r3, #1
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	601a      	str	r2, [r3, #0]
}
 8010ef6:	bf00      	nop
 8010ef8:	3714      	adds	r7, #20
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010f02:	b480      	push	{r7}
 8010f04:	b085      	sub	sp, #20
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
 8010f0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f18:	d103      	bne.n	8010f22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	691b      	ldr	r3, [r3, #16]
 8010f1e:	60fb      	str	r3, [r7, #12]
 8010f20:	e00c      	b.n	8010f3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	3308      	adds	r3, #8
 8010f26:	60fb      	str	r3, [r7, #12]
 8010f28:	e002      	b.n	8010f30 <vListInsert+0x2e>
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	60fb      	str	r3, [r7, #12]
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	68ba      	ldr	r2, [r7, #8]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d2f6      	bcs.n	8010f2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	685a      	ldr	r2, [r3, #4]
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	683a      	ldr	r2, [r7, #0]
 8010f4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	68fa      	ldr	r2, [r7, #12]
 8010f50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	683a      	ldr	r2, [r7, #0]
 8010f56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	687a      	ldr	r2, [r7, #4]
 8010f5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	1c5a      	adds	r2, r3, #1
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	601a      	str	r2, [r3, #0]
}
 8010f68:	bf00      	nop
 8010f6a:	3714      	adds	r7, #20
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr

08010f74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010f74:	b480      	push	{r7}
 8010f76:	b085      	sub	sp, #20
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	691b      	ldr	r3, [r3, #16]
 8010f80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	6892      	ldr	r2, [r2, #8]
 8010f8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	689b      	ldr	r3, [r3, #8]
 8010f90:	687a      	ldr	r2, [r7, #4]
 8010f92:	6852      	ldr	r2, [r2, #4]
 8010f94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	687a      	ldr	r2, [r7, #4]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d103      	bne.n	8010fa8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	689a      	ldr	r2, [r3, #8]
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2200      	movs	r2, #0
 8010fac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	1e5a      	subs	r2, r3, #1
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	681b      	ldr	r3, [r3, #0]
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3714      	adds	r7, #20
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d10a      	bne.n	8010ff2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe0:	f383 8811 	msr	BASEPRI, r3
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	f3bf 8f4f 	dsb	sy
 8010fec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010fee:	bf00      	nop
 8010ff0:	e7fe      	b.n	8010ff0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010ff2:	f002 fe0f 	bl	8013c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ffe:	68f9      	ldr	r1, [r7, #12]
 8011000:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011002:	fb01 f303 	mul.w	r3, r1, r3
 8011006:	441a      	add	r2, r3
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2200      	movs	r2, #0
 8011010:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681a      	ldr	r2, [r3, #0]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	681a      	ldr	r2, [r3, #0]
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011022:	3b01      	subs	r3, #1
 8011024:	68f9      	ldr	r1, [r7, #12]
 8011026:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011028:	fb01 f303 	mul.w	r3, r1, r3
 801102c:	441a      	add	r2, r3
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	22ff      	movs	r2, #255	; 0xff
 8011036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	22ff      	movs	r2, #255	; 0xff
 801103e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d114      	bne.n	8011072 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	691b      	ldr	r3, [r3, #16]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d01a      	beq.n	8011086 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	3310      	adds	r3, #16
 8011054:	4618      	mov	r0, r3
 8011056:	f001 fdb3 	bl	8012bc0 <xTaskRemoveFromEventList>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d012      	beq.n	8011086 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011060:	4b0c      	ldr	r3, [pc, #48]	; (8011094 <xQueueGenericReset+0xcc>)
 8011062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011066:	601a      	str	r2, [r3, #0]
 8011068:	f3bf 8f4f 	dsb	sy
 801106c:	f3bf 8f6f 	isb	sy
 8011070:	e009      	b.n	8011086 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	3310      	adds	r3, #16
 8011076:	4618      	mov	r0, r3
 8011078:	f7ff fef2 	bl	8010e60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	3324      	adds	r3, #36	; 0x24
 8011080:	4618      	mov	r0, r3
 8011082:	f7ff feed 	bl	8010e60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011086:	f002 fdf5 	bl	8013c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801108a:	2301      	movs	r3, #1
}
 801108c:	4618      	mov	r0, r3
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	e000ed04 	.word	0xe000ed04

08011098 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011098:	b580      	push	{r7, lr}
 801109a:	b08e      	sub	sp, #56	; 0x38
 801109c:	af02      	add	r7, sp, #8
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	60b9      	str	r1, [r7, #8]
 80110a2:	607a      	str	r2, [r7, #4]
 80110a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d10a      	bne.n	80110c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80110ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b0:	f383 8811 	msr	BASEPRI, r3
 80110b4:	f3bf 8f6f 	isb	sy
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80110be:	bf00      	nop
 80110c0:	e7fe      	b.n	80110c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d10a      	bne.n	80110de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80110c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110cc:	f383 8811 	msr	BASEPRI, r3
 80110d0:	f3bf 8f6f 	isb	sy
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80110da:	bf00      	nop
 80110dc:	e7fe      	b.n	80110dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d002      	beq.n	80110ea <xQueueGenericCreateStatic+0x52>
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d001      	beq.n	80110ee <xQueueGenericCreateStatic+0x56>
 80110ea:	2301      	movs	r3, #1
 80110ec:	e000      	b.n	80110f0 <xQueueGenericCreateStatic+0x58>
 80110ee:	2300      	movs	r3, #0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d10a      	bne.n	801110a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80110f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f8:	f383 8811 	msr	BASEPRI, r3
 80110fc:	f3bf 8f6f 	isb	sy
 8011100:	f3bf 8f4f 	dsb	sy
 8011104:	623b      	str	r3, [r7, #32]
}
 8011106:	bf00      	nop
 8011108:	e7fe      	b.n	8011108 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d102      	bne.n	8011116 <xQueueGenericCreateStatic+0x7e>
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d101      	bne.n	801111a <xQueueGenericCreateStatic+0x82>
 8011116:	2301      	movs	r3, #1
 8011118:	e000      	b.n	801111c <xQueueGenericCreateStatic+0x84>
 801111a:	2300      	movs	r3, #0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10a      	bne.n	8011136 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011124:	f383 8811 	msr	BASEPRI, r3
 8011128:	f3bf 8f6f 	isb	sy
 801112c:	f3bf 8f4f 	dsb	sy
 8011130:	61fb      	str	r3, [r7, #28]
}
 8011132:	bf00      	nop
 8011134:	e7fe      	b.n	8011134 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011136:	2350      	movs	r3, #80	; 0x50
 8011138:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	2b50      	cmp	r3, #80	; 0x50
 801113e:	d00a      	beq.n	8011156 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011144:	f383 8811 	msr	BASEPRI, r3
 8011148:	f3bf 8f6f 	isb	sy
 801114c:	f3bf 8f4f 	dsb	sy
 8011150:	61bb      	str	r3, [r7, #24]
}
 8011152:	bf00      	nop
 8011154:	e7fe      	b.n	8011154 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011156:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115e:	2b00      	cmp	r3, #0
 8011160:	d00d      	beq.n	801117e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011164:	2201      	movs	r2, #1
 8011166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801116a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011170:	9300      	str	r3, [sp, #0]
 8011172:	4613      	mov	r3, r2
 8011174:	687a      	ldr	r2, [r7, #4]
 8011176:	68b9      	ldr	r1, [r7, #8]
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f000 f83f 	bl	80111fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011180:	4618      	mov	r0, r3
 8011182:	3730      	adds	r7, #48	; 0x30
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011188:	b580      	push	{r7, lr}
 801118a:	b08a      	sub	sp, #40	; 0x28
 801118c:	af02      	add	r7, sp, #8
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	4613      	mov	r3, r2
 8011194:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d10a      	bne.n	80111b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 801119c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a0:	f383 8811 	msr	BASEPRI, r3
 80111a4:	f3bf 8f6f 	isb	sy
 80111a8:	f3bf 8f4f 	dsb	sy
 80111ac:	613b      	str	r3, [r7, #16]
}
 80111ae:	bf00      	nop
 80111b0:	e7fe      	b.n	80111b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	68ba      	ldr	r2, [r7, #8]
 80111b6:	fb02 f303 	mul.w	r3, r2, r3
 80111ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80111bc:	69fb      	ldr	r3, [r7, #28]
 80111be:	3350      	adds	r3, #80	; 0x50
 80111c0:	4618      	mov	r0, r3
 80111c2:	f002 fe49 	bl	8013e58 <pvPortMalloc>
 80111c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80111c8:	69bb      	ldr	r3, [r7, #24]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d011      	beq.n	80111f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80111ce:	69bb      	ldr	r3, [r7, #24]
 80111d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	3350      	adds	r3, #80	; 0x50
 80111d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80111d8:	69bb      	ldr	r3, [r7, #24]
 80111da:	2200      	movs	r2, #0
 80111dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80111e0:	79fa      	ldrb	r2, [r7, #7]
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	9300      	str	r3, [sp, #0]
 80111e6:	4613      	mov	r3, r2
 80111e8:	697a      	ldr	r2, [r7, #20]
 80111ea:	68b9      	ldr	r1, [r7, #8]
 80111ec:	68f8      	ldr	r0, [r7, #12]
 80111ee:	f000 f805 	bl	80111fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80111f2:	69bb      	ldr	r3, [r7, #24]
	}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3720      	adds	r7, #32
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	60b9      	str	r1, [r7, #8]
 8011206:	607a      	str	r2, [r7, #4]
 8011208:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d103      	bne.n	8011218 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	69ba      	ldr	r2, [r7, #24]
 8011214:	601a      	str	r2, [r3, #0]
 8011216:	e002      	b.n	801121e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	687a      	ldr	r2, [r7, #4]
 801121c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801121e:	69bb      	ldr	r3, [r7, #24]
 8011220:	68fa      	ldr	r2, [r7, #12]
 8011222:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	68ba      	ldr	r2, [r7, #8]
 8011228:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801122a:	2101      	movs	r1, #1
 801122c:	69b8      	ldr	r0, [r7, #24]
 801122e:	f7ff fecb 	bl	8010fc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011232:	69bb      	ldr	r3, [r7, #24]
 8011234:	78fa      	ldrb	r2, [r7, #3]
 8011236:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801123a:	bf00      	nop
 801123c:	3710      	adds	r7, #16
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011242:	b580      	push	{r7, lr}
 8011244:	b08a      	sub	sp, #40	; 0x28
 8011246:	af02      	add	r7, sp, #8
 8011248:	60f8      	str	r0, [r7, #12]
 801124a:	60b9      	str	r1, [r7, #8]
 801124c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d10a      	bne.n	801126a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8011254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011258:	f383 8811 	msr	BASEPRI, r3
 801125c:	f3bf 8f6f 	isb	sy
 8011260:	f3bf 8f4f 	dsb	sy
 8011264:	61bb      	str	r3, [r7, #24]
}
 8011266:	bf00      	nop
 8011268:	e7fe      	b.n	8011268 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801126a:	68ba      	ldr	r2, [r7, #8]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	429a      	cmp	r2, r3
 8011270:	d90a      	bls.n	8011288 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8011272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011276:	f383 8811 	msr	BASEPRI, r3
 801127a:	f3bf 8f6f 	isb	sy
 801127e:	f3bf 8f4f 	dsb	sy
 8011282:	617b      	str	r3, [r7, #20]
}
 8011284:	bf00      	nop
 8011286:	e7fe      	b.n	8011286 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011288:	2302      	movs	r3, #2
 801128a:	9300      	str	r3, [sp, #0]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2200      	movs	r2, #0
 8011290:	2100      	movs	r1, #0
 8011292:	68f8      	ldr	r0, [r7, #12]
 8011294:	f7ff ff00 	bl	8011098 <xQueueGenericCreateStatic>
 8011298:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801129a:	69fb      	ldr	r3, [r7, #28]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d002      	beq.n	80112a6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	68ba      	ldr	r2, [r7, #8]
 80112a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80112a6:	69fb      	ldr	r3, [r7, #28]
	}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3720      	adds	r7, #32
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b086      	sub	sp, #24
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d10a      	bne.n	80112d6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80112c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c4:	f383 8811 	msr	BASEPRI, r3
 80112c8:	f3bf 8f6f 	isb	sy
 80112cc:	f3bf 8f4f 	dsb	sy
 80112d0:	613b      	str	r3, [r7, #16]
}
 80112d2:	bf00      	nop
 80112d4:	e7fe      	b.n	80112d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80112d6:	683a      	ldr	r2, [r7, #0]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d90a      	bls.n	80112f4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80112de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e2:	f383 8811 	msr	BASEPRI, r3
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	60fb      	str	r3, [r7, #12]
}
 80112f0:	bf00      	nop
 80112f2:	e7fe      	b.n	80112f2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80112f4:	2202      	movs	r2, #2
 80112f6:	2100      	movs	r1, #0
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7ff ff45 	bl	8011188 <xQueueGenericCreate>
 80112fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d002      	beq.n	801130c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	683a      	ldr	r2, [r7, #0]
 801130a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801130c:	697b      	ldr	r3, [r7, #20]
	}
 801130e:	4618      	mov	r0, r3
 8011310:	3718      	adds	r7, #24
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
	...

08011318 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b08e      	sub	sp, #56	; 0x38
 801131c:	af00      	add	r7, sp, #0
 801131e:	60f8      	str	r0, [r7, #12]
 8011320:	60b9      	str	r1, [r7, #8]
 8011322:	607a      	str	r2, [r7, #4]
 8011324:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011326:	2300      	movs	r3, #0
 8011328:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801132e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011330:	2b00      	cmp	r3, #0
 8011332:	d10a      	bne.n	801134a <xQueueGenericSend+0x32>
	__asm volatile
 8011334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011338:	f383 8811 	msr	BASEPRI, r3
 801133c:	f3bf 8f6f 	isb	sy
 8011340:	f3bf 8f4f 	dsb	sy
 8011344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011346:	bf00      	nop
 8011348:	e7fe      	b.n	8011348 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d103      	bne.n	8011358 <xQueueGenericSend+0x40>
 8011350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011354:	2b00      	cmp	r3, #0
 8011356:	d101      	bne.n	801135c <xQueueGenericSend+0x44>
 8011358:	2301      	movs	r3, #1
 801135a:	e000      	b.n	801135e <xQueueGenericSend+0x46>
 801135c:	2300      	movs	r3, #0
 801135e:	2b00      	cmp	r3, #0
 8011360:	d10a      	bne.n	8011378 <xQueueGenericSend+0x60>
	__asm volatile
 8011362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011366:	f383 8811 	msr	BASEPRI, r3
 801136a:	f3bf 8f6f 	isb	sy
 801136e:	f3bf 8f4f 	dsb	sy
 8011372:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011374:	bf00      	nop
 8011376:	e7fe      	b.n	8011376 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	2b02      	cmp	r3, #2
 801137c:	d103      	bne.n	8011386 <xQueueGenericSend+0x6e>
 801137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011382:	2b01      	cmp	r3, #1
 8011384:	d101      	bne.n	801138a <xQueueGenericSend+0x72>
 8011386:	2301      	movs	r3, #1
 8011388:	e000      	b.n	801138c <xQueueGenericSend+0x74>
 801138a:	2300      	movs	r3, #0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d10a      	bne.n	80113a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8011390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011394:	f383 8811 	msr	BASEPRI, r3
 8011398:	f3bf 8f6f 	isb	sy
 801139c:	f3bf 8f4f 	dsb	sy
 80113a0:	623b      	str	r3, [r7, #32]
}
 80113a2:	bf00      	nop
 80113a4:	e7fe      	b.n	80113a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80113a6:	f001 fddd 	bl	8012f64 <xTaskGetSchedulerState>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d102      	bne.n	80113b6 <xQueueGenericSend+0x9e>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d101      	bne.n	80113ba <xQueueGenericSend+0xa2>
 80113b6:	2301      	movs	r3, #1
 80113b8:	e000      	b.n	80113bc <xQueueGenericSend+0xa4>
 80113ba:	2300      	movs	r3, #0
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d10a      	bne.n	80113d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80113c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c4:	f383 8811 	msr	BASEPRI, r3
 80113c8:	f3bf 8f6f 	isb	sy
 80113cc:	f3bf 8f4f 	dsb	sy
 80113d0:	61fb      	str	r3, [r7, #28]
}
 80113d2:	bf00      	nop
 80113d4:	e7fe      	b.n	80113d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80113d6:	f002 fc1d 	bl	8013c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80113da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d302      	bcc.n	80113ec <xQueueGenericSend+0xd4>
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	2b02      	cmp	r3, #2
 80113ea:	d129      	bne.n	8011440 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80113ec:	683a      	ldr	r2, [r7, #0]
 80113ee:	68b9      	ldr	r1, [r7, #8]
 80113f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113f2:	f000 fc5e 	bl	8011cb2 <prvCopyDataToQueue>
 80113f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d010      	beq.n	8011422 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011402:	3324      	adds	r3, #36	; 0x24
 8011404:	4618      	mov	r0, r3
 8011406:	f001 fbdb 	bl	8012bc0 <xTaskRemoveFromEventList>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d013      	beq.n	8011438 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011410:	4b3f      	ldr	r3, [pc, #252]	; (8011510 <xQueueGenericSend+0x1f8>)
 8011412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011416:	601a      	str	r2, [r3, #0]
 8011418:	f3bf 8f4f 	dsb	sy
 801141c:	f3bf 8f6f 	isb	sy
 8011420:	e00a      	b.n	8011438 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011424:	2b00      	cmp	r3, #0
 8011426:	d007      	beq.n	8011438 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011428:	4b39      	ldr	r3, [pc, #228]	; (8011510 <xQueueGenericSend+0x1f8>)
 801142a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801142e:	601a      	str	r2, [r3, #0]
 8011430:	f3bf 8f4f 	dsb	sy
 8011434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011438:	f002 fc1c 	bl	8013c74 <vPortExitCritical>
				return pdPASS;
 801143c:	2301      	movs	r3, #1
 801143e:	e063      	b.n	8011508 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d103      	bne.n	801144e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011446:	f002 fc15 	bl	8013c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801144a:	2300      	movs	r3, #0
 801144c:	e05c      	b.n	8011508 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011450:	2b00      	cmp	r3, #0
 8011452:	d106      	bne.n	8011462 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011454:	f107 0314 	add.w	r3, r7, #20
 8011458:	4618      	mov	r0, r3
 801145a:	f001 fc15 	bl	8012c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801145e:	2301      	movs	r3, #1
 8011460:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011462:	f002 fc07 	bl	8013c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011466:	f001 f981 	bl	801276c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801146a:	f002 fbd3 	bl	8013c14 <vPortEnterCritical>
 801146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011474:	b25b      	sxtb	r3, r3
 8011476:	f1b3 3fff 	cmp.w	r3, #4294967295
 801147a:	d103      	bne.n	8011484 <xQueueGenericSend+0x16c>
 801147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147e:	2200      	movs	r2, #0
 8011480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801148a:	b25b      	sxtb	r3, r3
 801148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011490:	d103      	bne.n	801149a <xQueueGenericSend+0x182>
 8011492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011494:	2200      	movs	r2, #0
 8011496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801149a:	f002 fbeb 	bl	8013c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801149e:	1d3a      	adds	r2, r7, #4
 80114a0:	f107 0314 	add.w	r3, r7, #20
 80114a4:	4611      	mov	r1, r2
 80114a6:	4618      	mov	r0, r3
 80114a8:	f001 fc04 	bl	8012cb4 <xTaskCheckForTimeOut>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d124      	bne.n	80114fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80114b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114b4:	f000 fcf5 	bl	8011ea2 <prvIsQueueFull>
 80114b8:	4603      	mov	r3, r0
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d018      	beq.n	80114f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80114be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c0:	3310      	adds	r3, #16
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	4611      	mov	r1, r2
 80114c6:	4618      	mov	r0, r3
 80114c8:	f001 fb2a 	bl	8012b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80114cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114ce:	f000 fc80 	bl	8011dd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80114d2:	f001 f959 	bl	8012788 <xTaskResumeAll>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	f47f af7c 	bne.w	80113d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80114de:	4b0c      	ldr	r3, [pc, #48]	; (8011510 <xQueueGenericSend+0x1f8>)
 80114e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114e4:	601a      	str	r2, [r3, #0]
 80114e6:	f3bf 8f4f 	dsb	sy
 80114ea:	f3bf 8f6f 	isb	sy
 80114ee:	e772      	b.n	80113d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80114f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114f2:	f000 fc6e 	bl	8011dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80114f6:	f001 f947 	bl	8012788 <xTaskResumeAll>
 80114fa:	e76c      	b.n	80113d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80114fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114fe:	f000 fc68 	bl	8011dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011502:	f001 f941 	bl	8012788 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011508:	4618      	mov	r0, r3
 801150a:	3738      	adds	r7, #56	; 0x38
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	e000ed04 	.word	0xe000ed04

08011514 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b090      	sub	sp, #64	; 0x40
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
 8011520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011528:	2b00      	cmp	r3, #0
 801152a:	d10a      	bne.n	8011542 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801152c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011530:	f383 8811 	msr	BASEPRI, r3
 8011534:	f3bf 8f6f 	isb	sy
 8011538:	f3bf 8f4f 	dsb	sy
 801153c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801153e:	bf00      	nop
 8011540:	e7fe      	b.n	8011540 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d103      	bne.n	8011550 <xQueueGenericSendFromISR+0x3c>
 8011548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801154c:	2b00      	cmp	r3, #0
 801154e:	d101      	bne.n	8011554 <xQueueGenericSendFromISR+0x40>
 8011550:	2301      	movs	r3, #1
 8011552:	e000      	b.n	8011556 <xQueueGenericSendFromISR+0x42>
 8011554:	2300      	movs	r3, #0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d10a      	bne.n	8011570 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801155a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801155e:	f383 8811 	msr	BASEPRI, r3
 8011562:	f3bf 8f6f 	isb	sy
 8011566:	f3bf 8f4f 	dsb	sy
 801156a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801156c:	bf00      	nop
 801156e:	e7fe      	b.n	801156e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	2b02      	cmp	r3, #2
 8011574:	d103      	bne.n	801157e <xQueueGenericSendFromISR+0x6a>
 8011576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801157a:	2b01      	cmp	r3, #1
 801157c:	d101      	bne.n	8011582 <xQueueGenericSendFromISR+0x6e>
 801157e:	2301      	movs	r3, #1
 8011580:	e000      	b.n	8011584 <xQueueGenericSendFromISR+0x70>
 8011582:	2300      	movs	r3, #0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d10a      	bne.n	801159e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158c:	f383 8811 	msr	BASEPRI, r3
 8011590:	f3bf 8f6f 	isb	sy
 8011594:	f3bf 8f4f 	dsb	sy
 8011598:	623b      	str	r3, [r7, #32]
}
 801159a:	bf00      	nop
 801159c:	e7fe      	b.n	801159c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801159e:	f002 fc1b 	bl	8013dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80115a2:	f3ef 8211 	mrs	r2, BASEPRI
 80115a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115aa:	f383 8811 	msr	BASEPRI, r3
 80115ae:	f3bf 8f6f 	isb	sy
 80115b2:	f3bf 8f4f 	dsb	sy
 80115b6:	61fa      	str	r2, [r7, #28]
 80115b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80115ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80115bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80115be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d302      	bcc.n	80115d0 <xQueueGenericSendFromISR+0xbc>
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	2b02      	cmp	r3, #2
 80115ce:	d12f      	bne.n	8011630 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80115d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80115da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80115e0:	683a      	ldr	r2, [r7, #0]
 80115e2:	68b9      	ldr	r1, [r7, #8]
 80115e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80115e6:	f000 fb64 	bl	8011cb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80115ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80115ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f2:	d112      	bne.n	801161a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d016      	beq.n	801162a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fe:	3324      	adds	r3, #36	; 0x24
 8011600:	4618      	mov	r0, r3
 8011602:	f001 fadd 	bl	8012bc0 <xTaskRemoveFromEventList>
 8011606:	4603      	mov	r3, r0
 8011608:	2b00      	cmp	r3, #0
 801160a:	d00e      	beq.n	801162a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d00b      	beq.n	801162a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2201      	movs	r2, #1
 8011616:	601a      	str	r2, [r3, #0]
 8011618:	e007      	b.n	801162a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801161a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801161e:	3301      	adds	r3, #1
 8011620:	b2db      	uxtb	r3, r3
 8011622:	b25a      	sxtb	r2, r3
 8011624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801162a:	2301      	movs	r3, #1
 801162c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801162e:	e001      	b.n	8011634 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011630:	2300      	movs	r3, #0
 8011632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011636:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801163e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011642:	4618      	mov	r0, r3
 8011644:	3740      	adds	r7, #64	; 0x40
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801164a:	b580      	push	{r7, lr}
 801164c:	b08e      	sub	sp, #56	; 0x38
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
 8011652:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165a:	2b00      	cmp	r3, #0
 801165c:	d10a      	bne.n	8011674 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801165e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011662:	f383 8811 	msr	BASEPRI, r3
 8011666:	f3bf 8f6f 	isb	sy
 801166a:	f3bf 8f4f 	dsb	sy
 801166e:	623b      	str	r3, [r7, #32]
}
 8011670:	bf00      	nop
 8011672:	e7fe      	b.n	8011672 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00a      	beq.n	8011692 <xQueueGiveFromISR+0x48>
	__asm volatile
 801167c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011680:	f383 8811 	msr	BASEPRI, r3
 8011684:	f3bf 8f6f 	isb	sy
 8011688:	f3bf 8f4f 	dsb	sy
 801168c:	61fb      	str	r3, [r7, #28]
}
 801168e:	bf00      	nop
 8011690:	e7fe      	b.n	8011690 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d103      	bne.n	80116a2 <xQueueGiveFromISR+0x58>
 801169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169c:	689b      	ldr	r3, [r3, #8]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d101      	bne.n	80116a6 <xQueueGiveFromISR+0x5c>
 80116a2:	2301      	movs	r3, #1
 80116a4:	e000      	b.n	80116a8 <xQueueGiveFromISR+0x5e>
 80116a6:	2300      	movs	r3, #0
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d10a      	bne.n	80116c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80116ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b0:	f383 8811 	msr	BASEPRI, r3
 80116b4:	f3bf 8f6f 	isb	sy
 80116b8:	f3bf 8f4f 	dsb	sy
 80116bc:	61bb      	str	r3, [r7, #24]
}
 80116be:	bf00      	nop
 80116c0:	e7fe      	b.n	80116c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80116c2:	f002 fb89 	bl	8013dd8 <vPortValidateInterruptPriority>
	__asm volatile
 80116c6:	f3ef 8211 	mrs	r2, BASEPRI
 80116ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ce:	f383 8811 	msr	BASEPRI, r3
 80116d2:	f3bf 8f6f 	isb	sy
 80116d6:	f3bf 8f4f 	dsb	sy
 80116da:	617a      	str	r2, [r7, #20]
 80116dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80116de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80116e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80116e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80116e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d22b      	bcs.n	801174a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80116f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80116fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116fe:	1c5a      	adds	r2, r3, #1
 8011700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011702:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011704:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801170c:	d112      	bne.n	8011734 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011712:	2b00      	cmp	r3, #0
 8011714:	d016      	beq.n	8011744 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011718:	3324      	adds	r3, #36	; 0x24
 801171a:	4618      	mov	r0, r3
 801171c:	f001 fa50 	bl	8012bc0 <xTaskRemoveFromEventList>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d00e      	beq.n	8011744 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d00b      	beq.n	8011744 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	2201      	movs	r2, #1
 8011730:	601a      	str	r2, [r3, #0]
 8011732:	e007      	b.n	8011744 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011738:	3301      	adds	r3, #1
 801173a:	b2db      	uxtb	r3, r3
 801173c:	b25a      	sxtb	r2, r3
 801173e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011744:	2301      	movs	r3, #1
 8011746:	637b      	str	r3, [r7, #52]	; 0x34
 8011748:	e001      	b.n	801174e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801174a:	2300      	movs	r3, #0
 801174c:	637b      	str	r3, [r7, #52]	; 0x34
 801174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011750:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	f383 8811 	msr	BASEPRI, r3
}
 8011758:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801175a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801175c:	4618      	mov	r0, r3
 801175e:	3738      	adds	r7, #56	; 0x38
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b08c      	sub	sp, #48	; 0x30
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011770:	2300      	movs	r3, #0
 8011772:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801177a:	2b00      	cmp	r3, #0
 801177c:	d10a      	bne.n	8011794 <xQueueReceive+0x30>
	__asm volatile
 801177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011782:	f383 8811 	msr	BASEPRI, r3
 8011786:	f3bf 8f6f 	isb	sy
 801178a:	f3bf 8f4f 	dsb	sy
 801178e:	623b      	str	r3, [r7, #32]
}
 8011790:	bf00      	nop
 8011792:	e7fe      	b.n	8011792 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d103      	bne.n	80117a2 <xQueueReceive+0x3e>
 801179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d101      	bne.n	80117a6 <xQueueReceive+0x42>
 80117a2:	2301      	movs	r3, #1
 80117a4:	e000      	b.n	80117a8 <xQueueReceive+0x44>
 80117a6:	2300      	movs	r3, #0
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d10a      	bne.n	80117c2 <xQueueReceive+0x5e>
	__asm volatile
 80117ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b0:	f383 8811 	msr	BASEPRI, r3
 80117b4:	f3bf 8f6f 	isb	sy
 80117b8:	f3bf 8f4f 	dsb	sy
 80117bc:	61fb      	str	r3, [r7, #28]
}
 80117be:	bf00      	nop
 80117c0:	e7fe      	b.n	80117c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80117c2:	f001 fbcf 	bl	8012f64 <xTaskGetSchedulerState>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d102      	bne.n	80117d2 <xQueueReceive+0x6e>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d101      	bne.n	80117d6 <xQueueReceive+0x72>
 80117d2:	2301      	movs	r3, #1
 80117d4:	e000      	b.n	80117d8 <xQueueReceive+0x74>
 80117d6:	2300      	movs	r3, #0
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d10a      	bne.n	80117f2 <xQueueReceive+0x8e>
	__asm volatile
 80117dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e0:	f383 8811 	msr	BASEPRI, r3
 80117e4:	f3bf 8f6f 	isb	sy
 80117e8:	f3bf 8f4f 	dsb	sy
 80117ec:	61bb      	str	r3, [r7, #24]
}
 80117ee:	bf00      	nop
 80117f0:	e7fe      	b.n	80117f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80117f2:	f002 fa0f 	bl	8013c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80117fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d01f      	beq.n	8011842 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011802:	68b9      	ldr	r1, [r7, #8]
 8011804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011806:	f000 fabe 	bl	8011d86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180c:	1e5a      	subs	r2, r3, #1
 801180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011810:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011814:	691b      	ldr	r3, [r3, #16]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d00f      	beq.n	801183a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801181c:	3310      	adds	r3, #16
 801181e:	4618      	mov	r0, r3
 8011820:	f001 f9ce 	bl	8012bc0 <xTaskRemoveFromEventList>
 8011824:	4603      	mov	r3, r0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d007      	beq.n	801183a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801182a:	4b3d      	ldr	r3, [pc, #244]	; (8011920 <xQueueReceive+0x1bc>)
 801182c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011830:	601a      	str	r2, [r3, #0]
 8011832:	f3bf 8f4f 	dsb	sy
 8011836:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801183a:	f002 fa1b 	bl	8013c74 <vPortExitCritical>
				return pdPASS;
 801183e:	2301      	movs	r3, #1
 8011840:	e069      	b.n	8011916 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d103      	bne.n	8011850 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011848:	f002 fa14 	bl	8013c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801184c:	2300      	movs	r3, #0
 801184e:	e062      	b.n	8011916 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011852:	2b00      	cmp	r3, #0
 8011854:	d106      	bne.n	8011864 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011856:	f107 0310 	add.w	r3, r7, #16
 801185a:	4618      	mov	r0, r3
 801185c:	f001 fa14 	bl	8012c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011860:	2301      	movs	r3, #1
 8011862:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011864:	f002 fa06 	bl	8013c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011868:	f000 ff80 	bl	801276c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801186c:	f002 f9d2 	bl	8013c14 <vPortEnterCritical>
 8011870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011876:	b25b      	sxtb	r3, r3
 8011878:	f1b3 3fff 	cmp.w	r3, #4294967295
 801187c:	d103      	bne.n	8011886 <xQueueReceive+0x122>
 801187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011880:	2200      	movs	r2, #0
 8011882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801188c:	b25b      	sxtb	r3, r3
 801188e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011892:	d103      	bne.n	801189c <xQueueReceive+0x138>
 8011894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011896:	2200      	movs	r2, #0
 8011898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801189c:	f002 f9ea 	bl	8013c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80118a0:	1d3a      	adds	r2, r7, #4
 80118a2:	f107 0310 	add.w	r3, r7, #16
 80118a6:	4611      	mov	r1, r2
 80118a8:	4618      	mov	r0, r3
 80118aa:	f001 fa03 	bl	8012cb4 <xTaskCheckForTimeOut>
 80118ae:	4603      	mov	r3, r0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d123      	bne.n	80118fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80118b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118b6:	f000 fade 	bl	8011e76 <prvIsQueueEmpty>
 80118ba:	4603      	mov	r3, r0
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d017      	beq.n	80118f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80118c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c2:	3324      	adds	r3, #36	; 0x24
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	4611      	mov	r1, r2
 80118c8:	4618      	mov	r0, r3
 80118ca:	f001 f929 	bl	8012b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80118ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118d0:	f000 fa7f 	bl	8011dd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80118d4:	f000 ff58 	bl	8012788 <xTaskResumeAll>
 80118d8:	4603      	mov	r3, r0
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d189      	bne.n	80117f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80118de:	4b10      	ldr	r3, [pc, #64]	; (8011920 <xQueueReceive+0x1bc>)
 80118e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118e4:	601a      	str	r2, [r3, #0]
 80118e6:	f3bf 8f4f 	dsb	sy
 80118ea:	f3bf 8f6f 	isb	sy
 80118ee:	e780      	b.n	80117f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80118f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118f2:	f000 fa6e 	bl	8011dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80118f6:	f000 ff47 	bl	8012788 <xTaskResumeAll>
 80118fa:	e77a      	b.n	80117f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80118fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118fe:	f000 fa68 	bl	8011dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011902:	f000 ff41 	bl	8012788 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011908:	f000 fab5 	bl	8011e76 <prvIsQueueEmpty>
 801190c:	4603      	mov	r3, r0
 801190e:	2b00      	cmp	r3, #0
 8011910:	f43f af6f 	beq.w	80117f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011914:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011916:	4618      	mov	r0, r3
 8011918:	3730      	adds	r7, #48	; 0x30
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	e000ed04 	.word	0xe000ed04

08011924 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b08e      	sub	sp, #56	; 0x38
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801192e:	2300      	movs	r3, #0
 8011930:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011936:	2300      	movs	r3, #0
 8011938:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193c:	2b00      	cmp	r3, #0
 801193e:	d10a      	bne.n	8011956 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011944:	f383 8811 	msr	BASEPRI, r3
 8011948:	f3bf 8f6f 	isb	sy
 801194c:	f3bf 8f4f 	dsb	sy
 8011950:	623b      	str	r3, [r7, #32]
}
 8011952:	bf00      	nop
 8011954:	e7fe      	b.n	8011954 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801195a:	2b00      	cmp	r3, #0
 801195c:	d00a      	beq.n	8011974 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011962:	f383 8811 	msr	BASEPRI, r3
 8011966:	f3bf 8f6f 	isb	sy
 801196a:	f3bf 8f4f 	dsb	sy
 801196e:	61fb      	str	r3, [r7, #28]
}
 8011970:	bf00      	nop
 8011972:	e7fe      	b.n	8011972 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011974:	f001 faf6 	bl	8012f64 <xTaskGetSchedulerState>
 8011978:	4603      	mov	r3, r0
 801197a:	2b00      	cmp	r3, #0
 801197c:	d102      	bne.n	8011984 <xQueueSemaphoreTake+0x60>
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d101      	bne.n	8011988 <xQueueSemaphoreTake+0x64>
 8011984:	2301      	movs	r3, #1
 8011986:	e000      	b.n	801198a <xQueueSemaphoreTake+0x66>
 8011988:	2300      	movs	r3, #0
 801198a:	2b00      	cmp	r3, #0
 801198c:	d10a      	bne.n	80119a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	61bb      	str	r3, [r7, #24]
}
 80119a0:	bf00      	nop
 80119a2:	e7fe      	b.n	80119a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80119a4:	f002 f936 	bl	8013c14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80119a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80119ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d024      	beq.n	80119fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80119b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b6:	1e5a      	subs	r2, r3, #1
 80119b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80119bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d104      	bne.n	80119ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80119c4:	f001 fc44 	bl	8013250 <pvTaskIncrementMutexHeldCount>
 80119c8:	4602      	mov	r2, r0
 80119ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d0:	691b      	ldr	r3, [r3, #16]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d00f      	beq.n	80119f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d8:	3310      	adds	r3, #16
 80119da:	4618      	mov	r0, r3
 80119dc:	f001 f8f0 	bl	8012bc0 <xTaskRemoveFromEventList>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d007      	beq.n	80119f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80119e6:	4b54      	ldr	r3, [pc, #336]	; (8011b38 <xQueueSemaphoreTake+0x214>)
 80119e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119ec:	601a      	str	r2, [r3, #0]
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80119f6:	f002 f93d 	bl	8013c74 <vPortExitCritical>
				return pdPASS;
 80119fa:	2301      	movs	r3, #1
 80119fc:	e097      	b.n	8011b2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d111      	bne.n	8011a28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d00a      	beq.n	8011a20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0e:	f383 8811 	msr	BASEPRI, r3
 8011a12:	f3bf 8f6f 	isb	sy
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	617b      	str	r3, [r7, #20]
}
 8011a1c:	bf00      	nop
 8011a1e:	e7fe      	b.n	8011a1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011a20:	f002 f928 	bl	8013c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011a24:	2300      	movs	r3, #0
 8011a26:	e082      	b.n	8011b2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d106      	bne.n	8011a3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a2e:	f107 030c 	add.w	r3, r7, #12
 8011a32:	4618      	mov	r0, r3
 8011a34:	f001 f928 	bl	8012c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a38:	2301      	movs	r3, #1
 8011a3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a3c:	f002 f91a 	bl	8013c74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a40:	f000 fe94 	bl	801276c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a44:	f002 f8e6 	bl	8013c14 <vPortEnterCritical>
 8011a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a4e:	b25b      	sxtb	r3, r3
 8011a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a54:	d103      	bne.n	8011a5e <xQueueSemaphoreTake+0x13a>
 8011a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a58:	2200      	movs	r2, #0
 8011a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a64:	b25b      	sxtb	r3, r3
 8011a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a6a:	d103      	bne.n	8011a74 <xQueueSemaphoreTake+0x150>
 8011a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6e:	2200      	movs	r2, #0
 8011a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a74:	f002 f8fe 	bl	8013c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a78:	463a      	mov	r2, r7
 8011a7a:	f107 030c 	add.w	r3, r7, #12
 8011a7e:	4611      	mov	r1, r2
 8011a80:	4618      	mov	r0, r3
 8011a82:	f001 f917 	bl	8012cb4 <xTaskCheckForTimeOut>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d132      	bne.n	8011af2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a8e:	f000 f9f2 	bl	8011e76 <prvIsQueueEmpty>
 8011a92:	4603      	mov	r3, r0
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d026      	beq.n	8011ae6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d109      	bne.n	8011ab4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011aa0:	f002 f8b8 	bl	8013c14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa6:	689b      	ldr	r3, [r3, #8]
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f001 fa79 	bl	8012fa0 <xTaskPriorityInherit>
 8011aae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011ab0:	f002 f8e0 	bl	8013c74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab6:	3324      	adds	r3, #36	; 0x24
 8011ab8:	683a      	ldr	r2, [r7, #0]
 8011aba:	4611      	mov	r1, r2
 8011abc:	4618      	mov	r0, r3
 8011abe:	f001 f82f 	bl	8012b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ac4:	f000 f985 	bl	8011dd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011ac8:	f000 fe5e 	bl	8012788 <xTaskResumeAll>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	f47f af68 	bne.w	80119a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011ad4:	4b18      	ldr	r3, [pc, #96]	; (8011b38 <xQueueSemaphoreTake+0x214>)
 8011ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ada:	601a      	str	r2, [r3, #0]
 8011adc:	f3bf 8f4f 	dsb	sy
 8011ae0:	f3bf 8f6f 	isb	sy
 8011ae4:	e75e      	b.n	80119a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ae8:	f000 f973 	bl	8011dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011aec:	f000 fe4c 	bl	8012788 <xTaskResumeAll>
 8011af0:	e758      	b.n	80119a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011af4:	f000 f96d 	bl	8011dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011af8:	f000 fe46 	bl	8012788 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011afe:	f000 f9ba 	bl	8011e76 <prvIsQueueEmpty>
 8011b02:	4603      	mov	r3, r0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	f43f af4d 	beq.w	80119a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d00d      	beq.n	8011b2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011b10:	f002 f880 	bl	8013c14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b16:	f000 f8b4 	bl	8011c82 <prvGetDisinheritPriorityAfterTimeout>
 8011b1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1e:	689b      	ldr	r3, [r3, #8]
 8011b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b22:	4618      	mov	r0, r3
 8011b24:	f001 fb12 	bl	801314c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011b28:	f002 f8a4 	bl	8013c74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011b2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3738      	adds	r7, #56	; 0x38
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	e000ed04 	.word	0xe000ed04

08011b3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b08e      	sub	sp, #56	; 0x38
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	60f8      	str	r0, [r7, #12]
 8011b44:	60b9      	str	r1, [r7, #8]
 8011b46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d10a      	bne.n	8011b68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b56:	f383 8811 	msr	BASEPRI, r3
 8011b5a:	f3bf 8f6f 	isb	sy
 8011b5e:	f3bf 8f4f 	dsb	sy
 8011b62:	623b      	str	r3, [r7, #32]
}
 8011b64:	bf00      	nop
 8011b66:	e7fe      	b.n	8011b66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d103      	bne.n	8011b76 <xQueueReceiveFromISR+0x3a>
 8011b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d101      	bne.n	8011b7a <xQueueReceiveFromISR+0x3e>
 8011b76:	2301      	movs	r3, #1
 8011b78:	e000      	b.n	8011b7c <xQueueReceiveFromISR+0x40>
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d10a      	bne.n	8011b96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b84:	f383 8811 	msr	BASEPRI, r3
 8011b88:	f3bf 8f6f 	isb	sy
 8011b8c:	f3bf 8f4f 	dsb	sy
 8011b90:	61fb      	str	r3, [r7, #28]
}
 8011b92:	bf00      	nop
 8011b94:	e7fe      	b.n	8011b94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b96:	f002 f91f 	bl	8013dd8 <vPortValidateInterruptPriority>
	__asm volatile
 8011b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8011b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ba2:	f383 8811 	msr	BASEPRI, r3
 8011ba6:	f3bf 8f6f 	isb	sy
 8011baa:	f3bf 8f4f 	dsb	sy
 8011bae:	61ba      	str	r2, [r7, #24]
 8011bb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011bb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d02f      	beq.n	8011c22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011bcc:	68b9      	ldr	r1, [r7, #8]
 8011bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bd0:	f000 f8d9 	bl	8011d86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd6:	1e5a      	subs	r2, r3, #1
 8011bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011be4:	d112      	bne.n	8011c0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be8:	691b      	ldr	r3, [r3, #16]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d016      	beq.n	8011c1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf0:	3310      	adds	r3, #16
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f000 ffe4 	bl	8012bc0 <xTaskRemoveFromEventList>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d00e      	beq.n	8011c1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d00b      	beq.n	8011c1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2201      	movs	r2, #1
 8011c08:	601a      	str	r2, [r3, #0]
 8011c0a:	e007      	b.n	8011c1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c10:	3301      	adds	r3, #1
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	b25a      	sxtb	r2, r3
 8011c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8011c20:	e001      	b.n	8011c26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011c22:	2300      	movs	r3, #0
 8011c24:	637b      	str	r3, [r7, #52]	; 0x34
 8011c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	f383 8811 	msr	BASEPRI, r3
}
 8011c30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3738      	adds	r7, #56	; 0x38
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}

08011c3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b084      	sub	sp, #16
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d10a      	bne.n	8011c64 <vQueueDelete+0x28>
	__asm volatile
 8011c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c52:	f383 8811 	msr	BASEPRI, r3
 8011c56:	f3bf 8f6f 	isb	sy
 8011c5a:	f3bf 8f4f 	dsb	sy
 8011c5e:	60bb      	str	r3, [r7, #8]
}
 8011c60:	bf00      	nop
 8011c62:	e7fe      	b.n	8011c62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011c64:	68f8      	ldr	r0, [r7, #12]
 8011c66:	f000 f95f 	bl	8011f28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d102      	bne.n	8011c7a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f002 f9bb 	bl	8013ff0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011c7a:	bf00      	nop
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}

08011c82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011c82:	b480      	push	{r7}
 8011c84:	b085      	sub	sp, #20
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d006      	beq.n	8011ca0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011c9c:	60fb      	str	r3, [r7, #12]
 8011c9e:	e001      	b.n	8011ca4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011ca4:	68fb      	ldr	r3, [r7, #12]
	}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3714      	adds	r7, #20
 8011caa:	46bd      	mov	sp, r7
 8011cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb0:	4770      	bx	lr

08011cb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011cb2:	b580      	push	{r7, lr}
 8011cb4:	b086      	sub	sp, #24
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	60f8      	str	r0, [r7, #12]
 8011cba:	60b9      	str	r1, [r7, #8]
 8011cbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d10d      	bne.n	8011cec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d14d      	bne.n	8011d74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f001 f9c7 	bl	8013070 <xTaskPriorityDisinherit>
 8011ce2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	609a      	str	r2, [r3, #8]
 8011cea:	e043      	b.n	8011d74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d119      	bne.n	8011d26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	6858      	ldr	r0, [r3, #4]
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	68b9      	ldr	r1, [r7, #8]
 8011cfe:	f003 fb95 	bl	801542c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	685a      	ldr	r2, [r3, #4]
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d0a:	441a      	add	r2, r3
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	685a      	ldr	r2, [r3, #4]
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	689b      	ldr	r3, [r3, #8]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d32b      	bcc.n	8011d74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	605a      	str	r2, [r3, #4]
 8011d24:	e026      	b.n	8011d74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	68d8      	ldr	r0, [r3, #12]
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d2e:	461a      	mov	r2, r3
 8011d30:	68b9      	ldr	r1, [r7, #8]
 8011d32:	f003 fb7b 	bl	801542c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	68da      	ldr	r2, [r3, #12]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d3e:	425b      	negs	r3, r3
 8011d40:	441a      	add	r2, r3
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	68da      	ldr	r2, [r3, #12]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d207      	bcs.n	8011d62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	689a      	ldr	r2, [r3, #8]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d5a:	425b      	negs	r3, r3
 8011d5c:	441a      	add	r2, r3
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2b02      	cmp	r3, #2
 8011d66:	d105      	bne.n	8011d74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d002      	beq.n	8011d74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	3b01      	subs	r3, #1
 8011d72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	1c5a      	adds	r2, r3, #1
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011d7c:	697b      	ldr	r3, [r7, #20]
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3718      	adds	r7, #24
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}

08011d86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011d86:	b580      	push	{r7, lr}
 8011d88:	b082      	sub	sp, #8
 8011d8a:	af00      	add	r7, sp, #0
 8011d8c:	6078      	str	r0, [r7, #4]
 8011d8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d018      	beq.n	8011dca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	68da      	ldr	r2, [r3, #12]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011da0:	441a      	add	r2, r3
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	68da      	ldr	r2, [r3, #12]
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	689b      	ldr	r3, [r3, #8]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d303      	bcc.n	8011dba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	68d9      	ldr	r1, [r3, #12]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	6838      	ldr	r0, [r7, #0]
 8011dc6:	f003 fb31 	bl	801542c <memcpy>
	}
}
 8011dca:	bf00      	nop
 8011dcc:	3708      	adds	r7, #8
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}

08011dd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011dd2:	b580      	push	{r7, lr}
 8011dd4:	b084      	sub	sp, #16
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011dda:	f001 ff1b 	bl	8013c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011de4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011de6:	e011      	b.n	8011e0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d012      	beq.n	8011e16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	3324      	adds	r3, #36	; 0x24
 8011df4:	4618      	mov	r0, r3
 8011df6:	f000 fee3 	bl	8012bc0 <xTaskRemoveFromEventList>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d001      	beq.n	8011e04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011e00:	f000 ffba 	bl	8012d78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011e04:	7bfb      	ldrb	r3, [r7, #15]
 8011e06:	3b01      	subs	r3, #1
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	dce9      	bgt.n	8011de8 <prvUnlockQueue+0x16>
 8011e14:	e000      	b.n	8011e18 <prvUnlockQueue+0x46>
					break;
 8011e16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	22ff      	movs	r2, #255	; 0xff
 8011e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011e20:	f001 ff28 	bl	8013c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011e24:	f001 fef6 	bl	8013c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011e30:	e011      	b.n	8011e56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	691b      	ldr	r3, [r3, #16]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d012      	beq.n	8011e60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	3310      	adds	r3, #16
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f000 febe 	bl	8012bc0 <xTaskRemoveFromEventList>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d001      	beq.n	8011e4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011e4a:	f000 ff95 	bl	8012d78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011e4e:	7bbb      	ldrb	r3, [r7, #14]
 8011e50:	3b01      	subs	r3, #1
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	dce9      	bgt.n	8011e32 <prvUnlockQueue+0x60>
 8011e5e:	e000      	b.n	8011e62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011e60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	22ff      	movs	r2, #255	; 0xff
 8011e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011e6a:	f001 ff03 	bl	8013c74 <vPortExitCritical>
}
 8011e6e:	bf00      	nop
 8011e70:	3710      	adds	r7, #16
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b084      	sub	sp, #16
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011e7e:	f001 fec9 	bl	8013c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d102      	bne.n	8011e90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	60fb      	str	r3, [r7, #12]
 8011e8e:	e001      	b.n	8011e94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011e90:	2300      	movs	r3, #0
 8011e92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011e94:	f001 feee 	bl	8013c74 <vPortExitCritical>

	return xReturn;
 8011e98:	68fb      	ldr	r3, [r7, #12]
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3710      	adds	r7, #16
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}

08011ea2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011ea2:	b580      	push	{r7, lr}
 8011ea4:	b084      	sub	sp, #16
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011eaa:	f001 feb3 	bl	8013c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d102      	bne.n	8011ec0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	60fb      	str	r3, [r7, #12]
 8011ebe:	e001      	b.n	8011ec4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011ec4:	f001 fed6 	bl	8013c74 <vPortExitCritical>

	return xReturn;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3710      	adds	r7, #16
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
	...

08011ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b085      	sub	sp, #20
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ede:	2300      	movs	r3, #0
 8011ee0:	60fb      	str	r3, [r7, #12]
 8011ee2:	e014      	b.n	8011f0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011ee4:	4a0f      	ldr	r2, [pc, #60]	; (8011f24 <vQueueAddToRegistry+0x50>)
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10b      	bne.n	8011f08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011ef0:	490c      	ldr	r1, [pc, #48]	; (8011f24 <vQueueAddToRegistry+0x50>)
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	683a      	ldr	r2, [r7, #0]
 8011ef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011efa:	4a0a      	ldr	r2, [pc, #40]	; (8011f24 <vQueueAddToRegistry+0x50>)
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	00db      	lsls	r3, r3, #3
 8011f00:	4413      	add	r3, r2
 8011f02:	687a      	ldr	r2, [r7, #4]
 8011f04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011f06:	e006      	b.n	8011f16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	60fb      	str	r3, [r7, #12]
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	2b07      	cmp	r3, #7
 8011f12:	d9e7      	bls.n	8011ee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011f14:	bf00      	nop
 8011f16:	bf00      	nop
 8011f18:	3714      	adds	r7, #20
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	20007154 	.word	0x20007154

08011f28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011f28:	b480      	push	{r7}
 8011f2a:	b085      	sub	sp, #20
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011f30:	2300      	movs	r3, #0
 8011f32:	60fb      	str	r3, [r7, #12]
 8011f34:	e016      	b.n	8011f64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011f36:	4a10      	ldr	r2, [pc, #64]	; (8011f78 <vQueueUnregisterQueue+0x50>)
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	00db      	lsls	r3, r3, #3
 8011f3c:	4413      	add	r3, r2
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	687a      	ldr	r2, [r7, #4]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d10b      	bne.n	8011f5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011f46:	4a0c      	ldr	r2, [pc, #48]	; (8011f78 <vQueueUnregisterQueue+0x50>)
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011f50:	4a09      	ldr	r2, [pc, #36]	; (8011f78 <vQueueUnregisterQueue+0x50>)
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	00db      	lsls	r3, r3, #3
 8011f56:	4413      	add	r3, r2
 8011f58:	2200      	movs	r2, #0
 8011f5a:	605a      	str	r2, [r3, #4]
				break;
 8011f5c:	e006      	b.n	8011f6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	3301      	adds	r3, #1
 8011f62:	60fb      	str	r3, [r7, #12]
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2b07      	cmp	r3, #7
 8011f68:	d9e5      	bls.n	8011f36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011f6a:	bf00      	nop
 8011f6c:	bf00      	nop
 8011f6e:	3714      	adds	r7, #20
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr
 8011f78:	20007154 	.word	0x20007154

08011f7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b086      	sub	sp, #24
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011f8c:	f001 fe42 	bl	8013c14 <vPortEnterCritical>
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f96:	b25b      	sxtb	r3, r3
 8011f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f9c:	d103      	bne.n	8011fa6 <vQueueWaitForMessageRestricted+0x2a>
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fac:	b25b      	sxtb	r3, r3
 8011fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fb2:	d103      	bne.n	8011fbc <vQueueWaitForMessageRestricted+0x40>
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011fbc:	f001 fe5a 	bl	8013c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d106      	bne.n	8011fd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	3324      	adds	r3, #36	; 0x24
 8011fcc:	687a      	ldr	r2, [r7, #4]
 8011fce:	68b9      	ldr	r1, [r7, #8]
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f000 fdc9 	bl	8012b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011fd6:	6978      	ldr	r0, [r7, #20]
 8011fd8:	f7ff fefb 	bl	8011dd2 <prvUnlockQueue>
	}
 8011fdc:	bf00      	nop
 8011fde:	3718      	adds	r7, #24
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b08e      	sub	sp, #56	; 0x38
 8011fe8:	af04      	add	r7, sp, #16
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]
 8011ff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d10a      	bne.n	801200e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ffc:	f383 8811 	msr	BASEPRI, r3
 8012000:	f3bf 8f6f 	isb	sy
 8012004:	f3bf 8f4f 	dsb	sy
 8012008:	623b      	str	r3, [r7, #32]
}
 801200a:	bf00      	nop
 801200c:	e7fe      	b.n	801200c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801200e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012010:	2b00      	cmp	r3, #0
 8012012:	d10a      	bne.n	801202a <xTaskCreateStatic+0x46>
	__asm volatile
 8012014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012018:	f383 8811 	msr	BASEPRI, r3
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f3bf 8f4f 	dsb	sy
 8012024:	61fb      	str	r3, [r7, #28]
}
 8012026:	bf00      	nop
 8012028:	e7fe      	b.n	8012028 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801202a:	23bc      	movs	r3, #188	; 0xbc
 801202c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	2bbc      	cmp	r3, #188	; 0xbc
 8012032:	d00a      	beq.n	801204a <xTaskCreateStatic+0x66>
	__asm volatile
 8012034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012038:	f383 8811 	msr	BASEPRI, r3
 801203c:	f3bf 8f6f 	isb	sy
 8012040:	f3bf 8f4f 	dsb	sy
 8012044:	61bb      	str	r3, [r7, #24]
}
 8012046:	bf00      	nop
 8012048:	e7fe      	b.n	8012048 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801204a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204e:	2b00      	cmp	r3, #0
 8012050:	d01e      	beq.n	8012090 <xTaskCreateStatic+0xac>
 8012052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012054:	2b00      	cmp	r3, #0
 8012056:	d01b      	beq.n	8012090 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012060:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012064:	2202      	movs	r2, #2
 8012066:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801206a:	2300      	movs	r3, #0
 801206c:	9303      	str	r3, [sp, #12]
 801206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012070:	9302      	str	r3, [sp, #8]
 8012072:	f107 0314 	add.w	r3, r7, #20
 8012076:	9301      	str	r3, [sp, #4]
 8012078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801207a:	9300      	str	r3, [sp, #0]
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	68b9      	ldr	r1, [r7, #8]
 8012082:	68f8      	ldr	r0, [r7, #12]
 8012084:	f000 f850 	bl	8012128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801208a:	f000 f8f3 	bl	8012274 <prvAddNewTaskToReadyList>
 801208e:	e001      	b.n	8012094 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012090:	2300      	movs	r3, #0
 8012092:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012094:	697b      	ldr	r3, [r7, #20]
	}
 8012096:	4618      	mov	r0, r3
 8012098:	3728      	adds	r7, #40	; 0x28
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}

0801209e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801209e:	b580      	push	{r7, lr}
 80120a0:	b08c      	sub	sp, #48	; 0x30
 80120a2:	af04      	add	r7, sp, #16
 80120a4:	60f8      	str	r0, [r7, #12]
 80120a6:	60b9      	str	r1, [r7, #8]
 80120a8:	603b      	str	r3, [r7, #0]
 80120aa:	4613      	mov	r3, r2
 80120ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80120ae:	88fb      	ldrh	r3, [r7, #6]
 80120b0:	009b      	lsls	r3, r3, #2
 80120b2:	4618      	mov	r0, r3
 80120b4:	f001 fed0 	bl	8013e58 <pvPortMalloc>
 80120b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00e      	beq.n	80120de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80120c0:	20bc      	movs	r0, #188	; 0xbc
 80120c2:	f001 fec9 	bl	8013e58 <pvPortMalloc>
 80120c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d003      	beq.n	80120d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80120ce:	69fb      	ldr	r3, [r7, #28]
 80120d0:	697a      	ldr	r2, [r7, #20]
 80120d2:	631a      	str	r2, [r3, #48]	; 0x30
 80120d4:	e005      	b.n	80120e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80120d6:	6978      	ldr	r0, [r7, #20]
 80120d8:	f001 ff8a 	bl	8013ff0 <vPortFree>
 80120dc:	e001      	b.n	80120e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80120de:	2300      	movs	r3, #0
 80120e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80120e2:	69fb      	ldr	r3, [r7, #28]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d017      	beq.n	8012118 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80120e8:	69fb      	ldr	r3, [r7, #28]
 80120ea:	2200      	movs	r2, #0
 80120ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80120f0:	88fa      	ldrh	r2, [r7, #6]
 80120f2:	2300      	movs	r3, #0
 80120f4:	9303      	str	r3, [sp, #12]
 80120f6:	69fb      	ldr	r3, [r7, #28]
 80120f8:	9302      	str	r3, [sp, #8]
 80120fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fc:	9301      	str	r3, [sp, #4]
 80120fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012100:	9300      	str	r3, [sp, #0]
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	68b9      	ldr	r1, [r7, #8]
 8012106:	68f8      	ldr	r0, [r7, #12]
 8012108:	f000 f80e 	bl	8012128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801210c:	69f8      	ldr	r0, [r7, #28]
 801210e:	f000 f8b1 	bl	8012274 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012112:	2301      	movs	r3, #1
 8012114:	61bb      	str	r3, [r7, #24]
 8012116:	e002      	b.n	801211e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012118:	f04f 33ff 	mov.w	r3, #4294967295
 801211c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801211e:	69bb      	ldr	r3, [r7, #24]
	}
 8012120:	4618      	mov	r0, r3
 8012122:	3720      	adds	r7, #32
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b088      	sub	sp, #32
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
 8012134:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012138:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	009b      	lsls	r3, r3, #2
 801213e:	461a      	mov	r2, r3
 8012140:	21a5      	movs	r1, #165	; 0xa5
 8012142:	f003 f99b 	bl	801547c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012150:	3b01      	subs	r3, #1
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	4413      	add	r3, r2
 8012156:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012158:	69bb      	ldr	r3, [r7, #24]
 801215a:	f023 0307 	bic.w	r3, r3, #7
 801215e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012160:	69bb      	ldr	r3, [r7, #24]
 8012162:	f003 0307 	and.w	r3, r3, #7
 8012166:	2b00      	cmp	r3, #0
 8012168:	d00a      	beq.n	8012180 <prvInitialiseNewTask+0x58>
	__asm volatile
 801216a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801216e:	f383 8811 	msr	BASEPRI, r3
 8012172:	f3bf 8f6f 	isb	sy
 8012176:	f3bf 8f4f 	dsb	sy
 801217a:	617b      	str	r3, [r7, #20]
}
 801217c:	bf00      	nop
 801217e:	e7fe      	b.n	801217e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d01f      	beq.n	80121c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012186:	2300      	movs	r3, #0
 8012188:	61fb      	str	r3, [r7, #28]
 801218a:	e012      	b.n	80121b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801218c:	68ba      	ldr	r2, [r7, #8]
 801218e:	69fb      	ldr	r3, [r7, #28]
 8012190:	4413      	add	r3, r2
 8012192:	7819      	ldrb	r1, [r3, #0]
 8012194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012196:	69fb      	ldr	r3, [r7, #28]
 8012198:	4413      	add	r3, r2
 801219a:	3334      	adds	r3, #52	; 0x34
 801219c:	460a      	mov	r2, r1
 801219e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	69fb      	ldr	r3, [r7, #28]
 80121a4:	4413      	add	r3, r2
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d006      	beq.n	80121ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80121ac:	69fb      	ldr	r3, [r7, #28]
 80121ae:	3301      	adds	r3, #1
 80121b0:	61fb      	str	r3, [r7, #28]
 80121b2:	69fb      	ldr	r3, [r7, #28]
 80121b4:	2b0f      	cmp	r3, #15
 80121b6:	d9e9      	bls.n	801218c <prvInitialiseNewTask+0x64>
 80121b8:	e000      	b.n	80121bc <prvInitialiseNewTask+0x94>
			{
				break;
 80121ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80121bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121be:	2200      	movs	r2, #0
 80121c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80121c4:	e003      	b.n	80121ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80121c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c8:	2200      	movs	r2, #0
 80121ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80121ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d0:	2b37      	cmp	r3, #55	; 0x37
 80121d2:	d901      	bls.n	80121d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80121d4:	2337      	movs	r3, #55	; 0x37
 80121d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80121d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80121de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80121e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e6:	2200      	movs	r2, #0
 80121e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80121ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ec:	3304      	adds	r3, #4
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fe fe56 	bl	8010ea0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80121f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f6:	3318      	adds	r3, #24
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fe fe51 	bl	8010ea0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80121fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012202:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801220c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012212:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012216:	2200      	movs	r2, #0
 8012218:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801221e:	2200      	movs	r2, #0
 8012220:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012226:	3354      	adds	r3, #84	; 0x54
 8012228:	2260      	movs	r2, #96	; 0x60
 801222a:	2100      	movs	r1, #0
 801222c:	4618      	mov	r0, r3
 801222e:	f003 f925 	bl	801547c <memset>
 8012232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012234:	4a0c      	ldr	r2, [pc, #48]	; (8012268 <prvInitialiseNewTask+0x140>)
 8012236:	659a      	str	r2, [r3, #88]	; 0x58
 8012238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223a:	4a0c      	ldr	r2, [pc, #48]	; (801226c <prvInitialiseNewTask+0x144>)
 801223c:	65da      	str	r2, [r3, #92]	; 0x5c
 801223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012240:	4a0b      	ldr	r2, [pc, #44]	; (8012270 <prvInitialiseNewTask+0x148>)
 8012242:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012244:	683a      	ldr	r2, [r7, #0]
 8012246:	68f9      	ldr	r1, [r7, #12]
 8012248:	69b8      	ldr	r0, [r7, #24]
 801224a:	f001 fbb7 	bl	80139bc <pxPortInitialiseStack>
 801224e:	4602      	mov	r2, r0
 8012250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012252:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012256:	2b00      	cmp	r3, #0
 8012258:	d002      	beq.n	8012260 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801225c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801225e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012260:	bf00      	nop
 8012262:	3720      	adds	r7, #32
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	0801c524 	.word	0x0801c524
 801226c:	0801c544 	.word	0x0801c544
 8012270:	0801c504 	.word	0x0801c504

08012274 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801227c:	f001 fcca 	bl	8013c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012280:	4b2d      	ldr	r3, [pc, #180]	; (8012338 <prvAddNewTaskToReadyList+0xc4>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	3301      	adds	r3, #1
 8012286:	4a2c      	ldr	r2, [pc, #176]	; (8012338 <prvAddNewTaskToReadyList+0xc4>)
 8012288:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801228a:	4b2c      	ldr	r3, [pc, #176]	; (801233c <prvAddNewTaskToReadyList+0xc8>)
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d109      	bne.n	80122a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012292:	4a2a      	ldr	r2, [pc, #168]	; (801233c <prvAddNewTaskToReadyList+0xc8>)
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012298:	4b27      	ldr	r3, [pc, #156]	; (8012338 <prvAddNewTaskToReadyList+0xc4>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d110      	bne.n	80122c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80122a0:	f000 fd8e 	bl	8012dc0 <prvInitialiseTaskLists>
 80122a4:	e00d      	b.n	80122c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80122a6:	4b26      	ldr	r3, [pc, #152]	; (8012340 <prvAddNewTaskToReadyList+0xcc>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d109      	bne.n	80122c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80122ae:	4b23      	ldr	r3, [pc, #140]	; (801233c <prvAddNewTaskToReadyList+0xc8>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d802      	bhi.n	80122c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80122bc:	4a1f      	ldr	r2, [pc, #124]	; (801233c <prvAddNewTaskToReadyList+0xc8>)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80122c2:	4b20      	ldr	r3, [pc, #128]	; (8012344 <prvAddNewTaskToReadyList+0xd0>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	3301      	adds	r3, #1
 80122c8:	4a1e      	ldr	r2, [pc, #120]	; (8012344 <prvAddNewTaskToReadyList+0xd0>)
 80122ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80122cc:	4b1d      	ldr	r3, [pc, #116]	; (8012344 <prvAddNewTaskToReadyList+0xd0>)
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122d8:	4b1b      	ldr	r3, [pc, #108]	; (8012348 <prvAddNewTaskToReadyList+0xd4>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d903      	bls.n	80122e8 <prvAddNewTaskToReadyList+0x74>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122e4:	4a18      	ldr	r2, [pc, #96]	; (8012348 <prvAddNewTaskToReadyList+0xd4>)
 80122e6:	6013      	str	r3, [r2, #0]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ec:	4613      	mov	r3, r2
 80122ee:	009b      	lsls	r3, r3, #2
 80122f0:	4413      	add	r3, r2
 80122f2:	009b      	lsls	r3, r3, #2
 80122f4:	4a15      	ldr	r2, [pc, #84]	; (801234c <prvAddNewTaskToReadyList+0xd8>)
 80122f6:	441a      	add	r2, r3
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	3304      	adds	r3, #4
 80122fc:	4619      	mov	r1, r3
 80122fe:	4610      	mov	r0, r2
 8012300:	f7fe fddb 	bl	8010eba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012304:	f001 fcb6 	bl	8013c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012308:	4b0d      	ldr	r3, [pc, #52]	; (8012340 <prvAddNewTaskToReadyList+0xcc>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00e      	beq.n	801232e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012310:	4b0a      	ldr	r3, [pc, #40]	; (801233c <prvAddNewTaskToReadyList+0xc8>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231a:	429a      	cmp	r2, r3
 801231c:	d207      	bcs.n	801232e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801231e:	4b0c      	ldr	r3, [pc, #48]	; (8012350 <prvAddNewTaskToReadyList+0xdc>)
 8012320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012324:	601a      	str	r2, [r3, #0]
 8012326:	f3bf 8f4f 	dsb	sy
 801232a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801232e:	bf00      	nop
 8012330:	3708      	adds	r7, #8
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	200012f0 	.word	0x200012f0
 801233c:	20000e1c 	.word	0x20000e1c
 8012340:	200012fc 	.word	0x200012fc
 8012344:	2000130c 	.word	0x2000130c
 8012348:	200012f8 	.word	0x200012f8
 801234c:	20000e20 	.word	0x20000e20
 8012350:	e000ed04 	.word	0xe000ed04

08012354 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801235c:	f001 fc5a 	bl	8013c14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d102      	bne.n	801236c <vTaskDelete+0x18>
 8012366:	4b2c      	ldr	r3, [pc, #176]	; (8012418 <vTaskDelete+0xc4>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	e000      	b.n	801236e <vTaskDelete+0x1a>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	3304      	adds	r3, #4
 8012374:	4618      	mov	r0, r3
 8012376:	f7fe fdfd 	bl	8010f74 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801237e:	2b00      	cmp	r3, #0
 8012380:	d004      	beq.n	801238c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	3318      	adds	r3, #24
 8012386:	4618      	mov	r0, r3
 8012388:	f7fe fdf4 	bl	8010f74 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801238c:	4b23      	ldr	r3, [pc, #140]	; (801241c <vTaskDelete+0xc8>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	3301      	adds	r3, #1
 8012392:	4a22      	ldr	r2, [pc, #136]	; (801241c <vTaskDelete+0xc8>)
 8012394:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8012396:	4b20      	ldr	r3, [pc, #128]	; (8012418 <vTaskDelete+0xc4>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	68fa      	ldr	r2, [r7, #12]
 801239c:	429a      	cmp	r2, r3
 801239e:	d10b      	bne.n	80123b8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	3304      	adds	r3, #4
 80123a4:	4619      	mov	r1, r3
 80123a6:	481e      	ldr	r0, [pc, #120]	; (8012420 <vTaskDelete+0xcc>)
 80123a8:	f7fe fd87 	bl	8010eba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80123ac:	4b1d      	ldr	r3, [pc, #116]	; (8012424 <vTaskDelete+0xd0>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	3301      	adds	r3, #1
 80123b2:	4a1c      	ldr	r2, [pc, #112]	; (8012424 <vTaskDelete+0xd0>)
 80123b4:	6013      	str	r3, [r2, #0]
 80123b6:	e009      	b.n	80123cc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80123b8:	4b1b      	ldr	r3, [pc, #108]	; (8012428 <vTaskDelete+0xd4>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	3b01      	subs	r3, #1
 80123be:	4a1a      	ldr	r2, [pc, #104]	; (8012428 <vTaskDelete+0xd4>)
 80123c0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80123c2:	68f8      	ldr	r0, [r7, #12]
 80123c4:	f000 fd6a 	bl	8012e9c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80123c8:	f000 fd9c 	bl	8012f04 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80123cc:	f001 fc52 	bl	8013c74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80123d0:	4b16      	ldr	r3, [pc, #88]	; (801242c <vTaskDelete+0xd8>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d01b      	beq.n	8012410 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80123d8:	4b0f      	ldr	r3, [pc, #60]	; (8012418 <vTaskDelete+0xc4>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	68fa      	ldr	r2, [r7, #12]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d116      	bne.n	8012410 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80123e2:	4b13      	ldr	r3, [pc, #76]	; (8012430 <vTaskDelete+0xdc>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d00a      	beq.n	8012400 <vTaskDelete+0xac>
	__asm volatile
 80123ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ee:	f383 8811 	msr	BASEPRI, r3
 80123f2:	f3bf 8f6f 	isb	sy
 80123f6:	f3bf 8f4f 	dsb	sy
 80123fa:	60bb      	str	r3, [r7, #8]
}
 80123fc:	bf00      	nop
 80123fe:	e7fe      	b.n	80123fe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8012400:	4b0c      	ldr	r3, [pc, #48]	; (8012434 <vTaskDelete+0xe0>)
 8012402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012406:	601a      	str	r2, [r3, #0]
 8012408:	f3bf 8f4f 	dsb	sy
 801240c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012410:	bf00      	nop
 8012412:	3710      	adds	r7, #16
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}
 8012418:	20000e1c 	.word	0x20000e1c
 801241c:	2000130c 	.word	0x2000130c
 8012420:	200012c4 	.word	0x200012c4
 8012424:	200012d8 	.word	0x200012d8
 8012428:	200012f0 	.word	0x200012f0
 801242c:	200012fc 	.word	0x200012fc
 8012430:	20001318 	.word	0x20001318
 8012434:	e000ed04 	.word	0xe000ed04

08012438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012438:	b580      	push	{r7, lr}
 801243a:	b084      	sub	sp, #16
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012440:	2300      	movs	r3, #0
 8012442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d017      	beq.n	801247a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801244a:	4b13      	ldr	r3, [pc, #76]	; (8012498 <vTaskDelay+0x60>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00a      	beq.n	8012468 <vTaskDelay+0x30>
	__asm volatile
 8012452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012456:	f383 8811 	msr	BASEPRI, r3
 801245a:	f3bf 8f6f 	isb	sy
 801245e:	f3bf 8f4f 	dsb	sy
 8012462:	60bb      	str	r3, [r7, #8]
}
 8012464:	bf00      	nop
 8012466:	e7fe      	b.n	8012466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012468:	f000 f980 	bl	801276c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801246c:	2100      	movs	r1, #0
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 ff02 	bl	8013278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012474:	f000 f988 	bl	8012788 <xTaskResumeAll>
 8012478:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d107      	bne.n	8012490 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012480:	4b06      	ldr	r3, [pc, #24]	; (801249c <vTaskDelay+0x64>)
 8012482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012486:	601a      	str	r2, [r3, #0]
 8012488:	f3bf 8f4f 	dsb	sy
 801248c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012490:	bf00      	nop
 8012492:	3710      	adds	r7, #16
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}
 8012498:	20001318 	.word	0x20001318
 801249c:	e000ed04 	.word	0xe000ed04

080124a0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b088      	sub	sp, #32
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80124ac:	69bb      	ldr	r3, [r7, #24]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d10a      	bne.n	80124c8 <eTaskGetState+0x28>
	__asm volatile
 80124b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b6:	f383 8811 	msr	BASEPRI, r3
 80124ba:	f3bf 8f6f 	isb	sy
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	60bb      	str	r3, [r7, #8]
}
 80124c4:	bf00      	nop
 80124c6:	e7fe      	b.n	80124c6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80124c8:	4b23      	ldr	r3, [pc, #140]	; (8012558 <eTaskGetState+0xb8>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	69ba      	ldr	r2, [r7, #24]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d102      	bne.n	80124d8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80124d2:	2300      	movs	r3, #0
 80124d4:	77fb      	strb	r3, [r7, #31]
 80124d6:	e03a      	b.n	801254e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80124d8:	f001 fb9c 	bl	8013c14 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	695b      	ldr	r3, [r3, #20]
 80124e0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80124e2:	4b1e      	ldr	r3, [pc, #120]	; (801255c <eTaskGetState+0xbc>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80124e8:	4b1d      	ldr	r3, [pc, #116]	; (8012560 <eTaskGetState+0xc0>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80124ee:	f001 fbc1 	bl	8013c74 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80124f2:	697a      	ldr	r2, [r7, #20]
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d003      	beq.n	8012502 <eTaskGetState+0x62>
 80124fa:	697a      	ldr	r2, [r7, #20]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d102      	bne.n	8012508 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8012502:	2302      	movs	r3, #2
 8012504:	77fb      	strb	r3, [r7, #31]
 8012506:	e022      	b.n	801254e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	4a16      	ldr	r2, [pc, #88]	; (8012564 <eTaskGetState+0xc4>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d112      	bne.n	8012536 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012514:	2b00      	cmp	r3, #0
 8012516:	d10b      	bne.n	8012530 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012518:	69bb      	ldr	r3, [r7, #24]
 801251a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801251e:	b2db      	uxtb	r3, r3
 8012520:	2b01      	cmp	r3, #1
 8012522:	d102      	bne.n	801252a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8012524:	2302      	movs	r3, #2
 8012526:	77fb      	strb	r3, [r7, #31]
 8012528:	e011      	b.n	801254e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801252a:	2303      	movs	r3, #3
 801252c:	77fb      	strb	r3, [r7, #31]
 801252e:	e00e      	b.n	801254e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8012530:	2302      	movs	r3, #2
 8012532:	77fb      	strb	r3, [r7, #31]
 8012534:	e00b      	b.n	801254e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	4a0b      	ldr	r2, [pc, #44]	; (8012568 <eTaskGetState+0xc8>)
 801253a:	4293      	cmp	r3, r2
 801253c:	d002      	beq.n	8012544 <eTaskGetState+0xa4>
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d102      	bne.n	801254a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8012544:	2304      	movs	r3, #4
 8012546:	77fb      	strb	r3, [r7, #31]
 8012548:	e001      	b.n	801254e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801254a:	2301      	movs	r3, #1
 801254c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801254e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012550:	4618      	mov	r0, r3
 8012552:	3720      	adds	r7, #32
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	20000e1c 	.word	0x20000e1c
 801255c:	200012a8 	.word	0x200012a8
 8012560:	200012ac 	.word	0x200012ac
 8012564:	200012dc 	.word	0x200012dc
 8012568:	200012c4 	.word	0x200012c4

0801256c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801256c:	b480      	push	{r7}
 801256e:	b087      	sub	sp, #28
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012574:	2300      	movs	r3, #0
 8012576:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d10a      	bne.n	8012598 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8012582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012586:	f383 8811 	msr	BASEPRI, r3
 801258a:	f3bf 8f6f 	isb	sy
 801258e:	f3bf 8f4f 	dsb	sy
 8012592:	60fb      	str	r3, [r7, #12]
}
 8012594:	bf00      	nop
 8012596:	e7fe      	b.n	8012596 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	695b      	ldr	r3, [r3, #20]
 801259c:	4a0a      	ldr	r2, [pc, #40]	; (80125c8 <prvTaskIsTaskSuspended+0x5c>)
 801259e:	4293      	cmp	r3, r2
 80125a0:	d10a      	bne.n	80125b8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125a6:	4a09      	ldr	r2, [pc, #36]	; (80125cc <prvTaskIsTaskSuspended+0x60>)
 80125a8:	4293      	cmp	r3, r2
 80125aa:	d005      	beq.n	80125b8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d101      	bne.n	80125b8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80125b4:	2301      	movs	r3, #1
 80125b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80125b8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80125ba:	4618      	mov	r0, r3
 80125bc:	371c      	adds	r7, #28
 80125be:	46bd      	mov	sp, r7
 80125c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	200012dc 	.word	0x200012dc
 80125cc:	200012b0 	.word	0x200012b0

080125d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d10a      	bne.n	80125f8 <vTaskResume+0x28>
	__asm volatile
 80125e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e6:	f383 8811 	msr	BASEPRI, r3
 80125ea:	f3bf 8f6f 	isb	sy
 80125ee:	f3bf 8f4f 	dsb	sy
 80125f2:	60bb      	str	r3, [r7, #8]
}
 80125f4:	bf00      	nop
 80125f6:	e7fe      	b.n	80125f6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80125f8:	4b20      	ldr	r3, [pc, #128]	; (801267c <vTaskResume+0xac>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	68fa      	ldr	r2, [r7, #12]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d038      	beq.n	8012674 <vTaskResume+0xa4>
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d035      	beq.n	8012674 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8012608:	f001 fb04 	bl	8013c14 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801260c:	68f8      	ldr	r0, [r7, #12]
 801260e:	f7ff ffad 	bl	801256c <prvTaskIsTaskSuspended>
 8012612:	4603      	mov	r3, r0
 8012614:	2b00      	cmp	r3, #0
 8012616:	d02b      	beq.n	8012670 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	3304      	adds	r3, #4
 801261c:	4618      	mov	r0, r3
 801261e:	f7fe fca9 	bl	8010f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012626:	4b16      	ldr	r3, [pc, #88]	; (8012680 <vTaskResume+0xb0>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	429a      	cmp	r2, r3
 801262c:	d903      	bls.n	8012636 <vTaskResume+0x66>
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012632:	4a13      	ldr	r2, [pc, #76]	; (8012680 <vTaskResume+0xb0>)
 8012634:	6013      	str	r3, [r2, #0]
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801263a:	4613      	mov	r3, r2
 801263c:	009b      	lsls	r3, r3, #2
 801263e:	4413      	add	r3, r2
 8012640:	009b      	lsls	r3, r3, #2
 8012642:	4a10      	ldr	r2, [pc, #64]	; (8012684 <vTaskResume+0xb4>)
 8012644:	441a      	add	r2, r3
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	3304      	adds	r3, #4
 801264a:	4619      	mov	r1, r3
 801264c:	4610      	mov	r0, r2
 801264e:	f7fe fc34 	bl	8010eba <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012656:	4b09      	ldr	r3, [pc, #36]	; (801267c <vTaskResume+0xac>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801265c:	429a      	cmp	r2, r3
 801265e:	d307      	bcc.n	8012670 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8012660:	4b09      	ldr	r3, [pc, #36]	; (8012688 <vTaskResume+0xb8>)
 8012662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012666:	601a      	str	r2, [r3, #0]
 8012668:	f3bf 8f4f 	dsb	sy
 801266c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012670:	f001 fb00 	bl	8013c74 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012674:	bf00      	nop
 8012676:	3710      	adds	r7, #16
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	20000e1c 	.word	0x20000e1c
 8012680:	200012f8 	.word	0x200012f8
 8012684:	20000e20 	.word	0x20000e20
 8012688:	e000ed04 	.word	0xe000ed04

0801268c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b08a      	sub	sp, #40	; 0x28
 8012690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012692:	2300      	movs	r3, #0
 8012694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012696:	2300      	movs	r3, #0
 8012698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801269a:	463a      	mov	r2, r7
 801269c:	1d39      	adds	r1, r7, #4
 801269e:	f107 0308 	add.w	r3, r7, #8
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7fe fba8 	bl	8010df8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80126a8:	6839      	ldr	r1, [r7, #0]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	68ba      	ldr	r2, [r7, #8]
 80126ae:	9202      	str	r2, [sp, #8]
 80126b0:	9301      	str	r3, [sp, #4]
 80126b2:	2300      	movs	r3, #0
 80126b4:	9300      	str	r3, [sp, #0]
 80126b6:	2300      	movs	r3, #0
 80126b8:	460a      	mov	r2, r1
 80126ba:	4924      	ldr	r1, [pc, #144]	; (801274c <vTaskStartScheduler+0xc0>)
 80126bc:	4824      	ldr	r0, [pc, #144]	; (8012750 <vTaskStartScheduler+0xc4>)
 80126be:	f7ff fc91 	bl	8011fe4 <xTaskCreateStatic>
 80126c2:	4603      	mov	r3, r0
 80126c4:	4a23      	ldr	r2, [pc, #140]	; (8012754 <vTaskStartScheduler+0xc8>)
 80126c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80126c8:	4b22      	ldr	r3, [pc, #136]	; (8012754 <vTaskStartScheduler+0xc8>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d002      	beq.n	80126d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80126d0:	2301      	movs	r3, #1
 80126d2:	617b      	str	r3, [r7, #20]
 80126d4:	e001      	b.n	80126da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80126d6:	2300      	movs	r3, #0
 80126d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	2b01      	cmp	r3, #1
 80126de:	d102      	bne.n	80126e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80126e0:	f000 fe1e 	bl	8013320 <xTimerCreateTimerTask>
 80126e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	d11b      	bne.n	8012724 <vTaskStartScheduler+0x98>
	__asm volatile
 80126ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f0:	f383 8811 	msr	BASEPRI, r3
 80126f4:	f3bf 8f6f 	isb	sy
 80126f8:	f3bf 8f4f 	dsb	sy
 80126fc:	613b      	str	r3, [r7, #16]
}
 80126fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012700:	4b15      	ldr	r3, [pc, #84]	; (8012758 <vTaskStartScheduler+0xcc>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	3354      	adds	r3, #84	; 0x54
 8012706:	4a15      	ldr	r2, [pc, #84]	; (801275c <vTaskStartScheduler+0xd0>)
 8012708:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801270a:	4b15      	ldr	r3, [pc, #84]	; (8012760 <vTaskStartScheduler+0xd4>)
 801270c:	f04f 32ff 	mov.w	r2, #4294967295
 8012710:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012712:	4b14      	ldr	r3, [pc, #80]	; (8012764 <vTaskStartScheduler+0xd8>)
 8012714:	2201      	movs	r2, #1
 8012716:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012718:	4b13      	ldr	r3, [pc, #76]	; (8012768 <vTaskStartScheduler+0xdc>)
 801271a:	2200      	movs	r2, #0
 801271c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801271e:	f001 f9d7 	bl	8013ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012722:	e00e      	b.n	8012742 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801272a:	d10a      	bne.n	8012742 <vTaskStartScheduler+0xb6>
	__asm volatile
 801272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012730:	f383 8811 	msr	BASEPRI, r3
 8012734:	f3bf 8f6f 	isb	sy
 8012738:	f3bf 8f4f 	dsb	sy
 801273c:	60fb      	str	r3, [r7, #12]
}
 801273e:	bf00      	nop
 8012740:	e7fe      	b.n	8012740 <vTaskStartScheduler+0xb4>
}
 8012742:	bf00      	nop
 8012744:	3718      	adds	r7, #24
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	0801c1d8 	.word	0x0801c1d8
 8012750:	08012d91 	.word	0x08012d91
 8012754:	20001314 	.word	0x20001314
 8012758:	20000e1c 	.word	0x20000e1c
 801275c:	20000090 	.word	0x20000090
 8012760:	20001310 	.word	0x20001310
 8012764:	200012fc 	.word	0x200012fc
 8012768:	200012f4 	.word	0x200012f4

0801276c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801276c:	b480      	push	{r7}
 801276e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012770:	4b04      	ldr	r3, [pc, #16]	; (8012784 <vTaskSuspendAll+0x18>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	3301      	adds	r3, #1
 8012776:	4a03      	ldr	r2, [pc, #12]	; (8012784 <vTaskSuspendAll+0x18>)
 8012778:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801277a:	bf00      	nop
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr
 8012784:	20001318 	.word	0x20001318

08012788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b084      	sub	sp, #16
 801278c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801278e:	2300      	movs	r3, #0
 8012790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012792:	2300      	movs	r3, #0
 8012794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012796:	4b42      	ldr	r3, [pc, #264]	; (80128a0 <xTaskResumeAll+0x118>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d10a      	bne.n	80127b4 <xTaskResumeAll+0x2c>
	__asm volatile
 801279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a2:	f383 8811 	msr	BASEPRI, r3
 80127a6:	f3bf 8f6f 	isb	sy
 80127aa:	f3bf 8f4f 	dsb	sy
 80127ae:	603b      	str	r3, [r7, #0]
}
 80127b0:	bf00      	nop
 80127b2:	e7fe      	b.n	80127b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80127b4:	f001 fa2e 	bl	8013c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80127b8:	4b39      	ldr	r3, [pc, #228]	; (80128a0 <xTaskResumeAll+0x118>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	3b01      	subs	r3, #1
 80127be:	4a38      	ldr	r2, [pc, #224]	; (80128a0 <xTaskResumeAll+0x118>)
 80127c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127c2:	4b37      	ldr	r3, [pc, #220]	; (80128a0 <xTaskResumeAll+0x118>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d162      	bne.n	8012890 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80127ca:	4b36      	ldr	r3, [pc, #216]	; (80128a4 <xTaskResumeAll+0x11c>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d05e      	beq.n	8012890 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80127d2:	e02f      	b.n	8012834 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127d4:	4b34      	ldr	r3, [pc, #208]	; (80128a8 <xTaskResumeAll+0x120>)
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	68db      	ldr	r3, [r3, #12]
 80127da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	3318      	adds	r3, #24
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7fe fbc7 	bl	8010f74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	3304      	adds	r3, #4
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fe fbc2 	bl	8010f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127f4:	4b2d      	ldr	r3, [pc, #180]	; (80128ac <xTaskResumeAll+0x124>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d903      	bls.n	8012804 <xTaskResumeAll+0x7c>
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012800:	4a2a      	ldr	r2, [pc, #168]	; (80128ac <xTaskResumeAll+0x124>)
 8012802:	6013      	str	r3, [r2, #0]
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012808:	4613      	mov	r3, r2
 801280a:	009b      	lsls	r3, r3, #2
 801280c:	4413      	add	r3, r2
 801280e:	009b      	lsls	r3, r3, #2
 8012810:	4a27      	ldr	r2, [pc, #156]	; (80128b0 <xTaskResumeAll+0x128>)
 8012812:	441a      	add	r2, r3
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	3304      	adds	r3, #4
 8012818:	4619      	mov	r1, r3
 801281a:	4610      	mov	r0, r2
 801281c:	f7fe fb4d 	bl	8010eba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012824:	4b23      	ldr	r3, [pc, #140]	; (80128b4 <xTaskResumeAll+0x12c>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801282a:	429a      	cmp	r2, r3
 801282c:	d302      	bcc.n	8012834 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801282e:	4b22      	ldr	r3, [pc, #136]	; (80128b8 <xTaskResumeAll+0x130>)
 8012830:	2201      	movs	r2, #1
 8012832:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012834:	4b1c      	ldr	r3, [pc, #112]	; (80128a8 <xTaskResumeAll+0x120>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1cb      	bne.n	80127d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d001      	beq.n	8012846 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012842:	f000 fb5f 	bl	8012f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012846:	4b1d      	ldr	r3, [pc, #116]	; (80128bc <xTaskResumeAll+0x134>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d010      	beq.n	8012874 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012852:	f000 f847 	bl	80128e4 <xTaskIncrementTick>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d002      	beq.n	8012862 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801285c:	4b16      	ldr	r3, [pc, #88]	; (80128b8 <xTaskResumeAll+0x130>)
 801285e:	2201      	movs	r2, #1
 8012860:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	3b01      	subs	r3, #1
 8012866:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d1f1      	bne.n	8012852 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801286e:	4b13      	ldr	r3, [pc, #76]	; (80128bc <xTaskResumeAll+0x134>)
 8012870:	2200      	movs	r2, #0
 8012872:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012874:	4b10      	ldr	r3, [pc, #64]	; (80128b8 <xTaskResumeAll+0x130>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d009      	beq.n	8012890 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801287c:	2301      	movs	r3, #1
 801287e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012880:	4b0f      	ldr	r3, [pc, #60]	; (80128c0 <xTaskResumeAll+0x138>)
 8012882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012886:	601a      	str	r2, [r3, #0]
 8012888:	f3bf 8f4f 	dsb	sy
 801288c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012890:	f001 f9f0 	bl	8013c74 <vPortExitCritical>

	return xAlreadyYielded;
 8012894:	68bb      	ldr	r3, [r7, #8]
}
 8012896:	4618      	mov	r0, r3
 8012898:	3710      	adds	r7, #16
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	20001318 	.word	0x20001318
 80128a4:	200012f0 	.word	0x200012f0
 80128a8:	200012b0 	.word	0x200012b0
 80128ac:	200012f8 	.word	0x200012f8
 80128b0:	20000e20 	.word	0x20000e20
 80128b4:	20000e1c 	.word	0x20000e1c
 80128b8:	20001304 	.word	0x20001304
 80128bc:	20001300 	.word	0x20001300
 80128c0:	e000ed04 	.word	0xe000ed04

080128c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80128c4:	b480      	push	{r7}
 80128c6:	b083      	sub	sp, #12
 80128c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80128ca:	4b05      	ldr	r3, [pc, #20]	; (80128e0 <xTaskGetTickCount+0x1c>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80128d0:	687b      	ldr	r3, [r7, #4]
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	370c      	adds	r7, #12
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	200012f4 	.word	0x200012f4

080128e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b086      	sub	sp, #24
 80128e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80128ea:	2300      	movs	r3, #0
 80128ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80128ee:	4b4f      	ldr	r3, [pc, #316]	; (8012a2c <xTaskIncrementTick+0x148>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	f040 808f 	bne.w	8012a16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80128f8:	4b4d      	ldr	r3, [pc, #308]	; (8012a30 <xTaskIncrementTick+0x14c>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	3301      	adds	r3, #1
 80128fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012900:	4a4b      	ldr	r2, [pc, #300]	; (8012a30 <xTaskIncrementTick+0x14c>)
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d120      	bne.n	801294e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801290c:	4b49      	ldr	r3, [pc, #292]	; (8012a34 <xTaskIncrementTick+0x150>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d00a      	beq.n	801292c <xTaskIncrementTick+0x48>
	__asm volatile
 8012916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801291a:	f383 8811 	msr	BASEPRI, r3
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	f3bf 8f4f 	dsb	sy
 8012926:	603b      	str	r3, [r7, #0]
}
 8012928:	bf00      	nop
 801292a:	e7fe      	b.n	801292a <xTaskIncrementTick+0x46>
 801292c:	4b41      	ldr	r3, [pc, #260]	; (8012a34 <xTaskIncrementTick+0x150>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	60fb      	str	r3, [r7, #12]
 8012932:	4b41      	ldr	r3, [pc, #260]	; (8012a38 <xTaskIncrementTick+0x154>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4a3f      	ldr	r2, [pc, #252]	; (8012a34 <xTaskIncrementTick+0x150>)
 8012938:	6013      	str	r3, [r2, #0]
 801293a:	4a3f      	ldr	r2, [pc, #252]	; (8012a38 <xTaskIncrementTick+0x154>)
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	6013      	str	r3, [r2, #0]
 8012940:	4b3e      	ldr	r3, [pc, #248]	; (8012a3c <xTaskIncrementTick+0x158>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	3301      	adds	r3, #1
 8012946:	4a3d      	ldr	r2, [pc, #244]	; (8012a3c <xTaskIncrementTick+0x158>)
 8012948:	6013      	str	r3, [r2, #0]
 801294a:	f000 fadb 	bl	8012f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801294e:	4b3c      	ldr	r3, [pc, #240]	; (8012a40 <xTaskIncrementTick+0x15c>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	693a      	ldr	r2, [r7, #16]
 8012954:	429a      	cmp	r2, r3
 8012956:	d349      	bcc.n	80129ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012958:	4b36      	ldr	r3, [pc, #216]	; (8012a34 <xTaskIncrementTick+0x150>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d104      	bne.n	801296c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012962:	4b37      	ldr	r3, [pc, #220]	; (8012a40 <xTaskIncrementTick+0x15c>)
 8012964:	f04f 32ff 	mov.w	r2, #4294967295
 8012968:	601a      	str	r2, [r3, #0]
					break;
 801296a:	e03f      	b.n	80129ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801296c:	4b31      	ldr	r3, [pc, #196]	; (8012a34 <xTaskIncrementTick+0x150>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	68db      	ldr	r3, [r3, #12]
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801297c:	693a      	ldr	r2, [r7, #16]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	429a      	cmp	r2, r3
 8012982:	d203      	bcs.n	801298c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012984:	4a2e      	ldr	r2, [pc, #184]	; (8012a40 <xTaskIncrementTick+0x15c>)
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801298a:	e02f      	b.n	80129ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	3304      	adds	r3, #4
 8012990:	4618      	mov	r0, r3
 8012992:	f7fe faef 	bl	8010f74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801299a:	2b00      	cmp	r3, #0
 801299c:	d004      	beq.n	80129a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	3318      	adds	r3, #24
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7fe fae6 	bl	8010f74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ac:	4b25      	ldr	r3, [pc, #148]	; (8012a44 <xTaskIncrementTick+0x160>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d903      	bls.n	80129bc <xTaskIncrementTick+0xd8>
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129b8:	4a22      	ldr	r2, [pc, #136]	; (8012a44 <xTaskIncrementTick+0x160>)
 80129ba:	6013      	str	r3, [r2, #0]
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129c0:	4613      	mov	r3, r2
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	4413      	add	r3, r2
 80129c6:	009b      	lsls	r3, r3, #2
 80129c8:	4a1f      	ldr	r2, [pc, #124]	; (8012a48 <xTaskIncrementTick+0x164>)
 80129ca:	441a      	add	r2, r3
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	3304      	adds	r3, #4
 80129d0:	4619      	mov	r1, r3
 80129d2:	4610      	mov	r0, r2
 80129d4:	f7fe fa71 	bl	8010eba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129dc:	4b1b      	ldr	r3, [pc, #108]	; (8012a4c <xTaskIncrementTick+0x168>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d3b8      	bcc.n	8012958 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80129e6:	2301      	movs	r3, #1
 80129e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80129ea:	e7b5      	b.n	8012958 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80129ec:	4b17      	ldr	r3, [pc, #92]	; (8012a4c <xTaskIncrementTick+0x168>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129f2:	4915      	ldr	r1, [pc, #84]	; (8012a48 <xTaskIncrementTick+0x164>)
 80129f4:	4613      	mov	r3, r2
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	4413      	add	r3, r2
 80129fa:	009b      	lsls	r3, r3, #2
 80129fc:	440b      	add	r3, r1
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d901      	bls.n	8012a08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012a04:	2301      	movs	r3, #1
 8012a06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012a08:	4b11      	ldr	r3, [pc, #68]	; (8012a50 <xTaskIncrementTick+0x16c>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d007      	beq.n	8012a20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012a10:	2301      	movs	r3, #1
 8012a12:	617b      	str	r3, [r7, #20]
 8012a14:	e004      	b.n	8012a20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012a16:	4b0f      	ldr	r3, [pc, #60]	; (8012a54 <xTaskIncrementTick+0x170>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	4a0d      	ldr	r2, [pc, #52]	; (8012a54 <xTaskIncrementTick+0x170>)
 8012a1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012a20:	697b      	ldr	r3, [r7, #20]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3718      	adds	r7, #24
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	20001318 	.word	0x20001318
 8012a30:	200012f4 	.word	0x200012f4
 8012a34:	200012a8 	.word	0x200012a8
 8012a38:	200012ac 	.word	0x200012ac
 8012a3c:	20001308 	.word	0x20001308
 8012a40:	20001310 	.word	0x20001310
 8012a44:	200012f8 	.word	0x200012f8
 8012a48:	20000e20 	.word	0x20000e20
 8012a4c:	20000e1c 	.word	0x20000e1c
 8012a50:	20001304 	.word	0x20001304
 8012a54:	20001300 	.word	0x20001300

08012a58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012a58:	b480      	push	{r7}
 8012a5a:	b085      	sub	sp, #20
 8012a5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012a5e:	4b2a      	ldr	r3, [pc, #168]	; (8012b08 <vTaskSwitchContext+0xb0>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d003      	beq.n	8012a6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012a66:	4b29      	ldr	r3, [pc, #164]	; (8012b0c <vTaskSwitchContext+0xb4>)
 8012a68:	2201      	movs	r2, #1
 8012a6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012a6c:	e046      	b.n	8012afc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8012a6e:	4b27      	ldr	r3, [pc, #156]	; (8012b0c <vTaskSwitchContext+0xb4>)
 8012a70:	2200      	movs	r2, #0
 8012a72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a74:	4b26      	ldr	r3, [pc, #152]	; (8012b10 <vTaskSwitchContext+0xb8>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	60fb      	str	r3, [r7, #12]
 8012a7a:	e010      	b.n	8012a9e <vTaskSwitchContext+0x46>
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d10a      	bne.n	8012a98 <vTaskSwitchContext+0x40>
	__asm volatile
 8012a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a86:	f383 8811 	msr	BASEPRI, r3
 8012a8a:	f3bf 8f6f 	isb	sy
 8012a8e:	f3bf 8f4f 	dsb	sy
 8012a92:	607b      	str	r3, [r7, #4]
}
 8012a94:	bf00      	nop
 8012a96:	e7fe      	b.n	8012a96 <vTaskSwitchContext+0x3e>
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	3b01      	subs	r3, #1
 8012a9c:	60fb      	str	r3, [r7, #12]
 8012a9e:	491d      	ldr	r1, [pc, #116]	; (8012b14 <vTaskSwitchContext+0xbc>)
 8012aa0:	68fa      	ldr	r2, [r7, #12]
 8012aa2:	4613      	mov	r3, r2
 8012aa4:	009b      	lsls	r3, r3, #2
 8012aa6:	4413      	add	r3, r2
 8012aa8:	009b      	lsls	r3, r3, #2
 8012aaa:	440b      	add	r3, r1
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d0e4      	beq.n	8012a7c <vTaskSwitchContext+0x24>
 8012ab2:	68fa      	ldr	r2, [r7, #12]
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	009b      	lsls	r3, r3, #2
 8012ab8:	4413      	add	r3, r2
 8012aba:	009b      	lsls	r3, r3, #2
 8012abc:	4a15      	ldr	r2, [pc, #84]	; (8012b14 <vTaskSwitchContext+0xbc>)
 8012abe:	4413      	add	r3, r2
 8012ac0:	60bb      	str	r3, [r7, #8]
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	685a      	ldr	r2, [r3, #4]
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	605a      	str	r2, [r3, #4]
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	685a      	ldr	r2, [r3, #4]
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	3308      	adds	r3, #8
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d104      	bne.n	8012ae2 <vTaskSwitchContext+0x8a>
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	685a      	ldr	r2, [r3, #4]
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	605a      	str	r2, [r3, #4]
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	4a0b      	ldr	r2, [pc, #44]	; (8012b18 <vTaskSwitchContext+0xc0>)
 8012aea:	6013      	str	r3, [r2, #0]
 8012aec:	4a08      	ldr	r2, [pc, #32]	; (8012b10 <vTaskSwitchContext+0xb8>)
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012af2:	4b09      	ldr	r3, [pc, #36]	; (8012b18 <vTaskSwitchContext+0xc0>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	3354      	adds	r3, #84	; 0x54
 8012af8:	4a08      	ldr	r2, [pc, #32]	; (8012b1c <vTaskSwitchContext+0xc4>)
 8012afa:	6013      	str	r3, [r2, #0]
}
 8012afc:	bf00      	nop
 8012afe:	3714      	adds	r7, #20
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr
 8012b08:	20001318 	.word	0x20001318
 8012b0c:	20001304 	.word	0x20001304
 8012b10:	200012f8 	.word	0x200012f8
 8012b14:	20000e20 	.word	0x20000e20
 8012b18:	20000e1c 	.word	0x20000e1c
 8012b1c:	20000090 	.word	0x20000090

08012b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b084      	sub	sp, #16
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d10a      	bne.n	8012b46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b34:	f383 8811 	msr	BASEPRI, r3
 8012b38:	f3bf 8f6f 	isb	sy
 8012b3c:	f3bf 8f4f 	dsb	sy
 8012b40:	60fb      	str	r3, [r7, #12]
}
 8012b42:	bf00      	nop
 8012b44:	e7fe      	b.n	8012b44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012b46:	4b07      	ldr	r3, [pc, #28]	; (8012b64 <vTaskPlaceOnEventList+0x44>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	3318      	adds	r3, #24
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	6878      	ldr	r0, [r7, #4]
 8012b50:	f7fe f9d7 	bl	8010f02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012b54:	2101      	movs	r1, #1
 8012b56:	6838      	ldr	r0, [r7, #0]
 8012b58:	f000 fb8e 	bl	8013278 <prvAddCurrentTaskToDelayedList>
}
 8012b5c:	bf00      	nop
 8012b5e:	3710      	adds	r7, #16
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	20000e1c 	.word	0x20000e1c

08012b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d10a      	bne.n	8012b90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b7e:	f383 8811 	msr	BASEPRI, r3
 8012b82:	f3bf 8f6f 	isb	sy
 8012b86:	f3bf 8f4f 	dsb	sy
 8012b8a:	617b      	str	r3, [r7, #20]
}
 8012b8c:	bf00      	nop
 8012b8e:	e7fe      	b.n	8012b8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012b90:	4b0a      	ldr	r3, [pc, #40]	; (8012bbc <vTaskPlaceOnEventListRestricted+0x54>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	3318      	adds	r3, #24
 8012b96:	4619      	mov	r1, r3
 8012b98:	68f8      	ldr	r0, [r7, #12]
 8012b9a:	f7fe f98e 	bl	8010eba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d002      	beq.n	8012baa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ba8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012baa:	6879      	ldr	r1, [r7, #4]
 8012bac:	68b8      	ldr	r0, [r7, #8]
 8012bae:	f000 fb63 	bl	8013278 <prvAddCurrentTaskToDelayedList>
	}
 8012bb2:	bf00      	nop
 8012bb4:	3718      	adds	r7, #24
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	20000e1c 	.word	0x20000e1c

08012bc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b086      	sub	sp, #24
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	68db      	ldr	r3, [r3, #12]
 8012bce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d10a      	bne.n	8012bec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bda:	f383 8811 	msr	BASEPRI, r3
 8012bde:	f3bf 8f6f 	isb	sy
 8012be2:	f3bf 8f4f 	dsb	sy
 8012be6:	60fb      	str	r3, [r7, #12]
}
 8012be8:	bf00      	nop
 8012bea:	e7fe      	b.n	8012bea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	3318      	adds	r3, #24
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7fe f9bf 	bl	8010f74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bf6:	4b1e      	ldr	r3, [pc, #120]	; (8012c70 <xTaskRemoveFromEventList+0xb0>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d11d      	bne.n	8012c3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	3304      	adds	r3, #4
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7fe f9b6 	bl	8010f74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c0c:	4b19      	ldr	r3, [pc, #100]	; (8012c74 <xTaskRemoveFromEventList+0xb4>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d903      	bls.n	8012c1c <xTaskRemoveFromEventList+0x5c>
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c18:	4a16      	ldr	r2, [pc, #88]	; (8012c74 <xTaskRemoveFromEventList+0xb4>)
 8012c1a:	6013      	str	r3, [r2, #0]
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c20:	4613      	mov	r3, r2
 8012c22:	009b      	lsls	r3, r3, #2
 8012c24:	4413      	add	r3, r2
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	4a13      	ldr	r2, [pc, #76]	; (8012c78 <xTaskRemoveFromEventList+0xb8>)
 8012c2a:	441a      	add	r2, r3
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	3304      	adds	r3, #4
 8012c30:	4619      	mov	r1, r3
 8012c32:	4610      	mov	r0, r2
 8012c34:	f7fe f941 	bl	8010eba <vListInsertEnd>
 8012c38:	e005      	b.n	8012c46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	3318      	adds	r3, #24
 8012c3e:	4619      	mov	r1, r3
 8012c40:	480e      	ldr	r0, [pc, #56]	; (8012c7c <xTaskRemoveFromEventList+0xbc>)
 8012c42:	f7fe f93a 	bl	8010eba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c4a:	4b0d      	ldr	r3, [pc, #52]	; (8012c80 <xTaskRemoveFromEventList+0xc0>)
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d905      	bls.n	8012c60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012c54:	2301      	movs	r3, #1
 8012c56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012c58:	4b0a      	ldr	r3, [pc, #40]	; (8012c84 <xTaskRemoveFromEventList+0xc4>)
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	601a      	str	r2, [r3, #0]
 8012c5e:	e001      	b.n	8012c64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012c60:	2300      	movs	r3, #0
 8012c62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012c64:	697b      	ldr	r3, [r7, #20]
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3718      	adds	r7, #24
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	20001318 	.word	0x20001318
 8012c74:	200012f8 	.word	0x200012f8
 8012c78:	20000e20 	.word	0x20000e20
 8012c7c:	200012b0 	.word	0x200012b0
 8012c80:	20000e1c 	.word	0x20000e1c
 8012c84:	20001304 	.word	0x20001304

08012c88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b083      	sub	sp, #12
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012c90:	4b06      	ldr	r3, [pc, #24]	; (8012cac <vTaskInternalSetTimeOutState+0x24>)
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012c98:	4b05      	ldr	r3, [pc, #20]	; (8012cb0 <vTaskInternalSetTimeOutState+0x28>)
 8012c9a:	681a      	ldr	r2, [r3, #0]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	605a      	str	r2, [r3, #4]
}
 8012ca0:	bf00      	nop
 8012ca2:	370c      	adds	r7, #12
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr
 8012cac:	20001308 	.word	0x20001308
 8012cb0:	200012f4 	.word	0x200012f4

08012cb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b088      	sub	sp, #32
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d10a      	bne.n	8012cda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc8:	f383 8811 	msr	BASEPRI, r3
 8012ccc:	f3bf 8f6f 	isb	sy
 8012cd0:	f3bf 8f4f 	dsb	sy
 8012cd4:	613b      	str	r3, [r7, #16]
}
 8012cd6:	bf00      	nop
 8012cd8:	e7fe      	b.n	8012cd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d10a      	bne.n	8012cf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce4:	f383 8811 	msr	BASEPRI, r3
 8012ce8:	f3bf 8f6f 	isb	sy
 8012cec:	f3bf 8f4f 	dsb	sy
 8012cf0:	60fb      	str	r3, [r7, #12]
}
 8012cf2:	bf00      	nop
 8012cf4:	e7fe      	b.n	8012cf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012cf6:	f000 ff8d 	bl	8013c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012cfa:	4b1d      	ldr	r3, [pc, #116]	; (8012d70 <xTaskCheckForTimeOut+0xbc>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	69ba      	ldr	r2, [r7, #24]
 8012d06:	1ad3      	subs	r3, r2, r3
 8012d08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d12:	d102      	bne.n	8012d1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012d14:	2300      	movs	r3, #0
 8012d16:	61fb      	str	r3, [r7, #28]
 8012d18:	e023      	b.n	8012d62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681a      	ldr	r2, [r3, #0]
 8012d1e:	4b15      	ldr	r3, [pc, #84]	; (8012d74 <xTaskCheckForTimeOut+0xc0>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d007      	beq.n	8012d36 <xTaskCheckForTimeOut+0x82>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	69ba      	ldr	r2, [r7, #24]
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d302      	bcc.n	8012d36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012d30:	2301      	movs	r3, #1
 8012d32:	61fb      	str	r3, [r7, #28]
 8012d34:	e015      	b.n	8012d62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	697a      	ldr	r2, [r7, #20]
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d20b      	bcs.n	8012d58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	1ad2      	subs	r2, r2, r3
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f7ff ff9b 	bl	8012c88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012d52:	2300      	movs	r3, #0
 8012d54:	61fb      	str	r3, [r7, #28]
 8012d56:	e004      	b.n	8012d62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012d5e:	2301      	movs	r3, #1
 8012d60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012d62:	f000 ff87 	bl	8013c74 <vPortExitCritical>

	return xReturn;
 8012d66:	69fb      	ldr	r3, [r7, #28]
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3720      	adds	r7, #32
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	200012f4 	.word	0x200012f4
 8012d74:	20001308 	.word	0x20001308

08012d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012d78:	b480      	push	{r7}
 8012d7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012d7c:	4b03      	ldr	r3, [pc, #12]	; (8012d8c <vTaskMissedYield+0x14>)
 8012d7e:	2201      	movs	r2, #1
 8012d80:	601a      	str	r2, [r3, #0]
}
 8012d82:	bf00      	nop
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr
 8012d8c:	20001304 	.word	0x20001304

08012d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b082      	sub	sp, #8
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012d98:	f000 f852 	bl	8012e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012d9c:	4b06      	ldr	r3, [pc, #24]	; (8012db8 <prvIdleTask+0x28>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	2b01      	cmp	r3, #1
 8012da2:	d9f9      	bls.n	8012d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012da4:	4b05      	ldr	r3, [pc, #20]	; (8012dbc <prvIdleTask+0x2c>)
 8012da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012daa:	601a      	str	r2, [r3, #0]
 8012dac:	f3bf 8f4f 	dsb	sy
 8012db0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012db4:	e7f0      	b.n	8012d98 <prvIdleTask+0x8>
 8012db6:	bf00      	nop
 8012db8:	20000e20 	.word	0x20000e20
 8012dbc:	e000ed04 	.word	0xe000ed04

08012dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	607b      	str	r3, [r7, #4]
 8012dca:	e00c      	b.n	8012de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	4613      	mov	r3, r2
 8012dd0:	009b      	lsls	r3, r3, #2
 8012dd2:	4413      	add	r3, r2
 8012dd4:	009b      	lsls	r3, r3, #2
 8012dd6:	4a12      	ldr	r2, [pc, #72]	; (8012e20 <prvInitialiseTaskLists+0x60>)
 8012dd8:	4413      	add	r3, r2
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7fe f840 	bl	8010e60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	3301      	adds	r3, #1
 8012de4:	607b      	str	r3, [r7, #4]
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2b37      	cmp	r3, #55	; 0x37
 8012dea:	d9ef      	bls.n	8012dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012dec:	480d      	ldr	r0, [pc, #52]	; (8012e24 <prvInitialiseTaskLists+0x64>)
 8012dee:	f7fe f837 	bl	8010e60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012df2:	480d      	ldr	r0, [pc, #52]	; (8012e28 <prvInitialiseTaskLists+0x68>)
 8012df4:	f7fe f834 	bl	8010e60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012df8:	480c      	ldr	r0, [pc, #48]	; (8012e2c <prvInitialiseTaskLists+0x6c>)
 8012dfa:	f7fe f831 	bl	8010e60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012dfe:	480c      	ldr	r0, [pc, #48]	; (8012e30 <prvInitialiseTaskLists+0x70>)
 8012e00:	f7fe f82e 	bl	8010e60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012e04:	480b      	ldr	r0, [pc, #44]	; (8012e34 <prvInitialiseTaskLists+0x74>)
 8012e06:	f7fe f82b 	bl	8010e60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012e0a:	4b0b      	ldr	r3, [pc, #44]	; (8012e38 <prvInitialiseTaskLists+0x78>)
 8012e0c:	4a05      	ldr	r2, [pc, #20]	; (8012e24 <prvInitialiseTaskLists+0x64>)
 8012e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012e10:	4b0a      	ldr	r3, [pc, #40]	; (8012e3c <prvInitialiseTaskLists+0x7c>)
 8012e12:	4a05      	ldr	r2, [pc, #20]	; (8012e28 <prvInitialiseTaskLists+0x68>)
 8012e14:	601a      	str	r2, [r3, #0]
}
 8012e16:	bf00      	nop
 8012e18:	3708      	adds	r7, #8
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	20000e20 	.word	0x20000e20
 8012e24:	20001280 	.word	0x20001280
 8012e28:	20001294 	.word	0x20001294
 8012e2c:	200012b0 	.word	0x200012b0
 8012e30:	200012c4 	.word	0x200012c4
 8012e34:	200012dc 	.word	0x200012dc
 8012e38:	200012a8 	.word	0x200012a8
 8012e3c:	200012ac 	.word	0x200012ac

08012e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012e46:	e019      	b.n	8012e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012e48:	f000 fee4 	bl	8013c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e4c:	4b10      	ldr	r3, [pc, #64]	; (8012e90 <prvCheckTasksWaitingTermination+0x50>)
 8012e4e:	68db      	ldr	r3, [r3, #12]
 8012e50:	68db      	ldr	r3, [r3, #12]
 8012e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	3304      	adds	r3, #4
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7fe f88b 	bl	8010f74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012e5e:	4b0d      	ldr	r3, [pc, #52]	; (8012e94 <prvCheckTasksWaitingTermination+0x54>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	3b01      	subs	r3, #1
 8012e64:	4a0b      	ldr	r2, [pc, #44]	; (8012e94 <prvCheckTasksWaitingTermination+0x54>)
 8012e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012e68:	4b0b      	ldr	r3, [pc, #44]	; (8012e98 <prvCheckTasksWaitingTermination+0x58>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	3b01      	subs	r3, #1
 8012e6e:	4a0a      	ldr	r2, [pc, #40]	; (8012e98 <prvCheckTasksWaitingTermination+0x58>)
 8012e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012e72:	f000 feff 	bl	8013c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f000 f810 	bl	8012e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012e7c:	4b06      	ldr	r3, [pc, #24]	; (8012e98 <prvCheckTasksWaitingTermination+0x58>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1e1      	bne.n	8012e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012e84:	bf00      	nop
 8012e86:	bf00      	nop
 8012e88:	3708      	adds	r7, #8
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	200012c4 	.word	0x200012c4
 8012e94:	200012f0 	.word	0x200012f0
 8012e98:	200012d8 	.word	0x200012d8

08012e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b084      	sub	sp, #16
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	3354      	adds	r3, #84	; 0x54
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f003 faaf 	bl	801640c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d108      	bne.n	8012eca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f001 f897 	bl	8013ff0 <vPortFree>
				vPortFree( pxTCB );
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f001 f894 	bl	8013ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012ec8:	e018      	b.n	8012efc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	d103      	bne.n	8012edc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f001 f88b 	bl	8013ff0 <vPortFree>
	}
 8012eda:	e00f      	b.n	8012efc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012ee2:	2b02      	cmp	r3, #2
 8012ee4:	d00a      	beq.n	8012efc <prvDeleteTCB+0x60>
	__asm volatile
 8012ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eea:	f383 8811 	msr	BASEPRI, r3
 8012eee:	f3bf 8f6f 	isb	sy
 8012ef2:	f3bf 8f4f 	dsb	sy
 8012ef6:	60fb      	str	r3, [r7, #12]
}
 8012ef8:	bf00      	nop
 8012efa:	e7fe      	b.n	8012efa <prvDeleteTCB+0x5e>
	}
 8012efc:	bf00      	nop
 8012efe:	3710      	adds	r7, #16
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012f04:	b480      	push	{r7}
 8012f06:	b083      	sub	sp, #12
 8012f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f0a:	4b0c      	ldr	r3, [pc, #48]	; (8012f3c <prvResetNextTaskUnblockTime+0x38>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d104      	bne.n	8012f1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012f14:	4b0a      	ldr	r3, [pc, #40]	; (8012f40 <prvResetNextTaskUnblockTime+0x3c>)
 8012f16:	f04f 32ff 	mov.w	r2, #4294967295
 8012f1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012f1c:	e008      	b.n	8012f30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f1e:	4b07      	ldr	r3, [pc, #28]	; (8012f3c <prvResetNextTaskUnblockTime+0x38>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	68db      	ldr	r3, [r3, #12]
 8012f24:	68db      	ldr	r3, [r3, #12]
 8012f26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	4a04      	ldr	r2, [pc, #16]	; (8012f40 <prvResetNextTaskUnblockTime+0x3c>)
 8012f2e:	6013      	str	r3, [r2, #0]
}
 8012f30:	bf00      	nop
 8012f32:	370c      	adds	r7, #12
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr
 8012f3c:	200012a8 	.word	0x200012a8
 8012f40:	20001310 	.word	0x20001310

08012f44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012f44:	b480      	push	{r7}
 8012f46:	b083      	sub	sp, #12
 8012f48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8012f4a:	4b05      	ldr	r3, [pc, #20]	; (8012f60 <xTaskGetCurrentTaskHandle+0x1c>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012f50:	687b      	ldr	r3, [r7, #4]
	}
 8012f52:	4618      	mov	r0, r3
 8012f54:	370c      	adds	r7, #12
 8012f56:	46bd      	mov	sp, r7
 8012f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5c:	4770      	bx	lr
 8012f5e:	bf00      	nop
 8012f60:	20000e1c 	.word	0x20000e1c

08012f64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012f64:	b480      	push	{r7}
 8012f66:	b083      	sub	sp, #12
 8012f68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012f6a:	4b0b      	ldr	r3, [pc, #44]	; (8012f98 <xTaskGetSchedulerState+0x34>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d102      	bne.n	8012f78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012f72:	2301      	movs	r3, #1
 8012f74:	607b      	str	r3, [r7, #4]
 8012f76:	e008      	b.n	8012f8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f78:	4b08      	ldr	r3, [pc, #32]	; (8012f9c <xTaskGetSchedulerState+0x38>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d102      	bne.n	8012f86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012f80:	2302      	movs	r3, #2
 8012f82:	607b      	str	r3, [r7, #4]
 8012f84:	e001      	b.n	8012f8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012f86:	2300      	movs	r3, #0
 8012f88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012f8a:	687b      	ldr	r3, [r7, #4]
	}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	370c      	adds	r7, #12
 8012f90:	46bd      	mov	sp, r7
 8012f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f96:	4770      	bx	lr
 8012f98:	200012fc 	.word	0x200012fc
 8012f9c:	20001318 	.word	0x20001318

08012fa0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012fac:	2300      	movs	r3, #0
 8012fae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d051      	beq.n	801305a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fba:	4b2a      	ldr	r3, [pc, #168]	; (8013064 <xTaskPriorityInherit+0xc4>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d241      	bcs.n	8013048 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	699b      	ldr	r3, [r3, #24]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	db06      	blt.n	8012fda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fcc:	4b25      	ldr	r3, [pc, #148]	; (8013064 <xTaskPriorityInherit+0xc4>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	6959      	ldr	r1, [r3, #20]
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	009b      	lsls	r3, r3, #2
 8012fe6:	4413      	add	r3, r2
 8012fe8:	009b      	lsls	r3, r3, #2
 8012fea:	4a1f      	ldr	r2, [pc, #124]	; (8013068 <xTaskPriorityInherit+0xc8>)
 8012fec:	4413      	add	r3, r2
 8012fee:	4299      	cmp	r1, r3
 8012ff0:	d122      	bne.n	8013038 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	3304      	adds	r3, #4
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7fd ffbc 	bl	8010f74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ffc:	4b19      	ldr	r3, [pc, #100]	; (8013064 <xTaskPriorityInherit+0xc4>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801300a:	4b18      	ldr	r3, [pc, #96]	; (801306c <xTaskPriorityInherit+0xcc>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	429a      	cmp	r2, r3
 8013010:	d903      	bls.n	801301a <xTaskPriorityInherit+0x7a>
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013016:	4a15      	ldr	r2, [pc, #84]	; (801306c <xTaskPriorityInherit+0xcc>)
 8013018:	6013      	str	r3, [r2, #0]
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801301e:	4613      	mov	r3, r2
 8013020:	009b      	lsls	r3, r3, #2
 8013022:	4413      	add	r3, r2
 8013024:	009b      	lsls	r3, r3, #2
 8013026:	4a10      	ldr	r2, [pc, #64]	; (8013068 <xTaskPriorityInherit+0xc8>)
 8013028:	441a      	add	r2, r3
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	3304      	adds	r3, #4
 801302e:	4619      	mov	r1, r3
 8013030:	4610      	mov	r0, r2
 8013032:	f7fd ff42 	bl	8010eba <vListInsertEnd>
 8013036:	e004      	b.n	8013042 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013038:	4b0a      	ldr	r3, [pc, #40]	; (8013064 <xTaskPriorityInherit+0xc4>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013042:	2301      	movs	r3, #1
 8013044:	60fb      	str	r3, [r7, #12]
 8013046:	e008      	b.n	801305a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801304c:	4b05      	ldr	r3, [pc, #20]	; (8013064 <xTaskPriorityInherit+0xc4>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013052:	429a      	cmp	r2, r3
 8013054:	d201      	bcs.n	801305a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013056:	2301      	movs	r3, #1
 8013058:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801305a:	68fb      	ldr	r3, [r7, #12]
	}
 801305c:	4618      	mov	r0, r3
 801305e:	3710      	adds	r7, #16
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	20000e1c 	.word	0x20000e1c
 8013068:	20000e20 	.word	0x20000e20
 801306c:	200012f8 	.word	0x200012f8

08013070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013070:	b580      	push	{r7, lr}
 8013072:	b086      	sub	sp, #24
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801307c:	2300      	movs	r3, #0
 801307e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d056      	beq.n	8013134 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013086:	4b2e      	ldr	r3, [pc, #184]	; (8013140 <xTaskPriorityDisinherit+0xd0>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	693a      	ldr	r2, [r7, #16]
 801308c:	429a      	cmp	r2, r3
 801308e:	d00a      	beq.n	80130a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	60fb      	str	r3, [r7, #12]
}
 80130a2:	bf00      	nop
 80130a4:	e7fe      	b.n	80130a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d10a      	bne.n	80130c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80130ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b2:	f383 8811 	msr	BASEPRI, r3
 80130b6:	f3bf 8f6f 	isb	sy
 80130ba:	f3bf 8f4f 	dsb	sy
 80130be:	60bb      	str	r3, [r7, #8]
}
 80130c0:	bf00      	nop
 80130c2:	e7fe      	b.n	80130c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130c8:	1e5a      	subs	r2, r3, #1
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d02c      	beq.n	8013134 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d128      	bne.n	8013134 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	3304      	adds	r3, #4
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7fd ff44 	bl	8010f74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130f4:	693b      	ldr	r3, [r7, #16]
 80130f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013100:	693b      	ldr	r3, [r7, #16]
 8013102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013104:	4b0f      	ldr	r3, [pc, #60]	; (8013144 <xTaskPriorityDisinherit+0xd4>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	429a      	cmp	r2, r3
 801310a:	d903      	bls.n	8013114 <xTaskPriorityDisinherit+0xa4>
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013110:	4a0c      	ldr	r2, [pc, #48]	; (8013144 <xTaskPriorityDisinherit+0xd4>)
 8013112:	6013      	str	r3, [r2, #0]
 8013114:	693b      	ldr	r3, [r7, #16]
 8013116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013118:	4613      	mov	r3, r2
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	4413      	add	r3, r2
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	4a09      	ldr	r2, [pc, #36]	; (8013148 <xTaskPriorityDisinherit+0xd8>)
 8013122:	441a      	add	r2, r3
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	3304      	adds	r3, #4
 8013128:	4619      	mov	r1, r3
 801312a:	4610      	mov	r0, r2
 801312c:	f7fd fec5 	bl	8010eba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013130:	2301      	movs	r3, #1
 8013132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013134:	697b      	ldr	r3, [r7, #20]
	}
 8013136:	4618      	mov	r0, r3
 8013138:	3718      	adds	r7, #24
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop
 8013140:	20000e1c 	.word	0x20000e1c
 8013144:	200012f8 	.word	0x200012f8
 8013148:	20000e20 	.word	0x20000e20

0801314c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801314c:	b580      	push	{r7, lr}
 801314e:	b088      	sub	sp, #32
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801315a:	2301      	movs	r3, #1
 801315c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d06a      	beq.n	801323a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013164:	69bb      	ldr	r3, [r7, #24]
 8013166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013168:	2b00      	cmp	r3, #0
 801316a:	d10a      	bne.n	8013182 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013170:	f383 8811 	msr	BASEPRI, r3
 8013174:	f3bf 8f6f 	isb	sy
 8013178:	f3bf 8f4f 	dsb	sy
 801317c:	60fb      	str	r3, [r7, #12]
}
 801317e:	bf00      	nop
 8013180:	e7fe      	b.n	8013180 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013186:	683a      	ldr	r2, [r7, #0]
 8013188:	429a      	cmp	r2, r3
 801318a:	d902      	bls.n	8013192 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	61fb      	str	r3, [r7, #28]
 8013190:	e002      	b.n	8013198 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013196:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013198:	69bb      	ldr	r3, [r7, #24]
 801319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801319c:	69fa      	ldr	r2, [r7, #28]
 801319e:	429a      	cmp	r2, r3
 80131a0:	d04b      	beq.n	801323a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131a6:	697a      	ldr	r2, [r7, #20]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d146      	bne.n	801323a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80131ac:	4b25      	ldr	r3, [pc, #148]	; (8013244 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	69ba      	ldr	r2, [r7, #24]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d10a      	bne.n	80131cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80131b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ba:	f383 8811 	msr	BASEPRI, r3
 80131be:	f3bf 8f6f 	isb	sy
 80131c2:	f3bf 8f4f 	dsb	sy
 80131c6:	60bb      	str	r3, [r7, #8]
}
 80131c8:	bf00      	nop
 80131ca:	e7fe      	b.n	80131ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80131cc:	69bb      	ldr	r3, [r7, #24]
 80131ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80131d2:	69bb      	ldr	r3, [r7, #24]
 80131d4:	69fa      	ldr	r2, [r7, #28]
 80131d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80131d8:	69bb      	ldr	r3, [r7, #24]
 80131da:	699b      	ldr	r3, [r3, #24]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	db04      	blt.n	80131ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131e0:	69fb      	ldr	r3, [r7, #28]
 80131e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80131e6:	69bb      	ldr	r3, [r7, #24]
 80131e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80131ea:	69bb      	ldr	r3, [r7, #24]
 80131ec:	6959      	ldr	r1, [r3, #20]
 80131ee:	693a      	ldr	r2, [r7, #16]
 80131f0:	4613      	mov	r3, r2
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	4413      	add	r3, r2
 80131f6:	009b      	lsls	r3, r3, #2
 80131f8:	4a13      	ldr	r2, [pc, #76]	; (8013248 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80131fa:	4413      	add	r3, r2
 80131fc:	4299      	cmp	r1, r3
 80131fe:	d11c      	bne.n	801323a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013200:	69bb      	ldr	r3, [r7, #24]
 8013202:	3304      	adds	r3, #4
 8013204:	4618      	mov	r0, r3
 8013206:	f7fd feb5 	bl	8010f74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801320a:	69bb      	ldr	r3, [r7, #24]
 801320c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801320e:	4b0f      	ldr	r3, [pc, #60]	; (801324c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	429a      	cmp	r2, r3
 8013214:	d903      	bls.n	801321e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8013216:	69bb      	ldr	r3, [r7, #24]
 8013218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801321a:	4a0c      	ldr	r2, [pc, #48]	; (801324c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801321c:	6013      	str	r3, [r2, #0]
 801321e:	69bb      	ldr	r3, [r7, #24]
 8013220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013222:	4613      	mov	r3, r2
 8013224:	009b      	lsls	r3, r3, #2
 8013226:	4413      	add	r3, r2
 8013228:	009b      	lsls	r3, r3, #2
 801322a:	4a07      	ldr	r2, [pc, #28]	; (8013248 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801322c:	441a      	add	r2, r3
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	3304      	adds	r3, #4
 8013232:	4619      	mov	r1, r3
 8013234:	4610      	mov	r0, r2
 8013236:	f7fd fe40 	bl	8010eba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801323a:	bf00      	nop
 801323c:	3720      	adds	r7, #32
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}
 8013242:	bf00      	nop
 8013244:	20000e1c 	.word	0x20000e1c
 8013248:	20000e20 	.word	0x20000e20
 801324c:	200012f8 	.word	0x200012f8

08013250 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013250:	b480      	push	{r7}
 8013252:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013254:	4b07      	ldr	r3, [pc, #28]	; (8013274 <pvTaskIncrementMutexHeldCount+0x24>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d004      	beq.n	8013266 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801325c:	4b05      	ldr	r3, [pc, #20]	; (8013274 <pvTaskIncrementMutexHeldCount+0x24>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013262:	3201      	adds	r2, #1
 8013264:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013266:	4b03      	ldr	r3, [pc, #12]	; (8013274 <pvTaskIncrementMutexHeldCount+0x24>)
 8013268:	681b      	ldr	r3, [r3, #0]
	}
 801326a:	4618      	mov	r0, r3
 801326c:	46bd      	mov	sp, r7
 801326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013272:	4770      	bx	lr
 8013274:	20000e1c 	.word	0x20000e1c

08013278 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013282:	4b21      	ldr	r3, [pc, #132]	; (8013308 <prvAddCurrentTaskToDelayedList+0x90>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013288:	4b20      	ldr	r3, [pc, #128]	; (801330c <prvAddCurrentTaskToDelayedList+0x94>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	3304      	adds	r3, #4
 801328e:	4618      	mov	r0, r3
 8013290:	f7fd fe70 	bl	8010f74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801329a:	d10a      	bne.n	80132b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d007      	beq.n	80132b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80132a2:	4b1a      	ldr	r3, [pc, #104]	; (801330c <prvAddCurrentTaskToDelayedList+0x94>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	3304      	adds	r3, #4
 80132a8:	4619      	mov	r1, r3
 80132aa:	4819      	ldr	r0, [pc, #100]	; (8013310 <prvAddCurrentTaskToDelayedList+0x98>)
 80132ac:	f7fd fe05 	bl	8010eba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80132b0:	e026      	b.n	8013300 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80132b2:	68fa      	ldr	r2, [r7, #12]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	4413      	add	r3, r2
 80132b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80132ba:	4b14      	ldr	r3, [pc, #80]	; (801330c <prvAddCurrentTaskToDelayedList+0x94>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	68ba      	ldr	r2, [r7, #8]
 80132c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80132c2:	68ba      	ldr	r2, [r7, #8]
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d209      	bcs.n	80132de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80132ca:	4b12      	ldr	r3, [pc, #72]	; (8013314 <prvAddCurrentTaskToDelayedList+0x9c>)
 80132cc:	681a      	ldr	r2, [r3, #0]
 80132ce:	4b0f      	ldr	r3, [pc, #60]	; (801330c <prvAddCurrentTaskToDelayedList+0x94>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	3304      	adds	r3, #4
 80132d4:	4619      	mov	r1, r3
 80132d6:	4610      	mov	r0, r2
 80132d8:	f7fd fe13 	bl	8010f02 <vListInsert>
}
 80132dc:	e010      	b.n	8013300 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80132de:	4b0e      	ldr	r3, [pc, #56]	; (8013318 <prvAddCurrentTaskToDelayedList+0xa0>)
 80132e0:	681a      	ldr	r2, [r3, #0]
 80132e2:	4b0a      	ldr	r3, [pc, #40]	; (801330c <prvAddCurrentTaskToDelayedList+0x94>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	3304      	adds	r3, #4
 80132e8:	4619      	mov	r1, r3
 80132ea:	4610      	mov	r0, r2
 80132ec:	f7fd fe09 	bl	8010f02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80132f0:	4b0a      	ldr	r3, [pc, #40]	; (801331c <prvAddCurrentTaskToDelayedList+0xa4>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	68ba      	ldr	r2, [r7, #8]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d202      	bcs.n	8013300 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80132fa:	4a08      	ldr	r2, [pc, #32]	; (801331c <prvAddCurrentTaskToDelayedList+0xa4>)
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	6013      	str	r3, [r2, #0]
}
 8013300:	bf00      	nop
 8013302:	3710      	adds	r7, #16
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}
 8013308:	200012f4 	.word	0x200012f4
 801330c:	20000e1c 	.word	0x20000e1c
 8013310:	200012dc 	.word	0x200012dc
 8013314:	200012ac 	.word	0x200012ac
 8013318:	200012a8 	.word	0x200012a8
 801331c:	20001310 	.word	0x20001310

08013320 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b08a      	sub	sp, #40	; 0x28
 8013324:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013326:	2300      	movs	r3, #0
 8013328:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801332a:	f000 fb07 	bl	801393c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801332e:	4b1c      	ldr	r3, [pc, #112]	; (80133a0 <xTimerCreateTimerTask+0x80>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d021      	beq.n	801337a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013336:	2300      	movs	r3, #0
 8013338:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801333a:	2300      	movs	r3, #0
 801333c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801333e:	1d3a      	adds	r2, r7, #4
 8013340:	f107 0108 	add.w	r1, r7, #8
 8013344:	f107 030c 	add.w	r3, r7, #12
 8013348:	4618      	mov	r0, r3
 801334a:	f7fd fd6f 	bl	8010e2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801334e:	6879      	ldr	r1, [r7, #4]
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	68fa      	ldr	r2, [r7, #12]
 8013354:	9202      	str	r2, [sp, #8]
 8013356:	9301      	str	r3, [sp, #4]
 8013358:	2302      	movs	r3, #2
 801335a:	9300      	str	r3, [sp, #0]
 801335c:	2300      	movs	r3, #0
 801335e:	460a      	mov	r2, r1
 8013360:	4910      	ldr	r1, [pc, #64]	; (80133a4 <xTimerCreateTimerTask+0x84>)
 8013362:	4811      	ldr	r0, [pc, #68]	; (80133a8 <xTimerCreateTimerTask+0x88>)
 8013364:	f7fe fe3e 	bl	8011fe4 <xTaskCreateStatic>
 8013368:	4603      	mov	r3, r0
 801336a:	4a10      	ldr	r2, [pc, #64]	; (80133ac <xTimerCreateTimerTask+0x8c>)
 801336c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801336e:	4b0f      	ldr	r3, [pc, #60]	; (80133ac <xTimerCreateTimerTask+0x8c>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d001      	beq.n	801337a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013376:	2301      	movs	r3, #1
 8013378:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d10a      	bne.n	8013396 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013384:	f383 8811 	msr	BASEPRI, r3
 8013388:	f3bf 8f6f 	isb	sy
 801338c:	f3bf 8f4f 	dsb	sy
 8013390:	613b      	str	r3, [r7, #16]
}
 8013392:	bf00      	nop
 8013394:	e7fe      	b.n	8013394 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013396:	697b      	ldr	r3, [r7, #20]
}
 8013398:	4618      	mov	r0, r3
 801339a:	3718      	adds	r7, #24
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}
 80133a0:	2000134c 	.word	0x2000134c
 80133a4:	0801c1e0 	.word	0x0801c1e0
 80133a8:	080134e5 	.word	0x080134e5
 80133ac:	20001350 	.word	0x20001350

080133b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b08a      	sub	sp, #40	; 0x28
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	607a      	str	r2, [r7, #4]
 80133bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80133be:	2300      	movs	r3, #0
 80133c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d10a      	bne.n	80133de <xTimerGenericCommand+0x2e>
	__asm volatile
 80133c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133cc:	f383 8811 	msr	BASEPRI, r3
 80133d0:	f3bf 8f6f 	isb	sy
 80133d4:	f3bf 8f4f 	dsb	sy
 80133d8:	623b      	str	r3, [r7, #32]
}
 80133da:	bf00      	nop
 80133dc:	e7fe      	b.n	80133dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80133de:	4b1a      	ldr	r3, [pc, #104]	; (8013448 <xTimerGenericCommand+0x98>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d02a      	beq.n	801343c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	2b05      	cmp	r3, #5
 80133f6:	dc18      	bgt.n	801342a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80133f8:	f7ff fdb4 	bl	8012f64 <xTaskGetSchedulerState>
 80133fc:	4603      	mov	r3, r0
 80133fe:	2b02      	cmp	r3, #2
 8013400:	d109      	bne.n	8013416 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013402:	4b11      	ldr	r3, [pc, #68]	; (8013448 <xTimerGenericCommand+0x98>)
 8013404:	6818      	ldr	r0, [r3, #0]
 8013406:	f107 0110 	add.w	r1, r7, #16
 801340a:	2300      	movs	r3, #0
 801340c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801340e:	f7fd ff83 	bl	8011318 <xQueueGenericSend>
 8013412:	6278      	str	r0, [r7, #36]	; 0x24
 8013414:	e012      	b.n	801343c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013416:	4b0c      	ldr	r3, [pc, #48]	; (8013448 <xTimerGenericCommand+0x98>)
 8013418:	6818      	ldr	r0, [r3, #0]
 801341a:	f107 0110 	add.w	r1, r7, #16
 801341e:	2300      	movs	r3, #0
 8013420:	2200      	movs	r2, #0
 8013422:	f7fd ff79 	bl	8011318 <xQueueGenericSend>
 8013426:	6278      	str	r0, [r7, #36]	; 0x24
 8013428:	e008      	b.n	801343c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801342a:	4b07      	ldr	r3, [pc, #28]	; (8013448 <xTimerGenericCommand+0x98>)
 801342c:	6818      	ldr	r0, [r3, #0]
 801342e:	f107 0110 	add.w	r1, r7, #16
 8013432:	2300      	movs	r3, #0
 8013434:	683a      	ldr	r2, [r7, #0]
 8013436:	f7fe f86d 	bl	8011514 <xQueueGenericSendFromISR>
 801343a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801343e:	4618      	mov	r0, r3
 8013440:	3728      	adds	r7, #40	; 0x28
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	2000134c 	.word	0x2000134c

0801344c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b088      	sub	sp, #32
 8013450:	af02      	add	r7, sp, #8
 8013452:	6078      	str	r0, [r7, #4]
 8013454:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013456:	4b22      	ldr	r3, [pc, #136]	; (80134e0 <prvProcessExpiredTimer+0x94>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	68db      	ldr	r3, [r3, #12]
 801345c:	68db      	ldr	r3, [r3, #12]
 801345e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	3304      	adds	r3, #4
 8013464:	4618      	mov	r0, r3
 8013466:	f7fd fd85 	bl	8010f74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013470:	f003 0304 	and.w	r3, r3, #4
 8013474:	2b00      	cmp	r3, #0
 8013476:	d022      	beq.n	80134be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	699a      	ldr	r2, [r3, #24]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	18d1      	adds	r1, r2, r3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	683a      	ldr	r2, [r7, #0]
 8013484:	6978      	ldr	r0, [r7, #20]
 8013486:	f000 f8d1 	bl	801362c <prvInsertTimerInActiveList>
 801348a:	4603      	mov	r3, r0
 801348c:	2b00      	cmp	r3, #0
 801348e:	d01f      	beq.n	80134d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013490:	2300      	movs	r3, #0
 8013492:	9300      	str	r3, [sp, #0]
 8013494:	2300      	movs	r3, #0
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	2100      	movs	r1, #0
 801349a:	6978      	ldr	r0, [r7, #20]
 801349c:	f7ff ff88 	bl	80133b0 <xTimerGenericCommand>
 80134a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d113      	bne.n	80134d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80134a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ac:	f383 8811 	msr	BASEPRI, r3
 80134b0:	f3bf 8f6f 	isb	sy
 80134b4:	f3bf 8f4f 	dsb	sy
 80134b8:	60fb      	str	r3, [r7, #12]
}
 80134ba:	bf00      	nop
 80134bc:	e7fe      	b.n	80134bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134c4:	f023 0301 	bic.w	r3, r3, #1
 80134c8:	b2da      	uxtb	r2, r3
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	6a1b      	ldr	r3, [r3, #32]
 80134d4:	6978      	ldr	r0, [r7, #20]
 80134d6:	4798      	blx	r3
}
 80134d8:	bf00      	nop
 80134da:	3718      	adds	r7, #24
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	20001344 	.word	0x20001344

080134e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80134ec:	f107 0308 	add.w	r3, r7, #8
 80134f0:	4618      	mov	r0, r3
 80134f2:	f000 f857 	bl	80135a4 <prvGetNextExpireTime>
 80134f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	4619      	mov	r1, r3
 80134fc:	68f8      	ldr	r0, [r7, #12]
 80134fe:	f000 f803 	bl	8013508 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013502:	f000 f8d5 	bl	80136b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013506:	e7f1      	b.n	80134ec <prvTimerTask+0x8>

08013508 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b084      	sub	sp, #16
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013512:	f7ff f92b 	bl	801276c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013516:	f107 0308 	add.w	r3, r7, #8
 801351a:	4618      	mov	r0, r3
 801351c:	f000 f866 	bl	80135ec <prvSampleTimeNow>
 8013520:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d130      	bne.n	801358a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d10a      	bne.n	8013544 <prvProcessTimerOrBlockTask+0x3c>
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	429a      	cmp	r2, r3
 8013534:	d806      	bhi.n	8013544 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013536:	f7ff f927 	bl	8012788 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801353a:	68f9      	ldr	r1, [r7, #12]
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f7ff ff85 	bl	801344c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013542:	e024      	b.n	801358e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d008      	beq.n	801355c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801354a:	4b13      	ldr	r3, [pc, #76]	; (8013598 <prvProcessTimerOrBlockTask+0x90>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d101      	bne.n	8013558 <prvProcessTimerOrBlockTask+0x50>
 8013554:	2301      	movs	r3, #1
 8013556:	e000      	b.n	801355a <prvProcessTimerOrBlockTask+0x52>
 8013558:	2300      	movs	r3, #0
 801355a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801355c:	4b0f      	ldr	r3, [pc, #60]	; (801359c <prvProcessTimerOrBlockTask+0x94>)
 801355e:	6818      	ldr	r0, [r3, #0]
 8013560:	687a      	ldr	r2, [r7, #4]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	1ad3      	subs	r3, r2, r3
 8013566:	683a      	ldr	r2, [r7, #0]
 8013568:	4619      	mov	r1, r3
 801356a:	f7fe fd07 	bl	8011f7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801356e:	f7ff f90b 	bl	8012788 <xTaskResumeAll>
 8013572:	4603      	mov	r3, r0
 8013574:	2b00      	cmp	r3, #0
 8013576:	d10a      	bne.n	801358e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013578:	4b09      	ldr	r3, [pc, #36]	; (80135a0 <prvProcessTimerOrBlockTask+0x98>)
 801357a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801357e:	601a      	str	r2, [r3, #0]
 8013580:	f3bf 8f4f 	dsb	sy
 8013584:	f3bf 8f6f 	isb	sy
}
 8013588:	e001      	b.n	801358e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801358a:	f7ff f8fd 	bl	8012788 <xTaskResumeAll>
}
 801358e:	bf00      	nop
 8013590:	3710      	adds	r7, #16
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}
 8013596:	bf00      	nop
 8013598:	20001348 	.word	0x20001348
 801359c:	2000134c 	.word	0x2000134c
 80135a0:	e000ed04 	.word	0xe000ed04

080135a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80135a4:	b480      	push	{r7}
 80135a6:	b085      	sub	sp, #20
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80135ac:	4b0e      	ldr	r3, [pc, #56]	; (80135e8 <prvGetNextExpireTime+0x44>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d101      	bne.n	80135ba <prvGetNextExpireTime+0x16>
 80135b6:	2201      	movs	r2, #1
 80135b8:	e000      	b.n	80135bc <prvGetNextExpireTime+0x18>
 80135ba:	2200      	movs	r2, #0
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d105      	bne.n	80135d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80135c8:	4b07      	ldr	r3, [pc, #28]	; (80135e8 <prvGetNextExpireTime+0x44>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	68db      	ldr	r3, [r3, #12]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	60fb      	str	r3, [r7, #12]
 80135d2:	e001      	b.n	80135d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80135d4:	2300      	movs	r3, #0
 80135d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80135d8:	68fb      	ldr	r3, [r7, #12]
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3714      	adds	r7, #20
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr
 80135e6:	bf00      	nop
 80135e8:	20001344 	.word	0x20001344

080135ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b084      	sub	sp, #16
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80135f4:	f7ff f966 	bl	80128c4 <xTaskGetTickCount>
 80135f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80135fa:	4b0b      	ldr	r3, [pc, #44]	; (8013628 <prvSampleTimeNow+0x3c>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	429a      	cmp	r2, r3
 8013602:	d205      	bcs.n	8013610 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013604:	f000 f936 	bl	8013874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2201      	movs	r2, #1
 801360c:	601a      	str	r2, [r3, #0]
 801360e:	e002      	b.n	8013616 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2200      	movs	r2, #0
 8013614:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013616:	4a04      	ldr	r2, [pc, #16]	; (8013628 <prvSampleTimeNow+0x3c>)
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801361c:	68fb      	ldr	r3, [r7, #12]
}
 801361e:	4618      	mov	r0, r3
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	20001354 	.word	0x20001354

0801362c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b086      	sub	sp, #24
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	607a      	str	r2, [r7, #4]
 8013638:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801363a:	2300      	movs	r3, #0
 801363c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	68ba      	ldr	r2, [r7, #8]
 8013642:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	68fa      	ldr	r2, [r7, #12]
 8013648:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	429a      	cmp	r2, r3
 8013650:	d812      	bhi.n	8013678 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	1ad2      	subs	r2, r2, r3
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	699b      	ldr	r3, [r3, #24]
 801365c:	429a      	cmp	r2, r3
 801365e:	d302      	bcc.n	8013666 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013660:	2301      	movs	r3, #1
 8013662:	617b      	str	r3, [r7, #20]
 8013664:	e01b      	b.n	801369e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013666:	4b10      	ldr	r3, [pc, #64]	; (80136a8 <prvInsertTimerInActiveList+0x7c>)
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	3304      	adds	r3, #4
 801366e:	4619      	mov	r1, r3
 8013670:	4610      	mov	r0, r2
 8013672:	f7fd fc46 	bl	8010f02 <vListInsert>
 8013676:	e012      	b.n	801369e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	429a      	cmp	r2, r3
 801367e:	d206      	bcs.n	801368e <prvInsertTimerInActiveList+0x62>
 8013680:	68ba      	ldr	r2, [r7, #8]
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	429a      	cmp	r2, r3
 8013686:	d302      	bcc.n	801368e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013688:	2301      	movs	r3, #1
 801368a:	617b      	str	r3, [r7, #20]
 801368c:	e007      	b.n	801369e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801368e:	4b07      	ldr	r3, [pc, #28]	; (80136ac <prvInsertTimerInActiveList+0x80>)
 8013690:	681a      	ldr	r2, [r3, #0]
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	3304      	adds	r3, #4
 8013696:	4619      	mov	r1, r3
 8013698:	4610      	mov	r0, r2
 801369a:	f7fd fc32 	bl	8010f02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801369e:	697b      	ldr	r3, [r7, #20]
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3718      	adds	r7, #24
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	20001348 	.word	0x20001348
 80136ac:	20001344 	.word	0x20001344

080136b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b08e      	sub	sp, #56	; 0x38
 80136b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80136b6:	e0ca      	b.n	801384e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	da18      	bge.n	80136f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80136be:	1d3b      	adds	r3, r7, #4
 80136c0:	3304      	adds	r3, #4
 80136c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80136c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d10a      	bne.n	80136e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80136ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ce:	f383 8811 	msr	BASEPRI, r3
 80136d2:	f3bf 8f6f 	isb	sy
 80136d6:	f3bf 8f4f 	dsb	sy
 80136da:	61fb      	str	r3, [r7, #28]
}
 80136dc:	bf00      	nop
 80136de:	e7fe      	b.n	80136de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80136e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136e6:	6850      	ldr	r0, [r2, #4]
 80136e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ea:	6892      	ldr	r2, [r2, #8]
 80136ec:	4611      	mov	r1, r2
 80136ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f2c0 80aa 	blt.w	801384c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80136fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fe:	695b      	ldr	r3, [r3, #20]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d004      	beq.n	801370e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013706:	3304      	adds	r3, #4
 8013708:	4618      	mov	r0, r3
 801370a:	f7fd fc33 	bl	8010f74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801370e:	463b      	mov	r3, r7
 8013710:	4618      	mov	r0, r3
 8013712:	f7ff ff6b 	bl	80135ec <prvSampleTimeNow>
 8013716:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2b09      	cmp	r3, #9
 801371c:	f200 8097 	bhi.w	801384e <prvProcessReceivedCommands+0x19e>
 8013720:	a201      	add	r2, pc, #4	; (adr r2, 8013728 <prvProcessReceivedCommands+0x78>)
 8013722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013726:	bf00      	nop
 8013728:	08013751 	.word	0x08013751
 801372c:	08013751 	.word	0x08013751
 8013730:	08013751 	.word	0x08013751
 8013734:	080137c5 	.word	0x080137c5
 8013738:	080137d9 	.word	0x080137d9
 801373c:	08013823 	.word	0x08013823
 8013740:	08013751 	.word	0x08013751
 8013744:	08013751 	.word	0x08013751
 8013748:	080137c5 	.word	0x080137c5
 801374c:	080137d9 	.word	0x080137d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013756:	f043 0301 	orr.w	r3, r3, #1
 801375a:	b2da      	uxtb	r2, r3
 801375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013762:	68ba      	ldr	r2, [r7, #8]
 8013764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013766:	699b      	ldr	r3, [r3, #24]
 8013768:	18d1      	adds	r1, r2, r3
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801376e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013770:	f7ff ff5c 	bl	801362c <prvInsertTimerInActiveList>
 8013774:	4603      	mov	r3, r0
 8013776:	2b00      	cmp	r3, #0
 8013778:	d069      	beq.n	801384e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801377c:	6a1b      	ldr	r3, [r3, #32]
 801377e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013780:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013788:	f003 0304 	and.w	r3, r3, #4
 801378c:	2b00      	cmp	r3, #0
 801378e:	d05e      	beq.n	801384e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013790:	68ba      	ldr	r2, [r7, #8]
 8013792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013794:	699b      	ldr	r3, [r3, #24]
 8013796:	441a      	add	r2, r3
 8013798:	2300      	movs	r3, #0
 801379a:	9300      	str	r3, [sp, #0]
 801379c:	2300      	movs	r3, #0
 801379e:	2100      	movs	r1, #0
 80137a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137a2:	f7ff fe05 	bl	80133b0 <xTimerGenericCommand>
 80137a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80137a8:	6a3b      	ldr	r3, [r7, #32]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d14f      	bne.n	801384e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80137ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b2:	f383 8811 	msr	BASEPRI, r3
 80137b6:	f3bf 8f6f 	isb	sy
 80137ba:	f3bf 8f4f 	dsb	sy
 80137be:	61bb      	str	r3, [r7, #24]
}
 80137c0:	bf00      	nop
 80137c2:	e7fe      	b.n	80137c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80137c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137ca:	f023 0301 	bic.w	r3, r3, #1
 80137ce:	b2da      	uxtb	r2, r3
 80137d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80137d6:	e03a      	b.n	801384e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80137d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137de:	f043 0301 	orr.w	r3, r3, #1
 80137e2:	b2da      	uxtb	r2, r3
 80137e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80137ea:	68ba      	ldr	r2, [r7, #8]
 80137ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80137f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f2:	699b      	ldr	r3, [r3, #24]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d10a      	bne.n	801380e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80137f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137fc:	f383 8811 	msr	BASEPRI, r3
 8013800:	f3bf 8f6f 	isb	sy
 8013804:	f3bf 8f4f 	dsb	sy
 8013808:	617b      	str	r3, [r7, #20]
}
 801380a:	bf00      	nop
 801380c:	e7fe      	b.n	801380c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013810:	699a      	ldr	r2, [r3, #24]
 8013812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013814:	18d1      	adds	r1, r2, r3
 8013816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801381a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801381c:	f7ff ff06 	bl	801362c <prvInsertTimerInActiveList>
					break;
 8013820:	e015      	b.n	801384e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013828:	f003 0302 	and.w	r3, r3, #2
 801382c:	2b00      	cmp	r3, #0
 801382e:	d103      	bne.n	8013838 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013832:	f000 fbdd 	bl	8013ff0 <vPortFree>
 8013836:	e00a      	b.n	801384e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801383e:	f023 0301 	bic.w	r3, r3, #1
 8013842:	b2da      	uxtb	r2, r3
 8013844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801384a:	e000      	b.n	801384e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801384c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801384e:	4b08      	ldr	r3, [pc, #32]	; (8013870 <prvProcessReceivedCommands+0x1c0>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	1d39      	adds	r1, r7, #4
 8013854:	2200      	movs	r2, #0
 8013856:	4618      	mov	r0, r3
 8013858:	f7fd ff84 	bl	8011764 <xQueueReceive>
 801385c:	4603      	mov	r3, r0
 801385e:	2b00      	cmp	r3, #0
 8013860:	f47f af2a 	bne.w	80136b8 <prvProcessReceivedCommands+0x8>
	}
}
 8013864:	bf00      	nop
 8013866:	bf00      	nop
 8013868:	3730      	adds	r7, #48	; 0x30
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop
 8013870:	2000134c 	.word	0x2000134c

08013874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b088      	sub	sp, #32
 8013878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801387a:	e048      	b.n	801390e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801387c:	4b2d      	ldr	r3, [pc, #180]	; (8013934 <prvSwitchTimerLists+0xc0>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013886:	4b2b      	ldr	r3, [pc, #172]	; (8013934 <prvSwitchTimerLists+0xc0>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	68db      	ldr	r3, [r3, #12]
 801388e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	3304      	adds	r3, #4
 8013894:	4618      	mov	r0, r3
 8013896:	f7fd fb6d 	bl	8010f74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	6a1b      	ldr	r3, [r3, #32]
 801389e:	68f8      	ldr	r0, [r7, #12]
 80138a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80138a8:	f003 0304 	and.w	r3, r3, #4
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d02e      	beq.n	801390e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	699b      	ldr	r3, [r3, #24]
 80138b4:	693a      	ldr	r2, [r7, #16]
 80138b6:	4413      	add	r3, r2
 80138b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80138ba:	68ba      	ldr	r2, [r7, #8]
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	429a      	cmp	r2, r3
 80138c0:	d90e      	bls.n	80138e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	68ba      	ldr	r2, [r7, #8]
 80138c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	68fa      	ldr	r2, [r7, #12]
 80138cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80138ce:	4b19      	ldr	r3, [pc, #100]	; (8013934 <prvSwitchTimerLists+0xc0>)
 80138d0:	681a      	ldr	r2, [r3, #0]
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	3304      	adds	r3, #4
 80138d6:	4619      	mov	r1, r3
 80138d8:	4610      	mov	r0, r2
 80138da:	f7fd fb12 	bl	8010f02 <vListInsert>
 80138de:	e016      	b.n	801390e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80138e0:	2300      	movs	r3, #0
 80138e2:	9300      	str	r3, [sp, #0]
 80138e4:	2300      	movs	r3, #0
 80138e6:	693a      	ldr	r2, [r7, #16]
 80138e8:	2100      	movs	r1, #0
 80138ea:	68f8      	ldr	r0, [r7, #12]
 80138ec:	f7ff fd60 	bl	80133b0 <xTimerGenericCommand>
 80138f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d10a      	bne.n	801390e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80138f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138fc:	f383 8811 	msr	BASEPRI, r3
 8013900:	f3bf 8f6f 	isb	sy
 8013904:	f3bf 8f4f 	dsb	sy
 8013908:	603b      	str	r3, [r7, #0]
}
 801390a:	bf00      	nop
 801390c:	e7fe      	b.n	801390c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801390e:	4b09      	ldr	r3, [pc, #36]	; (8013934 <prvSwitchTimerLists+0xc0>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d1b1      	bne.n	801387c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013918:	4b06      	ldr	r3, [pc, #24]	; (8013934 <prvSwitchTimerLists+0xc0>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801391e:	4b06      	ldr	r3, [pc, #24]	; (8013938 <prvSwitchTimerLists+0xc4>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	4a04      	ldr	r2, [pc, #16]	; (8013934 <prvSwitchTimerLists+0xc0>)
 8013924:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013926:	4a04      	ldr	r2, [pc, #16]	; (8013938 <prvSwitchTimerLists+0xc4>)
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	6013      	str	r3, [r2, #0]
}
 801392c:	bf00      	nop
 801392e:	3718      	adds	r7, #24
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}
 8013934:	20001344 	.word	0x20001344
 8013938:	20001348 	.word	0x20001348

0801393c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b082      	sub	sp, #8
 8013940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013942:	f000 f967 	bl	8013c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013946:	4b15      	ldr	r3, [pc, #84]	; (801399c <prvCheckForValidListAndQueue+0x60>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d120      	bne.n	8013990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801394e:	4814      	ldr	r0, [pc, #80]	; (80139a0 <prvCheckForValidListAndQueue+0x64>)
 8013950:	f7fd fa86 	bl	8010e60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013954:	4813      	ldr	r0, [pc, #76]	; (80139a4 <prvCheckForValidListAndQueue+0x68>)
 8013956:	f7fd fa83 	bl	8010e60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801395a:	4b13      	ldr	r3, [pc, #76]	; (80139a8 <prvCheckForValidListAndQueue+0x6c>)
 801395c:	4a10      	ldr	r2, [pc, #64]	; (80139a0 <prvCheckForValidListAndQueue+0x64>)
 801395e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013960:	4b12      	ldr	r3, [pc, #72]	; (80139ac <prvCheckForValidListAndQueue+0x70>)
 8013962:	4a10      	ldr	r2, [pc, #64]	; (80139a4 <prvCheckForValidListAndQueue+0x68>)
 8013964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013966:	2300      	movs	r3, #0
 8013968:	9300      	str	r3, [sp, #0]
 801396a:	4b11      	ldr	r3, [pc, #68]	; (80139b0 <prvCheckForValidListAndQueue+0x74>)
 801396c:	4a11      	ldr	r2, [pc, #68]	; (80139b4 <prvCheckForValidListAndQueue+0x78>)
 801396e:	2110      	movs	r1, #16
 8013970:	200a      	movs	r0, #10
 8013972:	f7fd fb91 	bl	8011098 <xQueueGenericCreateStatic>
 8013976:	4603      	mov	r3, r0
 8013978:	4a08      	ldr	r2, [pc, #32]	; (801399c <prvCheckForValidListAndQueue+0x60>)
 801397a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801397c:	4b07      	ldr	r3, [pc, #28]	; (801399c <prvCheckForValidListAndQueue+0x60>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d005      	beq.n	8013990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013984:	4b05      	ldr	r3, [pc, #20]	; (801399c <prvCheckForValidListAndQueue+0x60>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	490b      	ldr	r1, [pc, #44]	; (80139b8 <prvCheckForValidListAndQueue+0x7c>)
 801398a:	4618      	mov	r0, r3
 801398c:	f7fe faa2 	bl	8011ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013990:	f000 f970 	bl	8013c74 <vPortExitCritical>
}
 8013994:	bf00      	nop
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
 801399a:	bf00      	nop
 801399c:	2000134c 	.word	0x2000134c
 80139a0:	2000131c 	.word	0x2000131c
 80139a4:	20001330 	.word	0x20001330
 80139a8:	20001344 	.word	0x20001344
 80139ac:	20001348 	.word	0x20001348
 80139b0:	200013f8 	.word	0x200013f8
 80139b4:	20001358 	.word	0x20001358
 80139b8:	0801c1e8 	.word	0x0801c1e8

080139bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80139bc:	b480      	push	{r7}
 80139be:	b085      	sub	sp, #20
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	3b04      	subs	r3, #4
 80139cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80139d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	3b04      	subs	r3, #4
 80139da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	f023 0201 	bic.w	r2, r3, #1
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	3b04      	subs	r3, #4
 80139ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80139ec:	4a0c      	ldr	r2, [pc, #48]	; (8013a20 <pxPortInitialiseStack+0x64>)
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	3b14      	subs	r3, #20
 80139f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	3b04      	subs	r3, #4
 8013a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	f06f 0202 	mvn.w	r2, #2
 8013a0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	3b20      	subs	r3, #32
 8013a10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013a12:	68fb      	ldr	r3, [r7, #12]
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3714      	adds	r7, #20
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr
 8013a20:	08013a25 	.word	0x08013a25

08013a24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013a24:	b480      	push	{r7}
 8013a26:	b085      	sub	sp, #20
 8013a28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013a2e:	4b12      	ldr	r3, [pc, #72]	; (8013a78 <prvTaskExitError+0x54>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a36:	d00a      	beq.n	8013a4e <prvTaskExitError+0x2a>
	__asm volatile
 8013a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a3c:	f383 8811 	msr	BASEPRI, r3
 8013a40:	f3bf 8f6f 	isb	sy
 8013a44:	f3bf 8f4f 	dsb	sy
 8013a48:	60fb      	str	r3, [r7, #12]
}
 8013a4a:	bf00      	nop
 8013a4c:	e7fe      	b.n	8013a4c <prvTaskExitError+0x28>
	__asm volatile
 8013a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a52:	f383 8811 	msr	BASEPRI, r3
 8013a56:	f3bf 8f6f 	isb	sy
 8013a5a:	f3bf 8f4f 	dsb	sy
 8013a5e:	60bb      	str	r3, [r7, #8]
}
 8013a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013a62:	bf00      	nop
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d0fc      	beq.n	8013a64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013a6a:	bf00      	nop
 8013a6c:	bf00      	nop
 8013a6e:	3714      	adds	r7, #20
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr
 8013a78:	20000084 	.word	0x20000084
 8013a7c:	00000000 	.word	0x00000000

08013a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013a80:	4b07      	ldr	r3, [pc, #28]	; (8013aa0 <pxCurrentTCBConst2>)
 8013a82:	6819      	ldr	r1, [r3, #0]
 8013a84:	6808      	ldr	r0, [r1, #0]
 8013a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a8a:	f380 8809 	msr	PSP, r0
 8013a8e:	f3bf 8f6f 	isb	sy
 8013a92:	f04f 0000 	mov.w	r0, #0
 8013a96:	f380 8811 	msr	BASEPRI, r0
 8013a9a:	4770      	bx	lr
 8013a9c:	f3af 8000 	nop.w

08013aa0 <pxCurrentTCBConst2>:
 8013aa0:	20000e1c 	.word	0x20000e1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013aa4:	bf00      	nop
 8013aa6:	bf00      	nop

08013aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013aa8:	4808      	ldr	r0, [pc, #32]	; (8013acc <prvPortStartFirstTask+0x24>)
 8013aaa:	6800      	ldr	r0, [r0, #0]
 8013aac:	6800      	ldr	r0, [r0, #0]
 8013aae:	f380 8808 	msr	MSP, r0
 8013ab2:	f04f 0000 	mov.w	r0, #0
 8013ab6:	f380 8814 	msr	CONTROL, r0
 8013aba:	b662      	cpsie	i
 8013abc:	b661      	cpsie	f
 8013abe:	f3bf 8f4f 	dsb	sy
 8013ac2:	f3bf 8f6f 	isb	sy
 8013ac6:	df00      	svc	0
 8013ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013aca:	bf00      	nop
 8013acc:	e000ed08 	.word	0xe000ed08

08013ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b086      	sub	sp, #24
 8013ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013ad6:	4b46      	ldr	r3, [pc, #280]	; (8013bf0 <xPortStartScheduler+0x120>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	4a46      	ldr	r2, [pc, #280]	; (8013bf4 <xPortStartScheduler+0x124>)
 8013adc:	4293      	cmp	r3, r2
 8013ade:	d10a      	bne.n	8013af6 <xPortStartScheduler+0x26>
	__asm volatile
 8013ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae4:	f383 8811 	msr	BASEPRI, r3
 8013ae8:	f3bf 8f6f 	isb	sy
 8013aec:	f3bf 8f4f 	dsb	sy
 8013af0:	613b      	str	r3, [r7, #16]
}
 8013af2:	bf00      	nop
 8013af4:	e7fe      	b.n	8013af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013af6:	4b3e      	ldr	r3, [pc, #248]	; (8013bf0 <xPortStartScheduler+0x120>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4a3f      	ldr	r2, [pc, #252]	; (8013bf8 <xPortStartScheduler+0x128>)
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d10a      	bne.n	8013b16 <xPortStartScheduler+0x46>
	__asm volatile
 8013b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b04:	f383 8811 	msr	BASEPRI, r3
 8013b08:	f3bf 8f6f 	isb	sy
 8013b0c:	f3bf 8f4f 	dsb	sy
 8013b10:	60fb      	str	r3, [r7, #12]
}
 8013b12:	bf00      	nop
 8013b14:	e7fe      	b.n	8013b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013b16:	4b39      	ldr	r3, [pc, #228]	; (8013bfc <xPortStartScheduler+0x12c>)
 8013b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	b2db      	uxtb	r3, r3
 8013b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	22ff      	movs	r2, #255	; 0xff
 8013b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	781b      	ldrb	r3, [r3, #0]
 8013b2c:	b2db      	uxtb	r3, r3
 8013b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013b30:	78fb      	ldrb	r3, [r7, #3]
 8013b32:	b2db      	uxtb	r3, r3
 8013b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013b38:	b2da      	uxtb	r2, r3
 8013b3a:	4b31      	ldr	r3, [pc, #196]	; (8013c00 <xPortStartScheduler+0x130>)
 8013b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013b3e:	4b31      	ldr	r3, [pc, #196]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b40:	2207      	movs	r2, #7
 8013b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013b44:	e009      	b.n	8013b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013b46:	4b2f      	ldr	r3, [pc, #188]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	3b01      	subs	r3, #1
 8013b4c:	4a2d      	ldr	r2, [pc, #180]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013b50:	78fb      	ldrb	r3, [r7, #3]
 8013b52:	b2db      	uxtb	r3, r3
 8013b54:	005b      	lsls	r3, r3, #1
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013b5a:	78fb      	ldrb	r3, [r7, #3]
 8013b5c:	b2db      	uxtb	r3, r3
 8013b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b62:	2b80      	cmp	r3, #128	; 0x80
 8013b64:	d0ef      	beq.n	8013b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013b66:	4b27      	ldr	r3, [pc, #156]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	f1c3 0307 	rsb	r3, r3, #7
 8013b6e:	2b04      	cmp	r3, #4
 8013b70:	d00a      	beq.n	8013b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8013b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b76:	f383 8811 	msr	BASEPRI, r3
 8013b7a:	f3bf 8f6f 	isb	sy
 8013b7e:	f3bf 8f4f 	dsb	sy
 8013b82:	60bb      	str	r3, [r7, #8]
}
 8013b84:	bf00      	nop
 8013b86:	e7fe      	b.n	8013b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013b88:	4b1e      	ldr	r3, [pc, #120]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	021b      	lsls	r3, r3, #8
 8013b8e:	4a1d      	ldr	r2, [pc, #116]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013b92:	4b1c      	ldr	r3, [pc, #112]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013b9a:	4a1a      	ldr	r2, [pc, #104]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	b2da      	uxtb	r2, r3
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013ba6:	4b18      	ldr	r3, [pc, #96]	; (8013c08 <xPortStartScheduler+0x138>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	4a17      	ldr	r2, [pc, #92]	; (8013c08 <xPortStartScheduler+0x138>)
 8013bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013bb2:	4b15      	ldr	r3, [pc, #84]	; (8013c08 <xPortStartScheduler+0x138>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	4a14      	ldr	r2, [pc, #80]	; (8013c08 <xPortStartScheduler+0x138>)
 8013bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013bbe:	f000 f8dd 	bl	8013d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013bc2:	4b12      	ldr	r3, [pc, #72]	; (8013c0c <xPortStartScheduler+0x13c>)
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013bc8:	f000 f8fc 	bl	8013dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013bcc:	4b10      	ldr	r3, [pc, #64]	; (8013c10 <xPortStartScheduler+0x140>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	4a0f      	ldr	r2, [pc, #60]	; (8013c10 <xPortStartScheduler+0x140>)
 8013bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013bd8:	f7ff ff66 	bl	8013aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013bdc:	f7fe ff3c 	bl	8012a58 <vTaskSwitchContext>
	prvTaskExitError();
 8013be0:	f7ff ff20 	bl	8013a24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013be4:	2300      	movs	r3, #0
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3718      	adds	r7, #24
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	e000ed00 	.word	0xe000ed00
 8013bf4:	410fc271 	.word	0x410fc271
 8013bf8:	410fc270 	.word	0x410fc270
 8013bfc:	e000e400 	.word	0xe000e400
 8013c00:	20001448 	.word	0x20001448
 8013c04:	2000144c 	.word	0x2000144c
 8013c08:	e000ed20 	.word	0xe000ed20
 8013c0c:	20000084 	.word	0x20000084
 8013c10:	e000ef34 	.word	0xe000ef34

08013c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013c14:	b480      	push	{r7}
 8013c16:	b083      	sub	sp, #12
 8013c18:	af00      	add	r7, sp, #0
	__asm volatile
 8013c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1e:	f383 8811 	msr	BASEPRI, r3
 8013c22:	f3bf 8f6f 	isb	sy
 8013c26:	f3bf 8f4f 	dsb	sy
 8013c2a:	607b      	str	r3, [r7, #4]
}
 8013c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013c2e:	4b0f      	ldr	r3, [pc, #60]	; (8013c6c <vPortEnterCritical+0x58>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	3301      	adds	r3, #1
 8013c34:	4a0d      	ldr	r2, [pc, #52]	; (8013c6c <vPortEnterCritical+0x58>)
 8013c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013c38:	4b0c      	ldr	r3, [pc, #48]	; (8013c6c <vPortEnterCritical+0x58>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	2b01      	cmp	r3, #1
 8013c3e:	d10f      	bne.n	8013c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013c40:	4b0b      	ldr	r3, [pc, #44]	; (8013c70 <vPortEnterCritical+0x5c>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	b2db      	uxtb	r3, r3
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d00a      	beq.n	8013c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8013c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c4e:	f383 8811 	msr	BASEPRI, r3
 8013c52:	f3bf 8f6f 	isb	sy
 8013c56:	f3bf 8f4f 	dsb	sy
 8013c5a:	603b      	str	r3, [r7, #0]
}
 8013c5c:	bf00      	nop
 8013c5e:	e7fe      	b.n	8013c5e <vPortEnterCritical+0x4a>
	}
}
 8013c60:	bf00      	nop
 8013c62:	370c      	adds	r7, #12
 8013c64:	46bd      	mov	sp, r7
 8013c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6a:	4770      	bx	lr
 8013c6c:	20000084 	.word	0x20000084
 8013c70:	e000ed04 	.word	0xe000ed04

08013c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013c74:	b480      	push	{r7}
 8013c76:	b083      	sub	sp, #12
 8013c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013c7a:	4b12      	ldr	r3, [pc, #72]	; (8013cc4 <vPortExitCritical+0x50>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d10a      	bne.n	8013c98 <vPortExitCritical+0x24>
	__asm volatile
 8013c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c86:	f383 8811 	msr	BASEPRI, r3
 8013c8a:	f3bf 8f6f 	isb	sy
 8013c8e:	f3bf 8f4f 	dsb	sy
 8013c92:	607b      	str	r3, [r7, #4]
}
 8013c94:	bf00      	nop
 8013c96:	e7fe      	b.n	8013c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013c98:	4b0a      	ldr	r3, [pc, #40]	; (8013cc4 <vPortExitCritical+0x50>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	3b01      	subs	r3, #1
 8013c9e:	4a09      	ldr	r2, [pc, #36]	; (8013cc4 <vPortExitCritical+0x50>)
 8013ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013ca2:	4b08      	ldr	r3, [pc, #32]	; (8013cc4 <vPortExitCritical+0x50>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d105      	bne.n	8013cb6 <vPortExitCritical+0x42>
 8013caa:	2300      	movs	r3, #0
 8013cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	f383 8811 	msr	BASEPRI, r3
}
 8013cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013cb6:	bf00      	nop
 8013cb8:	370c      	adds	r7, #12
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr
 8013cc2:	bf00      	nop
 8013cc4:	20000084 	.word	0x20000084
	...

08013cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013cd0:	f3ef 8009 	mrs	r0, PSP
 8013cd4:	f3bf 8f6f 	isb	sy
 8013cd8:	4b15      	ldr	r3, [pc, #84]	; (8013d30 <pxCurrentTCBConst>)
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	f01e 0f10 	tst.w	lr, #16
 8013ce0:	bf08      	it	eq
 8013ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cea:	6010      	str	r0, [r2, #0]
 8013cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013cf4:	f380 8811 	msr	BASEPRI, r0
 8013cf8:	f3bf 8f4f 	dsb	sy
 8013cfc:	f3bf 8f6f 	isb	sy
 8013d00:	f7fe feaa 	bl	8012a58 <vTaskSwitchContext>
 8013d04:	f04f 0000 	mov.w	r0, #0
 8013d08:	f380 8811 	msr	BASEPRI, r0
 8013d0c:	bc09      	pop	{r0, r3}
 8013d0e:	6819      	ldr	r1, [r3, #0]
 8013d10:	6808      	ldr	r0, [r1, #0]
 8013d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d16:	f01e 0f10 	tst.w	lr, #16
 8013d1a:	bf08      	it	eq
 8013d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013d20:	f380 8809 	msr	PSP, r0
 8013d24:	f3bf 8f6f 	isb	sy
 8013d28:	4770      	bx	lr
 8013d2a:	bf00      	nop
 8013d2c:	f3af 8000 	nop.w

08013d30 <pxCurrentTCBConst>:
 8013d30:	20000e1c 	.word	0x20000e1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013d34:	bf00      	nop
 8013d36:	bf00      	nop

08013d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8013d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d42:	f383 8811 	msr	BASEPRI, r3
 8013d46:	f3bf 8f6f 	isb	sy
 8013d4a:	f3bf 8f4f 	dsb	sy
 8013d4e:	607b      	str	r3, [r7, #4]
}
 8013d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013d52:	f7fe fdc7 	bl	80128e4 <xTaskIncrementTick>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d003      	beq.n	8013d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013d5c:	4b06      	ldr	r3, [pc, #24]	; (8013d78 <xPortSysTickHandler+0x40>)
 8013d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d62:	601a      	str	r2, [r3, #0]
 8013d64:	2300      	movs	r3, #0
 8013d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	f383 8811 	msr	BASEPRI, r3
}
 8013d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013d70:	bf00      	nop
 8013d72:	3708      	adds	r7, #8
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}
 8013d78:	e000ed04 	.word	0xe000ed04

08013d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013d80:	4b0b      	ldr	r3, [pc, #44]	; (8013db0 <vPortSetupTimerInterrupt+0x34>)
 8013d82:	2200      	movs	r2, #0
 8013d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013d86:	4b0b      	ldr	r3, [pc, #44]	; (8013db4 <vPortSetupTimerInterrupt+0x38>)
 8013d88:	2200      	movs	r2, #0
 8013d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013d8c:	4b0a      	ldr	r3, [pc, #40]	; (8013db8 <vPortSetupTimerInterrupt+0x3c>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	4a0a      	ldr	r2, [pc, #40]	; (8013dbc <vPortSetupTimerInterrupt+0x40>)
 8013d92:	fba2 2303 	umull	r2, r3, r2, r3
 8013d96:	099b      	lsrs	r3, r3, #6
 8013d98:	4a09      	ldr	r2, [pc, #36]	; (8013dc0 <vPortSetupTimerInterrupt+0x44>)
 8013d9a:	3b01      	subs	r3, #1
 8013d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013d9e:	4b04      	ldr	r3, [pc, #16]	; (8013db0 <vPortSetupTimerInterrupt+0x34>)
 8013da0:	2207      	movs	r2, #7
 8013da2:	601a      	str	r2, [r3, #0]
}
 8013da4:	bf00      	nop
 8013da6:	46bd      	mov	sp, r7
 8013da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dac:	4770      	bx	lr
 8013dae:	bf00      	nop
 8013db0:	e000e010 	.word	0xe000e010
 8013db4:	e000e018 	.word	0xe000e018
 8013db8:	20000000 	.word	0x20000000
 8013dbc:	10624dd3 	.word	0x10624dd3
 8013dc0:	e000e014 	.word	0xe000e014

08013dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013dd4 <vPortEnableVFP+0x10>
 8013dc8:	6801      	ldr	r1, [r0, #0]
 8013dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013dce:	6001      	str	r1, [r0, #0]
 8013dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013dd2:	bf00      	nop
 8013dd4:	e000ed88 	.word	0xe000ed88

08013dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013dd8:	b480      	push	{r7}
 8013dda:	b085      	sub	sp, #20
 8013ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013dde:	f3ef 8305 	mrs	r3, IPSR
 8013de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	2b0f      	cmp	r3, #15
 8013de8:	d914      	bls.n	8013e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013dea:	4a17      	ldr	r2, [pc, #92]	; (8013e48 <vPortValidateInterruptPriority+0x70>)
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	4413      	add	r3, r2
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013df4:	4b15      	ldr	r3, [pc, #84]	; (8013e4c <vPortValidateInterruptPriority+0x74>)
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	7afa      	ldrb	r2, [r7, #11]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d20a      	bcs.n	8013e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e02:	f383 8811 	msr	BASEPRI, r3
 8013e06:	f3bf 8f6f 	isb	sy
 8013e0a:	f3bf 8f4f 	dsb	sy
 8013e0e:	607b      	str	r3, [r7, #4]
}
 8013e10:	bf00      	nop
 8013e12:	e7fe      	b.n	8013e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013e14:	4b0e      	ldr	r3, [pc, #56]	; (8013e50 <vPortValidateInterruptPriority+0x78>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013e1c:	4b0d      	ldr	r3, [pc, #52]	; (8013e54 <vPortValidateInterruptPriority+0x7c>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d90a      	bls.n	8013e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e28:	f383 8811 	msr	BASEPRI, r3
 8013e2c:	f3bf 8f6f 	isb	sy
 8013e30:	f3bf 8f4f 	dsb	sy
 8013e34:	603b      	str	r3, [r7, #0]
}
 8013e36:	bf00      	nop
 8013e38:	e7fe      	b.n	8013e38 <vPortValidateInterruptPriority+0x60>
	}
 8013e3a:	bf00      	nop
 8013e3c:	3714      	adds	r7, #20
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr
 8013e46:	bf00      	nop
 8013e48:	e000e3f0 	.word	0xe000e3f0
 8013e4c:	20001448 	.word	0x20001448
 8013e50:	e000ed0c 	.word	0xe000ed0c
 8013e54:	2000144c 	.word	0x2000144c

08013e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b08a      	sub	sp, #40	; 0x28
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013e60:	2300      	movs	r3, #0
 8013e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013e64:	f7fe fc82 	bl	801276c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013e68:	4b5b      	ldr	r3, [pc, #364]	; (8013fd8 <pvPortMalloc+0x180>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d101      	bne.n	8013e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013e70:	f000 f920 	bl	80140b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013e74:	4b59      	ldr	r3, [pc, #356]	; (8013fdc <pvPortMalloc+0x184>)
 8013e76:	681a      	ldr	r2, [r3, #0]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	4013      	ands	r3, r2
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	f040 8093 	bne.w	8013fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d01d      	beq.n	8013ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013e88:	2208      	movs	r2, #8
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	4413      	add	r3, r2
 8013e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f003 0307 	and.w	r3, r3, #7
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d014      	beq.n	8013ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f023 0307 	bic.w	r3, r3, #7
 8013ea0:	3308      	adds	r3, #8
 8013ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f003 0307 	and.w	r3, r3, #7
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d00a      	beq.n	8013ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8013eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb2:	f383 8811 	msr	BASEPRI, r3
 8013eb6:	f3bf 8f6f 	isb	sy
 8013eba:	f3bf 8f4f 	dsb	sy
 8013ebe:	617b      	str	r3, [r7, #20]
}
 8013ec0:	bf00      	nop
 8013ec2:	e7fe      	b.n	8013ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d06e      	beq.n	8013fa8 <pvPortMalloc+0x150>
 8013eca:	4b45      	ldr	r3, [pc, #276]	; (8013fe0 <pvPortMalloc+0x188>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d869      	bhi.n	8013fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013ed4:	4b43      	ldr	r3, [pc, #268]	; (8013fe4 <pvPortMalloc+0x18c>)
 8013ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013ed8:	4b42      	ldr	r3, [pc, #264]	; (8013fe4 <pvPortMalloc+0x18c>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ede:	e004      	b.n	8013eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	687a      	ldr	r2, [r7, #4]
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d903      	bls.n	8013efc <pvPortMalloc+0xa4>
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1f1      	bne.n	8013ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013efc:	4b36      	ldr	r3, [pc, #216]	; (8013fd8 <pvPortMalloc+0x180>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d050      	beq.n	8013fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013f06:	6a3b      	ldr	r3, [r7, #32]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	2208      	movs	r2, #8
 8013f0c:	4413      	add	r3, r2
 8013f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	6a3b      	ldr	r3, [r7, #32]
 8013f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1a:	685a      	ldr	r2, [r3, #4]
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	1ad2      	subs	r2, r2, r3
 8013f20:	2308      	movs	r3, #8
 8013f22:	005b      	lsls	r3, r3, #1
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d91f      	bls.n	8013f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	4413      	add	r3, r2
 8013f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	f003 0307 	and.w	r3, r3, #7
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d00a      	beq.n	8013f50 <pvPortMalloc+0xf8>
	__asm volatile
 8013f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3e:	f383 8811 	msr	BASEPRI, r3
 8013f42:	f3bf 8f6f 	isb	sy
 8013f46:	f3bf 8f4f 	dsb	sy
 8013f4a:	613b      	str	r3, [r7, #16]
}
 8013f4c:	bf00      	nop
 8013f4e:	e7fe      	b.n	8013f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f52:	685a      	ldr	r2, [r3, #4]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	1ad2      	subs	r2, r2, r3
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013f62:	69b8      	ldr	r0, [r7, #24]
 8013f64:	f000 f908 	bl	8014178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013f68:	4b1d      	ldr	r3, [pc, #116]	; (8013fe0 <pvPortMalloc+0x188>)
 8013f6a:	681a      	ldr	r2, [r3, #0]
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	1ad3      	subs	r3, r2, r3
 8013f72:	4a1b      	ldr	r2, [pc, #108]	; (8013fe0 <pvPortMalloc+0x188>)
 8013f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013f76:	4b1a      	ldr	r3, [pc, #104]	; (8013fe0 <pvPortMalloc+0x188>)
 8013f78:	681a      	ldr	r2, [r3, #0]
 8013f7a:	4b1b      	ldr	r3, [pc, #108]	; (8013fe8 <pvPortMalloc+0x190>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d203      	bcs.n	8013f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013f82:	4b17      	ldr	r3, [pc, #92]	; (8013fe0 <pvPortMalloc+0x188>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	4a18      	ldr	r2, [pc, #96]	; (8013fe8 <pvPortMalloc+0x190>)
 8013f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8c:	685a      	ldr	r2, [r3, #4]
 8013f8e:	4b13      	ldr	r3, [pc, #76]	; (8013fdc <pvPortMalloc+0x184>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	431a      	orrs	r2, r3
 8013f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013f9e:	4b13      	ldr	r3, [pc, #76]	; (8013fec <pvPortMalloc+0x194>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	4a11      	ldr	r2, [pc, #68]	; (8013fec <pvPortMalloc+0x194>)
 8013fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013fa8:	f7fe fbee 	bl	8012788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013fac:	69fb      	ldr	r3, [r7, #28]
 8013fae:	f003 0307 	and.w	r3, r3, #7
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d00a      	beq.n	8013fcc <pvPortMalloc+0x174>
	__asm volatile
 8013fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fba:	f383 8811 	msr	BASEPRI, r3
 8013fbe:	f3bf 8f6f 	isb	sy
 8013fc2:	f3bf 8f4f 	dsb	sy
 8013fc6:	60fb      	str	r3, [r7, #12]
}
 8013fc8:	bf00      	nop
 8013fca:	e7fe      	b.n	8013fca <pvPortMalloc+0x172>
	return pvReturn;
 8013fcc:	69fb      	ldr	r3, [r7, #28]
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3728      	adds	r7, #40	; 0x28
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	20005aa8 	.word	0x20005aa8
 8013fdc:	20005abc 	.word	0x20005abc
 8013fe0:	20005aac 	.word	0x20005aac
 8013fe4:	20005aa0 	.word	0x20005aa0
 8013fe8:	20005ab0 	.word	0x20005ab0
 8013fec:	20005ab4 	.word	0x20005ab4

08013ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b086      	sub	sp, #24
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d04d      	beq.n	801409e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014002:	2308      	movs	r3, #8
 8014004:	425b      	negs	r3, r3
 8014006:	697a      	ldr	r2, [r7, #20]
 8014008:	4413      	add	r3, r2
 801400a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	685a      	ldr	r2, [r3, #4]
 8014014:	4b24      	ldr	r3, [pc, #144]	; (80140a8 <vPortFree+0xb8>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	4013      	ands	r3, r2
 801401a:	2b00      	cmp	r3, #0
 801401c:	d10a      	bne.n	8014034 <vPortFree+0x44>
	__asm volatile
 801401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014022:	f383 8811 	msr	BASEPRI, r3
 8014026:	f3bf 8f6f 	isb	sy
 801402a:	f3bf 8f4f 	dsb	sy
 801402e:	60fb      	str	r3, [r7, #12]
}
 8014030:	bf00      	nop
 8014032:	e7fe      	b.n	8014032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014034:	693b      	ldr	r3, [r7, #16]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d00a      	beq.n	8014052 <vPortFree+0x62>
	__asm volatile
 801403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014040:	f383 8811 	msr	BASEPRI, r3
 8014044:	f3bf 8f6f 	isb	sy
 8014048:	f3bf 8f4f 	dsb	sy
 801404c:	60bb      	str	r3, [r7, #8]
}
 801404e:	bf00      	nop
 8014050:	e7fe      	b.n	8014050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	685a      	ldr	r2, [r3, #4]
 8014056:	4b14      	ldr	r3, [pc, #80]	; (80140a8 <vPortFree+0xb8>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4013      	ands	r3, r2
 801405c:	2b00      	cmp	r3, #0
 801405e:	d01e      	beq.n	801409e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d11a      	bne.n	801409e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	685a      	ldr	r2, [r3, #4]
 801406c:	4b0e      	ldr	r3, [pc, #56]	; (80140a8 <vPortFree+0xb8>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	43db      	mvns	r3, r3
 8014072:	401a      	ands	r2, r3
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014078:	f7fe fb78 	bl	801276c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	685a      	ldr	r2, [r3, #4]
 8014080:	4b0a      	ldr	r3, [pc, #40]	; (80140ac <vPortFree+0xbc>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	4413      	add	r3, r2
 8014086:	4a09      	ldr	r2, [pc, #36]	; (80140ac <vPortFree+0xbc>)
 8014088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801408a:	6938      	ldr	r0, [r7, #16]
 801408c:	f000 f874 	bl	8014178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014090:	4b07      	ldr	r3, [pc, #28]	; (80140b0 <vPortFree+0xc0>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	3301      	adds	r3, #1
 8014096:	4a06      	ldr	r2, [pc, #24]	; (80140b0 <vPortFree+0xc0>)
 8014098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801409a:	f7fe fb75 	bl	8012788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801409e:	bf00      	nop
 80140a0:	3718      	adds	r7, #24
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd80      	pop	{r7, pc}
 80140a6:	bf00      	nop
 80140a8:	20005abc 	.word	0x20005abc
 80140ac:	20005aac 	.word	0x20005aac
 80140b0:	20005ab8 	.word	0x20005ab8

080140b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80140b4:	b480      	push	{r7}
 80140b6:	b085      	sub	sp, #20
 80140b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80140ba:	f244 6350 	movw	r3, #18000	; 0x4650
 80140be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80140c0:	4b27      	ldr	r3, [pc, #156]	; (8014160 <prvHeapInit+0xac>)
 80140c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	f003 0307 	and.w	r3, r3, #7
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d00c      	beq.n	80140e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	3307      	adds	r3, #7
 80140d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	f023 0307 	bic.w	r3, r3, #7
 80140da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80140dc:	68ba      	ldr	r2, [r7, #8]
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	1ad3      	subs	r3, r2, r3
 80140e2:	4a1f      	ldr	r2, [pc, #124]	; (8014160 <prvHeapInit+0xac>)
 80140e4:	4413      	add	r3, r2
 80140e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80140ec:	4a1d      	ldr	r2, [pc, #116]	; (8014164 <prvHeapInit+0xb0>)
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80140f2:	4b1c      	ldr	r3, [pc, #112]	; (8014164 <prvHeapInit+0xb0>)
 80140f4:	2200      	movs	r2, #0
 80140f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	68ba      	ldr	r2, [r7, #8]
 80140fc:	4413      	add	r3, r2
 80140fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014100:	2208      	movs	r2, #8
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	1a9b      	subs	r3, r3, r2
 8014106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	f023 0307 	bic.w	r3, r3, #7
 801410e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	4a15      	ldr	r2, [pc, #84]	; (8014168 <prvHeapInit+0xb4>)
 8014114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014116:	4b14      	ldr	r3, [pc, #80]	; (8014168 <prvHeapInit+0xb4>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2200      	movs	r2, #0
 801411c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801411e:	4b12      	ldr	r3, [pc, #72]	; (8014168 <prvHeapInit+0xb4>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2200      	movs	r2, #0
 8014124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	1ad2      	subs	r2, r2, r3
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014134:	4b0c      	ldr	r3, [pc, #48]	; (8014168 <prvHeapInit+0xb4>)
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	685b      	ldr	r3, [r3, #4]
 8014140:	4a0a      	ldr	r2, [pc, #40]	; (801416c <prvHeapInit+0xb8>)
 8014142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	4a09      	ldr	r2, [pc, #36]	; (8014170 <prvHeapInit+0xbc>)
 801414a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801414c:	4b09      	ldr	r3, [pc, #36]	; (8014174 <prvHeapInit+0xc0>)
 801414e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014152:	601a      	str	r2, [r3, #0]
}
 8014154:	bf00      	nop
 8014156:	3714      	adds	r7, #20
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr
 8014160:	20001450 	.word	0x20001450
 8014164:	20005aa0 	.word	0x20005aa0
 8014168:	20005aa8 	.word	0x20005aa8
 801416c:	20005ab0 	.word	0x20005ab0
 8014170:	20005aac 	.word	0x20005aac
 8014174:	20005abc 	.word	0x20005abc

08014178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014178:	b480      	push	{r7}
 801417a:	b085      	sub	sp, #20
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014180:	4b28      	ldr	r3, [pc, #160]	; (8014224 <prvInsertBlockIntoFreeList+0xac>)
 8014182:	60fb      	str	r3, [r7, #12]
 8014184:	e002      	b.n	801418c <prvInsertBlockIntoFreeList+0x14>
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	60fb      	str	r3, [r7, #12]
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	687a      	ldr	r2, [r7, #4]
 8014192:	429a      	cmp	r2, r3
 8014194:	d8f7      	bhi.n	8014186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	68ba      	ldr	r2, [r7, #8]
 80141a0:	4413      	add	r3, r2
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	429a      	cmp	r2, r3
 80141a6:	d108      	bne.n	80141ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	685a      	ldr	r2, [r3, #4]
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	441a      	add	r2, r3
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	68ba      	ldr	r2, [r7, #8]
 80141c4:	441a      	add	r2, r3
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d118      	bne.n	8014200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	4b15      	ldr	r3, [pc, #84]	; (8014228 <prvInsertBlockIntoFreeList+0xb0>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d00d      	beq.n	80141f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	685a      	ldr	r2, [r3, #4]
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	441a      	add	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	681a      	ldr	r2, [r3, #0]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	601a      	str	r2, [r3, #0]
 80141f4:	e008      	b.n	8014208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80141f6:	4b0c      	ldr	r3, [pc, #48]	; (8014228 <prvInsertBlockIntoFreeList+0xb0>)
 80141f8:	681a      	ldr	r2, [r3, #0]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	601a      	str	r2, [r3, #0]
 80141fe:	e003      	b.n	8014208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	681a      	ldr	r2, [r3, #0]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014208:	68fa      	ldr	r2, [r7, #12]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	429a      	cmp	r2, r3
 801420e:	d002      	beq.n	8014216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014216:	bf00      	nop
 8014218:	3714      	adds	r7, #20
 801421a:	46bd      	mov	sp, r7
 801421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014220:	4770      	bx	lr
 8014222:	bf00      	nop
 8014224:	20005aa0 	.word	0x20005aa0
 8014228:	20005aa8 	.word	0x20005aa8

0801422c <__cxa_pure_virtual>:
 801422c:	b508      	push	{r3, lr}
 801422e:	f000 f80d 	bl	801424c <_ZSt9terminatev>

08014232 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8014232:	b508      	push	{r3, lr}
 8014234:	4780      	blx	r0
 8014236:	f000 ffc5 	bl	80151c4 <abort>
	...

0801423c <_ZSt13get_terminatev>:
 801423c:	4b02      	ldr	r3, [pc, #8]	; (8014248 <_ZSt13get_terminatev+0xc>)
 801423e:	6818      	ldr	r0, [r3, #0]
 8014240:	f3bf 8f5b 	dmb	ish
 8014244:	4770      	bx	lr
 8014246:	bf00      	nop
 8014248:	20000088 	.word	0x20000088

0801424c <_ZSt9terminatev>:
 801424c:	b508      	push	{r3, lr}
 801424e:	f7ff fff5 	bl	801423c <_ZSt13get_terminatev>
 8014252:	f7ff ffee 	bl	8014232 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08014258 <pow>:
 8014258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801425c:	ec59 8b10 	vmov	r8, r9, d0
 8014260:	ec57 6b11 	vmov	r6, r7, d1
 8014264:	f000 f8a8 	bl	80143b8 <__ieee754_pow>
 8014268:	4b4e      	ldr	r3, [pc, #312]	; (80143a4 <pow+0x14c>)
 801426a:	f993 3000 	ldrsb.w	r3, [r3]
 801426e:	3301      	adds	r3, #1
 8014270:	ec55 4b10 	vmov	r4, r5, d0
 8014274:	d015      	beq.n	80142a2 <pow+0x4a>
 8014276:	4632      	mov	r2, r6
 8014278:	463b      	mov	r3, r7
 801427a:	4630      	mov	r0, r6
 801427c:	4639      	mov	r1, r7
 801427e:	f7ec fc65 	bl	8000b4c <__aeabi_dcmpun>
 8014282:	b970      	cbnz	r0, 80142a2 <pow+0x4a>
 8014284:	4642      	mov	r2, r8
 8014286:	464b      	mov	r3, r9
 8014288:	4640      	mov	r0, r8
 801428a:	4649      	mov	r1, r9
 801428c:	f7ec fc5e 	bl	8000b4c <__aeabi_dcmpun>
 8014290:	2200      	movs	r2, #0
 8014292:	2300      	movs	r3, #0
 8014294:	b148      	cbz	r0, 80142aa <pow+0x52>
 8014296:	4630      	mov	r0, r6
 8014298:	4639      	mov	r1, r7
 801429a:	f7ec fc25 	bl	8000ae8 <__aeabi_dcmpeq>
 801429e:	2800      	cmp	r0, #0
 80142a0:	d17d      	bne.n	801439e <pow+0x146>
 80142a2:	ec45 4b10 	vmov	d0, r4, r5
 80142a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142aa:	4640      	mov	r0, r8
 80142ac:	4649      	mov	r1, r9
 80142ae:	f7ec fc1b 	bl	8000ae8 <__aeabi_dcmpeq>
 80142b2:	b1e0      	cbz	r0, 80142ee <pow+0x96>
 80142b4:	2200      	movs	r2, #0
 80142b6:	2300      	movs	r3, #0
 80142b8:	4630      	mov	r0, r6
 80142ba:	4639      	mov	r1, r7
 80142bc:	f7ec fc14 	bl	8000ae8 <__aeabi_dcmpeq>
 80142c0:	2800      	cmp	r0, #0
 80142c2:	d16c      	bne.n	801439e <pow+0x146>
 80142c4:	ec47 6b10 	vmov	d0, r6, r7
 80142c8:	f000 fe55 	bl	8014f76 <finite>
 80142cc:	2800      	cmp	r0, #0
 80142ce:	d0e8      	beq.n	80142a2 <pow+0x4a>
 80142d0:	2200      	movs	r2, #0
 80142d2:	2300      	movs	r3, #0
 80142d4:	4630      	mov	r0, r6
 80142d6:	4639      	mov	r1, r7
 80142d8:	f7ec fc10 	bl	8000afc <__aeabi_dcmplt>
 80142dc:	2800      	cmp	r0, #0
 80142de:	d0e0      	beq.n	80142a2 <pow+0x4a>
 80142e0:	f000 ff78 	bl	80151d4 <__errno>
 80142e4:	2321      	movs	r3, #33	; 0x21
 80142e6:	6003      	str	r3, [r0, #0]
 80142e8:	2400      	movs	r4, #0
 80142ea:	4d2f      	ldr	r5, [pc, #188]	; (80143a8 <pow+0x150>)
 80142ec:	e7d9      	b.n	80142a2 <pow+0x4a>
 80142ee:	ec45 4b10 	vmov	d0, r4, r5
 80142f2:	f000 fe40 	bl	8014f76 <finite>
 80142f6:	bbb8      	cbnz	r0, 8014368 <pow+0x110>
 80142f8:	ec49 8b10 	vmov	d0, r8, r9
 80142fc:	f000 fe3b 	bl	8014f76 <finite>
 8014300:	b390      	cbz	r0, 8014368 <pow+0x110>
 8014302:	ec47 6b10 	vmov	d0, r6, r7
 8014306:	f000 fe36 	bl	8014f76 <finite>
 801430a:	b368      	cbz	r0, 8014368 <pow+0x110>
 801430c:	4622      	mov	r2, r4
 801430e:	462b      	mov	r3, r5
 8014310:	4620      	mov	r0, r4
 8014312:	4629      	mov	r1, r5
 8014314:	f7ec fc1a 	bl	8000b4c <__aeabi_dcmpun>
 8014318:	b160      	cbz	r0, 8014334 <pow+0xdc>
 801431a:	f000 ff5b 	bl	80151d4 <__errno>
 801431e:	2321      	movs	r3, #33	; 0x21
 8014320:	6003      	str	r3, [r0, #0]
 8014322:	2200      	movs	r2, #0
 8014324:	2300      	movs	r3, #0
 8014326:	4610      	mov	r0, r2
 8014328:	4619      	mov	r1, r3
 801432a:	f7ec fa9f 	bl	800086c <__aeabi_ddiv>
 801432e:	4604      	mov	r4, r0
 8014330:	460d      	mov	r5, r1
 8014332:	e7b6      	b.n	80142a2 <pow+0x4a>
 8014334:	f000 ff4e 	bl	80151d4 <__errno>
 8014338:	2322      	movs	r3, #34	; 0x22
 801433a:	6003      	str	r3, [r0, #0]
 801433c:	2200      	movs	r2, #0
 801433e:	2300      	movs	r3, #0
 8014340:	4640      	mov	r0, r8
 8014342:	4649      	mov	r1, r9
 8014344:	f7ec fbda 	bl	8000afc <__aeabi_dcmplt>
 8014348:	2400      	movs	r4, #0
 801434a:	b158      	cbz	r0, 8014364 <pow+0x10c>
 801434c:	ec47 6b10 	vmov	d0, r6, r7
 8014350:	f000 fe26 	bl	8014fa0 <rint>
 8014354:	4632      	mov	r2, r6
 8014356:	ec51 0b10 	vmov	r0, r1, d0
 801435a:	463b      	mov	r3, r7
 801435c:	f7ec fbc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8014360:	2800      	cmp	r0, #0
 8014362:	d0c2      	beq.n	80142ea <pow+0x92>
 8014364:	4d11      	ldr	r5, [pc, #68]	; (80143ac <pow+0x154>)
 8014366:	e79c      	b.n	80142a2 <pow+0x4a>
 8014368:	2200      	movs	r2, #0
 801436a:	2300      	movs	r3, #0
 801436c:	4620      	mov	r0, r4
 801436e:	4629      	mov	r1, r5
 8014370:	f7ec fbba 	bl	8000ae8 <__aeabi_dcmpeq>
 8014374:	2800      	cmp	r0, #0
 8014376:	d094      	beq.n	80142a2 <pow+0x4a>
 8014378:	ec49 8b10 	vmov	d0, r8, r9
 801437c:	f000 fdfb 	bl	8014f76 <finite>
 8014380:	2800      	cmp	r0, #0
 8014382:	d08e      	beq.n	80142a2 <pow+0x4a>
 8014384:	ec47 6b10 	vmov	d0, r6, r7
 8014388:	f000 fdf5 	bl	8014f76 <finite>
 801438c:	2800      	cmp	r0, #0
 801438e:	d088      	beq.n	80142a2 <pow+0x4a>
 8014390:	f000 ff20 	bl	80151d4 <__errno>
 8014394:	2322      	movs	r3, #34	; 0x22
 8014396:	6003      	str	r3, [r0, #0]
 8014398:	2400      	movs	r4, #0
 801439a:	2500      	movs	r5, #0
 801439c:	e781      	b.n	80142a2 <pow+0x4a>
 801439e:	4d04      	ldr	r5, [pc, #16]	; (80143b0 <pow+0x158>)
 80143a0:	2400      	movs	r4, #0
 80143a2:	e77e      	b.n	80142a2 <pow+0x4a>
 80143a4:	2000008c 	.word	0x2000008c
 80143a8:	fff00000 	.word	0xfff00000
 80143ac:	7ff00000 	.word	0x7ff00000
 80143b0:	3ff00000 	.word	0x3ff00000
 80143b4:	00000000 	.word	0x00000000

080143b8 <__ieee754_pow>:
 80143b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143bc:	ed2d 8b06 	vpush	{d8-d10}
 80143c0:	b08d      	sub	sp, #52	; 0x34
 80143c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80143c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80143ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80143ce:	ea56 0100 	orrs.w	r1, r6, r0
 80143d2:	ec53 2b10 	vmov	r2, r3, d0
 80143d6:	f000 84d1 	beq.w	8014d7c <__ieee754_pow+0x9c4>
 80143da:	497f      	ldr	r1, [pc, #508]	; (80145d8 <__ieee754_pow+0x220>)
 80143dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80143e0:	428c      	cmp	r4, r1
 80143e2:	ee10 8a10 	vmov	r8, s0
 80143e6:	4699      	mov	r9, r3
 80143e8:	dc09      	bgt.n	80143fe <__ieee754_pow+0x46>
 80143ea:	d103      	bne.n	80143f4 <__ieee754_pow+0x3c>
 80143ec:	b97a      	cbnz	r2, 801440e <__ieee754_pow+0x56>
 80143ee:	42a6      	cmp	r6, r4
 80143f0:	dd02      	ble.n	80143f8 <__ieee754_pow+0x40>
 80143f2:	e00c      	b.n	801440e <__ieee754_pow+0x56>
 80143f4:	428e      	cmp	r6, r1
 80143f6:	dc02      	bgt.n	80143fe <__ieee754_pow+0x46>
 80143f8:	428e      	cmp	r6, r1
 80143fa:	d110      	bne.n	801441e <__ieee754_pow+0x66>
 80143fc:	b178      	cbz	r0, 801441e <__ieee754_pow+0x66>
 80143fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014402:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014406:	ea54 0308 	orrs.w	r3, r4, r8
 801440a:	f000 84b7 	beq.w	8014d7c <__ieee754_pow+0x9c4>
 801440e:	4873      	ldr	r0, [pc, #460]	; (80145dc <__ieee754_pow+0x224>)
 8014410:	b00d      	add	sp, #52	; 0x34
 8014412:	ecbd 8b06 	vpop	{d8-d10}
 8014416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801441a:	f000 bdb9 	b.w	8014f90 <nan>
 801441e:	f1b9 0f00 	cmp.w	r9, #0
 8014422:	da36      	bge.n	8014492 <__ieee754_pow+0xda>
 8014424:	496e      	ldr	r1, [pc, #440]	; (80145e0 <__ieee754_pow+0x228>)
 8014426:	428e      	cmp	r6, r1
 8014428:	dc51      	bgt.n	80144ce <__ieee754_pow+0x116>
 801442a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801442e:	428e      	cmp	r6, r1
 8014430:	f340 84af 	ble.w	8014d92 <__ieee754_pow+0x9da>
 8014434:	1531      	asrs	r1, r6, #20
 8014436:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801443a:	2914      	cmp	r1, #20
 801443c:	dd0f      	ble.n	801445e <__ieee754_pow+0xa6>
 801443e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8014442:	fa20 fc01 	lsr.w	ip, r0, r1
 8014446:	fa0c f101 	lsl.w	r1, ip, r1
 801444a:	4281      	cmp	r1, r0
 801444c:	f040 84a1 	bne.w	8014d92 <__ieee754_pow+0x9da>
 8014450:	f00c 0c01 	and.w	ip, ip, #1
 8014454:	f1cc 0102 	rsb	r1, ip, #2
 8014458:	9100      	str	r1, [sp, #0]
 801445a:	b180      	cbz	r0, 801447e <__ieee754_pow+0xc6>
 801445c:	e059      	b.n	8014512 <__ieee754_pow+0x15a>
 801445e:	2800      	cmp	r0, #0
 8014460:	d155      	bne.n	801450e <__ieee754_pow+0x156>
 8014462:	f1c1 0114 	rsb	r1, r1, #20
 8014466:	fa46 fc01 	asr.w	ip, r6, r1
 801446a:	fa0c f101 	lsl.w	r1, ip, r1
 801446e:	42b1      	cmp	r1, r6
 8014470:	f040 848c 	bne.w	8014d8c <__ieee754_pow+0x9d4>
 8014474:	f00c 0c01 	and.w	ip, ip, #1
 8014478:	f1cc 0102 	rsb	r1, ip, #2
 801447c:	9100      	str	r1, [sp, #0]
 801447e:	4959      	ldr	r1, [pc, #356]	; (80145e4 <__ieee754_pow+0x22c>)
 8014480:	428e      	cmp	r6, r1
 8014482:	d12d      	bne.n	80144e0 <__ieee754_pow+0x128>
 8014484:	2f00      	cmp	r7, #0
 8014486:	da79      	bge.n	801457c <__ieee754_pow+0x1c4>
 8014488:	4956      	ldr	r1, [pc, #344]	; (80145e4 <__ieee754_pow+0x22c>)
 801448a:	2000      	movs	r0, #0
 801448c:	f7ec f9ee 	bl	800086c <__aeabi_ddiv>
 8014490:	e016      	b.n	80144c0 <__ieee754_pow+0x108>
 8014492:	2100      	movs	r1, #0
 8014494:	9100      	str	r1, [sp, #0]
 8014496:	2800      	cmp	r0, #0
 8014498:	d13b      	bne.n	8014512 <__ieee754_pow+0x15a>
 801449a:	494f      	ldr	r1, [pc, #316]	; (80145d8 <__ieee754_pow+0x220>)
 801449c:	428e      	cmp	r6, r1
 801449e:	d1ee      	bne.n	801447e <__ieee754_pow+0xc6>
 80144a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80144a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80144a8:	ea53 0308 	orrs.w	r3, r3, r8
 80144ac:	f000 8466 	beq.w	8014d7c <__ieee754_pow+0x9c4>
 80144b0:	4b4d      	ldr	r3, [pc, #308]	; (80145e8 <__ieee754_pow+0x230>)
 80144b2:	429c      	cmp	r4, r3
 80144b4:	dd0d      	ble.n	80144d2 <__ieee754_pow+0x11a>
 80144b6:	2f00      	cmp	r7, #0
 80144b8:	f280 8464 	bge.w	8014d84 <__ieee754_pow+0x9cc>
 80144bc:	2000      	movs	r0, #0
 80144be:	2100      	movs	r1, #0
 80144c0:	ec41 0b10 	vmov	d0, r0, r1
 80144c4:	b00d      	add	sp, #52	; 0x34
 80144c6:	ecbd 8b06 	vpop	{d8-d10}
 80144ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ce:	2102      	movs	r1, #2
 80144d0:	e7e0      	b.n	8014494 <__ieee754_pow+0xdc>
 80144d2:	2f00      	cmp	r7, #0
 80144d4:	daf2      	bge.n	80144bc <__ieee754_pow+0x104>
 80144d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80144da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80144de:	e7ef      	b.n	80144c0 <__ieee754_pow+0x108>
 80144e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80144e4:	d104      	bne.n	80144f0 <__ieee754_pow+0x138>
 80144e6:	4610      	mov	r0, r2
 80144e8:	4619      	mov	r1, r3
 80144ea:	f7ec f895 	bl	8000618 <__aeabi_dmul>
 80144ee:	e7e7      	b.n	80144c0 <__ieee754_pow+0x108>
 80144f0:	493e      	ldr	r1, [pc, #248]	; (80145ec <__ieee754_pow+0x234>)
 80144f2:	428f      	cmp	r7, r1
 80144f4:	d10d      	bne.n	8014512 <__ieee754_pow+0x15a>
 80144f6:	f1b9 0f00 	cmp.w	r9, #0
 80144fa:	db0a      	blt.n	8014512 <__ieee754_pow+0x15a>
 80144fc:	ec43 2b10 	vmov	d0, r2, r3
 8014500:	b00d      	add	sp, #52	; 0x34
 8014502:	ecbd 8b06 	vpop	{d8-d10}
 8014506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801450a:	f000 bc77 	b.w	8014dfc <__ieee754_sqrt>
 801450e:	2100      	movs	r1, #0
 8014510:	9100      	str	r1, [sp, #0]
 8014512:	ec43 2b10 	vmov	d0, r2, r3
 8014516:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801451a:	f000 fd23 	bl	8014f64 <fabs>
 801451e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014522:	ec51 0b10 	vmov	r0, r1, d0
 8014526:	f1b8 0f00 	cmp.w	r8, #0
 801452a:	d12a      	bne.n	8014582 <__ieee754_pow+0x1ca>
 801452c:	b12c      	cbz	r4, 801453a <__ieee754_pow+0x182>
 801452e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80145e4 <__ieee754_pow+0x22c>
 8014532:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8014536:	45e6      	cmp	lr, ip
 8014538:	d123      	bne.n	8014582 <__ieee754_pow+0x1ca>
 801453a:	2f00      	cmp	r7, #0
 801453c:	da05      	bge.n	801454a <__ieee754_pow+0x192>
 801453e:	4602      	mov	r2, r0
 8014540:	460b      	mov	r3, r1
 8014542:	2000      	movs	r0, #0
 8014544:	4927      	ldr	r1, [pc, #156]	; (80145e4 <__ieee754_pow+0x22c>)
 8014546:	f7ec f991 	bl	800086c <__aeabi_ddiv>
 801454a:	f1b9 0f00 	cmp.w	r9, #0
 801454e:	dab7      	bge.n	80144c0 <__ieee754_pow+0x108>
 8014550:	9b00      	ldr	r3, [sp, #0]
 8014552:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014556:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801455a:	4323      	orrs	r3, r4
 801455c:	d108      	bne.n	8014570 <__ieee754_pow+0x1b8>
 801455e:	4602      	mov	r2, r0
 8014560:	460b      	mov	r3, r1
 8014562:	4610      	mov	r0, r2
 8014564:	4619      	mov	r1, r3
 8014566:	f7eb fe9f 	bl	80002a8 <__aeabi_dsub>
 801456a:	4602      	mov	r2, r0
 801456c:	460b      	mov	r3, r1
 801456e:	e78d      	b.n	801448c <__ieee754_pow+0xd4>
 8014570:	9b00      	ldr	r3, [sp, #0]
 8014572:	2b01      	cmp	r3, #1
 8014574:	d1a4      	bne.n	80144c0 <__ieee754_pow+0x108>
 8014576:	4602      	mov	r2, r0
 8014578:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801457c:	4610      	mov	r0, r2
 801457e:	4619      	mov	r1, r3
 8014580:	e79e      	b.n	80144c0 <__ieee754_pow+0x108>
 8014582:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8014586:	f10c 35ff 	add.w	r5, ip, #4294967295
 801458a:	950a      	str	r5, [sp, #40]	; 0x28
 801458c:	9d00      	ldr	r5, [sp, #0]
 801458e:	46ac      	mov	ip, r5
 8014590:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014592:	ea5c 0505 	orrs.w	r5, ip, r5
 8014596:	d0e4      	beq.n	8014562 <__ieee754_pow+0x1aa>
 8014598:	4b15      	ldr	r3, [pc, #84]	; (80145f0 <__ieee754_pow+0x238>)
 801459a:	429e      	cmp	r6, r3
 801459c:	f340 80fc 	ble.w	8014798 <__ieee754_pow+0x3e0>
 80145a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80145a4:	429e      	cmp	r6, r3
 80145a6:	4b10      	ldr	r3, [pc, #64]	; (80145e8 <__ieee754_pow+0x230>)
 80145a8:	dd07      	ble.n	80145ba <__ieee754_pow+0x202>
 80145aa:	429c      	cmp	r4, r3
 80145ac:	dc0a      	bgt.n	80145c4 <__ieee754_pow+0x20c>
 80145ae:	2f00      	cmp	r7, #0
 80145b0:	da84      	bge.n	80144bc <__ieee754_pow+0x104>
 80145b2:	a307      	add	r3, pc, #28	; (adr r3, 80145d0 <__ieee754_pow+0x218>)
 80145b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b8:	e795      	b.n	80144e6 <__ieee754_pow+0x12e>
 80145ba:	429c      	cmp	r4, r3
 80145bc:	dbf7      	blt.n	80145ae <__ieee754_pow+0x1f6>
 80145be:	4b09      	ldr	r3, [pc, #36]	; (80145e4 <__ieee754_pow+0x22c>)
 80145c0:	429c      	cmp	r4, r3
 80145c2:	dd17      	ble.n	80145f4 <__ieee754_pow+0x23c>
 80145c4:	2f00      	cmp	r7, #0
 80145c6:	dcf4      	bgt.n	80145b2 <__ieee754_pow+0x1fa>
 80145c8:	e778      	b.n	80144bc <__ieee754_pow+0x104>
 80145ca:	bf00      	nop
 80145cc:	f3af 8000 	nop.w
 80145d0:	8800759c 	.word	0x8800759c
 80145d4:	7e37e43c 	.word	0x7e37e43c
 80145d8:	7ff00000 	.word	0x7ff00000
 80145dc:	0801c62b 	.word	0x0801c62b
 80145e0:	433fffff 	.word	0x433fffff
 80145e4:	3ff00000 	.word	0x3ff00000
 80145e8:	3fefffff 	.word	0x3fefffff
 80145ec:	3fe00000 	.word	0x3fe00000
 80145f0:	41e00000 	.word	0x41e00000
 80145f4:	4b64      	ldr	r3, [pc, #400]	; (8014788 <__ieee754_pow+0x3d0>)
 80145f6:	2200      	movs	r2, #0
 80145f8:	f7eb fe56 	bl	80002a8 <__aeabi_dsub>
 80145fc:	a356      	add	r3, pc, #344	; (adr r3, 8014758 <__ieee754_pow+0x3a0>)
 80145fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014602:	4604      	mov	r4, r0
 8014604:	460d      	mov	r5, r1
 8014606:	f7ec f807 	bl	8000618 <__aeabi_dmul>
 801460a:	a355      	add	r3, pc, #340	; (adr r3, 8014760 <__ieee754_pow+0x3a8>)
 801460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014610:	4606      	mov	r6, r0
 8014612:	460f      	mov	r7, r1
 8014614:	4620      	mov	r0, r4
 8014616:	4629      	mov	r1, r5
 8014618:	f7eb fffe 	bl	8000618 <__aeabi_dmul>
 801461c:	4b5b      	ldr	r3, [pc, #364]	; (801478c <__ieee754_pow+0x3d4>)
 801461e:	4682      	mov	sl, r0
 8014620:	468b      	mov	fp, r1
 8014622:	2200      	movs	r2, #0
 8014624:	4620      	mov	r0, r4
 8014626:	4629      	mov	r1, r5
 8014628:	f7eb fff6 	bl	8000618 <__aeabi_dmul>
 801462c:	4602      	mov	r2, r0
 801462e:	460b      	mov	r3, r1
 8014630:	a14d      	add	r1, pc, #308	; (adr r1, 8014768 <__ieee754_pow+0x3b0>)
 8014632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014636:	f7eb fe37 	bl	80002a8 <__aeabi_dsub>
 801463a:	4622      	mov	r2, r4
 801463c:	462b      	mov	r3, r5
 801463e:	f7eb ffeb 	bl	8000618 <__aeabi_dmul>
 8014642:	4602      	mov	r2, r0
 8014644:	460b      	mov	r3, r1
 8014646:	2000      	movs	r0, #0
 8014648:	4951      	ldr	r1, [pc, #324]	; (8014790 <__ieee754_pow+0x3d8>)
 801464a:	f7eb fe2d 	bl	80002a8 <__aeabi_dsub>
 801464e:	4622      	mov	r2, r4
 8014650:	4680      	mov	r8, r0
 8014652:	4689      	mov	r9, r1
 8014654:	462b      	mov	r3, r5
 8014656:	4620      	mov	r0, r4
 8014658:	4629      	mov	r1, r5
 801465a:	f7eb ffdd 	bl	8000618 <__aeabi_dmul>
 801465e:	4602      	mov	r2, r0
 8014660:	460b      	mov	r3, r1
 8014662:	4640      	mov	r0, r8
 8014664:	4649      	mov	r1, r9
 8014666:	f7eb ffd7 	bl	8000618 <__aeabi_dmul>
 801466a:	a341      	add	r3, pc, #260	; (adr r3, 8014770 <__ieee754_pow+0x3b8>)
 801466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014670:	f7eb ffd2 	bl	8000618 <__aeabi_dmul>
 8014674:	4602      	mov	r2, r0
 8014676:	460b      	mov	r3, r1
 8014678:	4650      	mov	r0, sl
 801467a:	4659      	mov	r1, fp
 801467c:	f7eb fe14 	bl	80002a8 <__aeabi_dsub>
 8014680:	4602      	mov	r2, r0
 8014682:	460b      	mov	r3, r1
 8014684:	4680      	mov	r8, r0
 8014686:	4689      	mov	r9, r1
 8014688:	4630      	mov	r0, r6
 801468a:	4639      	mov	r1, r7
 801468c:	f7eb fe0e 	bl	80002ac <__adddf3>
 8014690:	2400      	movs	r4, #0
 8014692:	4632      	mov	r2, r6
 8014694:	463b      	mov	r3, r7
 8014696:	4620      	mov	r0, r4
 8014698:	460d      	mov	r5, r1
 801469a:	f7eb fe05 	bl	80002a8 <__aeabi_dsub>
 801469e:	4602      	mov	r2, r0
 80146a0:	460b      	mov	r3, r1
 80146a2:	4640      	mov	r0, r8
 80146a4:	4649      	mov	r1, r9
 80146a6:	f7eb fdff 	bl	80002a8 <__aeabi_dsub>
 80146aa:	9b00      	ldr	r3, [sp, #0]
 80146ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146ae:	3b01      	subs	r3, #1
 80146b0:	4313      	orrs	r3, r2
 80146b2:	4682      	mov	sl, r0
 80146b4:	468b      	mov	fp, r1
 80146b6:	f040 81f1 	bne.w	8014a9c <__ieee754_pow+0x6e4>
 80146ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014778 <__ieee754_pow+0x3c0>
 80146be:	eeb0 8a47 	vmov.f32	s16, s14
 80146c2:	eef0 8a67 	vmov.f32	s17, s15
 80146c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80146ca:	2600      	movs	r6, #0
 80146cc:	4632      	mov	r2, r6
 80146ce:	463b      	mov	r3, r7
 80146d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146d4:	f7eb fde8 	bl	80002a8 <__aeabi_dsub>
 80146d8:	4622      	mov	r2, r4
 80146da:	462b      	mov	r3, r5
 80146dc:	f7eb ff9c 	bl	8000618 <__aeabi_dmul>
 80146e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80146e4:	4680      	mov	r8, r0
 80146e6:	4689      	mov	r9, r1
 80146e8:	4650      	mov	r0, sl
 80146ea:	4659      	mov	r1, fp
 80146ec:	f7eb ff94 	bl	8000618 <__aeabi_dmul>
 80146f0:	4602      	mov	r2, r0
 80146f2:	460b      	mov	r3, r1
 80146f4:	4640      	mov	r0, r8
 80146f6:	4649      	mov	r1, r9
 80146f8:	f7eb fdd8 	bl	80002ac <__adddf3>
 80146fc:	4632      	mov	r2, r6
 80146fe:	463b      	mov	r3, r7
 8014700:	4680      	mov	r8, r0
 8014702:	4689      	mov	r9, r1
 8014704:	4620      	mov	r0, r4
 8014706:	4629      	mov	r1, r5
 8014708:	f7eb ff86 	bl	8000618 <__aeabi_dmul>
 801470c:	460b      	mov	r3, r1
 801470e:	4604      	mov	r4, r0
 8014710:	460d      	mov	r5, r1
 8014712:	4602      	mov	r2, r0
 8014714:	4649      	mov	r1, r9
 8014716:	4640      	mov	r0, r8
 8014718:	f7eb fdc8 	bl	80002ac <__adddf3>
 801471c:	4b1d      	ldr	r3, [pc, #116]	; (8014794 <__ieee754_pow+0x3dc>)
 801471e:	4299      	cmp	r1, r3
 8014720:	ec45 4b19 	vmov	d9, r4, r5
 8014724:	4606      	mov	r6, r0
 8014726:	460f      	mov	r7, r1
 8014728:	468b      	mov	fp, r1
 801472a:	f340 82fe 	ble.w	8014d2a <__ieee754_pow+0x972>
 801472e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014732:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014736:	4303      	orrs	r3, r0
 8014738:	f000 81f0 	beq.w	8014b1c <__ieee754_pow+0x764>
 801473c:	a310      	add	r3, pc, #64	; (adr r3, 8014780 <__ieee754_pow+0x3c8>)
 801473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014742:	ec51 0b18 	vmov	r0, r1, d8
 8014746:	f7eb ff67 	bl	8000618 <__aeabi_dmul>
 801474a:	a30d      	add	r3, pc, #52	; (adr r3, 8014780 <__ieee754_pow+0x3c8>)
 801474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014750:	e6cb      	b.n	80144ea <__ieee754_pow+0x132>
 8014752:	bf00      	nop
 8014754:	f3af 8000 	nop.w
 8014758:	60000000 	.word	0x60000000
 801475c:	3ff71547 	.word	0x3ff71547
 8014760:	f85ddf44 	.word	0xf85ddf44
 8014764:	3e54ae0b 	.word	0x3e54ae0b
 8014768:	55555555 	.word	0x55555555
 801476c:	3fd55555 	.word	0x3fd55555
 8014770:	652b82fe 	.word	0x652b82fe
 8014774:	3ff71547 	.word	0x3ff71547
 8014778:	00000000 	.word	0x00000000
 801477c:	bff00000 	.word	0xbff00000
 8014780:	8800759c 	.word	0x8800759c
 8014784:	7e37e43c 	.word	0x7e37e43c
 8014788:	3ff00000 	.word	0x3ff00000
 801478c:	3fd00000 	.word	0x3fd00000
 8014790:	3fe00000 	.word	0x3fe00000
 8014794:	408fffff 	.word	0x408fffff
 8014798:	4bd7      	ldr	r3, [pc, #860]	; (8014af8 <__ieee754_pow+0x740>)
 801479a:	ea03 0309 	and.w	r3, r3, r9
 801479e:	2200      	movs	r2, #0
 80147a0:	b92b      	cbnz	r3, 80147ae <__ieee754_pow+0x3f6>
 80147a2:	4bd6      	ldr	r3, [pc, #856]	; (8014afc <__ieee754_pow+0x744>)
 80147a4:	f7eb ff38 	bl	8000618 <__aeabi_dmul>
 80147a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80147ac:	460c      	mov	r4, r1
 80147ae:	1523      	asrs	r3, r4, #20
 80147b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80147b4:	4413      	add	r3, r2
 80147b6:	9309      	str	r3, [sp, #36]	; 0x24
 80147b8:	4bd1      	ldr	r3, [pc, #836]	; (8014b00 <__ieee754_pow+0x748>)
 80147ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80147be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80147c2:	429c      	cmp	r4, r3
 80147c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80147c8:	dd08      	ble.n	80147dc <__ieee754_pow+0x424>
 80147ca:	4bce      	ldr	r3, [pc, #824]	; (8014b04 <__ieee754_pow+0x74c>)
 80147cc:	429c      	cmp	r4, r3
 80147ce:	f340 8163 	ble.w	8014a98 <__ieee754_pow+0x6e0>
 80147d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147d4:	3301      	adds	r3, #1
 80147d6:	9309      	str	r3, [sp, #36]	; 0x24
 80147d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80147dc:	2400      	movs	r4, #0
 80147de:	00e3      	lsls	r3, r4, #3
 80147e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80147e2:	4bc9      	ldr	r3, [pc, #804]	; (8014b08 <__ieee754_pow+0x750>)
 80147e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80147e8:	ed93 7b00 	vldr	d7, [r3]
 80147ec:	4629      	mov	r1, r5
 80147ee:	ec53 2b17 	vmov	r2, r3, d7
 80147f2:	eeb0 8a47 	vmov.f32	s16, s14
 80147f6:	eef0 8a67 	vmov.f32	s17, s15
 80147fa:	4682      	mov	sl, r0
 80147fc:	f7eb fd54 	bl	80002a8 <__aeabi_dsub>
 8014800:	4652      	mov	r2, sl
 8014802:	4606      	mov	r6, r0
 8014804:	460f      	mov	r7, r1
 8014806:	462b      	mov	r3, r5
 8014808:	ec51 0b18 	vmov	r0, r1, d8
 801480c:	f7eb fd4e 	bl	80002ac <__adddf3>
 8014810:	4602      	mov	r2, r0
 8014812:	460b      	mov	r3, r1
 8014814:	2000      	movs	r0, #0
 8014816:	49bd      	ldr	r1, [pc, #756]	; (8014b0c <__ieee754_pow+0x754>)
 8014818:	f7ec f828 	bl	800086c <__aeabi_ddiv>
 801481c:	ec41 0b19 	vmov	d9, r0, r1
 8014820:	4602      	mov	r2, r0
 8014822:	460b      	mov	r3, r1
 8014824:	4630      	mov	r0, r6
 8014826:	4639      	mov	r1, r7
 8014828:	f7eb fef6 	bl	8000618 <__aeabi_dmul>
 801482c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014830:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014834:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014838:	2300      	movs	r3, #0
 801483a:	9304      	str	r3, [sp, #16]
 801483c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014840:	46ab      	mov	fp, r5
 8014842:	106d      	asrs	r5, r5, #1
 8014844:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014848:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801484c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014850:	2200      	movs	r2, #0
 8014852:	4640      	mov	r0, r8
 8014854:	4649      	mov	r1, r9
 8014856:	4614      	mov	r4, r2
 8014858:	461d      	mov	r5, r3
 801485a:	f7eb fedd 	bl	8000618 <__aeabi_dmul>
 801485e:	4602      	mov	r2, r0
 8014860:	460b      	mov	r3, r1
 8014862:	4630      	mov	r0, r6
 8014864:	4639      	mov	r1, r7
 8014866:	f7eb fd1f 	bl	80002a8 <__aeabi_dsub>
 801486a:	ec53 2b18 	vmov	r2, r3, d8
 801486e:	4606      	mov	r6, r0
 8014870:	460f      	mov	r7, r1
 8014872:	4620      	mov	r0, r4
 8014874:	4629      	mov	r1, r5
 8014876:	f7eb fd17 	bl	80002a8 <__aeabi_dsub>
 801487a:	4602      	mov	r2, r0
 801487c:	460b      	mov	r3, r1
 801487e:	4650      	mov	r0, sl
 8014880:	4659      	mov	r1, fp
 8014882:	f7eb fd11 	bl	80002a8 <__aeabi_dsub>
 8014886:	4642      	mov	r2, r8
 8014888:	464b      	mov	r3, r9
 801488a:	f7eb fec5 	bl	8000618 <__aeabi_dmul>
 801488e:	4602      	mov	r2, r0
 8014890:	460b      	mov	r3, r1
 8014892:	4630      	mov	r0, r6
 8014894:	4639      	mov	r1, r7
 8014896:	f7eb fd07 	bl	80002a8 <__aeabi_dsub>
 801489a:	ec53 2b19 	vmov	r2, r3, d9
 801489e:	f7eb febb 	bl	8000618 <__aeabi_dmul>
 80148a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80148a6:	ec41 0b18 	vmov	d8, r0, r1
 80148aa:	4610      	mov	r0, r2
 80148ac:	4619      	mov	r1, r3
 80148ae:	f7eb feb3 	bl	8000618 <__aeabi_dmul>
 80148b2:	a37d      	add	r3, pc, #500	; (adr r3, 8014aa8 <__ieee754_pow+0x6f0>)
 80148b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b8:	4604      	mov	r4, r0
 80148ba:	460d      	mov	r5, r1
 80148bc:	f7eb feac 	bl	8000618 <__aeabi_dmul>
 80148c0:	a37b      	add	r3, pc, #492	; (adr r3, 8014ab0 <__ieee754_pow+0x6f8>)
 80148c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c6:	f7eb fcf1 	bl	80002ac <__adddf3>
 80148ca:	4622      	mov	r2, r4
 80148cc:	462b      	mov	r3, r5
 80148ce:	f7eb fea3 	bl	8000618 <__aeabi_dmul>
 80148d2:	a379      	add	r3, pc, #484	; (adr r3, 8014ab8 <__ieee754_pow+0x700>)
 80148d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d8:	f7eb fce8 	bl	80002ac <__adddf3>
 80148dc:	4622      	mov	r2, r4
 80148de:	462b      	mov	r3, r5
 80148e0:	f7eb fe9a 	bl	8000618 <__aeabi_dmul>
 80148e4:	a376      	add	r3, pc, #472	; (adr r3, 8014ac0 <__ieee754_pow+0x708>)
 80148e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ea:	f7eb fcdf 	bl	80002ac <__adddf3>
 80148ee:	4622      	mov	r2, r4
 80148f0:	462b      	mov	r3, r5
 80148f2:	f7eb fe91 	bl	8000618 <__aeabi_dmul>
 80148f6:	a374      	add	r3, pc, #464	; (adr r3, 8014ac8 <__ieee754_pow+0x710>)
 80148f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fc:	f7eb fcd6 	bl	80002ac <__adddf3>
 8014900:	4622      	mov	r2, r4
 8014902:	462b      	mov	r3, r5
 8014904:	f7eb fe88 	bl	8000618 <__aeabi_dmul>
 8014908:	a371      	add	r3, pc, #452	; (adr r3, 8014ad0 <__ieee754_pow+0x718>)
 801490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490e:	f7eb fccd 	bl	80002ac <__adddf3>
 8014912:	4622      	mov	r2, r4
 8014914:	4606      	mov	r6, r0
 8014916:	460f      	mov	r7, r1
 8014918:	462b      	mov	r3, r5
 801491a:	4620      	mov	r0, r4
 801491c:	4629      	mov	r1, r5
 801491e:	f7eb fe7b 	bl	8000618 <__aeabi_dmul>
 8014922:	4602      	mov	r2, r0
 8014924:	460b      	mov	r3, r1
 8014926:	4630      	mov	r0, r6
 8014928:	4639      	mov	r1, r7
 801492a:	f7eb fe75 	bl	8000618 <__aeabi_dmul>
 801492e:	4642      	mov	r2, r8
 8014930:	4604      	mov	r4, r0
 8014932:	460d      	mov	r5, r1
 8014934:	464b      	mov	r3, r9
 8014936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801493a:	f7eb fcb7 	bl	80002ac <__adddf3>
 801493e:	ec53 2b18 	vmov	r2, r3, d8
 8014942:	f7eb fe69 	bl	8000618 <__aeabi_dmul>
 8014946:	4622      	mov	r2, r4
 8014948:	462b      	mov	r3, r5
 801494a:	f7eb fcaf 	bl	80002ac <__adddf3>
 801494e:	4642      	mov	r2, r8
 8014950:	4682      	mov	sl, r0
 8014952:	468b      	mov	fp, r1
 8014954:	464b      	mov	r3, r9
 8014956:	4640      	mov	r0, r8
 8014958:	4649      	mov	r1, r9
 801495a:	f7eb fe5d 	bl	8000618 <__aeabi_dmul>
 801495e:	4b6c      	ldr	r3, [pc, #432]	; (8014b10 <__ieee754_pow+0x758>)
 8014960:	2200      	movs	r2, #0
 8014962:	4606      	mov	r6, r0
 8014964:	460f      	mov	r7, r1
 8014966:	f7eb fca1 	bl	80002ac <__adddf3>
 801496a:	4652      	mov	r2, sl
 801496c:	465b      	mov	r3, fp
 801496e:	f7eb fc9d 	bl	80002ac <__adddf3>
 8014972:	9c04      	ldr	r4, [sp, #16]
 8014974:	460d      	mov	r5, r1
 8014976:	4622      	mov	r2, r4
 8014978:	460b      	mov	r3, r1
 801497a:	4640      	mov	r0, r8
 801497c:	4649      	mov	r1, r9
 801497e:	f7eb fe4b 	bl	8000618 <__aeabi_dmul>
 8014982:	4b63      	ldr	r3, [pc, #396]	; (8014b10 <__ieee754_pow+0x758>)
 8014984:	4680      	mov	r8, r0
 8014986:	4689      	mov	r9, r1
 8014988:	2200      	movs	r2, #0
 801498a:	4620      	mov	r0, r4
 801498c:	4629      	mov	r1, r5
 801498e:	f7eb fc8b 	bl	80002a8 <__aeabi_dsub>
 8014992:	4632      	mov	r2, r6
 8014994:	463b      	mov	r3, r7
 8014996:	f7eb fc87 	bl	80002a8 <__aeabi_dsub>
 801499a:	4602      	mov	r2, r0
 801499c:	460b      	mov	r3, r1
 801499e:	4650      	mov	r0, sl
 80149a0:	4659      	mov	r1, fp
 80149a2:	f7eb fc81 	bl	80002a8 <__aeabi_dsub>
 80149a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80149aa:	f7eb fe35 	bl	8000618 <__aeabi_dmul>
 80149ae:	4622      	mov	r2, r4
 80149b0:	4606      	mov	r6, r0
 80149b2:	460f      	mov	r7, r1
 80149b4:	462b      	mov	r3, r5
 80149b6:	ec51 0b18 	vmov	r0, r1, d8
 80149ba:	f7eb fe2d 	bl	8000618 <__aeabi_dmul>
 80149be:	4602      	mov	r2, r0
 80149c0:	460b      	mov	r3, r1
 80149c2:	4630      	mov	r0, r6
 80149c4:	4639      	mov	r1, r7
 80149c6:	f7eb fc71 	bl	80002ac <__adddf3>
 80149ca:	4606      	mov	r6, r0
 80149cc:	460f      	mov	r7, r1
 80149ce:	4602      	mov	r2, r0
 80149d0:	460b      	mov	r3, r1
 80149d2:	4640      	mov	r0, r8
 80149d4:	4649      	mov	r1, r9
 80149d6:	f7eb fc69 	bl	80002ac <__adddf3>
 80149da:	9c04      	ldr	r4, [sp, #16]
 80149dc:	a33e      	add	r3, pc, #248	; (adr r3, 8014ad8 <__ieee754_pow+0x720>)
 80149de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e2:	4620      	mov	r0, r4
 80149e4:	460d      	mov	r5, r1
 80149e6:	f7eb fe17 	bl	8000618 <__aeabi_dmul>
 80149ea:	4642      	mov	r2, r8
 80149ec:	ec41 0b18 	vmov	d8, r0, r1
 80149f0:	464b      	mov	r3, r9
 80149f2:	4620      	mov	r0, r4
 80149f4:	4629      	mov	r1, r5
 80149f6:	f7eb fc57 	bl	80002a8 <__aeabi_dsub>
 80149fa:	4602      	mov	r2, r0
 80149fc:	460b      	mov	r3, r1
 80149fe:	4630      	mov	r0, r6
 8014a00:	4639      	mov	r1, r7
 8014a02:	f7eb fc51 	bl	80002a8 <__aeabi_dsub>
 8014a06:	a336      	add	r3, pc, #216	; (adr r3, 8014ae0 <__ieee754_pow+0x728>)
 8014a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0c:	f7eb fe04 	bl	8000618 <__aeabi_dmul>
 8014a10:	a335      	add	r3, pc, #212	; (adr r3, 8014ae8 <__ieee754_pow+0x730>)
 8014a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a16:	4606      	mov	r6, r0
 8014a18:	460f      	mov	r7, r1
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	4629      	mov	r1, r5
 8014a1e:	f7eb fdfb 	bl	8000618 <__aeabi_dmul>
 8014a22:	4602      	mov	r2, r0
 8014a24:	460b      	mov	r3, r1
 8014a26:	4630      	mov	r0, r6
 8014a28:	4639      	mov	r1, r7
 8014a2a:	f7eb fc3f 	bl	80002ac <__adddf3>
 8014a2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a30:	4b38      	ldr	r3, [pc, #224]	; (8014b14 <__ieee754_pow+0x75c>)
 8014a32:	4413      	add	r3, r2
 8014a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a38:	f7eb fc38 	bl	80002ac <__adddf3>
 8014a3c:	4682      	mov	sl, r0
 8014a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a40:	468b      	mov	fp, r1
 8014a42:	f7eb fd7f 	bl	8000544 <__aeabi_i2d>
 8014a46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a48:	4b33      	ldr	r3, [pc, #204]	; (8014b18 <__ieee754_pow+0x760>)
 8014a4a:	4413      	add	r3, r2
 8014a4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014a50:	4606      	mov	r6, r0
 8014a52:	460f      	mov	r7, r1
 8014a54:	4652      	mov	r2, sl
 8014a56:	465b      	mov	r3, fp
 8014a58:	ec51 0b18 	vmov	r0, r1, d8
 8014a5c:	f7eb fc26 	bl	80002ac <__adddf3>
 8014a60:	4642      	mov	r2, r8
 8014a62:	464b      	mov	r3, r9
 8014a64:	f7eb fc22 	bl	80002ac <__adddf3>
 8014a68:	4632      	mov	r2, r6
 8014a6a:	463b      	mov	r3, r7
 8014a6c:	f7eb fc1e 	bl	80002ac <__adddf3>
 8014a70:	9c04      	ldr	r4, [sp, #16]
 8014a72:	4632      	mov	r2, r6
 8014a74:	463b      	mov	r3, r7
 8014a76:	4620      	mov	r0, r4
 8014a78:	460d      	mov	r5, r1
 8014a7a:	f7eb fc15 	bl	80002a8 <__aeabi_dsub>
 8014a7e:	4642      	mov	r2, r8
 8014a80:	464b      	mov	r3, r9
 8014a82:	f7eb fc11 	bl	80002a8 <__aeabi_dsub>
 8014a86:	ec53 2b18 	vmov	r2, r3, d8
 8014a8a:	f7eb fc0d 	bl	80002a8 <__aeabi_dsub>
 8014a8e:	4602      	mov	r2, r0
 8014a90:	460b      	mov	r3, r1
 8014a92:	4650      	mov	r0, sl
 8014a94:	4659      	mov	r1, fp
 8014a96:	e606      	b.n	80146a6 <__ieee754_pow+0x2ee>
 8014a98:	2401      	movs	r4, #1
 8014a9a:	e6a0      	b.n	80147de <__ieee754_pow+0x426>
 8014a9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014af0 <__ieee754_pow+0x738>
 8014aa0:	e60d      	b.n	80146be <__ieee754_pow+0x306>
 8014aa2:	bf00      	nop
 8014aa4:	f3af 8000 	nop.w
 8014aa8:	4a454eef 	.word	0x4a454eef
 8014aac:	3fca7e28 	.word	0x3fca7e28
 8014ab0:	93c9db65 	.word	0x93c9db65
 8014ab4:	3fcd864a 	.word	0x3fcd864a
 8014ab8:	a91d4101 	.word	0xa91d4101
 8014abc:	3fd17460 	.word	0x3fd17460
 8014ac0:	518f264d 	.word	0x518f264d
 8014ac4:	3fd55555 	.word	0x3fd55555
 8014ac8:	db6fabff 	.word	0xdb6fabff
 8014acc:	3fdb6db6 	.word	0x3fdb6db6
 8014ad0:	33333303 	.word	0x33333303
 8014ad4:	3fe33333 	.word	0x3fe33333
 8014ad8:	e0000000 	.word	0xe0000000
 8014adc:	3feec709 	.word	0x3feec709
 8014ae0:	dc3a03fd 	.word	0xdc3a03fd
 8014ae4:	3feec709 	.word	0x3feec709
 8014ae8:	145b01f5 	.word	0x145b01f5
 8014aec:	be3e2fe0 	.word	0xbe3e2fe0
 8014af0:	00000000 	.word	0x00000000
 8014af4:	3ff00000 	.word	0x3ff00000
 8014af8:	7ff00000 	.word	0x7ff00000
 8014afc:	43400000 	.word	0x43400000
 8014b00:	0003988e 	.word	0x0003988e
 8014b04:	000bb679 	.word	0x000bb679
 8014b08:	0801c3c0 	.word	0x0801c3c0
 8014b0c:	3ff00000 	.word	0x3ff00000
 8014b10:	40080000 	.word	0x40080000
 8014b14:	0801c3e0 	.word	0x0801c3e0
 8014b18:	0801c3d0 	.word	0x0801c3d0
 8014b1c:	a3b5      	add	r3, pc, #724	; (adr r3, 8014df4 <__ieee754_pow+0xa3c>)
 8014b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b22:	4640      	mov	r0, r8
 8014b24:	4649      	mov	r1, r9
 8014b26:	f7eb fbc1 	bl	80002ac <__adddf3>
 8014b2a:	4622      	mov	r2, r4
 8014b2c:	ec41 0b1a 	vmov	d10, r0, r1
 8014b30:	462b      	mov	r3, r5
 8014b32:	4630      	mov	r0, r6
 8014b34:	4639      	mov	r1, r7
 8014b36:	f7eb fbb7 	bl	80002a8 <__aeabi_dsub>
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	460b      	mov	r3, r1
 8014b3e:	ec51 0b1a 	vmov	r0, r1, d10
 8014b42:	f7eb fff9 	bl	8000b38 <__aeabi_dcmpgt>
 8014b46:	2800      	cmp	r0, #0
 8014b48:	f47f adf8 	bne.w	801473c <__ieee754_pow+0x384>
 8014b4c:	4aa4      	ldr	r2, [pc, #656]	; (8014de0 <__ieee754_pow+0xa28>)
 8014b4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014b52:	4293      	cmp	r3, r2
 8014b54:	f340 810b 	ble.w	8014d6e <__ieee754_pow+0x9b6>
 8014b58:	151b      	asrs	r3, r3, #20
 8014b5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014b5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014b62:	fa4a f303 	asr.w	r3, sl, r3
 8014b66:	445b      	add	r3, fp
 8014b68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014b6c:	4e9d      	ldr	r6, [pc, #628]	; (8014de4 <__ieee754_pow+0xa2c>)
 8014b6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014b72:	4116      	asrs	r6, r2
 8014b74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014b78:	2000      	movs	r0, #0
 8014b7a:	ea23 0106 	bic.w	r1, r3, r6
 8014b7e:	f1c2 0214 	rsb	r2, r2, #20
 8014b82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014b86:	fa4a fa02 	asr.w	sl, sl, r2
 8014b8a:	f1bb 0f00 	cmp.w	fp, #0
 8014b8e:	4602      	mov	r2, r0
 8014b90:	460b      	mov	r3, r1
 8014b92:	4620      	mov	r0, r4
 8014b94:	4629      	mov	r1, r5
 8014b96:	bfb8      	it	lt
 8014b98:	f1ca 0a00 	rsblt	sl, sl, #0
 8014b9c:	f7eb fb84 	bl	80002a8 <__aeabi_dsub>
 8014ba0:	ec41 0b19 	vmov	d9, r0, r1
 8014ba4:	4642      	mov	r2, r8
 8014ba6:	464b      	mov	r3, r9
 8014ba8:	ec51 0b19 	vmov	r0, r1, d9
 8014bac:	f7eb fb7e 	bl	80002ac <__adddf3>
 8014bb0:	2400      	movs	r4, #0
 8014bb2:	a379      	add	r3, pc, #484	; (adr r3, 8014d98 <__ieee754_pow+0x9e0>)
 8014bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb8:	4620      	mov	r0, r4
 8014bba:	460d      	mov	r5, r1
 8014bbc:	f7eb fd2c 	bl	8000618 <__aeabi_dmul>
 8014bc0:	ec53 2b19 	vmov	r2, r3, d9
 8014bc4:	4606      	mov	r6, r0
 8014bc6:	460f      	mov	r7, r1
 8014bc8:	4620      	mov	r0, r4
 8014bca:	4629      	mov	r1, r5
 8014bcc:	f7eb fb6c 	bl	80002a8 <__aeabi_dsub>
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	4640      	mov	r0, r8
 8014bd6:	4649      	mov	r1, r9
 8014bd8:	f7eb fb66 	bl	80002a8 <__aeabi_dsub>
 8014bdc:	a370      	add	r3, pc, #448	; (adr r3, 8014da0 <__ieee754_pow+0x9e8>)
 8014bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be2:	f7eb fd19 	bl	8000618 <__aeabi_dmul>
 8014be6:	a370      	add	r3, pc, #448	; (adr r3, 8014da8 <__ieee754_pow+0x9f0>)
 8014be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bec:	4680      	mov	r8, r0
 8014bee:	4689      	mov	r9, r1
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	4629      	mov	r1, r5
 8014bf4:	f7eb fd10 	bl	8000618 <__aeabi_dmul>
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	460b      	mov	r3, r1
 8014bfc:	4640      	mov	r0, r8
 8014bfe:	4649      	mov	r1, r9
 8014c00:	f7eb fb54 	bl	80002ac <__adddf3>
 8014c04:	4604      	mov	r4, r0
 8014c06:	460d      	mov	r5, r1
 8014c08:	4602      	mov	r2, r0
 8014c0a:	460b      	mov	r3, r1
 8014c0c:	4630      	mov	r0, r6
 8014c0e:	4639      	mov	r1, r7
 8014c10:	f7eb fb4c 	bl	80002ac <__adddf3>
 8014c14:	4632      	mov	r2, r6
 8014c16:	463b      	mov	r3, r7
 8014c18:	4680      	mov	r8, r0
 8014c1a:	4689      	mov	r9, r1
 8014c1c:	f7eb fb44 	bl	80002a8 <__aeabi_dsub>
 8014c20:	4602      	mov	r2, r0
 8014c22:	460b      	mov	r3, r1
 8014c24:	4620      	mov	r0, r4
 8014c26:	4629      	mov	r1, r5
 8014c28:	f7eb fb3e 	bl	80002a8 <__aeabi_dsub>
 8014c2c:	4642      	mov	r2, r8
 8014c2e:	4606      	mov	r6, r0
 8014c30:	460f      	mov	r7, r1
 8014c32:	464b      	mov	r3, r9
 8014c34:	4640      	mov	r0, r8
 8014c36:	4649      	mov	r1, r9
 8014c38:	f7eb fcee 	bl	8000618 <__aeabi_dmul>
 8014c3c:	a35c      	add	r3, pc, #368	; (adr r3, 8014db0 <__ieee754_pow+0x9f8>)
 8014c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c42:	4604      	mov	r4, r0
 8014c44:	460d      	mov	r5, r1
 8014c46:	f7eb fce7 	bl	8000618 <__aeabi_dmul>
 8014c4a:	a35b      	add	r3, pc, #364	; (adr r3, 8014db8 <__ieee754_pow+0xa00>)
 8014c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c50:	f7eb fb2a 	bl	80002a8 <__aeabi_dsub>
 8014c54:	4622      	mov	r2, r4
 8014c56:	462b      	mov	r3, r5
 8014c58:	f7eb fcde 	bl	8000618 <__aeabi_dmul>
 8014c5c:	a358      	add	r3, pc, #352	; (adr r3, 8014dc0 <__ieee754_pow+0xa08>)
 8014c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c62:	f7eb fb23 	bl	80002ac <__adddf3>
 8014c66:	4622      	mov	r2, r4
 8014c68:	462b      	mov	r3, r5
 8014c6a:	f7eb fcd5 	bl	8000618 <__aeabi_dmul>
 8014c6e:	a356      	add	r3, pc, #344	; (adr r3, 8014dc8 <__ieee754_pow+0xa10>)
 8014c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c74:	f7eb fb18 	bl	80002a8 <__aeabi_dsub>
 8014c78:	4622      	mov	r2, r4
 8014c7a:	462b      	mov	r3, r5
 8014c7c:	f7eb fccc 	bl	8000618 <__aeabi_dmul>
 8014c80:	a353      	add	r3, pc, #332	; (adr r3, 8014dd0 <__ieee754_pow+0xa18>)
 8014c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c86:	f7eb fb11 	bl	80002ac <__adddf3>
 8014c8a:	4622      	mov	r2, r4
 8014c8c:	462b      	mov	r3, r5
 8014c8e:	f7eb fcc3 	bl	8000618 <__aeabi_dmul>
 8014c92:	4602      	mov	r2, r0
 8014c94:	460b      	mov	r3, r1
 8014c96:	4640      	mov	r0, r8
 8014c98:	4649      	mov	r1, r9
 8014c9a:	f7eb fb05 	bl	80002a8 <__aeabi_dsub>
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	460d      	mov	r5, r1
 8014ca2:	4602      	mov	r2, r0
 8014ca4:	460b      	mov	r3, r1
 8014ca6:	4640      	mov	r0, r8
 8014ca8:	4649      	mov	r1, r9
 8014caa:	f7eb fcb5 	bl	8000618 <__aeabi_dmul>
 8014cae:	2200      	movs	r2, #0
 8014cb0:	ec41 0b19 	vmov	d9, r0, r1
 8014cb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014cb8:	4620      	mov	r0, r4
 8014cba:	4629      	mov	r1, r5
 8014cbc:	f7eb faf4 	bl	80002a8 <__aeabi_dsub>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	460b      	mov	r3, r1
 8014cc4:	ec51 0b19 	vmov	r0, r1, d9
 8014cc8:	f7eb fdd0 	bl	800086c <__aeabi_ddiv>
 8014ccc:	4632      	mov	r2, r6
 8014cce:	4604      	mov	r4, r0
 8014cd0:	460d      	mov	r5, r1
 8014cd2:	463b      	mov	r3, r7
 8014cd4:	4640      	mov	r0, r8
 8014cd6:	4649      	mov	r1, r9
 8014cd8:	f7eb fc9e 	bl	8000618 <__aeabi_dmul>
 8014cdc:	4632      	mov	r2, r6
 8014cde:	463b      	mov	r3, r7
 8014ce0:	f7eb fae4 	bl	80002ac <__adddf3>
 8014ce4:	4602      	mov	r2, r0
 8014ce6:	460b      	mov	r3, r1
 8014ce8:	4620      	mov	r0, r4
 8014cea:	4629      	mov	r1, r5
 8014cec:	f7eb fadc 	bl	80002a8 <__aeabi_dsub>
 8014cf0:	4642      	mov	r2, r8
 8014cf2:	464b      	mov	r3, r9
 8014cf4:	f7eb fad8 	bl	80002a8 <__aeabi_dsub>
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	4602      	mov	r2, r0
 8014cfc:	493a      	ldr	r1, [pc, #232]	; (8014de8 <__ieee754_pow+0xa30>)
 8014cfe:	2000      	movs	r0, #0
 8014d00:	f7eb fad2 	bl	80002a8 <__aeabi_dsub>
 8014d04:	e9cd 0100 	strd	r0, r1, [sp]
 8014d08:	9b01      	ldr	r3, [sp, #4]
 8014d0a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014d12:	da2f      	bge.n	8014d74 <__ieee754_pow+0x9bc>
 8014d14:	4650      	mov	r0, sl
 8014d16:	ed9d 0b00 	vldr	d0, [sp]
 8014d1a:	f000 f9cd 	bl	80150b8 <scalbn>
 8014d1e:	ec51 0b10 	vmov	r0, r1, d0
 8014d22:	ec53 2b18 	vmov	r2, r3, d8
 8014d26:	f7ff bbe0 	b.w	80144ea <__ieee754_pow+0x132>
 8014d2a:	4b30      	ldr	r3, [pc, #192]	; (8014dec <__ieee754_pow+0xa34>)
 8014d2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014d30:	429e      	cmp	r6, r3
 8014d32:	f77f af0b 	ble.w	8014b4c <__ieee754_pow+0x794>
 8014d36:	4b2e      	ldr	r3, [pc, #184]	; (8014df0 <__ieee754_pow+0xa38>)
 8014d38:	440b      	add	r3, r1
 8014d3a:	4303      	orrs	r3, r0
 8014d3c:	d00b      	beq.n	8014d56 <__ieee754_pow+0x99e>
 8014d3e:	a326      	add	r3, pc, #152	; (adr r3, 8014dd8 <__ieee754_pow+0xa20>)
 8014d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d44:	ec51 0b18 	vmov	r0, r1, d8
 8014d48:	f7eb fc66 	bl	8000618 <__aeabi_dmul>
 8014d4c:	a322      	add	r3, pc, #136	; (adr r3, 8014dd8 <__ieee754_pow+0xa20>)
 8014d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d52:	f7ff bbca 	b.w	80144ea <__ieee754_pow+0x132>
 8014d56:	4622      	mov	r2, r4
 8014d58:	462b      	mov	r3, r5
 8014d5a:	f7eb faa5 	bl	80002a8 <__aeabi_dsub>
 8014d5e:	4642      	mov	r2, r8
 8014d60:	464b      	mov	r3, r9
 8014d62:	f7eb fedf 	bl	8000b24 <__aeabi_dcmpge>
 8014d66:	2800      	cmp	r0, #0
 8014d68:	f43f aef0 	beq.w	8014b4c <__ieee754_pow+0x794>
 8014d6c:	e7e7      	b.n	8014d3e <__ieee754_pow+0x986>
 8014d6e:	f04f 0a00 	mov.w	sl, #0
 8014d72:	e717      	b.n	8014ba4 <__ieee754_pow+0x7ec>
 8014d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d78:	4619      	mov	r1, r3
 8014d7a:	e7d2      	b.n	8014d22 <__ieee754_pow+0x96a>
 8014d7c:	491a      	ldr	r1, [pc, #104]	; (8014de8 <__ieee754_pow+0xa30>)
 8014d7e:	2000      	movs	r0, #0
 8014d80:	f7ff bb9e 	b.w	80144c0 <__ieee754_pow+0x108>
 8014d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d88:	f7ff bb9a 	b.w	80144c0 <__ieee754_pow+0x108>
 8014d8c:	9000      	str	r0, [sp, #0]
 8014d8e:	f7ff bb76 	b.w	801447e <__ieee754_pow+0xc6>
 8014d92:	2100      	movs	r1, #0
 8014d94:	f7ff bb60 	b.w	8014458 <__ieee754_pow+0xa0>
 8014d98:	00000000 	.word	0x00000000
 8014d9c:	3fe62e43 	.word	0x3fe62e43
 8014da0:	fefa39ef 	.word	0xfefa39ef
 8014da4:	3fe62e42 	.word	0x3fe62e42
 8014da8:	0ca86c39 	.word	0x0ca86c39
 8014dac:	be205c61 	.word	0xbe205c61
 8014db0:	72bea4d0 	.word	0x72bea4d0
 8014db4:	3e663769 	.word	0x3e663769
 8014db8:	c5d26bf1 	.word	0xc5d26bf1
 8014dbc:	3ebbbd41 	.word	0x3ebbbd41
 8014dc0:	af25de2c 	.word	0xaf25de2c
 8014dc4:	3f11566a 	.word	0x3f11566a
 8014dc8:	16bebd93 	.word	0x16bebd93
 8014dcc:	3f66c16c 	.word	0x3f66c16c
 8014dd0:	5555553e 	.word	0x5555553e
 8014dd4:	3fc55555 	.word	0x3fc55555
 8014dd8:	c2f8f359 	.word	0xc2f8f359
 8014ddc:	01a56e1f 	.word	0x01a56e1f
 8014de0:	3fe00000 	.word	0x3fe00000
 8014de4:	000fffff 	.word	0x000fffff
 8014de8:	3ff00000 	.word	0x3ff00000
 8014dec:	4090cbff 	.word	0x4090cbff
 8014df0:	3f6f3400 	.word	0x3f6f3400
 8014df4:	652b82fe 	.word	0x652b82fe
 8014df8:	3c971547 	.word	0x3c971547

08014dfc <__ieee754_sqrt>:
 8014dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e00:	ec55 4b10 	vmov	r4, r5, d0
 8014e04:	4e56      	ldr	r6, [pc, #344]	; (8014f60 <__ieee754_sqrt+0x164>)
 8014e06:	43ae      	bics	r6, r5
 8014e08:	ee10 0a10 	vmov	r0, s0
 8014e0c:	ee10 3a10 	vmov	r3, s0
 8014e10:	4629      	mov	r1, r5
 8014e12:	462a      	mov	r2, r5
 8014e14:	d110      	bne.n	8014e38 <__ieee754_sqrt+0x3c>
 8014e16:	ee10 2a10 	vmov	r2, s0
 8014e1a:	462b      	mov	r3, r5
 8014e1c:	f7eb fbfc 	bl	8000618 <__aeabi_dmul>
 8014e20:	4602      	mov	r2, r0
 8014e22:	460b      	mov	r3, r1
 8014e24:	4620      	mov	r0, r4
 8014e26:	4629      	mov	r1, r5
 8014e28:	f7eb fa40 	bl	80002ac <__adddf3>
 8014e2c:	4604      	mov	r4, r0
 8014e2e:	460d      	mov	r5, r1
 8014e30:	ec45 4b10 	vmov	d0, r4, r5
 8014e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e38:	2d00      	cmp	r5, #0
 8014e3a:	dc10      	bgt.n	8014e5e <__ieee754_sqrt+0x62>
 8014e3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014e40:	4330      	orrs	r0, r6
 8014e42:	d0f5      	beq.n	8014e30 <__ieee754_sqrt+0x34>
 8014e44:	b15d      	cbz	r5, 8014e5e <__ieee754_sqrt+0x62>
 8014e46:	ee10 2a10 	vmov	r2, s0
 8014e4a:	462b      	mov	r3, r5
 8014e4c:	ee10 0a10 	vmov	r0, s0
 8014e50:	f7eb fa2a 	bl	80002a8 <__aeabi_dsub>
 8014e54:	4602      	mov	r2, r0
 8014e56:	460b      	mov	r3, r1
 8014e58:	f7eb fd08 	bl	800086c <__aeabi_ddiv>
 8014e5c:	e7e6      	b.n	8014e2c <__ieee754_sqrt+0x30>
 8014e5e:	1509      	asrs	r1, r1, #20
 8014e60:	d076      	beq.n	8014f50 <__ieee754_sqrt+0x154>
 8014e62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014e66:	07ce      	lsls	r6, r1, #31
 8014e68:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8014e6c:	bf5e      	ittt	pl
 8014e6e:	0fda      	lsrpl	r2, r3, #31
 8014e70:	005b      	lslpl	r3, r3, #1
 8014e72:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8014e76:	0fda      	lsrs	r2, r3, #31
 8014e78:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8014e7c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014e80:	2000      	movs	r0, #0
 8014e82:	106d      	asrs	r5, r5, #1
 8014e84:	005b      	lsls	r3, r3, #1
 8014e86:	f04f 0e16 	mov.w	lr, #22
 8014e8a:	4684      	mov	ip, r0
 8014e8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014e90:	eb0c 0401 	add.w	r4, ip, r1
 8014e94:	4294      	cmp	r4, r2
 8014e96:	bfde      	ittt	le
 8014e98:	1b12      	suble	r2, r2, r4
 8014e9a:	eb04 0c01 	addle.w	ip, r4, r1
 8014e9e:	1840      	addle	r0, r0, r1
 8014ea0:	0052      	lsls	r2, r2, #1
 8014ea2:	f1be 0e01 	subs.w	lr, lr, #1
 8014ea6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014eaa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014eae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014eb2:	d1ed      	bne.n	8014e90 <__ieee754_sqrt+0x94>
 8014eb4:	4671      	mov	r1, lr
 8014eb6:	2720      	movs	r7, #32
 8014eb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014ebc:	4562      	cmp	r2, ip
 8014ebe:	eb04 060e 	add.w	r6, r4, lr
 8014ec2:	dc02      	bgt.n	8014eca <__ieee754_sqrt+0xce>
 8014ec4:	d113      	bne.n	8014eee <__ieee754_sqrt+0xf2>
 8014ec6:	429e      	cmp	r6, r3
 8014ec8:	d811      	bhi.n	8014eee <__ieee754_sqrt+0xf2>
 8014eca:	2e00      	cmp	r6, #0
 8014ecc:	eb06 0e04 	add.w	lr, r6, r4
 8014ed0:	da43      	bge.n	8014f5a <__ieee754_sqrt+0x15e>
 8014ed2:	f1be 0f00 	cmp.w	lr, #0
 8014ed6:	db40      	blt.n	8014f5a <__ieee754_sqrt+0x15e>
 8014ed8:	f10c 0801 	add.w	r8, ip, #1
 8014edc:	eba2 020c 	sub.w	r2, r2, ip
 8014ee0:	429e      	cmp	r6, r3
 8014ee2:	bf88      	it	hi
 8014ee4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014ee8:	1b9b      	subs	r3, r3, r6
 8014eea:	4421      	add	r1, r4
 8014eec:	46c4      	mov	ip, r8
 8014eee:	0052      	lsls	r2, r2, #1
 8014ef0:	3f01      	subs	r7, #1
 8014ef2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014ef6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014efa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014efe:	d1dd      	bne.n	8014ebc <__ieee754_sqrt+0xc0>
 8014f00:	4313      	orrs	r3, r2
 8014f02:	d006      	beq.n	8014f12 <__ieee754_sqrt+0x116>
 8014f04:	1c4c      	adds	r4, r1, #1
 8014f06:	bf13      	iteet	ne
 8014f08:	3101      	addne	r1, #1
 8014f0a:	3001      	addeq	r0, #1
 8014f0c:	4639      	moveq	r1, r7
 8014f0e:	f021 0101 	bicne.w	r1, r1, #1
 8014f12:	1043      	asrs	r3, r0, #1
 8014f14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014f18:	0849      	lsrs	r1, r1, #1
 8014f1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014f1e:	07c2      	lsls	r2, r0, #31
 8014f20:	bf48      	it	mi
 8014f22:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8014f26:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8014f2a:	460c      	mov	r4, r1
 8014f2c:	463d      	mov	r5, r7
 8014f2e:	e77f      	b.n	8014e30 <__ieee754_sqrt+0x34>
 8014f30:	0ada      	lsrs	r2, r3, #11
 8014f32:	3815      	subs	r0, #21
 8014f34:	055b      	lsls	r3, r3, #21
 8014f36:	2a00      	cmp	r2, #0
 8014f38:	d0fa      	beq.n	8014f30 <__ieee754_sqrt+0x134>
 8014f3a:	02d7      	lsls	r7, r2, #11
 8014f3c:	d50a      	bpl.n	8014f54 <__ieee754_sqrt+0x158>
 8014f3e:	f1c1 0420 	rsb	r4, r1, #32
 8014f42:	fa23 f404 	lsr.w	r4, r3, r4
 8014f46:	1e4d      	subs	r5, r1, #1
 8014f48:	408b      	lsls	r3, r1
 8014f4a:	4322      	orrs	r2, r4
 8014f4c:	1b41      	subs	r1, r0, r5
 8014f4e:	e788      	b.n	8014e62 <__ieee754_sqrt+0x66>
 8014f50:	4608      	mov	r0, r1
 8014f52:	e7f0      	b.n	8014f36 <__ieee754_sqrt+0x13a>
 8014f54:	0052      	lsls	r2, r2, #1
 8014f56:	3101      	adds	r1, #1
 8014f58:	e7ef      	b.n	8014f3a <__ieee754_sqrt+0x13e>
 8014f5a:	46e0      	mov	r8, ip
 8014f5c:	e7be      	b.n	8014edc <__ieee754_sqrt+0xe0>
 8014f5e:	bf00      	nop
 8014f60:	7ff00000 	.word	0x7ff00000

08014f64 <fabs>:
 8014f64:	ec51 0b10 	vmov	r0, r1, d0
 8014f68:	ee10 2a10 	vmov	r2, s0
 8014f6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014f70:	ec43 2b10 	vmov	d0, r2, r3
 8014f74:	4770      	bx	lr

08014f76 <finite>:
 8014f76:	b082      	sub	sp, #8
 8014f78:	ed8d 0b00 	vstr	d0, [sp]
 8014f7c:	9801      	ldr	r0, [sp, #4]
 8014f7e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014f82:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014f86:	0fc0      	lsrs	r0, r0, #31
 8014f88:	b002      	add	sp, #8
 8014f8a:	4770      	bx	lr
 8014f8c:	0000      	movs	r0, r0
	...

08014f90 <nan>:
 8014f90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014f98 <nan+0x8>
 8014f94:	4770      	bx	lr
 8014f96:	bf00      	nop
 8014f98:	00000000 	.word	0x00000000
 8014f9c:	7ff80000 	.word	0x7ff80000

08014fa0 <rint>:
 8014fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014fa2:	ec51 0b10 	vmov	r0, r1, d0
 8014fa6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014faa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014fae:	2e13      	cmp	r6, #19
 8014fb0:	ee10 4a10 	vmov	r4, s0
 8014fb4:	460b      	mov	r3, r1
 8014fb6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014fba:	dc58      	bgt.n	801506e <rint+0xce>
 8014fbc:	2e00      	cmp	r6, #0
 8014fbe:	da2b      	bge.n	8015018 <rint+0x78>
 8014fc0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014fc4:	4302      	orrs	r2, r0
 8014fc6:	d023      	beq.n	8015010 <rint+0x70>
 8014fc8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014fcc:	4302      	orrs	r2, r0
 8014fce:	4254      	negs	r4, r2
 8014fd0:	4314      	orrs	r4, r2
 8014fd2:	0c4b      	lsrs	r3, r1, #17
 8014fd4:	0b24      	lsrs	r4, r4, #12
 8014fd6:	045b      	lsls	r3, r3, #17
 8014fd8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014fdc:	ea44 0103 	orr.w	r1, r4, r3
 8014fe0:	4b32      	ldr	r3, [pc, #200]	; (80150ac <rint+0x10c>)
 8014fe2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014fe6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014fea:	4602      	mov	r2, r0
 8014fec:	460b      	mov	r3, r1
 8014fee:	4630      	mov	r0, r6
 8014ff0:	4639      	mov	r1, r7
 8014ff2:	f7eb f95b 	bl	80002ac <__adddf3>
 8014ff6:	e9cd 0100 	strd	r0, r1, [sp]
 8014ffa:	463b      	mov	r3, r7
 8014ffc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015000:	4632      	mov	r2, r6
 8015002:	f7eb f951 	bl	80002a8 <__aeabi_dsub>
 8015006:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801500a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801500e:	4639      	mov	r1, r7
 8015010:	ec41 0b10 	vmov	d0, r0, r1
 8015014:	b003      	add	sp, #12
 8015016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015018:	4a25      	ldr	r2, [pc, #148]	; (80150b0 <rint+0x110>)
 801501a:	4132      	asrs	r2, r6
 801501c:	ea01 0702 	and.w	r7, r1, r2
 8015020:	4307      	orrs	r7, r0
 8015022:	d0f5      	beq.n	8015010 <rint+0x70>
 8015024:	0851      	lsrs	r1, r2, #1
 8015026:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801502a:	4314      	orrs	r4, r2
 801502c:	d00c      	beq.n	8015048 <rint+0xa8>
 801502e:	ea23 0201 	bic.w	r2, r3, r1
 8015032:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015036:	2e13      	cmp	r6, #19
 8015038:	fa43 f606 	asr.w	r6, r3, r6
 801503c:	bf0c      	ite	eq
 801503e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015042:	2400      	movne	r4, #0
 8015044:	ea42 0306 	orr.w	r3, r2, r6
 8015048:	4918      	ldr	r1, [pc, #96]	; (80150ac <rint+0x10c>)
 801504a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801504e:	4622      	mov	r2, r4
 8015050:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015054:	4620      	mov	r0, r4
 8015056:	4629      	mov	r1, r5
 8015058:	f7eb f928 	bl	80002ac <__adddf3>
 801505c:	e9cd 0100 	strd	r0, r1, [sp]
 8015060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015064:	4622      	mov	r2, r4
 8015066:	462b      	mov	r3, r5
 8015068:	f7eb f91e 	bl	80002a8 <__aeabi_dsub>
 801506c:	e7d0      	b.n	8015010 <rint+0x70>
 801506e:	2e33      	cmp	r6, #51	; 0x33
 8015070:	dd07      	ble.n	8015082 <rint+0xe2>
 8015072:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015076:	d1cb      	bne.n	8015010 <rint+0x70>
 8015078:	ee10 2a10 	vmov	r2, s0
 801507c:	f7eb f916 	bl	80002ac <__adddf3>
 8015080:	e7c6      	b.n	8015010 <rint+0x70>
 8015082:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8015086:	f04f 36ff 	mov.w	r6, #4294967295
 801508a:	40d6      	lsrs	r6, r2
 801508c:	4230      	tst	r0, r6
 801508e:	d0bf      	beq.n	8015010 <rint+0x70>
 8015090:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8015094:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8015098:	bf1f      	itttt	ne
 801509a:	ea24 0101 	bicne.w	r1, r4, r1
 801509e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80150a2:	fa44 f202 	asrne.w	r2, r4, r2
 80150a6:	ea41 0402 	orrne.w	r4, r1, r2
 80150aa:	e7cd      	b.n	8015048 <rint+0xa8>
 80150ac:	0801c3f0 	.word	0x0801c3f0
 80150b0:	000fffff 	.word	0x000fffff
 80150b4:	00000000 	.word	0x00000000

080150b8 <scalbn>:
 80150b8:	b570      	push	{r4, r5, r6, lr}
 80150ba:	ec55 4b10 	vmov	r4, r5, d0
 80150be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80150c2:	4606      	mov	r6, r0
 80150c4:	462b      	mov	r3, r5
 80150c6:	b99a      	cbnz	r2, 80150f0 <scalbn+0x38>
 80150c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80150cc:	4323      	orrs	r3, r4
 80150ce:	d036      	beq.n	801513e <scalbn+0x86>
 80150d0:	4b39      	ldr	r3, [pc, #228]	; (80151b8 <scalbn+0x100>)
 80150d2:	4629      	mov	r1, r5
 80150d4:	ee10 0a10 	vmov	r0, s0
 80150d8:	2200      	movs	r2, #0
 80150da:	f7eb fa9d 	bl	8000618 <__aeabi_dmul>
 80150de:	4b37      	ldr	r3, [pc, #220]	; (80151bc <scalbn+0x104>)
 80150e0:	429e      	cmp	r6, r3
 80150e2:	4604      	mov	r4, r0
 80150e4:	460d      	mov	r5, r1
 80150e6:	da10      	bge.n	801510a <scalbn+0x52>
 80150e8:	a32b      	add	r3, pc, #172	; (adr r3, 8015198 <scalbn+0xe0>)
 80150ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ee:	e03a      	b.n	8015166 <scalbn+0xae>
 80150f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80150f4:	428a      	cmp	r2, r1
 80150f6:	d10c      	bne.n	8015112 <scalbn+0x5a>
 80150f8:	ee10 2a10 	vmov	r2, s0
 80150fc:	4620      	mov	r0, r4
 80150fe:	4629      	mov	r1, r5
 8015100:	f7eb f8d4 	bl	80002ac <__adddf3>
 8015104:	4604      	mov	r4, r0
 8015106:	460d      	mov	r5, r1
 8015108:	e019      	b.n	801513e <scalbn+0x86>
 801510a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801510e:	460b      	mov	r3, r1
 8015110:	3a36      	subs	r2, #54	; 0x36
 8015112:	4432      	add	r2, r6
 8015114:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015118:	428a      	cmp	r2, r1
 801511a:	dd08      	ble.n	801512e <scalbn+0x76>
 801511c:	2d00      	cmp	r5, #0
 801511e:	a120      	add	r1, pc, #128	; (adr r1, 80151a0 <scalbn+0xe8>)
 8015120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015124:	da1c      	bge.n	8015160 <scalbn+0xa8>
 8015126:	a120      	add	r1, pc, #128	; (adr r1, 80151a8 <scalbn+0xf0>)
 8015128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801512c:	e018      	b.n	8015160 <scalbn+0xa8>
 801512e:	2a00      	cmp	r2, #0
 8015130:	dd08      	ble.n	8015144 <scalbn+0x8c>
 8015132:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015136:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801513a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801513e:	ec45 4b10 	vmov	d0, r4, r5
 8015142:	bd70      	pop	{r4, r5, r6, pc}
 8015144:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015148:	da19      	bge.n	801517e <scalbn+0xc6>
 801514a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801514e:	429e      	cmp	r6, r3
 8015150:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015154:	dd0a      	ble.n	801516c <scalbn+0xb4>
 8015156:	a112      	add	r1, pc, #72	; (adr r1, 80151a0 <scalbn+0xe8>)
 8015158:	e9d1 0100 	ldrd	r0, r1, [r1]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d1e2      	bne.n	8015126 <scalbn+0x6e>
 8015160:	a30f      	add	r3, pc, #60	; (adr r3, 80151a0 <scalbn+0xe8>)
 8015162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015166:	f7eb fa57 	bl	8000618 <__aeabi_dmul>
 801516a:	e7cb      	b.n	8015104 <scalbn+0x4c>
 801516c:	a10a      	add	r1, pc, #40	; (adr r1, 8015198 <scalbn+0xe0>)
 801516e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d0b8      	beq.n	80150e8 <scalbn+0x30>
 8015176:	a10e      	add	r1, pc, #56	; (adr r1, 80151b0 <scalbn+0xf8>)
 8015178:	e9d1 0100 	ldrd	r0, r1, [r1]
 801517c:	e7b4      	b.n	80150e8 <scalbn+0x30>
 801517e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015182:	3236      	adds	r2, #54	; 0x36
 8015184:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015188:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801518c:	4620      	mov	r0, r4
 801518e:	4b0c      	ldr	r3, [pc, #48]	; (80151c0 <scalbn+0x108>)
 8015190:	2200      	movs	r2, #0
 8015192:	e7e8      	b.n	8015166 <scalbn+0xae>
 8015194:	f3af 8000 	nop.w
 8015198:	c2f8f359 	.word	0xc2f8f359
 801519c:	01a56e1f 	.word	0x01a56e1f
 80151a0:	8800759c 	.word	0x8800759c
 80151a4:	7e37e43c 	.word	0x7e37e43c
 80151a8:	8800759c 	.word	0x8800759c
 80151ac:	fe37e43c 	.word	0xfe37e43c
 80151b0:	c2f8f359 	.word	0xc2f8f359
 80151b4:	81a56e1f 	.word	0x81a56e1f
 80151b8:	43500000 	.word	0x43500000
 80151bc:	ffff3cb0 	.word	0xffff3cb0
 80151c0:	3c900000 	.word	0x3c900000

080151c4 <abort>:
 80151c4:	b508      	push	{r3, lr}
 80151c6:	2006      	movs	r0, #6
 80151c8:	f001 f9ba 	bl	8016540 <raise>
 80151cc:	2001      	movs	r0, #1
 80151ce:	f7ed ffeb 	bl	80031a8 <_exit>
	...

080151d4 <__errno>:
 80151d4:	4b01      	ldr	r3, [pc, #4]	; (80151dc <__errno+0x8>)
 80151d6:	6818      	ldr	r0, [r3, #0]
 80151d8:	4770      	bx	lr
 80151da:	bf00      	nop
 80151dc:	20000090 	.word	0x20000090

080151e0 <std>:
 80151e0:	2300      	movs	r3, #0
 80151e2:	b510      	push	{r4, lr}
 80151e4:	4604      	mov	r4, r0
 80151e6:	e9c0 3300 	strd	r3, r3, [r0]
 80151ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80151ee:	6083      	str	r3, [r0, #8]
 80151f0:	8181      	strh	r1, [r0, #12]
 80151f2:	6643      	str	r3, [r0, #100]	; 0x64
 80151f4:	81c2      	strh	r2, [r0, #14]
 80151f6:	6183      	str	r3, [r0, #24]
 80151f8:	4619      	mov	r1, r3
 80151fa:	2208      	movs	r2, #8
 80151fc:	305c      	adds	r0, #92	; 0x5c
 80151fe:	f000 f93d 	bl	801547c <memset>
 8015202:	4b05      	ldr	r3, [pc, #20]	; (8015218 <std+0x38>)
 8015204:	6263      	str	r3, [r4, #36]	; 0x24
 8015206:	4b05      	ldr	r3, [pc, #20]	; (801521c <std+0x3c>)
 8015208:	62a3      	str	r3, [r4, #40]	; 0x28
 801520a:	4b05      	ldr	r3, [pc, #20]	; (8015220 <std+0x40>)
 801520c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801520e:	4b05      	ldr	r3, [pc, #20]	; (8015224 <std+0x44>)
 8015210:	6224      	str	r4, [r4, #32]
 8015212:	6323      	str	r3, [r4, #48]	; 0x30
 8015214:	bd10      	pop	{r4, pc}
 8015216:	bf00      	nop
 8015218:	08016611 	.word	0x08016611
 801521c:	08016637 	.word	0x08016637
 8015220:	0801666f 	.word	0x0801666f
 8015224:	08016693 	.word	0x08016693

08015228 <_cleanup_r>:
 8015228:	4901      	ldr	r1, [pc, #4]	; (8015230 <_cleanup_r+0x8>)
 801522a:	f000 b8af 	b.w	801538c <_fwalk_reent>
 801522e:	bf00      	nop
 8015230:	080185b5 	.word	0x080185b5

08015234 <__sfmoreglue>:
 8015234:	b570      	push	{r4, r5, r6, lr}
 8015236:	1e4a      	subs	r2, r1, #1
 8015238:	2568      	movs	r5, #104	; 0x68
 801523a:	4355      	muls	r5, r2
 801523c:	460e      	mov	r6, r1
 801523e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015242:	f000 f973 	bl	801552c <_malloc_r>
 8015246:	4604      	mov	r4, r0
 8015248:	b140      	cbz	r0, 801525c <__sfmoreglue+0x28>
 801524a:	2100      	movs	r1, #0
 801524c:	e9c0 1600 	strd	r1, r6, [r0]
 8015250:	300c      	adds	r0, #12
 8015252:	60a0      	str	r0, [r4, #8]
 8015254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015258:	f000 f910 	bl	801547c <memset>
 801525c:	4620      	mov	r0, r4
 801525e:	bd70      	pop	{r4, r5, r6, pc}

08015260 <__sfp_lock_acquire>:
 8015260:	4801      	ldr	r0, [pc, #4]	; (8015268 <__sfp_lock_acquire+0x8>)
 8015262:	f000 b8d8 	b.w	8015416 <__retarget_lock_acquire_recursive>
 8015266:	bf00      	nop
 8015268:	2000719c 	.word	0x2000719c

0801526c <__sfp_lock_release>:
 801526c:	4801      	ldr	r0, [pc, #4]	; (8015274 <__sfp_lock_release+0x8>)
 801526e:	f000 b8d3 	b.w	8015418 <__retarget_lock_release_recursive>
 8015272:	bf00      	nop
 8015274:	2000719c 	.word	0x2000719c

08015278 <__sinit_lock_acquire>:
 8015278:	4801      	ldr	r0, [pc, #4]	; (8015280 <__sinit_lock_acquire+0x8>)
 801527a:	f000 b8cc 	b.w	8015416 <__retarget_lock_acquire_recursive>
 801527e:	bf00      	nop
 8015280:	20007197 	.word	0x20007197

08015284 <__sinit_lock_release>:
 8015284:	4801      	ldr	r0, [pc, #4]	; (801528c <__sinit_lock_release+0x8>)
 8015286:	f000 b8c7 	b.w	8015418 <__retarget_lock_release_recursive>
 801528a:	bf00      	nop
 801528c:	20007197 	.word	0x20007197

08015290 <__sinit>:
 8015290:	b510      	push	{r4, lr}
 8015292:	4604      	mov	r4, r0
 8015294:	f7ff fff0 	bl	8015278 <__sinit_lock_acquire>
 8015298:	69a3      	ldr	r3, [r4, #24]
 801529a:	b11b      	cbz	r3, 80152a4 <__sinit+0x14>
 801529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152a0:	f7ff bff0 	b.w	8015284 <__sinit_lock_release>
 80152a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80152a8:	6523      	str	r3, [r4, #80]	; 0x50
 80152aa:	4b13      	ldr	r3, [pc, #76]	; (80152f8 <__sinit+0x68>)
 80152ac:	4a13      	ldr	r2, [pc, #76]	; (80152fc <__sinit+0x6c>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80152b2:	42a3      	cmp	r3, r4
 80152b4:	bf04      	itt	eq
 80152b6:	2301      	moveq	r3, #1
 80152b8:	61a3      	streq	r3, [r4, #24]
 80152ba:	4620      	mov	r0, r4
 80152bc:	f000 f820 	bl	8015300 <__sfp>
 80152c0:	6060      	str	r0, [r4, #4]
 80152c2:	4620      	mov	r0, r4
 80152c4:	f000 f81c 	bl	8015300 <__sfp>
 80152c8:	60a0      	str	r0, [r4, #8]
 80152ca:	4620      	mov	r0, r4
 80152cc:	f000 f818 	bl	8015300 <__sfp>
 80152d0:	2200      	movs	r2, #0
 80152d2:	60e0      	str	r0, [r4, #12]
 80152d4:	2104      	movs	r1, #4
 80152d6:	6860      	ldr	r0, [r4, #4]
 80152d8:	f7ff ff82 	bl	80151e0 <std>
 80152dc:	68a0      	ldr	r0, [r4, #8]
 80152de:	2201      	movs	r2, #1
 80152e0:	2109      	movs	r1, #9
 80152e2:	f7ff ff7d 	bl	80151e0 <std>
 80152e6:	68e0      	ldr	r0, [r4, #12]
 80152e8:	2202      	movs	r2, #2
 80152ea:	2112      	movs	r1, #18
 80152ec:	f7ff ff78 	bl	80151e0 <std>
 80152f0:	2301      	movs	r3, #1
 80152f2:	61a3      	str	r3, [r4, #24]
 80152f4:	e7d2      	b.n	801529c <__sinit+0xc>
 80152f6:	bf00      	nop
 80152f8:	0801c564 	.word	0x0801c564
 80152fc:	08015229 	.word	0x08015229

08015300 <__sfp>:
 8015300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015302:	4607      	mov	r7, r0
 8015304:	f7ff ffac 	bl	8015260 <__sfp_lock_acquire>
 8015308:	4b1e      	ldr	r3, [pc, #120]	; (8015384 <__sfp+0x84>)
 801530a:	681e      	ldr	r6, [r3, #0]
 801530c:	69b3      	ldr	r3, [r6, #24]
 801530e:	b913      	cbnz	r3, 8015316 <__sfp+0x16>
 8015310:	4630      	mov	r0, r6
 8015312:	f7ff ffbd 	bl	8015290 <__sinit>
 8015316:	3648      	adds	r6, #72	; 0x48
 8015318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801531c:	3b01      	subs	r3, #1
 801531e:	d503      	bpl.n	8015328 <__sfp+0x28>
 8015320:	6833      	ldr	r3, [r6, #0]
 8015322:	b30b      	cbz	r3, 8015368 <__sfp+0x68>
 8015324:	6836      	ldr	r6, [r6, #0]
 8015326:	e7f7      	b.n	8015318 <__sfp+0x18>
 8015328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801532c:	b9d5      	cbnz	r5, 8015364 <__sfp+0x64>
 801532e:	4b16      	ldr	r3, [pc, #88]	; (8015388 <__sfp+0x88>)
 8015330:	60e3      	str	r3, [r4, #12]
 8015332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015336:	6665      	str	r5, [r4, #100]	; 0x64
 8015338:	f000 f86c 	bl	8015414 <__retarget_lock_init_recursive>
 801533c:	f7ff ff96 	bl	801526c <__sfp_lock_release>
 8015340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015348:	6025      	str	r5, [r4, #0]
 801534a:	61a5      	str	r5, [r4, #24]
 801534c:	2208      	movs	r2, #8
 801534e:	4629      	mov	r1, r5
 8015350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015354:	f000 f892 	bl	801547c <memset>
 8015358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801535c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015360:	4620      	mov	r0, r4
 8015362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015364:	3468      	adds	r4, #104	; 0x68
 8015366:	e7d9      	b.n	801531c <__sfp+0x1c>
 8015368:	2104      	movs	r1, #4
 801536a:	4638      	mov	r0, r7
 801536c:	f7ff ff62 	bl	8015234 <__sfmoreglue>
 8015370:	4604      	mov	r4, r0
 8015372:	6030      	str	r0, [r6, #0]
 8015374:	2800      	cmp	r0, #0
 8015376:	d1d5      	bne.n	8015324 <__sfp+0x24>
 8015378:	f7ff ff78 	bl	801526c <__sfp_lock_release>
 801537c:	230c      	movs	r3, #12
 801537e:	603b      	str	r3, [r7, #0]
 8015380:	e7ee      	b.n	8015360 <__sfp+0x60>
 8015382:	bf00      	nop
 8015384:	0801c564 	.word	0x0801c564
 8015388:	ffff0001 	.word	0xffff0001

0801538c <_fwalk_reent>:
 801538c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015390:	4606      	mov	r6, r0
 8015392:	4688      	mov	r8, r1
 8015394:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015398:	2700      	movs	r7, #0
 801539a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801539e:	f1b9 0901 	subs.w	r9, r9, #1
 80153a2:	d505      	bpl.n	80153b0 <_fwalk_reent+0x24>
 80153a4:	6824      	ldr	r4, [r4, #0]
 80153a6:	2c00      	cmp	r4, #0
 80153a8:	d1f7      	bne.n	801539a <_fwalk_reent+0xe>
 80153aa:	4638      	mov	r0, r7
 80153ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153b0:	89ab      	ldrh	r3, [r5, #12]
 80153b2:	2b01      	cmp	r3, #1
 80153b4:	d907      	bls.n	80153c6 <_fwalk_reent+0x3a>
 80153b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80153ba:	3301      	adds	r3, #1
 80153bc:	d003      	beq.n	80153c6 <_fwalk_reent+0x3a>
 80153be:	4629      	mov	r1, r5
 80153c0:	4630      	mov	r0, r6
 80153c2:	47c0      	blx	r8
 80153c4:	4307      	orrs	r7, r0
 80153c6:	3568      	adds	r5, #104	; 0x68
 80153c8:	e7e9      	b.n	801539e <_fwalk_reent+0x12>
	...

080153cc <__libc_init_array>:
 80153cc:	b570      	push	{r4, r5, r6, lr}
 80153ce:	4d0d      	ldr	r5, [pc, #52]	; (8015404 <__libc_init_array+0x38>)
 80153d0:	4c0d      	ldr	r4, [pc, #52]	; (8015408 <__libc_init_array+0x3c>)
 80153d2:	1b64      	subs	r4, r4, r5
 80153d4:	10a4      	asrs	r4, r4, #2
 80153d6:	2600      	movs	r6, #0
 80153d8:	42a6      	cmp	r6, r4
 80153da:	d109      	bne.n	80153f0 <__libc_init_array+0x24>
 80153dc:	4d0b      	ldr	r5, [pc, #44]	; (801540c <__libc_init_array+0x40>)
 80153de:	4c0c      	ldr	r4, [pc, #48]	; (8015410 <__libc_init_array+0x44>)
 80153e0:	f005 f8c0 	bl	801a564 <_init>
 80153e4:	1b64      	subs	r4, r4, r5
 80153e6:	10a4      	asrs	r4, r4, #2
 80153e8:	2600      	movs	r6, #0
 80153ea:	42a6      	cmp	r6, r4
 80153ec:	d105      	bne.n	80153fa <__libc_init_array+0x2e>
 80153ee:	bd70      	pop	{r4, r5, r6, pc}
 80153f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80153f4:	4798      	blx	r3
 80153f6:	3601      	adds	r6, #1
 80153f8:	e7ee      	b.n	80153d8 <__libc_init_array+0xc>
 80153fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80153fe:	4798      	blx	r3
 8015400:	3601      	adds	r6, #1
 8015402:	e7f2      	b.n	80153ea <__libc_init_array+0x1e>
 8015404:	0801c8d0 	.word	0x0801c8d0
 8015408:	0801c8d0 	.word	0x0801c8d0
 801540c:	0801c8d0 	.word	0x0801c8d0
 8015410:	0801c8d8 	.word	0x0801c8d8

08015414 <__retarget_lock_init_recursive>:
 8015414:	4770      	bx	lr

08015416 <__retarget_lock_acquire_recursive>:
 8015416:	4770      	bx	lr

08015418 <__retarget_lock_release_recursive>:
 8015418:	4770      	bx	lr
	...

0801541c <malloc>:
 801541c:	4b02      	ldr	r3, [pc, #8]	; (8015428 <malloc+0xc>)
 801541e:	4601      	mov	r1, r0
 8015420:	6818      	ldr	r0, [r3, #0]
 8015422:	f000 b883 	b.w	801552c <_malloc_r>
 8015426:	bf00      	nop
 8015428:	20000090 	.word	0x20000090

0801542c <memcpy>:
 801542c:	440a      	add	r2, r1
 801542e:	4291      	cmp	r1, r2
 8015430:	f100 33ff 	add.w	r3, r0, #4294967295
 8015434:	d100      	bne.n	8015438 <memcpy+0xc>
 8015436:	4770      	bx	lr
 8015438:	b510      	push	{r4, lr}
 801543a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801543e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015442:	4291      	cmp	r1, r2
 8015444:	d1f9      	bne.n	801543a <memcpy+0xe>
 8015446:	bd10      	pop	{r4, pc}

08015448 <memmove>:
 8015448:	4288      	cmp	r0, r1
 801544a:	b510      	push	{r4, lr}
 801544c:	eb01 0402 	add.w	r4, r1, r2
 8015450:	d902      	bls.n	8015458 <memmove+0x10>
 8015452:	4284      	cmp	r4, r0
 8015454:	4623      	mov	r3, r4
 8015456:	d807      	bhi.n	8015468 <memmove+0x20>
 8015458:	1e43      	subs	r3, r0, #1
 801545a:	42a1      	cmp	r1, r4
 801545c:	d008      	beq.n	8015470 <memmove+0x28>
 801545e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015466:	e7f8      	b.n	801545a <memmove+0x12>
 8015468:	4402      	add	r2, r0
 801546a:	4601      	mov	r1, r0
 801546c:	428a      	cmp	r2, r1
 801546e:	d100      	bne.n	8015472 <memmove+0x2a>
 8015470:	bd10      	pop	{r4, pc}
 8015472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801547a:	e7f7      	b.n	801546c <memmove+0x24>

0801547c <memset>:
 801547c:	4402      	add	r2, r0
 801547e:	4603      	mov	r3, r0
 8015480:	4293      	cmp	r3, r2
 8015482:	d100      	bne.n	8015486 <memset+0xa>
 8015484:	4770      	bx	lr
 8015486:	f803 1b01 	strb.w	r1, [r3], #1
 801548a:	e7f9      	b.n	8015480 <memset+0x4>

0801548c <_free_r>:
 801548c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801548e:	2900      	cmp	r1, #0
 8015490:	d048      	beq.n	8015524 <_free_r+0x98>
 8015492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015496:	9001      	str	r0, [sp, #4]
 8015498:	2b00      	cmp	r3, #0
 801549a:	f1a1 0404 	sub.w	r4, r1, #4
 801549e:	bfb8      	it	lt
 80154a0:	18e4      	addlt	r4, r4, r3
 80154a2:	f003 fcd1 	bl	8018e48 <__malloc_lock>
 80154a6:	4a20      	ldr	r2, [pc, #128]	; (8015528 <_free_r+0x9c>)
 80154a8:	9801      	ldr	r0, [sp, #4]
 80154aa:	6813      	ldr	r3, [r2, #0]
 80154ac:	4615      	mov	r5, r2
 80154ae:	b933      	cbnz	r3, 80154be <_free_r+0x32>
 80154b0:	6063      	str	r3, [r4, #4]
 80154b2:	6014      	str	r4, [r2, #0]
 80154b4:	b003      	add	sp, #12
 80154b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80154ba:	f003 bccb 	b.w	8018e54 <__malloc_unlock>
 80154be:	42a3      	cmp	r3, r4
 80154c0:	d90b      	bls.n	80154da <_free_r+0x4e>
 80154c2:	6821      	ldr	r1, [r4, #0]
 80154c4:	1862      	adds	r2, r4, r1
 80154c6:	4293      	cmp	r3, r2
 80154c8:	bf04      	itt	eq
 80154ca:	681a      	ldreq	r2, [r3, #0]
 80154cc:	685b      	ldreq	r3, [r3, #4]
 80154ce:	6063      	str	r3, [r4, #4]
 80154d0:	bf04      	itt	eq
 80154d2:	1852      	addeq	r2, r2, r1
 80154d4:	6022      	streq	r2, [r4, #0]
 80154d6:	602c      	str	r4, [r5, #0]
 80154d8:	e7ec      	b.n	80154b4 <_free_r+0x28>
 80154da:	461a      	mov	r2, r3
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	b10b      	cbz	r3, 80154e4 <_free_r+0x58>
 80154e0:	42a3      	cmp	r3, r4
 80154e2:	d9fa      	bls.n	80154da <_free_r+0x4e>
 80154e4:	6811      	ldr	r1, [r2, #0]
 80154e6:	1855      	adds	r5, r2, r1
 80154e8:	42a5      	cmp	r5, r4
 80154ea:	d10b      	bne.n	8015504 <_free_r+0x78>
 80154ec:	6824      	ldr	r4, [r4, #0]
 80154ee:	4421      	add	r1, r4
 80154f0:	1854      	adds	r4, r2, r1
 80154f2:	42a3      	cmp	r3, r4
 80154f4:	6011      	str	r1, [r2, #0]
 80154f6:	d1dd      	bne.n	80154b4 <_free_r+0x28>
 80154f8:	681c      	ldr	r4, [r3, #0]
 80154fa:	685b      	ldr	r3, [r3, #4]
 80154fc:	6053      	str	r3, [r2, #4]
 80154fe:	4421      	add	r1, r4
 8015500:	6011      	str	r1, [r2, #0]
 8015502:	e7d7      	b.n	80154b4 <_free_r+0x28>
 8015504:	d902      	bls.n	801550c <_free_r+0x80>
 8015506:	230c      	movs	r3, #12
 8015508:	6003      	str	r3, [r0, #0]
 801550a:	e7d3      	b.n	80154b4 <_free_r+0x28>
 801550c:	6825      	ldr	r5, [r4, #0]
 801550e:	1961      	adds	r1, r4, r5
 8015510:	428b      	cmp	r3, r1
 8015512:	bf04      	itt	eq
 8015514:	6819      	ldreq	r1, [r3, #0]
 8015516:	685b      	ldreq	r3, [r3, #4]
 8015518:	6063      	str	r3, [r4, #4]
 801551a:	bf04      	itt	eq
 801551c:	1949      	addeq	r1, r1, r5
 801551e:	6021      	streq	r1, [r4, #0]
 8015520:	6054      	str	r4, [r2, #4]
 8015522:	e7c7      	b.n	80154b4 <_free_r+0x28>
 8015524:	b003      	add	sp, #12
 8015526:	bd30      	pop	{r4, r5, pc}
 8015528:	20005ac0 	.word	0x20005ac0

0801552c <_malloc_r>:
 801552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801552e:	1ccd      	adds	r5, r1, #3
 8015530:	f025 0503 	bic.w	r5, r5, #3
 8015534:	3508      	adds	r5, #8
 8015536:	2d0c      	cmp	r5, #12
 8015538:	bf38      	it	cc
 801553a:	250c      	movcc	r5, #12
 801553c:	2d00      	cmp	r5, #0
 801553e:	4606      	mov	r6, r0
 8015540:	db01      	blt.n	8015546 <_malloc_r+0x1a>
 8015542:	42a9      	cmp	r1, r5
 8015544:	d903      	bls.n	801554e <_malloc_r+0x22>
 8015546:	230c      	movs	r3, #12
 8015548:	6033      	str	r3, [r6, #0]
 801554a:	2000      	movs	r0, #0
 801554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801554e:	f003 fc7b 	bl	8018e48 <__malloc_lock>
 8015552:	4921      	ldr	r1, [pc, #132]	; (80155d8 <_malloc_r+0xac>)
 8015554:	680a      	ldr	r2, [r1, #0]
 8015556:	4614      	mov	r4, r2
 8015558:	b99c      	cbnz	r4, 8015582 <_malloc_r+0x56>
 801555a:	4f20      	ldr	r7, [pc, #128]	; (80155dc <_malloc_r+0xb0>)
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	b923      	cbnz	r3, 801556a <_malloc_r+0x3e>
 8015560:	4621      	mov	r1, r4
 8015562:	4630      	mov	r0, r6
 8015564:	f000 ffae 	bl	80164c4 <_sbrk_r>
 8015568:	6038      	str	r0, [r7, #0]
 801556a:	4629      	mov	r1, r5
 801556c:	4630      	mov	r0, r6
 801556e:	f000 ffa9 	bl	80164c4 <_sbrk_r>
 8015572:	1c43      	adds	r3, r0, #1
 8015574:	d123      	bne.n	80155be <_malloc_r+0x92>
 8015576:	230c      	movs	r3, #12
 8015578:	6033      	str	r3, [r6, #0]
 801557a:	4630      	mov	r0, r6
 801557c:	f003 fc6a 	bl	8018e54 <__malloc_unlock>
 8015580:	e7e3      	b.n	801554a <_malloc_r+0x1e>
 8015582:	6823      	ldr	r3, [r4, #0]
 8015584:	1b5b      	subs	r3, r3, r5
 8015586:	d417      	bmi.n	80155b8 <_malloc_r+0x8c>
 8015588:	2b0b      	cmp	r3, #11
 801558a:	d903      	bls.n	8015594 <_malloc_r+0x68>
 801558c:	6023      	str	r3, [r4, #0]
 801558e:	441c      	add	r4, r3
 8015590:	6025      	str	r5, [r4, #0]
 8015592:	e004      	b.n	801559e <_malloc_r+0x72>
 8015594:	6863      	ldr	r3, [r4, #4]
 8015596:	42a2      	cmp	r2, r4
 8015598:	bf0c      	ite	eq
 801559a:	600b      	streq	r3, [r1, #0]
 801559c:	6053      	strne	r3, [r2, #4]
 801559e:	4630      	mov	r0, r6
 80155a0:	f003 fc58 	bl	8018e54 <__malloc_unlock>
 80155a4:	f104 000b 	add.w	r0, r4, #11
 80155a8:	1d23      	adds	r3, r4, #4
 80155aa:	f020 0007 	bic.w	r0, r0, #7
 80155ae:	1ac2      	subs	r2, r0, r3
 80155b0:	d0cc      	beq.n	801554c <_malloc_r+0x20>
 80155b2:	1a1b      	subs	r3, r3, r0
 80155b4:	50a3      	str	r3, [r4, r2]
 80155b6:	e7c9      	b.n	801554c <_malloc_r+0x20>
 80155b8:	4622      	mov	r2, r4
 80155ba:	6864      	ldr	r4, [r4, #4]
 80155bc:	e7cc      	b.n	8015558 <_malloc_r+0x2c>
 80155be:	1cc4      	adds	r4, r0, #3
 80155c0:	f024 0403 	bic.w	r4, r4, #3
 80155c4:	42a0      	cmp	r0, r4
 80155c6:	d0e3      	beq.n	8015590 <_malloc_r+0x64>
 80155c8:	1a21      	subs	r1, r4, r0
 80155ca:	4630      	mov	r0, r6
 80155cc:	f000 ff7a 	bl	80164c4 <_sbrk_r>
 80155d0:	3001      	adds	r0, #1
 80155d2:	d1dd      	bne.n	8015590 <_malloc_r+0x64>
 80155d4:	e7cf      	b.n	8015576 <_malloc_r+0x4a>
 80155d6:	bf00      	nop
 80155d8:	20005ac0 	.word	0x20005ac0
 80155dc:	20005ac4 	.word	0x20005ac4

080155e0 <__cvt>:
 80155e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80155e4:	ec55 4b10 	vmov	r4, r5, d0
 80155e8:	2d00      	cmp	r5, #0
 80155ea:	460e      	mov	r6, r1
 80155ec:	4619      	mov	r1, r3
 80155ee:	462b      	mov	r3, r5
 80155f0:	bfbb      	ittet	lt
 80155f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80155f6:	461d      	movlt	r5, r3
 80155f8:	2300      	movge	r3, #0
 80155fa:	232d      	movlt	r3, #45	; 0x2d
 80155fc:	700b      	strb	r3, [r1, #0]
 80155fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015600:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015604:	4691      	mov	r9, r2
 8015606:	f023 0820 	bic.w	r8, r3, #32
 801560a:	bfbc      	itt	lt
 801560c:	4622      	movlt	r2, r4
 801560e:	4614      	movlt	r4, r2
 8015610:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015614:	d005      	beq.n	8015622 <__cvt+0x42>
 8015616:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801561a:	d100      	bne.n	801561e <__cvt+0x3e>
 801561c:	3601      	adds	r6, #1
 801561e:	2102      	movs	r1, #2
 8015620:	e000      	b.n	8015624 <__cvt+0x44>
 8015622:	2103      	movs	r1, #3
 8015624:	ab03      	add	r3, sp, #12
 8015626:	9301      	str	r3, [sp, #4]
 8015628:	ab02      	add	r3, sp, #8
 801562a:	9300      	str	r3, [sp, #0]
 801562c:	ec45 4b10 	vmov	d0, r4, r5
 8015630:	4653      	mov	r3, sl
 8015632:	4632      	mov	r2, r6
 8015634:	f002 f94c 	bl	80178d0 <_dtoa_r>
 8015638:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801563c:	4607      	mov	r7, r0
 801563e:	d102      	bne.n	8015646 <__cvt+0x66>
 8015640:	f019 0f01 	tst.w	r9, #1
 8015644:	d022      	beq.n	801568c <__cvt+0xac>
 8015646:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801564a:	eb07 0906 	add.w	r9, r7, r6
 801564e:	d110      	bne.n	8015672 <__cvt+0x92>
 8015650:	783b      	ldrb	r3, [r7, #0]
 8015652:	2b30      	cmp	r3, #48	; 0x30
 8015654:	d10a      	bne.n	801566c <__cvt+0x8c>
 8015656:	2200      	movs	r2, #0
 8015658:	2300      	movs	r3, #0
 801565a:	4620      	mov	r0, r4
 801565c:	4629      	mov	r1, r5
 801565e:	f7eb fa43 	bl	8000ae8 <__aeabi_dcmpeq>
 8015662:	b918      	cbnz	r0, 801566c <__cvt+0x8c>
 8015664:	f1c6 0601 	rsb	r6, r6, #1
 8015668:	f8ca 6000 	str.w	r6, [sl]
 801566c:	f8da 3000 	ldr.w	r3, [sl]
 8015670:	4499      	add	r9, r3
 8015672:	2200      	movs	r2, #0
 8015674:	2300      	movs	r3, #0
 8015676:	4620      	mov	r0, r4
 8015678:	4629      	mov	r1, r5
 801567a:	f7eb fa35 	bl	8000ae8 <__aeabi_dcmpeq>
 801567e:	b108      	cbz	r0, 8015684 <__cvt+0xa4>
 8015680:	f8cd 900c 	str.w	r9, [sp, #12]
 8015684:	2230      	movs	r2, #48	; 0x30
 8015686:	9b03      	ldr	r3, [sp, #12]
 8015688:	454b      	cmp	r3, r9
 801568a:	d307      	bcc.n	801569c <__cvt+0xbc>
 801568c:	9b03      	ldr	r3, [sp, #12]
 801568e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015690:	1bdb      	subs	r3, r3, r7
 8015692:	4638      	mov	r0, r7
 8015694:	6013      	str	r3, [r2, #0]
 8015696:	b004      	add	sp, #16
 8015698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801569c:	1c59      	adds	r1, r3, #1
 801569e:	9103      	str	r1, [sp, #12]
 80156a0:	701a      	strb	r2, [r3, #0]
 80156a2:	e7f0      	b.n	8015686 <__cvt+0xa6>

080156a4 <__exponent>:
 80156a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156a6:	4603      	mov	r3, r0
 80156a8:	2900      	cmp	r1, #0
 80156aa:	bfb8      	it	lt
 80156ac:	4249      	neglt	r1, r1
 80156ae:	f803 2b02 	strb.w	r2, [r3], #2
 80156b2:	bfb4      	ite	lt
 80156b4:	222d      	movlt	r2, #45	; 0x2d
 80156b6:	222b      	movge	r2, #43	; 0x2b
 80156b8:	2909      	cmp	r1, #9
 80156ba:	7042      	strb	r2, [r0, #1]
 80156bc:	dd2a      	ble.n	8015714 <__exponent+0x70>
 80156be:	f10d 0407 	add.w	r4, sp, #7
 80156c2:	46a4      	mov	ip, r4
 80156c4:	270a      	movs	r7, #10
 80156c6:	46a6      	mov	lr, r4
 80156c8:	460a      	mov	r2, r1
 80156ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80156ce:	fb07 1516 	mls	r5, r7, r6, r1
 80156d2:	3530      	adds	r5, #48	; 0x30
 80156d4:	2a63      	cmp	r2, #99	; 0x63
 80156d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80156da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80156de:	4631      	mov	r1, r6
 80156e0:	dcf1      	bgt.n	80156c6 <__exponent+0x22>
 80156e2:	3130      	adds	r1, #48	; 0x30
 80156e4:	f1ae 0502 	sub.w	r5, lr, #2
 80156e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80156ec:	1c44      	adds	r4, r0, #1
 80156ee:	4629      	mov	r1, r5
 80156f0:	4561      	cmp	r1, ip
 80156f2:	d30a      	bcc.n	801570a <__exponent+0x66>
 80156f4:	f10d 0209 	add.w	r2, sp, #9
 80156f8:	eba2 020e 	sub.w	r2, r2, lr
 80156fc:	4565      	cmp	r5, ip
 80156fe:	bf88      	it	hi
 8015700:	2200      	movhi	r2, #0
 8015702:	4413      	add	r3, r2
 8015704:	1a18      	subs	r0, r3, r0
 8015706:	b003      	add	sp, #12
 8015708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801570a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801570e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015712:	e7ed      	b.n	80156f0 <__exponent+0x4c>
 8015714:	2330      	movs	r3, #48	; 0x30
 8015716:	3130      	adds	r1, #48	; 0x30
 8015718:	7083      	strb	r3, [r0, #2]
 801571a:	70c1      	strb	r1, [r0, #3]
 801571c:	1d03      	adds	r3, r0, #4
 801571e:	e7f1      	b.n	8015704 <__exponent+0x60>

08015720 <_printf_float>:
 8015720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015724:	ed2d 8b02 	vpush	{d8}
 8015728:	b08d      	sub	sp, #52	; 0x34
 801572a:	460c      	mov	r4, r1
 801572c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015730:	4616      	mov	r6, r2
 8015732:	461f      	mov	r7, r3
 8015734:	4605      	mov	r5, r0
 8015736:	f003 fafb 	bl	8018d30 <_localeconv_r>
 801573a:	f8d0 a000 	ldr.w	sl, [r0]
 801573e:	4650      	mov	r0, sl
 8015740:	f7ea fd56 	bl	80001f0 <strlen>
 8015744:	2300      	movs	r3, #0
 8015746:	930a      	str	r3, [sp, #40]	; 0x28
 8015748:	6823      	ldr	r3, [r4, #0]
 801574a:	9305      	str	r3, [sp, #20]
 801574c:	f8d8 3000 	ldr.w	r3, [r8]
 8015750:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015754:	3307      	adds	r3, #7
 8015756:	f023 0307 	bic.w	r3, r3, #7
 801575a:	f103 0208 	add.w	r2, r3, #8
 801575e:	f8c8 2000 	str.w	r2, [r8]
 8015762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015766:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801576a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801576e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015772:	9307      	str	r3, [sp, #28]
 8015774:	f8cd 8018 	str.w	r8, [sp, #24]
 8015778:	ee08 0a10 	vmov	s16, r0
 801577c:	4b9f      	ldr	r3, [pc, #636]	; (80159fc <_printf_float+0x2dc>)
 801577e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015782:	f04f 32ff 	mov.w	r2, #4294967295
 8015786:	f7eb f9e1 	bl	8000b4c <__aeabi_dcmpun>
 801578a:	bb88      	cbnz	r0, 80157f0 <_printf_float+0xd0>
 801578c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015790:	4b9a      	ldr	r3, [pc, #616]	; (80159fc <_printf_float+0x2dc>)
 8015792:	f04f 32ff 	mov.w	r2, #4294967295
 8015796:	f7eb f9bb 	bl	8000b10 <__aeabi_dcmple>
 801579a:	bb48      	cbnz	r0, 80157f0 <_printf_float+0xd0>
 801579c:	2200      	movs	r2, #0
 801579e:	2300      	movs	r3, #0
 80157a0:	4640      	mov	r0, r8
 80157a2:	4649      	mov	r1, r9
 80157a4:	f7eb f9aa 	bl	8000afc <__aeabi_dcmplt>
 80157a8:	b110      	cbz	r0, 80157b0 <_printf_float+0x90>
 80157aa:	232d      	movs	r3, #45	; 0x2d
 80157ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157b0:	4b93      	ldr	r3, [pc, #588]	; (8015a00 <_printf_float+0x2e0>)
 80157b2:	4894      	ldr	r0, [pc, #592]	; (8015a04 <_printf_float+0x2e4>)
 80157b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80157b8:	bf94      	ite	ls
 80157ba:	4698      	movls	r8, r3
 80157bc:	4680      	movhi	r8, r0
 80157be:	2303      	movs	r3, #3
 80157c0:	6123      	str	r3, [r4, #16]
 80157c2:	9b05      	ldr	r3, [sp, #20]
 80157c4:	f023 0204 	bic.w	r2, r3, #4
 80157c8:	6022      	str	r2, [r4, #0]
 80157ca:	f04f 0900 	mov.w	r9, #0
 80157ce:	9700      	str	r7, [sp, #0]
 80157d0:	4633      	mov	r3, r6
 80157d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80157d4:	4621      	mov	r1, r4
 80157d6:	4628      	mov	r0, r5
 80157d8:	f000 f9d8 	bl	8015b8c <_printf_common>
 80157dc:	3001      	adds	r0, #1
 80157de:	f040 8090 	bne.w	8015902 <_printf_float+0x1e2>
 80157e2:	f04f 30ff 	mov.w	r0, #4294967295
 80157e6:	b00d      	add	sp, #52	; 0x34
 80157e8:	ecbd 8b02 	vpop	{d8}
 80157ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157f0:	4642      	mov	r2, r8
 80157f2:	464b      	mov	r3, r9
 80157f4:	4640      	mov	r0, r8
 80157f6:	4649      	mov	r1, r9
 80157f8:	f7eb f9a8 	bl	8000b4c <__aeabi_dcmpun>
 80157fc:	b140      	cbz	r0, 8015810 <_printf_float+0xf0>
 80157fe:	464b      	mov	r3, r9
 8015800:	2b00      	cmp	r3, #0
 8015802:	bfbc      	itt	lt
 8015804:	232d      	movlt	r3, #45	; 0x2d
 8015806:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801580a:	487f      	ldr	r0, [pc, #508]	; (8015a08 <_printf_float+0x2e8>)
 801580c:	4b7f      	ldr	r3, [pc, #508]	; (8015a0c <_printf_float+0x2ec>)
 801580e:	e7d1      	b.n	80157b4 <_printf_float+0x94>
 8015810:	6863      	ldr	r3, [r4, #4]
 8015812:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015816:	9206      	str	r2, [sp, #24]
 8015818:	1c5a      	adds	r2, r3, #1
 801581a:	d13f      	bne.n	801589c <_printf_float+0x17c>
 801581c:	2306      	movs	r3, #6
 801581e:	6063      	str	r3, [r4, #4]
 8015820:	9b05      	ldr	r3, [sp, #20]
 8015822:	6861      	ldr	r1, [r4, #4]
 8015824:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015828:	2300      	movs	r3, #0
 801582a:	9303      	str	r3, [sp, #12]
 801582c:	ab0a      	add	r3, sp, #40	; 0x28
 801582e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015832:	ab09      	add	r3, sp, #36	; 0x24
 8015834:	ec49 8b10 	vmov	d0, r8, r9
 8015838:	9300      	str	r3, [sp, #0]
 801583a:	6022      	str	r2, [r4, #0]
 801583c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015840:	4628      	mov	r0, r5
 8015842:	f7ff fecd 	bl	80155e0 <__cvt>
 8015846:	9b06      	ldr	r3, [sp, #24]
 8015848:	9909      	ldr	r1, [sp, #36]	; 0x24
 801584a:	2b47      	cmp	r3, #71	; 0x47
 801584c:	4680      	mov	r8, r0
 801584e:	d108      	bne.n	8015862 <_printf_float+0x142>
 8015850:	1cc8      	adds	r0, r1, #3
 8015852:	db02      	blt.n	801585a <_printf_float+0x13a>
 8015854:	6863      	ldr	r3, [r4, #4]
 8015856:	4299      	cmp	r1, r3
 8015858:	dd41      	ble.n	80158de <_printf_float+0x1be>
 801585a:	f1ab 0b02 	sub.w	fp, fp, #2
 801585e:	fa5f fb8b 	uxtb.w	fp, fp
 8015862:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015866:	d820      	bhi.n	80158aa <_printf_float+0x18a>
 8015868:	3901      	subs	r1, #1
 801586a:	465a      	mov	r2, fp
 801586c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015870:	9109      	str	r1, [sp, #36]	; 0x24
 8015872:	f7ff ff17 	bl	80156a4 <__exponent>
 8015876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015878:	1813      	adds	r3, r2, r0
 801587a:	2a01      	cmp	r2, #1
 801587c:	4681      	mov	r9, r0
 801587e:	6123      	str	r3, [r4, #16]
 8015880:	dc02      	bgt.n	8015888 <_printf_float+0x168>
 8015882:	6822      	ldr	r2, [r4, #0]
 8015884:	07d2      	lsls	r2, r2, #31
 8015886:	d501      	bpl.n	801588c <_printf_float+0x16c>
 8015888:	3301      	adds	r3, #1
 801588a:	6123      	str	r3, [r4, #16]
 801588c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015890:	2b00      	cmp	r3, #0
 8015892:	d09c      	beq.n	80157ce <_printf_float+0xae>
 8015894:	232d      	movs	r3, #45	; 0x2d
 8015896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801589a:	e798      	b.n	80157ce <_printf_float+0xae>
 801589c:	9a06      	ldr	r2, [sp, #24]
 801589e:	2a47      	cmp	r2, #71	; 0x47
 80158a0:	d1be      	bne.n	8015820 <_printf_float+0x100>
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d1bc      	bne.n	8015820 <_printf_float+0x100>
 80158a6:	2301      	movs	r3, #1
 80158a8:	e7b9      	b.n	801581e <_printf_float+0xfe>
 80158aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80158ae:	d118      	bne.n	80158e2 <_printf_float+0x1c2>
 80158b0:	2900      	cmp	r1, #0
 80158b2:	6863      	ldr	r3, [r4, #4]
 80158b4:	dd0b      	ble.n	80158ce <_printf_float+0x1ae>
 80158b6:	6121      	str	r1, [r4, #16]
 80158b8:	b913      	cbnz	r3, 80158c0 <_printf_float+0x1a0>
 80158ba:	6822      	ldr	r2, [r4, #0]
 80158bc:	07d0      	lsls	r0, r2, #31
 80158be:	d502      	bpl.n	80158c6 <_printf_float+0x1a6>
 80158c0:	3301      	adds	r3, #1
 80158c2:	440b      	add	r3, r1
 80158c4:	6123      	str	r3, [r4, #16]
 80158c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80158c8:	f04f 0900 	mov.w	r9, #0
 80158cc:	e7de      	b.n	801588c <_printf_float+0x16c>
 80158ce:	b913      	cbnz	r3, 80158d6 <_printf_float+0x1b6>
 80158d0:	6822      	ldr	r2, [r4, #0]
 80158d2:	07d2      	lsls	r2, r2, #31
 80158d4:	d501      	bpl.n	80158da <_printf_float+0x1ba>
 80158d6:	3302      	adds	r3, #2
 80158d8:	e7f4      	b.n	80158c4 <_printf_float+0x1a4>
 80158da:	2301      	movs	r3, #1
 80158dc:	e7f2      	b.n	80158c4 <_printf_float+0x1a4>
 80158de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80158e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158e4:	4299      	cmp	r1, r3
 80158e6:	db05      	blt.n	80158f4 <_printf_float+0x1d4>
 80158e8:	6823      	ldr	r3, [r4, #0]
 80158ea:	6121      	str	r1, [r4, #16]
 80158ec:	07d8      	lsls	r0, r3, #31
 80158ee:	d5ea      	bpl.n	80158c6 <_printf_float+0x1a6>
 80158f0:	1c4b      	adds	r3, r1, #1
 80158f2:	e7e7      	b.n	80158c4 <_printf_float+0x1a4>
 80158f4:	2900      	cmp	r1, #0
 80158f6:	bfd4      	ite	le
 80158f8:	f1c1 0202 	rsble	r2, r1, #2
 80158fc:	2201      	movgt	r2, #1
 80158fe:	4413      	add	r3, r2
 8015900:	e7e0      	b.n	80158c4 <_printf_float+0x1a4>
 8015902:	6823      	ldr	r3, [r4, #0]
 8015904:	055a      	lsls	r2, r3, #21
 8015906:	d407      	bmi.n	8015918 <_printf_float+0x1f8>
 8015908:	6923      	ldr	r3, [r4, #16]
 801590a:	4642      	mov	r2, r8
 801590c:	4631      	mov	r1, r6
 801590e:	4628      	mov	r0, r5
 8015910:	47b8      	blx	r7
 8015912:	3001      	adds	r0, #1
 8015914:	d12c      	bne.n	8015970 <_printf_float+0x250>
 8015916:	e764      	b.n	80157e2 <_printf_float+0xc2>
 8015918:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801591c:	f240 80e0 	bls.w	8015ae0 <_printf_float+0x3c0>
 8015920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015924:	2200      	movs	r2, #0
 8015926:	2300      	movs	r3, #0
 8015928:	f7eb f8de 	bl	8000ae8 <__aeabi_dcmpeq>
 801592c:	2800      	cmp	r0, #0
 801592e:	d034      	beq.n	801599a <_printf_float+0x27a>
 8015930:	4a37      	ldr	r2, [pc, #220]	; (8015a10 <_printf_float+0x2f0>)
 8015932:	2301      	movs	r3, #1
 8015934:	4631      	mov	r1, r6
 8015936:	4628      	mov	r0, r5
 8015938:	47b8      	blx	r7
 801593a:	3001      	adds	r0, #1
 801593c:	f43f af51 	beq.w	80157e2 <_printf_float+0xc2>
 8015940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015944:	429a      	cmp	r2, r3
 8015946:	db02      	blt.n	801594e <_printf_float+0x22e>
 8015948:	6823      	ldr	r3, [r4, #0]
 801594a:	07d8      	lsls	r0, r3, #31
 801594c:	d510      	bpl.n	8015970 <_printf_float+0x250>
 801594e:	ee18 3a10 	vmov	r3, s16
 8015952:	4652      	mov	r2, sl
 8015954:	4631      	mov	r1, r6
 8015956:	4628      	mov	r0, r5
 8015958:	47b8      	blx	r7
 801595a:	3001      	adds	r0, #1
 801595c:	f43f af41 	beq.w	80157e2 <_printf_float+0xc2>
 8015960:	f04f 0800 	mov.w	r8, #0
 8015964:	f104 091a 	add.w	r9, r4, #26
 8015968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801596a:	3b01      	subs	r3, #1
 801596c:	4543      	cmp	r3, r8
 801596e:	dc09      	bgt.n	8015984 <_printf_float+0x264>
 8015970:	6823      	ldr	r3, [r4, #0]
 8015972:	079b      	lsls	r3, r3, #30
 8015974:	f100 8105 	bmi.w	8015b82 <_printf_float+0x462>
 8015978:	68e0      	ldr	r0, [r4, #12]
 801597a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801597c:	4298      	cmp	r0, r3
 801597e:	bfb8      	it	lt
 8015980:	4618      	movlt	r0, r3
 8015982:	e730      	b.n	80157e6 <_printf_float+0xc6>
 8015984:	2301      	movs	r3, #1
 8015986:	464a      	mov	r2, r9
 8015988:	4631      	mov	r1, r6
 801598a:	4628      	mov	r0, r5
 801598c:	47b8      	blx	r7
 801598e:	3001      	adds	r0, #1
 8015990:	f43f af27 	beq.w	80157e2 <_printf_float+0xc2>
 8015994:	f108 0801 	add.w	r8, r8, #1
 8015998:	e7e6      	b.n	8015968 <_printf_float+0x248>
 801599a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801599c:	2b00      	cmp	r3, #0
 801599e:	dc39      	bgt.n	8015a14 <_printf_float+0x2f4>
 80159a0:	4a1b      	ldr	r2, [pc, #108]	; (8015a10 <_printf_float+0x2f0>)
 80159a2:	2301      	movs	r3, #1
 80159a4:	4631      	mov	r1, r6
 80159a6:	4628      	mov	r0, r5
 80159a8:	47b8      	blx	r7
 80159aa:	3001      	adds	r0, #1
 80159ac:	f43f af19 	beq.w	80157e2 <_printf_float+0xc2>
 80159b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159b4:	4313      	orrs	r3, r2
 80159b6:	d102      	bne.n	80159be <_printf_float+0x29e>
 80159b8:	6823      	ldr	r3, [r4, #0]
 80159ba:	07d9      	lsls	r1, r3, #31
 80159bc:	d5d8      	bpl.n	8015970 <_printf_float+0x250>
 80159be:	ee18 3a10 	vmov	r3, s16
 80159c2:	4652      	mov	r2, sl
 80159c4:	4631      	mov	r1, r6
 80159c6:	4628      	mov	r0, r5
 80159c8:	47b8      	blx	r7
 80159ca:	3001      	adds	r0, #1
 80159cc:	f43f af09 	beq.w	80157e2 <_printf_float+0xc2>
 80159d0:	f04f 0900 	mov.w	r9, #0
 80159d4:	f104 0a1a 	add.w	sl, r4, #26
 80159d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159da:	425b      	negs	r3, r3
 80159dc:	454b      	cmp	r3, r9
 80159de:	dc01      	bgt.n	80159e4 <_printf_float+0x2c4>
 80159e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159e2:	e792      	b.n	801590a <_printf_float+0x1ea>
 80159e4:	2301      	movs	r3, #1
 80159e6:	4652      	mov	r2, sl
 80159e8:	4631      	mov	r1, r6
 80159ea:	4628      	mov	r0, r5
 80159ec:	47b8      	blx	r7
 80159ee:	3001      	adds	r0, #1
 80159f0:	f43f aef7 	beq.w	80157e2 <_printf_float+0xc2>
 80159f4:	f109 0901 	add.w	r9, r9, #1
 80159f8:	e7ee      	b.n	80159d8 <_printf_float+0x2b8>
 80159fa:	bf00      	nop
 80159fc:	7fefffff 	.word	0x7fefffff
 8015a00:	0801c568 	.word	0x0801c568
 8015a04:	0801c56c 	.word	0x0801c56c
 8015a08:	0801c574 	.word	0x0801c574
 8015a0c:	0801c570 	.word	0x0801c570
 8015a10:	0801c8b1 	.word	0x0801c8b1
 8015a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	bfa8      	it	ge
 8015a1c:	461a      	movge	r2, r3
 8015a1e:	2a00      	cmp	r2, #0
 8015a20:	4691      	mov	r9, r2
 8015a22:	dc37      	bgt.n	8015a94 <_printf_float+0x374>
 8015a24:	f04f 0b00 	mov.w	fp, #0
 8015a28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015a2c:	f104 021a 	add.w	r2, r4, #26
 8015a30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a32:	9305      	str	r3, [sp, #20]
 8015a34:	eba3 0309 	sub.w	r3, r3, r9
 8015a38:	455b      	cmp	r3, fp
 8015a3a:	dc33      	bgt.n	8015aa4 <_printf_float+0x384>
 8015a3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a40:	429a      	cmp	r2, r3
 8015a42:	db3b      	blt.n	8015abc <_printf_float+0x39c>
 8015a44:	6823      	ldr	r3, [r4, #0]
 8015a46:	07da      	lsls	r2, r3, #31
 8015a48:	d438      	bmi.n	8015abc <_printf_float+0x39c>
 8015a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a4c:	9b05      	ldr	r3, [sp, #20]
 8015a4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a50:	1ad3      	subs	r3, r2, r3
 8015a52:	eba2 0901 	sub.w	r9, r2, r1
 8015a56:	4599      	cmp	r9, r3
 8015a58:	bfa8      	it	ge
 8015a5a:	4699      	movge	r9, r3
 8015a5c:	f1b9 0f00 	cmp.w	r9, #0
 8015a60:	dc35      	bgt.n	8015ace <_printf_float+0x3ae>
 8015a62:	f04f 0800 	mov.w	r8, #0
 8015a66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015a6a:	f104 0a1a 	add.w	sl, r4, #26
 8015a6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a72:	1a9b      	subs	r3, r3, r2
 8015a74:	eba3 0309 	sub.w	r3, r3, r9
 8015a78:	4543      	cmp	r3, r8
 8015a7a:	f77f af79 	ble.w	8015970 <_printf_float+0x250>
 8015a7e:	2301      	movs	r3, #1
 8015a80:	4652      	mov	r2, sl
 8015a82:	4631      	mov	r1, r6
 8015a84:	4628      	mov	r0, r5
 8015a86:	47b8      	blx	r7
 8015a88:	3001      	adds	r0, #1
 8015a8a:	f43f aeaa 	beq.w	80157e2 <_printf_float+0xc2>
 8015a8e:	f108 0801 	add.w	r8, r8, #1
 8015a92:	e7ec      	b.n	8015a6e <_printf_float+0x34e>
 8015a94:	4613      	mov	r3, r2
 8015a96:	4631      	mov	r1, r6
 8015a98:	4642      	mov	r2, r8
 8015a9a:	4628      	mov	r0, r5
 8015a9c:	47b8      	blx	r7
 8015a9e:	3001      	adds	r0, #1
 8015aa0:	d1c0      	bne.n	8015a24 <_printf_float+0x304>
 8015aa2:	e69e      	b.n	80157e2 <_printf_float+0xc2>
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	4631      	mov	r1, r6
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	9205      	str	r2, [sp, #20]
 8015aac:	47b8      	blx	r7
 8015aae:	3001      	adds	r0, #1
 8015ab0:	f43f ae97 	beq.w	80157e2 <_printf_float+0xc2>
 8015ab4:	9a05      	ldr	r2, [sp, #20]
 8015ab6:	f10b 0b01 	add.w	fp, fp, #1
 8015aba:	e7b9      	b.n	8015a30 <_printf_float+0x310>
 8015abc:	ee18 3a10 	vmov	r3, s16
 8015ac0:	4652      	mov	r2, sl
 8015ac2:	4631      	mov	r1, r6
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	47b8      	blx	r7
 8015ac8:	3001      	adds	r0, #1
 8015aca:	d1be      	bne.n	8015a4a <_printf_float+0x32a>
 8015acc:	e689      	b.n	80157e2 <_printf_float+0xc2>
 8015ace:	9a05      	ldr	r2, [sp, #20]
 8015ad0:	464b      	mov	r3, r9
 8015ad2:	4442      	add	r2, r8
 8015ad4:	4631      	mov	r1, r6
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	47b8      	blx	r7
 8015ada:	3001      	adds	r0, #1
 8015adc:	d1c1      	bne.n	8015a62 <_printf_float+0x342>
 8015ade:	e680      	b.n	80157e2 <_printf_float+0xc2>
 8015ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ae2:	2a01      	cmp	r2, #1
 8015ae4:	dc01      	bgt.n	8015aea <_printf_float+0x3ca>
 8015ae6:	07db      	lsls	r3, r3, #31
 8015ae8:	d538      	bpl.n	8015b5c <_printf_float+0x43c>
 8015aea:	2301      	movs	r3, #1
 8015aec:	4642      	mov	r2, r8
 8015aee:	4631      	mov	r1, r6
 8015af0:	4628      	mov	r0, r5
 8015af2:	47b8      	blx	r7
 8015af4:	3001      	adds	r0, #1
 8015af6:	f43f ae74 	beq.w	80157e2 <_printf_float+0xc2>
 8015afa:	ee18 3a10 	vmov	r3, s16
 8015afe:	4652      	mov	r2, sl
 8015b00:	4631      	mov	r1, r6
 8015b02:	4628      	mov	r0, r5
 8015b04:	47b8      	blx	r7
 8015b06:	3001      	adds	r0, #1
 8015b08:	f43f ae6b 	beq.w	80157e2 <_printf_float+0xc2>
 8015b0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b10:	2200      	movs	r2, #0
 8015b12:	2300      	movs	r3, #0
 8015b14:	f7ea ffe8 	bl	8000ae8 <__aeabi_dcmpeq>
 8015b18:	b9d8      	cbnz	r0, 8015b52 <_printf_float+0x432>
 8015b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b1c:	f108 0201 	add.w	r2, r8, #1
 8015b20:	3b01      	subs	r3, #1
 8015b22:	4631      	mov	r1, r6
 8015b24:	4628      	mov	r0, r5
 8015b26:	47b8      	blx	r7
 8015b28:	3001      	adds	r0, #1
 8015b2a:	d10e      	bne.n	8015b4a <_printf_float+0x42a>
 8015b2c:	e659      	b.n	80157e2 <_printf_float+0xc2>
 8015b2e:	2301      	movs	r3, #1
 8015b30:	4652      	mov	r2, sl
 8015b32:	4631      	mov	r1, r6
 8015b34:	4628      	mov	r0, r5
 8015b36:	47b8      	blx	r7
 8015b38:	3001      	adds	r0, #1
 8015b3a:	f43f ae52 	beq.w	80157e2 <_printf_float+0xc2>
 8015b3e:	f108 0801 	add.w	r8, r8, #1
 8015b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b44:	3b01      	subs	r3, #1
 8015b46:	4543      	cmp	r3, r8
 8015b48:	dcf1      	bgt.n	8015b2e <_printf_float+0x40e>
 8015b4a:	464b      	mov	r3, r9
 8015b4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015b50:	e6dc      	b.n	801590c <_printf_float+0x1ec>
 8015b52:	f04f 0800 	mov.w	r8, #0
 8015b56:	f104 0a1a 	add.w	sl, r4, #26
 8015b5a:	e7f2      	b.n	8015b42 <_printf_float+0x422>
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	4642      	mov	r2, r8
 8015b60:	e7df      	b.n	8015b22 <_printf_float+0x402>
 8015b62:	2301      	movs	r3, #1
 8015b64:	464a      	mov	r2, r9
 8015b66:	4631      	mov	r1, r6
 8015b68:	4628      	mov	r0, r5
 8015b6a:	47b8      	blx	r7
 8015b6c:	3001      	adds	r0, #1
 8015b6e:	f43f ae38 	beq.w	80157e2 <_printf_float+0xc2>
 8015b72:	f108 0801 	add.w	r8, r8, #1
 8015b76:	68e3      	ldr	r3, [r4, #12]
 8015b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b7a:	1a5b      	subs	r3, r3, r1
 8015b7c:	4543      	cmp	r3, r8
 8015b7e:	dcf0      	bgt.n	8015b62 <_printf_float+0x442>
 8015b80:	e6fa      	b.n	8015978 <_printf_float+0x258>
 8015b82:	f04f 0800 	mov.w	r8, #0
 8015b86:	f104 0919 	add.w	r9, r4, #25
 8015b8a:	e7f4      	b.n	8015b76 <_printf_float+0x456>

08015b8c <_printf_common>:
 8015b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b90:	4616      	mov	r6, r2
 8015b92:	4699      	mov	r9, r3
 8015b94:	688a      	ldr	r2, [r1, #8]
 8015b96:	690b      	ldr	r3, [r1, #16]
 8015b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b9c:	4293      	cmp	r3, r2
 8015b9e:	bfb8      	it	lt
 8015ba0:	4613      	movlt	r3, r2
 8015ba2:	6033      	str	r3, [r6, #0]
 8015ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ba8:	4607      	mov	r7, r0
 8015baa:	460c      	mov	r4, r1
 8015bac:	b10a      	cbz	r2, 8015bb2 <_printf_common+0x26>
 8015bae:	3301      	adds	r3, #1
 8015bb0:	6033      	str	r3, [r6, #0]
 8015bb2:	6823      	ldr	r3, [r4, #0]
 8015bb4:	0699      	lsls	r1, r3, #26
 8015bb6:	bf42      	ittt	mi
 8015bb8:	6833      	ldrmi	r3, [r6, #0]
 8015bba:	3302      	addmi	r3, #2
 8015bbc:	6033      	strmi	r3, [r6, #0]
 8015bbe:	6825      	ldr	r5, [r4, #0]
 8015bc0:	f015 0506 	ands.w	r5, r5, #6
 8015bc4:	d106      	bne.n	8015bd4 <_printf_common+0x48>
 8015bc6:	f104 0a19 	add.w	sl, r4, #25
 8015bca:	68e3      	ldr	r3, [r4, #12]
 8015bcc:	6832      	ldr	r2, [r6, #0]
 8015bce:	1a9b      	subs	r3, r3, r2
 8015bd0:	42ab      	cmp	r3, r5
 8015bd2:	dc26      	bgt.n	8015c22 <_printf_common+0x96>
 8015bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015bd8:	1e13      	subs	r3, r2, #0
 8015bda:	6822      	ldr	r2, [r4, #0]
 8015bdc:	bf18      	it	ne
 8015bde:	2301      	movne	r3, #1
 8015be0:	0692      	lsls	r2, r2, #26
 8015be2:	d42b      	bmi.n	8015c3c <_printf_common+0xb0>
 8015be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015be8:	4649      	mov	r1, r9
 8015bea:	4638      	mov	r0, r7
 8015bec:	47c0      	blx	r8
 8015bee:	3001      	adds	r0, #1
 8015bf0:	d01e      	beq.n	8015c30 <_printf_common+0xa4>
 8015bf2:	6823      	ldr	r3, [r4, #0]
 8015bf4:	68e5      	ldr	r5, [r4, #12]
 8015bf6:	6832      	ldr	r2, [r6, #0]
 8015bf8:	f003 0306 	and.w	r3, r3, #6
 8015bfc:	2b04      	cmp	r3, #4
 8015bfe:	bf08      	it	eq
 8015c00:	1aad      	subeq	r5, r5, r2
 8015c02:	68a3      	ldr	r3, [r4, #8]
 8015c04:	6922      	ldr	r2, [r4, #16]
 8015c06:	bf0c      	ite	eq
 8015c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015c0c:	2500      	movne	r5, #0
 8015c0e:	4293      	cmp	r3, r2
 8015c10:	bfc4      	itt	gt
 8015c12:	1a9b      	subgt	r3, r3, r2
 8015c14:	18ed      	addgt	r5, r5, r3
 8015c16:	2600      	movs	r6, #0
 8015c18:	341a      	adds	r4, #26
 8015c1a:	42b5      	cmp	r5, r6
 8015c1c:	d11a      	bne.n	8015c54 <_printf_common+0xc8>
 8015c1e:	2000      	movs	r0, #0
 8015c20:	e008      	b.n	8015c34 <_printf_common+0xa8>
 8015c22:	2301      	movs	r3, #1
 8015c24:	4652      	mov	r2, sl
 8015c26:	4649      	mov	r1, r9
 8015c28:	4638      	mov	r0, r7
 8015c2a:	47c0      	blx	r8
 8015c2c:	3001      	adds	r0, #1
 8015c2e:	d103      	bne.n	8015c38 <_printf_common+0xac>
 8015c30:	f04f 30ff 	mov.w	r0, #4294967295
 8015c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c38:	3501      	adds	r5, #1
 8015c3a:	e7c6      	b.n	8015bca <_printf_common+0x3e>
 8015c3c:	18e1      	adds	r1, r4, r3
 8015c3e:	1c5a      	adds	r2, r3, #1
 8015c40:	2030      	movs	r0, #48	; 0x30
 8015c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015c46:	4422      	add	r2, r4
 8015c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015c50:	3302      	adds	r3, #2
 8015c52:	e7c7      	b.n	8015be4 <_printf_common+0x58>
 8015c54:	2301      	movs	r3, #1
 8015c56:	4622      	mov	r2, r4
 8015c58:	4649      	mov	r1, r9
 8015c5a:	4638      	mov	r0, r7
 8015c5c:	47c0      	blx	r8
 8015c5e:	3001      	adds	r0, #1
 8015c60:	d0e6      	beq.n	8015c30 <_printf_common+0xa4>
 8015c62:	3601      	adds	r6, #1
 8015c64:	e7d9      	b.n	8015c1a <_printf_common+0x8e>
	...

08015c68 <_printf_i>:
 8015c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c6c:	460c      	mov	r4, r1
 8015c6e:	4691      	mov	r9, r2
 8015c70:	7e27      	ldrb	r7, [r4, #24]
 8015c72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c74:	2f78      	cmp	r7, #120	; 0x78
 8015c76:	4680      	mov	r8, r0
 8015c78:	469a      	mov	sl, r3
 8015c7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c7e:	d807      	bhi.n	8015c90 <_printf_i+0x28>
 8015c80:	2f62      	cmp	r7, #98	; 0x62
 8015c82:	d80a      	bhi.n	8015c9a <_printf_i+0x32>
 8015c84:	2f00      	cmp	r7, #0
 8015c86:	f000 80d8 	beq.w	8015e3a <_printf_i+0x1d2>
 8015c8a:	2f58      	cmp	r7, #88	; 0x58
 8015c8c:	f000 80a3 	beq.w	8015dd6 <_printf_i+0x16e>
 8015c90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015c98:	e03a      	b.n	8015d10 <_printf_i+0xa8>
 8015c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015c9e:	2b15      	cmp	r3, #21
 8015ca0:	d8f6      	bhi.n	8015c90 <_printf_i+0x28>
 8015ca2:	a001      	add	r0, pc, #4	; (adr r0, 8015ca8 <_printf_i+0x40>)
 8015ca4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015ca8:	08015d01 	.word	0x08015d01
 8015cac:	08015d15 	.word	0x08015d15
 8015cb0:	08015c91 	.word	0x08015c91
 8015cb4:	08015c91 	.word	0x08015c91
 8015cb8:	08015c91 	.word	0x08015c91
 8015cbc:	08015c91 	.word	0x08015c91
 8015cc0:	08015d15 	.word	0x08015d15
 8015cc4:	08015c91 	.word	0x08015c91
 8015cc8:	08015c91 	.word	0x08015c91
 8015ccc:	08015c91 	.word	0x08015c91
 8015cd0:	08015c91 	.word	0x08015c91
 8015cd4:	08015e21 	.word	0x08015e21
 8015cd8:	08015d45 	.word	0x08015d45
 8015cdc:	08015e03 	.word	0x08015e03
 8015ce0:	08015c91 	.word	0x08015c91
 8015ce4:	08015c91 	.word	0x08015c91
 8015ce8:	08015e43 	.word	0x08015e43
 8015cec:	08015c91 	.word	0x08015c91
 8015cf0:	08015d45 	.word	0x08015d45
 8015cf4:	08015c91 	.word	0x08015c91
 8015cf8:	08015c91 	.word	0x08015c91
 8015cfc:	08015e0b 	.word	0x08015e0b
 8015d00:	680b      	ldr	r3, [r1, #0]
 8015d02:	1d1a      	adds	r2, r3, #4
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	600a      	str	r2, [r1, #0]
 8015d08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015d10:	2301      	movs	r3, #1
 8015d12:	e0a3      	b.n	8015e5c <_printf_i+0x1f4>
 8015d14:	6825      	ldr	r5, [r4, #0]
 8015d16:	6808      	ldr	r0, [r1, #0]
 8015d18:	062e      	lsls	r6, r5, #24
 8015d1a:	f100 0304 	add.w	r3, r0, #4
 8015d1e:	d50a      	bpl.n	8015d36 <_printf_i+0xce>
 8015d20:	6805      	ldr	r5, [r0, #0]
 8015d22:	600b      	str	r3, [r1, #0]
 8015d24:	2d00      	cmp	r5, #0
 8015d26:	da03      	bge.n	8015d30 <_printf_i+0xc8>
 8015d28:	232d      	movs	r3, #45	; 0x2d
 8015d2a:	426d      	negs	r5, r5
 8015d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d30:	485e      	ldr	r0, [pc, #376]	; (8015eac <_printf_i+0x244>)
 8015d32:	230a      	movs	r3, #10
 8015d34:	e019      	b.n	8015d6a <_printf_i+0x102>
 8015d36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015d3a:	6805      	ldr	r5, [r0, #0]
 8015d3c:	600b      	str	r3, [r1, #0]
 8015d3e:	bf18      	it	ne
 8015d40:	b22d      	sxthne	r5, r5
 8015d42:	e7ef      	b.n	8015d24 <_printf_i+0xbc>
 8015d44:	680b      	ldr	r3, [r1, #0]
 8015d46:	6825      	ldr	r5, [r4, #0]
 8015d48:	1d18      	adds	r0, r3, #4
 8015d4a:	6008      	str	r0, [r1, #0]
 8015d4c:	0628      	lsls	r0, r5, #24
 8015d4e:	d501      	bpl.n	8015d54 <_printf_i+0xec>
 8015d50:	681d      	ldr	r5, [r3, #0]
 8015d52:	e002      	b.n	8015d5a <_printf_i+0xf2>
 8015d54:	0669      	lsls	r1, r5, #25
 8015d56:	d5fb      	bpl.n	8015d50 <_printf_i+0xe8>
 8015d58:	881d      	ldrh	r5, [r3, #0]
 8015d5a:	4854      	ldr	r0, [pc, #336]	; (8015eac <_printf_i+0x244>)
 8015d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8015d5e:	bf0c      	ite	eq
 8015d60:	2308      	moveq	r3, #8
 8015d62:	230a      	movne	r3, #10
 8015d64:	2100      	movs	r1, #0
 8015d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015d6a:	6866      	ldr	r6, [r4, #4]
 8015d6c:	60a6      	str	r6, [r4, #8]
 8015d6e:	2e00      	cmp	r6, #0
 8015d70:	bfa2      	ittt	ge
 8015d72:	6821      	ldrge	r1, [r4, #0]
 8015d74:	f021 0104 	bicge.w	r1, r1, #4
 8015d78:	6021      	strge	r1, [r4, #0]
 8015d7a:	b90d      	cbnz	r5, 8015d80 <_printf_i+0x118>
 8015d7c:	2e00      	cmp	r6, #0
 8015d7e:	d04d      	beq.n	8015e1c <_printf_i+0x1b4>
 8015d80:	4616      	mov	r6, r2
 8015d82:	fbb5 f1f3 	udiv	r1, r5, r3
 8015d86:	fb03 5711 	mls	r7, r3, r1, r5
 8015d8a:	5dc7      	ldrb	r7, [r0, r7]
 8015d8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d90:	462f      	mov	r7, r5
 8015d92:	42bb      	cmp	r3, r7
 8015d94:	460d      	mov	r5, r1
 8015d96:	d9f4      	bls.n	8015d82 <_printf_i+0x11a>
 8015d98:	2b08      	cmp	r3, #8
 8015d9a:	d10b      	bne.n	8015db4 <_printf_i+0x14c>
 8015d9c:	6823      	ldr	r3, [r4, #0]
 8015d9e:	07df      	lsls	r7, r3, #31
 8015da0:	d508      	bpl.n	8015db4 <_printf_i+0x14c>
 8015da2:	6923      	ldr	r3, [r4, #16]
 8015da4:	6861      	ldr	r1, [r4, #4]
 8015da6:	4299      	cmp	r1, r3
 8015da8:	bfde      	ittt	le
 8015daa:	2330      	movle	r3, #48	; 0x30
 8015dac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015db0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015db4:	1b92      	subs	r2, r2, r6
 8015db6:	6122      	str	r2, [r4, #16]
 8015db8:	f8cd a000 	str.w	sl, [sp]
 8015dbc:	464b      	mov	r3, r9
 8015dbe:	aa03      	add	r2, sp, #12
 8015dc0:	4621      	mov	r1, r4
 8015dc2:	4640      	mov	r0, r8
 8015dc4:	f7ff fee2 	bl	8015b8c <_printf_common>
 8015dc8:	3001      	adds	r0, #1
 8015dca:	d14c      	bne.n	8015e66 <_printf_i+0x1fe>
 8015dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8015dd0:	b004      	add	sp, #16
 8015dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dd6:	4835      	ldr	r0, [pc, #212]	; (8015eac <_printf_i+0x244>)
 8015dd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015ddc:	6823      	ldr	r3, [r4, #0]
 8015dde:	680e      	ldr	r6, [r1, #0]
 8015de0:	061f      	lsls	r7, r3, #24
 8015de2:	f856 5b04 	ldr.w	r5, [r6], #4
 8015de6:	600e      	str	r6, [r1, #0]
 8015de8:	d514      	bpl.n	8015e14 <_printf_i+0x1ac>
 8015dea:	07d9      	lsls	r1, r3, #31
 8015dec:	bf44      	itt	mi
 8015dee:	f043 0320 	orrmi.w	r3, r3, #32
 8015df2:	6023      	strmi	r3, [r4, #0]
 8015df4:	b91d      	cbnz	r5, 8015dfe <_printf_i+0x196>
 8015df6:	6823      	ldr	r3, [r4, #0]
 8015df8:	f023 0320 	bic.w	r3, r3, #32
 8015dfc:	6023      	str	r3, [r4, #0]
 8015dfe:	2310      	movs	r3, #16
 8015e00:	e7b0      	b.n	8015d64 <_printf_i+0xfc>
 8015e02:	6823      	ldr	r3, [r4, #0]
 8015e04:	f043 0320 	orr.w	r3, r3, #32
 8015e08:	6023      	str	r3, [r4, #0]
 8015e0a:	2378      	movs	r3, #120	; 0x78
 8015e0c:	4828      	ldr	r0, [pc, #160]	; (8015eb0 <_printf_i+0x248>)
 8015e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015e12:	e7e3      	b.n	8015ddc <_printf_i+0x174>
 8015e14:	065e      	lsls	r6, r3, #25
 8015e16:	bf48      	it	mi
 8015e18:	b2ad      	uxthmi	r5, r5
 8015e1a:	e7e6      	b.n	8015dea <_printf_i+0x182>
 8015e1c:	4616      	mov	r6, r2
 8015e1e:	e7bb      	b.n	8015d98 <_printf_i+0x130>
 8015e20:	680b      	ldr	r3, [r1, #0]
 8015e22:	6826      	ldr	r6, [r4, #0]
 8015e24:	6960      	ldr	r0, [r4, #20]
 8015e26:	1d1d      	adds	r5, r3, #4
 8015e28:	600d      	str	r5, [r1, #0]
 8015e2a:	0635      	lsls	r5, r6, #24
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	d501      	bpl.n	8015e34 <_printf_i+0x1cc>
 8015e30:	6018      	str	r0, [r3, #0]
 8015e32:	e002      	b.n	8015e3a <_printf_i+0x1d2>
 8015e34:	0671      	lsls	r1, r6, #25
 8015e36:	d5fb      	bpl.n	8015e30 <_printf_i+0x1c8>
 8015e38:	8018      	strh	r0, [r3, #0]
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	6123      	str	r3, [r4, #16]
 8015e3e:	4616      	mov	r6, r2
 8015e40:	e7ba      	b.n	8015db8 <_printf_i+0x150>
 8015e42:	680b      	ldr	r3, [r1, #0]
 8015e44:	1d1a      	adds	r2, r3, #4
 8015e46:	600a      	str	r2, [r1, #0]
 8015e48:	681e      	ldr	r6, [r3, #0]
 8015e4a:	6862      	ldr	r2, [r4, #4]
 8015e4c:	2100      	movs	r1, #0
 8015e4e:	4630      	mov	r0, r6
 8015e50:	f7ea f9d6 	bl	8000200 <memchr>
 8015e54:	b108      	cbz	r0, 8015e5a <_printf_i+0x1f2>
 8015e56:	1b80      	subs	r0, r0, r6
 8015e58:	6060      	str	r0, [r4, #4]
 8015e5a:	6863      	ldr	r3, [r4, #4]
 8015e5c:	6123      	str	r3, [r4, #16]
 8015e5e:	2300      	movs	r3, #0
 8015e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e64:	e7a8      	b.n	8015db8 <_printf_i+0x150>
 8015e66:	6923      	ldr	r3, [r4, #16]
 8015e68:	4632      	mov	r2, r6
 8015e6a:	4649      	mov	r1, r9
 8015e6c:	4640      	mov	r0, r8
 8015e6e:	47d0      	blx	sl
 8015e70:	3001      	adds	r0, #1
 8015e72:	d0ab      	beq.n	8015dcc <_printf_i+0x164>
 8015e74:	6823      	ldr	r3, [r4, #0]
 8015e76:	079b      	lsls	r3, r3, #30
 8015e78:	d413      	bmi.n	8015ea2 <_printf_i+0x23a>
 8015e7a:	68e0      	ldr	r0, [r4, #12]
 8015e7c:	9b03      	ldr	r3, [sp, #12]
 8015e7e:	4298      	cmp	r0, r3
 8015e80:	bfb8      	it	lt
 8015e82:	4618      	movlt	r0, r3
 8015e84:	e7a4      	b.n	8015dd0 <_printf_i+0x168>
 8015e86:	2301      	movs	r3, #1
 8015e88:	4632      	mov	r2, r6
 8015e8a:	4649      	mov	r1, r9
 8015e8c:	4640      	mov	r0, r8
 8015e8e:	47d0      	blx	sl
 8015e90:	3001      	adds	r0, #1
 8015e92:	d09b      	beq.n	8015dcc <_printf_i+0x164>
 8015e94:	3501      	adds	r5, #1
 8015e96:	68e3      	ldr	r3, [r4, #12]
 8015e98:	9903      	ldr	r1, [sp, #12]
 8015e9a:	1a5b      	subs	r3, r3, r1
 8015e9c:	42ab      	cmp	r3, r5
 8015e9e:	dcf2      	bgt.n	8015e86 <_printf_i+0x21e>
 8015ea0:	e7eb      	b.n	8015e7a <_printf_i+0x212>
 8015ea2:	2500      	movs	r5, #0
 8015ea4:	f104 0619 	add.w	r6, r4, #25
 8015ea8:	e7f5      	b.n	8015e96 <_printf_i+0x22e>
 8015eaa:	bf00      	nop
 8015eac:	0801c578 	.word	0x0801c578
 8015eb0:	0801c589 	.word	0x0801c589

08015eb4 <_scanf_float>:
 8015eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eb8:	b087      	sub	sp, #28
 8015eba:	4617      	mov	r7, r2
 8015ebc:	9303      	str	r3, [sp, #12]
 8015ebe:	688b      	ldr	r3, [r1, #8]
 8015ec0:	1e5a      	subs	r2, r3, #1
 8015ec2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015ec6:	bf83      	ittte	hi
 8015ec8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015ecc:	195b      	addhi	r3, r3, r5
 8015ece:	9302      	strhi	r3, [sp, #8]
 8015ed0:	2300      	movls	r3, #0
 8015ed2:	bf86      	itte	hi
 8015ed4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015ed8:	608b      	strhi	r3, [r1, #8]
 8015eda:	9302      	strls	r3, [sp, #8]
 8015edc:	680b      	ldr	r3, [r1, #0]
 8015ede:	468b      	mov	fp, r1
 8015ee0:	2500      	movs	r5, #0
 8015ee2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015ee6:	f84b 3b1c 	str.w	r3, [fp], #28
 8015eea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015eee:	4680      	mov	r8, r0
 8015ef0:	460c      	mov	r4, r1
 8015ef2:	465e      	mov	r6, fp
 8015ef4:	46aa      	mov	sl, r5
 8015ef6:	46a9      	mov	r9, r5
 8015ef8:	9501      	str	r5, [sp, #4]
 8015efa:	68a2      	ldr	r2, [r4, #8]
 8015efc:	b152      	cbz	r2, 8015f14 <_scanf_float+0x60>
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	781b      	ldrb	r3, [r3, #0]
 8015f02:	2b4e      	cmp	r3, #78	; 0x4e
 8015f04:	d864      	bhi.n	8015fd0 <_scanf_float+0x11c>
 8015f06:	2b40      	cmp	r3, #64	; 0x40
 8015f08:	d83c      	bhi.n	8015f84 <_scanf_float+0xd0>
 8015f0a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015f0e:	b2c8      	uxtb	r0, r1
 8015f10:	280e      	cmp	r0, #14
 8015f12:	d93a      	bls.n	8015f8a <_scanf_float+0xd6>
 8015f14:	f1b9 0f00 	cmp.w	r9, #0
 8015f18:	d003      	beq.n	8015f22 <_scanf_float+0x6e>
 8015f1a:	6823      	ldr	r3, [r4, #0]
 8015f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f20:	6023      	str	r3, [r4, #0]
 8015f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015f26:	f1ba 0f01 	cmp.w	sl, #1
 8015f2a:	f200 8113 	bhi.w	8016154 <_scanf_float+0x2a0>
 8015f2e:	455e      	cmp	r6, fp
 8015f30:	f200 8105 	bhi.w	801613e <_scanf_float+0x28a>
 8015f34:	2501      	movs	r5, #1
 8015f36:	4628      	mov	r0, r5
 8015f38:	b007      	add	sp, #28
 8015f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015f42:	2a0d      	cmp	r2, #13
 8015f44:	d8e6      	bhi.n	8015f14 <_scanf_float+0x60>
 8015f46:	a101      	add	r1, pc, #4	; (adr r1, 8015f4c <_scanf_float+0x98>)
 8015f48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015f4c:	0801608b 	.word	0x0801608b
 8015f50:	08015f15 	.word	0x08015f15
 8015f54:	08015f15 	.word	0x08015f15
 8015f58:	08015f15 	.word	0x08015f15
 8015f5c:	080160eb 	.word	0x080160eb
 8015f60:	080160c3 	.word	0x080160c3
 8015f64:	08015f15 	.word	0x08015f15
 8015f68:	08015f15 	.word	0x08015f15
 8015f6c:	08016099 	.word	0x08016099
 8015f70:	08015f15 	.word	0x08015f15
 8015f74:	08015f15 	.word	0x08015f15
 8015f78:	08015f15 	.word	0x08015f15
 8015f7c:	08015f15 	.word	0x08015f15
 8015f80:	08016051 	.word	0x08016051
 8015f84:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015f88:	e7db      	b.n	8015f42 <_scanf_float+0x8e>
 8015f8a:	290e      	cmp	r1, #14
 8015f8c:	d8c2      	bhi.n	8015f14 <_scanf_float+0x60>
 8015f8e:	a001      	add	r0, pc, #4	; (adr r0, 8015f94 <_scanf_float+0xe0>)
 8015f90:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015f94:	08016043 	.word	0x08016043
 8015f98:	08015f15 	.word	0x08015f15
 8015f9c:	08016043 	.word	0x08016043
 8015fa0:	080160d7 	.word	0x080160d7
 8015fa4:	08015f15 	.word	0x08015f15
 8015fa8:	08015ff1 	.word	0x08015ff1
 8015fac:	0801602d 	.word	0x0801602d
 8015fb0:	0801602d 	.word	0x0801602d
 8015fb4:	0801602d 	.word	0x0801602d
 8015fb8:	0801602d 	.word	0x0801602d
 8015fbc:	0801602d 	.word	0x0801602d
 8015fc0:	0801602d 	.word	0x0801602d
 8015fc4:	0801602d 	.word	0x0801602d
 8015fc8:	0801602d 	.word	0x0801602d
 8015fcc:	0801602d 	.word	0x0801602d
 8015fd0:	2b6e      	cmp	r3, #110	; 0x6e
 8015fd2:	d809      	bhi.n	8015fe8 <_scanf_float+0x134>
 8015fd4:	2b60      	cmp	r3, #96	; 0x60
 8015fd6:	d8b2      	bhi.n	8015f3e <_scanf_float+0x8a>
 8015fd8:	2b54      	cmp	r3, #84	; 0x54
 8015fda:	d077      	beq.n	80160cc <_scanf_float+0x218>
 8015fdc:	2b59      	cmp	r3, #89	; 0x59
 8015fde:	d199      	bne.n	8015f14 <_scanf_float+0x60>
 8015fe0:	2d07      	cmp	r5, #7
 8015fe2:	d197      	bne.n	8015f14 <_scanf_float+0x60>
 8015fe4:	2508      	movs	r5, #8
 8015fe6:	e029      	b.n	801603c <_scanf_float+0x188>
 8015fe8:	2b74      	cmp	r3, #116	; 0x74
 8015fea:	d06f      	beq.n	80160cc <_scanf_float+0x218>
 8015fec:	2b79      	cmp	r3, #121	; 0x79
 8015fee:	e7f6      	b.n	8015fde <_scanf_float+0x12a>
 8015ff0:	6821      	ldr	r1, [r4, #0]
 8015ff2:	05c8      	lsls	r0, r1, #23
 8015ff4:	d51a      	bpl.n	801602c <_scanf_float+0x178>
 8015ff6:	9b02      	ldr	r3, [sp, #8]
 8015ff8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015ffc:	6021      	str	r1, [r4, #0]
 8015ffe:	f109 0901 	add.w	r9, r9, #1
 8016002:	b11b      	cbz	r3, 801600c <_scanf_float+0x158>
 8016004:	3b01      	subs	r3, #1
 8016006:	3201      	adds	r2, #1
 8016008:	9302      	str	r3, [sp, #8]
 801600a:	60a2      	str	r2, [r4, #8]
 801600c:	68a3      	ldr	r3, [r4, #8]
 801600e:	3b01      	subs	r3, #1
 8016010:	60a3      	str	r3, [r4, #8]
 8016012:	6923      	ldr	r3, [r4, #16]
 8016014:	3301      	adds	r3, #1
 8016016:	6123      	str	r3, [r4, #16]
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	3b01      	subs	r3, #1
 801601c:	2b00      	cmp	r3, #0
 801601e:	607b      	str	r3, [r7, #4]
 8016020:	f340 8084 	ble.w	801612c <_scanf_float+0x278>
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	3301      	adds	r3, #1
 8016028:	603b      	str	r3, [r7, #0]
 801602a:	e766      	b.n	8015efa <_scanf_float+0x46>
 801602c:	eb1a 0f05 	cmn.w	sl, r5
 8016030:	f47f af70 	bne.w	8015f14 <_scanf_float+0x60>
 8016034:	6822      	ldr	r2, [r4, #0]
 8016036:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801603a:	6022      	str	r2, [r4, #0]
 801603c:	f806 3b01 	strb.w	r3, [r6], #1
 8016040:	e7e4      	b.n	801600c <_scanf_float+0x158>
 8016042:	6822      	ldr	r2, [r4, #0]
 8016044:	0610      	lsls	r0, r2, #24
 8016046:	f57f af65 	bpl.w	8015f14 <_scanf_float+0x60>
 801604a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801604e:	e7f4      	b.n	801603a <_scanf_float+0x186>
 8016050:	f1ba 0f00 	cmp.w	sl, #0
 8016054:	d10e      	bne.n	8016074 <_scanf_float+0x1c0>
 8016056:	f1b9 0f00 	cmp.w	r9, #0
 801605a:	d10e      	bne.n	801607a <_scanf_float+0x1c6>
 801605c:	6822      	ldr	r2, [r4, #0]
 801605e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016062:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016066:	d108      	bne.n	801607a <_scanf_float+0x1c6>
 8016068:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801606c:	6022      	str	r2, [r4, #0]
 801606e:	f04f 0a01 	mov.w	sl, #1
 8016072:	e7e3      	b.n	801603c <_scanf_float+0x188>
 8016074:	f1ba 0f02 	cmp.w	sl, #2
 8016078:	d055      	beq.n	8016126 <_scanf_float+0x272>
 801607a:	2d01      	cmp	r5, #1
 801607c:	d002      	beq.n	8016084 <_scanf_float+0x1d0>
 801607e:	2d04      	cmp	r5, #4
 8016080:	f47f af48 	bne.w	8015f14 <_scanf_float+0x60>
 8016084:	3501      	adds	r5, #1
 8016086:	b2ed      	uxtb	r5, r5
 8016088:	e7d8      	b.n	801603c <_scanf_float+0x188>
 801608a:	f1ba 0f01 	cmp.w	sl, #1
 801608e:	f47f af41 	bne.w	8015f14 <_scanf_float+0x60>
 8016092:	f04f 0a02 	mov.w	sl, #2
 8016096:	e7d1      	b.n	801603c <_scanf_float+0x188>
 8016098:	b97d      	cbnz	r5, 80160ba <_scanf_float+0x206>
 801609a:	f1b9 0f00 	cmp.w	r9, #0
 801609e:	f47f af3c 	bne.w	8015f1a <_scanf_float+0x66>
 80160a2:	6822      	ldr	r2, [r4, #0]
 80160a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80160a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80160ac:	f47f af39 	bne.w	8015f22 <_scanf_float+0x6e>
 80160b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80160b4:	6022      	str	r2, [r4, #0]
 80160b6:	2501      	movs	r5, #1
 80160b8:	e7c0      	b.n	801603c <_scanf_float+0x188>
 80160ba:	2d03      	cmp	r5, #3
 80160bc:	d0e2      	beq.n	8016084 <_scanf_float+0x1d0>
 80160be:	2d05      	cmp	r5, #5
 80160c0:	e7de      	b.n	8016080 <_scanf_float+0x1cc>
 80160c2:	2d02      	cmp	r5, #2
 80160c4:	f47f af26 	bne.w	8015f14 <_scanf_float+0x60>
 80160c8:	2503      	movs	r5, #3
 80160ca:	e7b7      	b.n	801603c <_scanf_float+0x188>
 80160cc:	2d06      	cmp	r5, #6
 80160ce:	f47f af21 	bne.w	8015f14 <_scanf_float+0x60>
 80160d2:	2507      	movs	r5, #7
 80160d4:	e7b2      	b.n	801603c <_scanf_float+0x188>
 80160d6:	6822      	ldr	r2, [r4, #0]
 80160d8:	0591      	lsls	r1, r2, #22
 80160da:	f57f af1b 	bpl.w	8015f14 <_scanf_float+0x60>
 80160de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80160e2:	6022      	str	r2, [r4, #0]
 80160e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80160e8:	e7a8      	b.n	801603c <_scanf_float+0x188>
 80160ea:	6822      	ldr	r2, [r4, #0]
 80160ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80160f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80160f4:	d006      	beq.n	8016104 <_scanf_float+0x250>
 80160f6:	0550      	lsls	r0, r2, #21
 80160f8:	f57f af0c 	bpl.w	8015f14 <_scanf_float+0x60>
 80160fc:	f1b9 0f00 	cmp.w	r9, #0
 8016100:	f43f af0f 	beq.w	8015f22 <_scanf_float+0x6e>
 8016104:	0591      	lsls	r1, r2, #22
 8016106:	bf58      	it	pl
 8016108:	9901      	ldrpl	r1, [sp, #4]
 801610a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801610e:	bf58      	it	pl
 8016110:	eba9 0101 	subpl.w	r1, r9, r1
 8016114:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016118:	bf58      	it	pl
 801611a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801611e:	6022      	str	r2, [r4, #0]
 8016120:	f04f 0900 	mov.w	r9, #0
 8016124:	e78a      	b.n	801603c <_scanf_float+0x188>
 8016126:	f04f 0a03 	mov.w	sl, #3
 801612a:	e787      	b.n	801603c <_scanf_float+0x188>
 801612c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016130:	4639      	mov	r1, r7
 8016132:	4640      	mov	r0, r8
 8016134:	4798      	blx	r3
 8016136:	2800      	cmp	r0, #0
 8016138:	f43f aedf 	beq.w	8015efa <_scanf_float+0x46>
 801613c:	e6ea      	b.n	8015f14 <_scanf_float+0x60>
 801613e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016142:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016146:	463a      	mov	r2, r7
 8016148:	4640      	mov	r0, r8
 801614a:	4798      	blx	r3
 801614c:	6923      	ldr	r3, [r4, #16]
 801614e:	3b01      	subs	r3, #1
 8016150:	6123      	str	r3, [r4, #16]
 8016152:	e6ec      	b.n	8015f2e <_scanf_float+0x7a>
 8016154:	1e6b      	subs	r3, r5, #1
 8016156:	2b06      	cmp	r3, #6
 8016158:	d825      	bhi.n	80161a6 <_scanf_float+0x2f2>
 801615a:	2d02      	cmp	r5, #2
 801615c:	d836      	bhi.n	80161cc <_scanf_float+0x318>
 801615e:	455e      	cmp	r6, fp
 8016160:	f67f aee8 	bls.w	8015f34 <_scanf_float+0x80>
 8016164:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016168:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801616c:	463a      	mov	r2, r7
 801616e:	4640      	mov	r0, r8
 8016170:	4798      	blx	r3
 8016172:	6923      	ldr	r3, [r4, #16]
 8016174:	3b01      	subs	r3, #1
 8016176:	6123      	str	r3, [r4, #16]
 8016178:	e7f1      	b.n	801615e <_scanf_float+0x2aa>
 801617a:	9802      	ldr	r0, [sp, #8]
 801617c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016180:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016184:	9002      	str	r0, [sp, #8]
 8016186:	463a      	mov	r2, r7
 8016188:	4640      	mov	r0, r8
 801618a:	4798      	blx	r3
 801618c:	6923      	ldr	r3, [r4, #16]
 801618e:	3b01      	subs	r3, #1
 8016190:	6123      	str	r3, [r4, #16]
 8016192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016196:	fa5f fa8a 	uxtb.w	sl, sl
 801619a:	f1ba 0f02 	cmp.w	sl, #2
 801619e:	d1ec      	bne.n	801617a <_scanf_float+0x2c6>
 80161a0:	3d03      	subs	r5, #3
 80161a2:	b2ed      	uxtb	r5, r5
 80161a4:	1b76      	subs	r6, r6, r5
 80161a6:	6823      	ldr	r3, [r4, #0]
 80161a8:	05da      	lsls	r2, r3, #23
 80161aa:	d52f      	bpl.n	801620c <_scanf_float+0x358>
 80161ac:	055b      	lsls	r3, r3, #21
 80161ae:	d510      	bpl.n	80161d2 <_scanf_float+0x31e>
 80161b0:	455e      	cmp	r6, fp
 80161b2:	f67f aebf 	bls.w	8015f34 <_scanf_float+0x80>
 80161b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80161be:	463a      	mov	r2, r7
 80161c0:	4640      	mov	r0, r8
 80161c2:	4798      	blx	r3
 80161c4:	6923      	ldr	r3, [r4, #16]
 80161c6:	3b01      	subs	r3, #1
 80161c8:	6123      	str	r3, [r4, #16]
 80161ca:	e7f1      	b.n	80161b0 <_scanf_float+0x2fc>
 80161cc:	46aa      	mov	sl, r5
 80161ce:	9602      	str	r6, [sp, #8]
 80161d0:	e7df      	b.n	8016192 <_scanf_float+0x2de>
 80161d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80161d6:	6923      	ldr	r3, [r4, #16]
 80161d8:	2965      	cmp	r1, #101	; 0x65
 80161da:	f103 33ff 	add.w	r3, r3, #4294967295
 80161de:	f106 35ff 	add.w	r5, r6, #4294967295
 80161e2:	6123      	str	r3, [r4, #16]
 80161e4:	d00c      	beq.n	8016200 <_scanf_float+0x34c>
 80161e6:	2945      	cmp	r1, #69	; 0x45
 80161e8:	d00a      	beq.n	8016200 <_scanf_float+0x34c>
 80161ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161ee:	463a      	mov	r2, r7
 80161f0:	4640      	mov	r0, r8
 80161f2:	4798      	blx	r3
 80161f4:	6923      	ldr	r3, [r4, #16]
 80161f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80161fa:	3b01      	subs	r3, #1
 80161fc:	1eb5      	subs	r5, r6, #2
 80161fe:	6123      	str	r3, [r4, #16]
 8016200:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016204:	463a      	mov	r2, r7
 8016206:	4640      	mov	r0, r8
 8016208:	4798      	blx	r3
 801620a:	462e      	mov	r6, r5
 801620c:	6825      	ldr	r5, [r4, #0]
 801620e:	f015 0510 	ands.w	r5, r5, #16
 8016212:	d158      	bne.n	80162c6 <_scanf_float+0x412>
 8016214:	7035      	strb	r5, [r6, #0]
 8016216:	6823      	ldr	r3, [r4, #0]
 8016218:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801621c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016220:	d11c      	bne.n	801625c <_scanf_float+0x3a8>
 8016222:	9b01      	ldr	r3, [sp, #4]
 8016224:	454b      	cmp	r3, r9
 8016226:	eba3 0209 	sub.w	r2, r3, r9
 801622a:	d124      	bne.n	8016276 <_scanf_float+0x3c2>
 801622c:	2200      	movs	r2, #0
 801622e:	4659      	mov	r1, fp
 8016230:	4640      	mov	r0, r8
 8016232:	f001 f873 	bl	801731c <_strtod_r>
 8016236:	9b03      	ldr	r3, [sp, #12]
 8016238:	6821      	ldr	r1, [r4, #0]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	f011 0f02 	tst.w	r1, #2
 8016240:	ec57 6b10 	vmov	r6, r7, d0
 8016244:	f103 0204 	add.w	r2, r3, #4
 8016248:	d020      	beq.n	801628c <_scanf_float+0x3d8>
 801624a:	9903      	ldr	r1, [sp, #12]
 801624c:	600a      	str	r2, [r1, #0]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	e9c3 6700 	strd	r6, r7, [r3]
 8016254:	68e3      	ldr	r3, [r4, #12]
 8016256:	3301      	adds	r3, #1
 8016258:	60e3      	str	r3, [r4, #12]
 801625a:	e66c      	b.n	8015f36 <_scanf_float+0x82>
 801625c:	9b04      	ldr	r3, [sp, #16]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d0e4      	beq.n	801622c <_scanf_float+0x378>
 8016262:	9905      	ldr	r1, [sp, #20]
 8016264:	230a      	movs	r3, #10
 8016266:	462a      	mov	r2, r5
 8016268:	3101      	adds	r1, #1
 801626a:	4640      	mov	r0, r8
 801626c:	f001 f8e0 	bl	8017430 <_strtol_r>
 8016270:	9b04      	ldr	r3, [sp, #16]
 8016272:	9e05      	ldr	r6, [sp, #20]
 8016274:	1ac2      	subs	r2, r0, r3
 8016276:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801627a:	429e      	cmp	r6, r3
 801627c:	bf28      	it	cs
 801627e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016282:	4912      	ldr	r1, [pc, #72]	; (80162cc <_scanf_float+0x418>)
 8016284:	4630      	mov	r0, r6
 8016286:	f000 f977 	bl	8016578 <siprintf>
 801628a:	e7cf      	b.n	801622c <_scanf_float+0x378>
 801628c:	f011 0f04 	tst.w	r1, #4
 8016290:	9903      	ldr	r1, [sp, #12]
 8016292:	600a      	str	r2, [r1, #0]
 8016294:	d1db      	bne.n	801624e <_scanf_float+0x39a>
 8016296:	f8d3 8000 	ldr.w	r8, [r3]
 801629a:	ee10 2a10 	vmov	r2, s0
 801629e:	ee10 0a10 	vmov	r0, s0
 80162a2:	463b      	mov	r3, r7
 80162a4:	4639      	mov	r1, r7
 80162a6:	f7ea fc51 	bl	8000b4c <__aeabi_dcmpun>
 80162aa:	b128      	cbz	r0, 80162b8 <_scanf_float+0x404>
 80162ac:	4808      	ldr	r0, [pc, #32]	; (80162d0 <_scanf_float+0x41c>)
 80162ae:	f000 f919 	bl	80164e4 <nanf>
 80162b2:	ed88 0a00 	vstr	s0, [r8]
 80162b6:	e7cd      	b.n	8016254 <_scanf_float+0x3a0>
 80162b8:	4630      	mov	r0, r6
 80162ba:	4639      	mov	r1, r7
 80162bc:	f7ea fca4 	bl	8000c08 <__aeabi_d2f>
 80162c0:	f8c8 0000 	str.w	r0, [r8]
 80162c4:	e7c6      	b.n	8016254 <_scanf_float+0x3a0>
 80162c6:	2500      	movs	r5, #0
 80162c8:	e635      	b.n	8015f36 <_scanf_float+0x82>
 80162ca:	bf00      	nop
 80162cc:	0801c59a 	.word	0x0801c59a
 80162d0:	0801c62b 	.word	0x0801c62b

080162d4 <iprintf>:
 80162d4:	b40f      	push	{r0, r1, r2, r3}
 80162d6:	4b0a      	ldr	r3, [pc, #40]	; (8016300 <iprintf+0x2c>)
 80162d8:	b513      	push	{r0, r1, r4, lr}
 80162da:	681c      	ldr	r4, [r3, #0]
 80162dc:	b124      	cbz	r4, 80162e8 <iprintf+0x14>
 80162de:	69a3      	ldr	r3, [r4, #24]
 80162e0:	b913      	cbnz	r3, 80162e8 <iprintf+0x14>
 80162e2:	4620      	mov	r0, r4
 80162e4:	f7fe ffd4 	bl	8015290 <__sinit>
 80162e8:	ab05      	add	r3, sp, #20
 80162ea:	9a04      	ldr	r2, [sp, #16]
 80162ec:	68a1      	ldr	r1, [r4, #8]
 80162ee:	9301      	str	r3, [sp, #4]
 80162f0:	4620      	mov	r0, r4
 80162f2:	f003 fdfd 	bl	8019ef0 <_vfiprintf_r>
 80162f6:	b002      	add	sp, #8
 80162f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162fc:	b004      	add	sp, #16
 80162fe:	4770      	bx	lr
 8016300:	20000090 	.word	0x20000090

08016304 <_puts_r>:
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	460e      	mov	r6, r1
 8016308:	4605      	mov	r5, r0
 801630a:	b118      	cbz	r0, 8016314 <_puts_r+0x10>
 801630c:	6983      	ldr	r3, [r0, #24]
 801630e:	b90b      	cbnz	r3, 8016314 <_puts_r+0x10>
 8016310:	f7fe ffbe 	bl	8015290 <__sinit>
 8016314:	69ab      	ldr	r3, [r5, #24]
 8016316:	68ac      	ldr	r4, [r5, #8]
 8016318:	b913      	cbnz	r3, 8016320 <_puts_r+0x1c>
 801631a:	4628      	mov	r0, r5
 801631c:	f7fe ffb8 	bl	8015290 <__sinit>
 8016320:	4b2c      	ldr	r3, [pc, #176]	; (80163d4 <_puts_r+0xd0>)
 8016322:	429c      	cmp	r4, r3
 8016324:	d120      	bne.n	8016368 <_puts_r+0x64>
 8016326:	686c      	ldr	r4, [r5, #4]
 8016328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801632a:	07db      	lsls	r3, r3, #31
 801632c:	d405      	bmi.n	801633a <_puts_r+0x36>
 801632e:	89a3      	ldrh	r3, [r4, #12]
 8016330:	0598      	lsls	r0, r3, #22
 8016332:	d402      	bmi.n	801633a <_puts_r+0x36>
 8016334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016336:	f7ff f86e 	bl	8015416 <__retarget_lock_acquire_recursive>
 801633a:	89a3      	ldrh	r3, [r4, #12]
 801633c:	0719      	lsls	r1, r3, #28
 801633e:	d51d      	bpl.n	801637c <_puts_r+0x78>
 8016340:	6923      	ldr	r3, [r4, #16]
 8016342:	b1db      	cbz	r3, 801637c <_puts_r+0x78>
 8016344:	3e01      	subs	r6, #1
 8016346:	68a3      	ldr	r3, [r4, #8]
 8016348:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801634c:	3b01      	subs	r3, #1
 801634e:	60a3      	str	r3, [r4, #8]
 8016350:	bb39      	cbnz	r1, 80163a2 <_puts_r+0x9e>
 8016352:	2b00      	cmp	r3, #0
 8016354:	da38      	bge.n	80163c8 <_puts_r+0xc4>
 8016356:	4622      	mov	r2, r4
 8016358:	210a      	movs	r1, #10
 801635a:	4628      	mov	r0, r5
 801635c:	f001 f92c 	bl	80175b8 <__swbuf_r>
 8016360:	3001      	adds	r0, #1
 8016362:	d011      	beq.n	8016388 <_puts_r+0x84>
 8016364:	250a      	movs	r5, #10
 8016366:	e011      	b.n	801638c <_puts_r+0x88>
 8016368:	4b1b      	ldr	r3, [pc, #108]	; (80163d8 <_puts_r+0xd4>)
 801636a:	429c      	cmp	r4, r3
 801636c:	d101      	bne.n	8016372 <_puts_r+0x6e>
 801636e:	68ac      	ldr	r4, [r5, #8]
 8016370:	e7da      	b.n	8016328 <_puts_r+0x24>
 8016372:	4b1a      	ldr	r3, [pc, #104]	; (80163dc <_puts_r+0xd8>)
 8016374:	429c      	cmp	r4, r3
 8016376:	bf08      	it	eq
 8016378:	68ec      	ldreq	r4, [r5, #12]
 801637a:	e7d5      	b.n	8016328 <_puts_r+0x24>
 801637c:	4621      	mov	r1, r4
 801637e:	4628      	mov	r0, r5
 8016380:	f001 f97e 	bl	8017680 <__swsetup_r>
 8016384:	2800      	cmp	r0, #0
 8016386:	d0dd      	beq.n	8016344 <_puts_r+0x40>
 8016388:	f04f 35ff 	mov.w	r5, #4294967295
 801638c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801638e:	07da      	lsls	r2, r3, #31
 8016390:	d405      	bmi.n	801639e <_puts_r+0x9a>
 8016392:	89a3      	ldrh	r3, [r4, #12]
 8016394:	059b      	lsls	r3, r3, #22
 8016396:	d402      	bmi.n	801639e <_puts_r+0x9a>
 8016398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801639a:	f7ff f83d 	bl	8015418 <__retarget_lock_release_recursive>
 801639e:	4628      	mov	r0, r5
 80163a0:	bd70      	pop	{r4, r5, r6, pc}
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	da04      	bge.n	80163b0 <_puts_r+0xac>
 80163a6:	69a2      	ldr	r2, [r4, #24]
 80163a8:	429a      	cmp	r2, r3
 80163aa:	dc06      	bgt.n	80163ba <_puts_r+0xb6>
 80163ac:	290a      	cmp	r1, #10
 80163ae:	d004      	beq.n	80163ba <_puts_r+0xb6>
 80163b0:	6823      	ldr	r3, [r4, #0]
 80163b2:	1c5a      	adds	r2, r3, #1
 80163b4:	6022      	str	r2, [r4, #0]
 80163b6:	7019      	strb	r1, [r3, #0]
 80163b8:	e7c5      	b.n	8016346 <_puts_r+0x42>
 80163ba:	4622      	mov	r2, r4
 80163bc:	4628      	mov	r0, r5
 80163be:	f001 f8fb 	bl	80175b8 <__swbuf_r>
 80163c2:	3001      	adds	r0, #1
 80163c4:	d1bf      	bne.n	8016346 <_puts_r+0x42>
 80163c6:	e7df      	b.n	8016388 <_puts_r+0x84>
 80163c8:	6823      	ldr	r3, [r4, #0]
 80163ca:	250a      	movs	r5, #10
 80163cc:	1c5a      	adds	r2, r3, #1
 80163ce:	6022      	str	r2, [r4, #0]
 80163d0:	701d      	strb	r5, [r3, #0]
 80163d2:	e7db      	b.n	801638c <_puts_r+0x88>
 80163d4:	0801c524 	.word	0x0801c524
 80163d8:	0801c544 	.word	0x0801c544
 80163dc:	0801c504 	.word	0x0801c504

080163e0 <puts>:
 80163e0:	4b02      	ldr	r3, [pc, #8]	; (80163ec <puts+0xc>)
 80163e2:	4601      	mov	r1, r0
 80163e4:	6818      	ldr	r0, [r3, #0]
 80163e6:	f7ff bf8d 	b.w	8016304 <_puts_r>
 80163ea:	bf00      	nop
 80163ec:	20000090 	.word	0x20000090

080163f0 <cleanup_glue>:
 80163f0:	b538      	push	{r3, r4, r5, lr}
 80163f2:	460c      	mov	r4, r1
 80163f4:	6809      	ldr	r1, [r1, #0]
 80163f6:	4605      	mov	r5, r0
 80163f8:	b109      	cbz	r1, 80163fe <cleanup_glue+0xe>
 80163fa:	f7ff fff9 	bl	80163f0 <cleanup_glue>
 80163fe:	4621      	mov	r1, r4
 8016400:	4628      	mov	r0, r5
 8016402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016406:	f7ff b841 	b.w	801548c <_free_r>
	...

0801640c <_reclaim_reent>:
 801640c:	4b2c      	ldr	r3, [pc, #176]	; (80164c0 <_reclaim_reent+0xb4>)
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	4283      	cmp	r3, r0
 8016412:	b570      	push	{r4, r5, r6, lr}
 8016414:	4604      	mov	r4, r0
 8016416:	d051      	beq.n	80164bc <_reclaim_reent+0xb0>
 8016418:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801641a:	b143      	cbz	r3, 801642e <_reclaim_reent+0x22>
 801641c:	68db      	ldr	r3, [r3, #12]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d14a      	bne.n	80164b8 <_reclaim_reent+0xac>
 8016422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016424:	6819      	ldr	r1, [r3, #0]
 8016426:	b111      	cbz	r1, 801642e <_reclaim_reent+0x22>
 8016428:	4620      	mov	r0, r4
 801642a:	f7ff f82f 	bl	801548c <_free_r>
 801642e:	6961      	ldr	r1, [r4, #20]
 8016430:	b111      	cbz	r1, 8016438 <_reclaim_reent+0x2c>
 8016432:	4620      	mov	r0, r4
 8016434:	f7ff f82a 	bl	801548c <_free_r>
 8016438:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801643a:	b111      	cbz	r1, 8016442 <_reclaim_reent+0x36>
 801643c:	4620      	mov	r0, r4
 801643e:	f7ff f825 	bl	801548c <_free_r>
 8016442:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016444:	b111      	cbz	r1, 801644c <_reclaim_reent+0x40>
 8016446:	4620      	mov	r0, r4
 8016448:	f7ff f820 	bl	801548c <_free_r>
 801644c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801644e:	b111      	cbz	r1, 8016456 <_reclaim_reent+0x4a>
 8016450:	4620      	mov	r0, r4
 8016452:	f7ff f81b 	bl	801548c <_free_r>
 8016456:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016458:	b111      	cbz	r1, 8016460 <_reclaim_reent+0x54>
 801645a:	4620      	mov	r0, r4
 801645c:	f7ff f816 	bl	801548c <_free_r>
 8016460:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016462:	b111      	cbz	r1, 801646a <_reclaim_reent+0x5e>
 8016464:	4620      	mov	r0, r4
 8016466:	f7ff f811 	bl	801548c <_free_r>
 801646a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801646c:	b111      	cbz	r1, 8016474 <_reclaim_reent+0x68>
 801646e:	4620      	mov	r0, r4
 8016470:	f7ff f80c 	bl	801548c <_free_r>
 8016474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016476:	b111      	cbz	r1, 801647e <_reclaim_reent+0x72>
 8016478:	4620      	mov	r0, r4
 801647a:	f7ff f807 	bl	801548c <_free_r>
 801647e:	69a3      	ldr	r3, [r4, #24]
 8016480:	b1e3      	cbz	r3, 80164bc <_reclaim_reent+0xb0>
 8016482:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016484:	4620      	mov	r0, r4
 8016486:	4798      	blx	r3
 8016488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801648a:	b1b9      	cbz	r1, 80164bc <_reclaim_reent+0xb0>
 801648c:	4620      	mov	r0, r4
 801648e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016492:	f7ff bfad 	b.w	80163f0 <cleanup_glue>
 8016496:	5949      	ldr	r1, [r1, r5]
 8016498:	b941      	cbnz	r1, 80164ac <_reclaim_reent+0xa0>
 801649a:	3504      	adds	r5, #4
 801649c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801649e:	2d80      	cmp	r5, #128	; 0x80
 80164a0:	68d9      	ldr	r1, [r3, #12]
 80164a2:	d1f8      	bne.n	8016496 <_reclaim_reent+0x8a>
 80164a4:	4620      	mov	r0, r4
 80164a6:	f7fe fff1 	bl	801548c <_free_r>
 80164aa:	e7ba      	b.n	8016422 <_reclaim_reent+0x16>
 80164ac:	680e      	ldr	r6, [r1, #0]
 80164ae:	4620      	mov	r0, r4
 80164b0:	f7fe ffec 	bl	801548c <_free_r>
 80164b4:	4631      	mov	r1, r6
 80164b6:	e7ef      	b.n	8016498 <_reclaim_reent+0x8c>
 80164b8:	2500      	movs	r5, #0
 80164ba:	e7ef      	b.n	801649c <_reclaim_reent+0x90>
 80164bc:	bd70      	pop	{r4, r5, r6, pc}
 80164be:	bf00      	nop
 80164c0:	20000090 	.word	0x20000090

080164c4 <_sbrk_r>:
 80164c4:	b538      	push	{r3, r4, r5, lr}
 80164c6:	4d06      	ldr	r5, [pc, #24]	; (80164e0 <_sbrk_r+0x1c>)
 80164c8:	2300      	movs	r3, #0
 80164ca:	4604      	mov	r4, r0
 80164cc:	4608      	mov	r0, r1
 80164ce:	602b      	str	r3, [r5, #0]
 80164d0:	f7ec fee2 	bl	8003298 <_sbrk>
 80164d4:	1c43      	adds	r3, r0, #1
 80164d6:	d102      	bne.n	80164de <_sbrk_r+0x1a>
 80164d8:	682b      	ldr	r3, [r5, #0]
 80164da:	b103      	cbz	r3, 80164de <_sbrk_r+0x1a>
 80164dc:	6023      	str	r3, [r4, #0]
 80164de:	bd38      	pop	{r3, r4, r5, pc}
 80164e0:	200071a0 	.word	0x200071a0

080164e4 <nanf>:
 80164e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80164ec <nanf+0x8>
 80164e8:	4770      	bx	lr
 80164ea:	bf00      	nop
 80164ec:	7fc00000 	.word	0x7fc00000

080164f0 <_raise_r>:
 80164f0:	291f      	cmp	r1, #31
 80164f2:	b538      	push	{r3, r4, r5, lr}
 80164f4:	4604      	mov	r4, r0
 80164f6:	460d      	mov	r5, r1
 80164f8:	d904      	bls.n	8016504 <_raise_r+0x14>
 80164fa:	2316      	movs	r3, #22
 80164fc:	6003      	str	r3, [r0, #0]
 80164fe:	f04f 30ff 	mov.w	r0, #4294967295
 8016502:	bd38      	pop	{r3, r4, r5, pc}
 8016504:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016506:	b112      	cbz	r2, 801650e <_raise_r+0x1e>
 8016508:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801650c:	b94b      	cbnz	r3, 8016522 <_raise_r+0x32>
 801650e:	4620      	mov	r0, r4
 8016510:	f000 f830 	bl	8016574 <_getpid_r>
 8016514:	462a      	mov	r2, r5
 8016516:	4601      	mov	r1, r0
 8016518:	4620      	mov	r0, r4
 801651a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801651e:	f000 b817 	b.w	8016550 <_kill_r>
 8016522:	2b01      	cmp	r3, #1
 8016524:	d00a      	beq.n	801653c <_raise_r+0x4c>
 8016526:	1c59      	adds	r1, r3, #1
 8016528:	d103      	bne.n	8016532 <_raise_r+0x42>
 801652a:	2316      	movs	r3, #22
 801652c:	6003      	str	r3, [r0, #0]
 801652e:	2001      	movs	r0, #1
 8016530:	e7e7      	b.n	8016502 <_raise_r+0x12>
 8016532:	2400      	movs	r4, #0
 8016534:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016538:	4628      	mov	r0, r5
 801653a:	4798      	blx	r3
 801653c:	2000      	movs	r0, #0
 801653e:	e7e0      	b.n	8016502 <_raise_r+0x12>

08016540 <raise>:
 8016540:	4b02      	ldr	r3, [pc, #8]	; (801654c <raise+0xc>)
 8016542:	4601      	mov	r1, r0
 8016544:	6818      	ldr	r0, [r3, #0]
 8016546:	f7ff bfd3 	b.w	80164f0 <_raise_r>
 801654a:	bf00      	nop
 801654c:	20000090 	.word	0x20000090

08016550 <_kill_r>:
 8016550:	b538      	push	{r3, r4, r5, lr}
 8016552:	4d07      	ldr	r5, [pc, #28]	; (8016570 <_kill_r+0x20>)
 8016554:	2300      	movs	r3, #0
 8016556:	4604      	mov	r4, r0
 8016558:	4608      	mov	r0, r1
 801655a:	4611      	mov	r1, r2
 801655c:	602b      	str	r3, [r5, #0]
 801655e:	f7ec fe13 	bl	8003188 <_kill>
 8016562:	1c43      	adds	r3, r0, #1
 8016564:	d102      	bne.n	801656c <_kill_r+0x1c>
 8016566:	682b      	ldr	r3, [r5, #0]
 8016568:	b103      	cbz	r3, 801656c <_kill_r+0x1c>
 801656a:	6023      	str	r3, [r4, #0]
 801656c:	bd38      	pop	{r3, r4, r5, pc}
 801656e:	bf00      	nop
 8016570:	200071a0 	.word	0x200071a0

08016574 <_getpid_r>:
 8016574:	f7ec be00 	b.w	8003178 <_getpid>

08016578 <siprintf>:
 8016578:	b40e      	push	{r1, r2, r3}
 801657a:	b500      	push	{lr}
 801657c:	b09c      	sub	sp, #112	; 0x70
 801657e:	ab1d      	add	r3, sp, #116	; 0x74
 8016580:	9002      	str	r0, [sp, #8]
 8016582:	9006      	str	r0, [sp, #24]
 8016584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016588:	4809      	ldr	r0, [pc, #36]	; (80165b0 <siprintf+0x38>)
 801658a:	9107      	str	r1, [sp, #28]
 801658c:	9104      	str	r1, [sp, #16]
 801658e:	4909      	ldr	r1, [pc, #36]	; (80165b4 <siprintf+0x3c>)
 8016590:	f853 2b04 	ldr.w	r2, [r3], #4
 8016594:	9105      	str	r1, [sp, #20]
 8016596:	6800      	ldr	r0, [r0, #0]
 8016598:	9301      	str	r3, [sp, #4]
 801659a:	a902      	add	r1, sp, #8
 801659c:	f003 f9ac 	bl	80198f8 <_svfiprintf_r>
 80165a0:	9b02      	ldr	r3, [sp, #8]
 80165a2:	2200      	movs	r2, #0
 80165a4:	701a      	strb	r2, [r3, #0]
 80165a6:	b01c      	add	sp, #112	; 0x70
 80165a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80165ac:	b003      	add	sp, #12
 80165ae:	4770      	bx	lr
 80165b0:	20000090 	.word	0x20000090
 80165b4:	ffff0208 	.word	0xffff0208

080165b8 <siscanf>:
 80165b8:	b40e      	push	{r1, r2, r3}
 80165ba:	b510      	push	{r4, lr}
 80165bc:	b09f      	sub	sp, #124	; 0x7c
 80165be:	ac21      	add	r4, sp, #132	; 0x84
 80165c0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80165c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80165c8:	9201      	str	r2, [sp, #4]
 80165ca:	f8ad 101c 	strh.w	r1, [sp, #28]
 80165ce:	9004      	str	r0, [sp, #16]
 80165d0:	9008      	str	r0, [sp, #32]
 80165d2:	f7e9 fe0d 	bl	80001f0 <strlen>
 80165d6:	4b0c      	ldr	r3, [pc, #48]	; (8016608 <siscanf+0x50>)
 80165d8:	9005      	str	r0, [sp, #20]
 80165da:	9009      	str	r0, [sp, #36]	; 0x24
 80165dc:	930d      	str	r3, [sp, #52]	; 0x34
 80165de:	480b      	ldr	r0, [pc, #44]	; (801660c <siscanf+0x54>)
 80165e0:	9a01      	ldr	r2, [sp, #4]
 80165e2:	6800      	ldr	r0, [r0, #0]
 80165e4:	9403      	str	r4, [sp, #12]
 80165e6:	2300      	movs	r3, #0
 80165e8:	9311      	str	r3, [sp, #68]	; 0x44
 80165ea:	9316      	str	r3, [sp, #88]	; 0x58
 80165ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80165f4:	a904      	add	r1, sp, #16
 80165f6:	4623      	mov	r3, r4
 80165f8:	f003 fad8 	bl	8019bac <__ssvfiscanf_r>
 80165fc:	b01f      	add	sp, #124	; 0x7c
 80165fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016602:	b003      	add	sp, #12
 8016604:	4770      	bx	lr
 8016606:	bf00      	nop
 8016608:	08016633 	.word	0x08016633
 801660c:	20000090 	.word	0x20000090

08016610 <__sread>:
 8016610:	b510      	push	{r4, lr}
 8016612:	460c      	mov	r4, r1
 8016614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016618:	f003 fee6 	bl	801a3e8 <_read_r>
 801661c:	2800      	cmp	r0, #0
 801661e:	bfab      	itete	ge
 8016620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016622:	89a3      	ldrhlt	r3, [r4, #12]
 8016624:	181b      	addge	r3, r3, r0
 8016626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801662a:	bfac      	ite	ge
 801662c:	6563      	strge	r3, [r4, #84]	; 0x54
 801662e:	81a3      	strhlt	r3, [r4, #12]
 8016630:	bd10      	pop	{r4, pc}

08016632 <__seofread>:
 8016632:	2000      	movs	r0, #0
 8016634:	4770      	bx	lr

08016636 <__swrite>:
 8016636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801663a:	461f      	mov	r7, r3
 801663c:	898b      	ldrh	r3, [r1, #12]
 801663e:	05db      	lsls	r3, r3, #23
 8016640:	4605      	mov	r5, r0
 8016642:	460c      	mov	r4, r1
 8016644:	4616      	mov	r6, r2
 8016646:	d505      	bpl.n	8016654 <__swrite+0x1e>
 8016648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801664c:	2302      	movs	r3, #2
 801664e:	2200      	movs	r2, #0
 8016650:	f002 fb72 	bl	8018d38 <_lseek_r>
 8016654:	89a3      	ldrh	r3, [r4, #12]
 8016656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801665a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801665e:	81a3      	strh	r3, [r4, #12]
 8016660:	4632      	mov	r2, r6
 8016662:	463b      	mov	r3, r7
 8016664:	4628      	mov	r0, r5
 8016666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801666a:	f000 bff7 	b.w	801765c <_write_r>

0801666e <__sseek>:
 801666e:	b510      	push	{r4, lr}
 8016670:	460c      	mov	r4, r1
 8016672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016676:	f002 fb5f 	bl	8018d38 <_lseek_r>
 801667a:	1c43      	adds	r3, r0, #1
 801667c:	89a3      	ldrh	r3, [r4, #12]
 801667e:	bf15      	itete	ne
 8016680:	6560      	strne	r0, [r4, #84]	; 0x54
 8016682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801668a:	81a3      	strheq	r3, [r4, #12]
 801668c:	bf18      	it	ne
 801668e:	81a3      	strhne	r3, [r4, #12]
 8016690:	bd10      	pop	{r4, pc}

08016692 <__sclose>:
 8016692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016696:	f001 b87f 	b.w	8017798 <_close_r>

0801669a <strcpy>:
 801669a:	4603      	mov	r3, r0
 801669c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80166a0:	f803 2b01 	strb.w	r2, [r3], #1
 80166a4:	2a00      	cmp	r2, #0
 80166a6:	d1f9      	bne.n	801669c <strcpy+0x2>
 80166a8:	4770      	bx	lr

080166aa <strncmp>:
 80166aa:	b510      	push	{r4, lr}
 80166ac:	b16a      	cbz	r2, 80166ca <strncmp+0x20>
 80166ae:	3901      	subs	r1, #1
 80166b0:	1884      	adds	r4, r0, r2
 80166b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80166b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80166ba:	4293      	cmp	r3, r2
 80166bc:	d103      	bne.n	80166c6 <strncmp+0x1c>
 80166be:	42a0      	cmp	r0, r4
 80166c0:	d001      	beq.n	80166c6 <strncmp+0x1c>
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d1f5      	bne.n	80166b2 <strncmp+0x8>
 80166c6:	1a98      	subs	r0, r3, r2
 80166c8:	bd10      	pop	{r4, pc}
 80166ca:	4610      	mov	r0, r2
 80166cc:	e7fc      	b.n	80166c8 <strncmp+0x1e>

080166ce <sulp>:
 80166ce:	b570      	push	{r4, r5, r6, lr}
 80166d0:	4604      	mov	r4, r0
 80166d2:	460d      	mov	r5, r1
 80166d4:	ec45 4b10 	vmov	d0, r4, r5
 80166d8:	4616      	mov	r6, r2
 80166da:	f002 ff2d 	bl	8019538 <__ulp>
 80166de:	ec51 0b10 	vmov	r0, r1, d0
 80166e2:	b17e      	cbz	r6, 8016704 <sulp+0x36>
 80166e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80166e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	dd09      	ble.n	8016704 <sulp+0x36>
 80166f0:	051b      	lsls	r3, r3, #20
 80166f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80166f6:	2400      	movs	r4, #0
 80166f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80166fc:	4622      	mov	r2, r4
 80166fe:	462b      	mov	r3, r5
 8016700:	f7e9 ff8a 	bl	8000618 <__aeabi_dmul>
 8016704:	bd70      	pop	{r4, r5, r6, pc}
	...

08016708 <_strtod_l>:
 8016708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801670c:	b0a3      	sub	sp, #140	; 0x8c
 801670e:	461f      	mov	r7, r3
 8016710:	2300      	movs	r3, #0
 8016712:	931e      	str	r3, [sp, #120]	; 0x78
 8016714:	4ba4      	ldr	r3, [pc, #656]	; (80169a8 <_strtod_l+0x2a0>)
 8016716:	9219      	str	r2, [sp, #100]	; 0x64
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	9307      	str	r3, [sp, #28]
 801671c:	4604      	mov	r4, r0
 801671e:	4618      	mov	r0, r3
 8016720:	4688      	mov	r8, r1
 8016722:	f7e9 fd65 	bl	80001f0 <strlen>
 8016726:	f04f 0a00 	mov.w	sl, #0
 801672a:	4605      	mov	r5, r0
 801672c:	f04f 0b00 	mov.w	fp, #0
 8016730:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016734:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016736:	781a      	ldrb	r2, [r3, #0]
 8016738:	2a2b      	cmp	r2, #43	; 0x2b
 801673a:	d04c      	beq.n	80167d6 <_strtod_l+0xce>
 801673c:	d839      	bhi.n	80167b2 <_strtod_l+0xaa>
 801673e:	2a0d      	cmp	r2, #13
 8016740:	d832      	bhi.n	80167a8 <_strtod_l+0xa0>
 8016742:	2a08      	cmp	r2, #8
 8016744:	d832      	bhi.n	80167ac <_strtod_l+0xa4>
 8016746:	2a00      	cmp	r2, #0
 8016748:	d03c      	beq.n	80167c4 <_strtod_l+0xbc>
 801674a:	2300      	movs	r3, #0
 801674c:	930e      	str	r3, [sp, #56]	; 0x38
 801674e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016750:	7833      	ldrb	r3, [r6, #0]
 8016752:	2b30      	cmp	r3, #48	; 0x30
 8016754:	f040 80b4 	bne.w	80168c0 <_strtod_l+0x1b8>
 8016758:	7873      	ldrb	r3, [r6, #1]
 801675a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801675e:	2b58      	cmp	r3, #88	; 0x58
 8016760:	d16c      	bne.n	801683c <_strtod_l+0x134>
 8016762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016764:	9301      	str	r3, [sp, #4]
 8016766:	ab1e      	add	r3, sp, #120	; 0x78
 8016768:	9702      	str	r7, [sp, #8]
 801676a:	9300      	str	r3, [sp, #0]
 801676c:	4a8f      	ldr	r2, [pc, #572]	; (80169ac <_strtod_l+0x2a4>)
 801676e:	ab1f      	add	r3, sp, #124	; 0x7c
 8016770:	a91d      	add	r1, sp, #116	; 0x74
 8016772:	4620      	mov	r0, r4
 8016774:	f001 ffd4 	bl	8018720 <__gethex>
 8016778:	f010 0707 	ands.w	r7, r0, #7
 801677c:	4605      	mov	r5, r0
 801677e:	d005      	beq.n	801678c <_strtod_l+0x84>
 8016780:	2f06      	cmp	r7, #6
 8016782:	d12a      	bne.n	80167da <_strtod_l+0xd2>
 8016784:	3601      	adds	r6, #1
 8016786:	2300      	movs	r3, #0
 8016788:	961d      	str	r6, [sp, #116]	; 0x74
 801678a:	930e      	str	r3, [sp, #56]	; 0x38
 801678c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801678e:	2b00      	cmp	r3, #0
 8016790:	f040 8596 	bne.w	80172c0 <_strtod_l+0xbb8>
 8016794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016796:	b1db      	cbz	r3, 80167d0 <_strtod_l+0xc8>
 8016798:	4652      	mov	r2, sl
 801679a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801679e:	ec43 2b10 	vmov	d0, r2, r3
 80167a2:	b023      	add	sp, #140	; 0x8c
 80167a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167a8:	2a20      	cmp	r2, #32
 80167aa:	d1ce      	bne.n	801674a <_strtod_l+0x42>
 80167ac:	3301      	adds	r3, #1
 80167ae:	931d      	str	r3, [sp, #116]	; 0x74
 80167b0:	e7c0      	b.n	8016734 <_strtod_l+0x2c>
 80167b2:	2a2d      	cmp	r2, #45	; 0x2d
 80167b4:	d1c9      	bne.n	801674a <_strtod_l+0x42>
 80167b6:	2201      	movs	r2, #1
 80167b8:	920e      	str	r2, [sp, #56]	; 0x38
 80167ba:	1c5a      	adds	r2, r3, #1
 80167bc:	921d      	str	r2, [sp, #116]	; 0x74
 80167be:	785b      	ldrb	r3, [r3, #1]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d1c4      	bne.n	801674e <_strtod_l+0x46>
 80167c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80167c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	f040 8576 	bne.w	80172bc <_strtod_l+0xbb4>
 80167d0:	4652      	mov	r2, sl
 80167d2:	465b      	mov	r3, fp
 80167d4:	e7e3      	b.n	801679e <_strtod_l+0x96>
 80167d6:	2200      	movs	r2, #0
 80167d8:	e7ee      	b.n	80167b8 <_strtod_l+0xb0>
 80167da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80167dc:	b13a      	cbz	r2, 80167ee <_strtod_l+0xe6>
 80167de:	2135      	movs	r1, #53	; 0x35
 80167e0:	a820      	add	r0, sp, #128	; 0x80
 80167e2:	f002 ffb4 	bl	801974e <__copybits>
 80167e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80167e8:	4620      	mov	r0, r4
 80167ea:	f002 fb79 	bl	8018ee0 <_Bfree>
 80167ee:	3f01      	subs	r7, #1
 80167f0:	2f05      	cmp	r7, #5
 80167f2:	d807      	bhi.n	8016804 <_strtod_l+0xfc>
 80167f4:	e8df f007 	tbb	[pc, r7]
 80167f8:	1d180b0e 	.word	0x1d180b0e
 80167fc:	030e      	.short	0x030e
 80167fe:	f04f 0b00 	mov.w	fp, #0
 8016802:	46da      	mov	sl, fp
 8016804:	0728      	lsls	r0, r5, #28
 8016806:	d5c1      	bpl.n	801678c <_strtod_l+0x84>
 8016808:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801680c:	e7be      	b.n	801678c <_strtod_l+0x84>
 801680e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016812:	e7f7      	b.n	8016804 <_strtod_l+0xfc>
 8016814:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016818:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801681a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801681e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016822:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016826:	e7ed      	b.n	8016804 <_strtod_l+0xfc>
 8016828:	f8df b184 	ldr.w	fp, [pc, #388]	; 80169b0 <_strtod_l+0x2a8>
 801682c:	f04f 0a00 	mov.w	sl, #0
 8016830:	e7e8      	b.n	8016804 <_strtod_l+0xfc>
 8016832:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016836:	f04f 3aff 	mov.w	sl, #4294967295
 801683a:	e7e3      	b.n	8016804 <_strtod_l+0xfc>
 801683c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801683e:	1c5a      	adds	r2, r3, #1
 8016840:	921d      	str	r2, [sp, #116]	; 0x74
 8016842:	785b      	ldrb	r3, [r3, #1]
 8016844:	2b30      	cmp	r3, #48	; 0x30
 8016846:	d0f9      	beq.n	801683c <_strtod_l+0x134>
 8016848:	2b00      	cmp	r3, #0
 801684a:	d09f      	beq.n	801678c <_strtod_l+0x84>
 801684c:	2301      	movs	r3, #1
 801684e:	f04f 0900 	mov.w	r9, #0
 8016852:	9304      	str	r3, [sp, #16]
 8016854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016856:	930a      	str	r3, [sp, #40]	; 0x28
 8016858:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801685c:	464f      	mov	r7, r9
 801685e:	220a      	movs	r2, #10
 8016860:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016862:	7806      	ldrb	r6, [r0, #0]
 8016864:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016868:	b2d9      	uxtb	r1, r3
 801686a:	2909      	cmp	r1, #9
 801686c:	d92a      	bls.n	80168c4 <_strtod_l+0x1bc>
 801686e:	9907      	ldr	r1, [sp, #28]
 8016870:	462a      	mov	r2, r5
 8016872:	f7ff ff1a 	bl	80166aa <strncmp>
 8016876:	b398      	cbz	r0, 80168e0 <_strtod_l+0x1d8>
 8016878:	2000      	movs	r0, #0
 801687a:	4633      	mov	r3, r6
 801687c:	463d      	mov	r5, r7
 801687e:	9007      	str	r0, [sp, #28]
 8016880:	4602      	mov	r2, r0
 8016882:	2b65      	cmp	r3, #101	; 0x65
 8016884:	d001      	beq.n	801688a <_strtod_l+0x182>
 8016886:	2b45      	cmp	r3, #69	; 0x45
 8016888:	d118      	bne.n	80168bc <_strtod_l+0x1b4>
 801688a:	b91d      	cbnz	r5, 8016894 <_strtod_l+0x18c>
 801688c:	9b04      	ldr	r3, [sp, #16]
 801688e:	4303      	orrs	r3, r0
 8016890:	d098      	beq.n	80167c4 <_strtod_l+0xbc>
 8016892:	2500      	movs	r5, #0
 8016894:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016898:	f108 0301 	add.w	r3, r8, #1
 801689c:	931d      	str	r3, [sp, #116]	; 0x74
 801689e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80168a2:	2b2b      	cmp	r3, #43	; 0x2b
 80168a4:	d075      	beq.n	8016992 <_strtod_l+0x28a>
 80168a6:	2b2d      	cmp	r3, #45	; 0x2d
 80168a8:	d07b      	beq.n	80169a2 <_strtod_l+0x29a>
 80168aa:	f04f 0c00 	mov.w	ip, #0
 80168ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80168b2:	2909      	cmp	r1, #9
 80168b4:	f240 8082 	bls.w	80169bc <_strtod_l+0x2b4>
 80168b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80168bc:	2600      	movs	r6, #0
 80168be:	e09d      	b.n	80169fc <_strtod_l+0x2f4>
 80168c0:	2300      	movs	r3, #0
 80168c2:	e7c4      	b.n	801684e <_strtod_l+0x146>
 80168c4:	2f08      	cmp	r7, #8
 80168c6:	bfd8      	it	le
 80168c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80168ca:	f100 0001 	add.w	r0, r0, #1
 80168ce:	bfda      	itte	le
 80168d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80168d4:	9309      	strle	r3, [sp, #36]	; 0x24
 80168d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80168da:	3701      	adds	r7, #1
 80168dc:	901d      	str	r0, [sp, #116]	; 0x74
 80168de:	e7bf      	b.n	8016860 <_strtod_l+0x158>
 80168e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80168e2:	195a      	adds	r2, r3, r5
 80168e4:	921d      	str	r2, [sp, #116]	; 0x74
 80168e6:	5d5b      	ldrb	r3, [r3, r5]
 80168e8:	2f00      	cmp	r7, #0
 80168ea:	d037      	beq.n	801695c <_strtod_l+0x254>
 80168ec:	9007      	str	r0, [sp, #28]
 80168ee:	463d      	mov	r5, r7
 80168f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80168f4:	2a09      	cmp	r2, #9
 80168f6:	d912      	bls.n	801691e <_strtod_l+0x216>
 80168f8:	2201      	movs	r2, #1
 80168fa:	e7c2      	b.n	8016882 <_strtod_l+0x17a>
 80168fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80168fe:	1c5a      	adds	r2, r3, #1
 8016900:	921d      	str	r2, [sp, #116]	; 0x74
 8016902:	785b      	ldrb	r3, [r3, #1]
 8016904:	3001      	adds	r0, #1
 8016906:	2b30      	cmp	r3, #48	; 0x30
 8016908:	d0f8      	beq.n	80168fc <_strtod_l+0x1f4>
 801690a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801690e:	2a08      	cmp	r2, #8
 8016910:	f200 84db 	bhi.w	80172ca <_strtod_l+0xbc2>
 8016914:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016916:	9007      	str	r0, [sp, #28]
 8016918:	2000      	movs	r0, #0
 801691a:	920a      	str	r2, [sp, #40]	; 0x28
 801691c:	4605      	mov	r5, r0
 801691e:	3b30      	subs	r3, #48	; 0x30
 8016920:	f100 0201 	add.w	r2, r0, #1
 8016924:	d014      	beq.n	8016950 <_strtod_l+0x248>
 8016926:	9907      	ldr	r1, [sp, #28]
 8016928:	4411      	add	r1, r2
 801692a:	9107      	str	r1, [sp, #28]
 801692c:	462a      	mov	r2, r5
 801692e:	eb00 0e05 	add.w	lr, r0, r5
 8016932:	210a      	movs	r1, #10
 8016934:	4572      	cmp	r2, lr
 8016936:	d113      	bne.n	8016960 <_strtod_l+0x258>
 8016938:	182a      	adds	r2, r5, r0
 801693a:	2a08      	cmp	r2, #8
 801693c:	f105 0501 	add.w	r5, r5, #1
 8016940:	4405      	add	r5, r0
 8016942:	dc1c      	bgt.n	801697e <_strtod_l+0x276>
 8016944:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016946:	220a      	movs	r2, #10
 8016948:	fb02 3301 	mla	r3, r2, r1, r3
 801694c:	9309      	str	r3, [sp, #36]	; 0x24
 801694e:	2200      	movs	r2, #0
 8016950:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016952:	1c59      	adds	r1, r3, #1
 8016954:	911d      	str	r1, [sp, #116]	; 0x74
 8016956:	785b      	ldrb	r3, [r3, #1]
 8016958:	4610      	mov	r0, r2
 801695a:	e7c9      	b.n	80168f0 <_strtod_l+0x1e8>
 801695c:	4638      	mov	r0, r7
 801695e:	e7d2      	b.n	8016906 <_strtod_l+0x1fe>
 8016960:	2a08      	cmp	r2, #8
 8016962:	dc04      	bgt.n	801696e <_strtod_l+0x266>
 8016964:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016966:	434e      	muls	r6, r1
 8016968:	9609      	str	r6, [sp, #36]	; 0x24
 801696a:	3201      	adds	r2, #1
 801696c:	e7e2      	b.n	8016934 <_strtod_l+0x22c>
 801696e:	f102 0c01 	add.w	ip, r2, #1
 8016972:	f1bc 0f10 	cmp.w	ip, #16
 8016976:	bfd8      	it	le
 8016978:	fb01 f909 	mulle.w	r9, r1, r9
 801697c:	e7f5      	b.n	801696a <_strtod_l+0x262>
 801697e:	2d10      	cmp	r5, #16
 8016980:	bfdc      	itt	le
 8016982:	220a      	movle	r2, #10
 8016984:	fb02 3909 	mlale	r9, r2, r9, r3
 8016988:	e7e1      	b.n	801694e <_strtod_l+0x246>
 801698a:	2300      	movs	r3, #0
 801698c:	9307      	str	r3, [sp, #28]
 801698e:	2201      	movs	r2, #1
 8016990:	e77c      	b.n	801688c <_strtod_l+0x184>
 8016992:	f04f 0c00 	mov.w	ip, #0
 8016996:	f108 0302 	add.w	r3, r8, #2
 801699a:	931d      	str	r3, [sp, #116]	; 0x74
 801699c:	f898 3002 	ldrb.w	r3, [r8, #2]
 80169a0:	e785      	b.n	80168ae <_strtod_l+0x1a6>
 80169a2:	f04f 0c01 	mov.w	ip, #1
 80169a6:	e7f6      	b.n	8016996 <_strtod_l+0x28e>
 80169a8:	0801c72c 	.word	0x0801c72c
 80169ac:	0801c5a0 	.word	0x0801c5a0
 80169b0:	7ff00000 	.word	0x7ff00000
 80169b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80169b6:	1c59      	adds	r1, r3, #1
 80169b8:	911d      	str	r1, [sp, #116]	; 0x74
 80169ba:	785b      	ldrb	r3, [r3, #1]
 80169bc:	2b30      	cmp	r3, #48	; 0x30
 80169be:	d0f9      	beq.n	80169b4 <_strtod_l+0x2ac>
 80169c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80169c4:	2908      	cmp	r1, #8
 80169c6:	f63f af79 	bhi.w	80168bc <_strtod_l+0x1b4>
 80169ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80169ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80169d0:	9308      	str	r3, [sp, #32]
 80169d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80169d4:	1c59      	adds	r1, r3, #1
 80169d6:	911d      	str	r1, [sp, #116]	; 0x74
 80169d8:	785b      	ldrb	r3, [r3, #1]
 80169da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80169de:	2e09      	cmp	r6, #9
 80169e0:	d937      	bls.n	8016a52 <_strtod_l+0x34a>
 80169e2:	9e08      	ldr	r6, [sp, #32]
 80169e4:	1b89      	subs	r1, r1, r6
 80169e6:	2908      	cmp	r1, #8
 80169e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80169ec:	dc02      	bgt.n	80169f4 <_strtod_l+0x2ec>
 80169ee:	4576      	cmp	r6, lr
 80169f0:	bfa8      	it	ge
 80169f2:	4676      	movge	r6, lr
 80169f4:	f1bc 0f00 	cmp.w	ip, #0
 80169f8:	d000      	beq.n	80169fc <_strtod_l+0x2f4>
 80169fa:	4276      	negs	r6, r6
 80169fc:	2d00      	cmp	r5, #0
 80169fe:	d14f      	bne.n	8016aa0 <_strtod_l+0x398>
 8016a00:	9904      	ldr	r1, [sp, #16]
 8016a02:	4301      	orrs	r1, r0
 8016a04:	f47f aec2 	bne.w	801678c <_strtod_l+0x84>
 8016a08:	2a00      	cmp	r2, #0
 8016a0a:	f47f aedb 	bne.w	80167c4 <_strtod_l+0xbc>
 8016a0e:	2b69      	cmp	r3, #105	; 0x69
 8016a10:	d027      	beq.n	8016a62 <_strtod_l+0x35a>
 8016a12:	dc24      	bgt.n	8016a5e <_strtod_l+0x356>
 8016a14:	2b49      	cmp	r3, #73	; 0x49
 8016a16:	d024      	beq.n	8016a62 <_strtod_l+0x35a>
 8016a18:	2b4e      	cmp	r3, #78	; 0x4e
 8016a1a:	f47f aed3 	bne.w	80167c4 <_strtod_l+0xbc>
 8016a1e:	499e      	ldr	r1, [pc, #632]	; (8016c98 <_strtod_l+0x590>)
 8016a20:	a81d      	add	r0, sp, #116	; 0x74
 8016a22:	f002 f8d5 	bl	8018bd0 <__match>
 8016a26:	2800      	cmp	r0, #0
 8016a28:	f43f aecc 	beq.w	80167c4 <_strtod_l+0xbc>
 8016a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	2b28      	cmp	r3, #40	; 0x28
 8016a32:	d12d      	bne.n	8016a90 <_strtod_l+0x388>
 8016a34:	4999      	ldr	r1, [pc, #612]	; (8016c9c <_strtod_l+0x594>)
 8016a36:	aa20      	add	r2, sp, #128	; 0x80
 8016a38:	a81d      	add	r0, sp, #116	; 0x74
 8016a3a:	f002 f8dd 	bl	8018bf8 <__hexnan>
 8016a3e:	2805      	cmp	r0, #5
 8016a40:	d126      	bne.n	8016a90 <_strtod_l+0x388>
 8016a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a44:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016a48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016a4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016a50:	e69c      	b.n	801678c <_strtod_l+0x84>
 8016a52:	210a      	movs	r1, #10
 8016a54:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016a58:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016a5c:	e7b9      	b.n	80169d2 <_strtod_l+0x2ca>
 8016a5e:	2b6e      	cmp	r3, #110	; 0x6e
 8016a60:	e7db      	b.n	8016a1a <_strtod_l+0x312>
 8016a62:	498f      	ldr	r1, [pc, #572]	; (8016ca0 <_strtod_l+0x598>)
 8016a64:	a81d      	add	r0, sp, #116	; 0x74
 8016a66:	f002 f8b3 	bl	8018bd0 <__match>
 8016a6a:	2800      	cmp	r0, #0
 8016a6c:	f43f aeaa 	beq.w	80167c4 <_strtod_l+0xbc>
 8016a70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016a72:	498c      	ldr	r1, [pc, #560]	; (8016ca4 <_strtod_l+0x59c>)
 8016a74:	3b01      	subs	r3, #1
 8016a76:	a81d      	add	r0, sp, #116	; 0x74
 8016a78:	931d      	str	r3, [sp, #116]	; 0x74
 8016a7a:	f002 f8a9 	bl	8018bd0 <__match>
 8016a7e:	b910      	cbnz	r0, 8016a86 <_strtod_l+0x37e>
 8016a80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016a82:	3301      	adds	r3, #1
 8016a84:	931d      	str	r3, [sp, #116]	; 0x74
 8016a86:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8016cb4 <_strtod_l+0x5ac>
 8016a8a:	f04f 0a00 	mov.w	sl, #0
 8016a8e:	e67d      	b.n	801678c <_strtod_l+0x84>
 8016a90:	4885      	ldr	r0, [pc, #532]	; (8016ca8 <_strtod_l+0x5a0>)
 8016a92:	f7fe fa7d 	bl	8014f90 <nan>
 8016a96:	ed8d 0b04 	vstr	d0, [sp, #16]
 8016a9a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016a9e:	e675      	b.n	801678c <_strtod_l+0x84>
 8016aa0:	9b07      	ldr	r3, [sp, #28]
 8016aa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016aa4:	1af3      	subs	r3, r6, r3
 8016aa6:	2f00      	cmp	r7, #0
 8016aa8:	bf08      	it	eq
 8016aaa:	462f      	moveq	r7, r5
 8016aac:	2d10      	cmp	r5, #16
 8016aae:	9308      	str	r3, [sp, #32]
 8016ab0:	46a8      	mov	r8, r5
 8016ab2:	bfa8      	it	ge
 8016ab4:	f04f 0810 	movge.w	r8, #16
 8016ab8:	f7e9 fd34 	bl	8000524 <__aeabi_ui2d>
 8016abc:	2d09      	cmp	r5, #9
 8016abe:	4682      	mov	sl, r0
 8016ac0:	468b      	mov	fp, r1
 8016ac2:	dd13      	ble.n	8016aec <_strtod_l+0x3e4>
 8016ac4:	4b79      	ldr	r3, [pc, #484]	; (8016cac <_strtod_l+0x5a4>)
 8016ac6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016aca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016ace:	f7e9 fda3 	bl	8000618 <__aeabi_dmul>
 8016ad2:	4682      	mov	sl, r0
 8016ad4:	4648      	mov	r0, r9
 8016ad6:	468b      	mov	fp, r1
 8016ad8:	f7e9 fd24 	bl	8000524 <__aeabi_ui2d>
 8016adc:	4602      	mov	r2, r0
 8016ade:	460b      	mov	r3, r1
 8016ae0:	4650      	mov	r0, sl
 8016ae2:	4659      	mov	r1, fp
 8016ae4:	f7e9 fbe2 	bl	80002ac <__adddf3>
 8016ae8:	4682      	mov	sl, r0
 8016aea:	468b      	mov	fp, r1
 8016aec:	2d0f      	cmp	r5, #15
 8016aee:	dc38      	bgt.n	8016b62 <_strtod_l+0x45a>
 8016af0:	9b08      	ldr	r3, [sp, #32]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	f43f ae4a 	beq.w	801678c <_strtod_l+0x84>
 8016af8:	dd24      	ble.n	8016b44 <_strtod_l+0x43c>
 8016afa:	2b16      	cmp	r3, #22
 8016afc:	dc0b      	bgt.n	8016b16 <_strtod_l+0x40e>
 8016afe:	4d6b      	ldr	r5, [pc, #428]	; (8016cac <_strtod_l+0x5a4>)
 8016b00:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8016b04:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016b08:	4652      	mov	r2, sl
 8016b0a:	465b      	mov	r3, fp
 8016b0c:	f7e9 fd84 	bl	8000618 <__aeabi_dmul>
 8016b10:	4682      	mov	sl, r0
 8016b12:	468b      	mov	fp, r1
 8016b14:	e63a      	b.n	801678c <_strtod_l+0x84>
 8016b16:	9a08      	ldr	r2, [sp, #32]
 8016b18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8016b1c:	4293      	cmp	r3, r2
 8016b1e:	db20      	blt.n	8016b62 <_strtod_l+0x45a>
 8016b20:	4c62      	ldr	r4, [pc, #392]	; (8016cac <_strtod_l+0x5a4>)
 8016b22:	f1c5 050f 	rsb	r5, r5, #15
 8016b26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016b2a:	4652      	mov	r2, sl
 8016b2c:	465b      	mov	r3, fp
 8016b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b32:	f7e9 fd71 	bl	8000618 <__aeabi_dmul>
 8016b36:	9b08      	ldr	r3, [sp, #32]
 8016b38:	1b5d      	subs	r5, r3, r5
 8016b3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016b3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016b42:	e7e3      	b.n	8016b0c <_strtod_l+0x404>
 8016b44:	9b08      	ldr	r3, [sp, #32]
 8016b46:	3316      	adds	r3, #22
 8016b48:	db0b      	blt.n	8016b62 <_strtod_l+0x45a>
 8016b4a:	9b07      	ldr	r3, [sp, #28]
 8016b4c:	4a57      	ldr	r2, [pc, #348]	; (8016cac <_strtod_l+0x5a4>)
 8016b4e:	1b9e      	subs	r6, r3, r6
 8016b50:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8016b54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016b58:	4650      	mov	r0, sl
 8016b5a:	4659      	mov	r1, fp
 8016b5c:	f7e9 fe86 	bl	800086c <__aeabi_ddiv>
 8016b60:	e7d6      	b.n	8016b10 <_strtod_l+0x408>
 8016b62:	9b08      	ldr	r3, [sp, #32]
 8016b64:	eba5 0808 	sub.w	r8, r5, r8
 8016b68:	4498      	add	r8, r3
 8016b6a:	f1b8 0f00 	cmp.w	r8, #0
 8016b6e:	dd71      	ble.n	8016c54 <_strtod_l+0x54c>
 8016b70:	f018 030f 	ands.w	r3, r8, #15
 8016b74:	d00a      	beq.n	8016b8c <_strtod_l+0x484>
 8016b76:	494d      	ldr	r1, [pc, #308]	; (8016cac <_strtod_l+0x5a4>)
 8016b78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016b7c:	4652      	mov	r2, sl
 8016b7e:	465b      	mov	r3, fp
 8016b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b84:	f7e9 fd48 	bl	8000618 <__aeabi_dmul>
 8016b88:	4682      	mov	sl, r0
 8016b8a:	468b      	mov	fp, r1
 8016b8c:	f038 080f 	bics.w	r8, r8, #15
 8016b90:	d04d      	beq.n	8016c2e <_strtod_l+0x526>
 8016b92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016b96:	dd22      	ble.n	8016bde <_strtod_l+0x4d6>
 8016b98:	2500      	movs	r5, #0
 8016b9a:	462e      	mov	r6, r5
 8016b9c:	9509      	str	r5, [sp, #36]	; 0x24
 8016b9e:	9507      	str	r5, [sp, #28]
 8016ba0:	2322      	movs	r3, #34	; 0x22
 8016ba2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8016cb4 <_strtod_l+0x5ac>
 8016ba6:	6023      	str	r3, [r4, #0]
 8016ba8:	f04f 0a00 	mov.w	sl, #0
 8016bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	f43f adec 	beq.w	801678c <_strtod_l+0x84>
 8016bb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	f002 f992 	bl	8018ee0 <_Bfree>
 8016bbc:	9907      	ldr	r1, [sp, #28]
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	f002 f98e 	bl	8018ee0 <_Bfree>
 8016bc4:	4631      	mov	r1, r6
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	f002 f98a 	bl	8018ee0 <_Bfree>
 8016bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016bce:	4620      	mov	r0, r4
 8016bd0:	f002 f986 	bl	8018ee0 <_Bfree>
 8016bd4:	4629      	mov	r1, r5
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	f002 f982 	bl	8018ee0 <_Bfree>
 8016bdc:	e5d6      	b.n	801678c <_strtod_l+0x84>
 8016bde:	2300      	movs	r3, #0
 8016be0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016be4:	4650      	mov	r0, sl
 8016be6:	4659      	mov	r1, fp
 8016be8:	4699      	mov	r9, r3
 8016bea:	f1b8 0f01 	cmp.w	r8, #1
 8016bee:	dc21      	bgt.n	8016c34 <_strtod_l+0x52c>
 8016bf0:	b10b      	cbz	r3, 8016bf6 <_strtod_l+0x4ee>
 8016bf2:	4682      	mov	sl, r0
 8016bf4:	468b      	mov	fp, r1
 8016bf6:	4b2e      	ldr	r3, [pc, #184]	; (8016cb0 <_strtod_l+0x5a8>)
 8016bf8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016bfc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016c00:	4652      	mov	r2, sl
 8016c02:	465b      	mov	r3, fp
 8016c04:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016c08:	f7e9 fd06 	bl	8000618 <__aeabi_dmul>
 8016c0c:	4b29      	ldr	r3, [pc, #164]	; (8016cb4 <_strtod_l+0x5ac>)
 8016c0e:	460a      	mov	r2, r1
 8016c10:	400b      	ands	r3, r1
 8016c12:	4929      	ldr	r1, [pc, #164]	; (8016cb8 <_strtod_l+0x5b0>)
 8016c14:	428b      	cmp	r3, r1
 8016c16:	4682      	mov	sl, r0
 8016c18:	d8be      	bhi.n	8016b98 <_strtod_l+0x490>
 8016c1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016c1e:	428b      	cmp	r3, r1
 8016c20:	bf86      	itte	hi
 8016c22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016cbc <_strtod_l+0x5b4>
 8016c26:	f04f 3aff 	movhi.w	sl, #4294967295
 8016c2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016c2e:	2300      	movs	r3, #0
 8016c30:	9304      	str	r3, [sp, #16]
 8016c32:	e081      	b.n	8016d38 <_strtod_l+0x630>
 8016c34:	f018 0f01 	tst.w	r8, #1
 8016c38:	d007      	beq.n	8016c4a <_strtod_l+0x542>
 8016c3a:	4b1d      	ldr	r3, [pc, #116]	; (8016cb0 <_strtod_l+0x5a8>)
 8016c3c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8016c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c44:	f7e9 fce8 	bl	8000618 <__aeabi_dmul>
 8016c48:	2301      	movs	r3, #1
 8016c4a:	f109 0901 	add.w	r9, r9, #1
 8016c4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016c52:	e7ca      	b.n	8016bea <_strtod_l+0x4e2>
 8016c54:	d0eb      	beq.n	8016c2e <_strtod_l+0x526>
 8016c56:	f1c8 0800 	rsb	r8, r8, #0
 8016c5a:	f018 020f 	ands.w	r2, r8, #15
 8016c5e:	d00a      	beq.n	8016c76 <_strtod_l+0x56e>
 8016c60:	4b12      	ldr	r3, [pc, #72]	; (8016cac <_strtod_l+0x5a4>)
 8016c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c66:	4650      	mov	r0, sl
 8016c68:	4659      	mov	r1, fp
 8016c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c6e:	f7e9 fdfd 	bl	800086c <__aeabi_ddiv>
 8016c72:	4682      	mov	sl, r0
 8016c74:	468b      	mov	fp, r1
 8016c76:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016c7a:	d0d8      	beq.n	8016c2e <_strtod_l+0x526>
 8016c7c:	f1b8 0f1f 	cmp.w	r8, #31
 8016c80:	dd1e      	ble.n	8016cc0 <_strtod_l+0x5b8>
 8016c82:	2500      	movs	r5, #0
 8016c84:	462e      	mov	r6, r5
 8016c86:	9509      	str	r5, [sp, #36]	; 0x24
 8016c88:	9507      	str	r5, [sp, #28]
 8016c8a:	2322      	movs	r3, #34	; 0x22
 8016c8c:	f04f 0a00 	mov.w	sl, #0
 8016c90:	f04f 0b00 	mov.w	fp, #0
 8016c94:	6023      	str	r3, [r4, #0]
 8016c96:	e789      	b.n	8016bac <_strtod_l+0x4a4>
 8016c98:	0801c575 	.word	0x0801c575
 8016c9c:	0801c5b4 	.word	0x0801c5b4
 8016ca0:	0801c56d 	.word	0x0801c56d
 8016ca4:	0801c62f 	.word	0x0801c62f
 8016ca8:	0801c62b 	.word	0x0801c62b
 8016cac:	0801c7c8 	.word	0x0801c7c8
 8016cb0:	0801c7a0 	.word	0x0801c7a0
 8016cb4:	7ff00000 	.word	0x7ff00000
 8016cb8:	7ca00000 	.word	0x7ca00000
 8016cbc:	7fefffff 	.word	0x7fefffff
 8016cc0:	f018 0310 	ands.w	r3, r8, #16
 8016cc4:	bf18      	it	ne
 8016cc6:	236a      	movne	r3, #106	; 0x6a
 8016cc8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017080 <_strtod_l+0x978>
 8016ccc:	9304      	str	r3, [sp, #16]
 8016cce:	4650      	mov	r0, sl
 8016cd0:	4659      	mov	r1, fp
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	f018 0f01 	tst.w	r8, #1
 8016cd8:	d004      	beq.n	8016ce4 <_strtod_l+0x5dc>
 8016cda:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016cde:	f7e9 fc9b 	bl	8000618 <__aeabi_dmul>
 8016ce2:	2301      	movs	r3, #1
 8016ce4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016ce8:	f109 0908 	add.w	r9, r9, #8
 8016cec:	d1f2      	bne.n	8016cd4 <_strtod_l+0x5cc>
 8016cee:	b10b      	cbz	r3, 8016cf4 <_strtod_l+0x5ec>
 8016cf0:	4682      	mov	sl, r0
 8016cf2:	468b      	mov	fp, r1
 8016cf4:	9b04      	ldr	r3, [sp, #16]
 8016cf6:	b1bb      	cbz	r3, 8016d28 <_strtod_l+0x620>
 8016cf8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016cfc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	4659      	mov	r1, fp
 8016d04:	dd10      	ble.n	8016d28 <_strtod_l+0x620>
 8016d06:	2b1f      	cmp	r3, #31
 8016d08:	f340 8128 	ble.w	8016f5c <_strtod_l+0x854>
 8016d0c:	2b34      	cmp	r3, #52	; 0x34
 8016d0e:	bfde      	ittt	le
 8016d10:	3b20      	suble	r3, #32
 8016d12:	f04f 32ff 	movle.w	r2, #4294967295
 8016d16:	fa02 f303 	lslle.w	r3, r2, r3
 8016d1a:	f04f 0a00 	mov.w	sl, #0
 8016d1e:	bfcc      	ite	gt
 8016d20:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016d24:	ea03 0b01 	andle.w	fp, r3, r1
 8016d28:	2200      	movs	r2, #0
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	4650      	mov	r0, sl
 8016d2e:	4659      	mov	r1, fp
 8016d30:	f7e9 feda 	bl	8000ae8 <__aeabi_dcmpeq>
 8016d34:	2800      	cmp	r0, #0
 8016d36:	d1a4      	bne.n	8016c82 <_strtod_l+0x57a>
 8016d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d3a:	9300      	str	r3, [sp, #0]
 8016d3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d3e:	462b      	mov	r3, r5
 8016d40:	463a      	mov	r2, r7
 8016d42:	4620      	mov	r0, r4
 8016d44:	f002 f938 	bl	8018fb8 <__s2b>
 8016d48:	9009      	str	r0, [sp, #36]	; 0x24
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	f43f af24 	beq.w	8016b98 <_strtod_l+0x490>
 8016d50:	9b07      	ldr	r3, [sp, #28]
 8016d52:	1b9e      	subs	r6, r3, r6
 8016d54:	9b08      	ldr	r3, [sp, #32]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	bfb4      	ite	lt
 8016d5a:	4633      	movlt	r3, r6
 8016d5c:	2300      	movge	r3, #0
 8016d5e:	9310      	str	r3, [sp, #64]	; 0x40
 8016d60:	9b08      	ldr	r3, [sp, #32]
 8016d62:	2500      	movs	r5, #0
 8016d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016d68:	9318      	str	r3, [sp, #96]	; 0x60
 8016d6a:	462e      	mov	r6, r5
 8016d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d6e:	4620      	mov	r0, r4
 8016d70:	6859      	ldr	r1, [r3, #4]
 8016d72:	f002 f875 	bl	8018e60 <_Balloc>
 8016d76:	9007      	str	r0, [sp, #28]
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	f43f af11 	beq.w	8016ba0 <_strtod_l+0x498>
 8016d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d80:	691a      	ldr	r2, [r3, #16]
 8016d82:	3202      	adds	r2, #2
 8016d84:	f103 010c 	add.w	r1, r3, #12
 8016d88:	0092      	lsls	r2, r2, #2
 8016d8a:	300c      	adds	r0, #12
 8016d8c:	f7fe fb4e 	bl	801542c <memcpy>
 8016d90:	ec4b ab10 	vmov	d0, sl, fp
 8016d94:	aa20      	add	r2, sp, #128	; 0x80
 8016d96:	a91f      	add	r1, sp, #124	; 0x7c
 8016d98:	4620      	mov	r0, r4
 8016d9a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8016d9e:	f002 fc47 	bl	8019630 <__d2b>
 8016da2:	901e      	str	r0, [sp, #120]	; 0x78
 8016da4:	2800      	cmp	r0, #0
 8016da6:	f43f aefb 	beq.w	8016ba0 <_strtod_l+0x498>
 8016daa:	2101      	movs	r1, #1
 8016dac:	4620      	mov	r0, r4
 8016dae:	f002 f99d 	bl	80190ec <__i2b>
 8016db2:	4606      	mov	r6, r0
 8016db4:	2800      	cmp	r0, #0
 8016db6:	f43f aef3 	beq.w	8016ba0 <_strtod_l+0x498>
 8016dba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016dbc:	9904      	ldr	r1, [sp, #16]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	bfab      	itete	ge
 8016dc2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8016dc4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8016dc6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8016dc8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8016dcc:	bfac      	ite	ge
 8016dce:	eb03 0902 	addge.w	r9, r3, r2
 8016dd2:	1ad7      	sublt	r7, r2, r3
 8016dd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016dd6:	eba3 0801 	sub.w	r8, r3, r1
 8016dda:	4490      	add	r8, r2
 8016ddc:	4ba3      	ldr	r3, [pc, #652]	; (801706c <_strtod_l+0x964>)
 8016dde:	f108 38ff 	add.w	r8, r8, #4294967295
 8016de2:	4598      	cmp	r8, r3
 8016de4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016de8:	f280 80cc 	bge.w	8016f84 <_strtod_l+0x87c>
 8016dec:	eba3 0308 	sub.w	r3, r3, r8
 8016df0:	2b1f      	cmp	r3, #31
 8016df2:	eba2 0203 	sub.w	r2, r2, r3
 8016df6:	f04f 0101 	mov.w	r1, #1
 8016dfa:	f300 80b6 	bgt.w	8016f6a <_strtod_l+0x862>
 8016dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8016e02:	9311      	str	r3, [sp, #68]	; 0x44
 8016e04:	2300      	movs	r3, #0
 8016e06:	930c      	str	r3, [sp, #48]	; 0x30
 8016e08:	eb09 0802 	add.w	r8, r9, r2
 8016e0c:	9b04      	ldr	r3, [sp, #16]
 8016e0e:	45c1      	cmp	r9, r8
 8016e10:	4417      	add	r7, r2
 8016e12:	441f      	add	r7, r3
 8016e14:	464b      	mov	r3, r9
 8016e16:	bfa8      	it	ge
 8016e18:	4643      	movge	r3, r8
 8016e1a:	42bb      	cmp	r3, r7
 8016e1c:	bfa8      	it	ge
 8016e1e:	463b      	movge	r3, r7
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	bfc2      	ittt	gt
 8016e24:	eba8 0803 	subgt.w	r8, r8, r3
 8016e28:	1aff      	subgt	r7, r7, r3
 8016e2a:	eba9 0903 	subgt.w	r9, r9, r3
 8016e2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	dd17      	ble.n	8016e64 <_strtod_l+0x75c>
 8016e34:	4631      	mov	r1, r6
 8016e36:	461a      	mov	r2, r3
 8016e38:	4620      	mov	r0, r4
 8016e3a:	f002 fa13 	bl	8019264 <__pow5mult>
 8016e3e:	4606      	mov	r6, r0
 8016e40:	2800      	cmp	r0, #0
 8016e42:	f43f aead 	beq.w	8016ba0 <_strtod_l+0x498>
 8016e46:	4601      	mov	r1, r0
 8016e48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016e4a:	4620      	mov	r0, r4
 8016e4c:	f002 f964 	bl	8019118 <__multiply>
 8016e50:	900f      	str	r0, [sp, #60]	; 0x3c
 8016e52:	2800      	cmp	r0, #0
 8016e54:	f43f aea4 	beq.w	8016ba0 <_strtod_l+0x498>
 8016e58:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016e5a:	4620      	mov	r0, r4
 8016e5c:	f002 f840 	bl	8018ee0 <_Bfree>
 8016e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e62:	931e      	str	r3, [sp, #120]	; 0x78
 8016e64:	f1b8 0f00 	cmp.w	r8, #0
 8016e68:	f300 8091 	bgt.w	8016f8e <_strtod_l+0x886>
 8016e6c:	9b08      	ldr	r3, [sp, #32]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	dd08      	ble.n	8016e84 <_strtod_l+0x77c>
 8016e72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016e74:	9907      	ldr	r1, [sp, #28]
 8016e76:	4620      	mov	r0, r4
 8016e78:	f002 f9f4 	bl	8019264 <__pow5mult>
 8016e7c:	9007      	str	r0, [sp, #28]
 8016e7e:	2800      	cmp	r0, #0
 8016e80:	f43f ae8e 	beq.w	8016ba0 <_strtod_l+0x498>
 8016e84:	2f00      	cmp	r7, #0
 8016e86:	dd08      	ble.n	8016e9a <_strtod_l+0x792>
 8016e88:	9907      	ldr	r1, [sp, #28]
 8016e8a:	463a      	mov	r2, r7
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	f002 fa43 	bl	8019318 <__lshift>
 8016e92:	9007      	str	r0, [sp, #28]
 8016e94:	2800      	cmp	r0, #0
 8016e96:	f43f ae83 	beq.w	8016ba0 <_strtod_l+0x498>
 8016e9a:	f1b9 0f00 	cmp.w	r9, #0
 8016e9e:	dd08      	ble.n	8016eb2 <_strtod_l+0x7aa>
 8016ea0:	4631      	mov	r1, r6
 8016ea2:	464a      	mov	r2, r9
 8016ea4:	4620      	mov	r0, r4
 8016ea6:	f002 fa37 	bl	8019318 <__lshift>
 8016eaa:	4606      	mov	r6, r0
 8016eac:	2800      	cmp	r0, #0
 8016eae:	f43f ae77 	beq.w	8016ba0 <_strtod_l+0x498>
 8016eb2:	9a07      	ldr	r2, [sp, #28]
 8016eb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	f002 fab6 	bl	8019428 <__mdiff>
 8016ebc:	4605      	mov	r5, r0
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	f43f ae6e 	beq.w	8016ba0 <_strtod_l+0x498>
 8016ec4:	68c3      	ldr	r3, [r0, #12]
 8016ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ec8:	2300      	movs	r3, #0
 8016eca:	60c3      	str	r3, [r0, #12]
 8016ecc:	4631      	mov	r1, r6
 8016ece:	f002 fa8f 	bl	80193f0 <__mcmp>
 8016ed2:	2800      	cmp	r0, #0
 8016ed4:	da65      	bge.n	8016fa2 <_strtod_l+0x89a>
 8016ed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ed8:	ea53 030a 	orrs.w	r3, r3, sl
 8016edc:	f040 8087 	bne.w	8016fee <_strtod_l+0x8e6>
 8016ee0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	f040 8082 	bne.w	8016fee <_strtod_l+0x8e6>
 8016eea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016eee:	0d1b      	lsrs	r3, r3, #20
 8016ef0:	051b      	lsls	r3, r3, #20
 8016ef2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016ef6:	d97a      	bls.n	8016fee <_strtod_l+0x8e6>
 8016ef8:	696b      	ldr	r3, [r5, #20]
 8016efa:	b913      	cbnz	r3, 8016f02 <_strtod_l+0x7fa>
 8016efc:	692b      	ldr	r3, [r5, #16]
 8016efe:	2b01      	cmp	r3, #1
 8016f00:	dd75      	ble.n	8016fee <_strtod_l+0x8e6>
 8016f02:	4629      	mov	r1, r5
 8016f04:	2201      	movs	r2, #1
 8016f06:	4620      	mov	r0, r4
 8016f08:	f002 fa06 	bl	8019318 <__lshift>
 8016f0c:	4631      	mov	r1, r6
 8016f0e:	4605      	mov	r5, r0
 8016f10:	f002 fa6e 	bl	80193f0 <__mcmp>
 8016f14:	2800      	cmp	r0, #0
 8016f16:	dd6a      	ble.n	8016fee <_strtod_l+0x8e6>
 8016f18:	9904      	ldr	r1, [sp, #16]
 8016f1a:	4a55      	ldr	r2, [pc, #340]	; (8017070 <_strtod_l+0x968>)
 8016f1c:	465b      	mov	r3, fp
 8016f1e:	2900      	cmp	r1, #0
 8016f20:	f000 8085 	beq.w	801702e <_strtod_l+0x926>
 8016f24:	ea02 010b 	and.w	r1, r2, fp
 8016f28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016f2c:	dc7f      	bgt.n	801702e <_strtod_l+0x926>
 8016f2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016f32:	f77f aeaa 	ble.w	8016c8a <_strtod_l+0x582>
 8016f36:	4a4f      	ldr	r2, [pc, #316]	; (8017074 <_strtod_l+0x96c>)
 8016f38:	2300      	movs	r3, #0
 8016f3a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8016f3e:	4650      	mov	r0, sl
 8016f40:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8016f44:	4659      	mov	r1, fp
 8016f46:	f7e9 fb67 	bl	8000618 <__aeabi_dmul>
 8016f4a:	460b      	mov	r3, r1
 8016f4c:	4303      	orrs	r3, r0
 8016f4e:	bf08      	it	eq
 8016f50:	2322      	moveq	r3, #34	; 0x22
 8016f52:	4682      	mov	sl, r0
 8016f54:	468b      	mov	fp, r1
 8016f56:	bf08      	it	eq
 8016f58:	6023      	streq	r3, [r4, #0]
 8016f5a:	e62b      	b.n	8016bb4 <_strtod_l+0x4ac>
 8016f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8016f60:	fa02 f303 	lsl.w	r3, r2, r3
 8016f64:	ea03 0a0a 	and.w	sl, r3, sl
 8016f68:	e6de      	b.n	8016d28 <_strtod_l+0x620>
 8016f6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8016f6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8016f72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8016f76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8016f7a:	fa01 f308 	lsl.w	r3, r1, r8
 8016f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8016f80:	9111      	str	r1, [sp, #68]	; 0x44
 8016f82:	e741      	b.n	8016e08 <_strtod_l+0x700>
 8016f84:	2300      	movs	r3, #0
 8016f86:	930c      	str	r3, [sp, #48]	; 0x30
 8016f88:	2301      	movs	r3, #1
 8016f8a:	9311      	str	r3, [sp, #68]	; 0x44
 8016f8c:	e73c      	b.n	8016e08 <_strtod_l+0x700>
 8016f8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016f90:	4642      	mov	r2, r8
 8016f92:	4620      	mov	r0, r4
 8016f94:	f002 f9c0 	bl	8019318 <__lshift>
 8016f98:	901e      	str	r0, [sp, #120]	; 0x78
 8016f9a:	2800      	cmp	r0, #0
 8016f9c:	f47f af66 	bne.w	8016e6c <_strtod_l+0x764>
 8016fa0:	e5fe      	b.n	8016ba0 <_strtod_l+0x498>
 8016fa2:	465f      	mov	r7, fp
 8016fa4:	d16e      	bne.n	8017084 <_strtod_l+0x97c>
 8016fa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016fa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016fac:	b342      	cbz	r2, 8017000 <_strtod_l+0x8f8>
 8016fae:	4a32      	ldr	r2, [pc, #200]	; (8017078 <_strtod_l+0x970>)
 8016fb0:	4293      	cmp	r3, r2
 8016fb2:	d128      	bne.n	8017006 <_strtod_l+0x8fe>
 8016fb4:	9b04      	ldr	r3, [sp, #16]
 8016fb6:	4650      	mov	r0, sl
 8016fb8:	b1eb      	cbz	r3, 8016ff6 <_strtod_l+0x8ee>
 8016fba:	4a2d      	ldr	r2, [pc, #180]	; (8017070 <_strtod_l+0x968>)
 8016fbc:	403a      	ands	r2, r7
 8016fbe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8016fc6:	d819      	bhi.n	8016ffc <_strtod_l+0x8f4>
 8016fc8:	0d12      	lsrs	r2, r2, #20
 8016fca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016fce:	fa01 f303 	lsl.w	r3, r1, r3
 8016fd2:	4298      	cmp	r0, r3
 8016fd4:	d117      	bne.n	8017006 <_strtod_l+0x8fe>
 8016fd6:	4b29      	ldr	r3, [pc, #164]	; (801707c <_strtod_l+0x974>)
 8016fd8:	429f      	cmp	r7, r3
 8016fda:	d102      	bne.n	8016fe2 <_strtod_l+0x8da>
 8016fdc:	3001      	adds	r0, #1
 8016fde:	f43f addf 	beq.w	8016ba0 <_strtod_l+0x498>
 8016fe2:	4b23      	ldr	r3, [pc, #140]	; (8017070 <_strtod_l+0x968>)
 8016fe4:	403b      	ands	r3, r7
 8016fe6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016fea:	f04f 0a00 	mov.w	sl, #0
 8016fee:	9b04      	ldr	r3, [sp, #16]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d1a0      	bne.n	8016f36 <_strtod_l+0x82e>
 8016ff4:	e5de      	b.n	8016bb4 <_strtod_l+0x4ac>
 8016ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8016ffa:	e7ea      	b.n	8016fd2 <_strtod_l+0x8ca>
 8016ffc:	460b      	mov	r3, r1
 8016ffe:	e7e8      	b.n	8016fd2 <_strtod_l+0x8ca>
 8017000:	ea53 030a 	orrs.w	r3, r3, sl
 8017004:	d088      	beq.n	8016f18 <_strtod_l+0x810>
 8017006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017008:	b1db      	cbz	r3, 8017042 <_strtod_l+0x93a>
 801700a:	423b      	tst	r3, r7
 801700c:	d0ef      	beq.n	8016fee <_strtod_l+0x8e6>
 801700e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017010:	9a04      	ldr	r2, [sp, #16]
 8017012:	4650      	mov	r0, sl
 8017014:	4659      	mov	r1, fp
 8017016:	b1c3      	cbz	r3, 801704a <_strtod_l+0x942>
 8017018:	f7ff fb59 	bl	80166ce <sulp>
 801701c:	4602      	mov	r2, r0
 801701e:	460b      	mov	r3, r1
 8017020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017024:	f7e9 f942 	bl	80002ac <__adddf3>
 8017028:	4682      	mov	sl, r0
 801702a:	468b      	mov	fp, r1
 801702c:	e7df      	b.n	8016fee <_strtod_l+0x8e6>
 801702e:	4013      	ands	r3, r2
 8017030:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017034:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017038:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801703c:	f04f 3aff 	mov.w	sl, #4294967295
 8017040:	e7d5      	b.n	8016fee <_strtod_l+0x8e6>
 8017042:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017044:	ea13 0f0a 	tst.w	r3, sl
 8017048:	e7e0      	b.n	801700c <_strtod_l+0x904>
 801704a:	f7ff fb40 	bl	80166ce <sulp>
 801704e:	4602      	mov	r2, r0
 8017050:	460b      	mov	r3, r1
 8017052:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017056:	f7e9 f927 	bl	80002a8 <__aeabi_dsub>
 801705a:	2200      	movs	r2, #0
 801705c:	2300      	movs	r3, #0
 801705e:	4682      	mov	sl, r0
 8017060:	468b      	mov	fp, r1
 8017062:	f7e9 fd41 	bl	8000ae8 <__aeabi_dcmpeq>
 8017066:	2800      	cmp	r0, #0
 8017068:	d0c1      	beq.n	8016fee <_strtod_l+0x8e6>
 801706a:	e60e      	b.n	8016c8a <_strtod_l+0x582>
 801706c:	fffffc02 	.word	0xfffffc02
 8017070:	7ff00000 	.word	0x7ff00000
 8017074:	39500000 	.word	0x39500000
 8017078:	000fffff 	.word	0x000fffff
 801707c:	7fefffff 	.word	0x7fefffff
 8017080:	0801c5c8 	.word	0x0801c5c8
 8017084:	4631      	mov	r1, r6
 8017086:	4628      	mov	r0, r5
 8017088:	f002 fb2e 	bl	80196e8 <__ratio>
 801708c:	ec59 8b10 	vmov	r8, r9, d0
 8017090:	ee10 0a10 	vmov	r0, s0
 8017094:	2200      	movs	r2, #0
 8017096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801709a:	4649      	mov	r1, r9
 801709c:	f7e9 fd38 	bl	8000b10 <__aeabi_dcmple>
 80170a0:	2800      	cmp	r0, #0
 80170a2:	d07c      	beq.n	801719e <_strtod_l+0xa96>
 80170a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d04c      	beq.n	8017144 <_strtod_l+0xa3c>
 80170aa:	4b95      	ldr	r3, [pc, #596]	; (8017300 <_strtod_l+0xbf8>)
 80170ac:	2200      	movs	r2, #0
 80170ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80170b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017300 <_strtod_l+0xbf8>
 80170b6:	f04f 0800 	mov.w	r8, #0
 80170ba:	4b92      	ldr	r3, [pc, #584]	; (8017304 <_strtod_l+0xbfc>)
 80170bc:	403b      	ands	r3, r7
 80170be:	9311      	str	r3, [sp, #68]	; 0x44
 80170c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80170c2:	4b91      	ldr	r3, [pc, #580]	; (8017308 <_strtod_l+0xc00>)
 80170c4:	429a      	cmp	r2, r3
 80170c6:	f040 80b2 	bne.w	801722e <_strtod_l+0xb26>
 80170ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80170ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80170d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80170d6:	ec4b ab10 	vmov	d0, sl, fp
 80170da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80170de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80170e2:	f002 fa29 	bl	8019538 <__ulp>
 80170e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80170ea:	ec53 2b10 	vmov	r2, r3, d0
 80170ee:	f7e9 fa93 	bl	8000618 <__aeabi_dmul>
 80170f2:	4652      	mov	r2, sl
 80170f4:	465b      	mov	r3, fp
 80170f6:	f7e9 f8d9 	bl	80002ac <__adddf3>
 80170fa:	460b      	mov	r3, r1
 80170fc:	4981      	ldr	r1, [pc, #516]	; (8017304 <_strtod_l+0xbfc>)
 80170fe:	4a83      	ldr	r2, [pc, #524]	; (801730c <_strtod_l+0xc04>)
 8017100:	4019      	ands	r1, r3
 8017102:	4291      	cmp	r1, r2
 8017104:	4682      	mov	sl, r0
 8017106:	d95e      	bls.n	80171c6 <_strtod_l+0xabe>
 8017108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801710a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801710e:	4293      	cmp	r3, r2
 8017110:	d103      	bne.n	801711a <_strtod_l+0xa12>
 8017112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017114:	3301      	adds	r3, #1
 8017116:	f43f ad43 	beq.w	8016ba0 <_strtod_l+0x498>
 801711a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017318 <_strtod_l+0xc10>
 801711e:	f04f 3aff 	mov.w	sl, #4294967295
 8017122:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017124:	4620      	mov	r0, r4
 8017126:	f001 fedb 	bl	8018ee0 <_Bfree>
 801712a:	9907      	ldr	r1, [sp, #28]
 801712c:	4620      	mov	r0, r4
 801712e:	f001 fed7 	bl	8018ee0 <_Bfree>
 8017132:	4631      	mov	r1, r6
 8017134:	4620      	mov	r0, r4
 8017136:	f001 fed3 	bl	8018ee0 <_Bfree>
 801713a:	4629      	mov	r1, r5
 801713c:	4620      	mov	r0, r4
 801713e:	f001 fecf 	bl	8018ee0 <_Bfree>
 8017142:	e613      	b.n	8016d6c <_strtod_l+0x664>
 8017144:	f1ba 0f00 	cmp.w	sl, #0
 8017148:	d11b      	bne.n	8017182 <_strtod_l+0xa7a>
 801714a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801714e:	b9f3      	cbnz	r3, 801718e <_strtod_l+0xa86>
 8017150:	4b6b      	ldr	r3, [pc, #428]	; (8017300 <_strtod_l+0xbf8>)
 8017152:	2200      	movs	r2, #0
 8017154:	4640      	mov	r0, r8
 8017156:	4649      	mov	r1, r9
 8017158:	f7e9 fcd0 	bl	8000afc <__aeabi_dcmplt>
 801715c:	b9d0      	cbnz	r0, 8017194 <_strtod_l+0xa8c>
 801715e:	4640      	mov	r0, r8
 8017160:	4649      	mov	r1, r9
 8017162:	4b6b      	ldr	r3, [pc, #428]	; (8017310 <_strtod_l+0xc08>)
 8017164:	2200      	movs	r2, #0
 8017166:	f7e9 fa57 	bl	8000618 <__aeabi_dmul>
 801716a:	4680      	mov	r8, r0
 801716c:	4689      	mov	r9, r1
 801716e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017172:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017176:	931b      	str	r3, [sp, #108]	; 0x6c
 8017178:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801717c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017180:	e79b      	b.n	80170ba <_strtod_l+0x9b2>
 8017182:	f1ba 0f01 	cmp.w	sl, #1
 8017186:	d102      	bne.n	801718e <_strtod_l+0xa86>
 8017188:	2f00      	cmp	r7, #0
 801718a:	f43f ad7e 	beq.w	8016c8a <_strtod_l+0x582>
 801718e:	4b61      	ldr	r3, [pc, #388]	; (8017314 <_strtod_l+0xc0c>)
 8017190:	2200      	movs	r2, #0
 8017192:	e78c      	b.n	80170ae <_strtod_l+0x9a6>
 8017194:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017310 <_strtod_l+0xc08>
 8017198:	f04f 0800 	mov.w	r8, #0
 801719c:	e7e7      	b.n	801716e <_strtod_l+0xa66>
 801719e:	4b5c      	ldr	r3, [pc, #368]	; (8017310 <_strtod_l+0xc08>)
 80171a0:	4640      	mov	r0, r8
 80171a2:	4649      	mov	r1, r9
 80171a4:	2200      	movs	r2, #0
 80171a6:	f7e9 fa37 	bl	8000618 <__aeabi_dmul>
 80171aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171ac:	4680      	mov	r8, r0
 80171ae:	4689      	mov	r9, r1
 80171b0:	b933      	cbnz	r3, 80171c0 <_strtod_l+0xab8>
 80171b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171b6:	9012      	str	r0, [sp, #72]	; 0x48
 80171b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80171ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80171be:	e7dd      	b.n	801717c <_strtod_l+0xa74>
 80171c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80171c4:	e7f9      	b.n	80171ba <_strtod_l+0xab2>
 80171c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80171ca:	9b04      	ldr	r3, [sp, #16]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d1a8      	bne.n	8017122 <_strtod_l+0xa1a>
 80171d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80171d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80171d6:	0d1b      	lsrs	r3, r3, #20
 80171d8:	051b      	lsls	r3, r3, #20
 80171da:	429a      	cmp	r2, r3
 80171dc:	d1a1      	bne.n	8017122 <_strtod_l+0xa1a>
 80171de:	4640      	mov	r0, r8
 80171e0:	4649      	mov	r1, r9
 80171e2:	f7e9 fd79 	bl	8000cd8 <__aeabi_d2lz>
 80171e6:	f7e9 f9e9 	bl	80005bc <__aeabi_l2d>
 80171ea:	4602      	mov	r2, r0
 80171ec:	460b      	mov	r3, r1
 80171ee:	4640      	mov	r0, r8
 80171f0:	4649      	mov	r1, r9
 80171f2:	f7e9 f859 	bl	80002a8 <__aeabi_dsub>
 80171f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171fc:	ea43 030a 	orr.w	r3, r3, sl
 8017200:	4313      	orrs	r3, r2
 8017202:	4680      	mov	r8, r0
 8017204:	4689      	mov	r9, r1
 8017206:	d053      	beq.n	80172b0 <_strtod_l+0xba8>
 8017208:	a335      	add	r3, pc, #212	; (adr r3, 80172e0 <_strtod_l+0xbd8>)
 801720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801720e:	f7e9 fc75 	bl	8000afc <__aeabi_dcmplt>
 8017212:	2800      	cmp	r0, #0
 8017214:	f47f acce 	bne.w	8016bb4 <_strtod_l+0x4ac>
 8017218:	a333      	add	r3, pc, #204	; (adr r3, 80172e8 <_strtod_l+0xbe0>)
 801721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801721e:	4640      	mov	r0, r8
 8017220:	4649      	mov	r1, r9
 8017222:	f7e9 fc89 	bl	8000b38 <__aeabi_dcmpgt>
 8017226:	2800      	cmp	r0, #0
 8017228:	f43f af7b 	beq.w	8017122 <_strtod_l+0xa1a>
 801722c:	e4c2      	b.n	8016bb4 <_strtod_l+0x4ac>
 801722e:	9b04      	ldr	r3, [sp, #16]
 8017230:	b333      	cbz	r3, 8017280 <_strtod_l+0xb78>
 8017232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017234:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017238:	d822      	bhi.n	8017280 <_strtod_l+0xb78>
 801723a:	a32d      	add	r3, pc, #180	; (adr r3, 80172f0 <_strtod_l+0xbe8>)
 801723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017240:	4640      	mov	r0, r8
 8017242:	4649      	mov	r1, r9
 8017244:	f7e9 fc64 	bl	8000b10 <__aeabi_dcmple>
 8017248:	b1a0      	cbz	r0, 8017274 <_strtod_l+0xb6c>
 801724a:	4649      	mov	r1, r9
 801724c:	4640      	mov	r0, r8
 801724e:	f7e9 fcbb 	bl	8000bc8 <__aeabi_d2uiz>
 8017252:	2801      	cmp	r0, #1
 8017254:	bf38      	it	cc
 8017256:	2001      	movcc	r0, #1
 8017258:	f7e9 f964 	bl	8000524 <__aeabi_ui2d>
 801725c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801725e:	4680      	mov	r8, r0
 8017260:	4689      	mov	r9, r1
 8017262:	bb13      	cbnz	r3, 80172aa <_strtod_l+0xba2>
 8017264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017268:	9014      	str	r0, [sp, #80]	; 0x50
 801726a:	9315      	str	r3, [sp, #84]	; 0x54
 801726c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017270:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017276:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017278:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801727c:	1a9b      	subs	r3, r3, r2
 801727e:	930d      	str	r3, [sp, #52]	; 0x34
 8017280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017284:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017288:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801728c:	f002 f954 	bl	8019538 <__ulp>
 8017290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017294:	ec53 2b10 	vmov	r2, r3, d0
 8017298:	f7e9 f9be 	bl	8000618 <__aeabi_dmul>
 801729c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80172a0:	f7e9 f804 	bl	80002ac <__adddf3>
 80172a4:	4682      	mov	sl, r0
 80172a6:	468b      	mov	fp, r1
 80172a8:	e78f      	b.n	80171ca <_strtod_l+0xac2>
 80172aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80172ae:	e7dd      	b.n	801726c <_strtod_l+0xb64>
 80172b0:	a311      	add	r3, pc, #68	; (adr r3, 80172f8 <_strtod_l+0xbf0>)
 80172b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b6:	f7e9 fc21 	bl	8000afc <__aeabi_dcmplt>
 80172ba:	e7b4      	b.n	8017226 <_strtod_l+0xb1e>
 80172bc:	2300      	movs	r3, #0
 80172be:	930e      	str	r3, [sp, #56]	; 0x38
 80172c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80172c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80172c4:	6013      	str	r3, [r2, #0]
 80172c6:	f7ff ba65 	b.w	8016794 <_strtod_l+0x8c>
 80172ca:	2b65      	cmp	r3, #101	; 0x65
 80172cc:	f43f ab5d 	beq.w	801698a <_strtod_l+0x282>
 80172d0:	2b45      	cmp	r3, #69	; 0x45
 80172d2:	f43f ab5a 	beq.w	801698a <_strtod_l+0x282>
 80172d6:	2201      	movs	r2, #1
 80172d8:	f7ff bb92 	b.w	8016a00 <_strtod_l+0x2f8>
 80172dc:	f3af 8000 	nop.w
 80172e0:	94a03595 	.word	0x94a03595
 80172e4:	3fdfffff 	.word	0x3fdfffff
 80172e8:	35afe535 	.word	0x35afe535
 80172ec:	3fe00000 	.word	0x3fe00000
 80172f0:	ffc00000 	.word	0xffc00000
 80172f4:	41dfffff 	.word	0x41dfffff
 80172f8:	94a03595 	.word	0x94a03595
 80172fc:	3fcfffff 	.word	0x3fcfffff
 8017300:	3ff00000 	.word	0x3ff00000
 8017304:	7ff00000 	.word	0x7ff00000
 8017308:	7fe00000 	.word	0x7fe00000
 801730c:	7c9fffff 	.word	0x7c9fffff
 8017310:	3fe00000 	.word	0x3fe00000
 8017314:	bff00000 	.word	0xbff00000
 8017318:	7fefffff 	.word	0x7fefffff

0801731c <_strtod_r>:
 801731c:	4b01      	ldr	r3, [pc, #4]	; (8017324 <_strtod_r+0x8>)
 801731e:	f7ff b9f3 	b.w	8016708 <_strtod_l>
 8017322:	bf00      	nop
 8017324:	200000f8 	.word	0x200000f8

08017328 <_strtol_l.isra.0>:
 8017328:	2b01      	cmp	r3, #1
 801732a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801732e:	d001      	beq.n	8017334 <_strtol_l.isra.0+0xc>
 8017330:	2b24      	cmp	r3, #36	; 0x24
 8017332:	d906      	bls.n	8017342 <_strtol_l.isra.0+0x1a>
 8017334:	f7fd ff4e 	bl	80151d4 <__errno>
 8017338:	2316      	movs	r3, #22
 801733a:	6003      	str	r3, [r0, #0]
 801733c:	2000      	movs	r0, #0
 801733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017342:	4f3a      	ldr	r7, [pc, #232]	; (801742c <_strtol_l.isra.0+0x104>)
 8017344:	468e      	mov	lr, r1
 8017346:	4676      	mov	r6, lr
 8017348:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801734c:	5de5      	ldrb	r5, [r4, r7]
 801734e:	f015 0508 	ands.w	r5, r5, #8
 8017352:	d1f8      	bne.n	8017346 <_strtol_l.isra.0+0x1e>
 8017354:	2c2d      	cmp	r4, #45	; 0x2d
 8017356:	d134      	bne.n	80173c2 <_strtol_l.isra.0+0x9a>
 8017358:	f89e 4000 	ldrb.w	r4, [lr]
 801735c:	f04f 0801 	mov.w	r8, #1
 8017360:	f106 0e02 	add.w	lr, r6, #2
 8017364:	2b00      	cmp	r3, #0
 8017366:	d05c      	beq.n	8017422 <_strtol_l.isra.0+0xfa>
 8017368:	2b10      	cmp	r3, #16
 801736a:	d10c      	bne.n	8017386 <_strtol_l.isra.0+0x5e>
 801736c:	2c30      	cmp	r4, #48	; 0x30
 801736e:	d10a      	bne.n	8017386 <_strtol_l.isra.0+0x5e>
 8017370:	f89e 4000 	ldrb.w	r4, [lr]
 8017374:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017378:	2c58      	cmp	r4, #88	; 0x58
 801737a:	d14d      	bne.n	8017418 <_strtol_l.isra.0+0xf0>
 801737c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017380:	2310      	movs	r3, #16
 8017382:	f10e 0e02 	add.w	lr, lr, #2
 8017386:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801738a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801738e:	2600      	movs	r6, #0
 8017390:	fbbc f9f3 	udiv	r9, ip, r3
 8017394:	4635      	mov	r5, r6
 8017396:	fb03 ca19 	mls	sl, r3, r9, ip
 801739a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801739e:	2f09      	cmp	r7, #9
 80173a0:	d818      	bhi.n	80173d4 <_strtol_l.isra.0+0xac>
 80173a2:	463c      	mov	r4, r7
 80173a4:	42a3      	cmp	r3, r4
 80173a6:	dd24      	ble.n	80173f2 <_strtol_l.isra.0+0xca>
 80173a8:	2e00      	cmp	r6, #0
 80173aa:	db1f      	blt.n	80173ec <_strtol_l.isra.0+0xc4>
 80173ac:	45a9      	cmp	r9, r5
 80173ae:	d31d      	bcc.n	80173ec <_strtol_l.isra.0+0xc4>
 80173b0:	d101      	bne.n	80173b6 <_strtol_l.isra.0+0x8e>
 80173b2:	45a2      	cmp	sl, r4
 80173b4:	db1a      	blt.n	80173ec <_strtol_l.isra.0+0xc4>
 80173b6:	fb05 4503 	mla	r5, r5, r3, r4
 80173ba:	2601      	movs	r6, #1
 80173bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80173c0:	e7eb      	b.n	801739a <_strtol_l.isra.0+0x72>
 80173c2:	2c2b      	cmp	r4, #43	; 0x2b
 80173c4:	bf08      	it	eq
 80173c6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80173ca:	46a8      	mov	r8, r5
 80173cc:	bf08      	it	eq
 80173ce:	f106 0e02 	addeq.w	lr, r6, #2
 80173d2:	e7c7      	b.n	8017364 <_strtol_l.isra.0+0x3c>
 80173d4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80173d8:	2f19      	cmp	r7, #25
 80173da:	d801      	bhi.n	80173e0 <_strtol_l.isra.0+0xb8>
 80173dc:	3c37      	subs	r4, #55	; 0x37
 80173de:	e7e1      	b.n	80173a4 <_strtol_l.isra.0+0x7c>
 80173e0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80173e4:	2f19      	cmp	r7, #25
 80173e6:	d804      	bhi.n	80173f2 <_strtol_l.isra.0+0xca>
 80173e8:	3c57      	subs	r4, #87	; 0x57
 80173ea:	e7db      	b.n	80173a4 <_strtol_l.isra.0+0x7c>
 80173ec:	f04f 36ff 	mov.w	r6, #4294967295
 80173f0:	e7e4      	b.n	80173bc <_strtol_l.isra.0+0x94>
 80173f2:	2e00      	cmp	r6, #0
 80173f4:	da05      	bge.n	8017402 <_strtol_l.isra.0+0xda>
 80173f6:	2322      	movs	r3, #34	; 0x22
 80173f8:	6003      	str	r3, [r0, #0]
 80173fa:	4665      	mov	r5, ip
 80173fc:	b942      	cbnz	r2, 8017410 <_strtol_l.isra.0+0xe8>
 80173fe:	4628      	mov	r0, r5
 8017400:	e79d      	b.n	801733e <_strtol_l.isra.0+0x16>
 8017402:	f1b8 0f00 	cmp.w	r8, #0
 8017406:	d000      	beq.n	801740a <_strtol_l.isra.0+0xe2>
 8017408:	426d      	negs	r5, r5
 801740a:	2a00      	cmp	r2, #0
 801740c:	d0f7      	beq.n	80173fe <_strtol_l.isra.0+0xd6>
 801740e:	b10e      	cbz	r6, 8017414 <_strtol_l.isra.0+0xec>
 8017410:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017414:	6011      	str	r1, [r2, #0]
 8017416:	e7f2      	b.n	80173fe <_strtol_l.isra.0+0xd6>
 8017418:	2430      	movs	r4, #48	; 0x30
 801741a:	2b00      	cmp	r3, #0
 801741c:	d1b3      	bne.n	8017386 <_strtol_l.isra.0+0x5e>
 801741e:	2308      	movs	r3, #8
 8017420:	e7b1      	b.n	8017386 <_strtol_l.isra.0+0x5e>
 8017422:	2c30      	cmp	r4, #48	; 0x30
 8017424:	d0a4      	beq.n	8017370 <_strtol_l.isra.0+0x48>
 8017426:	230a      	movs	r3, #10
 8017428:	e7ad      	b.n	8017386 <_strtol_l.isra.0+0x5e>
 801742a:	bf00      	nop
 801742c:	0801c401 	.word	0x0801c401

08017430 <_strtol_r>:
 8017430:	f7ff bf7a 	b.w	8017328 <_strtol_l.isra.0>

08017434 <strtol>:
 8017434:	4613      	mov	r3, r2
 8017436:	460a      	mov	r2, r1
 8017438:	4601      	mov	r1, r0
 801743a:	4802      	ldr	r0, [pc, #8]	; (8017444 <strtol+0x10>)
 801743c:	6800      	ldr	r0, [r0, #0]
 801743e:	f7ff bf73 	b.w	8017328 <_strtol_l.isra.0>
 8017442:	bf00      	nop
 8017444:	20000090 	.word	0x20000090

08017448 <_strtoul_l.isra.0>:
 8017448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801744c:	4e3b      	ldr	r6, [pc, #236]	; (801753c <_strtoul_l.isra.0+0xf4>)
 801744e:	4686      	mov	lr, r0
 8017450:	468c      	mov	ip, r1
 8017452:	4660      	mov	r0, ip
 8017454:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017458:	5da5      	ldrb	r5, [r4, r6]
 801745a:	f015 0508 	ands.w	r5, r5, #8
 801745e:	d1f8      	bne.n	8017452 <_strtoul_l.isra.0+0xa>
 8017460:	2c2d      	cmp	r4, #45	; 0x2d
 8017462:	d134      	bne.n	80174ce <_strtoul_l.isra.0+0x86>
 8017464:	f89c 4000 	ldrb.w	r4, [ip]
 8017468:	f04f 0801 	mov.w	r8, #1
 801746c:	f100 0c02 	add.w	ip, r0, #2
 8017470:	2b00      	cmp	r3, #0
 8017472:	d05e      	beq.n	8017532 <_strtoul_l.isra.0+0xea>
 8017474:	2b10      	cmp	r3, #16
 8017476:	d10c      	bne.n	8017492 <_strtoul_l.isra.0+0x4a>
 8017478:	2c30      	cmp	r4, #48	; 0x30
 801747a:	d10a      	bne.n	8017492 <_strtoul_l.isra.0+0x4a>
 801747c:	f89c 0000 	ldrb.w	r0, [ip]
 8017480:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017484:	2858      	cmp	r0, #88	; 0x58
 8017486:	d14f      	bne.n	8017528 <_strtoul_l.isra.0+0xe0>
 8017488:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801748c:	2310      	movs	r3, #16
 801748e:	f10c 0c02 	add.w	ip, ip, #2
 8017492:	f04f 37ff 	mov.w	r7, #4294967295
 8017496:	2500      	movs	r5, #0
 8017498:	fbb7 f7f3 	udiv	r7, r7, r3
 801749c:	fb03 f907 	mul.w	r9, r3, r7
 80174a0:	ea6f 0909 	mvn.w	r9, r9
 80174a4:	4628      	mov	r0, r5
 80174a6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80174aa:	2e09      	cmp	r6, #9
 80174ac:	d818      	bhi.n	80174e0 <_strtoul_l.isra.0+0x98>
 80174ae:	4634      	mov	r4, r6
 80174b0:	42a3      	cmp	r3, r4
 80174b2:	dd24      	ble.n	80174fe <_strtoul_l.isra.0+0xb6>
 80174b4:	2d00      	cmp	r5, #0
 80174b6:	db1f      	blt.n	80174f8 <_strtoul_l.isra.0+0xb0>
 80174b8:	4287      	cmp	r7, r0
 80174ba:	d31d      	bcc.n	80174f8 <_strtoul_l.isra.0+0xb0>
 80174bc:	d101      	bne.n	80174c2 <_strtoul_l.isra.0+0x7a>
 80174be:	45a1      	cmp	r9, r4
 80174c0:	db1a      	blt.n	80174f8 <_strtoul_l.isra.0+0xb0>
 80174c2:	fb00 4003 	mla	r0, r0, r3, r4
 80174c6:	2501      	movs	r5, #1
 80174c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80174cc:	e7eb      	b.n	80174a6 <_strtoul_l.isra.0+0x5e>
 80174ce:	2c2b      	cmp	r4, #43	; 0x2b
 80174d0:	bf08      	it	eq
 80174d2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80174d6:	46a8      	mov	r8, r5
 80174d8:	bf08      	it	eq
 80174da:	f100 0c02 	addeq.w	ip, r0, #2
 80174de:	e7c7      	b.n	8017470 <_strtoul_l.isra.0+0x28>
 80174e0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80174e4:	2e19      	cmp	r6, #25
 80174e6:	d801      	bhi.n	80174ec <_strtoul_l.isra.0+0xa4>
 80174e8:	3c37      	subs	r4, #55	; 0x37
 80174ea:	e7e1      	b.n	80174b0 <_strtoul_l.isra.0+0x68>
 80174ec:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80174f0:	2e19      	cmp	r6, #25
 80174f2:	d804      	bhi.n	80174fe <_strtoul_l.isra.0+0xb6>
 80174f4:	3c57      	subs	r4, #87	; 0x57
 80174f6:	e7db      	b.n	80174b0 <_strtoul_l.isra.0+0x68>
 80174f8:	f04f 35ff 	mov.w	r5, #4294967295
 80174fc:	e7e4      	b.n	80174c8 <_strtoul_l.isra.0+0x80>
 80174fe:	2d00      	cmp	r5, #0
 8017500:	da07      	bge.n	8017512 <_strtoul_l.isra.0+0xca>
 8017502:	2322      	movs	r3, #34	; 0x22
 8017504:	f8ce 3000 	str.w	r3, [lr]
 8017508:	f04f 30ff 	mov.w	r0, #4294967295
 801750c:	b942      	cbnz	r2, 8017520 <_strtoul_l.isra.0+0xd8>
 801750e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017512:	f1b8 0f00 	cmp.w	r8, #0
 8017516:	d000      	beq.n	801751a <_strtoul_l.isra.0+0xd2>
 8017518:	4240      	negs	r0, r0
 801751a:	2a00      	cmp	r2, #0
 801751c:	d0f7      	beq.n	801750e <_strtoul_l.isra.0+0xc6>
 801751e:	b10d      	cbz	r5, 8017524 <_strtoul_l.isra.0+0xdc>
 8017520:	f10c 31ff 	add.w	r1, ip, #4294967295
 8017524:	6011      	str	r1, [r2, #0]
 8017526:	e7f2      	b.n	801750e <_strtoul_l.isra.0+0xc6>
 8017528:	2430      	movs	r4, #48	; 0x30
 801752a:	2b00      	cmp	r3, #0
 801752c:	d1b1      	bne.n	8017492 <_strtoul_l.isra.0+0x4a>
 801752e:	2308      	movs	r3, #8
 8017530:	e7af      	b.n	8017492 <_strtoul_l.isra.0+0x4a>
 8017532:	2c30      	cmp	r4, #48	; 0x30
 8017534:	d0a2      	beq.n	801747c <_strtoul_l.isra.0+0x34>
 8017536:	230a      	movs	r3, #10
 8017538:	e7ab      	b.n	8017492 <_strtoul_l.isra.0+0x4a>
 801753a:	bf00      	nop
 801753c:	0801c401 	.word	0x0801c401

08017540 <_strtoul_r>:
 8017540:	f7ff bf82 	b.w	8017448 <_strtoul_l.isra.0>

08017544 <_vsniprintf_r>:
 8017544:	b530      	push	{r4, r5, lr}
 8017546:	1e14      	subs	r4, r2, #0
 8017548:	4605      	mov	r5, r0
 801754a:	b09b      	sub	sp, #108	; 0x6c
 801754c:	4618      	mov	r0, r3
 801754e:	da05      	bge.n	801755c <_vsniprintf_r+0x18>
 8017550:	238b      	movs	r3, #139	; 0x8b
 8017552:	602b      	str	r3, [r5, #0]
 8017554:	f04f 30ff 	mov.w	r0, #4294967295
 8017558:	b01b      	add	sp, #108	; 0x6c
 801755a:	bd30      	pop	{r4, r5, pc}
 801755c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017560:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017564:	bf14      	ite	ne
 8017566:	f104 33ff 	addne.w	r3, r4, #4294967295
 801756a:	4623      	moveq	r3, r4
 801756c:	9302      	str	r3, [sp, #8]
 801756e:	9305      	str	r3, [sp, #20]
 8017570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017574:	9100      	str	r1, [sp, #0]
 8017576:	9104      	str	r1, [sp, #16]
 8017578:	f8ad 300e 	strh.w	r3, [sp, #14]
 801757c:	4602      	mov	r2, r0
 801757e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017580:	4669      	mov	r1, sp
 8017582:	4628      	mov	r0, r5
 8017584:	f002 f9b8 	bl	80198f8 <_svfiprintf_r>
 8017588:	1c43      	adds	r3, r0, #1
 801758a:	bfbc      	itt	lt
 801758c:	238b      	movlt	r3, #139	; 0x8b
 801758e:	602b      	strlt	r3, [r5, #0]
 8017590:	2c00      	cmp	r4, #0
 8017592:	d0e1      	beq.n	8017558 <_vsniprintf_r+0x14>
 8017594:	9b00      	ldr	r3, [sp, #0]
 8017596:	2200      	movs	r2, #0
 8017598:	701a      	strb	r2, [r3, #0]
 801759a:	e7dd      	b.n	8017558 <_vsniprintf_r+0x14>

0801759c <vsniprintf>:
 801759c:	b507      	push	{r0, r1, r2, lr}
 801759e:	9300      	str	r3, [sp, #0]
 80175a0:	4613      	mov	r3, r2
 80175a2:	460a      	mov	r2, r1
 80175a4:	4601      	mov	r1, r0
 80175a6:	4803      	ldr	r0, [pc, #12]	; (80175b4 <vsniprintf+0x18>)
 80175a8:	6800      	ldr	r0, [r0, #0]
 80175aa:	f7ff ffcb 	bl	8017544 <_vsniprintf_r>
 80175ae:	b003      	add	sp, #12
 80175b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80175b4:	20000090 	.word	0x20000090

080175b8 <__swbuf_r>:
 80175b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ba:	460e      	mov	r6, r1
 80175bc:	4614      	mov	r4, r2
 80175be:	4605      	mov	r5, r0
 80175c0:	b118      	cbz	r0, 80175ca <__swbuf_r+0x12>
 80175c2:	6983      	ldr	r3, [r0, #24]
 80175c4:	b90b      	cbnz	r3, 80175ca <__swbuf_r+0x12>
 80175c6:	f7fd fe63 	bl	8015290 <__sinit>
 80175ca:	4b21      	ldr	r3, [pc, #132]	; (8017650 <__swbuf_r+0x98>)
 80175cc:	429c      	cmp	r4, r3
 80175ce:	d12b      	bne.n	8017628 <__swbuf_r+0x70>
 80175d0:	686c      	ldr	r4, [r5, #4]
 80175d2:	69a3      	ldr	r3, [r4, #24]
 80175d4:	60a3      	str	r3, [r4, #8]
 80175d6:	89a3      	ldrh	r3, [r4, #12]
 80175d8:	071a      	lsls	r2, r3, #28
 80175da:	d52f      	bpl.n	801763c <__swbuf_r+0x84>
 80175dc:	6923      	ldr	r3, [r4, #16]
 80175de:	b36b      	cbz	r3, 801763c <__swbuf_r+0x84>
 80175e0:	6923      	ldr	r3, [r4, #16]
 80175e2:	6820      	ldr	r0, [r4, #0]
 80175e4:	1ac0      	subs	r0, r0, r3
 80175e6:	6963      	ldr	r3, [r4, #20]
 80175e8:	b2f6      	uxtb	r6, r6
 80175ea:	4283      	cmp	r3, r0
 80175ec:	4637      	mov	r7, r6
 80175ee:	dc04      	bgt.n	80175fa <__swbuf_r+0x42>
 80175f0:	4621      	mov	r1, r4
 80175f2:	4628      	mov	r0, r5
 80175f4:	f000 ffde 	bl	80185b4 <_fflush_r>
 80175f8:	bb30      	cbnz	r0, 8017648 <__swbuf_r+0x90>
 80175fa:	68a3      	ldr	r3, [r4, #8]
 80175fc:	3b01      	subs	r3, #1
 80175fe:	60a3      	str	r3, [r4, #8]
 8017600:	6823      	ldr	r3, [r4, #0]
 8017602:	1c5a      	adds	r2, r3, #1
 8017604:	6022      	str	r2, [r4, #0]
 8017606:	701e      	strb	r6, [r3, #0]
 8017608:	6963      	ldr	r3, [r4, #20]
 801760a:	3001      	adds	r0, #1
 801760c:	4283      	cmp	r3, r0
 801760e:	d004      	beq.n	801761a <__swbuf_r+0x62>
 8017610:	89a3      	ldrh	r3, [r4, #12]
 8017612:	07db      	lsls	r3, r3, #31
 8017614:	d506      	bpl.n	8017624 <__swbuf_r+0x6c>
 8017616:	2e0a      	cmp	r6, #10
 8017618:	d104      	bne.n	8017624 <__swbuf_r+0x6c>
 801761a:	4621      	mov	r1, r4
 801761c:	4628      	mov	r0, r5
 801761e:	f000 ffc9 	bl	80185b4 <_fflush_r>
 8017622:	b988      	cbnz	r0, 8017648 <__swbuf_r+0x90>
 8017624:	4638      	mov	r0, r7
 8017626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017628:	4b0a      	ldr	r3, [pc, #40]	; (8017654 <__swbuf_r+0x9c>)
 801762a:	429c      	cmp	r4, r3
 801762c:	d101      	bne.n	8017632 <__swbuf_r+0x7a>
 801762e:	68ac      	ldr	r4, [r5, #8]
 8017630:	e7cf      	b.n	80175d2 <__swbuf_r+0x1a>
 8017632:	4b09      	ldr	r3, [pc, #36]	; (8017658 <__swbuf_r+0xa0>)
 8017634:	429c      	cmp	r4, r3
 8017636:	bf08      	it	eq
 8017638:	68ec      	ldreq	r4, [r5, #12]
 801763a:	e7ca      	b.n	80175d2 <__swbuf_r+0x1a>
 801763c:	4621      	mov	r1, r4
 801763e:	4628      	mov	r0, r5
 8017640:	f000 f81e 	bl	8017680 <__swsetup_r>
 8017644:	2800      	cmp	r0, #0
 8017646:	d0cb      	beq.n	80175e0 <__swbuf_r+0x28>
 8017648:	f04f 37ff 	mov.w	r7, #4294967295
 801764c:	e7ea      	b.n	8017624 <__swbuf_r+0x6c>
 801764e:	bf00      	nop
 8017650:	0801c524 	.word	0x0801c524
 8017654:	0801c544 	.word	0x0801c544
 8017658:	0801c504 	.word	0x0801c504

0801765c <_write_r>:
 801765c:	b538      	push	{r3, r4, r5, lr}
 801765e:	4d07      	ldr	r5, [pc, #28]	; (801767c <_write_r+0x20>)
 8017660:	4604      	mov	r4, r0
 8017662:	4608      	mov	r0, r1
 8017664:	4611      	mov	r1, r2
 8017666:	2200      	movs	r2, #0
 8017668:	602a      	str	r2, [r5, #0]
 801766a:	461a      	mov	r2, r3
 801766c:	f7eb fdc3 	bl	80031f6 <_write>
 8017670:	1c43      	adds	r3, r0, #1
 8017672:	d102      	bne.n	801767a <_write_r+0x1e>
 8017674:	682b      	ldr	r3, [r5, #0]
 8017676:	b103      	cbz	r3, 801767a <_write_r+0x1e>
 8017678:	6023      	str	r3, [r4, #0]
 801767a:	bd38      	pop	{r3, r4, r5, pc}
 801767c:	200071a0 	.word	0x200071a0

08017680 <__swsetup_r>:
 8017680:	4b32      	ldr	r3, [pc, #200]	; (801774c <__swsetup_r+0xcc>)
 8017682:	b570      	push	{r4, r5, r6, lr}
 8017684:	681d      	ldr	r5, [r3, #0]
 8017686:	4606      	mov	r6, r0
 8017688:	460c      	mov	r4, r1
 801768a:	b125      	cbz	r5, 8017696 <__swsetup_r+0x16>
 801768c:	69ab      	ldr	r3, [r5, #24]
 801768e:	b913      	cbnz	r3, 8017696 <__swsetup_r+0x16>
 8017690:	4628      	mov	r0, r5
 8017692:	f7fd fdfd 	bl	8015290 <__sinit>
 8017696:	4b2e      	ldr	r3, [pc, #184]	; (8017750 <__swsetup_r+0xd0>)
 8017698:	429c      	cmp	r4, r3
 801769a:	d10f      	bne.n	80176bc <__swsetup_r+0x3c>
 801769c:	686c      	ldr	r4, [r5, #4]
 801769e:	89a3      	ldrh	r3, [r4, #12]
 80176a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80176a4:	0719      	lsls	r1, r3, #28
 80176a6:	d42c      	bmi.n	8017702 <__swsetup_r+0x82>
 80176a8:	06dd      	lsls	r5, r3, #27
 80176aa:	d411      	bmi.n	80176d0 <__swsetup_r+0x50>
 80176ac:	2309      	movs	r3, #9
 80176ae:	6033      	str	r3, [r6, #0]
 80176b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80176b4:	81a3      	strh	r3, [r4, #12]
 80176b6:	f04f 30ff 	mov.w	r0, #4294967295
 80176ba:	e03e      	b.n	801773a <__swsetup_r+0xba>
 80176bc:	4b25      	ldr	r3, [pc, #148]	; (8017754 <__swsetup_r+0xd4>)
 80176be:	429c      	cmp	r4, r3
 80176c0:	d101      	bne.n	80176c6 <__swsetup_r+0x46>
 80176c2:	68ac      	ldr	r4, [r5, #8]
 80176c4:	e7eb      	b.n	801769e <__swsetup_r+0x1e>
 80176c6:	4b24      	ldr	r3, [pc, #144]	; (8017758 <__swsetup_r+0xd8>)
 80176c8:	429c      	cmp	r4, r3
 80176ca:	bf08      	it	eq
 80176cc:	68ec      	ldreq	r4, [r5, #12]
 80176ce:	e7e6      	b.n	801769e <__swsetup_r+0x1e>
 80176d0:	0758      	lsls	r0, r3, #29
 80176d2:	d512      	bpl.n	80176fa <__swsetup_r+0x7a>
 80176d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176d6:	b141      	cbz	r1, 80176ea <__swsetup_r+0x6a>
 80176d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176dc:	4299      	cmp	r1, r3
 80176de:	d002      	beq.n	80176e6 <__swsetup_r+0x66>
 80176e0:	4630      	mov	r0, r6
 80176e2:	f7fd fed3 	bl	801548c <_free_r>
 80176e6:	2300      	movs	r3, #0
 80176e8:	6363      	str	r3, [r4, #52]	; 0x34
 80176ea:	89a3      	ldrh	r3, [r4, #12]
 80176ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80176f0:	81a3      	strh	r3, [r4, #12]
 80176f2:	2300      	movs	r3, #0
 80176f4:	6063      	str	r3, [r4, #4]
 80176f6:	6923      	ldr	r3, [r4, #16]
 80176f8:	6023      	str	r3, [r4, #0]
 80176fa:	89a3      	ldrh	r3, [r4, #12]
 80176fc:	f043 0308 	orr.w	r3, r3, #8
 8017700:	81a3      	strh	r3, [r4, #12]
 8017702:	6923      	ldr	r3, [r4, #16]
 8017704:	b94b      	cbnz	r3, 801771a <__swsetup_r+0x9a>
 8017706:	89a3      	ldrh	r3, [r4, #12]
 8017708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801770c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017710:	d003      	beq.n	801771a <__swsetup_r+0x9a>
 8017712:	4621      	mov	r1, r4
 8017714:	4630      	mov	r0, r6
 8017716:	f001 fb45 	bl	8018da4 <__smakebuf_r>
 801771a:	89a0      	ldrh	r0, [r4, #12]
 801771c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017720:	f010 0301 	ands.w	r3, r0, #1
 8017724:	d00a      	beq.n	801773c <__swsetup_r+0xbc>
 8017726:	2300      	movs	r3, #0
 8017728:	60a3      	str	r3, [r4, #8]
 801772a:	6963      	ldr	r3, [r4, #20]
 801772c:	425b      	negs	r3, r3
 801772e:	61a3      	str	r3, [r4, #24]
 8017730:	6923      	ldr	r3, [r4, #16]
 8017732:	b943      	cbnz	r3, 8017746 <__swsetup_r+0xc6>
 8017734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017738:	d1ba      	bne.n	80176b0 <__swsetup_r+0x30>
 801773a:	bd70      	pop	{r4, r5, r6, pc}
 801773c:	0781      	lsls	r1, r0, #30
 801773e:	bf58      	it	pl
 8017740:	6963      	ldrpl	r3, [r4, #20]
 8017742:	60a3      	str	r3, [r4, #8]
 8017744:	e7f4      	b.n	8017730 <__swsetup_r+0xb0>
 8017746:	2000      	movs	r0, #0
 8017748:	e7f7      	b.n	801773a <__swsetup_r+0xba>
 801774a:	bf00      	nop
 801774c:	20000090 	.word	0x20000090
 8017750:	0801c524 	.word	0x0801c524
 8017754:	0801c544 	.word	0x0801c544
 8017758:	0801c504 	.word	0x0801c504

0801775c <__assert_func>:
 801775c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801775e:	4614      	mov	r4, r2
 8017760:	461a      	mov	r2, r3
 8017762:	4b09      	ldr	r3, [pc, #36]	; (8017788 <__assert_func+0x2c>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	4605      	mov	r5, r0
 8017768:	68d8      	ldr	r0, [r3, #12]
 801776a:	b14c      	cbz	r4, 8017780 <__assert_func+0x24>
 801776c:	4b07      	ldr	r3, [pc, #28]	; (801778c <__assert_func+0x30>)
 801776e:	9100      	str	r1, [sp, #0]
 8017770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017774:	4906      	ldr	r1, [pc, #24]	; (8017790 <__assert_func+0x34>)
 8017776:	462b      	mov	r3, r5
 8017778:	f000 ff58 	bl	801862c <fiprintf>
 801777c:	f7fd fd22 	bl	80151c4 <abort>
 8017780:	4b04      	ldr	r3, [pc, #16]	; (8017794 <__assert_func+0x38>)
 8017782:	461c      	mov	r4, r3
 8017784:	e7f3      	b.n	801776e <__assert_func+0x12>
 8017786:	bf00      	nop
 8017788:	20000090 	.word	0x20000090
 801778c:	0801c5f0 	.word	0x0801c5f0
 8017790:	0801c5fd 	.word	0x0801c5fd
 8017794:	0801c62b 	.word	0x0801c62b

08017798 <_close_r>:
 8017798:	b538      	push	{r3, r4, r5, lr}
 801779a:	4d06      	ldr	r5, [pc, #24]	; (80177b4 <_close_r+0x1c>)
 801779c:	2300      	movs	r3, #0
 801779e:	4604      	mov	r4, r0
 80177a0:	4608      	mov	r0, r1
 80177a2:	602b      	str	r3, [r5, #0]
 80177a4:	f7eb fd43 	bl	800322e <_close>
 80177a8:	1c43      	adds	r3, r0, #1
 80177aa:	d102      	bne.n	80177b2 <_close_r+0x1a>
 80177ac:	682b      	ldr	r3, [r5, #0]
 80177ae:	b103      	cbz	r3, 80177b2 <_close_r+0x1a>
 80177b0:	6023      	str	r3, [r4, #0]
 80177b2:	bd38      	pop	{r3, r4, r5, pc}
 80177b4:	200071a0 	.word	0x200071a0

080177b8 <quorem>:
 80177b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177bc:	6903      	ldr	r3, [r0, #16]
 80177be:	690c      	ldr	r4, [r1, #16]
 80177c0:	42a3      	cmp	r3, r4
 80177c2:	4607      	mov	r7, r0
 80177c4:	f2c0 8081 	blt.w	80178ca <quorem+0x112>
 80177c8:	3c01      	subs	r4, #1
 80177ca:	f101 0814 	add.w	r8, r1, #20
 80177ce:	f100 0514 	add.w	r5, r0, #20
 80177d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80177d6:	9301      	str	r3, [sp, #4]
 80177d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80177dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80177e0:	3301      	adds	r3, #1
 80177e2:	429a      	cmp	r2, r3
 80177e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80177e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80177ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80177f0:	d331      	bcc.n	8017856 <quorem+0x9e>
 80177f2:	f04f 0e00 	mov.w	lr, #0
 80177f6:	4640      	mov	r0, r8
 80177f8:	46ac      	mov	ip, r5
 80177fa:	46f2      	mov	sl, lr
 80177fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8017800:	b293      	uxth	r3, r2
 8017802:	fb06 e303 	mla	r3, r6, r3, lr
 8017806:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801780a:	b29b      	uxth	r3, r3
 801780c:	ebaa 0303 	sub.w	r3, sl, r3
 8017810:	0c12      	lsrs	r2, r2, #16
 8017812:	f8dc a000 	ldr.w	sl, [ip]
 8017816:	fb06 e202 	mla	r2, r6, r2, lr
 801781a:	fa13 f38a 	uxtah	r3, r3, sl
 801781e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017822:	fa1f fa82 	uxth.w	sl, r2
 8017826:	f8dc 2000 	ldr.w	r2, [ip]
 801782a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801782e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017832:	b29b      	uxth	r3, r3
 8017834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017838:	4581      	cmp	r9, r0
 801783a:	f84c 3b04 	str.w	r3, [ip], #4
 801783e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017842:	d2db      	bcs.n	80177fc <quorem+0x44>
 8017844:	f855 300b 	ldr.w	r3, [r5, fp]
 8017848:	b92b      	cbnz	r3, 8017856 <quorem+0x9e>
 801784a:	9b01      	ldr	r3, [sp, #4]
 801784c:	3b04      	subs	r3, #4
 801784e:	429d      	cmp	r5, r3
 8017850:	461a      	mov	r2, r3
 8017852:	d32e      	bcc.n	80178b2 <quorem+0xfa>
 8017854:	613c      	str	r4, [r7, #16]
 8017856:	4638      	mov	r0, r7
 8017858:	f001 fdca 	bl	80193f0 <__mcmp>
 801785c:	2800      	cmp	r0, #0
 801785e:	db24      	blt.n	80178aa <quorem+0xf2>
 8017860:	3601      	adds	r6, #1
 8017862:	4628      	mov	r0, r5
 8017864:	f04f 0c00 	mov.w	ip, #0
 8017868:	f858 2b04 	ldr.w	r2, [r8], #4
 801786c:	f8d0 e000 	ldr.w	lr, [r0]
 8017870:	b293      	uxth	r3, r2
 8017872:	ebac 0303 	sub.w	r3, ip, r3
 8017876:	0c12      	lsrs	r2, r2, #16
 8017878:	fa13 f38e 	uxtah	r3, r3, lr
 801787c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017884:	b29b      	uxth	r3, r3
 8017886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801788a:	45c1      	cmp	r9, r8
 801788c:	f840 3b04 	str.w	r3, [r0], #4
 8017890:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017894:	d2e8      	bcs.n	8017868 <quorem+0xb0>
 8017896:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801789a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801789e:	b922      	cbnz	r2, 80178aa <quorem+0xf2>
 80178a0:	3b04      	subs	r3, #4
 80178a2:	429d      	cmp	r5, r3
 80178a4:	461a      	mov	r2, r3
 80178a6:	d30a      	bcc.n	80178be <quorem+0x106>
 80178a8:	613c      	str	r4, [r7, #16]
 80178aa:	4630      	mov	r0, r6
 80178ac:	b003      	add	sp, #12
 80178ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178b2:	6812      	ldr	r2, [r2, #0]
 80178b4:	3b04      	subs	r3, #4
 80178b6:	2a00      	cmp	r2, #0
 80178b8:	d1cc      	bne.n	8017854 <quorem+0x9c>
 80178ba:	3c01      	subs	r4, #1
 80178bc:	e7c7      	b.n	801784e <quorem+0x96>
 80178be:	6812      	ldr	r2, [r2, #0]
 80178c0:	3b04      	subs	r3, #4
 80178c2:	2a00      	cmp	r2, #0
 80178c4:	d1f0      	bne.n	80178a8 <quorem+0xf0>
 80178c6:	3c01      	subs	r4, #1
 80178c8:	e7eb      	b.n	80178a2 <quorem+0xea>
 80178ca:	2000      	movs	r0, #0
 80178cc:	e7ee      	b.n	80178ac <quorem+0xf4>
	...

080178d0 <_dtoa_r>:
 80178d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178d4:	ed2d 8b02 	vpush	{d8}
 80178d8:	ec57 6b10 	vmov	r6, r7, d0
 80178dc:	b095      	sub	sp, #84	; 0x54
 80178de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80178e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80178e4:	9105      	str	r1, [sp, #20]
 80178e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80178ea:	4604      	mov	r4, r0
 80178ec:	9209      	str	r2, [sp, #36]	; 0x24
 80178ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80178f0:	b975      	cbnz	r5, 8017910 <_dtoa_r+0x40>
 80178f2:	2010      	movs	r0, #16
 80178f4:	f7fd fd92 	bl	801541c <malloc>
 80178f8:	4602      	mov	r2, r0
 80178fa:	6260      	str	r0, [r4, #36]	; 0x24
 80178fc:	b920      	cbnz	r0, 8017908 <_dtoa_r+0x38>
 80178fe:	4bb2      	ldr	r3, [pc, #712]	; (8017bc8 <_dtoa_r+0x2f8>)
 8017900:	21ea      	movs	r1, #234	; 0xea
 8017902:	48b2      	ldr	r0, [pc, #712]	; (8017bcc <_dtoa_r+0x2fc>)
 8017904:	f7ff ff2a 	bl	801775c <__assert_func>
 8017908:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801790c:	6005      	str	r5, [r0, #0]
 801790e:	60c5      	str	r5, [r0, #12]
 8017910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017912:	6819      	ldr	r1, [r3, #0]
 8017914:	b151      	cbz	r1, 801792c <_dtoa_r+0x5c>
 8017916:	685a      	ldr	r2, [r3, #4]
 8017918:	604a      	str	r2, [r1, #4]
 801791a:	2301      	movs	r3, #1
 801791c:	4093      	lsls	r3, r2
 801791e:	608b      	str	r3, [r1, #8]
 8017920:	4620      	mov	r0, r4
 8017922:	f001 fadd 	bl	8018ee0 <_Bfree>
 8017926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017928:	2200      	movs	r2, #0
 801792a:	601a      	str	r2, [r3, #0]
 801792c:	1e3b      	subs	r3, r7, #0
 801792e:	bfb9      	ittee	lt
 8017930:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017934:	9303      	strlt	r3, [sp, #12]
 8017936:	2300      	movge	r3, #0
 8017938:	f8c8 3000 	strge.w	r3, [r8]
 801793c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017940:	4ba3      	ldr	r3, [pc, #652]	; (8017bd0 <_dtoa_r+0x300>)
 8017942:	bfbc      	itt	lt
 8017944:	2201      	movlt	r2, #1
 8017946:	f8c8 2000 	strlt.w	r2, [r8]
 801794a:	ea33 0309 	bics.w	r3, r3, r9
 801794e:	d11b      	bne.n	8017988 <_dtoa_r+0xb8>
 8017950:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017952:	f242 730f 	movw	r3, #9999	; 0x270f
 8017956:	6013      	str	r3, [r2, #0]
 8017958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801795c:	4333      	orrs	r3, r6
 801795e:	f000 857a 	beq.w	8018456 <_dtoa_r+0xb86>
 8017962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017964:	b963      	cbnz	r3, 8017980 <_dtoa_r+0xb0>
 8017966:	4b9b      	ldr	r3, [pc, #620]	; (8017bd4 <_dtoa_r+0x304>)
 8017968:	e024      	b.n	80179b4 <_dtoa_r+0xe4>
 801796a:	4b9b      	ldr	r3, [pc, #620]	; (8017bd8 <_dtoa_r+0x308>)
 801796c:	9300      	str	r3, [sp, #0]
 801796e:	3308      	adds	r3, #8
 8017970:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017972:	6013      	str	r3, [r2, #0]
 8017974:	9800      	ldr	r0, [sp, #0]
 8017976:	b015      	add	sp, #84	; 0x54
 8017978:	ecbd 8b02 	vpop	{d8}
 801797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017980:	4b94      	ldr	r3, [pc, #592]	; (8017bd4 <_dtoa_r+0x304>)
 8017982:	9300      	str	r3, [sp, #0]
 8017984:	3303      	adds	r3, #3
 8017986:	e7f3      	b.n	8017970 <_dtoa_r+0xa0>
 8017988:	ed9d 7b02 	vldr	d7, [sp, #8]
 801798c:	2200      	movs	r2, #0
 801798e:	ec51 0b17 	vmov	r0, r1, d7
 8017992:	2300      	movs	r3, #0
 8017994:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017998:	f7e9 f8a6 	bl	8000ae8 <__aeabi_dcmpeq>
 801799c:	4680      	mov	r8, r0
 801799e:	b158      	cbz	r0, 80179b8 <_dtoa_r+0xe8>
 80179a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80179a2:	2301      	movs	r3, #1
 80179a4:	6013      	str	r3, [r2, #0]
 80179a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	f000 8551 	beq.w	8018450 <_dtoa_r+0xb80>
 80179ae:	488b      	ldr	r0, [pc, #556]	; (8017bdc <_dtoa_r+0x30c>)
 80179b0:	6018      	str	r0, [r3, #0]
 80179b2:	1e43      	subs	r3, r0, #1
 80179b4:	9300      	str	r3, [sp, #0]
 80179b6:	e7dd      	b.n	8017974 <_dtoa_r+0xa4>
 80179b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80179bc:	aa12      	add	r2, sp, #72	; 0x48
 80179be:	a913      	add	r1, sp, #76	; 0x4c
 80179c0:	4620      	mov	r0, r4
 80179c2:	f001 fe35 	bl	8019630 <__d2b>
 80179c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80179ca:	4683      	mov	fp, r0
 80179cc:	2d00      	cmp	r5, #0
 80179ce:	d07c      	beq.n	8017aca <_dtoa_r+0x1fa>
 80179d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80179d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80179da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80179de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80179e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80179e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80179ea:	4b7d      	ldr	r3, [pc, #500]	; (8017be0 <_dtoa_r+0x310>)
 80179ec:	2200      	movs	r2, #0
 80179ee:	4630      	mov	r0, r6
 80179f0:	4639      	mov	r1, r7
 80179f2:	f7e8 fc59 	bl	80002a8 <__aeabi_dsub>
 80179f6:	a36e      	add	r3, pc, #440	; (adr r3, 8017bb0 <_dtoa_r+0x2e0>)
 80179f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179fc:	f7e8 fe0c 	bl	8000618 <__aeabi_dmul>
 8017a00:	a36d      	add	r3, pc, #436	; (adr r3, 8017bb8 <_dtoa_r+0x2e8>)
 8017a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a06:	f7e8 fc51 	bl	80002ac <__adddf3>
 8017a0a:	4606      	mov	r6, r0
 8017a0c:	4628      	mov	r0, r5
 8017a0e:	460f      	mov	r7, r1
 8017a10:	f7e8 fd98 	bl	8000544 <__aeabi_i2d>
 8017a14:	a36a      	add	r3, pc, #424	; (adr r3, 8017bc0 <_dtoa_r+0x2f0>)
 8017a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a1a:	f7e8 fdfd 	bl	8000618 <__aeabi_dmul>
 8017a1e:	4602      	mov	r2, r0
 8017a20:	460b      	mov	r3, r1
 8017a22:	4630      	mov	r0, r6
 8017a24:	4639      	mov	r1, r7
 8017a26:	f7e8 fc41 	bl	80002ac <__adddf3>
 8017a2a:	4606      	mov	r6, r0
 8017a2c:	460f      	mov	r7, r1
 8017a2e:	f7e9 f8a3 	bl	8000b78 <__aeabi_d2iz>
 8017a32:	2200      	movs	r2, #0
 8017a34:	4682      	mov	sl, r0
 8017a36:	2300      	movs	r3, #0
 8017a38:	4630      	mov	r0, r6
 8017a3a:	4639      	mov	r1, r7
 8017a3c:	f7e9 f85e 	bl	8000afc <__aeabi_dcmplt>
 8017a40:	b148      	cbz	r0, 8017a56 <_dtoa_r+0x186>
 8017a42:	4650      	mov	r0, sl
 8017a44:	f7e8 fd7e 	bl	8000544 <__aeabi_i2d>
 8017a48:	4632      	mov	r2, r6
 8017a4a:	463b      	mov	r3, r7
 8017a4c:	f7e9 f84c 	bl	8000ae8 <__aeabi_dcmpeq>
 8017a50:	b908      	cbnz	r0, 8017a56 <_dtoa_r+0x186>
 8017a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017a56:	f1ba 0f16 	cmp.w	sl, #22
 8017a5a:	d854      	bhi.n	8017b06 <_dtoa_r+0x236>
 8017a5c:	4b61      	ldr	r3, [pc, #388]	; (8017be4 <_dtoa_r+0x314>)
 8017a5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017a6a:	f7e9 f847 	bl	8000afc <__aeabi_dcmplt>
 8017a6e:	2800      	cmp	r0, #0
 8017a70:	d04b      	beq.n	8017b0a <_dtoa_r+0x23a>
 8017a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017a76:	2300      	movs	r3, #0
 8017a78:	930e      	str	r3, [sp, #56]	; 0x38
 8017a7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017a7c:	1b5d      	subs	r5, r3, r5
 8017a7e:	1e6b      	subs	r3, r5, #1
 8017a80:	9304      	str	r3, [sp, #16]
 8017a82:	bf43      	ittte	mi
 8017a84:	2300      	movmi	r3, #0
 8017a86:	f1c5 0801 	rsbmi	r8, r5, #1
 8017a8a:	9304      	strmi	r3, [sp, #16]
 8017a8c:	f04f 0800 	movpl.w	r8, #0
 8017a90:	f1ba 0f00 	cmp.w	sl, #0
 8017a94:	db3b      	blt.n	8017b0e <_dtoa_r+0x23e>
 8017a96:	9b04      	ldr	r3, [sp, #16]
 8017a98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017a9c:	4453      	add	r3, sl
 8017a9e:	9304      	str	r3, [sp, #16]
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	9306      	str	r3, [sp, #24]
 8017aa4:	9b05      	ldr	r3, [sp, #20]
 8017aa6:	2b09      	cmp	r3, #9
 8017aa8:	d869      	bhi.n	8017b7e <_dtoa_r+0x2ae>
 8017aaa:	2b05      	cmp	r3, #5
 8017aac:	bfc4      	itt	gt
 8017aae:	3b04      	subgt	r3, #4
 8017ab0:	9305      	strgt	r3, [sp, #20]
 8017ab2:	9b05      	ldr	r3, [sp, #20]
 8017ab4:	f1a3 0302 	sub.w	r3, r3, #2
 8017ab8:	bfcc      	ite	gt
 8017aba:	2500      	movgt	r5, #0
 8017abc:	2501      	movle	r5, #1
 8017abe:	2b03      	cmp	r3, #3
 8017ac0:	d869      	bhi.n	8017b96 <_dtoa_r+0x2c6>
 8017ac2:	e8df f003 	tbb	[pc, r3]
 8017ac6:	4e2c      	.short	0x4e2c
 8017ac8:	5a4c      	.short	0x5a4c
 8017aca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017ace:	441d      	add	r5, r3
 8017ad0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017ad4:	2b20      	cmp	r3, #32
 8017ad6:	bfc1      	itttt	gt
 8017ad8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017adc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017ae0:	fa09 f303 	lslgt.w	r3, r9, r3
 8017ae4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017ae8:	bfda      	itte	le
 8017aea:	f1c3 0320 	rsble	r3, r3, #32
 8017aee:	fa06 f003 	lslle.w	r0, r6, r3
 8017af2:	4318      	orrgt	r0, r3
 8017af4:	f7e8 fd16 	bl	8000524 <__aeabi_ui2d>
 8017af8:	2301      	movs	r3, #1
 8017afa:	4606      	mov	r6, r0
 8017afc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017b00:	3d01      	subs	r5, #1
 8017b02:	9310      	str	r3, [sp, #64]	; 0x40
 8017b04:	e771      	b.n	80179ea <_dtoa_r+0x11a>
 8017b06:	2301      	movs	r3, #1
 8017b08:	e7b6      	b.n	8017a78 <_dtoa_r+0x1a8>
 8017b0a:	900e      	str	r0, [sp, #56]	; 0x38
 8017b0c:	e7b5      	b.n	8017a7a <_dtoa_r+0x1aa>
 8017b0e:	f1ca 0300 	rsb	r3, sl, #0
 8017b12:	9306      	str	r3, [sp, #24]
 8017b14:	2300      	movs	r3, #0
 8017b16:	eba8 080a 	sub.w	r8, r8, sl
 8017b1a:	930d      	str	r3, [sp, #52]	; 0x34
 8017b1c:	e7c2      	b.n	8017aa4 <_dtoa_r+0x1d4>
 8017b1e:	2300      	movs	r3, #0
 8017b20:	9308      	str	r3, [sp, #32]
 8017b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	dc39      	bgt.n	8017b9c <_dtoa_r+0x2cc>
 8017b28:	f04f 0901 	mov.w	r9, #1
 8017b2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017b30:	464b      	mov	r3, r9
 8017b32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017b36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017b38:	2200      	movs	r2, #0
 8017b3a:	6042      	str	r2, [r0, #4]
 8017b3c:	2204      	movs	r2, #4
 8017b3e:	f102 0614 	add.w	r6, r2, #20
 8017b42:	429e      	cmp	r6, r3
 8017b44:	6841      	ldr	r1, [r0, #4]
 8017b46:	d92f      	bls.n	8017ba8 <_dtoa_r+0x2d8>
 8017b48:	4620      	mov	r0, r4
 8017b4a:	f001 f989 	bl	8018e60 <_Balloc>
 8017b4e:	9000      	str	r0, [sp, #0]
 8017b50:	2800      	cmp	r0, #0
 8017b52:	d14b      	bne.n	8017bec <_dtoa_r+0x31c>
 8017b54:	4b24      	ldr	r3, [pc, #144]	; (8017be8 <_dtoa_r+0x318>)
 8017b56:	4602      	mov	r2, r0
 8017b58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017b5c:	e6d1      	b.n	8017902 <_dtoa_r+0x32>
 8017b5e:	2301      	movs	r3, #1
 8017b60:	e7de      	b.n	8017b20 <_dtoa_r+0x250>
 8017b62:	2300      	movs	r3, #0
 8017b64:	9308      	str	r3, [sp, #32]
 8017b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b68:	eb0a 0903 	add.w	r9, sl, r3
 8017b6c:	f109 0301 	add.w	r3, r9, #1
 8017b70:	2b01      	cmp	r3, #1
 8017b72:	9301      	str	r3, [sp, #4]
 8017b74:	bfb8      	it	lt
 8017b76:	2301      	movlt	r3, #1
 8017b78:	e7dd      	b.n	8017b36 <_dtoa_r+0x266>
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	e7f2      	b.n	8017b64 <_dtoa_r+0x294>
 8017b7e:	2501      	movs	r5, #1
 8017b80:	2300      	movs	r3, #0
 8017b82:	9305      	str	r3, [sp, #20]
 8017b84:	9508      	str	r5, [sp, #32]
 8017b86:	f04f 39ff 	mov.w	r9, #4294967295
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017b90:	2312      	movs	r3, #18
 8017b92:	9209      	str	r2, [sp, #36]	; 0x24
 8017b94:	e7cf      	b.n	8017b36 <_dtoa_r+0x266>
 8017b96:	2301      	movs	r3, #1
 8017b98:	9308      	str	r3, [sp, #32]
 8017b9a:	e7f4      	b.n	8017b86 <_dtoa_r+0x2b6>
 8017b9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017ba0:	f8cd 9004 	str.w	r9, [sp, #4]
 8017ba4:	464b      	mov	r3, r9
 8017ba6:	e7c6      	b.n	8017b36 <_dtoa_r+0x266>
 8017ba8:	3101      	adds	r1, #1
 8017baa:	6041      	str	r1, [r0, #4]
 8017bac:	0052      	lsls	r2, r2, #1
 8017bae:	e7c6      	b.n	8017b3e <_dtoa_r+0x26e>
 8017bb0:	636f4361 	.word	0x636f4361
 8017bb4:	3fd287a7 	.word	0x3fd287a7
 8017bb8:	8b60c8b3 	.word	0x8b60c8b3
 8017bbc:	3fc68a28 	.word	0x3fc68a28
 8017bc0:	509f79fb 	.word	0x509f79fb
 8017bc4:	3fd34413 	.word	0x3fd34413
 8017bc8:	0801c639 	.word	0x0801c639
 8017bcc:	0801c650 	.word	0x0801c650
 8017bd0:	7ff00000 	.word	0x7ff00000
 8017bd4:	0801c635 	.word	0x0801c635
 8017bd8:	0801c62c 	.word	0x0801c62c
 8017bdc:	0801c8b2 	.word	0x0801c8b2
 8017be0:	3ff80000 	.word	0x3ff80000
 8017be4:	0801c7c8 	.word	0x0801c7c8
 8017be8:	0801c6af 	.word	0x0801c6af
 8017bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017bee:	9a00      	ldr	r2, [sp, #0]
 8017bf0:	601a      	str	r2, [r3, #0]
 8017bf2:	9b01      	ldr	r3, [sp, #4]
 8017bf4:	2b0e      	cmp	r3, #14
 8017bf6:	f200 80ad 	bhi.w	8017d54 <_dtoa_r+0x484>
 8017bfa:	2d00      	cmp	r5, #0
 8017bfc:	f000 80aa 	beq.w	8017d54 <_dtoa_r+0x484>
 8017c00:	f1ba 0f00 	cmp.w	sl, #0
 8017c04:	dd36      	ble.n	8017c74 <_dtoa_r+0x3a4>
 8017c06:	4ac3      	ldr	r2, [pc, #780]	; (8017f14 <_dtoa_r+0x644>)
 8017c08:	f00a 030f 	and.w	r3, sl, #15
 8017c0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017c10:	ed93 7b00 	vldr	d7, [r3]
 8017c14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017c18:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017c1c:	eeb0 8a47 	vmov.f32	s16, s14
 8017c20:	eef0 8a67 	vmov.f32	s17, s15
 8017c24:	d016      	beq.n	8017c54 <_dtoa_r+0x384>
 8017c26:	4bbc      	ldr	r3, [pc, #752]	; (8017f18 <_dtoa_r+0x648>)
 8017c28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017c2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017c30:	f7e8 fe1c 	bl	800086c <__aeabi_ddiv>
 8017c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c38:	f007 070f 	and.w	r7, r7, #15
 8017c3c:	2503      	movs	r5, #3
 8017c3e:	4eb6      	ldr	r6, [pc, #728]	; (8017f18 <_dtoa_r+0x648>)
 8017c40:	b957      	cbnz	r7, 8017c58 <_dtoa_r+0x388>
 8017c42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c46:	ec53 2b18 	vmov	r2, r3, d8
 8017c4a:	f7e8 fe0f 	bl	800086c <__aeabi_ddiv>
 8017c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c52:	e029      	b.n	8017ca8 <_dtoa_r+0x3d8>
 8017c54:	2502      	movs	r5, #2
 8017c56:	e7f2      	b.n	8017c3e <_dtoa_r+0x36e>
 8017c58:	07f9      	lsls	r1, r7, #31
 8017c5a:	d508      	bpl.n	8017c6e <_dtoa_r+0x39e>
 8017c5c:	ec51 0b18 	vmov	r0, r1, d8
 8017c60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017c64:	f7e8 fcd8 	bl	8000618 <__aeabi_dmul>
 8017c68:	ec41 0b18 	vmov	d8, r0, r1
 8017c6c:	3501      	adds	r5, #1
 8017c6e:	107f      	asrs	r7, r7, #1
 8017c70:	3608      	adds	r6, #8
 8017c72:	e7e5      	b.n	8017c40 <_dtoa_r+0x370>
 8017c74:	f000 80a6 	beq.w	8017dc4 <_dtoa_r+0x4f4>
 8017c78:	f1ca 0600 	rsb	r6, sl, #0
 8017c7c:	4ba5      	ldr	r3, [pc, #660]	; (8017f14 <_dtoa_r+0x644>)
 8017c7e:	4fa6      	ldr	r7, [pc, #664]	; (8017f18 <_dtoa_r+0x648>)
 8017c80:	f006 020f 	and.w	r2, r6, #15
 8017c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017c90:	f7e8 fcc2 	bl	8000618 <__aeabi_dmul>
 8017c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c98:	1136      	asrs	r6, r6, #4
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	2502      	movs	r5, #2
 8017c9e:	2e00      	cmp	r6, #0
 8017ca0:	f040 8085 	bne.w	8017dae <_dtoa_r+0x4de>
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d1d2      	bne.n	8017c4e <_dtoa_r+0x37e>
 8017ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	f000 808c 	beq.w	8017dc8 <_dtoa_r+0x4f8>
 8017cb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017cb4:	4b99      	ldr	r3, [pc, #612]	; (8017f1c <_dtoa_r+0x64c>)
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	4630      	mov	r0, r6
 8017cba:	4639      	mov	r1, r7
 8017cbc:	f7e8 ff1e 	bl	8000afc <__aeabi_dcmplt>
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	f000 8081 	beq.w	8017dc8 <_dtoa_r+0x4f8>
 8017cc6:	9b01      	ldr	r3, [sp, #4]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d07d      	beq.n	8017dc8 <_dtoa_r+0x4f8>
 8017ccc:	f1b9 0f00 	cmp.w	r9, #0
 8017cd0:	dd3c      	ble.n	8017d4c <_dtoa_r+0x47c>
 8017cd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017cd6:	9307      	str	r3, [sp, #28]
 8017cd8:	2200      	movs	r2, #0
 8017cda:	4b91      	ldr	r3, [pc, #580]	; (8017f20 <_dtoa_r+0x650>)
 8017cdc:	4630      	mov	r0, r6
 8017cde:	4639      	mov	r1, r7
 8017ce0:	f7e8 fc9a 	bl	8000618 <__aeabi_dmul>
 8017ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ce8:	3501      	adds	r5, #1
 8017cea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017cee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017cf2:	4628      	mov	r0, r5
 8017cf4:	f7e8 fc26 	bl	8000544 <__aeabi_i2d>
 8017cf8:	4632      	mov	r2, r6
 8017cfa:	463b      	mov	r3, r7
 8017cfc:	f7e8 fc8c 	bl	8000618 <__aeabi_dmul>
 8017d00:	4b88      	ldr	r3, [pc, #544]	; (8017f24 <_dtoa_r+0x654>)
 8017d02:	2200      	movs	r2, #0
 8017d04:	f7e8 fad2 	bl	80002ac <__adddf3>
 8017d08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d10:	9303      	str	r3, [sp, #12]
 8017d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d15c      	bne.n	8017dd2 <_dtoa_r+0x502>
 8017d18:	4b83      	ldr	r3, [pc, #524]	; (8017f28 <_dtoa_r+0x658>)
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	4630      	mov	r0, r6
 8017d1e:	4639      	mov	r1, r7
 8017d20:	f7e8 fac2 	bl	80002a8 <__aeabi_dsub>
 8017d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d28:	4606      	mov	r6, r0
 8017d2a:	460f      	mov	r7, r1
 8017d2c:	f7e8 ff04 	bl	8000b38 <__aeabi_dcmpgt>
 8017d30:	2800      	cmp	r0, #0
 8017d32:	f040 8296 	bne.w	8018262 <_dtoa_r+0x992>
 8017d36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017d3a:	4630      	mov	r0, r6
 8017d3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017d40:	4639      	mov	r1, r7
 8017d42:	f7e8 fedb 	bl	8000afc <__aeabi_dcmplt>
 8017d46:	2800      	cmp	r0, #0
 8017d48:	f040 8288 	bne.w	801825c <_dtoa_r+0x98c>
 8017d4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017d50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017d54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	f2c0 8158 	blt.w	801800c <_dtoa_r+0x73c>
 8017d5c:	f1ba 0f0e 	cmp.w	sl, #14
 8017d60:	f300 8154 	bgt.w	801800c <_dtoa_r+0x73c>
 8017d64:	4b6b      	ldr	r3, [pc, #428]	; (8017f14 <_dtoa_r+0x644>)
 8017d66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017d6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f280 80e3 	bge.w	8017f3c <_dtoa_r+0x66c>
 8017d76:	9b01      	ldr	r3, [sp, #4]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	f300 80df 	bgt.w	8017f3c <_dtoa_r+0x66c>
 8017d7e:	f040 826d 	bne.w	801825c <_dtoa_r+0x98c>
 8017d82:	4b69      	ldr	r3, [pc, #420]	; (8017f28 <_dtoa_r+0x658>)
 8017d84:	2200      	movs	r2, #0
 8017d86:	4640      	mov	r0, r8
 8017d88:	4649      	mov	r1, r9
 8017d8a:	f7e8 fc45 	bl	8000618 <__aeabi_dmul>
 8017d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d92:	f7e8 fec7 	bl	8000b24 <__aeabi_dcmpge>
 8017d96:	9e01      	ldr	r6, [sp, #4]
 8017d98:	4637      	mov	r7, r6
 8017d9a:	2800      	cmp	r0, #0
 8017d9c:	f040 8243 	bne.w	8018226 <_dtoa_r+0x956>
 8017da0:	9d00      	ldr	r5, [sp, #0]
 8017da2:	2331      	movs	r3, #49	; 0x31
 8017da4:	f805 3b01 	strb.w	r3, [r5], #1
 8017da8:	f10a 0a01 	add.w	sl, sl, #1
 8017dac:	e23f      	b.n	801822e <_dtoa_r+0x95e>
 8017dae:	07f2      	lsls	r2, r6, #31
 8017db0:	d505      	bpl.n	8017dbe <_dtoa_r+0x4ee>
 8017db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017db6:	f7e8 fc2f 	bl	8000618 <__aeabi_dmul>
 8017dba:	3501      	adds	r5, #1
 8017dbc:	2301      	movs	r3, #1
 8017dbe:	1076      	asrs	r6, r6, #1
 8017dc0:	3708      	adds	r7, #8
 8017dc2:	e76c      	b.n	8017c9e <_dtoa_r+0x3ce>
 8017dc4:	2502      	movs	r5, #2
 8017dc6:	e76f      	b.n	8017ca8 <_dtoa_r+0x3d8>
 8017dc8:	9b01      	ldr	r3, [sp, #4]
 8017dca:	f8cd a01c 	str.w	sl, [sp, #28]
 8017dce:	930c      	str	r3, [sp, #48]	; 0x30
 8017dd0:	e78d      	b.n	8017cee <_dtoa_r+0x41e>
 8017dd2:	9900      	ldr	r1, [sp, #0]
 8017dd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017dd8:	4b4e      	ldr	r3, [pc, #312]	; (8017f14 <_dtoa_r+0x644>)
 8017dda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017dde:	4401      	add	r1, r0
 8017de0:	9102      	str	r1, [sp, #8]
 8017de2:	9908      	ldr	r1, [sp, #32]
 8017de4:	eeb0 8a47 	vmov.f32	s16, s14
 8017de8:	eef0 8a67 	vmov.f32	s17, s15
 8017dec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017df0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017df4:	2900      	cmp	r1, #0
 8017df6:	d045      	beq.n	8017e84 <_dtoa_r+0x5b4>
 8017df8:	494c      	ldr	r1, [pc, #304]	; (8017f2c <_dtoa_r+0x65c>)
 8017dfa:	2000      	movs	r0, #0
 8017dfc:	f7e8 fd36 	bl	800086c <__aeabi_ddiv>
 8017e00:	ec53 2b18 	vmov	r2, r3, d8
 8017e04:	f7e8 fa50 	bl	80002a8 <__aeabi_dsub>
 8017e08:	9d00      	ldr	r5, [sp, #0]
 8017e0a:	ec41 0b18 	vmov	d8, r0, r1
 8017e0e:	4639      	mov	r1, r7
 8017e10:	4630      	mov	r0, r6
 8017e12:	f7e8 feb1 	bl	8000b78 <__aeabi_d2iz>
 8017e16:	900c      	str	r0, [sp, #48]	; 0x30
 8017e18:	f7e8 fb94 	bl	8000544 <__aeabi_i2d>
 8017e1c:	4602      	mov	r2, r0
 8017e1e:	460b      	mov	r3, r1
 8017e20:	4630      	mov	r0, r6
 8017e22:	4639      	mov	r1, r7
 8017e24:	f7e8 fa40 	bl	80002a8 <__aeabi_dsub>
 8017e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e2a:	3330      	adds	r3, #48	; 0x30
 8017e2c:	f805 3b01 	strb.w	r3, [r5], #1
 8017e30:	ec53 2b18 	vmov	r2, r3, d8
 8017e34:	4606      	mov	r6, r0
 8017e36:	460f      	mov	r7, r1
 8017e38:	f7e8 fe60 	bl	8000afc <__aeabi_dcmplt>
 8017e3c:	2800      	cmp	r0, #0
 8017e3e:	d165      	bne.n	8017f0c <_dtoa_r+0x63c>
 8017e40:	4632      	mov	r2, r6
 8017e42:	463b      	mov	r3, r7
 8017e44:	4935      	ldr	r1, [pc, #212]	; (8017f1c <_dtoa_r+0x64c>)
 8017e46:	2000      	movs	r0, #0
 8017e48:	f7e8 fa2e 	bl	80002a8 <__aeabi_dsub>
 8017e4c:	ec53 2b18 	vmov	r2, r3, d8
 8017e50:	f7e8 fe54 	bl	8000afc <__aeabi_dcmplt>
 8017e54:	2800      	cmp	r0, #0
 8017e56:	f040 80b9 	bne.w	8017fcc <_dtoa_r+0x6fc>
 8017e5a:	9b02      	ldr	r3, [sp, #8]
 8017e5c:	429d      	cmp	r5, r3
 8017e5e:	f43f af75 	beq.w	8017d4c <_dtoa_r+0x47c>
 8017e62:	4b2f      	ldr	r3, [pc, #188]	; (8017f20 <_dtoa_r+0x650>)
 8017e64:	ec51 0b18 	vmov	r0, r1, d8
 8017e68:	2200      	movs	r2, #0
 8017e6a:	f7e8 fbd5 	bl	8000618 <__aeabi_dmul>
 8017e6e:	4b2c      	ldr	r3, [pc, #176]	; (8017f20 <_dtoa_r+0x650>)
 8017e70:	ec41 0b18 	vmov	d8, r0, r1
 8017e74:	2200      	movs	r2, #0
 8017e76:	4630      	mov	r0, r6
 8017e78:	4639      	mov	r1, r7
 8017e7a:	f7e8 fbcd 	bl	8000618 <__aeabi_dmul>
 8017e7e:	4606      	mov	r6, r0
 8017e80:	460f      	mov	r7, r1
 8017e82:	e7c4      	b.n	8017e0e <_dtoa_r+0x53e>
 8017e84:	ec51 0b17 	vmov	r0, r1, d7
 8017e88:	f7e8 fbc6 	bl	8000618 <__aeabi_dmul>
 8017e8c:	9b02      	ldr	r3, [sp, #8]
 8017e8e:	9d00      	ldr	r5, [sp, #0]
 8017e90:	930c      	str	r3, [sp, #48]	; 0x30
 8017e92:	ec41 0b18 	vmov	d8, r0, r1
 8017e96:	4639      	mov	r1, r7
 8017e98:	4630      	mov	r0, r6
 8017e9a:	f7e8 fe6d 	bl	8000b78 <__aeabi_d2iz>
 8017e9e:	9011      	str	r0, [sp, #68]	; 0x44
 8017ea0:	f7e8 fb50 	bl	8000544 <__aeabi_i2d>
 8017ea4:	4602      	mov	r2, r0
 8017ea6:	460b      	mov	r3, r1
 8017ea8:	4630      	mov	r0, r6
 8017eaa:	4639      	mov	r1, r7
 8017eac:	f7e8 f9fc 	bl	80002a8 <__aeabi_dsub>
 8017eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017eb2:	3330      	adds	r3, #48	; 0x30
 8017eb4:	f805 3b01 	strb.w	r3, [r5], #1
 8017eb8:	9b02      	ldr	r3, [sp, #8]
 8017eba:	429d      	cmp	r5, r3
 8017ebc:	4606      	mov	r6, r0
 8017ebe:	460f      	mov	r7, r1
 8017ec0:	f04f 0200 	mov.w	r2, #0
 8017ec4:	d134      	bne.n	8017f30 <_dtoa_r+0x660>
 8017ec6:	4b19      	ldr	r3, [pc, #100]	; (8017f2c <_dtoa_r+0x65c>)
 8017ec8:	ec51 0b18 	vmov	r0, r1, d8
 8017ecc:	f7e8 f9ee 	bl	80002ac <__adddf3>
 8017ed0:	4602      	mov	r2, r0
 8017ed2:	460b      	mov	r3, r1
 8017ed4:	4630      	mov	r0, r6
 8017ed6:	4639      	mov	r1, r7
 8017ed8:	f7e8 fe2e 	bl	8000b38 <__aeabi_dcmpgt>
 8017edc:	2800      	cmp	r0, #0
 8017ede:	d175      	bne.n	8017fcc <_dtoa_r+0x6fc>
 8017ee0:	ec53 2b18 	vmov	r2, r3, d8
 8017ee4:	4911      	ldr	r1, [pc, #68]	; (8017f2c <_dtoa_r+0x65c>)
 8017ee6:	2000      	movs	r0, #0
 8017ee8:	f7e8 f9de 	bl	80002a8 <__aeabi_dsub>
 8017eec:	4602      	mov	r2, r0
 8017eee:	460b      	mov	r3, r1
 8017ef0:	4630      	mov	r0, r6
 8017ef2:	4639      	mov	r1, r7
 8017ef4:	f7e8 fe02 	bl	8000afc <__aeabi_dcmplt>
 8017ef8:	2800      	cmp	r0, #0
 8017efa:	f43f af27 	beq.w	8017d4c <_dtoa_r+0x47c>
 8017efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f00:	1e6b      	subs	r3, r5, #1
 8017f02:	930c      	str	r3, [sp, #48]	; 0x30
 8017f04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f08:	2b30      	cmp	r3, #48	; 0x30
 8017f0a:	d0f8      	beq.n	8017efe <_dtoa_r+0x62e>
 8017f0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017f10:	e04a      	b.n	8017fa8 <_dtoa_r+0x6d8>
 8017f12:	bf00      	nop
 8017f14:	0801c7c8 	.word	0x0801c7c8
 8017f18:	0801c7a0 	.word	0x0801c7a0
 8017f1c:	3ff00000 	.word	0x3ff00000
 8017f20:	40240000 	.word	0x40240000
 8017f24:	401c0000 	.word	0x401c0000
 8017f28:	40140000 	.word	0x40140000
 8017f2c:	3fe00000 	.word	0x3fe00000
 8017f30:	4baf      	ldr	r3, [pc, #700]	; (80181f0 <_dtoa_r+0x920>)
 8017f32:	f7e8 fb71 	bl	8000618 <__aeabi_dmul>
 8017f36:	4606      	mov	r6, r0
 8017f38:	460f      	mov	r7, r1
 8017f3a:	e7ac      	b.n	8017e96 <_dtoa_r+0x5c6>
 8017f3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017f40:	9d00      	ldr	r5, [sp, #0]
 8017f42:	4642      	mov	r2, r8
 8017f44:	464b      	mov	r3, r9
 8017f46:	4630      	mov	r0, r6
 8017f48:	4639      	mov	r1, r7
 8017f4a:	f7e8 fc8f 	bl	800086c <__aeabi_ddiv>
 8017f4e:	f7e8 fe13 	bl	8000b78 <__aeabi_d2iz>
 8017f52:	9002      	str	r0, [sp, #8]
 8017f54:	f7e8 faf6 	bl	8000544 <__aeabi_i2d>
 8017f58:	4642      	mov	r2, r8
 8017f5a:	464b      	mov	r3, r9
 8017f5c:	f7e8 fb5c 	bl	8000618 <__aeabi_dmul>
 8017f60:	4602      	mov	r2, r0
 8017f62:	460b      	mov	r3, r1
 8017f64:	4630      	mov	r0, r6
 8017f66:	4639      	mov	r1, r7
 8017f68:	f7e8 f99e 	bl	80002a8 <__aeabi_dsub>
 8017f6c:	9e02      	ldr	r6, [sp, #8]
 8017f6e:	9f01      	ldr	r7, [sp, #4]
 8017f70:	3630      	adds	r6, #48	; 0x30
 8017f72:	f805 6b01 	strb.w	r6, [r5], #1
 8017f76:	9e00      	ldr	r6, [sp, #0]
 8017f78:	1bae      	subs	r6, r5, r6
 8017f7a:	42b7      	cmp	r7, r6
 8017f7c:	4602      	mov	r2, r0
 8017f7e:	460b      	mov	r3, r1
 8017f80:	d137      	bne.n	8017ff2 <_dtoa_r+0x722>
 8017f82:	f7e8 f993 	bl	80002ac <__adddf3>
 8017f86:	4642      	mov	r2, r8
 8017f88:	464b      	mov	r3, r9
 8017f8a:	4606      	mov	r6, r0
 8017f8c:	460f      	mov	r7, r1
 8017f8e:	f7e8 fdd3 	bl	8000b38 <__aeabi_dcmpgt>
 8017f92:	b9c8      	cbnz	r0, 8017fc8 <_dtoa_r+0x6f8>
 8017f94:	4642      	mov	r2, r8
 8017f96:	464b      	mov	r3, r9
 8017f98:	4630      	mov	r0, r6
 8017f9a:	4639      	mov	r1, r7
 8017f9c:	f7e8 fda4 	bl	8000ae8 <__aeabi_dcmpeq>
 8017fa0:	b110      	cbz	r0, 8017fa8 <_dtoa_r+0x6d8>
 8017fa2:	9b02      	ldr	r3, [sp, #8]
 8017fa4:	07d9      	lsls	r1, r3, #31
 8017fa6:	d40f      	bmi.n	8017fc8 <_dtoa_r+0x6f8>
 8017fa8:	4620      	mov	r0, r4
 8017faa:	4659      	mov	r1, fp
 8017fac:	f000 ff98 	bl	8018ee0 <_Bfree>
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	702b      	strb	r3, [r5, #0]
 8017fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017fb6:	f10a 0001 	add.w	r0, sl, #1
 8017fba:	6018      	str	r0, [r3, #0]
 8017fbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	f43f acd8 	beq.w	8017974 <_dtoa_r+0xa4>
 8017fc4:	601d      	str	r5, [r3, #0]
 8017fc6:	e4d5      	b.n	8017974 <_dtoa_r+0xa4>
 8017fc8:	f8cd a01c 	str.w	sl, [sp, #28]
 8017fcc:	462b      	mov	r3, r5
 8017fce:	461d      	mov	r5, r3
 8017fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017fd4:	2a39      	cmp	r2, #57	; 0x39
 8017fd6:	d108      	bne.n	8017fea <_dtoa_r+0x71a>
 8017fd8:	9a00      	ldr	r2, [sp, #0]
 8017fda:	429a      	cmp	r2, r3
 8017fdc:	d1f7      	bne.n	8017fce <_dtoa_r+0x6fe>
 8017fde:	9a07      	ldr	r2, [sp, #28]
 8017fe0:	9900      	ldr	r1, [sp, #0]
 8017fe2:	3201      	adds	r2, #1
 8017fe4:	9207      	str	r2, [sp, #28]
 8017fe6:	2230      	movs	r2, #48	; 0x30
 8017fe8:	700a      	strb	r2, [r1, #0]
 8017fea:	781a      	ldrb	r2, [r3, #0]
 8017fec:	3201      	adds	r2, #1
 8017fee:	701a      	strb	r2, [r3, #0]
 8017ff0:	e78c      	b.n	8017f0c <_dtoa_r+0x63c>
 8017ff2:	4b7f      	ldr	r3, [pc, #508]	; (80181f0 <_dtoa_r+0x920>)
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	f7e8 fb0f 	bl	8000618 <__aeabi_dmul>
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	4606      	mov	r6, r0
 8018000:	460f      	mov	r7, r1
 8018002:	f7e8 fd71 	bl	8000ae8 <__aeabi_dcmpeq>
 8018006:	2800      	cmp	r0, #0
 8018008:	d09b      	beq.n	8017f42 <_dtoa_r+0x672>
 801800a:	e7cd      	b.n	8017fa8 <_dtoa_r+0x6d8>
 801800c:	9a08      	ldr	r2, [sp, #32]
 801800e:	2a00      	cmp	r2, #0
 8018010:	f000 80c4 	beq.w	801819c <_dtoa_r+0x8cc>
 8018014:	9a05      	ldr	r2, [sp, #20]
 8018016:	2a01      	cmp	r2, #1
 8018018:	f300 80a8 	bgt.w	801816c <_dtoa_r+0x89c>
 801801c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801801e:	2a00      	cmp	r2, #0
 8018020:	f000 80a0 	beq.w	8018164 <_dtoa_r+0x894>
 8018024:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018028:	9e06      	ldr	r6, [sp, #24]
 801802a:	4645      	mov	r5, r8
 801802c:	9a04      	ldr	r2, [sp, #16]
 801802e:	2101      	movs	r1, #1
 8018030:	441a      	add	r2, r3
 8018032:	4620      	mov	r0, r4
 8018034:	4498      	add	r8, r3
 8018036:	9204      	str	r2, [sp, #16]
 8018038:	f001 f858 	bl	80190ec <__i2b>
 801803c:	4607      	mov	r7, r0
 801803e:	2d00      	cmp	r5, #0
 8018040:	dd0b      	ble.n	801805a <_dtoa_r+0x78a>
 8018042:	9b04      	ldr	r3, [sp, #16]
 8018044:	2b00      	cmp	r3, #0
 8018046:	dd08      	ble.n	801805a <_dtoa_r+0x78a>
 8018048:	42ab      	cmp	r3, r5
 801804a:	9a04      	ldr	r2, [sp, #16]
 801804c:	bfa8      	it	ge
 801804e:	462b      	movge	r3, r5
 8018050:	eba8 0803 	sub.w	r8, r8, r3
 8018054:	1aed      	subs	r5, r5, r3
 8018056:	1ad3      	subs	r3, r2, r3
 8018058:	9304      	str	r3, [sp, #16]
 801805a:	9b06      	ldr	r3, [sp, #24]
 801805c:	b1fb      	cbz	r3, 801809e <_dtoa_r+0x7ce>
 801805e:	9b08      	ldr	r3, [sp, #32]
 8018060:	2b00      	cmp	r3, #0
 8018062:	f000 809f 	beq.w	80181a4 <_dtoa_r+0x8d4>
 8018066:	2e00      	cmp	r6, #0
 8018068:	dd11      	ble.n	801808e <_dtoa_r+0x7be>
 801806a:	4639      	mov	r1, r7
 801806c:	4632      	mov	r2, r6
 801806e:	4620      	mov	r0, r4
 8018070:	f001 f8f8 	bl	8019264 <__pow5mult>
 8018074:	465a      	mov	r2, fp
 8018076:	4601      	mov	r1, r0
 8018078:	4607      	mov	r7, r0
 801807a:	4620      	mov	r0, r4
 801807c:	f001 f84c 	bl	8019118 <__multiply>
 8018080:	4659      	mov	r1, fp
 8018082:	9007      	str	r0, [sp, #28]
 8018084:	4620      	mov	r0, r4
 8018086:	f000 ff2b 	bl	8018ee0 <_Bfree>
 801808a:	9b07      	ldr	r3, [sp, #28]
 801808c:	469b      	mov	fp, r3
 801808e:	9b06      	ldr	r3, [sp, #24]
 8018090:	1b9a      	subs	r2, r3, r6
 8018092:	d004      	beq.n	801809e <_dtoa_r+0x7ce>
 8018094:	4659      	mov	r1, fp
 8018096:	4620      	mov	r0, r4
 8018098:	f001 f8e4 	bl	8019264 <__pow5mult>
 801809c:	4683      	mov	fp, r0
 801809e:	2101      	movs	r1, #1
 80180a0:	4620      	mov	r0, r4
 80180a2:	f001 f823 	bl	80190ec <__i2b>
 80180a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	4606      	mov	r6, r0
 80180ac:	dd7c      	ble.n	80181a8 <_dtoa_r+0x8d8>
 80180ae:	461a      	mov	r2, r3
 80180b0:	4601      	mov	r1, r0
 80180b2:	4620      	mov	r0, r4
 80180b4:	f001 f8d6 	bl	8019264 <__pow5mult>
 80180b8:	9b05      	ldr	r3, [sp, #20]
 80180ba:	2b01      	cmp	r3, #1
 80180bc:	4606      	mov	r6, r0
 80180be:	dd76      	ble.n	80181ae <_dtoa_r+0x8de>
 80180c0:	2300      	movs	r3, #0
 80180c2:	9306      	str	r3, [sp, #24]
 80180c4:	6933      	ldr	r3, [r6, #16]
 80180c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80180ca:	6918      	ldr	r0, [r3, #16]
 80180cc:	f000 ffbe 	bl	801904c <__hi0bits>
 80180d0:	f1c0 0020 	rsb	r0, r0, #32
 80180d4:	9b04      	ldr	r3, [sp, #16]
 80180d6:	4418      	add	r0, r3
 80180d8:	f010 001f 	ands.w	r0, r0, #31
 80180dc:	f000 8086 	beq.w	80181ec <_dtoa_r+0x91c>
 80180e0:	f1c0 0320 	rsb	r3, r0, #32
 80180e4:	2b04      	cmp	r3, #4
 80180e6:	dd7f      	ble.n	80181e8 <_dtoa_r+0x918>
 80180e8:	f1c0 001c 	rsb	r0, r0, #28
 80180ec:	9b04      	ldr	r3, [sp, #16]
 80180ee:	4403      	add	r3, r0
 80180f0:	4480      	add	r8, r0
 80180f2:	4405      	add	r5, r0
 80180f4:	9304      	str	r3, [sp, #16]
 80180f6:	f1b8 0f00 	cmp.w	r8, #0
 80180fa:	dd05      	ble.n	8018108 <_dtoa_r+0x838>
 80180fc:	4659      	mov	r1, fp
 80180fe:	4642      	mov	r2, r8
 8018100:	4620      	mov	r0, r4
 8018102:	f001 f909 	bl	8019318 <__lshift>
 8018106:	4683      	mov	fp, r0
 8018108:	9b04      	ldr	r3, [sp, #16]
 801810a:	2b00      	cmp	r3, #0
 801810c:	dd05      	ble.n	801811a <_dtoa_r+0x84a>
 801810e:	4631      	mov	r1, r6
 8018110:	461a      	mov	r2, r3
 8018112:	4620      	mov	r0, r4
 8018114:	f001 f900 	bl	8019318 <__lshift>
 8018118:	4606      	mov	r6, r0
 801811a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801811c:	2b00      	cmp	r3, #0
 801811e:	d069      	beq.n	80181f4 <_dtoa_r+0x924>
 8018120:	4631      	mov	r1, r6
 8018122:	4658      	mov	r0, fp
 8018124:	f001 f964 	bl	80193f0 <__mcmp>
 8018128:	2800      	cmp	r0, #0
 801812a:	da63      	bge.n	80181f4 <_dtoa_r+0x924>
 801812c:	2300      	movs	r3, #0
 801812e:	4659      	mov	r1, fp
 8018130:	220a      	movs	r2, #10
 8018132:	4620      	mov	r0, r4
 8018134:	f000 fef6 	bl	8018f24 <__multadd>
 8018138:	9b08      	ldr	r3, [sp, #32]
 801813a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801813e:	4683      	mov	fp, r0
 8018140:	2b00      	cmp	r3, #0
 8018142:	f000 818f 	beq.w	8018464 <_dtoa_r+0xb94>
 8018146:	4639      	mov	r1, r7
 8018148:	2300      	movs	r3, #0
 801814a:	220a      	movs	r2, #10
 801814c:	4620      	mov	r0, r4
 801814e:	f000 fee9 	bl	8018f24 <__multadd>
 8018152:	f1b9 0f00 	cmp.w	r9, #0
 8018156:	4607      	mov	r7, r0
 8018158:	f300 808e 	bgt.w	8018278 <_dtoa_r+0x9a8>
 801815c:	9b05      	ldr	r3, [sp, #20]
 801815e:	2b02      	cmp	r3, #2
 8018160:	dc50      	bgt.n	8018204 <_dtoa_r+0x934>
 8018162:	e089      	b.n	8018278 <_dtoa_r+0x9a8>
 8018164:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018166:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801816a:	e75d      	b.n	8018028 <_dtoa_r+0x758>
 801816c:	9b01      	ldr	r3, [sp, #4]
 801816e:	1e5e      	subs	r6, r3, #1
 8018170:	9b06      	ldr	r3, [sp, #24]
 8018172:	42b3      	cmp	r3, r6
 8018174:	bfbf      	itttt	lt
 8018176:	9b06      	ldrlt	r3, [sp, #24]
 8018178:	9606      	strlt	r6, [sp, #24]
 801817a:	1af2      	sublt	r2, r6, r3
 801817c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801817e:	bfb6      	itet	lt
 8018180:	189b      	addlt	r3, r3, r2
 8018182:	1b9e      	subge	r6, r3, r6
 8018184:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018186:	9b01      	ldr	r3, [sp, #4]
 8018188:	bfb8      	it	lt
 801818a:	2600      	movlt	r6, #0
 801818c:	2b00      	cmp	r3, #0
 801818e:	bfb5      	itete	lt
 8018190:	eba8 0503 	sublt.w	r5, r8, r3
 8018194:	9b01      	ldrge	r3, [sp, #4]
 8018196:	2300      	movlt	r3, #0
 8018198:	4645      	movge	r5, r8
 801819a:	e747      	b.n	801802c <_dtoa_r+0x75c>
 801819c:	9e06      	ldr	r6, [sp, #24]
 801819e:	9f08      	ldr	r7, [sp, #32]
 80181a0:	4645      	mov	r5, r8
 80181a2:	e74c      	b.n	801803e <_dtoa_r+0x76e>
 80181a4:	9a06      	ldr	r2, [sp, #24]
 80181a6:	e775      	b.n	8018094 <_dtoa_r+0x7c4>
 80181a8:	9b05      	ldr	r3, [sp, #20]
 80181aa:	2b01      	cmp	r3, #1
 80181ac:	dc18      	bgt.n	80181e0 <_dtoa_r+0x910>
 80181ae:	9b02      	ldr	r3, [sp, #8]
 80181b0:	b9b3      	cbnz	r3, 80181e0 <_dtoa_r+0x910>
 80181b2:	9b03      	ldr	r3, [sp, #12]
 80181b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80181b8:	b9a3      	cbnz	r3, 80181e4 <_dtoa_r+0x914>
 80181ba:	9b03      	ldr	r3, [sp, #12]
 80181bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80181c0:	0d1b      	lsrs	r3, r3, #20
 80181c2:	051b      	lsls	r3, r3, #20
 80181c4:	b12b      	cbz	r3, 80181d2 <_dtoa_r+0x902>
 80181c6:	9b04      	ldr	r3, [sp, #16]
 80181c8:	3301      	adds	r3, #1
 80181ca:	9304      	str	r3, [sp, #16]
 80181cc:	f108 0801 	add.w	r8, r8, #1
 80181d0:	2301      	movs	r3, #1
 80181d2:	9306      	str	r3, [sp, #24]
 80181d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	f47f af74 	bne.w	80180c4 <_dtoa_r+0x7f4>
 80181dc:	2001      	movs	r0, #1
 80181de:	e779      	b.n	80180d4 <_dtoa_r+0x804>
 80181e0:	2300      	movs	r3, #0
 80181e2:	e7f6      	b.n	80181d2 <_dtoa_r+0x902>
 80181e4:	9b02      	ldr	r3, [sp, #8]
 80181e6:	e7f4      	b.n	80181d2 <_dtoa_r+0x902>
 80181e8:	d085      	beq.n	80180f6 <_dtoa_r+0x826>
 80181ea:	4618      	mov	r0, r3
 80181ec:	301c      	adds	r0, #28
 80181ee:	e77d      	b.n	80180ec <_dtoa_r+0x81c>
 80181f0:	40240000 	.word	0x40240000
 80181f4:	9b01      	ldr	r3, [sp, #4]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	dc38      	bgt.n	801826c <_dtoa_r+0x99c>
 80181fa:	9b05      	ldr	r3, [sp, #20]
 80181fc:	2b02      	cmp	r3, #2
 80181fe:	dd35      	ble.n	801826c <_dtoa_r+0x99c>
 8018200:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018204:	f1b9 0f00 	cmp.w	r9, #0
 8018208:	d10d      	bne.n	8018226 <_dtoa_r+0x956>
 801820a:	4631      	mov	r1, r6
 801820c:	464b      	mov	r3, r9
 801820e:	2205      	movs	r2, #5
 8018210:	4620      	mov	r0, r4
 8018212:	f000 fe87 	bl	8018f24 <__multadd>
 8018216:	4601      	mov	r1, r0
 8018218:	4606      	mov	r6, r0
 801821a:	4658      	mov	r0, fp
 801821c:	f001 f8e8 	bl	80193f0 <__mcmp>
 8018220:	2800      	cmp	r0, #0
 8018222:	f73f adbd 	bgt.w	8017da0 <_dtoa_r+0x4d0>
 8018226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018228:	9d00      	ldr	r5, [sp, #0]
 801822a:	ea6f 0a03 	mvn.w	sl, r3
 801822e:	f04f 0800 	mov.w	r8, #0
 8018232:	4631      	mov	r1, r6
 8018234:	4620      	mov	r0, r4
 8018236:	f000 fe53 	bl	8018ee0 <_Bfree>
 801823a:	2f00      	cmp	r7, #0
 801823c:	f43f aeb4 	beq.w	8017fa8 <_dtoa_r+0x6d8>
 8018240:	f1b8 0f00 	cmp.w	r8, #0
 8018244:	d005      	beq.n	8018252 <_dtoa_r+0x982>
 8018246:	45b8      	cmp	r8, r7
 8018248:	d003      	beq.n	8018252 <_dtoa_r+0x982>
 801824a:	4641      	mov	r1, r8
 801824c:	4620      	mov	r0, r4
 801824e:	f000 fe47 	bl	8018ee0 <_Bfree>
 8018252:	4639      	mov	r1, r7
 8018254:	4620      	mov	r0, r4
 8018256:	f000 fe43 	bl	8018ee0 <_Bfree>
 801825a:	e6a5      	b.n	8017fa8 <_dtoa_r+0x6d8>
 801825c:	2600      	movs	r6, #0
 801825e:	4637      	mov	r7, r6
 8018260:	e7e1      	b.n	8018226 <_dtoa_r+0x956>
 8018262:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018264:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018268:	4637      	mov	r7, r6
 801826a:	e599      	b.n	8017da0 <_dtoa_r+0x4d0>
 801826c:	9b08      	ldr	r3, [sp, #32]
 801826e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018272:	2b00      	cmp	r3, #0
 8018274:	f000 80fd 	beq.w	8018472 <_dtoa_r+0xba2>
 8018278:	2d00      	cmp	r5, #0
 801827a:	dd05      	ble.n	8018288 <_dtoa_r+0x9b8>
 801827c:	4639      	mov	r1, r7
 801827e:	462a      	mov	r2, r5
 8018280:	4620      	mov	r0, r4
 8018282:	f001 f849 	bl	8019318 <__lshift>
 8018286:	4607      	mov	r7, r0
 8018288:	9b06      	ldr	r3, [sp, #24]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d05c      	beq.n	8018348 <_dtoa_r+0xa78>
 801828e:	6879      	ldr	r1, [r7, #4]
 8018290:	4620      	mov	r0, r4
 8018292:	f000 fde5 	bl	8018e60 <_Balloc>
 8018296:	4605      	mov	r5, r0
 8018298:	b928      	cbnz	r0, 80182a6 <_dtoa_r+0x9d6>
 801829a:	4b80      	ldr	r3, [pc, #512]	; (801849c <_dtoa_r+0xbcc>)
 801829c:	4602      	mov	r2, r0
 801829e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80182a2:	f7ff bb2e 	b.w	8017902 <_dtoa_r+0x32>
 80182a6:	693a      	ldr	r2, [r7, #16]
 80182a8:	3202      	adds	r2, #2
 80182aa:	0092      	lsls	r2, r2, #2
 80182ac:	f107 010c 	add.w	r1, r7, #12
 80182b0:	300c      	adds	r0, #12
 80182b2:	f7fd f8bb 	bl	801542c <memcpy>
 80182b6:	2201      	movs	r2, #1
 80182b8:	4629      	mov	r1, r5
 80182ba:	4620      	mov	r0, r4
 80182bc:	f001 f82c 	bl	8019318 <__lshift>
 80182c0:	9b00      	ldr	r3, [sp, #0]
 80182c2:	3301      	adds	r3, #1
 80182c4:	9301      	str	r3, [sp, #4]
 80182c6:	9b00      	ldr	r3, [sp, #0]
 80182c8:	444b      	add	r3, r9
 80182ca:	9307      	str	r3, [sp, #28]
 80182cc:	9b02      	ldr	r3, [sp, #8]
 80182ce:	f003 0301 	and.w	r3, r3, #1
 80182d2:	46b8      	mov	r8, r7
 80182d4:	9306      	str	r3, [sp, #24]
 80182d6:	4607      	mov	r7, r0
 80182d8:	9b01      	ldr	r3, [sp, #4]
 80182da:	4631      	mov	r1, r6
 80182dc:	3b01      	subs	r3, #1
 80182de:	4658      	mov	r0, fp
 80182e0:	9302      	str	r3, [sp, #8]
 80182e2:	f7ff fa69 	bl	80177b8 <quorem>
 80182e6:	4603      	mov	r3, r0
 80182e8:	3330      	adds	r3, #48	; 0x30
 80182ea:	9004      	str	r0, [sp, #16]
 80182ec:	4641      	mov	r1, r8
 80182ee:	4658      	mov	r0, fp
 80182f0:	9308      	str	r3, [sp, #32]
 80182f2:	f001 f87d 	bl	80193f0 <__mcmp>
 80182f6:	463a      	mov	r2, r7
 80182f8:	4681      	mov	r9, r0
 80182fa:	4631      	mov	r1, r6
 80182fc:	4620      	mov	r0, r4
 80182fe:	f001 f893 	bl	8019428 <__mdiff>
 8018302:	68c2      	ldr	r2, [r0, #12]
 8018304:	9b08      	ldr	r3, [sp, #32]
 8018306:	4605      	mov	r5, r0
 8018308:	bb02      	cbnz	r2, 801834c <_dtoa_r+0xa7c>
 801830a:	4601      	mov	r1, r0
 801830c:	4658      	mov	r0, fp
 801830e:	f001 f86f 	bl	80193f0 <__mcmp>
 8018312:	9b08      	ldr	r3, [sp, #32]
 8018314:	4602      	mov	r2, r0
 8018316:	4629      	mov	r1, r5
 8018318:	4620      	mov	r0, r4
 801831a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801831e:	f000 fddf 	bl	8018ee0 <_Bfree>
 8018322:	9b05      	ldr	r3, [sp, #20]
 8018324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018326:	9d01      	ldr	r5, [sp, #4]
 8018328:	ea43 0102 	orr.w	r1, r3, r2
 801832c:	9b06      	ldr	r3, [sp, #24]
 801832e:	430b      	orrs	r3, r1
 8018330:	9b08      	ldr	r3, [sp, #32]
 8018332:	d10d      	bne.n	8018350 <_dtoa_r+0xa80>
 8018334:	2b39      	cmp	r3, #57	; 0x39
 8018336:	d029      	beq.n	801838c <_dtoa_r+0xabc>
 8018338:	f1b9 0f00 	cmp.w	r9, #0
 801833c:	dd01      	ble.n	8018342 <_dtoa_r+0xa72>
 801833e:	9b04      	ldr	r3, [sp, #16]
 8018340:	3331      	adds	r3, #49	; 0x31
 8018342:	9a02      	ldr	r2, [sp, #8]
 8018344:	7013      	strb	r3, [r2, #0]
 8018346:	e774      	b.n	8018232 <_dtoa_r+0x962>
 8018348:	4638      	mov	r0, r7
 801834a:	e7b9      	b.n	80182c0 <_dtoa_r+0x9f0>
 801834c:	2201      	movs	r2, #1
 801834e:	e7e2      	b.n	8018316 <_dtoa_r+0xa46>
 8018350:	f1b9 0f00 	cmp.w	r9, #0
 8018354:	db06      	blt.n	8018364 <_dtoa_r+0xa94>
 8018356:	9905      	ldr	r1, [sp, #20]
 8018358:	ea41 0909 	orr.w	r9, r1, r9
 801835c:	9906      	ldr	r1, [sp, #24]
 801835e:	ea59 0101 	orrs.w	r1, r9, r1
 8018362:	d120      	bne.n	80183a6 <_dtoa_r+0xad6>
 8018364:	2a00      	cmp	r2, #0
 8018366:	ddec      	ble.n	8018342 <_dtoa_r+0xa72>
 8018368:	4659      	mov	r1, fp
 801836a:	2201      	movs	r2, #1
 801836c:	4620      	mov	r0, r4
 801836e:	9301      	str	r3, [sp, #4]
 8018370:	f000 ffd2 	bl	8019318 <__lshift>
 8018374:	4631      	mov	r1, r6
 8018376:	4683      	mov	fp, r0
 8018378:	f001 f83a 	bl	80193f0 <__mcmp>
 801837c:	2800      	cmp	r0, #0
 801837e:	9b01      	ldr	r3, [sp, #4]
 8018380:	dc02      	bgt.n	8018388 <_dtoa_r+0xab8>
 8018382:	d1de      	bne.n	8018342 <_dtoa_r+0xa72>
 8018384:	07da      	lsls	r2, r3, #31
 8018386:	d5dc      	bpl.n	8018342 <_dtoa_r+0xa72>
 8018388:	2b39      	cmp	r3, #57	; 0x39
 801838a:	d1d8      	bne.n	801833e <_dtoa_r+0xa6e>
 801838c:	9a02      	ldr	r2, [sp, #8]
 801838e:	2339      	movs	r3, #57	; 0x39
 8018390:	7013      	strb	r3, [r2, #0]
 8018392:	462b      	mov	r3, r5
 8018394:	461d      	mov	r5, r3
 8018396:	3b01      	subs	r3, #1
 8018398:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801839c:	2a39      	cmp	r2, #57	; 0x39
 801839e:	d050      	beq.n	8018442 <_dtoa_r+0xb72>
 80183a0:	3201      	adds	r2, #1
 80183a2:	701a      	strb	r2, [r3, #0]
 80183a4:	e745      	b.n	8018232 <_dtoa_r+0x962>
 80183a6:	2a00      	cmp	r2, #0
 80183a8:	dd03      	ble.n	80183b2 <_dtoa_r+0xae2>
 80183aa:	2b39      	cmp	r3, #57	; 0x39
 80183ac:	d0ee      	beq.n	801838c <_dtoa_r+0xabc>
 80183ae:	3301      	adds	r3, #1
 80183b0:	e7c7      	b.n	8018342 <_dtoa_r+0xa72>
 80183b2:	9a01      	ldr	r2, [sp, #4]
 80183b4:	9907      	ldr	r1, [sp, #28]
 80183b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80183ba:	428a      	cmp	r2, r1
 80183bc:	d02a      	beq.n	8018414 <_dtoa_r+0xb44>
 80183be:	4659      	mov	r1, fp
 80183c0:	2300      	movs	r3, #0
 80183c2:	220a      	movs	r2, #10
 80183c4:	4620      	mov	r0, r4
 80183c6:	f000 fdad 	bl	8018f24 <__multadd>
 80183ca:	45b8      	cmp	r8, r7
 80183cc:	4683      	mov	fp, r0
 80183ce:	f04f 0300 	mov.w	r3, #0
 80183d2:	f04f 020a 	mov.w	r2, #10
 80183d6:	4641      	mov	r1, r8
 80183d8:	4620      	mov	r0, r4
 80183da:	d107      	bne.n	80183ec <_dtoa_r+0xb1c>
 80183dc:	f000 fda2 	bl	8018f24 <__multadd>
 80183e0:	4680      	mov	r8, r0
 80183e2:	4607      	mov	r7, r0
 80183e4:	9b01      	ldr	r3, [sp, #4]
 80183e6:	3301      	adds	r3, #1
 80183e8:	9301      	str	r3, [sp, #4]
 80183ea:	e775      	b.n	80182d8 <_dtoa_r+0xa08>
 80183ec:	f000 fd9a 	bl	8018f24 <__multadd>
 80183f0:	4639      	mov	r1, r7
 80183f2:	4680      	mov	r8, r0
 80183f4:	2300      	movs	r3, #0
 80183f6:	220a      	movs	r2, #10
 80183f8:	4620      	mov	r0, r4
 80183fa:	f000 fd93 	bl	8018f24 <__multadd>
 80183fe:	4607      	mov	r7, r0
 8018400:	e7f0      	b.n	80183e4 <_dtoa_r+0xb14>
 8018402:	f1b9 0f00 	cmp.w	r9, #0
 8018406:	9a00      	ldr	r2, [sp, #0]
 8018408:	bfcc      	ite	gt
 801840a:	464d      	movgt	r5, r9
 801840c:	2501      	movle	r5, #1
 801840e:	4415      	add	r5, r2
 8018410:	f04f 0800 	mov.w	r8, #0
 8018414:	4659      	mov	r1, fp
 8018416:	2201      	movs	r2, #1
 8018418:	4620      	mov	r0, r4
 801841a:	9301      	str	r3, [sp, #4]
 801841c:	f000 ff7c 	bl	8019318 <__lshift>
 8018420:	4631      	mov	r1, r6
 8018422:	4683      	mov	fp, r0
 8018424:	f000 ffe4 	bl	80193f0 <__mcmp>
 8018428:	2800      	cmp	r0, #0
 801842a:	dcb2      	bgt.n	8018392 <_dtoa_r+0xac2>
 801842c:	d102      	bne.n	8018434 <_dtoa_r+0xb64>
 801842e:	9b01      	ldr	r3, [sp, #4]
 8018430:	07db      	lsls	r3, r3, #31
 8018432:	d4ae      	bmi.n	8018392 <_dtoa_r+0xac2>
 8018434:	462b      	mov	r3, r5
 8018436:	461d      	mov	r5, r3
 8018438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801843c:	2a30      	cmp	r2, #48	; 0x30
 801843e:	d0fa      	beq.n	8018436 <_dtoa_r+0xb66>
 8018440:	e6f7      	b.n	8018232 <_dtoa_r+0x962>
 8018442:	9a00      	ldr	r2, [sp, #0]
 8018444:	429a      	cmp	r2, r3
 8018446:	d1a5      	bne.n	8018394 <_dtoa_r+0xac4>
 8018448:	f10a 0a01 	add.w	sl, sl, #1
 801844c:	2331      	movs	r3, #49	; 0x31
 801844e:	e779      	b.n	8018344 <_dtoa_r+0xa74>
 8018450:	4b13      	ldr	r3, [pc, #76]	; (80184a0 <_dtoa_r+0xbd0>)
 8018452:	f7ff baaf 	b.w	80179b4 <_dtoa_r+0xe4>
 8018456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018458:	2b00      	cmp	r3, #0
 801845a:	f47f aa86 	bne.w	801796a <_dtoa_r+0x9a>
 801845e:	4b11      	ldr	r3, [pc, #68]	; (80184a4 <_dtoa_r+0xbd4>)
 8018460:	f7ff baa8 	b.w	80179b4 <_dtoa_r+0xe4>
 8018464:	f1b9 0f00 	cmp.w	r9, #0
 8018468:	dc03      	bgt.n	8018472 <_dtoa_r+0xba2>
 801846a:	9b05      	ldr	r3, [sp, #20]
 801846c:	2b02      	cmp	r3, #2
 801846e:	f73f aec9 	bgt.w	8018204 <_dtoa_r+0x934>
 8018472:	9d00      	ldr	r5, [sp, #0]
 8018474:	4631      	mov	r1, r6
 8018476:	4658      	mov	r0, fp
 8018478:	f7ff f99e 	bl	80177b8 <quorem>
 801847c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018480:	f805 3b01 	strb.w	r3, [r5], #1
 8018484:	9a00      	ldr	r2, [sp, #0]
 8018486:	1aaa      	subs	r2, r5, r2
 8018488:	4591      	cmp	r9, r2
 801848a:	ddba      	ble.n	8018402 <_dtoa_r+0xb32>
 801848c:	4659      	mov	r1, fp
 801848e:	2300      	movs	r3, #0
 8018490:	220a      	movs	r2, #10
 8018492:	4620      	mov	r0, r4
 8018494:	f000 fd46 	bl	8018f24 <__multadd>
 8018498:	4683      	mov	fp, r0
 801849a:	e7eb      	b.n	8018474 <_dtoa_r+0xba4>
 801849c:	0801c6af 	.word	0x0801c6af
 80184a0:	0801c8b1 	.word	0x0801c8b1
 80184a4:	0801c62c 	.word	0x0801c62c

080184a8 <__sflush_r>:
 80184a8:	898a      	ldrh	r2, [r1, #12]
 80184aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184ae:	4605      	mov	r5, r0
 80184b0:	0710      	lsls	r0, r2, #28
 80184b2:	460c      	mov	r4, r1
 80184b4:	d458      	bmi.n	8018568 <__sflush_r+0xc0>
 80184b6:	684b      	ldr	r3, [r1, #4]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	dc05      	bgt.n	80184c8 <__sflush_r+0x20>
 80184bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80184be:	2b00      	cmp	r3, #0
 80184c0:	dc02      	bgt.n	80184c8 <__sflush_r+0x20>
 80184c2:	2000      	movs	r0, #0
 80184c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80184ca:	2e00      	cmp	r6, #0
 80184cc:	d0f9      	beq.n	80184c2 <__sflush_r+0x1a>
 80184ce:	2300      	movs	r3, #0
 80184d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80184d4:	682f      	ldr	r7, [r5, #0]
 80184d6:	602b      	str	r3, [r5, #0]
 80184d8:	d032      	beq.n	8018540 <__sflush_r+0x98>
 80184da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80184dc:	89a3      	ldrh	r3, [r4, #12]
 80184de:	075a      	lsls	r2, r3, #29
 80184e0:	d505      	bpl.n	80184ee <__sflush_r+0x46>
 80184e2:	6863      	ldr	r3, [r4, #4]
 80184e4:	1ac0      	subs	r0, r0, r3
 80184e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80184e8:	b10b      	cbz	r3, 80184ee <__sflush_r+0x46>
 80184ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80184ec:	1ac0      	subs	r0, r0, r3
 80184ee:	2300      	movs	r3, #0
 80184f0:	4602      	mov	r2, r0
 80184f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80184f4:	6a21      	ldr	r1, [r4, #32]
 80184f6:	4628      	mov	r0, r5
 80184f8:	47b0      	blx	r6
 80184fa:	1c43      	adds	r3, r0, #1
 80184fc:	89a3      	ldrh	r3, [r4, #12]
 80184fe:	d106      	bne.n	801850e <__sflush_r+0x66>
 8018500:	6829      	ldr	r1, [r5, #0]
 8018502:	291d      	cmp	r1, #29
 8018504:	d82c      	bhi.n	8018560 <__sflush_r+0xb8>
 8018506:	4a2a      	ldr	r2, [pc, #168]	; (80185b0 <__sflush_r+0x108>)
 8018508:	40ca      	lsrs	r2, r1
 801850a:	07d6      	lsls	r6, r2, #31
 801850c:	d528      	bpl.n	8018560 <__sflush_r+0xb8>
 801850e:	2200      	movs	r2, #0
 8018510:	6062      	str	r2, [r4, #4]
 8018512:	04d9      	lsls	r1, r3, #19
 8018514:	6922      	ldr	r2, [r4, #16]
 8018516:	6022      	str	r2, [r4, #0]
 8018518:	d504      	bpl.n	8018524 <__sflush_r+0x7c>
 801851a:	1c42      	adds	r2, r0, #1
 801851c:	d101      	bne.n	8018522 <__sflush_r+0x7a>
 801851e:	682b      	ldr	r3, [r5, #0]
 8018520:	b903      	cbnz	r3, 8018524 <__sflush_r+0x7c>
 8018522:	6560      	str	r0, [r4, #84]	; 0x54
 8018524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018526:	602f      	str	r7, [r5, #0]
 8018528:	2900      	cmp	r1, #0
 801852a:	d0ca      	beq.n	80184c2 <__sflush_r+0x1a>
 801852c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018530:	4299      	cmp	r1, r3
 8018532:	d002      	beq.n	801853a <__sflush_r+0x92>
 8018534:	4628      	mov	r0, r5
 8018536:	f7fc ffa9 	bl	801548c <_free_r>
 801853a:	2000      	movs	r0, #0
 801853c:	6360      	str	r0, [r4, #52]	; 0x34
 801853e:	e7c1      	b.n	80184c4 <__sflush_r+0x1c>
 8018540:	6a21      	ldr	r1, [r4, #32]
 8018542:	2301      	movs	r3, #1
 8018544:	4628      	mov	r0, r5
 8018546:	47b0      	blx	r6
 8018548:	1c41      	adds	r1, r0, #1
 801854a:	d1c7      	bne.n	80184dc <__sflush_r+0x34>
 801854c:	682b      	ldr	r3, [r5, #0]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d0c4      	beq.n	80184dc <__sflush_r+0x34>
 8018552:	2b1d      	cmp	r3, #29
 8018554:	d001      	beq.n	801855a <__sflush_r+0xb2>
 8018556:	2b16      	cmp	r3, #22
 8018558:	d101      	bne.n	801855e <__sflush_r+0xb6>
 801855a:	602f      	str	r7, [r5, #0]
 801855c:	e7b1      	b.n	80184c2 <__sflush_r+0x1a>
 801855e:	89a3      	ldrh	r3, [r4, #12]
 8018560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018564:	81a3      	strh	r3, [r4, #12]
 8018566:	e7ad      	b.n	80184c4 <__sflush_r+0x1c>
 8018568:	690f      	ldr	r7, [r1, #16]
 801856a:	2f00      	cmp	r7, #0
 801856c:	d0a9      	beq.n	80184c2 <__sflush_r+0x1a>
 801856e:	0793      	lsls	r3, r2, #30
 8018570:	680e      	ldr	r6, [r1, #0]
 8018572:	bf08      	it	eq
 8018574:	694b      	ldreq	r3, [r1, #20]
 8018576:	600f      	str	r7, [r1, #0]
 8018578:	bf18      	it	ne
 801857a:	2300      	movne	r3, #0
 801857c:	eba6 0807 	sub.w	r8, r6, r7
 8018580:	608b      	str	r3, [r1, #8]
 8018582:	f1b8 0f00 	cmp.w	r8, #0
 8018586:	dd9c      	ble.n	80184c2 <__sflush_r+0x1a>
 8018588:	6a21      	ldr	r1, [r4, #32]
 801858a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801858c:	4643      	mov	r3, r8
 801858e:	463a      	mov	r2, r7
 8018590:	4628      	mov	r0, r5
 8018592:	47b0      	blx	r6
 8018594:	2800      	cmp	r0, #0
 8018596:	dc06      	bgt.n	80185a6 <__sflush_r+0xfe>
 8018598:	89a3      	ldrh	r3, [r4, #12]
 801859a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801859e:	81a3      	strh	r3, [r4, #12]
 80185a0:	f04f 30ff 	mov.w	r0, #4294967295
 80185a4:	e78e      	b.n	80184c4 <__sflush_r+0x1c>
 80185a6:	4407      	add	r7, r0
 80185a8:	eba8 0800 	sub.w	r8, r8, r0
 80185ac:	e7e9      	b.n	8018582 <__sflush_r+0xda>
 80185ae:	bf00      	nop
 80185b0:	20400001 	.word	0x20400001

080185b4 <_fflush_r>:
 80185b4:	b538      	push	{r3, r4, r5, lr}
 80185b6:	690b      	ldr	r3, [r1, #16]
 80185b8:	4605      	mov	r5, r0
 80185ba:	460c      	mov	r4, r1
 80185bc:	b913      	cbnz	r3, 80185c4 <_fflush_r+0x10>
 80185be:	2500      	movs	r5, #0
 80185c0:	4628      	mov	r0, r5
 80185c2:	bd38      	pop	{r3, r4, r5, pc}
 80185c4:	b118      	cbz	r0, 80185ce <_fflush_r+0x1a>
 80185c6:	6983      	ldr	r3, [r0, #24]
 80185c8:	b90b      	cbnz	r3, 80185ce <_fflush_r+0x1a>
 80185ca:	f7fc fe61 	bl	8015290 <__sinit>
 80185ce:	4b14      	ldr	r3, [pc, #80]	; (8018620 <_fflush_r+0x6c>)
 80185d0:	429c      	cmp	r4, r3
 80185d2:	d11b      	bne.n	801860c <_fflush_r+0x58>
 80185d4:	686c      	ldr	r4, [r5, #4]
 80185d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d0ef      	beq.n	80185be <_fflush_r+0xa>
 80185de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80185e0:	07d0      	lsls	r0, r2, #31
 80185e2:	d404      	bmi.n	80185ee <_fflush_r+0x3a>
 80185e4:	0599      	lsls	r1, r3, #22
 80185e6:	d402      	bmi.n	80185ee <_fflush_r+0x3a>
 80185e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185ea:	f7fc ff14 	bl	8015416 <__retarget_lock_acquire_recursive>
 80185ee:	4628      	mov	r0, r5
 80185f0:	4621      	mov	r1, r4
 80185f2:	f7ff ff59 	bl	80184a8 <__sflush_r>
 80185f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185f8:	07da      	lsls	r2, r3, #31
 80185fa:	4605      	mov	r5, r0
 80185fc:	d4e0      	bmi.n	80185c0 <_fflush_r+0xc>
 80185fe:	89a3      	ldrh	r3, [r4, #12]
 8018600:	059b      	lsls	r3, r3, #22
 8018602:	d4dd      	bmi.n	80185c0 <_fflush_r+0xc>
 8018604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018606:	f7fc ff07 	bl	8015418 <__retarget_lock_release_recursive>
 801860a:	e7d9      	b.n	80185c0 <_fflush_r+0xc>
 801860c:	4b05      	ldr	r3, [pc, #20]	; (8018624 <_fflush_r+0x70>)
 801860e:	429c      	cmp	r4, r3
 8018610:	d101      	bne.n	8018616 <_fflush_r+0x62>
 8018612:	68ac      	ldr	r4, [r5, #8]
 8018614:	e7df      	b.n	80185d6 <_fflush_r+0x22>
 8018616:	4b04      	ldr	r3, [pc, #16]	; (8018628 <_fflush_r+0x74>)
 8018618:	429c      	cmp	r4, r3
 801861a:	bf08      	it	eq
 801861c:	68ec      	ldreq	r4, [r5, #12]
 801861e:	e7da      	b.n	80185d6 <_fflush_r+0x22>
 8018620:	0801c524 	.word	0x0801c524
 8018624:	0801c544 	.word	0x0801c544
 8018628:	0801c504 	.word	0x0801c504

0801862c <fiprintf>:
 801862c:	b40e      	push	{r1, r2, r3}
 801862e:	b503      	push	{r0, r1, lr}
 8018630:	4601      	mov	r1, r0
 8018632:	ab03      	add	r3, sp, #12
 8018634:	4805      	ldr	r0, [pc, #20]	; (801864c <fiprintf+0x20>)
 8018636:	f853 2b04 	ldr.w	r2, [r3], #4
 801863a:	6800      	ldr	r0, [r0, #0]
 801863c:	9301      	str	r3, [sp, #4]
 801863e:	f001 fc57 	bl	8019ef0 <_vfiprintf_r>
 8018642:	b002      	add	sp, #8
 8018644:	f85d eb04 	ldr.w	lr, [sp], #4
 8018648:	b003      	add	sp, #12
 801864a:	4770      	bx	lr
 801864c:	20000090 	.word	0x20000090

08018650 <rshift>:
 8018650:	6903      	ldr	r3, [r0, #16]
 8018652:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018656:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801865a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801865e:	f100 0414 	add.w	r4, r0, #20
 8018662:	dd45      	ble.n	80186f0 <rshift+0xa0>
 8018664:	f011 011f 	ands.w	r1, r1, #31
 8018668:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801866c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018670:	d10c      	bne.n	801868c <rshift+0x3c>
 8018672:	f100 0710 	add.w	r7, r0, #16
 8018676:	4629      	mov	r1, r5
 8018678:	42b1      	cmp	r1, r6
 801867a:	d334      	bcc.n	80186e6 <rshift+0x96>
 801867c:	1a9b      	subs	r3, r3, r2
 801867e:	009b      	lsls	r3, r3, #2
 8018680:	1eea      	subs	r2, r5, #3
 8018682:	4296      	cmp	r6, r2
 8018684:	bf38      	it	cc
 8018686:	2300      	movcc	r3, #0
 8018688:	4423      	add	r3, r4
 801868a:	e015      	b.n	80186b8 <rshift+0x68>
 801868c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018690:	f1c1 0820 	rsb	r8, r1, #32
 8018694:	40cf      	lsrs	r7, r1
 8018696:	f105 0e04 	add.w	lr, r5, #4
 801869a:	46a1      	mov	r9, r4
 801869c:	4576      	cmp	r6, lr
 801869e:	46f4      	mov	ip, lr
 80186a0:	d815      	bhi.n	80186ce <rshift+0x7e>
 80186a2:	1a9b      	subs	r3, r3, r2
 80186a4:	009a      	lsls	r2, r3, #2
 80186a6:	3a04      	subs	r2, #4
 80186a8:	3501      	adds	r5, #1
 80186aa:	42ae      	cmp	r6, r5
 80186ac:	bf38      	it	cc
 80186ae:	2200      	movcc	r2, #0
 80186b0:	18a3      	adds	r3, r4, r2
 80186b2:	50a7      	str	r7, [r4, r2]
 80186b4:	b107      	cbz	r7, 80186b8 <rshift+0x68>
 80186b6:	3304      	adds	r3, #4
 80186b8:	1b1a      	subs	r2, r3, r4
 80186ba:	42a3      	cmp	r3, r4
 80186bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80186c0:	bf08      	it	eq
 80186c2:	2300      	moveq	r3, #0
 80186c4:	6102      	str	r2, [r0, #16]
 80186c6:	bf08      	it	eq
 80186c8:	6143      	streq	r3, [r0, #20]
 80186ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186ce:	f8dc c000 	ldr.w	ip, [ip]
 80186d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80186d6:	ea4c 0707 	orr.w	r7, ip, r7
 80186da:	f849 7b04 	str.w	r7, [r9], #4
 80186de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80186e2:	40cf      	lsrs	r7, r1
 80186e4:	e7da      	b.n	801869c <rshift+0x4c>
 80186e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80186ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80186ee:	e7c3      	b.n	8018678 <rshift+0x28>
 80186f0:	4623      	mov	r3, r4
 80186f2:	e7e1      	b.n	80186b8 <rshift+0x68>

080186f4 <__hexdig_fun>:
 80186f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80186f8:	2b09      	cmp	r3, #9
 80186fa:	d802      	bhi.n	8018702 <__hexdig_fun+0xe>
 80186fc:	3820      	subs	r0, #32
 80186fe:	b2c0      	uxtb	r0, r0
 8018700:	4770      	bx	lr
 8018702:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018706:	2b05      	cmp	r3, #5
 8018708:	d801      	bhi.n	801870e <__hexdig_fun+0x1a>
 801870a:	3847      	subs	r0, #71	; 0x47
 801870c:	e7f7      	b.n	80186fe <__hexdig_fun+0xa>
 801870e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018712:	2b05      	cmp	r3, #5
 8018714:	d801      	bhi.n	801871a <__hexdig_fun+0x26>
 8018716:	3827      	subs	r0, #39	; 0x27
 8018718:	e7f1      	b.n	80186fe <__hexdig_fun+0xa>
 801871a:	2000      	movs	r0, #0
 801871c:	4770      	bx	lr
	...

08018720 <__gethex>:
 8018720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018724:	ed2d 8b02 	vpush	{d8}
 8018728:	b089      	sub	sp, #36	; 0x24
 801872a:	ee08 0a10 	vmov	s16, r0
 801872e:	9304      	str	r3, [sp, #16]
 8018730:	4bbc      	ldr	r3, [pc, #752]	; (8018a24 <__gethex+0x304>)
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	9301      	str	r3, [sp, #4]
 8018736:	4618      	mov	r0, r3
 8018738:	468b      	mov	fp, r1
 801873a:	4690      	mov	r8, r2
 801873c:	f7e7 fd58 	bl	80001f0 <strlen>
 8018740:	9b01      	ldr	r3, [sp, #4]
 8018742:	f8db 2000 	ldr.w	r2, [fp]
 8018746:	4403      	add	r3, r0
 8018748:	4682      	mov	sl, r0
 801874a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801874e:	9305      	str	r3, [sp, #20]
 8018750:	1c93      	adds	r3, r2, #2
 8018752:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018756:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801875a:	32fe      	adds	r2, #254	; 0xfe
 801875c:	18d1      	adds	r1, r2, r3
 801875e:	461f      	mov	r7, r3
 8018760:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018764:	9100      	str	r1, [sp, #0]
 8018766:	2830      	cmp	r0, #48	; 0x30
 8018768:	d0f8      	beq.n	801875c <__gethex+0x3c>
 801876a:	f7ff ffc3 	bl	80186f4 <__hexdig_fun>
 801876e:	4604      	mov	r4, r0
 8018770:	2800      	cmp	r0, #0
 8018772:	d13a      	bne.n	80187ea <__gethex+0xca>
 8018774:	9901      	ldr	r1, [sp, #4]
 8018776:	4652      	mov	r2, sl
 8018778:	4638      	mov	r0, r7
 801877a:	f7fd ff96 	bl	80166aa <strncmp>
 801877e:	4605      	mov	r5, r0
 8018780:	2800      	cmp	r0, #0
 8018782:	d168      	bne.n	8018856 <__gethex+0x136>
 8018784:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018788:	eb07 060a 	add.w	r6, r7, sl
 801878c:	f7ff ffb2 	bl	80186f4 <__hexdig_fun>
 8018790:	2800      	cmp	r0, #0
 8018792:	d062      	beq.n	801885a <__gethex+0x13a>
 8018794:	4633      	mov	r3, r6
 8018796:	7818      	ldrb	r0, [r3, #0]
 8018798:	2830      	cmp	r0, #48	; 0x30
 801879a:	461f      	mov	r7, r3
 801879c:	f103 0301 	add.w	r3, r3, #1
 80187a0:	d0f9      	beq.n	8018796 <__gethex+0x76>
 80187a2:	f7ff ffa7 	bl	80186f4 <__hexdig_fun>
 80187a6:	2301      	movs	r3, #1
 80187a8:	fab0 f480 	clz	r4, r0
 80187ac:	0964      	lsrs	r4, r4, #5
 80187ae:	4635      	mov	r5, r6
 80187b0:	9300      	str	r3, [sp, #0]
 80187b2:	463a      	mov	r2, r7
 80187b4:	4616      	mov	r6, r2
 80187b6:	3201      	adds	r2, #1
 80187b8:	7830      	ldrb	r0, [r6, #0]
 80187ba:	f7ff ff9b 	bl	80186f4 <__hexdig_fun>
 80187be:	2800      	cmp	r0, #0
 80187c0:	d1f8      	bne.n	80187b4 <__gethex+0x94>
 80187c2:	9901      	ldr	r1, [sp, #4]
 80187c4:	4652      	mov	r2, sl
 80187c6:	4630      	mov	r0, r6
 80187c8:	f7fd ff6f 	bl	80166aa <strncmp>
 80187cc:	b980      	cbnz	r0, 80187f0 <__gethex+0xd0>
 80187ce:	b94d      	cbnz	r5, 80187e4 <__gethex+0xc4>
 80187d0:	eb06 050a 	add.w	r5, r6, sl
 80187d4:	462a      	mov	r2, r5
 80187d6:	4616      	mov	r6, r2
 80187d8:	3201      	adds	r2, #1
 80187da:	7830      	ldrb	r0, [r6, #0]
 80187dc:	f7ff ff8a 	bl	80186f4 <__hexdig_fun>
 80187e0:	2800      	cmp	r0, #0
 80187e2:	d1f8      	bne.n	80187d6 <__gethex+0xb6>
 80187e4:	1bad      	subs	r5, r5, r6
 80187e6:	00ad      	lsls	r5, r5, #2
 80187e8:	e004      	b.n	80187f4 <__gethex+0xd4>
 80187ea:	2400      	movs	r4, #0
 80187ec:	4625      	mov	r5, r4
 80187ee:	e7e0      	b.n	80187b2 <__gethex+0x92>
 80187f0:	2d00      	cmp	r5, #0
 80187f2:	d1f7      	bne.n	80187e4 <__gethex+0xc4>
 80187f4:	7833      	ldrb	r3, [r6, #0]
 80187f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80187fa:	2b50      	cmp	r3, #80	; 0x50
 80187fc:	d13b      	bne.n	8018876 <__gethex+0x156>
 80187fe:	7873      	ldrb	r3, [r6, #1]
 8018800:	2b2b      	cmp	r3, #43	; 0x2b
 8018802:	d02c      	beq.n	801885e <__gethex+0x13e>
 8018804:	2b2d      	cmp	r3, #45	; 0x2d
 8018806:	d02e      	beq.n	8018866 <__gethex+0x146>
 8018808:	1c71      	adds	r1, r6, #1
 801880a:	f04f 0900 	mov.w	r9, #0
 801880e:	7808      	ldrb	r0, [r1, #0]
 8018810:	f7ff ff70 	bl	80186f4 <__hexdig_fun>
 8018814:	1e43      	subs	r3, r0, #1
 8018816:	b2db      	uxtb	r3, r3
 8018818:	2b18      	cmp	r3, #24
 801881a:	d82c      	bhi.n	8018876 <__gethex+0x156>
 801881c:	f1a0 0210 	sub.w	r2, r0, #16
 8018820:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018824:	f7ff ff66 	bl	80186f4 <__hexdig_fun>
 8018828:	1e43      	subs	r3, r0, #1
 801882a:	b2db      	uxtb	r3, r3
 801882c:	2b18      	cmp	r3, #24
 801882e:	d91d      	bls.n	801886c <__gethex+0x14c>
 8018830:	f1b9 0f00 	cmp.w	r9, #0
 8018834:	d000      	beq.n	8018838 <__gethex+0x118>
 8018836:	4252      	negs	r2, r2
 8018838:	4415      	add	r5, r2
 801883a:	f8cb 1000 	str.w	r1, [fp]
 801883e:	b1e4      	cbz	r4, 801887a <__gethex+0x15a>
 8018840:	9b00      	ldr	r3, [sp, #0]
 8018842:	2b00      	cmp	r3, #0
 8018844:	bf14      	ite	ne
 8018846:	2700      	movne	r7, #0
 8018848:	2706      	moveq	r7, #6
 801884a:	4638      	mov	r0, r7
 801884c:	b009      	add	sp, #36	; 0x24
 801884e:	ecbd 8b02 	vpop	{d8}
 8018852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018856:	463e      	mov	r6, r7
 8018858:	4625      	mov	r5, r4
 801885a:	2401      	movs	r4, #1
 801885c:	e7ca      	b.n	80187f4 <__gethex+0xd4>
 801885e:	f04f 0900 	mov.w	r9, #0
 8018862:	1cb1      	adds	r1, r6, #2
 8018864:	e7d3      	b.n	801880e <__gethex+0xee>
 8018866:	f04f 0901 	mov.w	r9, #1
 801886a:	e7fa      	b.n	8018862 <__gethex+0x142>
 801886c:	230a      	movs	r3, #10
 801886e:	fb03 0202 	mla	r2, r3, r2, r0
 8018872:	3a10      	subs	r2, #16
 8018874:	e7d4      	b.n	8018820 <__gethex+0x100>
 8018876:	4631      	mov	r1, r6
 8018878:	e7df      	b.n	801883a <__gethex+0x11a>
 801887a:	1bf3      	subs	r3, r6, r7
 801887c:	3b01      	subs	r3, #1
 801887e:	4621      	mov	r1, r4
 8018880:	2b07      	cmp	r3, #7
 8018882:	dc0b      	bgt.n	801889c <__gethex+0x17c>
 8018884:	ee18 0a10 	vmov	r0, s16
 8018888:	f000 faea 	bl	8018e60 <_Balloc>
 801888c:	4604      	mov	r4, r0
 801888e:	b940      	cbnz	r0, 80188a2 <__gethex+0x182>
 8018890:	4b65      	ldr	r3, [pc, #404]	; (8018a28 <__gethex+0x308>)
 8018892:	4602      	mov	r2, r0
 8018894:	21de      	movs	r1, #222	; 0xde
 8018896:	4865      	ldr	r0, [pc, #404]	; (8018a2c <__gethex+0x30c>)
 8018898:	f7fe ff60 	bl	801775c <__assert_func>
 801889c:	3101      	adds	r1, #1
 801889e:	105b      	asrs	r3, r3, #1
 80188a0:	e7ee      	b.n	8018880 <__gethex+0x160>
 80188a2:	f100 0914 	add.w	r9, r0, #20
 80188a6:	f04f 0b00 	mov.w	fp, #0
 80188aa:	f1ca 0301 	rsb	r3, sl, #1
 80188ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80188b2:	f8cd b000 	str.w	fp, [sp]
 80188b6:	9306      	str	r3, [sp, #24]
 80188b8:	42b7      	cmp	r7, r6
 80188ba:	d340      	bcc.n	801893e <__gethex+0x21e>
 80188bc:	9802      	ldr	r0, [sp, #8]
 80188be:	9b00      	ldr	r3, [sp, #0]
 80188c0:	f840 3b04 	str.w	r3, [r0], #4
 80188c4:	eba0 0009 	sub.w	r0, r0, r9
 80188c8:	1080      	asrs	r0, r0, #2
 80188ca:	0146      	lsls	r6, r0, #5
 80188cc:	6120      	str	r0, [r4, #16]
 80188ce:	4618      	mov	r0, r3
 80188d0:	f000 fbbc 	bl	801904c <__hi0bits>
 80188d4:	1a30      	subs	r0, r6, r0
 80188d6:	f8d8 6000 	ldr.w	r6, [r8]
 80188da:	42b0      	cmp	r0, r6
 80188dc:	dd63      	ble.n	80189a6 <__gethex+0x286>
 80188de:	1b87      	subs	r7, r0, r6
 80188e0:	4639      	mov	r1, r7
 80188e2:	4620      	mov	r0, r4
 80188e4:	f000 ff56 	bl	8019794 <__any_on>
 80188e8:	4682      	mov	sl, r0
 80188ea:	b1a8      	cbz	r0, 8018918 <__gethex+0x1f8>
 80188ec:	1e7b      	subs	r3, r7, #1
 80188ee:	1159      	asrs	r1, r3, #5
 80188f0:	f003 021f 	and.w	r2, r3, #31
 80188f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80188f8:	f04f 0a01 	mov.w	sl, #1
 80188fc:	fa0a f202 	lsl.w	r2, sl, r2
 8018900:	420a      	tst	r2, r1
 8018902:	d009      	beq.n	8018918 <__gethex+0x1f8>
 8018904:	4553      	cmp	r3, sl
 8018906:	dd05      	ble.n	8018914 <__gethex+0x1f4>
 8018908:	1eb9      	subs	r1, r7, #2
 801890a:	4620      	mov	r0, r4
 801890c:	f000 ff42 	bl	8019794 <__any_on>
 8018910:	2800      	cmp	r0, #0
 8018912:	d145      	bne.n	80189a0 <__gethex+0x280>
 8018914:	f04f 0a02 	mov.w	sl, #2
 8018918:	4639      	mov	r1, r7
 801891a:	4620      	mov	r0, r4
 801891c:	f7ff fe98 	bl	8018650 <rshift>
 8018920:	443d      	add	r5, r7
 8018922:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018926:	42ab      	cmp	r3, r5
 8018928:	da4c      	bge.n	80189c4 <__gethex+0x2a4>
 801892a:	ee18 0a10 	vmov	r0, s16
 801892e:	4621      	mov	r1, r4
 8018930:	f000 fad6 	bl	8018ee0 <_Bfree>
 8018934:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018936:	2300      	movs	r3, #0
 8018938:	6013      	str	r3, [r2, #0]
 801893a:	27a3      	movs	r7, #163	; 0xa3
 801893c:	e785      	b.n	801884a <__gethex+0x12a>
 801893e:	1e73      	subs	r3, r6, #1
 8018940:	9a05      	ldr	r2, [sp, #20]
 8018942:	9303      	str	r3, [sp, #12]
 8018944:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018948:	4293      	cmp	r3, r2
 801894a:	d019      	beq.n	8018980 <__gethex+0x260>
 801894c:	f1bb 0f20 	cmp.w	fp, #32
 8018950:	d107      	bne.n	8018962 <__gethex+0x242>
 8018952:	9b02      	ldr	r3, [sp, #8]
 8018954:	9a00      	ldr	r2, [sp, #0]
 8018956:	f843 2b04 	str.w	r2, [r3], #4
 801895a:	9302      	str	r3, [sp, #8]
 801895c:	2300      	movs	r3, #0
 801895e:	9300      	str	r3, [sp, #0]
 8018960:	469b      	mov	fp, r3
 8018962:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018966:	f7ff fec5 	bl	80186f4 <__hexdig_fun>
 801896a:	9b00      	ldr	r3, [sp, #0]
 801896c:	f000 000f 	and.w	r0, r0, #15
 8018970:	fa00 f00b 	lsl.w	r0, r0, fp
 8018974:	4303      	orrs	r3, r0
 8018976:	9300      	str	r3, [sp, #0]
 8018978:	f10b 0b04 	add.w	fp, fp, #4
 801897c:	9b03      	ldr	r3, [sp, #12]
 801897e:	e00d      	b.n	801899c <__gethex+0x27c>
 8018980:	9b03      	ldr	r3, [sp, #12]
 8018982:	9a06      	ldr	r2, [sp, #24]
 8018984:	4413      	add	r3, r2
 8018986:	42bb      	cmp	r3, r7
 8018988:	d3e0      	bcc.n	801894c <__gethex+0x22c>
 801898a:	4618      	mov	r0, r3
 801898c:	9901      	ldr	r1, [sp, #4]
 801898e:	9307      	str	r3, [sp, #28]
 8018990:	4652      	mov	r2, sl
 8018992:	f7fd fe8a 	bl	80166aa <strncmp>
 8018996:	9b07      	ldr	r3, [sp, #28]
 8018998:	2800      	cmp	r0, #0
 801899a:	d1d7      	bne.n	801894c <__gethex+0x22c>
 801899c:	461e      	mov	r6, r3
 801899e:	e78b      	b.n	80188b8 <__gethex+0x198>
 80189a0:	f04f 0a03 	mov.w	sl, #3
 80189a4:	e7b8      	b.n	8018918 <__gethex+0x1f8>
 80189a6:	da0a      	bge.n	80189be <__gethex+0x29e>
 80189a8:	1a37      	subs	r7, r6, r0
 80189aa:	4621      	mov	r1, r4
 80189ac:	ee18 0a10 	vmov	r0, s16
 80189b0:	463a      	mov	r2, r7
 80189b2:	f000 fcb1 	bl	8019318 <__lshift>
 80189b6:	1bed      	subs	r5, r5, r7
 80189b8:	4604      	mov	r4, r0
 80189ba:	f100 0914 	add.w	r9, r0, #20
 80189be:	f04f 0a00 	mov.w	sl, #0
 80189c2:	e7ae      	b.n	8018922 <__gethex+0x202>
 80189c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80189c8:	42a8      	cmp	r0, r5
 80189ca:	dd72      	ble.n	8018ab2 <__gethex+0x392>
 80189cc:	1b45      	subs	r5, r0, r5
 80189ce:	42ae      	cmp	r6, r5
 80189d0:	dc36      	bgt.n	8018a40 <__gethex+0x320>
 80189d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80189d6:	2b02      	cmp	r3, #2
 80189d8:	d02a      	beq.n	8018a30 <__gethex+0x310>
 80189da:	2b03      	cmp	r3, #3
 80189dc:	d02c      	beq.n	8018a38 <__gethex+0x318>
 80189de:	2b01      	cmp	r3, #1
 80189e0:	d115      	bne.n	8018a0e <__gethex+0x2ee>
 80189e2:	42ae      	cmp	r6, r5
 80189e4:	d113      	bne.n	8018a0e <__gethex+0x2ee>
 80189e6:	2e01      	cmp	r6, #1
 80189e8:	d10b      	bne.n	8018a02 <__gethex+0x2e2>
 80189ea:	9a04      	ldr	r2, [sp, #16]
 80189ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80189f0:	6013      	str	r3, [r2, #0]
 80189f2:	2301      	movs	r3, #1
 80189f4:	6123      	str	r3, [r4, #16]
 80189f6:	f8c9 3000 	str.w	r3, [r9]
 80189fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80189fc:	2762      	movs	r7, #98	; 0x62
 80189fe:	601c      	str	r4, [r3, #0]
 8018a00:	e723      	b.n	801884a <__gethex+0x12a>
 8018a02:	1e71      	subs	r1, r6, #1
 8018a04:	4620      	mov	r0, r4
 8018a06:	f000 fec5 	bl	8019794 <__any_on>
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	d1ed      	bne.n	80189ea <__gethex+0x2ca>
 8018a0e:	ee18 0a10 	vmov	r0, s16
 8018a12:	4621      	mov	r1, r4
 8018a14:	f000 fa64 	bl	8018ee0 <_Bfree>
 8018a18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	6013      	str	r3, [r2, #0]
 8018a1e:	2750      	movs	r7, #80	; 0x50
 8018a20:	e713      	b.n	801884a <__gethex+0x12a>
 8018a22:	bf00      	nop
 8018a24:	0801c72c 	.word	0x0801c72c
 8018a28:	0801c6af 	.word	0x0801c6af
 8018a2c:	0801c6c0 	.word	0x0801c6c0
 8018a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d1eb      	bne.n	8018a0e <__gethex+0x2ee>
 8018a36:	e7d8      	b.n	80189ea <__gethex+0x2ca>
 8018a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d1d5      	bne.n	80189ea <__gethex+0x2ca>
 8018a3e:	e7e6      	b.n	8018a0e <__gethex+0x2ee>
 8018a40:	1e6f      	subs	r7, r5, #1
 8018a42:	f1ba 0f00 	cmp.w	sl, #0
 8018a46:	d131      	bne.n	8018aac <__gethex+0x38c>
 8018a48:	b127      	cbz	r7, 8018a54 <__gethex+0x334>
 8018a4a:	4639      	mov	r1, r7
 8018a4c:	4620      	mov	r0, r4
 8018a4e:	f000 fea1 	bl	8019794 <__any_on>
 8018a52:	4682      	mov	sl, r0
 8018a54:	117b      	asrs	r3, r7, #5
 8018a56:	2101      	movs	r1, #1
 8018a58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018a5c:	f007 071f 	and.w	r7, r7, #31
 8018a60:	fa01 f707 	lsl.w	r7, r1, r7
 8018a64:	421f      	tst	r7, r3
 8018a66:	4629      	mov	r1, r5
 8018a68:	4620      	mov	r0, r4
 8018a6a:	bf18      	it	ne
 8018a6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8018a70:	1b76      	subs	r6, r6, r5
 8018a72:	f7ff fded 	bl	8018650 <rshift>
 8018a76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018a7a:	2702      	movs	r7, #2
 8018a7c:	f1ba 0f00 	cmp.w	sl, #0
 8018a80:	d048      	beq.n	8018b14 <__gethex+0x3f4>
 8018a82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a86:	2b02      	cmp	r3, #2
 8018a88:	d015      	beq.n	8018ab6 <__gethex+0x396>
 8018a8a:	2b03      	cmp	r3, #3
 8018a8c:	d017      	beq.n	8018abe <__gethex+0x39e>
 8018a8e:	2b01      	cmp	r3, #1
 8018a90:	d109      	bne.n	8018aa6 <__gethex+0x386>
 8018a92:	f01a 0f02 	tst.w	sl, #2
 8018a96:	d006      	beq.n	8018aa6 <__gethex+0x386>
 8018a98:	f8d9 0000 	ldr.w	r0, [r9]
 8018a9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8018aa0:	f01a 0f01 	tst.w	sl, #1
 8018aa4:	d10e      	bne.n	8018ac4 <__gethex+0x3a4>
 8018aa6:	f047 0710 	orr.w	r7, r7, #16
 8018aaa:	e033      	b.n	8018b14 <__gethex+0x3f4>
 8018aac:	f04f 0a01 	mov.w	sl, #1
 8018ab0:	e7d0      	b.n	8018a54 <__gethex+0x334>
 8018ab2:	2701      	movs	r7, #1
 8018ab4:	e7e2      	b.n	8018a7c <__gethex+0x35c>
 8018ab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ab8:	f1c3 0301 	rsb	r3, r3, #1
 8018abc:	9315      	str	r3, [sp, #84]	; 0x54
 8018abe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d0f0      	beq.n	8018aa6 <__gethex+0x386>
 8018ac4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018ac8:	f104 0314 	add.w	r3, r4, #20
 8018acc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018ad0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018ad4:	f04f 0c00 	mov.w	ip, #0
 8018ad8:	4618      	mov	r0, r3
 8018ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ade:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018ae2:	d01c      	beq.n	8018b1e <__gethex+0x3fe>
 8018ae4:	3201      	adds	r2, #1
 8018ae6:	6002      	str	r2, [r0, #0]
 8018ae8:	2f02      	cmp	r7, #2
 8018aea:	f104 0314 	add.w	r3, r4, #20
 8018aee:	d13f      	bne.n	8018b70 <__gethex+0x450>
 8018af0:	f8d8 2000 	ldr.w	r2, [r8]
 8018af4:	3a01      	subs	r2, #1
 8018af6:	42b2      	cmp	r2, r6
 8018af8:	d10a      	bne.n	8018b10 <__gethex+0x3f0>
 8018afa:	1171      	asrs	r1, r6, #5
 8018afc:	2201      	movs	r2, #1
 8018afe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018b02:	f006 061f 	and.w	r6, r6, #31
 8018b06:	fa02 f606 	lsl.w	r6, r2, r6
 8018b0a:	421e      	tst	r6, r3
 8018b0c:	bf18      	it	ne
 8018b0e:	4617      	movne	r7, r2
 8018b10:	f047 0720 	orr.w	r7, r7, #32
 8018b14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b16:	601c      	str	r4, [r3, #0]
 8018b18:	9b04      	ldr	r3, [sp, #16]
 8018b1a:	601d      	str	r5, [r3, #0]
 8018b1c:	e695      	b.n	801884a <__gethex+0x12a>
 8018b1e:	4299      	cmp	r1, r3
 8018b20:	f843 cc04 	str.w	ip, [r3, #-4]
 8018b24:	d8d8      	bhi.n	8018ad8 <__gethex+0x3b8>
 8018b26:	68a3      	ldr	r3, [r4, #8]
 8018b28:	459b      	cmp	fp, r3
 8018b2a:	db19      	blt.n	8018b60 <__gethex+0x440>
 8018b2c:	6861      	ldr	r1, [r4, #4]
 8018b2e:	ee18 0a10 	vmov	r0, s16
 8018b32:	3101      	adds	r1, #1
 8018b34:	f000 f994 	bl	8018e60 <_Balloc>
 8018b38:	4681      	mov	r9, r0
 8018b3a:	b918      	cbnz	r0, 8018b44 <__gethex+0x424>
 8018b3c:	4b1a      	ldr	r3, [pc, #104]	; (8018ba8 <__gethex+0x488>)
 8018b3e:	4602      	mov	r2, r0
 8018b40:	2184      	movs	r1, #132	; 0x84
 8018b42:	e6a8      	b.n	8018896 <__gethex+0x176>
 8018b44:	6922      	ldr	r2, [r4, #16]
 8018b46:	3202      	adds	r2, #2
 8018b48:	f104 010c 	add.w	r1, r4, #12
 8018b4c:	0092      	lsls	r2, r2, #2
 8018b4e:	300c      	adds	r0, #12
 8018b50:	f7fc fc6c 	bl	801542c <memcpy>
 8018b54:	4621      	mov	r1, r4
 8018b56:	ee18 0a10 	vmov	r0, s16
 8018b5a:	f000 f9c1 	bl	8018ee0 <_Bfree>
 8018b5e:	464c      	mov	r4, r9
 8018b60:	6923      	ldr	r3, [r4, #16]
 8018b62:	1c5a      	adds	r2, r3, #1
 8018b64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018b68:	6122      	str	r2, [r4, #16]
 8018b6a:	2201      	movs	r2, #1
 8018b6c:	615a      	str	r2, [r3, #20]
 8018b6e:	e7bb      	b.n	8018ae8 <__gethex+0x3c8>
 8018b70:	6922      	ldr	r2, [r4, #16]
 8018b72:	455a      	cmp	r2, fp
 8018b74:	dd0b      	ble.n	8018b8e <__gethex+0x46e>
 8018b76:	2101      	movs	r1, #1
 8018b78:	4620      	mov	r0, r4
 8018b7a:	f7ff fd69 	bl	8018650 <rshift>
 8018b7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018b82:	3501      	adds	r5, #1
 8018b84:	42ab      	cmp	r3, r5
 8018b86:	f6ff aed0 	blt.w	801892a <__gethex+0x20a>
 8018b8a:	2701      	movs	r7, #1
 8018b8c:	e7c0      	b.n	8018b10 <__gethex+0x3f0>
 8018b8e:	f016 061f 	ands.w	r6, r6, #31
 8018b92:	d0fa      	beq.n	8018b8a <__gethex+0x46a>
 8018b94:	449a      	add	sl, r3
 8018b96:	f1c6 0620 	rsb	r6, r6, #32
 8018b9a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018b9e:	f000 fa55 	bl	801904c <__hi0bits>
 8018ba2:	42b0      	cmp	r0, r6
 8018ba4:	dbe7      	blt.n	8018b76 <__gethex+0x456>
 8018ba6:	e7f0      	b.n	8018b8a <__gethex+0x46a>
 8018ba8:	0801c6af 	.word	0x0801c6af

08018bac <L_shift>:
 8018bac:	f1c2 0208 	rsb	r2, r2, #8
 8018bb0:	0092      	lsls	r2, r2, #2
 8018bb2:	b570      	push	{r4, r5, r6, lr}
 8018bb4:	f1c2 0620 	rsb	r6, r2, #32
 8018bb8:	6843      	ldr	r3, [r0, #4]
 8018bba:	6804      	ldr	r4, [r0, #0]
 8018bbc:	fa03 f506 	lsl.w	r5, r3, r6
 8018bc0:	432c      	orrs	r4, r5
 8018bc2:	40d3      	lsrs	r3, r2
 8018bc4:	6004      	str	r4, [r0, #0]
 8018bc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8018bca:	4288      	cmp	r0, r1
 8018bcc:	d3f4      	bcc.n	8018bb8 <L_shift+0xc>
 8018bce:	bd70      	pop	{r4, r5, r6, pc}

08018bd0 <__match>:
 8018bd0:	b530      	push	{r4, r5, lr}
 8018bd2:	6803      	ldr	r3, [r0, #0]
 8018bd4:	3301      	adds	r3, #1
 8018bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018bda:	b914      	cbnz	r4, 8018be2 <__match+0x12>
 8018bdc:	6003      	str	r3, [r0, #0]
 8018bde:	2001      	movs	r0, #1
 8018be0:	bd30      	pop	{r4, r5, pc}
 8018be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018be6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018bea:	2d19      	cmp	r5, #25
 8018bec:	bf98      	it	ls
 8018bee:	3220      	addls	r2, #32
 8018bf0:	42a2      	cmp	r2, r4
 8018bf2:	d0f0      	beq.n	8018bd6 <__match+0x6>
 8018bf4:	2000      	movs	r0, #0
 8018bf6:	e7f3      	b.n	8018be0 <__match+0x10>

08018bf8 <__hexnan>:
 8018bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bfc:	680b      	ldr	r3, [r1, #0]
 8018bfe:	6801      	ldr	r1, [r0, #0]
 8018c00:	115e      	asrs	r6, r3, #5
 8018c02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018c06:	f013 031f 	ands.w	r3, r3, #31
 8018c0a:	b087      	sub	sp, #28
 8018c0c:	bf18      	it	ne
 8018c0e:	3604      	addne	r6, #4
 8018c10:	2500      	movs	r5, #0
 8018c12:	1f37      	subs	r7, r6, #4
 8018c14:	4682      	mov	sl, r0
 8018c16:	4690      	mov	r8, r2
 8018c18:	9301      	str	r3, [sp, #4]
 8018c1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8018c1e:	46b9      	mov	r9, r7
 8018c20:	463c      	mov	r4, r7
 8018c22:	9502      	str	r5, [sp, #8]
 8018c24:	46ab      	mov	fp, r5
 8018c26:	784a      	ldrb	r2, [r1, #1]
 8018c28:	1c4b      	adds	r3, r1, #1
 8018c2a:	9303      	str	r3, [sp, #12]
 8018c2c:	b342      	cbz	r2, 8018c80 <__hexnan+0x88>
 8018c2e:	4610      	mov	r0, r2
 8018c30:	9105      	str	r1, [sp, #20]
 8018c32:	9204      	str	r2, [sp, #16]
 8018c34:	f7ff fd5e 	bl	80186f4 <__hexdig_fun>
 8018c38:	2800      	cmp	r0, #0
 8018c3a:	d14f      	bne.n	8018cdc <__hexnan+0xe4>
 8018c3c:	9a04      	ldr	r2, [sp, #16]
 8018c3e:	9905      	ldr	r1, [sp, #20]
 8018c40:	2a20      	cmp	r2, #32
 8018c42:	d818      	bhi.n	8018c76 <__hexnan+0x7e>
 8018c44:	9b02      	ldr	r3, [sp, #8]
 8018c46:	459b      	cmp	fp, r3
 8018c48:	dd13      	ble.n	8018c72 <__hexnan+0x7a>
 8018c4a:	454c      	cmp	r4, r9
 8018c4c:	d206      	bcs.n	8018c5c <__hexnan+0x64>
 8018c4e:	2d07      	cmp	r5, #7
 8018c50:	dc04      	bgt.n	8018c5c <__hexnan+0x64>
 8018c52:	462a      	mov	r2, r5
 8018c54:	4649      	mov	r1, r9
 8018c56:	4620      	mov	r0, r4
 8018c58:	f7ff ffa8 	bl	8018bac <L_shift>
 8018c5c:	4544      	cmp	r4, r8
 8018c5e:	d950      	bls.n	8018d02 <__hexnan+0x10a>
 8018c60:	2300      	movs	r3, #0
 8018c62:	f1a4 0904 	sub.w	r9, r4, #4
 8018c66:	f844 3c04 	str.w	r3, [r4, #-4]
 8018c6a:	f8cd b008 	str.w	fp, [sp, #8]
 8018c6e:	464c      	mov	r4, r9
 8018c70:	461d      	mov	r5, r3
 8018c72:	9903      	ldr	r1, [sp, #12]
 8018c74:	e7d7      	b.n	8018c26 <__hexnan+0x2e>
 8018c76:	2a29      	cmp	r2, #41	; 0x29
 8018c78:	d156      	bne.n	8018d28 <__hexnan+0x130>
 8018c7a:	3102      	adds	r1, #2
 8018c7c:	f8ca 1000 	str.w	r1, [sl]
 8018c80:	f1bb 0f00 	cmp.w	fp, #0
 8018c84:	d050      	beq.n	8018d28 <__hexnan+0x130>
 8018c86:	454c      	cmp	r4, r9
 8018c88:	d206      	bcs.n	8018c98 <__hexnan+0xa0>
 8018c8a:	2d07      	cmp	r5, #7
 8018c8c:	dc04      	bgt.n	8018c98 <__hexnan+0xa0>
 8018c8e:	462a      	mov	r2, r5
 8018c90:	4649      	mov	r1, r9
 8018c92:	4620      	mov	r0, r4
 8018c94:	f7ff ff8a 	bl	8018bac <L_shift>
 8018c98:	4544      	cmp	r4, r8
 8018c9a:	d934      	bls.n	8018d06 <__hexnan+0x10e>
 8018c9c:	f1a8 0204 	sub.w	r2, r8, #4
 8018ca0:	4623      	mov	r3, r4
 8018ca2:	f853 1b04 	ldr.w	r1, [r3], #4
 8018ca6:	f842 1f04 	str.w	r1, [r2, #4]!
 8018caa:	429f      	cmp	r7, r3
 8018cac:	d2f9      	bcs.n	8018ca2 <__hexnan+0xaa>
 8018cae:	1b3b      	subs	r3, r7, r4
 8018cb0:	f023 0303 	bic.w	r3, r3, #3
 8018cb4:	3304      	adds	r3, #4
 8018cb6:	3401      	adds	r4, #1
 8018cb8:	3e03      	subs	r6, #3
 8018cba:	42b4      	cmp	r4, r6
 8018cbc:	bf88      	it	hi
 8018cbe:	2304      	movhi	r3, #4
 8018cc0:	4443      	add	r3, r8
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	f843 2b04 	str.w	r2, [r3], #4
 8018cc8:	429f      	cmp	r7, r3
 8018cca:	d2fb      	bcs.n	8018cc4 <__hexnan+0xcc>
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	b91b      	cbnz	r3, 8018cd8 <__hexnan+0xe0>
 8018cd0:	4547      	cmp	r7, r8
 8018cd2:	d127      	bne.n	8018d24 <__hexnan+0x12c>
 8018cd4:	2301      	movs	r3, #1
 8018cd6:	603b      	str	r3, [r7, #0]
 8018cd8:	2005      	movs	r0, #5
 8018cda:	e026      	b.n	8018d2a <__hexnan+0x132>
 8018cdc:	3501      	adds	r5, #1
 8018cde:	2d08      	cmp	r5, #8
 8018ce0:	f10b 0b01 	add.w	fp, fp, #1
 8018ce4:	dd06      	ble.n	8018cf4 <__hexnan+0xfc>
 8018ce6:	4544      	cmp	r4, r8
 8018ce8:	d9c3      	bls.n	8018c72 <__hexnan+0x7a>
 8018cea:	2300      	movs	r3, #0
 8018cec:	f844 3c04 	str.w	r3, [r4, #-4]
 8018cf0:	2501      	movs	r5, #1
 8018cf2:	3c04      	subs	r4, #4
 8018cf4:	6822      	ldr	r2, [r4, #0]
 8018cf6:	f000 000f 	and.w	r0, r0, #15
 8018cfa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018cfe:	6022      	str	r2, [r4, #0]
 8018d00:	e7b7      	b.n	8018c72 <__hexnan+0x7a>
 8018d02:	2508      	movs	r5, #8
 8018d04:	e7b5      	b.n	8018c72 <__hexnan+0x7a>
 8018d06:	9b01      	ldr	r3, [sp, #4]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d0df      	beq.n	8018ccc <__hexnan+0xd4>
 8018d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8018d10:	f1c3 0320 	rsb	r3, r3, #32
 8018d14:	fa22 f303 	lsr.w	r3, r2, r3
 8018d18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018d1c:	401a      	ands	r2, r3
 8018d1e:	f846 2c04 	str.w	r2, [r6, #-4]
 8018d22:	e7d3      	b.n	8018ccc <__hexnan+0xd4>
 8018d24:	3f04      	subs	r7, #4
 8018d26:	e7d1      	b.n	8018ccc <__hexnan+0xd4>
 8018d28:	2004      	movs	r0, #4
 8018d2a:	b007      	add	sp, #28
 8018d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d30 <_localeconv_r>:
 8018d30:	4800      	ldr	r0, [pc, #0]	; (8018d34 <_localeconv_r+0x4>)
 8018d32:	4770      	bx	lr
 8018d34:	200001e8 	.word	0x200001e8

08018d38 <_lseek_r>:
 8018d38:	b538      	push	{r3, r4, r5, lr}
 8018d3a:	4d07      	ldr	r5, [pc, #28]	; (8018d58 <_lseek_r+0x20>)
 8018d3c:	4604      	mov	r4, r0
 8018d3e:	4608      	mov	r0, r1
 8018d40:	4611      	mov	r1, r2
 8018d42:	2200      	movs	r2, #0
 8018d44:	602a      	str	r2, [r5, #0]
 8018d46:	461a      	mov	r2, r3
 8018d48:	f7ea fa98 	bl	800327c <_lseek>
 8018d4c:	1c43      	adds	r3, r0, #1
 8018d4e:	d102      	bne.n	8018d56 <_lseek_r+0x1e>
 8018d50:	682b      	ldr	r3, [r5, #0]
 8018d52:	b103      	cbz	r3, 8018d56 <_lseek_r+0x1e>
 8018d54:	6023      	str	r3, [r4, #0]
 8018d56:	bd38      	pop	{r3, r4, r5, pc}
 8018d58:	200071a0 	.word	0x200071a0

08018d5c <__swhatbuf_r>:
 8018d5c:	b570      	push	{r4, r5, r6, lr}
 8018d5e:	460e      	mov	r6, r1
 8018d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d64:	2900      	cmp	r1, #0
 8018d66:	b096      	sub	sp, #88	; 0x58
 8018d68:	4614      	mov	r4, r2
 8018d6a:	461d      	mov	r5, r3
 8018d6c:	da07      	bge.n	8018d7e <__swhatbuf_r+0x22>
 8018d6e:	2300      	movs	r3, #0
 8018d70:	602b      	str	r3, [r5, #0]
 8018d72:	89b3      	ldrh	r3, [r6, #12]
 8018d74:	061a      	lsls	r2, r3, #24
 8018d76:	d410      	bmi.n	8018d9a <__swhatbuf_r+0x3e>
 8018d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018d7c:	e00e      	b.n	8018d9c <__swhatbuf_r+0x40>
 8018d7e:	466a      	mov	r2, sp
 8018d80:	f001 fbc6 	bl	801a510 <_fstat_r>
 8018d84:	2800      	cmp	r0, #0
 8018d86:	dbf2      	blt.n	8018d6e <__swhatbuf_r+0x12>
 8018d88:	9a01      	ldr	r2, [sp, #4]
 8018d8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018d8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018d92:	425a      	negs	r2, r3
 8018d94:	415a      	adcs	r2, r3
 8018d96:	602a      	str	r2, [r5, #0]
 8018d98:	e7ee      	b.n	8018d78 <__swhatbuf_r+0x1c>
 8018d9a:	2340      	movs	r3, #64	; 0x40
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	6023      	str	r3, [r4, #0]
 8018da0:	b016      	add	sp, #88	; 0x58
 8018da2:	bd70      	pop	{r4, r5, r6, pc}

08018da4 <__smakebuf_r>:
 8018da4:	898b      	ldrh	r3, [r1, #12]
 8018da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018da8:	079d      	lsls	r5, r3, #30
 8018daa:	4606      	mov	r6, r0
 8018dac:	460c      	mov	r4, r1
 8018dae:	d507      	bpl.n	8018dc0 <__smakebuf_r+0x1c>
 8018db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018db4:	6023      	str	r3, [r4, #0]
 8018db6:	6123      	str	r3, [r4, #16]
 8018db8:	2301      	movs	r3, #1
 8018dba:	6163      	str	r3, [r4, #20]
 8018dbc:	b002      	add	sp, #8
 8018dbe:	bd70      	pop	{r4, r5, r6, pc}
 8018dc0:	ab01      	add	r3, sp, #4
 8018dc2:	466a      	mov	r2, sp
 8018dc4:	f7ff ffca 	bl	8018d5c <__swhatbuf_r>
 8018dc8:	9900      	ldr	r1, [sp, #0]
 8018dca:	4605      	mov	r5, r0
 8018dcc:	4630      	mov	r0, r6
 8018dce:	f7fc fbad 	bl	801552c <_malloc_r>
 8018dd2:	b948      	cbnz	r0, 8018de8 <__smakebuf_r+0x44>
 8018dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dd8:	059a      	lsls	r2, r3, #22
 8018dda:	d4ef      	bmi.n	8018dbc <__smakebuf_r+0x18>
 8018ddc:	f023 0303 	bic.w	r3, r3, #3
 8018de0:	f043 0302 	orr.w	r3, r3, #2
 8018de4:	81a3      	strh	r3, [r4, #12]
 8018de6:	e7e3      	b.n	8018db0 <__smakebuf_r+0xc>
 8018de8:	4b0d      	ldr	r3, [pc, #52]	; (8018e20 <__smakebuf_r+0x7c>)
 8018dea:	62b3      	str	r3, [r6, #40]	; 0x28
 8018dec:	89a3      	ldrh	r3, [r4, #12]
 8018dee:	6020      	str	r0, [r4, #0]
 8018df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018df4:	81a3      	strh	r3, [r4, #12]
 8018df6:	9b00      	ldr	r3, [sp, #0]
 8018df8:	6163      	str	r3, [r4, #20]
 8018dfa:	9b01      	ldr	r3, [sp, #4]
 8018dfc:	6120      	str	r0, [r4, #16]
 8018dfe:	b15b      	cbz	r3, 8018e18 <__smakebuf_r+0x74>
 8018e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018e04:	4630      	mov	r0, r6
 8018e06:	f001 fb95 	bl	801a534 <_isatty_r>
 8018e0a:	b128      	cbz	r0, 8018e18 <__smakebuf_r+0x74>
 8018e0c:	89a3      	ldrh	r3, [r4, #12]
 8018e0e:	f023 0303 	bic.w	r3, r3, #3
 8018e12:	f043 0301 	orr.w	r3, r3, #1
 8018e16:	81a3      	strh	r3, [r4, #12]
 8018e18:	89a0      	ldrh	r0, [r4, #12]
 8018e1a:	4305      	orrs	r5, r0
 8018e1c:	81a5      	strh	r5, [r4, #12]
 8018e1e:	e7cd      	b.n	8018dbc <__smakebuf_r+0x18>
 8018e20:	08015229 	.word	0x08015229

08018e24 <__ascii_mbtowc>:
 8018e24:	b082      	sub	sp, #8
 8018e26:	b901      	cbnz	r1, 8018e2a <__ascii_mbtowc+0x6>
 8018e28:	a901      	add	r1, sp, #4
 8018e2a:	b142      	cbz	r2, 8018e3e <__ascii_mbtowc+0x1a>
 8018e2c:	b14b      	cbz	r3, 8018e42 <__ascii_mbtowc+0x1e>
 8018e2e:	7813      	ldrb	r3, [r2, #0]
 8018e30:	600b      	str	r3, [r1, #0]
 8018e32:	7812      	ldrb	r2, [r2, #0]
 8018e34:	1e10      	subs	r0, r2, #0
 8018e36:	bf18      	it	ne
 8018e38:	2001      	movne	r0, #1
 8018e3a:	b002      	add	sp, #8
 8018e3c:	4770      	bx	lr
 8018e3e:	4610      	mov	r0, r2
 8018e40:	e7fb      	b.n	8018e3a <__ascii_mbtowc+0x16>
 8018e42:	f06f 0001 	mvn.w	r0, #1
 8018e46:	e7f8      	b.n	8018e3a <__ascii_mbtowc+0x16>

08018e48 <__malloc_lock>:
 8018e48:	4801      	ldr	r0, [pc, #4]	; (8018e50 <__malloc_lock+0x8>)
 8018e4a:	f7fc bae4 	b.w	8015416 <__retarget_lock_acquire_recursive>
 8018e4e:	bf00      	nop
 8018e50:	20007198 	.word	0x20007198

08018e54 <__malloc_unlock>:
 8018e54:	4801      	ldr	r0, [pc, #4]	; (8018e5c <__malloc_unlock+0x8>)
 8018e56:	f7fc badf 	b.w	8015418 <__retarget_lock_release_recursive>
 8018e5a:	bf00      	nop
 8018e5c:	20007198 	.word	0x20007198

08018e60 <_Balloc>:
 8018e60:	b570      	push	{r4, r5, r6, lr}
 8018e62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018e64:	4604      	mov	r4, r0
 8018e66:	460d      	mov	r5, r1
 8018e68:	b976      	cbnz	r6, 8018e88 <_Balloc+0x28>
 8018e6a:	2010      	movs	r0, #16
 8018e6c:	f7fc fad6 	bl	801541c <malloc>
 8018e70:	4602      	mov	r2, r0
 8018e72:	6260      	str	r0, [r4, #36]	; 0x24
 8018e74:	b920      	cbnz	r0, 8018e80 <_Balloc+0x20>
 8018e76:	4b18      	ldr	r3, [pc, #96]	; (8018ed8 <_Balloc+0x78>)
 8018e78:	4818      	ldr	r0, [pc, #96]	; (8018edc <_Balloc+0x7c>)
 8018e7a:	2166      	movs	r1, #102	; 0x66
 8018e7c:	f7fe fc6e 	bl	801775c <__assert_func>
 8018e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e84:	6006      	str	r6, [r0, #0]
 8018e86:	60c6      	str	r6, [r0, #12]
 8018e88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018e8a:	68f3      	ldr	r3, [r6, #12]
 8018e8c:	b183      	cbz	r3, 8018eb0 <_Balloc+0x50>
 8018e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e90:	68db      	ldr	r3, [r3, #12]
 8018e92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018e96:	b9b8      	cbnz	r0, 8018ec8 <_Balloc+0x68>
 8018e98:	2101      	movs	r1, #1
 8018e9a:	fa01 f605 	lsl.w	r6, r1, r5
 8018e9e:	1d72      	adds	r2, r6, #5
 8018ea0:	0092      	lsls	r2, r2, #2
 8018ea2:	4620      	mov	r0, r4
 8018ea4:	f000 fc97 	bl	80197d6 <_calloc_r>
 8018ea8:	b160      	cbz	r0, 8018ec4 <_Balloc+0x64>
 8018eaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018eae:	e00e      	b.n	8018ece <_Balloc+0x6e>
 8018eb0:	2221      	movs	r2, #33	; 0x21
 8018eb2:	2104      	movs	r1, #4
 8018eb4:	4620      	mov	r0, r4
 8018eb6:	f000 fc8e 	bl	80197d6 <_calloc_r>
 8018eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ebc:	60f0      	str	r0, [r6, #12]
 8018ebe:	68db      	ldr	r3, [r3, #12]
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d1e4      	bne.n	8018e8e <_Balloc+0x2e>
 8018ec4:	2000      	movs	r0, #0
 8018ec6:	bd70      	pop	{r4, r5, r6, pc}
 8018ec8:	6802      	ldr	r2, [r0, #0]
 8018eca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018ece:	2300      	movs	r3, #0
 8018ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ed4:	e7f7      	b.n	8018ec6 <_Balloc+0x66>
 8018ed6:	bf00      	nop
 8018ed8:	0801c639 	.word	0x0801c639
 8018edc:	0801c740 	.word	0x0801c740

08018ee0 <_Bfree>:
 8018ee0:	b570      	push	{r4, r5, r6, lr}
 8018ee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018ee4:	4605      	mov	r5, r0
 8018ee6:	460c      	mov	r4, r1
 8018ee8:	b976      	cbnz	r6, 8018f08 <_Bfree+0x28>
 8018eea:	2010      	movs	r0, #16
 8018eec:	f7fc fa96 	bl	801541c <malloc>
 8018ef0:	4602      	mov	r2, r0
 8018ef2:	6268      	str	r0, [r5, #36]	; 0x24
 8018ef4:	b920      	cbnz	r0, 8018f00 <_Bfree+0x20>
 8018ef6:	4b09      	ldr	r3, [pc, #36]	; (8018f1c <_Bfree+0x3c>)
 8018ef8:	4809      	ldr	r0, [pc, #36]	; (8018f20 <_Bfree+0x40>)
 8018efa:	218a      	movs	r1, #138	; 0x8a
 8018efc:	f7fe fc2e 	bl	801775c <__assert_func>
 8018f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018f04:	6006      	str	r6, [r0, #0]
 8018f06:	60c6      	str	r6, [r0, #12]
 8018f08:	b13c      	cbz	r4, 8018f1a <_Bfree+0x3a>
 8018f0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018f0c:	6862      	ldr	r2, [r4, #4]
 8018f0e:	68db      	ldr	r3, [r3, #12]
 8018f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018f14:	6021      	str	r1, [r4, #0]
 8018f16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018f1a:	bd70      	pop	{r4, r5, r6, pc}
 8018f1c:	0801c639 	.word	0x0801c639
 8018f20:	0801c740 	.word	0x0801c740

08018f24 <__multadd>:
 8018f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f28:	690e      	ldr	r6, [r1, #16]
 8018f2a:	4607      	mov	r7, r0
 8018f2c:	4698      	mov	r8, r3
 8018f2e:	460c      	mov	r4, r1
 8018f30:	f101 0014 	add.w	r0, r1, #20
 8018f34:	2300      	movs	r3, #0
 8018f36:	6805      	ldr	r5, [r0, #0]
 8018f38:	b2a9      	uxth	r1, r5
 8018f3a:	fb02 8101 	mla	r1, r2, r1, r8
 8018f3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018f42:	0c2d      	lsrs	r5, r5, #16
 8018f44:	fb02 c505 	mla	r5, r2, r5, ip
 8018f48:	b289      	uxth	r1, r1
 8018f4a:	3301      	adds	r3, #1
 8018f4c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018f50:	429e      	cmp	r6, r3
 8018f52:	f840 1b04 	str.w	r1, [r0], #4
 8018f56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018f5a:	dcec      	bgt.n	8018f36 <__multadd+0x12>
 8018f5c:	f1b8 0f00 	cmp.w	r8, #0
 8018f60:	d022      	beq.n	8018fa8 <__multadd+0x84>
 8018f62:	68a3      	ldr	r3, [r4, #8]
 8018f64:	42b3      	cmp	r3, r6
 8018f66:	dc19      	bgt.n	8018f9c <__multadd+0x78>
 8018f68:	6861      	ldr	r1, [r4, #4]
 8018f6a:	4638      	mov	r0, r7
 8018f6c:	3101      	adds	r1, #1
 8018f6e:	f7ff ff77 	bl	8018e60 <_Balloc>
 8018f72:	4605      	mov	r5, r0
 8018f74:	b928      	cbnz	r0, 8018f82 <__multadd+0x5e>
 8018f76:	4602      	mov	r2, r0
 8018f78:	4b0d      	ldr	r3, [pc, #52]	; (8018fb0 <__multadd+0x8c>)
 8018f7a:	480e      	ldr	r0, [pc, #56]	; (8018fb4 <__multadd+0x90>)
 8018f7c:	21b5      	movs	r1, #181	; 0xb5
 8018f7e:	f7fe fbed 	bl	801775c <__assert_func>
 8018f82:	6922      	ldr	r2, [r4, #16]
 8018f84:	3202      	adds	r2, #2
 8018f86:	f104 010c 	add.w	r1, r4, #12
 8018f8a:	0092      	lsls	r2, r2, #2
 8018f8c:	300c      	adds	r0, #12
 8018f8e:	f7fc fa4d 	bl	801542c <memcpy>
 8018f92:	4621      	mov	r1, r4
 8018f94:	4638      	mov	r0, r7
 8018f96:	f7ff ffa3 	bl	8018ee0 <_Bfree>
 8018f9a:	462c      	mov	r4, r5
 8018f9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018fa0:	3601      	adds	r6, #1
 8018fa2:	f8c3 8014 	str.w	r8, [r3, #20]
 8018fa6:	6126      	str	r6, [r4, #16]
 8018fa8:	4620      	mov	r0, r4
 8018faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fae:	bf00      	nop
 8018fb0:	0801c6af 	.word	0x0801c6af
 8018fb4:	0801c740 	.word	0x0801c740

08018fb8 <__s2b>:
 8018fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fbc:	460c      	mov	r4, r1
 8018fbe:	4615      	mov	r5, r2
 8018fc0:	461f      	mov	r7, r3
 8018fc2:	2209      	movs	r2, #9
 8018fc4:	3308      	adds	r3, #8
 8018fc6:	4606      	mov	r6, r0
 8018fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8018fcc:	2100      	movs	r1, #0
 8018fce:	2201      	movs	r2, #1
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	db09      	blt.n	8018fe8 <__s2b+0x30>
 8018fd4:	4630      	mov	r0, r6
 8018fd6:	f7ff ff43 	bl	8018e60 <_Balloc>
 8018fda:	b940      	cbnz	r0, 8018fee <__s2b+0x36>
 8018fdc:	4602      	mov	r2, r0
 8018fde:	4b19      	ldr	r3, [pc, #100]	; (8019044 <__s2b+0x8c>)
 8018fe0:	4819      	ldr	r0, [pc, #100]	; (8019048 <__s2b+0x90>)
 8018fe2:	21ce      	movs	r1, #206	; 0xce
 8018fe4:	f7fe fbba 	bl	801775c <__assert_func>
 8018fe8:	0052      	lsls	r2, r2, #1
 8018fea:	3101      	adds	r1, #1
 8018fec:	e7f0      	b.n	8018fd0 <__s2b+0x18>
 8018fee:	9b08      	ldr	r3, [sp, #32]
 8018ff0:	6143      	str	r3, [r0, #20]
 8018ff2:	2d09      	cmp	r5, #9
 8018ff4:	f04f 0301 	mov.w	r3, #1
 8018ff8:	6103      	str	r3, [r0, #16]
 8018ffa:	dd16      	ble.n	801902a <__s2b+0x72>
 8018ffc:	f104 0909 	add.w	r9, r4, #9
 8019000:	46c8      	mov	r8, r9
 8019002:	442c      	add	r4, r5
 8019004:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019008:	4601      	mov	r1, r0
 801900a:	3b30      	subs	r3, #48	; 0x30
 801900c:	220a      	movs	r2, #10
 801900e:	4630      	mov	r0, r6
 8019010:	f7ff ff88 	bl	8018f24 <__multadd>
 8019014:	45a0      	cmp	r8, r4
 8019016:	d1f5      	bne.n	8019004 <__s2b+0x4c>
 8019018:	f1a5 0408 	sub.w	r4, r5, #8
 801901c:	444c      	add	r4, r9
 801901e:	1b2d      	subs	r5, r5, r4
 8019020:	1963      	adds	r3, r4, r5
 8019022:	42bb      	cmp	r3, r7
 8019024:	db04      	blt.n	8019030 <__s2b+0x78>
 8019026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801902a:	340a      	adds	r4, #10
 801902c:	2509      	movs	r5, #9
 801902e:	e7f6      	b.n	801901e <__s2b+0x66>
 8019030:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019034:	4601      	mov	r1, r0
 8019036:	3b30      	subs	r3, #48	; 0x30
 8019038:	220a      	movs	r2, #10
 801903a:	4630      	mov	r0, r6
 801903c:	f7ff ff72 	bl	8018f24 <__multadd>
 8019040:	e7ee      	b.n	8019020 <__s2b+0x68>
 8019042:	bf00      	nop
 8019044:	0801c6af 	.word	0x0801c6af
 8019048:	0801c740 	.word	0x0801c740

0801904c <__hi0bits>:
 801904c:	0c03      	lsrs	r3, r0, #16
 801904e:	041b      	lsls	r3, r3, #16
 8019050:	b9d3      	cbnz	r3, 8019088 <__hi0bits+0x3c>
 8019052:	0400      	lsls	r0, r0, #16
 8019054:	2310      	movs	r3, #16
 8019056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801905a:	bf04      	itt	eq
 801905c:	0200      	lsleq	r0, r0, #8
 801905e:	3308      	addeq	r3, #8
 8019060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019064:	bf04      	itt	eq
 8019066:	0100      	lsleq	r0, r0, #4
 8019068:	3304      	addeq	r3, #4
 801906a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801906e:	bf04      	itt	eq
 8019070:	0080      	lsleq	r0, r0, #2
 8019072:	3302      	addeq	r3, #2
 8019074:	2800      	cmp	r0, #0
 8019076:	db05      	blt.n	8019084 <__hi0bits+0x38>
 8019078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801907c:	f103 0301 	add.w	r3, r3, #1
 8019080:	bf08      	it	eq
 8019082:	2320      	moveq	r3, #32
 8019084:	4618      	mov	r0, r3
 8019086:	4770      	bx	lr
 8019088:	2300      	movs	r3, #0
 801908a:	e7e4      	b.n	8019056 <__hi0bits+0xa>

0801908c <__lo0bits>:
 801908c:	6803      	ldr	r3, [r0, #0]
 801908e:	f013 0207 	ands.w	r2, r3, #7
 8019092:	4601      	mov	r1, r0
 8019094:	d00b      	beq.n	80190ae <__lo0bits+0x22>
 8019096:	07da      	lsls	r2, r3, #31
 8019098:	d424      	bmi.n	80190e4 <__lo0bits+0x58>
 801909a:	0798      	lsls	r0, r3, #30
 801909c:	bf49      	itett	mi
 801909e:	085b      	lsrmi	r3, r3, #1
 80190a0:	089b      	lsrpl	r3, r3, #2
 80190a2:	2001      	movmi	r0, #1
 80190a4:	600b      	strmi	r3, [r1, #0]
 80190a6:	bf5c      	itt	pl
 80190a8:	600b      	strpl	r3, [r1, #0]
 80190aa:	2002      	movpl	r0, #2
 80190ac:	4770      	bx	lr
 80190ae:	b298      	uxth	r0, r3
 80190b0:	b9b0      	cbnz	r0, 80190e0 <__lo0bits+0x54>
 80190b2:	0c1b      	lsrs	r3, r3, #16
 80190b4:	2010      	movs	r0, #16
 80190b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80190ba:	bf04      	itt	eq
 80190bc:	0a1b      	lsreq	r3, r3, #8
 80190be:	3008      	addeq	r0, #8
 80190c0:	071a      	lsls	r2, r3, #28
 80190c2:	bf04      	itt	eq
 80190c4:	091b      	lsreq	r3, r3, #4
 80190c6:	3004      	addeq	r0, #4
 80190c8:	079a      	lsls	r2, r3, #30
 80190ca:	bf04      	itt	eq
 80190cc:	089b      	lsreq	r3, r3, #2
 80190ce:	3002      	addeq	r0, #2
 80190d0:	07da      	lsls	r2, r3, #31
 80190d2:	d403      	bmi.n	80190dc <__lo0bits+0x50>
 80190d4:	085b      	lsrs	r3, r3, #1
 80190d6:	f100 0001 	add.w	r0, r0, #1
 80190da:	d005      	beq.n	80190e8 <__lo0bits+0x5c>
 80190dc:	600b      	str	r3, [r1, #0]
 80190de:	4770      	bx	lr
 80190e0:	4610      	mov	r0, r2
 80190e2:	e7e8      	b.n	80190b6 <__lo0bits+0x2a>
 80190e4:	2000      	movs	r0, #0
 80190e6:	4770      	bx	lr
 80190e8:	2020      	movs	r0, #32
 80190ea:	4770      	bx	lr

080190ec <__i2b>:
 80190ec:	b510      	push	{r4, lr}
 80190ee:	460c      	mov	r4, r1
 80190f0:	2101      	movs	r1, #1
 80190f2:	f7ff feb5 	bl	8018e60 <_Balloc>
 80190f6:	4602      	mov	r2, r0
 80190f8:	b928      	cbnz	r0, 8019106 <__i2b+0x1a>
 80190fa:	4b05      	ldr	r3, [pc, #20]	; (8019110 <__i2b+0x24>)
 80190fc:	4805      	ldr	r0, [pc, #20]	; (8019114 <__i2b+0x28>)
 80190fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019102:	f7fe fb2b 	bl	801775c <__assert_func>
 8019106:	2301      	movs	r3, #1
 8019108:	6144      	str	r4, [r0, #20]
 801910a:	6103      	str	r3, [r0, #16]
 801910c:	bd10      	pop	{r4, pc}
 801910e:	bf00      	nop
 8019110:	0801c6af 	.word	0x0801c6af
 8019114:	0801c740 	.word	0x0801c740

08019118 <__multiply>:
 8019118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801911c:	4614      	mov	r4, r2
 801911e:	690a      	ldr	r2, [r1, #16]
 8019120:	6923      	ldr	r3, [r4, #16]
 8019122:	429a      	cmp	r2, r3
 8019124:	bfb8      	it	lt
 8019126:	460b      	movlt	r3, r1
 8019128:	460d      	mov	r5, r1
 801912a:	bfbc      	itt	lt
 801912c:	4625      	movlt	r5, r4
 801912e:	461c      	movlt	r4, r3
 8019130:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019134:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019138:	68ab      	ldr	r3, [r5, #8]
 801913a:	6869      	ldr	r1, [r5, #4]
 801913c:	eb0a 0709 	add.w	r7, sl, r9
 8019140:	42bb      	cmp	r3, r7
 8019142:	b085      	sub	sp, #20
 8019144:	bfb8      	it	lt
 8019146:	3101      	addlt	r1, #1
 8019148:	f7ff fe8a 	bl	8018e60 <_Balloc>
 801914c:	b930      	cbnz	r0, 801915c <__multiply+0x44>
 801914e:	4602      	mov	r2, r0
 8019150:	4b42      	ldr	r3, [pc, #264]	; (801925c <__multiply+0x144>)
 8019152:	4843      	ldr	r0, [pc, #268]	; (8019260 <__multiply+0x148>)
 8019154:	f240 115d 	movw	r1, #349	; 0x15d
 8019158:	f7fe fb00 	bl	801775c <__assert_func>
 801915c:	f100 0614 	add.w	r6, r0, #20
 8019160:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019164:	4633      	mov	r3, r6
 8019166:	2200      	movs	r2, #0
 8019168:	4543      	cmp	r3, r8
 801916a:	d31e      	bcc.n	80191aa <__multiply+0x92>
 801916c:	f105 0c14 	add.w	ip, r5, #20
 8019170:	f104 0314 	add.w	r3, r4, #20
 8019174:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019178:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801917c:	9202      	str	r2, [sp, #8]
 801917e:	ebac 0205 	sub.w	r2, ip, r5
 8019182:	3a15      	subs	r2, #21
 8019184:	f022 0203 	bic.w	r2, r2, #3
 8019188:	3204      	adds	r2, #4
 801918a:	f105 0115 	add.w	r1, r5, #21
 801918e:	458c      	cmp	ip, r1
 8019190:	bf38      	it	cc
 8019192:	2204      	movcc	r2, #4
 8019194:	9201      	str	r2, [sp, #4]
 8019196:	9a02      	ldr	r2, [sp, #8]
 8019198:	9303      	str	r3, [sp, #12]
 801919a:	429a      	cmp	r2, r3
 801919c:	d808      	bhi.n	80191b0 <__multiply+0x98>
 801919e:	2f00      	cmp	r7, #0
 80191a0:	dc55      	bgt.n	801924e <__multiply+0x136>
 80191a2:	6107      	str	r7, [r0, #16]
 80191a4:	b005      	add	sp, #20
 80191a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191aa:	f843 2b04 	str.w	r2, [r3], #4
 80191ae:	e7db      	b.n	8019168 <__multiply+0x50>
 80191b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80191b4:	f1ba 0f00 	cmp.w	sl, #0
 80191b8:	d020      	beq.n	80191fc <__multiply+0xe4>
 80191ba:	f105 0e14 	add.w	lr, r5, #20
 80191be:	46b1      	mov	r9, r6
 80191c0:	2200      	movs	r2, #0
 80191c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80191c6:	f8d9 b000 	ldr.w	fp, [r9]
 80191ca:	b2a1      	uxth	r1, r4
 80191cc:	fa1f fb8b 	uxth.w	fp, fp
 80191d0:	fb0a b101 	mla	r1, sl, r1, fp
 80191d4:	4411      	add	r1, r2
 80191d6:	f8d9 2000 	ldr.w	r2, [r9]
 80191da:	0c24      	lsrs	r4, r4, #16
 80191dc:	0c12      	lsrs	r2, r2, #16
 80191de:	fb0a 2404 	mla	r4, sl, r4, r2
 80191e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80191e6:	b289      	uxth	r1, r1
 80191e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80191ec:	45f4      	cmp	ip, lr
 80191ee:	f849 1b04 	str.w	r1, [r9], #4
 80191f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80191f6:	d8e4      	bhi.n	80191c2 <__multiply+0xaa>
 80191f8:	9901      	ldr	r1, [sp, #4]
 80191fa:	5072      	str	r2, [r6, r1]
 80191fc:	9a03      	ldr	r2, [sp, #12]
 80191fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019202:	3304      	adds	r3, #4
 8019204:	f1b9 0f00 	cmp.w	r9, #0
 8019208:	d01f      	beq.n	801924a <__multiply+0x132>
 801920a:	6834      	ldr	r4, [r6, #0]
 801920c:	f105 0114 	add.w	r1, r5, #20
 8019210:	46b6      	mov	lr, r6
 8019212:	f04f 0a00 	mov.w	sl, #0
 8019216:	880a      	ldrh	r2, [r1, #0]
 8019218:	f8be b002 	ldrh.w	fp, [lr, #2]
 801921c:	fb09 b202 	mla	r2, r9, r2, fp
 8019220:	4492      	add	sl, r2
 8019222:	b2a4      	uxth	r4, r4
 8019224:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019228:	f84e 4b04 	str.w	r4, [lr], #4
 801922c:	f851 4b04 	ldr.w	r4, [r1], #4
 8019230:	f8be 2000 	ldrh.w	r2, [lr]
 8019234:	0c24      	lsrs	r4, r4, #16
 8019236:	fb09 2404 	mla	r4, r9, r4, r2
 801923a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801923e:	458c      	cmp	ip, r1
 8019240:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019244:	d8e7      	bhi.n	8019216 <__multiply+0xfe>
 8019246:	9a01      	ldr	r2, [sp, #4]
 8019248:	50b4      	str	r4, [r6, r2]
 801924a:	3604      	adds	r6, #4
 801924c:	e7a3      	b.n	8019196 <__multiply+0x7e>
 801924e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019252:	2b00      	cmp	r3, #0
 8019254:	d1a5      	bne.n	80191a2 <__multiply+0x8a>
 8019256:	3f01      	subs	r7, #1
 8019258:	e7a1      	b.n	801919e <__multiply+0x86>
 801925a:	bf00      	nop
 801925c:	0801c6af 	.word	0x0801c6af
 8019260:	0801c740 	.word	0x0801c740

08019264 <__pow5mult>:
 8019264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019268:	4615      	mov	r5, r2
 801926a:	f012 0203 	ands.w	r2, r2, #3
 801926e:	4606      	mov	r6, r0
 8019270:	460f      	mov	r7, r1
 8019272:	d007      	beq.n	8019284 <__pow5mult+0x20>
 8019274:	4c25      	ldr	r4, [pc, #148]	; (801930c <__pow5mult+0xa8>)
 8019276:	3a01      	subs	r2, #1
 8019278:	2300      	movs	r3, #0
 801927a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801927e:	f7ff fe51 	bl	8018f24 <__multadd>
 8019282:	4607      	mov	r7, r0
 8019284:	10ad      	asrs	r5, r5, #2
 8019286:	d03d      	beq.n	8019304 <__pow5mult+0xa0>
 8019288:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801928a:	b97c      	cbnz	r4, 80192ac <__pow5mult+0x48>
 801928c:	2010      	movs	r0, #16
 801928e:	f7fc f8c5 	bl	801541c <malloc>
 8019292:	4602      	mov	r2, r0
 8019294:	6270      	str	r0, [r6, #36]	; 0x24
 8019296:	b928      	cbnz	r0, 80192a4 <__pow5mult+0x40>
 8019298:	4b1d      	ldr	r3, [pc, #116]	; (8019310 <__pow5mult+0xac>)
 801929a:	481e      	ldr	r0, [pc, #120]	; (8019314 <__pow5mult+0xb0>)
 801929c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80192a0:	f7fe fa5c 	bl	801775c <__assert_func>
 80192a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80192a8:	6004      	str	r4, [r0, #0]
 80192aa:	60c4      	str	r4, [r0, #12]
 80192ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80192b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80192b4:	b94c      	cbnz	r4, 80192ca <__pow5mult+0x66>
 80192b6:	f240 2171 	movw	r1, #625	; 0x271
 80192ba:	4630      	mov	r0, r6
 80192bc:	f7ff ff16 	bl	80190ec <__i2b>
 80192c0:	2300      	movs	r3, #0
 80192c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80192c6:	4604      	mov	r4, r0
 80192c8:	6003      	str	r3, [r0, #0]
 80192ca:	f04f 0900 	mov.w	r9, #0
 80192ce:	07eb      	lsls	r3, r5, #31
 80192d0:	d50a      	bpl.n	80192e8 <__pow5mult+0x84>
 80192d2:	4639      	mov	r1, r7
 80192d4:	4622      	mov	r2, r4
 80192d6:	4630      	mov	r0, r6
 80192d8:	f7ff ff1e 	bl	8019118 <__multiply>
 80192dc:	4639      	mov	r1, r7
 80192de:	4680      	mov	r8, r0
 80192e0:	4630      	mov	r0, r6
 80192e2:	f7ff fdfd 	bl	8018ee0 <_Bfree>
 80192e6:	4647      	mov	r7, r8
 80192e8:	106d      	asrs	r5, r5, #1
 80192ea:	d00b      	beq.n	8019304 <__pow5mult+0xa0>
 80192ec:	6820      	ldr	r0, [r4, #0]
 80192ee:	b938      	cbnz	r0, 8019300 <__pow5mult+0x9c>
 80192f0:	4622      	mov	r2, r4
 80192f2:	4621      	mov	r1, r4
 80192f4:	4630      	mov	r0, r6
 80192f6:	f7ff ff0f 	bl	8019118 <__multiply>
 80192fa:	6020      	str	r0, [r4, #0]
 80192fc:	f8c0 9000 	str.w	r9, [r0]
 8019300:	4604      	mov	r4, r0
 8019302:	e7e4      	b.n	80192ce <__pow5mult+0x6a>
 8019304:	4638      	mov	r0, r7
 8019306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801930a:	bf00      	nop
 801930c:	0801c890 	.word	0x0801c890
 8019310:	0801c639 	.word	0x0801c639
 8019314:	0801c740 	.word	0x0801c740

08019318 <__lshift>:
 8019318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801931c:	460c      	mov	r4, r1
 801931e:	6849      	ldr	r1, [r1, #4]
 8019320:	6923      	ldr	r3, [r4, #16]
 8019322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019326:	68a3      	ldr	r3, [r4, #8]
 8019328:	4607      	mov	r7, r0
 801932a:	4691      	mov	r9, r2
 801932c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019330:	f108 0601 	add.w	r6, r8, #1
 8019334:	42b3      	cmp	r3, r6
 8019336:	db0b      	blt.n	8019350 <__lshift+0x38>
 8019338:	4638      	mov	r0, r7
 801933a:	f7ff fd91 	bl	8018e60 <_Balloc>
 801933e:	4605      	mov	r5, r0
 8019340:	b948      	cbnz	r0, 8019356 <__lshift+0x3e>
 8019342:	4602      	mov	r2, r0
 8019344:	4b28      	ldr	r3, [pc, #160]	; (80193e8 <__lshift+0xd0>)
 8019346:	4829      	ldr	r0, [pc, #164]	; (80193ec <__lshift+0xd4>)
 8019348:	f240 11d9 	movw	r1, #473	; 0x1d9
 801934c:	f7fe fa06 	bl	801775c <__assert_func>
 8019350:	3101      	adds	r1, #1
 8019352:	005b      	lsls	r3, r3, #1
 8019354:	e7ee      	b.n	8019334 <__lshift+0x1c>
 8019356:	2300      	movs	r3, #0
 8019358:	f100 0114 	add.w	r1, r0, #20
 801935c:	f100 0210 	add.w	r2, r0, #16
 8019360:	4618      	mov	r0, r3
 8019362:	4553      	cmp	r3, sl
 8019364:	db33      	blt.n	80193ce <__lshift+0xb6>
 8019366:	6920      	ldr	r0, [r4, #16]
 8019368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801936c:	f104 0314 	add.w	r3, r4, #20
 8019370:	f019 091f 	ands.w	r9, r9, #31
 8019374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801937c:	d02b      	beq.n	80193d6 <__lshift+0xbe>
 801937e:	f1c9 0e20 	rsb	lr, r9, #32
 8019382:	468a      	mov	sl, r1
 8019384:	2200      	movs	r2, #0
 8019386:	6818      	ldr	r0, [r3, #0]
 8019388:	fa00 f009 	lsl.w	r0, r0, r9
 801938c:	4302      	orrs	r2, r0
 801938e:	f84a 2b04 	str.w	r2, [sl], #4
 8019392:	f853 2b04 	ldr.w	r2, [r3], #4
 8019396:	459c      	cmp	ip, r3
 8019398:	fa22 f20e 	lsr.w	r2, r2, lr
 801939c:	d8f3      	bhi.n	8019386 <__lshift+0x6e>
 801939e:	ebac 0304 	sub.w	r3, ip, r4
 80193a2:	3b15      	subs	r3, #21
 80193a4:	f023 0303 	bic.w	r3, r3, #3
 80193a8:	3304      	adds	r3, #4
 80193aa:	f104 0015 	add.w	r0, r4, #21
 80193ae:	4584      	cmp	ip, r0
 80193b0:	bf38      	it	cc
 80193b2:	2304      	movcc	r3, #4
 80193b4:	50ca      	str	r2, [r1, r3]
 80193b6:	b10a      	cbz	r2, 80193bc <__lshift+0xa4>
 80193b8:	f108 0602 	add.w	r6, r8, #2
 80193bc:	3e01      	subs	r6, #1
 80193be:	4638      	mov	r0, r7
 80193c0:	612e      	str	r6, [r5, #16]
 80193c2:	4621      	mov	r1, r4
 80193c4:	f7ff fd8c 	bl	8018ee0 <_Bfree>
 80193c8:	4628      	mov	r0, r5
 80193ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80193d2:	3301      	adds	r3, #1
 80193d4:	e7c5      	b.n	8019362 <__lshift+0x4a>
 80193d6:	3904      	subs	r1, #4
 80193d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80193dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80193e0:	459c      	cmp	ip, r3
 80193e2:	d8f9      	bhi.n	80193d8 <__lshift+0xc0>
 80193e4:	e7ea      	b.n	80193bc <__lshift+0xa4>
 80193e6:	bf00      	nop
 80193e8:	0801c6af 	.word	0x0801c6af
 80193ec:	0801c740 	.word	0x0801c740

080193f0 <__mcmp>:
 80193f0:	b530      	push	{r4, r5, lr}
 80193f2:	6902      	ldr	r2, [r0, #16]
 80193f4:	690c      	ldr	r4, [r1, #16]
 80193f6:	1b12      	subs	r2, r2, r4
 80193f8:	d10e      	bne.n	8019418 <__mcmp+0x28>
 80193fa:	f100 0314 	add.w	r3, r0, #20
 80193fe:	3114      	adds	r1, #20
 8019400:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019404:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019408:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801940c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019410:	42a5      	cmp	r5, r4
 8019412:	d003      	beq.n	801941c <__mcmp+0x2c>
 8019414:	d305      	bcc.n	8019422 <__mcmp+0x32>
 8019416:	2201      	movs	r2, #1
 8019418:	4610      	mov	r0, r2
 801941a:	bd30      	pop	{r4, r5, pc}
 801941c:	4283      	cmp	r3, r0
 801941e:	d3f3      	bcc.n	8019408 <__mcmp+0x18>
 8019420:	e7fa      	b.n	8019418 <__mcmp+0x28>
 8019422:	f04f 32ff 	mov.w	r2, #4294967295
 8019426:	e7f7      	b.n	8019418 <__mcmp+0x28>

08019428 <__mdiff>:
 8019428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801942c:	460c      	mov	r4, r1
 801942e:	4606      	mov	r6, r0
 8019430:	4611      	mov	r1, r2
 8019432:	4620      	mov	r0, r4
 8019434:	4617      	mov	r7, r2
 8019436:	f7ff ffdb 	bl	80193f0 <__mcmp>
 801943a:	1e05      	subs	r5, r0, #0
 801943c:	d110      	bne.n	8019460 <__mdiff+0x38>
 801943e:	4629      	mov	r1, r5
 8019440:	4630      	mov	r0, r6
 8019442:	f7ff fd0d 	bl	8018e60 <_Balloc>
 8019446:	b930      	cbnz	r0, 8019456 <__mdiff+0x2e>
 8019448:	4b39      	ldr	r3, [pc, #228]	; (8019530 <__mdiff+0x108>)
 801944a:	4602      	mov	r2, r0
 801944c:	f240 2132 	movw	r1, #562	; 0x232
 8019450:	4838      	ldr	r0, [pc, #224]	; (8019534 <__mdiff+0x10c>)
 8019452:	f7fe f983 	bl	801775c <__assert_func>
 8019456:	2301      	movs	r3, #1
 8019458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801945c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019460:	bfa4      	itt	ge
 8019462:	463b      	movge	r3, r7
 8019464:	4627      	movge	r7, r4
 8019466:	4630      	mov	r0, r6
 8019468:	6879      	ldr	r1, [r7, #4]
 801946a:	bfa6      	itte	ge
 801946c:	461c      	movge	r4, r3
 801946e:	2500      	movge	r5, #0
 8019470:	2501      	movlt	r5, #1
 8019472:	f7ff fcf5 	bl	8018e60 <_Balloc>
 8019476:	b920      	cbnz	r0, 8019482 <__mdiff+0x5a>
 8019478:	4b2d      	ldr	r3, [pc, #180]	; (8019530 <__mdiff+0x108>)
 801947a:	4602      	mov	r2, r0
 801947c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019480:	e7e6      	b.n	8019450 <__mdiff+0x28>
 8019482:	693e      	ldr	r6, [r7, #16]
 8019484:	60c5      	str	r5, [r0, #12]
 8019486:	6925      	ldr	r5, [r4, #16]
 8019488:	f107 0114 	add.w	r1, r7, #20
 801948c:	f104 0914 	add.w	r9, r4, #20
 8019490:	f100 0e14 	add.w	lr, r0, #20
 8019494:	f107 0210 	add.w	r2, r7, #16
 8019498:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801949c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80194a0:	46f2      	mov	sl, lr
 80194a2:	2700      	movs	r7, #0
 80194a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80194a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80194ac:	fa1f f883 	uxth.w	r8, r3
 80194b0:	fa17 f78b 	uxtah	r7, r7, fp
 80194b4:	0c1b      	lsrs	r3, r3, #16
 80194b6:	eba7 0808 	sub.w	r8, r7, r8
 80194ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80194be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80194c2:	fa1f f888 	uxth.w	r8, r8
 80194c6:	141f      	asrs	r7, r3, #16
 80194c8:	454d      	cmp	r5, r9
 80194ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80194ce:	f84a 3b04 	str.w	r3, [sl], #4
 80194d2:	d8e7      	bhi.n	80194a4 <__mdiff+0x7c>
 80194d4:	1b2b      	subs	r3, r5, r4
 80194d6:	3b15      	subs	r3, #21
 80194d8:	f023 0303 	bic.w	r3, r3, #3
 80194dc:	3304      	adds	r3, #4
 80194de:	3415      	adds	r4, #21
 80194e0:	42a5      	cmp	r5, r4
 80194e2:	bf38      	it	cc
 80194e4:	2304      	movcc	r3, #4
 80194e6:	4419      	add	r1, r3
 80194e8:	4473      	add	r3, lr
 80194ea:	469e      	mov	lr, r3
 80194ec:	460d      	mov	r5, r1
 80194ee:	4565      	cmp	r5, ip
 80194f0:	d30e      	bcc.n	8019510 <__mdiff+0xe8>
 80194f2:	f10c 0203 	add.w	r2, ip, #3
 80194f6:	1a52      	subs	r2, r2, r1
 80194f8:	f022 0203 	bic.w	r2, r2, #3
 80194fc:	3903      	subs	r1, #3
 80194fe:	458c      	cmp	ip, r1
 8019500:	bf38      	it	cc
 8019502:	2200      	movcc	r2, #0
 8019504:	441a      	add	r2, r3
 8019506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801950a:	b17b      	cbz	r3, 801952c <__mdiff+0x104>
 801950c:	6106      	str	r6, [r0, #16]
 801950e:	e7a5      	b.n	801945c <__mdiff+0x34>
 8019510:	f855 8b04 	ldr.w	r8, [r5], #4
 8019514:	fa17 f488 	uxtah	r4, r7, r8
 8019518:	1422      	asrs	r2, r4, #16
 801951a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801951e:	b2a4      	uxth	r4, r4
 8019520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019524:	f84e 4b04 	str.w	r4, [lr], #4
 8019528:	1417      	asrs	r7, r2, #16
 801952a:	e7e0      	b.n	80194ee <__mdiff+0xc6>
 801952c:	3e01      	subs	r6, #1
 801952e:	e7ea      	b.n	8019506 <__mdiff+0xde>
 8019530:	0801c6af 	.word	0x0801c6af
 8019534:	0801c740 	.word	0x0801c740

08019538 <__ulp>:
 8019538:	b082      	sub	sp, #8
 801953a:	ed8d 0b00 	vstr	d0, [sp]
 801953e:	9b01      	ldr	r3, [sp, #4]
 8019540:	4912      	ldr	r1, [pc, #72]	; (801958c <__ulp+0x54>)
 8019542:	4019      	ands	r1, r3
 8019544:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019548:	2900      	cmp	r1, #0
 801954a:	dd05      	ble.n	8019558 <__ulp+0x20>
 801954c:	2200      	movs	r2, #0
 801954e:	460b      	mov	r3, r1
 8019550:	ec43 2b10 	vmov	d0, r2, r3
 8019554:	b002      	add	sp, #8
 8019556:	4770      	bx	lr
 8019558:	4249      	negs	r1, r1
 801955a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801955e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019562:	f04f 0200 	mov.w	r2, #0
 8019566:	f04f 0300 	mov.w	r3, #0
 801956a:	da04      	bge.n	8019576 <__ulp+0x3e>
 801956c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019570:	fa41 f300 	asr.w	r3, r1, r0
 8019574:	e7ec      	b.n	8019550 <__ulp+0x18>
 8019576:	f1a0 0114 	sub.w	r1, r0, #20
 801957a:	291e      	cmp	r1, #30
 801957c:	bfda      	itte	le
 801957e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019582:	fa20 f101 	lsrle.w	r1, r0, r1
 8019586:	2101      	movgt	r1, #1
 8019588:	460a      	mov	r2, r1
 801958a:	e7e1      	b.n	8019550 <__ulp+0x18>
 801958c:	7ff00000 	.word	0x7ff00000

08019590 <__b2d>:
 8019590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019592:	6905      	ldr	r5, [r0, #16]
 8019594:	f100 0714 	add.w	r7, r0, #20
 8019598:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801959c:	1f2e      	subs	r6, r5, #4
 801959e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80195a2:	4620      	mov	r0, r4
 80195a4:	f7ff fd52 	bl	801904c <__hi0bits>
 80195a8:	f1c0 0320 	rsb	r3, r0, #32
 80195ac:	280a      	cmp	r0, #10
 80195ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801962c <__b2d+0x9c>
 80195b2:	600b      	str	r3, [r1, #0]
 80195b4:	dc14      	bgt.n	80195e0 <__b2d+0x50>
 80195b6:	f1c0 0e0b 	rsb	lr, r0, #11
 80195ba:	fa24 f10e 	lsr.w	r1, r4, lr
 80195be:	42b7      	cmp	r7, r6
 80195c0:	ea41 030c 	orr.w	r3, r1, ip
 80195c4:	bf34      	ite	cc
 80195c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80195ca:	2100      	movcs	r1, #0
 80195cc:	3015      	adds	r0, #21
 80195ce:	fa04 f000 	lsl.w	r0, r4, r0
 80195d2:	fa21 f10e 	lsr.w	r1, r1, lr
 80195d6:	ea40 0201 	orr.w	r2, r0, r1
 80195da:	ec43 2b10 	vmov	d0, r2, r3
 80195de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195e0:	42b7      	cmp	r7, r6
 80195e2:	bf3a      	itte	cc
 80195e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80195e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80195ec:	2100      	movcs	r1, #0
 80195ee:	380b      	subs	r0, #11
 80195f0:	d017      	beq.n	8019622 <__b2d+0x92>
 80195f2:	f1c0 0c20 	rsb	ip, r0, #32
 80195f6:	fa04 f500 	lsl.w	r5, r4, r0
 80195fa:	42be      	cmp	r6, r7
 80195fc:	fa21 f40c 	lsr.w	r4, r1, ip
 8019600:	ea45 0504 	orr.w	r5, r5, r4
 8019604:	bf8c      	ite	hi
 8019606:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801960a:	2400      	movls	r4, #0
 801960c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019610:	fa01 f000 	lsl.w	r0, r1, r0
 8019614:	fa24 f40c 	lsr.w	r4, r4, ip
 8019618:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801961c:	ea40 0204 	orr.w	r2, r0, r4
 8019620:	e7db      	b.n	80195da <__b2d+0x4a>
 8019622:	ea44 030c 	orr.w	r3, r4, ip
 8019626:	460a      	mov	r2, r1
 8019628:	e7d7      	b.n	80195da <__b2d+0x4a>
 801962a:	bf00      	nop
 801962c:	3ff00000 	.word	0x3ff00000

08019630 <__d2b>:
 8019630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019634:	4689      	mov	r9, r1
 8019636:	2101      	movs	r1, #1
 8019638:	ec57 6b10 	vmov	r6, r7, d0
 801963c:	4690      	mov	r8, r2
 801963e:	f7ff fc0f 	bl	8018e60 <_Balloc>
 8019642:	4604      	mov	r4, r0
 8019644:	b930      	cbnz	r0, 8019654 <__d2b+0x24>
 8019646:	4602      	mov	r2, r0
 8019648:	4b25      	ldr	r3, [pc, #148]	; (80196e0 <__d2b+0xb0>)
 801964a:	4826      	ldr	r0, [pc, #152]	; (80196e4 <__d2b+0xb4>)
 801964c:	f240 310a 	movw	r1, #778	; 0x30a
 8019650:	f7fe f884 	bl	801775c <__assert_func>
 8019654:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019658:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801965c:	bb35      	cbnz	r5, 80196ac <__d2b+0x7c>
 801965e:	2e00      	cmp	r6, #0
 8019660:	9301      	str	r3, [sp, #4]
 8019662:	d028      	beq.n	80196b6 <__d2b+0x86>
 8019664:	4668      	mov	r0, sp
 8019666:	9600      	str	r6, [sp, #0]
 8019668:	f7ff fd10 	bl	801908c <__lo0bits>
 801966c:	9900      	ldr	r1, [sp, #0]
 801966e:	b300      	cbz	r0, 80196b2 <__d2b+0x82>
 8019670:	9a01      	ldr	r2, [sp, #4]
 8019672:	f1c0 0320 	rsb	r3, r0, #32
 8019676:	fa02 f303 	lsl.w	r3, r2, r3
 801967a:	430b      	orrs	r3, r1
 801967c:	40c2      	lsrs	r2, r0
 801967e:	6163      	str	r3, [r4, #20]
 8019680:	9201      	str	r2, [sp, #4]
 8019682:	9b01      	ldr	r3, [sp, #4]
 8019684:	61a3      	str	r3, [r4, #24]
 8019686:	2b00      	cmp	r3, #0
 8019688:	bf14      	ite	ne
 801968a:	2202      	movne	r2, #2
 801968c:	2201      	moveq	r2, #1
 801968e:	6122      	str	r2, [r4, #16]
 8019690:	b1d5      	cbz	r5, 80196c8 <__d2b+0x98>
 8019692:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019696:	4405      	add	r5, r0
 8019698:	f8c9 5000 	str.w	r5, [r9]
 801969c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80196a0:	f8c8 0000 	str.w	r0, [r8]
 80196a4:	4620      	mov	r0, r4
 80196a6:	b003      	add	sp, #12
 80196a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80196b0:	e7d5      	b.n	801965e <__d2b+0x2e>
 80196b2:	6161      	str	r1, [r4, #20]
 80196b4:	e7e5      	b.n	8019682 <__d2b+0x52>
 80196b6:	a801      	add	r0, sp, #4
 80196b8:	f7ff fce8 	bl	801908c <__lo0bits>
 80196bc:	9b01      	ldr	r3, [sp, #4]
 80196be:	6163      	str	r3, [r4, #20]
 80196c0:	2201      	movs	r2, #1
 80196c2:	6122      	str	r2, [r4, #16]
 80196c4:	3020      	adds	r0, #32
 80196c6:	e7e3      	b.n	8019690 <__d2b+0x60>
 80196c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80196cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80196d0:	f8c9 0000 	str.w	r0, [r9]
 80196d4:	6918      	ldr	r0, [r3, #16]
 80196d6:	f7ff fcb9 	bl	801904c <__hi0bits>
 80196da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80196de:	e7df      	b.n	80196a0 <__d2b+0x70>
 80196e0:	0801c6af 	.word	0x0801c6af
 80196e4:	0801c740 	.word	0x0801c740

080196e8 <__ratio>:
 80196e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196ec:	4688      	mov	r8, r1
 80196ee:	4669      	mov	r1, sp
 80196f0:	4681      	mov	r9, r0
 80196f2:	f7ff ff4d 	bl	8019590 <__b2d>
 80196f6:	a901      	add	r1, sp, #4
 80196f8:	4640      	mov	r0, r8
 80196fa:	ec55 4b10 	vmov	r4, r5, d0
 80196fe:	f7ff ff47 	bl	8019590 <__b2d>
 8019702:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019706:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801970a:	eba3 0c02 	sub.w	ip, r3, r2
 801970e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019712:	1a9b      	subs	r3, r3, r2
 8019714:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019718:	ec51 0b10 	vmov	r0, r1, d0
 801971c:	2b00      	cmp	r3, #0
 801971e:	bfd6      	itet	le
 8019720:	460a      	movle	r2, r1
 8019722:	462a      	movgt	r2, r5
 8019724:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019728:	468b      	mov	fp, r1
 801972a:	462f      	mov	r7, r5
 801972c:	bfd4      	ite	le
 801972e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019732:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019736:	4620      	mov	r0, r4
 8019738:	ee10 2a10 	vmov	r2, s0
 801973c:	465b      	mov	r3, fp
 801973e:	4639      	mov	r1, r7
 8019740:	f7e7 f894 	bl	800086c <__aeabi_ddiv>
 8019744:	ec41 0b10 	vmov	d0, r0, r1
 8019748:	b003      	add	sp, #12
 801974a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801974e <__copybits>:
 801974e:	3901      	subs	r1, #1
 8019750:	b570      	push	{r4, r5, r6, lr}
 8019752:	1149      	asrs	r1, r1, #5
 8019754:	6914      	ldr	r4, [r2, #16]
 8019756:	3101      	adds	r1, #1
 8019758:	f102 0314 	add.w	r3, r2, #20
 801975c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019760:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019764:	1f05      	subs	r5, r0, #4
 8019766:	42a3      	cmp	r3, r4
 8019768:	d30c      	bcc.n	8019784 <__copybits+0x36>
 801976a:	1aa3      	subs	r3, r4, r2
 801976c:	3b11      	subs	r3, #17
 801976e:	f023 0303 	bic.w	r3, r3, #3
 8019772:	3211      	adds	r2, #17
 8019774:	42a2      	cmp	r2, r4
 8019776:	bf88      	it	hi
 8019778:	2300      	movhi	r3, #0
 801977a:	4418      	add	r0, r3
 801977c:	2300      	movs	r3, #0
 801977e:	4288      	cmp	r0, r1
 8019780:	d305      	bcc.n	801978e <__copybits+0x40>
 8019782:	bd70      	pop	{r4, r5, r6, pc}
 8019784:	f853 6b04 	ldr.w	r6, [r3], #4
 8019788:	f845 6f04 	str.w	r6, [r5, #4]!
 801978c:	e7eb      	b.n	8019766 <__copybits+0x18>
 801978e:	f840 3b04 	str.w	r3, [r0], #4
 8019792:	e7f4      	b.n	801977e <__copybits+0x30>

08019794 <__any_on>:
 8019794:	f100 0214 	add.w	r2, r0, #20
 8019798:	6900      	ldr	r0, [r0, #16]
 801979a:	114b      	asrs	r3, r1, #5
 801979c:	4298      	cmp	r0, r3
 801979e:	b510      	push	{r4, lr}
 80197a0:	db11      	blt.n	80197c6 <__any_on+0x32>
 80197a2:	dd0a      	ble.n	80197ba <__any_on+0x26>
 80197a4:	f011 011f 	ands.w	r1, r1, #31
 80197a8:	d007      	beq.n	80197ba <__any_on+0x26>
 80197aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80197ae:	fa24 f001 	lsr.w	r0, r4, r1
 80197b2:	fa00 f101 	lsl.w	r1, r0, r1
 80197b6:	428c      	cmp	r4, r1
 80197b8:	d10b      	bne.n	80197d2 <__any_on+0x3e>
 80197ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80197be:	4293      	cmp	r3, r2
 80197c0:	d803      	bhi.n	80197ca <__any_on+0x36>
 80197c2:	2000      	movs	r0, #0
 80197c4:	bd10      	pop	{r4, pc}
 80197c6:	4603      	mov	r3, r0
 80197c8:	e7f7      	b.n	80197ba <__any_on+0x26>
 80197ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80197ce:	2900      	cmp	r1, #0
 80197d0:	d0f5      	beq.n	80197be <__any_on+0x2a>
 80197d2:	2001      	movs	r0, #1
 80197d4:	e7f6      	b.n	80197c4 <__any_on+0x30>

080197d6 <_calloc_r>:
 80197d6:	b513      	push	{r0, r1, r4, lr}
 80197d8:	434a      	muls	r2, r1
 80197da:	4611      	mov	r1, r2
 80197dc:	9201      	str	r2, [sp, #4]
 80197de:	f7fb fea5 	bl	801552c <_malloc_r>
 80197e2:	4604      	mov	r4, r0
 80197e4:	b118      	cbz	r0, 80197ee <_calloc_r+0x18>
 80197e6:	9a01      	ldr	r2, [sp, #4]
 80197e8:	2100      	movs	r1, #0
 80197ea:	f7fb fe47 	bl	801547c <memset>
 80197ee:	4620      	mov	r0, r4
 80197f0:	b002      	add	sp, #8
 80197f2:	bd10      	pop	{r4, pc}

080197f4 <_realloc_r>:
 80197f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197f6:	4607      	mov	r7, r0
 80197f8:	4614      	mov	r4, r2
 80197fa:	460e      	mov	r6, r1
 80197fc:	b921      	cbnz	r1, 8019808 <_realloc_r+0x14>
 80197fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019802:	4611      	mov	r1, r2
 8019804:	f7fb be92 	b.w	801552c <_malloc_r>
 8019808:	b922      	cbnz	r2, 8019814 <_realloc_r+0x20>
 801980a:	f7fb fe3f 	bl	801548c <_free_r>
 801980e:	4625      	mov	r5, r4
 8019810:	4628      	mov	r0, r5
 8019812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019814:	f000 fe9e 	bl	801a554 <_malloc_usable_size_r>
 8019818:	42a0      	cmp	r0, r4
 801981a:	d20f      	bcs.n	801983c <_realloc_r+0x48>
 801981c:	4621      	mov	r1, r4
 801981e:	4638      	mov	r0, r7
 8019820:	f7fb fe84 	bl	801552c <_malloc_r>
 8019824:	4605      	mov	r5, r0
 8019826:	2800      	cmp	r0, #0
 8019828:	d0f2      	beq.n	8019810 <_realloc_r+0x1c>
 801982a:	4631      	mov	r1, r6
 801982c:	4622      	mov	r2, r4
 801982e:	f7fb fdfd 	bl	801542c <memcpy>
 8019832:	4631      	mov	r1, r6
 8019834:	4638      	mov	r0, r7
 8019836:	f7fb fe29 	bl	801548c <_free_r>
 801983a:	e7e9      	b.n	8019810 <_realloc_r+0x1c>
 801983c:	4635      	mov	r5, r6
 801983e:	e7e7      	b.n	8019810 <_realloc_r+0x1c>

08019840 <__ssputs_r>:
 8019840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019844:	688e      	ldr	r6, [r1, #8]
 8019846:	429e      	cmp	r6, r3
 8019848:	4682      	mov	sl, r0
 801984a:	460c      	mov	r4, r1
 801984c:	4690      	mov	r8, r2
 801984e:	461f      	mov	r7, r3
 8019850:	d838      	bhi.n	80198c4 <__ssputs_r+0x84>
 8019852:	898a      	ldrh	r2, [r1, #12]
 8019854:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019858:	d032      	beq.n	80198c0 <__ssputs_r+0x80>
 801985a:	6825      	ldr	r5, [r4, #0]
 801985c:	6909      	ldr	r1, [r1, #16]
 801985e:	eba5 0901 	sub.w	r9, r5, r1
 8019862:	6965      	ldr	r5, [r4, #20]
 8019864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801986c:	3301      	adds	r3, #1
 801986e:	444b      	add	r3, r9
 8019870:	106d      	asrs	r5, r5, #1
 8019872:	429d      	cmp	r5, r3
 8019874:	bf38      	it	cc
 8019876:	461d      	movcc	r5, r3
 8019878:	0553      	lsls	r3, r2, #21
 801987a:	d531      	bpl.n	80198e0 <__ssputs_r+0xa0>
 801987c:	4629      	mov	r1, r5
 801987e:	f7fb fe55 	bl	801552c <_malloc_r>
 8019882:	4606      	mov	r6, r0
 8019884:	b950      	cbnz	r0, 801989c <__ssputs_r+0x5c>
 8019886:	230c      	movs	r3, #12
 8019888:	f8ca 3000 	str.w	r3, [sl]
 801988c:	89a3      	ldrh	r3, [r4, #12]
 801988e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019892:	81a3      	strh	r3, [r4, #12]
 8019894:	f04f 30ff 	mov.w	r0, #4294967295
 8019898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801989c:	6921      	ldr	r1, [r4, #16]
 801989e:	464a      	mov	r2, r9
 80198a0:	f7fb fdc4 	bl	801542c <memcpy>
 80198a4:	89a3      	ldrh	r3, [r4, #12]
 80198a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80198aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198ae:	81a3      	strh	r3, [r4, #12]
 80198b0:	6126      	str	r6, [r4, #16]
 80198b2:	6165      	str	r5, [r4, #20]
 80198b4:	444e      	add	r6, r9
 80198b6:	eba5 0509 	sub.w	r5, r5, r9
 80198ba:	6026      	str	r6, [r4, #0]
 80198bc:	60a5      	str	r5, [r4, #8]
 80198be:	463e      	mov	r6, r7
 80198c0:	42be      	cmp	r6, r7
 80198c2:	d900      	bls.n	80198c6 <__ssputs_r+0x86>
 80198c4:	463e      	mov	r6, r7
 80198c6:	4632      	mov	r2, r6
 80198c8:	6820      	ldr	r0, [r4, #0]
 80198ca:	4641      	mov	r1, r8
 80198cc:	f7fb fdbc 	bl	8015448 <memmove>
 80198d0:	68a3      	ldr	r3, [r4, #8]
 80198d2:	6822      	ldr	r2, [r4, #0]
 80198d4:	1b9b      	subs	r3, r3, r6
 80198d6:	4432      	add	r2, r6
 80198d8:	60a3      	str	r3, [r4, #8]
 80198da:	6022      	str	r2, [r4, #0]
 80198dc:	2000      	movs	r0, #0
 80198de:	e7db      	b.n	8019898 <__ssputs_r+0x58>
 80198e0:	462a      	mov	r2, r5
 80198e2:	f7ff ff87 	bl	80197f4 <_realloc_r>
 80198e6:	4606      	mov	r6, r0
 80198e8:	2800      	cmp	r0, #0
 80198ea:	d1e1      	bne.n	80198b0 <__ssputs_r+0x70>
 80198ec:	6921      	ldr	r1, [r4, #16]
 80198ee:	4650      	mov	r0, sl
 80198f0:	f7fb fdcc 	bl	801548c <_free_r>
 80198f4:	e7c7      	b.n	8019886 <__ssputs_r+0x46>
	...

080198f8 <_svfiprintf_r>:
 80198f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198fc:	4698      	mov	r8, r3
 80198fe:	898b      	ldrh	r3, [r1, #12]
 8019900:	061b      	lsls	r3, r3, #24
 8019902:	b09d      	sub	sp, #116	; 0x74
 8019904:	4607      	mov	r7, r0
 8019906:	460d      	mov	r5, r1
 8019908:	4614      	mov	r4, r2
 801990a:	d50e      	bpl.n	801992a <_svfiprintf_r+0x32>
 801990c:	690b      	ldr	r3, [r1, #16]
 801990e:	b963      	cbnz	r3, 801992a <_svfiprintf_r+0x32>
 8019910:	2140      	movs	r1, #64	; 0x40
 8019912:	f7fb fe0b 	bl	801552c <_malloc_r>
 8019916:	6028      	str	r0, [r5, #0]
 8019918:	6128      	str	r0, [r5, #16]
 801991a:	b920      	cbnz	r0, 8019926 <_svfiprintf_r+0x2e>
 801991c:	230c      	movs	r3, #12
 801991e:	603b      	str	r3, [r7, #0]
 8019920:	f04f 30ff 	mov.w	r0, #4294967295
 8019924:	e0d1      	b.n	8019aca <_svfiprintf_r+0x1d2>
 8019926:	2340      	movs	r3, #64	; 0x40
 8019928:	616b      	str	r3, [r5, #20]
 801992a:	2300      	movs	r3, #0
 801992c:	9309      	str	r3, [sp, #36]	; 0x24
 801992e:	2320      	movs	r3, #32
 8019930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019934:	f8cd 800c 	str.w	r8, [sp, #12]
 8019938:	2330      	movs	r3, #48	; 0x30
 801993a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019ae4 <_svfiprintf_r+0x1ec>
 801993e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019942:	f04f 0901 	mov.w	r9, #1
 8019946:	4623      	mov	r3, r4
 8019948:	469a      	mov	sl, r3
 801994a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801994e:	b10a      	cbz	r2, 8019954 <_svfiprintf_r+0x5c>
 8019950:	2a25      	cmp	r2, #37	; 0x25
 8019952:	d1f9      	bne.n	8019948 <_svfiprintf_r+0x50>
 8019954:	ebba 0b04 	subs.w	fp, sl, r4
 8019958:	d00b      	beq.n	8019972 <_svfiprintf_r+0x7a>
 801995a:	465b      	mov	r3, fp
 801995c:	4622      	mov	r2, r4
 801995e:	4629      	mov	r1, r5
 8019960:	4638      	mov	r0, r7
 8019962:	f7ff ff6d 	bl	8019840 <__ssputs_r>
 8019966:	3001      	adds	r0, #1
 8019968:	f000 80aa 	beq.w	8019ac0 <_svfiprintf_r+0x1c8>
 801996c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801996e:	445a      	add	r2, fp
 8019970:	9209      	str	r2, [sp, #36]	; 0x24
 8019972:	f89a 3000 	ldrb.w	r3, [sl]
 8019976:	2b00      	cmp	r3, #0
 8019978:	f000 80a2 	beq.w	8019ac0 <_svfiprintf_r+0x1c8>
 801997c:	2300      	movs	r3, #0
 801997e:	f04f 32ff 	mov.w	r2, #4294967295
 8019982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019986:	f10a 0a01 	add.w	sl, sl, #1
 801998a:	9304      	str	r3, [sp, #16]
 801998c:	9307      	str	r3, [sp, #28]
 801998e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019992:	931a      	str	r3, [sp, #104]	; 0x68
 8019994:	4654      	mov	r4, sl
 8019996:	2205      	movs	r2, #5
 8019998:	f814 1b01 	ldrb.w	r1, [r4], #1
 801999c:	4851      	ldr	r0, [pc, #324]	; (8019ae4 <_svfiprintf_r+0x1ec>)
 801999e:	f7e6 fc2f 	bl	8000200 <memchr>
 80199a2:	9a04      	ldr	r2, [sp, #16]
 80199a4:	b9d8      	cbnz	r0, 80199de <_svfiprintf_r+0xe6>
 80199a6:	06d0      	lsls	r0, r2, #27
 80199a8:	bf44      	itt	mi
 80199aa:	2320      	movmi	r3, #32
 80199ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80199b0:	0711      	lsls	r1, r2, #28
 80199b2:	bf44      	itt	mi
 80199b4:	232b      	movmi	r3, #43	; 0x2b
 80199b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80199ba:	f89a 3000 	ldrb.w	r3, [sl]
 80199be:	2b2a      	cmp	r3, #42	; 0x2a
 80199c0:	d015      	beq.n	80199ee <_svfiprintf_r+0xf6>
 80199c2:	9a07      	ldr	r2, [sp, #28]
 80199c4:	4654      	mov	r4, sl
 80199c6:	2000      	movs	r0, #0
 80199c8:	f04f 0c0a 	mov.w	ip, #10
 80199cc:	4621      	mov	r1, r4
 80199ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80199d2:	3b30      	subs	r3, #48	; 0x30
 80199d4:	2b09      	cmp	r3, #9
 80199d6:	d94e      	bls.n	8019a76 <_svfiprintf_r+0x17e>
 80199d8:	b1b0      	cbz	r0, 8019a08 <_svfiprintf_r+0x110>
 80199da:	9207      	str	r2, [sp, #28]
 80199dc:	e014      	b.n	8019a08 <_svfiprintf_r+0x110>
 80199de:	eba0 0308 	sub.w	r3, r0, r8
 80199e2:	fa09 f303 	lsl.w	r3, r9, r3
 80199e6:	4313      	orrs	r3, r2
 80199e8:	9304      	str	r3, [sp, #16]
 80199ea:	46a2      	mov	sl, r4
 80199ec:	e7d2      	b.n	8019994 <_svfiprintf_r+0x9c>
 80199ee:	9b03      	ldr	r3, [sp, #12]
 80199f0:	1d19      	adds	r1, r3, #4
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	9103      	str	r1, [sp, #12]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	bfbb      	ittet	lt
 80199fa:	425b      	neglt	r3, r3
 80199fc:	f042 0202 	orrlt.w	r2, r2, #2
 8019a00:	9307      	strge	r3, [sp, #28]
 8019a02:	9307      	strlt	r3, [sp, #28]
 8019a04:	bfb8      	it	lt
 8019a06:	9204      	strlt	r2, [sp, #16]
 8019a08:	7823      	ldrb	r3, [r4, #0]
 8019a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8019a0c:	d10c      	bne.n	8019a28 <_svfiprintf_r+0x130>
 8019a0e:	7863      	ldrb	r3, [r4, #1]
 8019a10:	2b2a      	cmp	r3, #42	; 0x2a
 8019a12:	d135      	bne.n	8019a80 <_svfiprintf_r+0x188>
 8019a14:	9b03      	ldr	r3, [sp, #12]
 8019a16:	1d1a      	adds	r2, r3, #4
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	9203      	str	r2, [sp, #12]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	bfb8      	it	lt
 8019a20:	f04f 33ff 	movlt.w	r3, #4294967295
 8019a24:	3402      	adds	r4, #2
 8019a26:	9305      	str	r3, [sp, #20]
 8019a28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019af4 <_svfiprintf_r+0x1fc>
 8019a2c:	7821      	ldrb	r1, [r4, #0]
 8019a2e:	2203      	movs	r2, #3
 8019a30:	4650      	mov	r0, sl
 8019a32:	f7e6 fbe5 	bl	8000200 <memchr>
 8019a36:	b140      	cbz	r0, 8019a4a <_svfiprintf_r+0x152>
 8019a38:	2340      	movs	r3, #64	; 0x40
 8019a3a:	eba0 000a 	sub.w	r0, r0, sl
 8019a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8019a42:	9b04      	ldr	r3, [sp, #16]
 8019a44:	4303      	orrs	r3, r0
 8019a46:	3401      	adds	r4, #1
 8019a48:	9304      	str	r3, [sp, #16]
 8019a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a4e:	4826      	ldr	r0, [pc, #152]	; (8019ae8 <_svfiprintf_r+0x1f0>)
 8019a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019a54:	2206      	movs	r2, #6
 8019a56:	f7e6 fbd3 	bl	8000200 <memchr>
 8019a5a:	2800      	cmp	r0, #0
 8019a5c:	d038      	beq.n	8019ad0 <_svfiprintf_r+0x1d8>
 8019a5e:	4b23      	ldr	r3, [pc, #140]	; (8019aec <_svfiprintf_r+0x1f4>)
 8019a60:	bb1b      	cbnz	r3, 8019aaa <_svfiprintf_r+0x1b2>
 8019a62:	9b03      	ldr	r3, [sp, #12]
 8019a64:	3307      	adds	r3, #7
 8019a66:	f023 0307 	bic.w	r3, r3, #7
 8019a6a:	3308      	adds	r3, #8
 8019a6c:	9303      	str	r3, [sp, #12]
 8019a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a70:	4433      	add	r3, r6
 8019a72:	9309      	str	r3, [sp, #36]	; 0x24
 8019a74:	e767      	b.n	8019946 <_svfiprintf_r+0x4e>
 8019a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8019a7a:	460c      	mov	r4, r1
 8019a7c:	2001      	movs	r0, #1
 8019a7e:	e7a5      	b.n	80199cc <_svfiprintf_r+0xd4>
 8019a80:	2300      	movs	r3, #0
 8019a82:	3401      	adds	r4, #1
 8019a84:	9305      	str	r3, [sp, #20]
 8019a86:	4619      	mov	r1, r3
 8019a88:	f04f 0c0a 	mov.w	ip, #10
 8019a8c:	4620      	mov	r0, r4
 8019a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a92:	3a30      	subs	r2, #48	; 0x30
 8019a94:	2a09      	cmp	r2, #9
 8019a96:	d903      	bls.n	8019aa0 <_svfiprintf_r+0x1a8>
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d0c5      	beq.n	8019a28 <_svfiprintf_r+0x130>
 8019a9c:	9105      	str	r1, [sp, #20]
 8019a9e:	e7c3      	b.n	8019a28 <_svfiprintf_r+0x130>
 8019aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8019aa4:	4604      	mov	r4, r0
 8019aa6:	2301      	movs	r3, #1
 8019aa8:	e7f0      	b.n	8019a8c <_svfiprintf_r+0x194>
 8019aaa:	ab03      	add	r3, sp, #12
 8019aac:	9300      	str	r3, [sp, #0]
 8019aae:	462a      	mov	r2, r5
 8019ab0:	4b0f      	ldr	r3, [pc, #60]	; (8019af0 <_svfiprintf_r+0x1f8>)
 8019ab2:	a904      	add	r1, sp, #16
 8019ab4:	4638      	mov	r0, r7
 8019ab6:	f7fb fe33 	bl	8015720 <_printf_float>
 8019aba:	1c42      	adds	r2, r0, #1
 8019abc:	4606      	mov	r6, r0
 8019abe:	d1d6      	bne.n	8019a6e <_svfiprintf_r+0x176>
 8019ac0:	89ab      	ldrh	r3, [r5, #12]
 8019ac2:	065b      	lsls	r3, r3, #25
 8019ac4:	f53f af2c 	bmi.w	8019920 <_svfiprintf_r+0x28>
 8019ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019aca:	b01d      	add	sp, #116	; 0x74
 8019acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ad0:	ab03      	add	r3, sp, #12
 8019ad2:	9300      	str	r3, [sp, #0]
 8019ad4:	462a      	mov	r2, r5
 8019ad6:	4b06      	ldr	r3, [pc, #24]	; (8019af0 <_svfiprintf_r+0x1f8>)
 8019ad8:	a904      	add	r1, sp, #16
 8019ada:	4638      	mov	r0, r7
 8019adc:	f7fc f8c4 	bl	8015c68 <_printf_i>
 8019ae0:	e7eb      	b.n	8019aba <_svfiprintf_r+0x1c2>
 8019ae2:	bf00      	nop
 8019ae4:	0801c89c 	.word	0x0801c89c
 8019ae8:	0801c8a6 	.word	0x0801c8a6
 8019aec:	08015721 	.word	0x08015721
 8019af0:	08019841 	.word	0x08019841
 8019af4:	0801c8a2 	.word	0x0801c8a2

08019af8 <_sungetc_r>:
 8019af8:	b538      	push	{r3, r4, r5, lr}
 8019afa:	1c4b      	adds	r3, r1, #1
 8019afc:	4614      	mov	r4, r2
 8019afe:	d103      	bne.n	8019b08 <_sungetc_r+0x10>
 8019b00:	f04f 35ff 	mov.w	r5, #4294967295
 8019b04:	4628      	mov	r0, r5
 8019b06:	bd38      	pop	{r3, r4, r5, pc}
 8019b08:	8993      	ldrh	r3, [r2, #12]
 8019b0a:	f023 0320 	bic.w	r3, r3, #32
 8019b0e:	8193      	strh	r3, [r2, #12]
 8019b10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019b12:	6852      	ldr	r2, [r2, #4]
 8019b14:	b2cd      	uxtb	r5, r1
 8019b16:	b18b      	cbz	r3, 8019b3c <_sungetc_r+0x44>
 8019b18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019b1a:	4293      	cmp	r3, r2
 8019b1c:	dd08      	ble.n	8019b30 <_sungetc_r+0x38>
 8019b1e:	6823      	ldr	r3, [r4, #0]
 8019b20:	1e5a      	subs	r2, r3, #1
 8019b22:	6022      	str	r2, [r4, #0]
 8019b24:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019b28:	6863      	ldr	r3, [r4, #4]
 8019b2a:	3301      	adds	r3, #1
 8019b2c:	6063      	str	r3, [r4, #4]
 8019b2e:	e7e9      	b.n	8019b04 <_sungetc_r+0xc>
 8019b30:	4621      	mov	r1, r4
 8019b32:	f000 fca5 	bl	801a480 <__submore>
 8019b36:	2800      	cmp	r0, #0
 8019b38:	d0f1      	beq.n	8019b1e <_sungetc_r+0x26>
 8019b3a:	e7e1      	b.n	8019b00 <_sungetc_r+0x8>
 8019b3c:	6921      	ldr	r1, [r4, #16]
 8019b3e:	6823      	ldr	r3, [r4, #0]
 8019b40:	b151      	cbz	r1, 8019b58 <_sungetc_r+0x60>
 8019b42:	4299      	cmp	r1, r3
 8019b44:	d208      	bcs.n	8019b58 <_sungetc_r+0x60>
 8019b46:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019b4a:	42a9      	cmp	r1, r5
 8019b4c:	d104      	bne.n	8019b58 <_sungetc_r+0x60>
 8019b4e:	3b01      	subs	r3, #1
 8019b50:	3201      	adds	r2, #1
 8019b52:	6023      	str	r3, [r4, #0]
 8019b54:	6062      	str	r2, [r4, #4]
 8019b56:	e7d5      	b.n	8019b04 <_sungetc_r+0xc>
 8019b58:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b60:	6363      	str	r3, [r4, #52]	; 0x34
 8019b62:	2303      	movs	r3, #3
 8019b64:	63a3      	str	r3, [r4, #56]	; 0x38
 8019b66:	4623      	mov	r3, r4
 8019b68:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019b6c:	6023      	str	r3, [r4, #0]
 8019b6e:	2301      	movs	r3, #1
 8019b70:	e7dc      	b.n	8019b2c <_sungetc_r+0x34>

08019b72 <__ssrefill_r>:
 8019b72:	b510      	push	{r4, lr}
 8019b74:	460c      	mov	r4, r1
 8019b76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019b78:	b169      	cbz	r1, 8019b96 <__ssrefill_r+0x24>
 8019b7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b7e:	4299      	cmp	r1, r3
 8019b80:	d001      	beq.n	8019b86 <__ssrefill_r+0x14>
 8019b82:	f7fb fc83 	bl	801548c <_free_r>
 8019b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019b88:	6063      	str	r3, [r4, #4]
 8019b8a:	2000      	movs	r0, #0
 8019b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8019b8e:	b113      	cbz	r3, 8019b96 <__ssrefill_r+0x24>
 8019b90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019b92:	6023      	str	r3, [r4, #0]
 8019b94:	bd10      	pop	{r4, pc}
 8019b96:	6923      	ldr	r3, [r4, #16]
 8019b98:	6023      	str	r3, [r4, #0]
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	6063      	str	r3, [r4, #4]
 8019b9e:	89a3      	ldrh	r3, [r4, #12]
 8019ba0:	f043 0320 	orr.w	r3, r3, #32
 8019ba4:	81a3      	strh	r3, [r4, #12]
 8019ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8019baa:	e7f3      	b.n	8019b94 <__ssrefill_r+0x22>

08019bac <__ssvfiscanf_r>:
 8019bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bb0:	460c      	mov	r4, r1
 8019bb2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019bb6:	2100      	movs	r1, #0
 8019bb8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8019bbc:	49b2      	ldr	r1, [pc, #712]	; (8019e88 <__ssvfiscanf_r+0x2dc>)
 8019bbe:	91a0      	str	r1, [sp, #640]	; 0x280
 8019bc0:	f10d 0804 	add.w	r8, sp, #4
 8019bc4:	49b1      	ldr	r1, [pc, #708]	; (8019e8c <__ssvfiscanf_r+0x2e0>)
 8019bc6:	4fb2      	ldr	r7, [pc, #712]	; (8019e90 <__ssvfiscanf_r+0x2e4>)
 8019bc8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8019e94 <__ssvfiscanf_r+0x2e8>
 8019bcc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019bd0:	4606      	mov	r6, r0
 8019bd2:	91a1      	str	r1, [sp, #644]	; 0x284
 8019bd4:	9300      	str	r3, [sp, #0]
 8019bd6:	f892 a000 	ldrb.w	sl, [r2]
 8019bda:	f1ba 0f00 	cmp.w	sl, #0
 8019bde:	f000 8151 	beq.w	8019e84 <__ssvfiscanf_r+0x2d8>
 8019be2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8019be6:	f013 0308 	ands.w	r3, r3, #8
 8019bea:	f102 0501 	add.w	r5, r2, #1
 8019bee:	d019      	beq.n	8019c24 <__ssvfiscanf_r+0x78>
 8019bf0:	6863      	ldr	r3, [r4, #4]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	dd0f      	ble.n	8019c16 <__ssvfiscanf_r+0x6a>
 8019bf6:	6823      	ldr	r3, [r4, #0]
 8019bf8:	781a      	ldrb	r2, [r3, #0]
 8019bfa:	5cba      	ldrb	r2, [r7, r2]
 8019bfc:	0712      	lsls	r2, r2, #28
 8019bfe:	d401      	bmi.n	8019c04 <__ssvfiscanf_r+0x58>
 8019c00:	462a      	mov	r2, r5
 8019c02:	e7e8      	b.n	8019bd6 <__ssvfiscanf_r+0x2a>
 8019c04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019c06:	3201      	adds	r2, #1
 8019c08:	9245      	str	r2, [sp, #276]	; 0x114
 8019c0a:	6862      	ldr	r2, [r4, #4]
 8019c0c:	3301      	adds	r3, #1
 8019c0e:	3a01      	subs	r2, #1
 8019c10:	6062      	str	r2, [r4, #4]
 8019c12:	6023      	str	r3, [r4, #0]
 8019c14:	e7ec      	b.n	8019bf0 <__ssvfiscanf_r+0x44>
 8019c16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019c18:	4621      	mov	r1, r4
 8019c1a:	4630      	mov	r0, r6
 8019c1c:	4798      	blx	r3
 8019c1e:	2800      	cmp	r0, #0
 8019c20:	d0e9      	beq.n	8019bf6 <__ssvfiscanf_r+0x4a>
 8019c22:	e7ed      	b.n	8019c00 <__ssvfiscanf_r+0x54>
 8019c24:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8019c28:	f040 8083 	bne.w	8019d32 <__ssvfiscanf_r+0x186>
 8019c2c:	9341      	str	r3, [sp, #260]	; 0x104
 8019c2e:	9343      	str	r3, [sp, #268]	; 0x10c
 8019c30:	7853      	ldrb	r3, [r2, #1]
 8019c32:	2b2a      	cmp	r3, #42	; 0x2a
 8019c34:	bf02      	ittt	eq
 8019c36:	2310      	moveq	r3, #16
 8019c38:	1c95      	addeq	r5, r2, #2
 8019c3a:	9341      	streq	r3, [sp, #260]	; 0x104
 8019c3c:	220a      	movs	r2, #10
 8019c3e:	46ab      	mov	fp, r5
 8019c40:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8019c44:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8019c48:	2b09      	cmp	r3, #9
 8019c4a:	d91d      	bls.n	8019c88 <__ssvfiscanf_r+0xdc>
 8019c4c:	4891      	ldr	r0, [pc, #580]	; (8019e94 <__ssvfiscanf_r+0x2e8>)
 8019c4e:	2203      	movs	r2, #3
 8019c50:	f7e6 fad6 	bl	8000200 <memchr>
 8019c54:	b140      	cbz	r0, 8019c68 <__ssvfiscanf_r+0xbc>
 8019c56:	2301      	movs	r3, #1
 8019c58:	eba0 0009 	sub.w	r0, r0, r9
 8019c5c:	fa03 f000 	lsl.w	r0, r3, r0
 8019c60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019c62:	4318      	orrs	r0, r3
 8019c64:	9041      	str	r0, [sp, #260]	; 0x104
 8019c66:	465d      	mov	r5, fp
 8019c68:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019c6c:	2b78      	cmp	r3, #120	; 0x78
 8019c6e:	d806      	bhi.n	8019c7e <__ssvfiscanf_r+0xd2>
 8019c70:	2b57      	cmp	r3, #87	; 0x57
 8019c72:	d810      	bhi.n	8019c96 <__ssvfiscanf_r+0xea>
 8019c74:	2b25      	cmp	r3, #37	; 0x25
 8019c76:	d05c      	beq.n	8019d32 <__ssvfiscanf_r+0x186>
 8019c78:	d856      	bhi.n	8019d28 <__ssvfiscanf_r+0x17c>
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d074      	beq.n	8019d68 <__ssvfiscanf_r+0x1bc>
 8019c7e:	2303      	movs	r3, #3
 8019c80:	9347      	str	r3, [sp, #284]	; 0x11c
 8019c82:	230a      	movs	r3, #10
 8019c84:	9342      	str	r3, [sp, #264]	; 0x108
 8019c86:	e081      	b.n	8019d8c <__ssvfiscanf_r+0x1e0>
 8019c88:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019c8a:	fb02 1303 	mla	r3, r2, r3, r1
 8019c8e:	3b30      	subs	r3, #48	; 0x30
 8019c90:	9343      	str	r3, [sp, #268]	; 0x10c
 8019c92:	465d      	mov	r5, fp
 8019c94:	e7d3      	b.n	8019c3e <__ssvfiscanf_r+0x92>
 8019c96:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8019c9a:	2a20      	cmp	r2, #32
 8019c9c:	d8ef      	bhi.n	8019c7e <__ssvfiscanf_r+0xd2>
 8019c9e:	a101      	add	r1, pc, #4	; (adr r1, 8019ca4 <__ssvfiscanf_r+0xf8>)
 8019ca0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019ca4:	08019d77 	.word	0x08019d77
 8019ca8:	08019c7f 	.word	0x08019c7f
 8019cac:	08019c7f 	.word	0x08019c7f
 8019cb0:	08019dd5 	.word	0x08019dd5
 8019cb4:	08019c7f 	.word	0x08019c7f
 8019cb8:	08019c7f 	.word	0x08019c7f
 8019cbc:	08019c7f 	.word	0x08019c7f
 8019cc0:	08019c7f 	.word	0x08019c7f
 8019cc4:	08019c7f 	.word	0x08019c7f
 8019cc8:	08019c7f 	.word	0x08019c7f
 8019ccc:	08019c7f 	.word	0x08019c7f
 8019cd0:	08019deb 	.word	0x08019deb
 8019cd4:	08019dc1 	.word	0x08019dc1
 8019cd8:	08019d2f 	.word	0x08019d2f
 8019cdc:	08019d2f 	.word	0x08019d2f
 8019ce0:	08019d2f 	.word	0x08019d2f
 8019ce4:	08019c7f 	.word	0x08019c7f
 8019ce8:	08019dc5 	.word	0x08019dc5
 8019cec:	08019c7f 	.word	0x08019c7f
 8019cf0:	08019c7f 	.word	0x08019c7f
 8019cf4:	08019c7f 	.word	0x08019c7f
 8019cf8:	08019c7f 	.word	0x08019c7f
 8019cfc:	08019dfb 	.word	0x08019dfb
 8019d00:	08019dcd 	.word	0x08019dcd
 8019d04:	08019d6f 	.word	0x08019d6f
 8019d08:	08019c7f 	.word	0x08019c7f
 8019d0c:	08019c7f 	.word	0x08019c7f
 8019d10:	08019df7 	.word	0x08019df7
 8019d14:	08019c7f 	.word	0x08019c7f
 8019d18:	08019dc1 	.word	0x08019dc1
 8019d1c:	08019c7f 	.word	0x08019c7f
 8019d20:	08019c7f 	.word	0x08019c7f
 8019d24:	08019d77 	.word	0x08019d77
 8019d28:	3b45      	subs	r3, #69	; 0x45
 8019d2a:	2b02      	cmp	r3, #2
 8019d2c:	d8a7      	bhi.n	8019c7e <__ssvfiscanf_r+0xd2>
 8019d2e:	2305      	movs	r3, #5
 8019d30:	e02b      	b.n	8019d8a <__ssvfiscanf_r+0x1de>
 8019d32:	6863      	ldr	r3, [r4, #4]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	dd0d      	ble.n	8019d54 <__ssvfiscanf_r+0x1a8>
 8019d38:	6823      	ldr	r3, [r4, #0]
 8019d3a:	781a      	ldrb	r2, [r3, #0]
 8019d3c:	4552      	cmp	r2, sl
 8019d3e:	f040 80a1 	bne.w	8019e84 <__ssvfiscanf_r+0x2d8>
 8019d42:	3301      	adds	r3, #1
 8019d44:	6862      	ldr	r2, [r4, #4]
 8019d46:	6023      	str	r3, [r4, #0]
 8019d48:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019d4a:	3a01      	subs	r2, #1
 8019d4c:	3301      	adds	r3, #1
 8019d4e:	6062      	str	r2, [r4, #4]
 8019d50:	9345      	str	r3, [sp, #276]	; 0x114
 8019d52:	e755      	b.n	8019c00 <__ssvfiscanf_r+0x54>
 8019d54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019d56:	4621      	mov	r1, r4
 8019d58:	4630      	mov	r0, r6
 8019d5a:	4798      	blx	r3
 8019d5c:	2800      	cmp	r0, #0
 8019d5e:	d0eb      	beq.n	8019d38 <__ssvfiscanf_r+0x18c>
 8019d60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019d62:	2800      	cmp	r0, #0
 8019d64:	f040 8084 	bne.w	8019e70 <__ssvfiscanf_r+0x2c4>
 8019d68:	f04f 30ff 	mov.w	r0, #4294967295
 8019d6c:	e086      	b.n	8019e7c <__ssvfiscanf_r+0x2d0>
 8019d6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019d70:	f042 0220 	orr.w	r2, r2, #32
 8019d74:	9241      	str	r2, [sp, #260]	; 0x104
 8019d76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019d7c:	9241      	str	r2, [sp, #260]	; 0x104
 8019d7e:	2210      	movs	r2, #16
 8019d80:	2b6f      	cmp	r3, #111	; 0x6f
 8019d82:	9242      	str	r2, [sp, #264]	; 0x108
 8019d84:	bf34      	ite	cc
 8019d86:	2303      	movcc	r3, #3
 8019d88:	2304      	movcs	r3, #4
 8019d8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8019d8c:	6863      	ldr	r3, [r4, #4]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	dd41      	ble.n	8019e16 <__ssvfiscanf_r+0x26a>
 8019d92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019d94:	0659      	lsls	r1, r3, #25
 8019d96:	d404      	bmi.n	8019da2 <__ssvfiscanf_r+0x1f6>
 8019d98:	6823      	ldr	r3, [r4, #0]
 8019d9a:	781a      	ldrb	r2, [r3, #0]
 8019d9c:	5cba      	ldrb	r2, [r7, r2]
 8019d9e:	0712      	lsls	r2, r2, #28
 8019da0:	d440      	bmi.n	8019e24 <__ssvfiscanf_r+0x278>
 8019da2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019da4:	2b02      	cmp	r3, #2
 8019da6:	dc4f      	bgt.n	8019e48 <__ssvfiscanf_r+0x29c>
 8019da8:	466b      	mov	r3, sp
 8019daa:	4622      	mov	r2, r4
 8019dac:	a941      	add	r1, sp, #260	; 0x104
 8019dae:	4630      	mov	r0, r6
 8019db0:	f000 f9ce 	bl	801a150 <_scanf_chars>
 8019db4:	2801      	cmp	r0, #1
 8019db6:	d065      	beq.n	8019e84 <__ssvfiscanf_r+0x2d8>
 8019db8:	2802      	cmp	r0, #2
 8019dba:	f47f af21 	bne.w	8019c00 <__ssvfiscanf_r+0x54>
 8019dbe:	e7cf      	b.n	8019d60 <__ssvfiscanf_r+0x1b4>
 8019dc0:	220a      	movs	r2, #10
 8019dc2:	e7dd      	b.n	8019d80 <__ssvfiscanf_r+0x1d4>
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	9342      	str	r3, [sp, #264]	; 0x108
 8019dc8:	2303      	movs	r3, #3
 8019dca:	e7de      	b.n	8019d8a <__ssvfiscanf_r+0x1de>
 8019dcc:	2308      	movs	r3, #8
 8019dce:	9342      	str	r3, [sp, #264]	; 0x108
 8019dd0:	2304      	movs	r3, #4
 8019dd2:	e7da      	b.n	8019d8a <__ssvfiscanf_r+0x1de>
 8019dd4:	4629      	mov	r1, r5
 8019dd6:	4640      	mov	r0, r8
 8019dd8:	f000 fb18 	bl	801a40c <__sccl>
 8019ddc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019de2:	9341      	str	r3, [sp, #260]	; 0x104
 8019de4:	4605      	mov	r5, r0
 8019de6:	2301      	movs	r3, #1
 8019de8:	e7cf      	b.n	8019d8a <__ssvfiscanf_r+0x1de>
 8019dea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019df0:	9341      	str	r3, [sp, #260]	; 0x104
 8019df2:	2300      	movs	r3, #0
 8019df4:	e7c9      	b.n	8019d8a <__ssvfiscanf_r+0x1de>
 8019df6:	2302      	movs	r3, #2
 8019df8:	e7c7      	b.n	8019d8a <__ssvfiscanf_r+0x1de>
 8019dfa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019dfc:	06c3      	lsls	r3, r0, #27
 8019dfe:	f53f aeff 	bmi.w	8019c00 <__ssvfiscanf_r+0x54>
 8019e02:	9b00      	ldr	r3, [sp, #0]
 8019e04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019e06:	1d19      	adds	r1, r3, #4
 8019e08:	9100      	str	r1, [sp, #0]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	07c0      	lsls	r0, r0, #31
 8019e0e:	bf4c      	ite	mi
 8019e10:	801a      	strhmi	r2, [r3, #0]
 8019e12:	601a      	strpl	r2, [r3, #0]
 8019e14:	e6f4      	b.n	8019c00 <__ssvfiscanf_r+0x54>
 8019e16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019e18:	4621      	mov	r1, r4
 8019e1a:	4630      	mov	r0, r6
 8019e1c:	4798      	blx	r3
 8019e1e:	2800      	cmp	r0, #0
 8019e20:	d0b7      	beq.n	8019d92 <__ssvfiscanf_r+0x1e6>
 8019e22:	e79d      	b.n	8019d60 <__ssvfiscanf_r+0x1b4>
 8019e24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019e26:	3201      	adds	r2, #1
 8019e28:	9245      	str	r2, [sp, #276]	; 0x114
 8019e2a:	6862      	ldr	r2, [r4, #4]
 8019e2c:	3a01      	subs	r2, #1
 8019e2e:	2a00      	cmp	r2, #0
 8019e30:	6062      	str	r2, [r4, #4]
 8019e32:	dd02      	ble.n	8019e3a <__ssvfiscanf_r+0x28e>
 8019e34:	3301      	adds	r3, #1
 8019e36:	6023      	str	r3, [r4, #0]
 8019e38:	e7ae      	b.n	8019d98 <__ssvfiscanf_r+0x1ec>
 8019e3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019e3c:	4621      	mov	r1, r4
 8019e3e:	4630      	mov	r0, r6
 8019e40:	4798      	blx	r3
 8019e42:	2800      	cmp	r0, #0
 8019e44:	d0a8      	beq.n	8019d98 <__ssvfiscanf_r+0x1ec>
 8019e46:	e78b      	b.n	8019d60 <__ssvfiscanf_r+0x1b4>
 8019e48:	2b04      	cmp	r3, #4
 8019e4a:	dc06      	bgt.n	8019e5a <__ssvfiscanf_r+0x2ae>
 8019e4c:	466b      	mov	r3, sp
 8019e4e:	4622      	mov	r2, r4
 8019e50:	a941      	add	r1, sp, #260	; 0x104
 8019e52:	4630      	mov	r0, r6
 8019e54:	f000 f9d4 	bl	801a200 <_scanf_i>
 8019e58:	e7ac      	b.n	8019db4 <__ssvfiscanf_r+0x208>
 8019e5a:	4b0f      	ldr	r3, [pc, #60]	; (8019e98 <__ssvfiscanf_r+0x2ec>)
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	f43f aecf 	beq.w	8019c00 <__ssvfiscanf_r+0x54>
 8019e62:	466b      	mov	r3, sp
 8019e64:	4622      	mov	r2, r4
 8019e66:	a941      	add	r1, sp, #260	; 0x104
 8019e68:	4630      	mov	r0, r6
 8019e6a:	f7fc f823 	bl	8015eb4 <_scanf_float>
 8019e6e:	e7a1      	b.n	8019db4 <__ssvfiscanf_r+0x208>
 8019e70:	89a3      	ldrh	r3, [r4, #12]
 8019e72:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019e76:	bf18      	it	ne
 8019e78:	f04f 30ff 	movne.w	r0, #4294967295
 8019e7c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e84:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019e86:	e7f9      	b.n	8019e7c <__ssvfiscanf_r+0x2d0>
 8019e88:	08019af9 	.word	0x08019af9
 8019e8c:	08019b73 	.word	0x08019b73
 8019e90:	0801c401 	.word	0x0801c401
 8019e94:	0801c8a2 	.word	0x0801c8a2
 8019e98:	08015eb5 	.word	0x08015eb5

08019e9c <__sfputc_r>:
 8019e9c:	6893      	ldr	r3, [r2, #8]
 8019e9e:	3b01      	subs	r3, #1
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	b410      	push	{r4}
 8019ea4:	6093      	str	r3, [r2, #8]
 8019ea6:	da08      	bge.n	8019eba <__sfputc_r+0x1e>
 8019ea8:	6994      	ldr	r4, [r2, #24]
 8019eaa:	42a3      	cmp	r3, r4
 8019eac:	db01      	blt.n	8019eb2 <__sfputc_r+0x16>
 8019eae:	290a      	cmp	r1, #10
 8019eb0:	d103      	bne.n	8019eba <__sfputc_r+0x1e>
 8019eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019eb6:	f7fd bb7f 	b.w	80175b8 <__swbuf_r>
 8019eba:	6813      	ldr	r3, [r2, #0]
 8019ebc:	1c58      	adds	r0, r3, #1
 8019ebe:	6010      	str	r0, [r2, #0]
 8019ec0:	7019      	strb	r1, [r3, #0]
 8019ec2:	4608      	mov	r0, r1
 8019ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ec8:	4770      	bx	lr

08019eca <__sfputs_r>:
 8019eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ecc:	4606      	mov	r6, r0
 8019ece:	460f      	mov	r7, r1
 8019ed0:	4614      	mov	r4, r2
 8019ed2:	18d5      	adds	r5, r2, r3
 8019ed4:	42ac      	cmp	r4, r5
 8019ed6:	d101      	bne.n	8019edc <__sfputs_r+0x12>
 8019ed8:	2000      	movs	r0, #0
 8019eda:	e007      	b.n	8019eec <__sfputs_r+0x22>
 8019edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ee0:	463a      	mov	r2, r7
 8019ee2:	4630      	mov	r0, r6
 8019ee4:	f7ff ffda 	bl	8019e9c <__sfputc_r>
 8019ee8:	1c43      	adds	r3, r0, #1
 8019eea:	d1f3      	bne.n	8019ed4 <__sfputs_r+0xa>
 8019eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019ef0 <_vfiprintf_r>:
 8019ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ef4:	460d      	mov	r5, r1
 8019ef6:	b09d      	sub	sp, #116	; 0x74
 8019ef8:	4614      	mov	r4, r2
 8019efa:	4698      	mov	r8, r3
 8019efc:	4606      	mov	r6, r0
 8019efe:	b118      	cbz	r0, 8019f08 <_vfiprintf_r+0x18>
 8019f00:	6983      	ldr	r3, [r0, #24]
 8019f02:	b90b      	cbnz	r3, 8019f08 <_vfiprintf_r+0x18>
 8019f04:	f7fb f9c4 	bl	8015290 <__sinit>
 8019f08:	4b89      	ldr	r3, [pc, #548]	; (801a130 <_vfiprintf_r+0x240>)
 8019f0a:	429d      	cmp	r5, r3
 8019f0c:	d11b      	bne.n	8019f46 <_vfiprintf_r+0x56>
 8019f0e:	6875      	ldr	r5, [r6, #4]
 8019f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f12:	07d9      	lsls	r1, r3, #31
 8019f14:	d405      	bmi.n	8019f22 <_vfiprintf_r+0x32>
 8019f16:	89ab      	ldrh	r3, [r5, #12]
 8019f18:	059a      	lsls	r2, r3, #22
 8019f1a:	d402      	bmi.n	8019f22 <_vfiprintf_r+0x32>
 8019f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f1e:	f7fb fa7a 	bl	8015416 <__retarget_lock_acquire_recursive>
 8019f22:	89ab      	ldrh	r3, [r5, #12]
 8019f24:	071b      	lsls	r3, r3, #28
 8019f26:	d501      	bpl.n	8019f2c <_vfiprintf_r+0x3c>
 8019f28:	692b      	ldr	r3, [r5, #16]
 8019f2a:	b9eb      	cbnz	r3, 8019f68 <_vfiprintf_r+0x78>
 8019f2c:	4629      	mov	r1, r5
 8019f2e:	4630      	mov	r0, r6
 8019f30:	f7fd fba6 	bl	8017680 <__swsetup_r>
 8019f34:	b1c0      	cbz	r0, 8019f68 <_vfiprintf_r+0x78>
 8019f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f38:	07dc      	lsls	r4, r3, #31
 8019f3a:	d50e      	bpl.n	8019f5a <_vfiprintf_r+0x6a>
 8019f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f40:	b01d      	add	sp, #116	; 0x74
 8019f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f46:	4b7b      	ldr	r3, [pc, #492]	; (801a134 <_vfiprintf_r+0x244>)
 8019f48:	429d      	cmp	r5, r3
 8019f4a:	d101      	bne.n	8019f50 <_vfiprintf_r+0x60>
 8019f4c:	68b5      	ldr	r5, [r6, #8]
 8019f4e:	e7df      	b.n	8019f10 <_vfiprintf_r+0x20>
 8019f50:	4b79      	ldr	r3, [pc, #484]	; (801a138 <_vfiprintf_r+0x248>)
 8019f52:	429d      	cmp	r5, r3
 8019f54:	bf08      	it	eq
 8019f56:	68f5      	ldreq	r5, [r6, #12]
 8019f58:	e7da      	b.n	8019f10 <_vfiprintf_r+0x20>
 8019f5a:	89ab      	ldrh	r3, [r5, #12]
 8019f5c:	0598      	lsls	r0, r3, #22
 8019f5e:	d4ed      	bmi.n	8019f3c <_vfiprintf_r+0x4c>
 8019f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f62:	f7fb fa59 	bl	8015418 <__retarget_lock_release_recursive>
 8019f66:	e7e9      	b.n	8019f3c <_vfiprintf_r+0x4c>
 8019f68:	2300      	movs	r3, #0
 8019f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8019f6c:	2320      	movs	r3, #32
 8019f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f76:	2330      	movs	r3, #48	; 0x30
 8019f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a13c <_vfiprintf_r+0x24c>
 8019f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019f80:	f04f 0901 	mov.w	r9, #1
 8019f84:	4623      	mov	r3, r4
 8019f86:	469a      	mov	sl, r3
 8019f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f8c:	b10a      	cbz	r2, 8019f92 <_vfiprintf_r+0xa2>
 8019f8e:	2a25      	cmp	r2, #37	; 0x25
 8019f90:	d1f9      	bne.n	8019f86 <_vfiprintf_r+0x96>
 8019f92:	ebba 0b04 	subs.w	fp, sl, r4
 8019f96:	d00b      	beq.n	8019fb0 <_vfiprintf_r+0xc0>
 8019f98:	465b      	mov	r3, fp
 8019f9a:	4622      	mov	r2, r4
 8019f9c:	4629      	mov	r1, r5
 8019f9e:	4630      	mov	r0, r6
 8019fa0:	f7ff ff93 	bl	8019eca <__sfputs_r>
 8019fa4:	3001      	adds	r0, #1
 8019fa6:	f000 80aa 	beq.w	801a0fe <_vfiprintf_r+0x20e>
 8019faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019fac:	445a      	add	r2, fp
 8019fae:	9209      	str	r2, [sp, #36]	; 0x24
 8019fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	f000 80a2 	beq.w	801a0fe <_vfiprintf_r+0x20e>
 8019fba:	2300      	movs	r3, #0
 8019fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8019fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019fc4:	f10a 0a01 	add.w	sl, sl, #1
 8019fc8:	9304      	str	r3, [sp, #16]
 8019fca:	9307      	str	r3, [sp, #28]
 8019fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8019fd2:	4654      	mov	r4, sl
 8019fd4:	2205      	movs	r2, #5
 8019fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fda:	4858      	ldr	r0, [pc, #352]	; (801a13c <_vfiprintf_r+0x24c>)
 8019fdc:	f7e6 f910 	bl	8000200 <memchr>
 8019fe0:	9a04      	ldr	r2, [sp, #16]
 8019fe2:	b9d8      	cbnz	r0, 801a01c <_vfiprintf_r+0x12c>
 8019fe4:	06d1      	lsls	r1, r2, #27
 8019fe6:	bf44      	itt	mi
 8019fe8:	2320      	movmi	r3, #32
 8019fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019fee:	0713      	lsls	r3, r2, #28
 8019ff0:	bf44      	itt	mi
 8019ff2:	232b      	movmi	r3, #43	; 0x2b
 8019ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8019ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8019ffe:	d015      	beq.n	801a02c <_vfiprintf_r+0x13c>
 801a000:	9a07      	ldr	r2, [sp, #28]
 801a002:	4654      	mov	r4, sl
 801a004:	2000      	movs	r0, #0
 801a006:	f04f 0c0a 	mov.w	ip, #10
 801a00a:	4621      	mov	r1, r4
 801a00c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a010:	3b30      	subs	r3, #48	; 0x30
 801a012:	2b09      	cmp	r3, #9
 801a014:	d94e      	bls.n	801a0b4 <_vfiprintf_r+0x1c4>
 801a016:	b1b0      	cbz	r0, 801a046 <_vfiprintf_r+0x156>
 801a018:	9207      	str	r2, [sp, #28]
 801a01a:	e014      	b.n	801a046 <_vfiprintf_r+0x156>
 801a01c:	eba0 0308 	sub.w	r3, r0, r8
 801a020:	fa09 f303 	lsl.w	r3, r9, r3
 801a024:	4313      	orrs	r3, r2
 801a026:	9304      	str	r3, [sp, #16]
 801a028:	46a2      	mov	sl, r4
 801a02a:	e7d2      	b.n	8019fd2 <_vfiprintf_r+0xe2>
 801a02c:	9b03      	ldr	r3, [sp, #12]
 801a02e:	1d19      	adds	r1, r3, #4
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	9103      	str	r1, [sp, #12]
 801a034:	2b00      	cmp	r3, #0
 801a036:	bfbb      	ittet	lt
 801a038:	425b      	neglt	r3, r3
 801a03a:	f042 0202 	orrlt.w	r2, r2, #2
 801a03e:	9307      	strge	r3, [sp, #28]
 801a040:	9307      	strlt	r3, [sp, #28]
 801a042:	bfb8      	it	lt
 801a044:	9204      	strlt	r2, [sp, #16]
 801a046:	7823      	ldrb	r3, [r4, #0]
 801a048:	2b2e      	cmp	r3, #46	; 0x2e
 801a04a:	d10c      	bne.n	801a066 <_vfiprintf_r+0x176>
 801a04c:	7863      	ldrb	r3, [r4, #1]
 801a04e:	2b2a      	cmp	r3, #42	; 0x2a
 801a050:	d135      	bne.n	801a0be <_vfiprintf_r+0x1ce>
 801a052:	9b03      	ldr	r3, [sp, #12]
 801a054:	1d1a      	adds	r2, r3, #4
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	9203      	str	r2, [sp, #12]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	bfb8      	it	lt
 801a05e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a062:	3402      	adds	r4, #2
 801a064:	9305      	str	r3, [sp, #20]
 801a066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a14c <_vfiprintf_r+0x25c>
 801a06a:	7821      	ldrb	r1, [r4, #0]
 801a06c:	2203      	movs	r2, #3
 801a06e:	4650      	mov	r0, sl
 801a070:	f7e6 f8c6 	bl	8000200 <memchr>
 801a074:	b140      	cbz	r0, 801a088 <_vfiprintf_r+0x198>
 801a076:	2340      	movs	r3, #64	; 0x40
 801a078:	eba0 000a 	sub.w	r0, r0, sl
 801a07c:	fa03 f000 	lsl.w	r0, r3, r0
 801a080:	9b04      	ldr	r3, [sp, #16]
 801a082:	4303      	orrs	r3, r0
 801a084:	3401      	adds	r4, #1
 801a086:	9304      	str	r3, [sp, #16]
 801a088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a08c:	482c      	ldr	r0, [pc, #176]	; (801a140 <_vfiprintf_r+0x250>)
 801a08e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a092:	2206      	movs	r2, #6
 801a094:	f7e6 f8b4 	bl	8000200 <memchr>
 801a098:	2800      	cmp	r0, #0
 801a09a:	d03f      	beq.n	801a11c <_vfiprintf_r+0x22c>
 801a09c:	4b29      	ldr	r3, [pc, #164]	; (801a144 <_vfiprintf_r+0x254>)
 801a09e:	bb1b      	cbnz	r3, 801a0e8 <_vfiprintf_r+0x1f8>
 801a0a0:	9b03      	ldr	r3, [sp, #12]
 801a0a2:	3307      	adds	r3, #7
 801a0a4:	f023 0307 	bic.w	r3, r3, #7
 801a0a8:	3308      	adds	r3, #8
 801a0aa:	9303      	str	r3, [sp, #12]
 801a0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0ae:	443b      	add	r3, r7
 801a0b0:	9309      	str	r3, [sp, #36]	; 0x24
 801a0b2:	e767      	b.n	8019f84 <_vfiprintf_r+0x94>
 801a0b4:	fb0c 3202 	mla	r2, ip, r2, r3
 801a0b8:	460c      	mov	r4, r1
 801a0ba:	2001      	movs	r0, #1
 801a0bc:	e7a5      	b.n	801a00a <_vfiprintf_r+0x11a>
 801a0be:	2300      	movs	r3, #0
 801a0c0:	3401      	adds	r4, #1
 801a0c2:	9305      	str	r3, [sp, #20]
 801a0c4:	4619      	mov	r1, r3
 801a0c6:	f04f 0c0a 	mov.w	ip, #10
 801a0ca:	4620      	mov	r0, r4
 801a0cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a0d0:	3a30      	subs	r2, #48	; 0x30
 801a0d2:	2a09      	cmp	r2, #9
 801a0d4:	d903      	bls.n	801a0de <_vfiprintf_r+0x1ee>
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d0c5      	beq.n	801a066 <_vfiprintf_r+0x176>
 801a0da:	9105      	str	r1, [sp, #20]
 801a0dc:	e7c3      	b.n	801a066 <_vfiprintf_r+0x176>
 801a0de:	fb0c 2101 	mla	r1, ip, r1, r2
 801a0e2:	4604      	mov	r4, r0
 801a0e4:	2301      	movs	r3, #1
 801a0e6:	e7f0      	b.n	801a0ca <_vfiprintf_r+0x1da>
 801a0e8:	ab03      	add	r3, sp, #12
 801a0ea:	9300      	str	r3, [sp, #0]
 801a0ec:	462a      	mov	r2, r5
 801a0ee:	4b16      	ldr	r3, [pc, #88]	; (801a148 <_vfiprintf_r+0x258>)
 801a0f0:	a904      	add	r1, sp, #16
 801a0f2:	4630      	mov	r0, r6
 801a0f4:	f7fb fb14 	bl	8015720 <_printf_float>
 801a0f8:	4607      	mov	r7, r0
 801a0fa:	1c78      	adds	r0, r7, #1
 801a0fc:	d1d6      	bne.n	801a0ac <_vfiprintf_r+0x1bc>
 801a0fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a100:	07d9      	lsls	r1, r3, #31
 801a102:	d405      	bmi.n	801a110 <_vfiprintf_r+0x220>
 801a104:	89ab      	ldrh	r3, [r5, #12]
 801a106:	059a      	lsls	r2, r3, #22
 801a108:	d402      	bmi.n	801a110 <_vfiprintf_r+0x220>
 801a10a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a10c:	f7fb f984 	bl	8015418 <__retarget_lock_release_recursive>
 801a110:	89ab      	ldrh	r3, [r5, #12]
 801a112:	065b      	lsls	r3, r3, #25
 801a114:	f53f af12 	bmi.w	8019f3c <_vfiprintf_r+0x4c>
 801a118:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a11a:	e711      	b.n	8019f40 <_vfiprintf_r+0x50>
 801a11c:	ab03      	add	r3, sp, #12
 801a11e:	9300      	str	r3, [sp, #0]
 801a120:	462a      	mov	r2, r5
 801a122:	4b09      	ldr	r3, [pc, #36]	; (801a148 <_vfiprintf_r+0x258>)
 801a124:	a904      	add	r1, sp, #16
 801a126:	4630      	mov	r0, r6
 801a128:	f7fb fd9e 	bl	8015c68 <_printf_i>
 801a12c:	e7e4      	b.n	801a0f8 <_vfiprintf_r+0x208>
 801a12e:	bf00      	nop
 801a130:	0801c524 	.word	0x0801c524
 801a134:	0801c544 	.word	0x0801c544
 801a138:	0801c504 	.word	0x0801c504
 801a13c:	0801c89c 	.word	0x0801c89c
 801a140:	0801c8a6 	.word	0x0801c8a6
 801a144:	08015721 	.word	0x08015721
 801a148:	08019ecb 	.word	0x08019ecb
 801a14c:	0801c8a2 	.word	0x0801c8a2

0801a150 <_scanf_chars>:
 801a150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a154:	4615      	mov	r5, r2
 801a156:	688a      	ldr	r2, [r1, #8]
 801a158:	4680      	mov	r8, r0
 801a15a:	460c      	mov	r4, r1
 801a15c:	b932      	cbnz	r2, 801a16c <_scanf_chars+0x1c>
 801a15e:	698a      	ldr	r2, [r1, #24]
 801a160:	2a00      	cmp	r2, #0
 801a162:	bf0c      	ite	eq
 801a164:	2201      	moveq	r2, #1
 801a166:	f04f 32ff 	movne.w	r2, #4294967295
 801a16a:	608a      	str	r2, [r1, #8]
 801a16c:	6822      	ldr	r2, [r4, #0]
 801a16e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801a1fc <_scanf_chars+0xac>
 801a172:	06d1      	lsls	r1, r2, #27
 801a174:	bf5f      	itttt	pl
 801a176:	681a      	ldrpl	r2, [r3, #0]
 801a178:	1d11      	addpl	r1, r2, #4
 801a17a:	6019      	strpl	r1, [r3, #0]
 801a17c:	6816      	ldrpl	r6, [r2, #0]
 801a17e:	2700      	movs	r7, #0
 801a180:	69a0      	ldr	r0, [r4, #24]
 801a182:	b188      	cbz	r0, 801a1a8 <_scanf_chars+0x58>
 801a184:	2801      	cmp	r0, #1
 801a186:	d107      	bne.n	801a198 <_scanf_chars+0x48>
 801a188:	682b      	ldr	r3, [r5, #0]
 801a18a:	781a      	ldrb	r2, [r3, #0]
 801a18c:	6963      	ldr	r3, [r4, #20]
 801a18e:	5c9b      	ldrb	r3, [r3, r2]
 801a190:	b953      	cbnz	r3, 801a1a8 <_scanf_chars+0x58>
 801a192:	bb27      	cbnz	r7, 801a1de <_scanf_chars+0x8e>
 801a194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a198:	2802      	cmp	r0, #2
 801a19a:	d120      	bne.n	801a1de <_scanf_chars+0x8e>
 801a19c:	682b      	ldr	r3, [r5, #0]
 801a19e:	781b      	ldrb	r3, [r3, #0]
 801a1a0:	f813 3009 	ldrb.w	r3, [r3, r9]
 801a1a4:	071b      	lsls	r3, r3, #28
 801a1a6:	d41a      	bmi.n	801a1de <_scanf_chars+0x8e>
 801a1a8:	6823      	ldr	r3, [r4, #0]
 801a1aa:	06da      	lsls	r2, r3, #27
 801a1ac:	bf5e      	ittt	pl
 801a1ae:	682b      	ldrpl	r3, [r5, #0]
 801a1b0:	781b      	ldrbpl	r3, [r3, #0]
 801a1b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a1b6:	682a      	ldr	r2, [r5, #0]
 801a1b8:	686b      	ldr	r3, [r5, #4]
 801a1ba:	3201      	adds	r2, #1
 801a1bc:	602a      	str	r2, [r5, #0]
 801a1be:	68a2      	ldr	r2, [r4, #8]
 801a1c0:	3b01      	subs	r3, #1
 801a1c2:	3a01      	subs	r2, #1
 801a1c4:	606b      	str	r3, [r5, #4]
 801a1c6:	3701      	adds	r7, #1
 801a1c8:	60a2      	str	r2, [r4, #8]
 801a1ca:	b142      	cbz	r2, 801a1de <_scanf_chars+0x8e>
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	dcd7      	bgt.n	801a180 <_scanf_chars+0x30>
 801a1d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a1d4:	4629      	mov	r1, r5
 801a1d6:	4640      	mov	r0, r8
 801a1d8:	4798      	blx	r3
 801a1da:	2800      	cmp	r0, #0
 801a1dc:	d0d0      	beq.n	801a180 <_scanf_chars+0x30>
 801a1de:	6823      	ldr	r3, [r4, #0]
 801a1e0:	f013 0310 	ands.w	r3, r3, #16
 801a1e4:	d105      	bne.n	801a1f2 <_scanf_chars+0xa2>
 801a1e6:	68e2      	ldr	r2, [r4, #12]
 801a1e8:	3201      	adds	r2, #1
 801a1ea:	60e2      	str	r2, [r4, #12]
 801a1ec:	69a2      	ldr	r2, [r4, #24]
 801a1ee:	b102      	cbz	r2, 801a1f2 <_scanf_chars+0xa2>
 801a1f0:	7033      	strb	r3, [r6, #0]
 801a1f2:	6923      	ldr	r3, [r4, #16]
 801a1f4:	441f      	add	r7, r3
 801a1f6:	6127      	str	r7, [r4, #16]
 801a1f8:	2000      	movs	r0, #0
 801a1fa:	e7cb      	b.n	801a194 <_scanf_chars+0x44>
 801a1fc:	0801c401 	.word	0x0801c401

0801a200 <_scanf_i>:
 801a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a204:	4698      	mov	r8, r3
 801a206:	4b74      	ldr	r3, [pc, #464]	; (801a3d8 <_scanf_i+0x1d8>)
 801a208:	460c      	mov	r4, r1
 801a20a:	4682      	mov	sl, r0
 801a20c:	4616      	mov	r6, r2
 801a20e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a212:	b087      	sub	sp, #28
 801a214:	ab03      	add	r3, sp, #12
 801a216:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a21a:	4b70      	ldr	r3, [pc, #448]	; (801a3dc <_scanf_i+0x1dc>)
 801a21c:	69a1      	ldr	r1, [r4, #24]
 801a21e:	4a70      	ldr	r2, [pc, #448]	; (801a3e0 <_scanf_i+0x1e0>)
 801a220:	2903      	cmp	r1, #3
 801a222:	bf18      	it	ne
 801a224:	461a      	movne	r2, r3
 801a226:	68a3      	ldr	r3, [r4, #8]
 801a228:	9201      	str	r2, [sp, #4]
 801a22a:	1e5a      	subs	r2, r3, #1
 801a22c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a230:	bf88      	it	hi
 801a232:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a236:	4627      	mov	r7, r4
 801a238:	bf82      	ittt	hi
 801a23a:	eb03 0905 	addhi.w	r9, r3, r5
 801a23e:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a242:	60a3      	strhi	r3, [r4, #8]
 801a244:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a248:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a24c:	bf98      	it	ls
 801a24e:	f04f 0900 	movls.w	r9, #0
 801a252:	6023      	str	r3, [r4, #0]
 801a254:	463d      	mov	r5, r7
 801a256:	f04f 0b00 	mov.w	fp, #0
 801a25a:	6831      	ldr	r1, [r6, #0]
 801a25c:	ab03      	add	r3, sp, #12
 801a25e:	7809      	ldrb	r1, [r1, #0]
 801a260:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a264:	2202      	movs	r2, #2
 801a266:	f7e5 ffcb 	bl	8000200 <memchr>
 801a26a:	b328      	cbz	r0, 801a2b8 <_scanf_i+0xb8>
 801a26c:	f1bb 0f01 	cmp.w	fp, #1
 801a270:	d159      	bne.n	801a326 <_scanf_i+0x126>
 801a272:	6862      	ldr	r2, [r4, #4]
 801a274:	b92a      	cbnz	r2, 801a282 <_scanf_i+0x82>
 801a276:	6822      	ldr	r2, [r4, #0]
 801a278:	2308      	movs	r3, #8
 801a27a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a27e:	6063      	str	r3, [r4, #4]
 801a280:	6022      	str	r2, [r4, #0]
 801a282:	6822      	ldr	r2, [r4, #0]
 801a284:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a288:	6022      	str	r2, [r4, #0]
 801a28a:	68a2      	ldr	r2, [r4, #8]
 801a28c:	1e51      	subs	r1, r2, #1
 801a28e:	60a1      	str	r1, [r4, #8]
 801a290:	b192      	cbz	r2, 801a2b8 <_scanf_i+0xb8>
 801a292:	6832      	ldr	r2, [r6, #0]
 801a294:	1c51      	adds	r1, r2, #1
 801a296:	6031      	str	r1, [r6, #0]
 801a298:	7812      	ldrb	r2, [r2, #0]
 801a29a:	f805 2b01 	strb.w	r2, [r5], #1
 801a29e:	6872      	ldr	r2, [r6, #4]
 801a2a0:	3a01      	subs	r2, #1
 801a2a2:	2a00      	cmp	r2, #0
 801a2a4:	6072      	str	r2, [r6, #4]
 801a2a6:	dc07      	bgt.n	801a2b8 <_scanf_i+0xb8>
 801a2a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801a2ac:	4631      	mov	r1, r6
 801a2ae:	4650      	mov	r0, sl
 801a2b0:	4790      	blx	r2
 801a2b2:	2800      	cmp	r0, #0
 801a2b4:	f040 8085 	bne.w	801a3c2 <_scanf_i+0x1c2>
 801a2b8:	f10b 0b01 	add.w	fp, fp, #1
 801a2bc:	f1bb 0f03 	cmp.w	fp, #3
 801a2c0:	d1cb      	bne.n	801a25a <_scanf_i+0x5a>
 801a2c2:	6863      	ldr	r3, [r4, #4]
 801a2c4:	b90b      	cbnz	r3, 801a2ca <_scanf_i+0xca>
 801a2c6:	230a      	movs	r3, #10
 801a2c8:	6063      	str	r3, [r4, #4]
 801a2ca:	6863      	ldr	r3, [r4, #4]
 801a2cc:	4945      	ldr	r1, [pc, #276]	; (801a3e4 <_scanf_i+0x1e4>)
 801a2ce:	6960      	ldr	r0, [r4, #20]
 801a2d0:	1ac9      	subs	r1, r1, r3
 801a2d2:	f000 f89b 	bl	801a40c <__sccl>
 801a2d6:	f04f 0b00 	mov.w	fp, #0
 801a2da:	68a3      	ldr	r3, [r4, #8]
 801a2dc:	6822      	ldr	r2, [r4, #0]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d03d      	beq.n	801a35e <_scanf_i+0x15e>
 801a2e2:	6831      	ldr	r1, [r6, #0]
 801a2e4:	6960      	ldr	r0, [r4, #20]
 801a2e6:	f891 c000 	ldrb.w	ip, [r1]
 801a2ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a2ee:	2800      	cmp	r0, #0
 801a2f0:	d035      	beq.n	801a35e <_scanf_i+0x15e>
 801a2f2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a2f6:	d124      	bne.n	801a342 <_scanf_i+0x142>
 801a2f8:	0510      	lsls	r0, r2, #20
 801a2fa:	d522      	bpl.n	801a342 <_scanf_i+0x142>
 801a2fc:	f10b 0b01 	add.w	fp, fp, #1
 801a300:	f1b9 0f00 	cmp.w	r9, #0
 801a304:	d003      	beq.n	801a30e <_scanf_i+0x10e>
 801a306:	3301      	adds	r3, #1
 801a308:	f109 39ff 	add.w	r9, r9, #4294967295
 801a30c:	60a3      	str	r3, [r4, #8]
 801a30e:	6873      	ldr	r3, [r6, #4]
 801a310:	3b01      	subs	r3, #1
 801a312:	2b00      	cmp	r3, #0
 801a314:	6073      	str	r3, [r6, #4]
 801a316:	dd1b      	ble.n	801a350 <_scanf_i+0x150>
 801a318:	6833      	ldr	r3, [r6, #0]
 801a31a:	3301      	adds	r3, #1
 801a31c:	6033      	str	r3, [r6, #0]
 801a31e:	68a3      	ldr	r3, [r4, #8]
 801a320:	3b01      	subs	r3, #1
 801a322:	60a3      	str	r3, [r4, #8]
 801a324:	e7d9      	b.n	801a2da <_scanf_i+0xda>
 801a326:	f1bb 0f02 	cmp.w	fp, #2
 801a32a:	d1ae      	bne.n	801a28a <_scanf_i+0x8a>
 801a32c:	6822      	ldr	r2, [r4, #0]
 801a32e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a332:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a336:	d1bf      	bne.n	801a2b8 <_scanf_i+0xb8>
 801a338:	2310      	movs	r3, #16
 801a33a:	6063      	str	r3, [r4, #4]
 801a33c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a340:	e7a2      	b.n	801a288 <_scanf_i+0x88>
 801a342:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a346:	6022      	str	r2, [r4, #0]
 801a348:	780b      	ldrb	r3, [r1, #0]
 801a34a:	f805 3b01 	strb.w	r3, [r5], #1
 801a34e:	e7de      	b.n	801a30e <_scanf_i+0x10e>
 801a350:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a354:	4631      	mov	r1, r6
 801a356:	4650      	mov	r0, sl
 801a358:	4798      	blx	r3
 801a35a:	2800      	cmp	r0, #0
 801a35c:	d0df      	beq.n	801a31e <_scanf_i+0x11e>
 801a35e:	6823      	ldr	r3, [r4, #0]
 801a360:	05d9      	lsls	r1, r3, #23
 801a362:	d50d      	bpl.n	801a380 <_scanf_i+0x180>
 801a364:	42bd      	cmp	r5, r7
 801a366:	d909      	bls.n	801a37c <_scanf_i+0x17c>
 801a368:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a36c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a370:	4632      	mov	r2, r6
 801a372:	4650      	mov	r0, sl
 801a374:	4798      	blx	r3
 801a376:	f105 39ff 	add.w	r9, r5, #4294967295
 801a37a:	464d      	mov	r5, r9
 801a37c:	42bd      	cmp	r5, r7
 801a37e:	d028      	beq.n	801a3d2 <_scanf_i+0x1d2>
 801a380:	6822      	ldr	r2, [r4, #0]
 801a382:	f012 0210 	ands.w	r2, r2, #16
 801a386:	d113      	bne.n	801a3b0 <_scanf_i+0x1b0>
 801a388:	702a      	strb	r2, [r5, #0]
 801a38a:	6863      	ldr	r3, [r4, #4]
 801a38c:	9e01      	ldr	r6, [sp, #4]
 801a38e:	4639      	mov	r1, r7
 801a390:	4650      	mov	r0, sl
 801a392:	47b0      	blx	r6
 801a394:	f8d8 3000 	ldr.w	r3, [r8]
 801a398:	6821      	ldr	r1, [r4, #0]
 801a39a:	1d1a      	adds	r2, r3, #4
 801a39c:	f8c8 2000 	str.w	r2, [r8]
 801a3a0:	f011 0f20 	tst.w	r1, #32
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	d00f      	beq.n	801a3c8 <_scanf_i+0x1c8>
 801a3a8:	6018      	str	r0, [r3, #0]
 801a3aa:	68e3      	ldr	r3, [r4, #12]
 801a3ac:	3301      	adds	r3, #1
 801a3ae:	60e3      	str	r3, [r4, #12]
 801a3b0:	1bed      	subs	r5, r5, r7
 801a3b2:	44ab      	add	fp, r5
 801a3b4:	6925      	ldr	r5, [r4, #16]
 801a3b6:	445d      	add	r5, fp
 801a3b8:	6125      	str	r5, [r4, #16]
 801a3ba:	2000      	movs	r0, #0
 801a3bc:	b007      	add	sp, #28
 801a3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3c2:	f04f 0b00 	mov.w	fp, #0
 801a3c6:	e7ca      	b.n	801a35e <_scanf_i+0x15e>
 801a3c8:	07ca      	lsls	r2, r1, #31
 801a3ca:	bf4c      	ite	mi
 801a3cc:	8018      	strhmi	r0, [r3, #0]
 801a3ce:	6018      	strpl	r0, [r3, #0]
 801a3d0:	e7eb      	b.n	801a3aa <_scanf_i+0x1aa>
 801a3d2:	2001      	movs	r0, #1
 801a3d4:	e7f2      	b.n	801a3bc <_scanf_i+0x1bc>
 801a3d6:	bf00      	nop
 801a3d8:	0801c1f0 	.word	0x0801c1f0
 801a3dc:	08017541 	.word	0x08017541
 801a3e0:	08017431 	.word	0x08017431
 801a3e4:	0801c8c6 	.word	0x0801c8c6

0801a3e8 <_read_r>:
 801a3e8:	b538      	push	{r3, r4, r5, lr}
 801a3ea:	4d07      	ldr	r5, [pc, #28]	; (801a408 <_read_r+0x20>)
 801a3ec:	4604      	mov	r4, r0
 801a3ee:	4608      	mov	r0, r1
 801a3f0:	4611      	mov	r1, r2
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	602a      	str	r2, [r5, #0]
 801a3f6:	461a      	mov	r2, r3
 801a3f8:	f7e8 fee0 	bl	80031bc <_read>
 801a3fc:	1c43      	adds	r3, r0, #1
 801a3fe:	d102      	bne.n	801a406 <_read_r+0x1e>
 801a400:	682b      	ldr	r3, [r5, #0]
 801a402:	b103      	cbz	r3, 801a406 <_read_r+0x1e>
 801a404:	6023      	str	r3, [r4, #0]
 801a406:	bd38      	pop	{r3, r4, r5, pc}
 801a408:	200071a0 	.word	0x200071a0

0801a40c <__sccl>:
 801a40c:	b570      	push	{r4, r5, r6, lr}
 801a40e:	780b      	ldrb	r3, [r1, #0]
 801a410:	4604      	mov	r4, r0
 801a412:	2b5e      	cmp	r3, #94	; 0x5e
 801a414:	bf0b      	itete	eq
 801a416:	784b      	ldrbeq	r3, [r1, #1]
 801a418:	1c48      	addne	r0, r1, #1
 801a41a:	1c88      	addeq	r0, r1, #2
 801a41c:	2200      	movne	r2, #0
 801a41e:	bf08      	it	eq
 801a420:	2201      	moveq	r2, #1
 801a422:	1e61      	subs	r1, r4, #1
 801a424:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801a428:	f801 2f01 	strb.w	r2, [r1, #1]!
 801a42c:	42a9      	cmp	r1, r5
 801a42e:	d1fb      	bne.n	801a428 <__sccl+0x1c>
 801a430:	b90b      	cbnz	r3, 801a436 <__sccl+0x2a>
 801a432:	3801      	subs	r0, #1
 801a434:	bd70      	pop	{r4, r5, r6, pc}
 801a436:	f082 0101 	eor.w	r1, r2, #1
 801a43a:	54e1      	strb	r1, [r4, r3]
 801a43c:	1c42      	adds	r2, r0, #1
 801a43e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801a442:	2d2d      	cmp	r5, #45	; 0x2d
 801a444:	f102 36ff 	add.w	r6, r2, #4294967295
 801a448:	4610      	mov	r0, r2
 801a44a:	d006      	beq.n	801a45a <__sccl+0x4e>
 801a44c:	2d5d      	cmp	r5, #93	; 0x5d
 801a44e:	d0f1      	beq.n	801a434 <__sccl+0x28>
 801a450:	b90d      	cbnz	r5, 801a456 <__sccl+0x4a>
 801a452:	4630      	mov	r0, r6
 801a454:	e7ee      	b.n	801a434 <__sccl+0x28>
 801a456:	462b      	mov	r3, r5
 801a458:	e7ef      	b.n	801a43a <__sccl+0x2e>
 801a45a:	7816      	ldrb	r6, [r2, #0]
 801a45c:	2e5d      	cmp	r6, #93	; 0x5d
 801a45e:	d0fa      	beq.n	801a456 <__sccl+0x4a>
 801a460:	42b3      	cmp	r3, r6
 801a462:	dcf8      	bgt.n	801a456 <__sccl+0x4a>
 801a464:	4618      	mov	r0, r3
 801a466:	3001      	adds	r0, #1
 801a468:	4286      	cmp	r6, r0
 801a46a:	5421      	strb	r1, [r4, r0]
 801a46c:	dcfb      	bgt.n	801a466 <__sccl+0x5a>
 801a46e:	43d8      	mvns	r0, r3
 801a470:	4430      	add	r0, r6
 801a472:	1c5d      	adds	r5, r3, #1
 801a474:	42b3      	cmp	r3, r6
 801a476:	bfa8      	it	ge
 801a478:	2000      	movge	r0, #0
 801a47a:	182b      	adds	r3, r5, r0
 801a47c:	3202      	adds	r2, #2
 801a47e:	e7de      	b.n	801a43e <__sccl+0x32>

0801a480 <__submore>:
 801a480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a484:	460c      	mov	r4, r1
 801a486:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a48c:	4299      	cmp	r1, r3
 801a48e:	d11d      	bne.n	801a4cc <__submore+0x4c>
 801a490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a494:	f7fb f84a 	bl	801552c <_malloc_r>
 801a498:	b918      	cbnz	r0, 801a4a2 <__submore+0x22>
 801a49a:	f04f 30ff 	mov.w	r0, #4294967295
 801a49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a4a6:	63a3      	str	r3, [r4, #56]	; 0x38
 801a4a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a4ac:	6360      	str	r0, [r4, #52]	; 0x34
 801a4ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a4b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a4b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a4ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a4be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a4c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a4c6:	6020      	str	r0, [r4, #0]
 801a4c8:	2000      	movs	r0, #0
 801a4ca:	e7e8      	b.n	801a49e <__submore+0x1e>
 801a4cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a4ce:	0077      	lsls	r7, r6, #1
 801a4d0:	463a      	mov	r2, r7
 801a4d2:	f7ff f98f 	bl	80197f4 <_realloc_r>
 801a4d6:	4605      	mov	r5, r0
 801a4d8:	2800      	cmp	r0, #0
 801a4da:	d0de      	beq.n	801a49a <__submore+0x1a>
 801a4dc:	eb00 0806 	add.w	r8, r0, r6
 801a4e0:	4601      	mov	r1, r0
 801a4e2:	4632      	mov	r2, r6
 801a4e4:	4640      	mov	r0, r8
 801a4e6:	f7fa ffa1 	bl	801542c <memcpy>
 801a4ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a4ee:	f8c4 8000 	str.w	r8, [r4]
 801a4f2:	e7e9      	b.n	801a4c8 <__submore+0x48>

0801a4f4 <__ascii_wctomb>:
 801a4f4:	b149      	cbz	r1, 801a50a <__ascii_wctomb+0x16>
 801a4f6:	2aff      	cmp	r2, #255	; 0xff
 801a4f8:	bf85      	ittet	hi
 801a4fa:	238a      	movhi	r3, #138	; 0x8a
 801a4fc:	6003      	strhi	r3, [r0, #0]
 801a4fe:	700a      	strbls	r2, [r1, #0]
 801a500:	f04f 30ff 	movhi.w	r0, #4294967295
 801a504:	bf98      	it	ls
 801a506:	2001      	movls	r0, #1
 801a508:	4770      	bx	lr
 801a50a:	4608      	mov	r0, r1
 801a50c:	4770      	bx	lr
	...

0801a510 <_fstat_r>:
 801a510:	b538      	push	{r3, r4, r5, lr}
 801a512:	4d07      	ldr	r5, [pc, #28]	; (801a530 <_fstat_r+0x20>)
 801a514:	2300      	movs	r3, #0
 801a516:	4604      	mov	r4, r0
 801a518:	4608      	mov	r0, r1
 801a51a:	4611      	mov	r1, r2
 801a51c:	602b      	str	r3, [r5, #0]
 801a51e:	f7e8 fe92 	bl	8003246 <_fstat>
 801a522:	1c43      	adds	r3, r0, #1
 801a524:	d102      	bne.n	801a52c <_fstat_r+0x1c>
 801a526:	682b      	ldr	r3, [r5, #0]
 801a528:	b103      	cbz	r3, 801a52c <_fstat_r+0x1c>
 801a52a:	6023      	str	r3, [r4, #0]
 801a52c:	bd38      	pop	{r3, r4, r5, pc}
 801a52e:	bf00      	nop
 801a530:	200071a0 	.word	0x200071a0

0801a534 <_isatty_r>:
 801a534:	b538      	push	{r3, r4, r5, lr}
 801a536:	4d06      	ldr	r5, [pc, #24]	; (801a550 <_isatty_r+0x1c>)
 801a538:	2300      	movs	r3, #0
 801a53a:	4604      	mov	r4, r0
 801a53c:	4608      	mov	r0, r1
 801a53e:	602b      	str	r3, [r5, #0]
 801a540:	f7e8 fe91 	bl	8003266 <_isatty>
 801a544:	1c43      	adds	r3, r0, #1
 801a546:	d102      	bne.n	801a54e <_isatty_r+0x1a>
 801a548:	682b      	ldr	r3, [r5, #0]
 801a54a:	b103      	cbz	r3, 801a54e <_isatty_r+0x1a>
 801a54c:	6023      	str	r3, [r4, #0]
 801a54e:	bd38      	pop	{r3, r4, r5, pc}
 801a550:	200071a0 	.word	0x200071a0

0801a554 <_malloc_usable_size_r>:
 801a554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a558:	1f18      	subs	r0, r3, #4
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	bfbc      	itt	lt
 801a55e:	580b      	ldrlt	r3, [r1, r0]
 801a560:	18c0      	addlt	r0, r0, r3
 801a562:	4770      	bx	lr

0801a564 <_init>:
 801a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a566:	bf00      	nop
 801a568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a56a:	bc08      	pop	{r3}
 801a56c:	469e      	mov	lr, r3
 801a56e:	4770      	bx	lr

0801a570 <_fini>:
 801a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a572:	bf00      	nop
 801a574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a576:	bc08      	pop	{r3}
 801a578:	469e      	mov	lr, r3
 801a57a:	4770      	bx	lr
